OSStatus AudioDeviceStop(AudioObjectID inDevice, AudioDeviceIOProcID inProcID)
{
  HALS_ObjectMap *v3;
  HALS_ObjectMap *v4;
  HALS_Object *v5;
  HALS_ObjectMap *v6;
  int v7;
  int v8;
  int v9;
  HALS_Object *v11;
  int v13;
  _DWORD *exception;
  int v15;
  const char *v16;
  __int16 v17;
  int v18;
  uint64_t v19;

  v3 = *(HALS_ObjectMap **)&inDevice;
  v19 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    v6 = v4;
    if (v4)
    {
      v8 = *((_DWORD *)v4 + 5);
      v7 = *((_DWORD *)v4 + 6);
      if (v8 <= 1701078389)
      {
        if (v8 == 1633773415)
        {
LABEL_11:
          (*(void (**)(HALS_ObjectMap *, AudioDeviceIOProcID))(*(void *)v4 + 896))(v4, inProcID);
          HALS_ObjectMap::ReleaseObject(v6, v11);
          return 0;
        }
        v9 = 1633969526;
      }
      else
      {
        if (v8 == 1701078390 || v8 == 1701733488) {
          goto LABEL_11;
        }
        v9 = 1919182198;
      }
      if (v8 == v9) {
        goto LABEL_11;
      }
      if (v8 != v7)
      {
        if (v7 <= 1701078389)
        {
          if (v7 == 1633773415) {
            goto LABEL_11;
          }
          v13 = 1633969526;
        }
        else
        {
          if (v7 == 1701078390 || v7 == 1701733488) {
            goto LABEL_11;
          }
          v13 = 1919182198;
        }
        if (v7 == v13) {
          goto LABEL_11;
        }
      }
      HALS_ObjectMap::ReleaseObject(v4, v5);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      v15 = 136315394;
      v16 = "HALS_Framework-ios-imp.cpp";
      v17 = 1024;
      v18 = 2127;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceStop: no device with given ID", (uint8_t *)&v15, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  return 560033144;
}

void sub_1BAA7A1CC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA7A1E4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA7A074);
  }
  JUMPOUT(0x1BAA7A1D4);
}

void sub_1BAA7A234()
{
}

Boolean AudioObjectHasProperty(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  v3 = *(HALS_ObjectMap **)&inObjectID;
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 0;
  }
  HALS_System::StartServer(&v27.mElement, 0);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (!inAddress)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      v30 = "HALS_Framework-ios-imp.cpp";
      __int16 v31 = 1024;
      int v32 = 437;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectHasProperty: the address pointer is NULL", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v4 = (HALS_Device *)HALS_ObjectMap::CopyObjectByObjectID(v3);
  v6 = v4;
  if (!v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315650;
      v30 = "HALS_Framework-ios-imp.cpp";
      __int16 v31 = 1024;
      int v32 = 441;
      __int16 v33 = 1024;
      int v34 = (int)v3;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectHasProperty: no object with given ID %u", buf, 0x18u);
    }
    v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)v22 = off_1F148A5D8;
    v22[2] = 560947818;
  }
  int v7 = *((_DWORD *)v4 + 5);
  if (v7 <= 1701078389)
  {
    if (v7 == 1633773415) {
      goto LABEL_13;
    }
    int v8 = 1633969526;
  }
  else
  {
    if (v7 == 1701078390 || v7 == 1701733488) {
      goto LABEL_13;
    }
    int v8 = 1919182198;
  }
  if (v7 != v8)
  {
    int v19 = *((_DWORD *)v4 + 6);
    if (v7 != v19)
    {
      if (v19 <= 1701078389)
      {
        if (v19 == 1633773415) {
          goto LABEL_13;
        }
        int v20 = 1633969526;
      }
      else
      {
        if (v19 == 1701078390 || v19 == 1919182198) {
          goto LABEL_13;
        }
        int v20 = 1701733488;
      }
      if (v19 == v20) {
        goto LABEL_13;
      }
    }
    Boolean v17 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v4 + 88))(v4, v3, inAddress, 0);
    goto LABEL_25;
  }
LABEL_13:
  *(void *)&v27.mSelector = 0;
  int v26 = 0;
  *(void *)v25 = 0;
  HALB_Info::TranslateDeviceAddressToControlAddress((int *)inAddress, (const AudioObjectPropertyAddress *)&v27.mScope, &v27.mSelector, v25, v5);
  if (v27.mScope)
  {
    v9 = (unsigned int *)(*(uint64_t (**)(HALS_Device *))(*(void *)v6 + 640))(v6);
    v10 = (HALS_ObjectMap *)v9;
    if (v9)
    {
      v3 = (HALS_ObjectMap *)v9[4];
      inAddress = (const AudioObjectPropertyAddress *)v25;
    }
    else
    {
      v9 = (unsigned int *)v6;
    }
    Boolean v14 = (*(uint64_t (**)(unsigned int *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v9 + 88))(v9, v3, inAddress, 0);
    HALS_ObjectMap::ReleaseObject(v10, v18);
    goto LABEL_26;
  }
  if ((HALB_Info::IsIOContextProperty((HALB_Info *)inAddress->mSelector, 0) & 1) != 0
    && (*(unsigned int (**)(HALS_Device *))(*(void *)v6 + 832))(v6))
  {
    InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(v6);
    uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
    v13 = (HALS_ObjectMap *)v12;
    if (!v12)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v30 = "HALS_Framework-ios-imp.cpp";
        __int16 v31 = 1024;
        int v32 = 475;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectHasProperty: no IO Context with given description", buf, 0x12u);
      }
      v23 = __cxa_allocate_exception(0x10uLL);
      *(void *)v23 = off_1F148A5D8;
      v23[2] = 2003332927;
    }
    Boolean v14 = (*(uint64_t (**)(uint64_t, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v12 + 88))(v12, InternalIOContextID, inAddress, 0);
    HALS_ObjectMap::ReleaseObject(v13, v15);
    goto LABEL_26;
  }
  Boolean v17 = (*(uint64_t (**)(HALS_Device *, HALS_ObjectMap *, const AudioObjectPropertyAddress *, void))(*(void *)v6 + 88))(v6, v3, inAddress, 0);
LABEL_25:
  Boolean v14 = v17;
LABEL_26:
  HALS_ObjectMap::ReleaseObject(v6, v16);
  return v14;
}

uint64_t AudioObjectPropertiesChanged(HALS_ObjectMap *a1, const BOOL *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (AMCP::Feature_Flags::access_run_new_hal(0, a2)) {
    return 1970171760;
  }
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (a3 && !a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2518;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectPropertiesChanged: the number of addresses doesn't match the array size", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v16[0] = 0;
  v16[1] = 0;
  HALS_System::GetInstance(&v17, 0, v16);
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2522;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no system object", buf, 0x12u);
    }
    Boolean v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)Boolean v14 = off_1F148A5D8;
    v14[2] = 1852797029;
  }
  v9 = HALS_System::CopyPlugInByReferenceID(v17, a1);
  v10 = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      int v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2526;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no plug-in with given reference ID", buf, 0x12u);
    }
    v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)v15 = off_1F148A5D8;
    v15[2] = 560947818;
  }
  (*(void (**)(HALS_ObjectMap *, const BOOL *, uint64_t, uint64_t, void))(*(void *)v9 + 296))(v9, a2, a3, a4, 0);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return 0;
}

void sub_1BAA7AB78(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA7AB90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a2)
  {
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA7A928);
  }
  JUMPOUT(0x1BAA7AB80);
}

void sub_1BAA7AC08()
{
}

double CalculateSafetyViolation_Read(HALS_IOClock **a1, unsigned int a2)
{
  unint64_t v6 = 0;
  double v7 = 0.0;
  HALS_IOClock::GetRaw0Time(a1[36], &v7, &v6);
  LODWORD(v2) = *((_DWORD *)a1 + 79);
  return floor(*((double *)a1[36] + 5 * *((unsigned int *)a1[36] + 48) + 26) * (double)(mach_absolute_time() - v6))
       + v7
       - (double)v2
       - (*((double *)a1 + 64)
        + (double)a2);
}

void *___Z31AudioIssueDetectorLibraryLoaderv_block_invoke()
{
  v0 = dlopen("/usr/lib/libAudioIssueDetector.dylib", 1);
  if (v0 || (v0 = dlopen("/usr/local/lib/libAudioIssueDetector.dylib", 1)) != 0)
  {
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorCreate");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorInitialize");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorDispose");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetNodeFormat");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorSetNodeFormatWithDirection");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorReset");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorAnalyzeBuffer");
    AudioIssueDetectorLibraryLoader(void)::libSym = dlsym(v0, "AudioIssueDetectorUpdateReportingSessions");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorRemoveNode");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetUplinkMute");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetDownlinkVolume");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetRouteSpecificDownlinkGainAdjustment");
    AudioIssueDetectorLibraryLoader(void)::libSym = (uint64_t)dlsym(v0, "AudioIssueDetectorSetSmartCaseMicMute");
  }
  result = dlopen("/System/Library/Frameworks/AudioToolbox.framework/libAudioDSP.dylib", 1);
  if (result)
  {
    result = dlsym(result, "RegisterAudioUnits_Analyzer");
    if (result)
    {
      return (void *)((uint64_t (*)(void))result)();
    }
  }
  return result;
}

void HALB_Guard::Locker::~Locker(HALB_Mutex **this)
{
  if (!*((_DWORD *)this + 2)) {
    HALB_Mutex::Unlock(*this);
  }
}

uint64_t HALB_Guard::WaitFor(HALB_Guard *this, unint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((unsigned int *)this + 22);
  if (!v2)
  {
    v5 = (void *)((char *)this + 72);
    unint64_t v6 = (_opaque_pthread_t *)*((void *)this + 9);
    if (v6 == pthread_self())
    {
      if (a2 >= 0x3B9ACA00)
      {
        __darwin_time_t v7 = a2 / 0x3B9ACA00;
        a2 %= 0x3B9ACA00uLL;
      }
      else
      {
        __darwin_time_t v7 = 0;
      }
      v11.tv_sec = v7;
      v11.tv_nsec = a2;
      uint64_t v8 = *((void *)this + 10);
      void *v5 = 0;
      v5[1] = 0;
      uint64_t v9 = pthread_cond_timedwait_relative_np((pthread_cond_t *)this + 2, (pthread_mutex_t *)((char *)this + 8), &v11);
      uint64_t v2 = v9;
      if (!v9 || v9 == 60) {
        goto LABEL_13;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALB_Mutex.cpp";
        __int16 v14 = 1024;
        int v15 = 233;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::Wait: waiting failed", buf, 0x12u);
      }
      if (v2 == 60)
      {
LABEL_13:
        *((void *)this + 10) = v8;
        *((void *)this + 9) = pthread_self();
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v13 = "HALB_Mutex.cpp";
        __int16 v14 = 1024;
        int v15 = 242;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::WaitFor: can't wait with a mutex the thread hasn't locked", buf, 0x12u);
      }
      return 1;
    }
  }
  return v2;
}

void HALB_Guard::NotifyAll(pthread_cond_t *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)&this[1].__opaque[32])
  {
    int v1 = pthread_cond_broadcast(this + 2);
    if (v1)
    {
      int v2 = v1;
      v3[0] = HIBYTE(v1);
      v3[1] = BYTE2(v1);
      v3[2] = BYTE1(v1);
      v3[3] = v1;
      v3[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        v5 = "HALB_Mutex.cpp";
        __int16 v6 = 1024;
        int v7 = 290;
        __int16 v8 = 1024;
        int v9 = v2;
        __int16 v10 = 2080;
        timespec v11 = v3;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::NotifyAll: signaling failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

void HALB_Guard::WaitUntil(HALB_Guard *this, unint64_t a2, BOOL *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  if (!*((_DWORD *)this + 22))
  {
    __int16 v6 = (_opaque_pthread_t *)*((void *)this + 9);
    if (v6 == pthread_self())
    {
      mach_absolute_time();
      unint64_t v7 = __udivti3();
      if (a2 > v7)
      {
        *a3 = 1;
        HALB_Guard::WaitFor(this, a2 - v7);
      }
    }
    else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 136315394;
      int v9 = "HALB_Mutex.cpp";
      __int16 v10 = 1024;
      int v11 = 266;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::WaitUntil: can't wait with a mutex the thread hasn't locked", (uint8_t *)&v8, 0x12u);
    }
  }
}

uint64_t ___ZN11HALS_IOProc4CallEjPK14AudioTimeStampPK15AudioBufferListS2_PS3_S2__block_invoke(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(*(void *)(a1[4] + 24) + 16))(*(void *)(a1[4] + 24), a1[5], a1[6], a1[7], a1[8], a1[9]);
}

void sub_1BAA7B308(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOClock::ResetFilter(HALS_IOClock *this, double a2, double a3)
{
  int v3 = *((_DWORD *)this + 45);
  if (v3 != 1918990199)
  {
    if (v3 == 1835103847)
    {
      v5 = (char *)*((void *)this + 68);
      __int16 v6 = (unsigned char *)*((void *)this + 67);
      int64_t v7 = v5 - v6;
      unint64_t v8 = *((unsigned int *)this + 143);
      if (v8 != (v5 - v6) >> 3)
      {
        uint64_t v9 = v7 >> 3;
        unint64_t v10 = v8 - (v7 >> 3);
        if (v8 <= v7 >> 3)
        {
          if (v8 < v7 >> 3) {
            *((void *)this + 68) = &v6[8 * v8];
          }
        }
        else
        {
          uint64_t v11 = *((void *)this + 69);
          if (v10 <= (v11 - (uint64_t)v5) >> 3)
          {
            v24 = &v5[8 * v10];
            uint64_t v25 = 8 * v8 - 8 * v9;
            do
            {
              *(void *)v5 = 0;
              v5 += 8;
              v25 -= 8;
            }
            while (v25);
            *((void *)this + 68) = v24;
          }
          else
          {
            unint64_t v12 = (v11 - (uint64_t)v6) >> 2;
            if (v12 <= v8) {
              unint64_t v12 = *((unsigned int *)this + 143);
            }
            if ((unint64_t)(v11 - (void)v6) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v12;
            }
            __int16 v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
            uint64_t v16 = &v14[8 * v9];
            Boolean v17 = &v14[8 * v8];
            uint64_t v18 = 8 * v8 - 8 * v9;
            int v19 = v16;
            do
            {
              *(void *)int v19 = 0;
              v19 += 8;
              v18 -= 8;
            }
            while (v18);
            int v20 = &v14[8 * v15];
            __int16 v21 = (char *)*((void *)this + 68);
            int v22 = (char *)*((void *)this + 67);
            while (v21 != v22)
            {
              uint64_t v23 = *((void *)v21 - 1);
              v21 -= 8;
              *((void *)v16 - 1) = v23;
              v16 -= 8;
            }
            *((void *)this + 67) = v16;
            *((void *)this + 68) = v17;
            *((void *)this + 69) = v20;
            if (v22) {
              operator delete(v22);
            }
          }
        }
        __int16 v6 = (unsigned char *)*((void *)this + 67);
        int64_t v7 = 8 * *((unsigned int *)this + 143);
      }
      bzero(v6, v7);
      *((void *)this + 66) = 0;
      *((void *)this + 70) = 0;
      *((_DWORD *)this + 142) = 0;
    }
    else
    {
      LODWORD(a3) = *((_DWORD *)this + 44);
      *((double *)this + 72) = (double)*(unint64_t *)&a3 * a2;
    }
  }
}

uint64_t HALS_IOClock::Update(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 40 * *(unsigned int *)(a1 + 192);
  double v5 = *(double *)(v4 + 200);
  uint64_t v6 = *(void *)(v4 + 224);
  uint64_t v7 = *(void *)(v4 + 232);
  double v8 = *(double *)a2;
  unint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  LODWORD(v2) = *(_DWORD *)(a1 + 88);
  unsigned int v11 = *(_DWORD *)(a1 + 96);
  uint64_t v12 = *(void *)(a1 + 160);
  BOOL v13 = v9 != v12 && *(double *)a2 != *(double *)(a1 + 152);
  BOOL v14 = v9 != v12 || *(double *)a2 != *(double *)(a1 + 152);
  if (!v11)
  {
    uint64_t v15 = 0;
LABEL_16:
    *(void *)(a1 + 104) = v10;
    char v16 = 1;
    goto LABEL_17;
  }
  if (v10 != *(void *)(a1 + 104))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v86, "com.apple.coreaudio", "AMCP");
    Boolean v17 = *(caulk::concurrent::messenger **)(v86 + 8);
    uint64_t v18 = pthread_self();
    mach_port_t v19 = pthread_mach_thread_np(v18);
    uint64_t v20 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v20 + 16) = 0;
    *(unsigned char *)(v20 + 20) = 0;
    *(_DWORD *)(v20 + 24) = v19;
    *(void *)(v20 + 32) = "HALS_IOClock.cpp";
    *(_DWORD *)(v20 + 40) = 137;
    *(void *)uint64_t v20 = &unk_1F14634F0;
    *(void *)(v20 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v17, (caulk::concurrent::message *)v20);
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    kdebug_trace();
    uint64_t v15 = 1;
    goto LABEL_16;
  }
  uint64_t v15 = 0;
  char v16 = 0;
  *(void *)(a1 + 104) = v10;
  if (!*(unsigned char *)(a1 + 168)) {
    BOOL v14 = v13;
  }
LABEL_17:
  HIDWORD(v21) = 0;
  if (v12) {
    BOOL v22 = v8 == 0.0;
  }
  else {
    BOOL v22 = 1;
  }
  if ((!v22 || v9 != 0) && v14)
  {
    v28 = *(AMCP::Log::Scope_Registry **)(a1 + 48);
    if (v28
      && (v28 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v28 + 48))(v28),
          (unint64_t)v28 < v9))
    {
      v29 = v28;
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v86, "com.apple.coreaudio", "AMCP");
      v30 = *(caulk::concurrent::messenger **)(v86 + 8);
      __int16 v31 = pthread_self();
      mach_port_t v32 = pthread_mach_thread_np(v31);
      uint64_t v33 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
      *(_DWORD *)(v33 + 16) = 0;
      *(unsigned char *)(v33 + 20) = 16;
      *(_DWORD *)(v33 + 24) = v32;
      *(void *)(v33 + 32) = "HALS_IOClock.cpp";
      *(_DWORD *)(v33 + 40) = 105;
      *(void *)(v33 + 48) = v9;
      *(void *)(v33 + 56) = v29;
      *(void *)uint64_t v33 = &unk_1F1463498;
      *(void *)(v33 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v30, (caulk::concurrent::message *)v33);
      if (v87) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v87);
      }
      v28 = (AMCP::Log::Scope_Registry *)kdebug_trace();
      if (v16) {
        goto LABEL_39;
      }
    }
    else
    {
      v29 = 0;
      if (v16)
      {
LABEL_39:
        if (v29)
        {
          AMCP::Log::Scope_Registry::get(v28);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v86, "com.apple.coreaudio", "AMCP");
          int v34 = *(caulk::concurrent::messenger **)(v86 + 8);
          uint64_t v35 = pthread_self();
          mach_port_t v36 = pthread_mach_thread_np(v35);
          uint64_t v37 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
          *(_DWORD *)(v37 + 16) = 0;
          *(unsigned char *)(v37 + 20) = 0;
          *(_DWORD *)(v37 + 24) = v36;
          *(void *)(v37 + 32) = "HALS_IOClock.cpp";
          *(_DWORD *)(v37 + 40) = 159;
          *(void *)(v37 + 48) = v9;
          *(void *)(v37 + 56) = v29;
          *(void *)uint64_t v37 = &unk_1F1463548;
          *(void *)(v37 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v34, (caulk::concurrent::message *)v37);
          uint64_t v15 = v15 | 2;
          if (v87) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v87);
          }
        }
LABEL_74:
        LODWORD(v21) = *(_DWORD *)(a1 + 88);
        double v72 = (double)v21;
        double v73 = *(double *)(a1 + 112) * v72;
        *(_DWORD *)(a1 + 96) = 1;
        *(double *)(a1 + 152) = v8;
        *(void *)(a1 + 160) = v9;
        unint64_t v74 = vcvtad_u64_f64(v73);
        *(double *)(a1 + 136) = v8 - v72;
        unint64_t v75 = v9 - v74;
        *(void *)(a1 + 144) = v9 - v74;
        *(double *)(a1 + 120) = v8 - v72 - v72;
        unint64_t v76 = v9 - v74 - v74;
        *(void *)(a1 + 128) = v76;
        uint64_t v6 = *(void *)(a1 + 136);
        unint64_t v27 = v75;
        double v57 = (double)*(unsigned int *)(a1 + 176);
        double v59 = (double)(v75 - v76);
        goto LABEL_75;
      }
    }
    if (*(unsigned char *)(a1 + 168)) {
      goto LABEL_39;
    }
    double v38 = (double)v2;
    double v39 = *(double *)(a1 + 152);
    double v40 = v39 + v38;
    if (v11 < 4)
    {
      unint64_t v42 = *(void *)(a1 + 160);
      if (v8 == v40 && v9 > v42) {
        goto LABEL_59;
      }
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v86, "com.apple.coreaudio", "AMCP");
      v45 = *(caulk::concurrent::messenger **)(v86 + 8);
      v46 = pthread_self();
      mach_port_t v47 = pthread_mach_thread_np(v46);
      double v48 = *(double *)(a1 + 152);
      unint64_t v49 = *(void *)(a1 + 160);
      uint64_t v50 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 88, 8);
      v51 = "is";
      v52 = "not";
      if (v9 > v42) {
        v52 = "is";
      }
      *(_DWORD *)(v50 + 16) = 0;
      *(unsigned char *)(v50 + 20) = 0;
      *(_DWORD *)(v50 + 24) = v47;
      *(void *)(v50 + 32) = "HALS_IOClock.cpp";
      *(_DWORD *)(v50 + 40) = 211;
      if (v8 != v40) {
        v51 = "is not";
      }
      *(void *)(v50 + 48) = v51;
      *(void *)(v50 + 56) = v52;
      *(double *)(v50 + 64) = v38;
      *(double *)(v50 + 72) = v8 - v48;
      *(double *)(v50 + 80) = (double)v9 - (double)v49;
      *(void *)uint64_t v50 = &unk_1F14635F8;
      *(void *)(v50 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v45, (caulk::concurrent::message *)v50);
    }
    else
    {
      double v41 = round(v5 * v38);
      unint64_t v42 = *(void *)(a1 + 160);
      if (v29) {
        unint64_t v9 = v42 + (unint64_t)v41;
      }
      if (*(unsigned char *)(a1 + 92)) {
        unint64_t v43 = (unint64_t)v41 - 48000;
      }
      else {
        unint64_t v43 = (v42 - *(void *)(a1 + 144)) / 0xA;
      }
      unint64_t v53 = v43 + v42;
      if (v8 == v40 && v9 >= v53)
      {
LABEL_59:
        int v54 = *(_DWORD *)(a1 + 96);
        *(void *)(a1 + 120) = *(void *)(a1 + 136);
        *(void *)(a1 + 128) = *(void *)(a1 + 144);
        *(double *)(a1 + 136) = v39;
        *(void *)(a1 + 144) = v42;
        *(double *)(a1 + 152) = v8;
        *(void *)(a1 + 160) = v9;
        BOOL v55 = __CFADD__(v54, 1);
        unsigned int v56 = v54 + 1;
        *(_DWORD *)(a1 + 96) = v56;
        if (v55) {
          return v15;
        }
        uint64_t v6 = *(void *)(a1 + 136);
        double v57 = (double)*(unsigned int *)(a1 + 176);
        unint64_t v27 = *(void *)(a1 + 144);
        unint64_t v58 = v27 - *(void *)(a1 + 128);
        double v59 = (double)v58;
        if (v56 != 1)
        {
          int v60 = *(_DWORD *)(a1 + 180);
          double v61 = (double)v58;
          if (v60 != 1918990199)
          {
            if (v60 == 1835103847)
            {
              unint64_t v62 = *(void *)(a1 + 560);
              uint64_t v63 = *(unsigned int *)(a1 + 572);
              uint64_t v64 = *(unsigned int *)(a1 + 568);
              uint64_t v65 = *(void *)(a1 + 536);
              if (v62 == v63) {
                *(double *)(a1 + 528) = *(double *)(a1 + 528) - *(double *)(v65 + 8 * v64);
              }
              else {
                ++v62;
              }
              *(double *)(v65 + 8 * v64) = v59;
              double v83 = *(double *)(a1 + 528) + v59;
              *(double *)(a1 + 528) = v83;
              *(void *)(a1 + 560) = v62;
              if (v64 + 1 == v63) {
                int v84 = 0;
              }
              else {
                int v84 = v64 + 1;
              }
              *(_DWORD *)(a1 + 568) = v84;
              double v61 = v83 / (double)v62;
            }
            else
            {
              double v82 = 0.25;
              if (v56 >= 5)
              {
                double v82 = 0.5;
                if (v56 >= 9)
                {
                  double v82 = 0.75;
                  if (v56 >= 0x11) {
                    double v82 = dbl_1BAFF9480[v56 < 0x81];
                  }
                }
              }
              double v61 = (1.0 - v82) * v59 + v82 * *(double *)(a1 + 576);
              *(double *)(a1 + 576) = v61;
            }
          }
          double v85 = v61 / v57;
          unint64_t v27 = v7 + (unint64_t)v59;
          *(double *)(a1 + 592) = v85 - v5;
          *(void *)(a1 + 600) = (unint64_t)v59 - vcvtad_u64_f64(v5 * v57);
          double v26 = v5 + v85 - v5;
          *(_DWORD *)(a1 + 584) = 0;
          goto LABEL_76;
        }
LABEL_75:
        double v26 = v59 / v57;
        HALS_IOClock::ResetFilter((HALS_IOClock *)a1, v59 / v57, v59);
        *(_DWORD *)(a1 + 584) = 0;
        *(_OWORD *)(a1 + 592) = 0u;
LABEL_76:
        kdebug_trace();
        kdebug_trace();
        goto LABEL_77;
      }
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v86, "com.apple.coreaudio", "AMCP");
      v66 = *(caulk::concurrent::messenger **)(v86 + 8);
      v67 = pthread_self();
      mach_port_t v68 = pthread_mach_thread_np(v67);
      uint64_t v69 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
      v70 = "";
      if (v9 >= v53) {
        v71 = "";
      }
      else {
        v71 = " not";
      }
      if (v8 != v40) {
        v70 = " not";
      }
      *(_DWORD *)(v69 + 16) = 0;
      *(unsigned char *)(v69 + 20) = 0;
      *(_DWORD *)(v69 + 24) = v68;
      *(void *)(v69 + 32) = "HALS_IOClock.cpp";
      *(_DWORD *)(v69 + 40) = 200;
      *(void *)(v69 + 48) = v70;
      *(void *)(v69 + 56) = v71;
      *(void *)uint64_t v69 = &unk_1F14635A0;
      *(void *)(v69 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v66, (caulk::concurrent::message *)v69);
    }
    if (v87) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v87);
    }
    kdebug_trace();
    uint64_t v15 = v15 | 4;
    goto LABEL_74;
  }
  if (!*(_DWORD *)(a1 + 96)) {
    return v15;
  }
  int v25 = *(_DWORD *)(a1 + 584);
  if (!v25) {
    return v15;
  }
  double v26 = v5 + *(double *)(a1 + 592);
  unint64_t v27 = *(void *)(a1 + 600) + v7;
  *(_DWORD *)(a1 + 584) = v25 - 1;
LABEL_77:
  v77 = (atomic_uint *)(a1 + 192);
  int v78 = *(_DWORD *)(a1 + 192);
  if ((v78 + 1) < *(_DWORD *)(a1 + 188)) {
    unsigned int v79 = v78 + 1;
  }
  else {
    unsigned int v79 = 0;
  }
  uint64_t v80 = a1 + 40 * v79;
  *(double *)(v80 + 200) = v26;
  *(double *)(v80 + 208) = 1.0 / v26;
  *(double *)(v80 + 216) = v26 / *(double *)(a1 + 112);
  *(void *)(v80 + 224) = v6;
  *(void *)(v80 + 232) = v27;
  __dmb(0xBu);
  LODWORD(v80) = *v77;
  atomic_compare_exchange_strong_explicit(v77, (unsigned int *)&v80, v79, memory_order_relaxed, memory_order_relaxed);
  return v15;
}

void sub_1BAA7BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void HALB_IOThread::Locker::~Locker(HALB_IOThread::Locker *this)
{
  if (!*((_DWORD *)this + 2)) {
    HALB_Mutex::Unlock((HALB_Mutex *)(*(void *)this + 16));
  }
}

void HALB_IOThread::Unlocker::~Unlocker(HALB_IOThread::Unlocker *this)
{
  if (!*((_DWORD *)this + 2)) {
    HALB_Mutex::Lock((HALB_Mutex *)(*(void *)this + 16));
  }
}

uint64_t HALS_IOContext::GetCommandGate(HALS_IOContext *this)
{
  return *((void *)this + 6);
}

{
  return *((void *)this + 6);
}

uint64_t HALS_IOEngine2::ProcessInputStreamData()
{
  return 0;
}

uint64_t HALS_IOEngine2::ProcessOutputStreamData()
{
  return 0;
}

uint64_t HALS_IOEngine2::_AnalyzeStreamForEvents(HALS_IOEngine2 *this, HALS_IOEngine2_StreamInfo *a2, AudioTimeStamp *a3, unsigned int a4)
{
  uint64_t result = HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v22, (uint64_t)a2, (unint64_t)a3->mSampleTime, a4);
  unsigned int v8 = v24;
  uint64_t v9 = v27;
  if (v25) {
    uint64_t v10 = v25 + v26;
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = *(_OWORD *)((char *)a2 + 56);
  long long v19 = *(_OWORD *)((char *)a2 + 40);
  long long v20 = v11;
  uint64_t v21 = *((void *)a2 + 9);
  if (v22)
  {
    uint64_t v12 = *((unsigned int *)a2 + 2);
    long long v13 = *(_OWORD *)((char *)a2 + 56);
    v17[0] = *(_OWORD *)((char *)a2 + 40);
    v17[1] = v13;
    uint64_t v18 = *((void *)a2 + 9);
    uint64_t result = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, AudioTimeStamp *, _OWORD *, void, uint64_t))(*(void *)this + 1328))(this, v12, a3, v17, v24, v22 + v23);
  }
  if (v10)
  {
    a3->mSampleTime = a3->mSampleTime + (double)v8;
    uint64_t v14 = *((unsigned int *)a2 + 2);
    v15[0] = v19;
    v15[1] = v20;
    uint64_t v16 = v21;
    return (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t, AudioTimeStamp *, _OWORD *, uint64_t, uint64_t))(*(void *)this + 1328))(this, v14, a3, v15, v9, v10);
  }
  return result;
}

uint64_t HALS_IOEngine2::_CalculateSizeForQuantize(HALS_IOEngine2 *this)
{
  unsigned int v1 = 2 * this;
  if ((2 * this) < 0x10) {
    return 16;
  }
  uint64_t v3 = 64;
  uint64_t v4 = 128;
  uint64_t v5 = 256;
  uint64_t v6 = 512;
  uint64_t v7 = 1024;
  uint64_t v8 = 4096;
  if (v1 < 0x800) {
    uint64_t v8 = 2048;
  }
  if (v1 >= 0x400) {
    uint64_t v7 = v8;
  }
  if (v1 >= 0x200) {
    uint64_t v6 = v7;
  }
  if (v1 >= 0x100) {
    uint64_t v5 = v6;
  }
  if (v1 >= 0x80) {
    uint64_t v4 = v5;
  }
  if (v1 >= 0x40) {
    uint64_t v3 = v4;
  }
  if (v1 >= 0x20) {
    return v3;
  }
  else {
    return 32;
  }
}

void HALS_IOEngine2::AudioIssueDetectorAnalyzeBuffer(HALS_IOEngine2 *this, uint64_t a2, const AudioTimeStamp *a3, AudioStreamBasicDescription *a4, uint64_t a5, void *a6)
{
  UInt32 mBytesPerFrame = a4->mBytesPerFrame;
  UInt32 mChannelsPerFrame = a4->mChannelsPerFrame;
  if ((a4->mFormatFlags & 0x20) != 0) {
    UInt32 mChannelsPerFrame = 1;
  }
  v15[0] = 1;
  _OWORD v15[2] = mChannelsPerFrame;
  v15[3] = mBytesPerFrame * a5;
  uint64_t v16 = a6;
  uint64_t v8 = (void *)*((void *)this + 6);
  if (v8)
  {
    uint64_t v12 = v8[1];
    uint64_t v13 = v8[2];
    if (v12 != v13)
    {
      while (*(_DWORD *)v12 != a2)
      {
        v12 += 8;
        if (v12 == v13) {
          goto LABEL_10;
        }
      }
    }
    if (v12 == v13 || !*(unsigned char *)(v12 + 4))
    {
LABEL_10:
      uint64_t v14 = v8[4];
      if (AudioIssueDetectorLibraryLoader(void)::once != -1) {
        dispatch_once(&AudioIssueDetectorLibraryLoader(void)::once, &__block_literal_global);
      }
      if (AudioIssueDetectorLibraryLoader(void)::libSym) {
        AudioIssueDetectorLibraryLoader(void)::libSym(v14, a2, 0, v15, a5, a3);
      }
    }
  }
}

double HALS_IOEngine2::GetEarliestCurrentPositionForOutputStream(HALS_IOEngine2 *this, int a2, int a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = (int *)&v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN14HALS_IOEngine241GetEarliestCurrentPositionForOutputStreamEjj_block_invoke;
  v6[3] = &unk_1E6234E98;
  v6[4] = &v9;
  v6[5] = this;
  int v7 = a2;
  int v8 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  double v4 = (double)v10[6];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAA7C1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN14HALS_IOEngine241GetEarliestCurrentPositionForOutputStreamEjj_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (int)(*(double (**)(void, void, void))(**(void **)(a1 + 40) + 1296))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
}

void *HALS_IOEngine2::_GetEarliestCurrentPositionForOutputStream(void *this, int a2, unsigned int a3, __n128 a4)
{
  uint64_t v4 = *(void *)(this[96] + 48);
  unint64_t v5 = (*(void *)(this[96] + 56) - v4) >> 3;
  a4.n128_u64[0] = 0;
  if (v5 > a3)
  {
    if (v5 <= a3) {
      std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v6 = a3;
    uint64_t v7 = *(void *)(v4 + 8 * a3);
    if (v7)
    {
      if (a2)
      {
        int v8 = *(_DWORD *)(v7 + 48);
        int v9 = *(_DWORD *)(v7 + 52) & 0x40;
        if (v8 == 1819304813 && v9 == 0)
        {
          uint64_t v11 = (uint64_t *)this[92];
          int v12 = (uint64_t *)this[93];
          if (v11 != v12)
          {
            uint64_t v13 = (uint64_t *)this[92];
            while (1)
            {
              uint64_t v14 = *v13;
              if (*(_DWORD *)(*(void *)(*v13 + 32) + 16) == a2) {
                break;
              }
              if (++v13 == v12) {
                return this;
              }
            }
            double v15 = 1.79769313e308;
            do
            {
              if (*(unsigned char *)(*v11 + 48))
              {
                uint64_t v16 = *(void *)(*(void *)(*v11 + 32) + 96);
                this = (void *)(*(uint64_t (**)(uint64_t, __n128))(*(void *)v16 + 152))(v16, a4);
                if (this)
                {
                  uint64_t v17 = *v11;
                  if (*v11 != v14)
                  {
                    uint64_t v19 = v17 + 112;
                    uint64_t v18 = *(void *)(v17 + 112);
                    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v19 + 8) - v18) >> 3) > v6)
                    {
                      uint64_t v20 = *(void *)(v18 + 40 * v6 + 32);
                      if (v20 >= 1)
                      {
                        a4.n128_f64[0] = (double)v20;
                        if (v15 > (double)v20) {
                          double v15 = (double)v20;
                        }
                      }
                    }
                  }
                }
              }
              ++v11;
            }
            while (v11 != v12);
          }
        }
      }
    }
  }
  return this;
}

uint64_t HALS_AHPManager::GetCommandGate(HALS_AHPManager *this)
{
  return *((void *)this + 41);
}

{
  return *((void *)this + 41);
}

void HALS_AHPManager::ObjectPropertiesChanged(HALS_AHPManager *this, HALS_ObjectMap *a2, unsigned int a3, const AudioObjectPropertyAddress *a4, HALS_Client *a5)
{
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  if (*((_DWORD *)this + 4) == a2) {
    goto LABEL_3;
  }
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  _OWORD v15[2] = ___ZN15HALS_AHPManager23ObjectPropertiesChangedEjjPK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v15[3] = &unk_1E6234F00;
  int v16 = (int)a2;
  _DWORD v15[4] = &v17;
  v15[5] = this;
  uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(HALS_AHPManager *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v15);
  if (*((unsigned char *)v18 + 24))
  {
LABEL_3:
    uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    uint64_t v13 = (HALS_ObjectMap *)v11;
    if (v11)
    {
      if (a5) {
        uint64_t v14 = *((unsigned int *)a5 + 4);
      }
      else {
        uint64_t v14 = 0;
      }
      HALS_Object::PropertiesChanged_Sync(this, (HALS_NotificationManager *)*(unsigned int *)(v11 + 16), v14, a3, a4);
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
  }
  _Block_object_dispose(&v17, 8);
}

void sub_1BAA7C514(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  HALS_ObjectMap::ReleaseObject(v17, a2);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

__int32 *___ZN15HALS_AHPManager23ObjectPropertiesChangedEjjPK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(__int32 **)(v2 + 392);
  uint64_t result = wmemchr(*(__int32 **)(v2 + 384), *(_DWORD *)(a1 + 48), ((uint64_t)v3 - *(void *)(v2 + 384)) >> 2);
  if (result) {
    unint64_t v5 = result;
  }
  else {
    unint64_t v5 = v3;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5 != *(__int32 **)(v2 + 392);
  return result;
}

void HALS_IOProcessor::Process(HALS_IOProcessor *this, double a2, unsigned __int8 *a3, unsigned int *a4, unsigned __int8 *__dst, unsigned int *a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v13 = a3;
  double v14 = a2;
  if (*((unsigned char *)this + 8))
  {
    uint64_t v16 = *((void *)this + 19);
    if (v16)
    {
      double v65 = a2;
      v66[0] = a3;
      v66[1] = a4;
      v67[0] = __dst;
      v67[1] = a6;
      mach_port_t v68 = a7;
      uint64_t v69 = a8;
      uint64_t v17 = *(void *)(v16 + 64);
      for (uint64_t i = *(void *)(v16 + 72); v17 != i; v17 += 16)
      {
        uint64_t v19 = *(void *)(v17 + 8);
        if (v19)
        {
          int v20 = *(_DWORD *)(v17 + 4);
          if ((v20 & 0x40) != 0) {
            uint64_t v21 = v68;
          }
          else {
            uint64_t v21 = 0;
          }
          if ((v20 & 8) != 0) {
            uint64_t v22 = v66;
          }
          else {
            uint64_t v22 = 0;
          }
          if ((v20 & 4) != 0) {
            unsigned int v23 = v67;
          }
          else {
            unsigned int v23 = v22;
          }
          if ((v20 & 2) != 0) {
            unsigned int v24 = v66;
          }
          else {
            unsigned int v24 = 0;
          }
          if (v20) {
            uint64_t v25 = v67;
          }
          else {
            uint64_t v25 = v24;
          }
          (*(void (**)(uint64_t, void *, void *, unsigned __int8 *, double))(*(void *)v19 + 16))(v19, v25, v23, v21, v65);
        }
      }
    }
    else
    {
      switch(*((_DWORD *)this + 26))
      {
        case 1:
          unsigned int v27 = (HALS_VolumeProcessor *)*((void *)this + 14);
          unsigned int v28 = *a6;
          if (a3 != __dst) {
            goto LABEL_36;
          }
          unsigned int v29 = *a6;
          goto LABEL_83;
        case 2:
          goto LABEL_40;
        case 3:
          goto LABEL_39;
        case 8:
          v30 = (HALS_DelayProcessor *)*((void *)this + 17);
          if (a3 == __dst) {
            HALS_DelayProcessor::Process(v30, a3, *a6);
          }
          else {
            HALS_DelayProcessor::Process(v30, __dst, a3, *a6);
          }
          goto LABEL_84;
        case 9:
          __int16 v31 = (HALS_DelayProcessor *)*((void *)this + 17);
          int v32 = *a6;
          if (a3 == __dst)
          {
            HALS_DelayProcessor::Process(v31, a3, v32);
            unsigned int v27 = (HALS_VolumeProcessor *)*((void *)this + 14);
            unsigned int v29 = *a6;
            a2 = v14;
            a3 = v13;
LABEL_83:
            HALS_VolumeProcessor::Process(v27, a2, a3, v29);
          }
          else
          {
            HALS_DelayProcessor::Process(v31, __dst, v32);
            unsigned int v27 = (HALS_VolumeProcessor *)*((void *)this + 14);
            unsigned int v28 = *a6;
LABEL_36:
            HALS_VolumeProcessor::Process(v27, v14, (float *)__dst, v13, v28);
          }
          goto LABEL_84;
        case 0xA:
          HALS_DelayProcessor::Process(*((HALS_DelayProcessor **)this + 17), __dst, *a6);
          goto LABEL_40;
        case 0xB:
          HALS_DelayProcessor::Process(*((HALS_DelayProcessor **)this + 17), __dst, *a6);
LABEL_39:
          HALS_VolumeProcessor::Process(*((HALS_VolumeProcessor **)this + 14), v14, __dst, *a6);
LABEL_40:
          uint64_t v33 = (HALS_Resampler *)*((void *)this + 16);
          int v34 = __dst;
          uint64_t v35 = a6;
          mach_port_t v36 = v13;
          uint64_t v37 = a4;
          goto LABEL_51;
        default:
          if (__dst == a3) {
            return;
          }
          if (!*((unsigned char *)this + 10))
          {
            size_t v63 = *((unsigned int *)this + 3);
            uint64_t v64 = a3;
            a3 = __dst;
            goto LABEL_100;
          }
          memcpy(a3, __dst, *((_DWORD *)this + 3) * *a6);
LABEL_84:
          unsigned int v61 = *a6;
          break;
      }
LABEL_85:
      *a4 = v61;
    }
  }
  else
  {
    switch(*((_DWORD *)this + 26))
    {
      case 1:
        unsigned int v26 = (HALS_VolumeProcessor *)*((void *)this + 14);
        if (__dst != a3)
        {
          HALS_VolumeProcessor::Process(v26, a2, (float *)a3, __dst, *a4);
          goto LABEL_90;
        }
        unsigned int v62 = *a4;
        goto LABEL_89;
      case 2:
        goto LABEL_50;
      case 3:
        goto LABEL_54;
      case 4:
        goto LABEL_57;
      case 5:
        goto LABEL_61;
      case 6:
        goto LABEL_66;
      case 7:
        goto LABEL_74;
      case 8:
        double v38 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (__dst == a3) {
          HALS_DelayProcessor::Process(v38, a3, *a4);
        }
        else {
          HALS_DelayProcessor::Process(v38, a3, __dst, *a4);
        }
        goto LABEL_90;
      case 9:
        double v39 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (__dst == a3)
        {
          HALS_DelayProcessor::Process(v39, a3, *a4);
          unsigned int v26 = (HALS_VolumeProcessor *)*((void *)this + 14);
          unsigned int v62 = *a4;
          a2 = v14;
          a3 = v13;
LABEL_89:
          HALS_VolumeProcessor::Process(v26, a2, a3, v62);
          goto LABEL_90;
        }
        HALS_DelayProcessor::Process(v39, a3, __dst, *a4);
LABEL_63:
        unsigned int v57 = *a4;
        *a6 = *a4;
        unint64_t v58 = (HALS_VolumeProcessor *)*((void *)this + 14);
        goto LABEL_78;
      case 0xA:
        double v40 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (!*((unsigned char *)this + 9))
        {
          HALS_DelayProcessor::Process(v40, a3, a7, *a4);
          goto LABEL_67;
        }
        HALS_DelayProcessor::Process(v40, a3, *a4);
LABEL_50:
        uint64_t v33 = (HALS_Resampler *)*((void *)this + 16);
        int v34 = v13;
        uint64_t v35 = a4;
        mach_port_t v36 = __dst;
        uint64_t v37 = a6;
LABEL_51:
        double v41 = a7;
        goto LABEL_69;
      case 0xB:
        unint64_t v42 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (!*((unsigned char *)this + 9))
        {
          HALS_DelayProcessor::Process(v42, a3, a7, *a4);
          goto LABEL_75;
        }
        HALS_DelayProcessor::Process(v42, a3, *a4);
LABEL_54:
        unint64_t v43 = (HALS_Resampler *)*((void *)this + 16);
        v44 = v13;
        v45 = a4;
        v46 = __dst;
        mach_port_t v47 = a6;
        double v48 = a7;
        goto LABEL_77;
      case 0xC:
        unint64_t v49 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (*((unsigned char *)this + 9))
        {
          HALS_DelayProcessor::Process(v49, a3, *a4);
LABEL_57:
          uint64_t v50 = (HALS_ChannelMapper *)*((void *)this + 15);
          UInt32 v51 = *a4;
          v52 = v13;
        }
        else
        {
          HALS_DelayProcessor::Process(v49, a3, a7, *a4);
          uint64_t v50 = (HALS_ChannelMapper *)*((void *)this + 15);
          UInt32 v51 = *a4;
          v52 = a7;
        }
        HALS_ChannelMapper::Process(v50, v52, __dst, v51);
        goto LABEL_90;
      case 0xD:
        unint64_t v53 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (*((unsigned char *)this + 9))
        {
          HALS_DelayProcessor::Process(v53, a3, *a4);
LABEL_61:
          int v54 = (HALS_ChannelMapper *)*((void *)this + 15);
          UInt32 v55 = *a4;
          unsigned int v56 = v13;
        }
        else
        {
          HALS_DelayProcessor::Process(v53, a3, a7, *a4);
          int v54 = (HALS_ChannelMapper *)*((void *)this + 15);
          UInt32 v55 = *a4;
          unsigned int v56 = a7;
        }
        HALS_ChannelMapper::Process(v54, v56, __dst, v55);
        goto LABEL_63;
      case 0xE:
        double v59 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (*((unsigned char *)this + 9))
        {
          HALS_DelayProcessor::Process(v59, a3, *a4);
LABEL_66:
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), v13, a7, *a4);
LABEL_67:
          uint64_t v33 = (HALS_Resampler *)*((void *)this + 16);
          int v34 = a7;
        }
        else
        {
          HALS_DelayProcessor::Process(v59, a3, a7, *a4);
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), a7, a8, *a4);
          uint64_t v33 = (HALS_Resampler *)*((void *)this + 16);
          int v34 = a8;
        }
        uint64_t v35 = a4;
        mach_port_t v36 = __dst;
        uint64_t v37 = a6;
        double v41 = a8;
LABEL_69:
        HALS_Resampler::Process(v33, v34, v35, v36, v37, v41);
        return;
      case 0xF:
        int v60 = (HALS_DelayProcessor *)*((void *)this + 17);
        if (*((unsigned char *)this + 9))
        {
          HALS_DelayProcessor::Process(v60, a3, *a4);
LABEL_74:
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), v13, a7, *a4);
LABEL_75:
          unint64_t v43 = (HALS_Resampler *)*((void *)this + 16);
          v44 = a7;
        }
        else
        {
          HALS_DelayProcessor::Process(v60, a3, a7, *a4);
          HALS_ChannelMapper::Process(*((HALS_ChannelMapper **)this + 15), a7, a8, *a4);
          unint64_t v43 = (HALS_Resampler *)*((void *)this + 16);
          v44 = a8;
        }
        v45 = a4;
        v46 = __dst;
        mach_port_t v47 = a6;
        double v48 = a8;
LABEL_77:
        HALS_Resampler::Process(v43, v44, v45, v46, v47, v48);
        unint64_t v58 = (HALS_VolumeProcessor *)*((void *)this + 14);
        unsigned int v57 = *a6;
LABEL_78:
        HALS_VolumeProcessor::Process(v58, v14, __dst, v57);
        return;
      default:
        if (__dst == a3) {
          return;
        }
        if (!*((unsigned char *)this + 10))
        {
          size_t v63 = *((unsigned int *)this + 3);
          uint64_t v64 = __dst;
LABEL_100:
          memcpy(v64, a3, v63);
          *a6 = *((_DWORD *)this + 4);
          unsigned int v61 = *((_DWORD *)this + 4);
          goto LABEL_85;
        }
        memcpy(__dst, a3, *((_DWORD *)this + 3) * *a4);
LABEL_90:
        *a6 = *a4;
        break;
    }
  }
}

BOOL CAPropertyAddress::IsCongruentAddress(CAPropertyAddress *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3)
{
  int v3 = *((_DWORD *)this + 1);
  AudioObjectPropertyScope mScope = a2->mScope;
  if (mScope != 707406378 && v3 != 707406378 && v3 != mScope) {
    return 0;
  }
  int v7 = *(_DWORD *)this;
  BOOL v8 = a2->mSelector == 707406378 || v7 == 707406378;
  if (!v8 && v7 != a2->mSelector) {
    return 0;
  }
  int v10 = *((_DWORD *)this + 2);
  AudioObjectPropertyElement mElement = a2->mElement;
  return v10 == -1 || v10 == mElement || mElement == -1;
}

void HALS_VolumeProcessor::Process(HALS_VolumeProcessor *this, double a2, unsigned __int8 *a3, unsigned int a4)
{
  if (!*((unsigned char *)this + 8)) {
    return;
  }
  unsigned int v4 = a4;
  unint64_t v5 = a3;
  double v7 = *((double *)this + 4);
  if (v7 == 0.0)
  {
    *((double *)this + 4) = a2;
    double v7 = a2;
  }
  double v8 = (double)a4 + a2;
  if (v8 < v7)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    goto LABEL_23;
  }
  double v11 = v7 + *((double *)this + 5);
  if (v11 <= a2)
  {
LABEL_45:
    if (v4)
    {
      float v24 = *((float *)this + 6);
      *((float *)this + 5) = v24;
      if (v24 == 0.0)
      {
        bzero(v5, 4 * *((_DWORD *)this + 4) * v4);
      }
      else if (v24 != 1.0)
      {
        float v26 = v24 * v24;
        vDSP_vsmul((const float *)v5, 1, &v26, (float *)v5, 1, *((_DWORD *)this + 4) * v4);
      }
    }
    return;
  }
  if (v7 > a2 && v8 >= v11)
  {
    unsigned int v4 = (v7 - a2);
    unsigned int v9 = (v11 - v7);
    unsigned int v10 = (v8 - v11);
    goto LABEL_23;
  }
  if (v7 <= a2 && v8 < v11)
  {
    unsigned int v10 = 0;
    unsigned int v9 = a4;
LABEL_29:
    if (v9)
    {
      int v16 = 0;
      uint64_t v17 = *((unsigned int *)this + 4);
      uint64_t v18 = 4 * v17;
      while (1)
      {
        if (v17)
        {
          uint64_t v19 = 0;
          do
          {
            *(float *)&v5[v19] = (float)(*((float *)this + 5) * *((float *)this + 5)) * *(float *)&v5[v19];
            v19 += 4;
          }
          while (v18 != v19);
        }
        float v21 = *((float *)this + 5);
        float v20 = *((float *)this + 6);
        float v22 = *((float *)this + 7);
        if (v22 >= 0.0) {
          break;
        }
        if (v21 > v20) {
          goto LABEL_36;
        }
LABEL_37:
        *((float *)this + 5) = v20;
        v5 += v18;
        if (++v16 == v9) {
          goto LABEL_44;
        }
      }
      if (v22 <= 0.0 || v21 >= v20) {
        goto LABEL_37;
      }
LABEL_36:
      float v20 = v21 + v22;
      goto LABEL_37;
    }
LABEL_44:
    unsigned int v4 = v10;
    goto LABEL_45;
  }
  if (v7 > a2 && v8 >= v7 && v8 < v11)
  {
    unsigned int v10 = 0;
    unsigned int v4 = (v7 - a2);
    unsigned int v9 = (v8 - v7);
LABEL_23:
    if (v4)
    {
      float v15 = *((float *)this + 5);
      if (v15 == 0.0)
      {
        bzero(a3, 4 * *((_DWORD *)this + 4) * v4);
      }
      else if (v15 != 1.0)
      {
        float __B = v15 * v15;
        vDSP_vsmul((const float *)a3, 1, &__B, (float *)a3, 1, *((_DWORD *)this + 4) * v4);
      }
      v5 += 4 * *((_DWORD *)this + 4) * v4;
    }
    goto LABEL_29;
  }
  if (v7 <= a2 && v11 > a2 && v8 >= v11)
  {
    unsigned int v9 = (v11 - a2);
    unsigned int v10 = (v8 - v11);
    goto LABEL_29;
  }
}

uint64_t HALS_IOPrewarmManager::Stop(void *a1, int a2)
{
  uint64_t v2 = a1[1];
  if (v2 || *a1)
  {
    if (a2 == 1)
    {
      if (*a1) {
        --*a1;
      }
    }
    else if (!a2)
    {
      if (!v2) {
        return *a1 != 0;
      }
      a1[1] = --v2;
    }
    if (v2) {
      return 2;
    }
    return *a1 != 0;
  }
  return 0;
}

void HALS_NotificationManager::FindObject(HALS_NotificationManager *this, unsigned int a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  double v8 = (HALB_Mutex *)HALS_NotificationManager::sObjectListLock;
  int v9 = HALB_Mutex::Lock((HALB_Mutex *)HALS_NotificationManager::sObjectListLock);
  uint64_t v4 = *(void *)HALS_NotificationManager::sObjectList;
  uint64_t v5 = *(void *)(HALS_NotificationManager::sObjectList + 8);
  if (*(void *)HALS_NotificationManager::sObjectList != v5)
  {
    while (**(_DWORD **)v4 < a2)
    {
      v4 += 16;
      if (v4 == v5) {
        goto LABEL_10;
      }
    }
  }
  if (v4 != v5)
  {
    unint64_t v6 = *(_DWORD **)v4;
    if (**(_DWORD **)v4 == a2)
    {
      uint64_t v7 = *(void *)(v4 + 8);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)this = v6;
      *((void *)this + 1) = v7;
    }
  }
LABEL_10:
  HALB_Mutex::Locker::~Locker(&v8);
}

uint64_t HALS_IOContextDescription::GetIOBufferForStreamAtIndex(HALS_IOContextDescription *this, int a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v3 = *((void *)this + 7);
    if (0x21CFB2B78C13521DLL * ((*((void *)this + 8) - v3) >> 3) > (unint64_t)a3)
    {
      if (!*(_DWORD *)(v3 + 424 * a3 + 108)
        || ((uint64_t v4 = *(uint64_t **)(v3 + 424 * a3 + 112), *(uint64_t **)(v3 + 424 * a3 + 120) != v4)
          ? (BOOL v5 = v4 == 0)
          : (BOOL v5 = 1),
            v5))
      {
        uint64_t v4 = (uint64_t *)(v3 + 424 * a3 + 408);
      }
      uint64_t v6 = *v4;
      if (*(void *)(v6 + 8))
      {
        uint64_t v7 = v3 + 424 * a3;
        return *(void *)(v7 + 56) + *(unsigned int *)(v6 + 308);
      }
    }
  }
  else
  {
    uint64_t v8 = *((void *)this + 10);
    if (a3 < (unint64_t)((*((void *)this + 11) - v8) >> 5))
    {
      int v9 = *(uint64_t **)(v8 + 32 * a3 + 8);
      if (*(uint64_t **)(v8 + 32 * a3 + 16) != v9)
      {
        uint64_t v7 = *v9;
        if (-1944890851
           * ((unint64_t)(*(void *)(*(void *)(v8 + 32 * a3 + 8) + 8) - v7) >> 3))
        {
          if (!*(_DWORD *)(v7 + 108)
            || ((v10 = *(uint64_t **)(v7 + 112), *(uint64_t **)(v7 + 120) != v10) ? (BOOL v11 = v10 == 0) : (BOOL v11 = 1), v11))
          {
            unsigned int v10 = (uint64_t *)(v7 + 408);
          }
          uint64_t v6 = *v10;
          if (*(void *)(*v10 + 8)) {
            return *(void *)(v7 + 56) + *(unsigned int *)(v6 + 308);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t HALS_IOEngine2_IOContextInfo::GetPointersForOutputStreamAtIndex(uint64_t this, unsigned int a2, unint64_t a3, unsigned int a4, unsigned int *a5, float **a6, unsigned int *a7, float **a8)
{
  *a5 = 0;
  *a6 = 0;
  *a7 = 0;
  *a8 = 0;
  uint64_t v8 = *(void *)(this + 112);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(this + 120) - v8) >> 3) > a2)
  {
    unint64_t v9 = *(unsigned int *)(this + 104);
    if (v9)
    {
      if (v9 >= a4)
      {
        uint64_t v10 = *(void *)(v8 + 40 * a2);
        if (v10)
        {
          unint64_t v11 = a3 % v9;
          unint64_t v12 = a3 % v9 * *(unsigned int *)(v8 + 40 * a2 + 12);
          if (a3 % v9 + a4 <= v9)
          {
            *a5 = a4;
            *a6 = (float *)(v10 + 4 * v12);
          }
          else
          {
            *a5 = v9 - v11;
            *a6 = (float *)(v10 + 4 * v12);
            *a7 = v11 + a4 - *(_DWORD *)(this + 104);
            *a8 = *(float **)(*(void *)(this + 112) + 40 * a2);
          }
        }
      }
    }
  }
  return this;
}

void OS::CF::UntypedObject::~UntypedObject(OS::CF::UntypedObject *this)
{
  *(void *)this = &unk_1F1489918;
  unsigned int v1 = (const void *)*((void *)this + 1);
  if (v1) {
    CFRelease(v1);
  }
}

{
  uint64_t vars8;

  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

uint64_t OS::CF::UntypedObject::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(const void **)(a1 + 8);
  *(void *)(a1 + 8) = a2;
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

uint64_t ca::mach::throw_if_mach_error(uint64_t this, const char *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    *(void *)uint64_t v6 = &unk_1F147FD58;
    MEMORY[0x1C1859250](v5, a2, v6, this);
    std::error_category::~error_category((std::error_category *)v6);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v2 = std::runtime_error::what(v5);
      *(_DWORD *)uint64_t v6 = 136315138;
      *(void *)&v6[4] = v2;
      _os_log_error_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%s", v6, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    uint64_t v4 = std::runtime_error::runtime_error(exception, v5);
    v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
    v4[1] = v5[1];
    __cxa_throw(v4, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  return this;
}

void sub_1BAA7D31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::runtime_error a9, uint64_t a10, uint64_t a11, std::error_category a12)
{
}

atomic_uint *ca::sync::semaphore::signal(atomic_uint *this)
{
  if ((atomic_fetch_add_explicit(this + 2, 1u, memory_order_release) & 0x80000000) != 0)
  {
    unsigned int v1 = (const char *)MEMORY[0x1C185A840](*this);
    return (atomic_uint *)ca::mach::throw_if_mach_error((uint64_t)"semaphore_signal failed", v1);
  }
  return this;
}

uint64_t HALS_Device::HasProperty(HALS_Device ***this, const BOOL *a2, const AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a3->mSelector;
  uint64_t v8 = 1;
  if ((int)a3->mSelector > 1768907635)
  {
    if (mSelector <= 1934647618)
    {
      if (mSelector <= 1853059618)
      {
        if (mSelector <= 1819569762)
        {
          if (mSelector == 1768907636) {
            return v8;
          }
          if (mSelector != 1818454126)
          {
            int v9 = 1818850926;
            goto LABEL_117;
          }
        }
        else
        {
          if (mSelector > 1836411235)
          {
            if (mSelector != 1852793963) {
              return 0;
            }
            goto LABEL_99;
          }
          if (mSelector != 1819569763) {
            return 0;
          }
        }
        goto LABEL_108;
      }
      if (mSelector > 1869638758)
      {
        if (mSelector > 1886353265)
        {
          if (mSelector == 1886353266) {
            return v8;
          }
          int v9 = 1919512167;
        }
        else
        {
          if (mSelector == 1869638759) {
            return v8;
          }
          int v9 = 1870098020;
        }
        goto LABEL_117;
      }
      if (mSelector != 1853059619 && mSelector != 1853059700)
      {
        int v9 = 1869180523;
        goto LABEL_117;
      }
      return v8;
    }
    if (mSelector > 1937007733)
    {
      if (mSelector > 1983996970)
      {
        if (mSelector > 1986622323)
        {
          if (mSelector != 1986622324)
          {
            int v9 = 2003136116;
            goto LABEL_117;
          }
          if (!HALS_Device::GetNumberStreamsExcludingReferenceStreams((HALS_Device *)this, 1)) {
            return 0;
          }
          uint64_t v8 = 0;
          if (a4 && a3->mScope == 1768845428)
          {
            unsigned __int8 v30 = atomic_load((unsigned __int8 *)&a4[21].mElement);
            return v30 & 1;
          }
        }
        else
        {
          if (mSelector != 1983996971)
          {
            if (mSelector == 1983997011)
            {
              unsigned int HasProperty = (unsigned __int16)HALS_Device_HostedDSP::HasProperty(this[76], (uint64_t)a3, a4, (HALS_Client *)a4);
              if (HasProperty <= 0x100) {
                LOBYTE(HasProperty) = 0;
              }
              BOOL v13 = HasProperty == 0;
              return !v13;
            }
            return 0;
          }
          if (a4)
          {
            unsigned __int8 v27 = atomic_load((unsigned __int8 *)&a4[21].mElement);
            unsigned int v28 = v27 & 1;
          }
          else
          {
            unsigned int v28 = 0;
          }
          if (a3->mScope == 1768845428) {
            return v28;
          }
          else {
            return 0;
          }
        }
      }
      else
      {
        if (mSelector > 1953653101)
        {
          if (mSelector == 1953653102) {
            return v8;
          }
          int v9 = 1969841184;
          goto LABEL_117;
        }
        if (mSelector == 1937007734) {
          return v8;
        }
        if (mSelector != 1937009955) {
          return 0;
        }
        signed int mSelector = a3->mScope;
        if (mSelector != 1735159650 && mSelector != 1768845428)
        {
          int v9 = 1869968496;
          goto LABEL_117;
        }
      }
      return v8;
    }
    if (mSelector <= 1936092275)
    {
      if (mSelector != 1934647619 && mSelector != 1934647636)
      {
        int v11 = 1935763060;
LABEL_107:
        if (mSelector != v11) {
          return 0;
        }
LABEL_108:
        AudioObjectPropertyScope mScope = a3->mScope;
        BOOL v20 = mScope == 1768845428;
        int v21 = 1869968496;
        return v20 || mScope == v21;
      }
      if ((AMCP::Feature_Flags::force_mock_dsp_type(0, a2) & 1) == 0
        && !AMCP::Feature_Flags::allow_adm_dsp_spatial(0, v24))
      {
        return 0;
      }
    }
    else
    {
      if (mSelector > 1936876643)
      {
        if (mSelector == 1936876644) {
          goto LABEL_97;
        }
        int v10 = 1936879204;
LABEL_96:
        if (mSelector != v10) {
          return 0;
        }
        goto LABEL_97;
      }
      if (mSelector != 1936092276)
      {
        int v11 = 1936482681;
        goto LABEL_107;
      }
    }
    AudioObjectPropertyScope v25 = a3->mScope;
    int v26 = 1869968496;
    return v25 == v26;
  }
  if (mSelector > 1684498540)
  {
    if (mSelector > 1685414762)
    {
      if (mSelector > 1751413615)
      {
        if (mSelector > 1768124269) {
          return 0;
        }
        if (mSelector == 1751413616) {
          return v8;
        }
        int v9 = 1751737454;
      }
      else
      {
        if (mSelector <= 1735356004)
        {
          if (mSelector != 1685414763)
          {
            int v9 = 1735354734;
            goto LABEL_117;
          }
          goto LABEL_99;
        }
        if (mSelector == 1735356005) {
          return v8;
        }
        int v9 = 1751412337;
      }
LABEL_117:
      if (mSelector == v9) {
        return v8;
      }
      return 0;
    }
    if (mSelector <= 1684500593)
    {
      if (mSelector != 1684498541 && mSelector != 1684498544)
      {
        if (mSelector != 1684500589) {
          return 0;
        }
        __int16 v14 = HALS_Device_HostedDSP::HasProperty(this[76], (uint64_t)a3, a4, (HALS_Client *)a4);
        char v15 = v14;
        int v16 = HIBYTE(v14);
        if ((AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, v17) & 1) == 0)
        {
          v31[0] = 0;
          v31[1] = 0;
          HALS_System::GetInstance(&v32, 0, v31);
          int v16 = g_static_start_options == 1 && v16 != 0;
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
        }
        if (v16)
        {
          BOOL v13 = v15 == 0;
          return !v13;
        }
      }
      goto LABEL_72;
    }
    if (mSelector <= 1685278560)
    {
      if (mSelector != 1684500594) {
        return 0;
      }
LABEL_72:
      AudioObjectPropertyScope mScope = a3->mScope;
      BOOL v20 = mScope == 1869968496;
      int v21 = 1768845428;
      return v20 || mScope == v21;
    }
    if (mSelector != 1685278561)
    {
      if (mSelector == 1685278562)
      {
        if (a4) {
          return v8;
        }
        BOOL v13 = *((unsigned char *)this + 616) == 0;
        return !v13;
      }
      return 0;
    }
    AudioObjectPropertyScope v25 = a3->mScope;
    int v26 = 1768845428;
    return v25 == v26;
  }
  if (mSelector <= 1667523954)
  {
    if (mSelector <= 1634758764)
    {
      if (mSelector == 1634429294) {
        return v8;
      }
      if (mSelector == 1634496615) {
        return 0;
      }
      int v9 = 1634755428;
      goto LABEL_117;
    }
    if (mSelector > 1650682994)
    {
      if (mSelector == 1650682995) {
        return v8;
      }
      int v9 = 1667330160;
      goto LABEL_117;
    }
    if (mSelector != 1634758765)
    {
      int v10 = 1634758774;
      goto LABEL_96;
    }
LABEL_97:
    AudioObjectPropertyScope v22 = a3->mScope;
    if (v22 != 1768845428) {
      goto LABEL_100;
    }
    if (((unsigned int (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *))(*this)[67])(this, 1, a4))
    {
      return v8;
    }
LABEL_99:
    AudioObjectPropertyScope v22 = a3->mScope;
LABEL_100:
    if (v22 == 1869968496)
    {
      BOOL v13 = ((unsigned int (*)(HALS_Device ***, void, AudioObjectPropertyAddress *))(*this)[67])(this, 0, a4) == 0;
      return !v13;
    }
    return 0;
  }
  if (mSelector > 1668575851)
  {
    if (mSelector <= 1684301170)
    {
      if (mSelector == 1668575852) {
        return v8;
      }
      int v10 = 1684236338;
      goto LABEL_96;
    }
    if (mSelector == 1684301171) {
      return 0;
    }
    int v11 = 1684434036;
    goto LABEL_107;
  }
  if (mSelector != 1667523955 && mSelector != 1668047219)
  {
    int v9 = 1668049764;
    goto LABEL_117;
  }
  return v8;
}

uint64_t HALS_Device::GetDebugDeviceUID(HALS_Device *this)
{
  return (uint64_t)this + 156;
}

uint64_t HALS_Device::AllowClientAccessToProperty()
{
  return 1;
}

uint64_t HALS_Object::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v3 = *a3;
  BOOL v4 = *a3 == 1870098020 || *a3 == 1937007734;
  unsigned int v5 = v3 == 1869638759 || v4;
  BOOL v6 = v3 == 1650682995 || v3 == 1668047219;
  if (v3 <= 1869638758) {
    return v6;
  }
  else {
    return v5;
  }
}

double HALS_IOClock::GetRaw0Time(HALS_IOClock *this, double *a2, unint64_t *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      BOOL v4 = (void *)((char *)this + 64);
      if (*((char *)this + 87) < 0) {
        BOOL v4 = (void *)*v4;
      }
      *(_DWORD *)buf = 136315650;
      uint64_t v8 = "HALS_IOClock.cpp";
      __int16 v9 = 1024;
      int v10 = 412;
      __int16 v11 = 2080;
      unint64_t v12 = v4;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::GetRaw0Time: no anchor for device %s", buf, 0x1Cu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1937010544;
  }
  double result = *((double *)this + 19);
  *a2 = result;
  *a3 = *((void *)this + 20);
  return result;
}

uint64_t HALS_IOClock::TranslateTime(uint64_t this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AudioTimeStampFlags mFlags = a2->mFlags;
  if ((mFlags & 3) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      AudioObjectPropertyScope v22 = "HALS_IOClock.cpp";
      __int16 v23 = 1024;
      int v24 = 515;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::TranslateTime: have to have either sample time or host time valid on the input", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v18 = 1852797029;
LABEL_34:
    exception[2] = v18;
  }
  if (!*(_DWORD *)(this + 96))
  {
    uint64_t v20 = this;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      uint64_t v19 = (void *)(v20 + 64);
      if (*(char *)(v20 + 87) < 0) {
        uint64_t v19 = (void *)*v19;
      }
      *(_DWORD *)buf = 136315650;
      AudioObjectPropertyScope v22 = "HALS_IOClock.cpp";
      __int16 v23 = 1024;
      int v24 = 516;
      __int16 v25 = 2080;
      int v26 = v19;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::TranslateTime: no anchor for device %s", buf, 0x1Cu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    int v18 = 1937010544;
    goto LABEL_34;
  }
  uint64_t v4 = this + 40 * *(unsigned int *)(this + 192);
  double v5 = *(double *)(v4 + 200);
  Float64 v6 = *(double *)(v4 + 216);
  double v7 = *(double *)(v4 + 224);
  UInt64 v8 = *(void *)(v4 + 232);
  AudioTimeStampFlags v9 = a3->mFlags;
  if (v9)
  {
    if (mFlags)
    {
      double mSampleTime = a2->mSampleTime;
    }
    else
    {
      double mSampleTime = 0.0;
      if ((mFlags & 2) != 0)
      {
        UInt64 mHostTime = a2->mHostTime;
        double v12 = -(double)(v8 - mHostTime);
        BOOL v13 = mHostTime >= v8;
        unint64_t v14 = mHostTime - v8;
        if (v13) {
          double v12 = (double)v14;
        }
        double mSampleTime = v7 + round(v12 / v5);
      }
    }
    a3->double mSampleTime = mSampleTime;
    if ((v9 & 2) == 0)
    {
LABEL_5:
      if ((v9 & 4) == 0) {
        return this;
      }
      goto LABEL_6;
    }
  }
  else if ((v9 & 2) == 0)
  {
    goto LABEL_5;
  }
  if ((mFlags & 2) != 0)
  {
    UInt64 v15 = a2->mHostTime;
  }
  else
  {
    if ((mFlags & 1) == 0)
    {
      a3->UInt64 mHostTime = 0;
      if ((v9 & 4) == 0) {
        return this;
      }
LABEL_6:
      a3->mRateScalar = v6;
      return this;
    }
    double v16 = a2->mSampleTime;
    if (a2->mSampleTime >= v7) {
      UInt64 v15 = v8 + vcvtad_u64_f64(v5 * (v16 - v7));
    }
    else {
      UInt64 v15 = v8 - vcvtad_u64_f64(v5 * (v7 - v16));
    }
  }
  a3->UInt64 mHostTime = v15;
  if ((v9 & 4) != 0) {
    goto LABEL_6;
  }
  return this;
}

UInt64 HALS_IOClock::GetCurrentTime(HALS_IOClock *this, AudioTimeStamp *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      UInt64 v15 = (void *)((char *)this + 64);
      if (*((char *)this + 87) < 0) {
        UInt64 v15 = (void *)*v15;
      }
      int v17 = 136315650;
      int v18 = "HALS_IOClock.cpp";
      __int16 v19 = 1024;
      int v20 = 462;
      __int16 v21 = 2080;
      AudioObjectPropertyScope v22 = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOClock::GetCurrentTime: no anchor for device %s", (uint8_t *)&v17, 0x1Cu);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1937010544;
  }
  unsigned int v3 = *((_DWORD *)this + 48);
  uint64_t v4 = *((void *)this + 79);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  Float64 v6 = (char *)this + 40 * v3;
  double v7 = *((double *)v6 + 25);
  Float64 v8 = *((double *)v6 + 27);
  double v9 = *((double *)v6 + 28);
  unint64_t v10 = *((void *)v6 + 29);
  UInt64 result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 48))(v4);
  AudioTimeStampFlags mFlags = a2->mFlags;
  if ((mFlags & 2) != 0)
  {
    a2->UInt64 mHostTime = result;
    if ((mFlags & 1) == 0)
    {
LABEL_5:
      if ((mFlags & 4) == 0) {
        return result;
      }
      goto LABEL_6;
    }
  }
  else if ((mFlags & 1) == 0)
  {
    goto LABEL_5;
  }
  double v13 = -(double)(v10 - result);
  if (result >= v10) {
    double v13 = (double)(result - v10);
  }
  a2->double mSampleTime = v9 + round(v13 / v7);
  if ((mFlags & 4) != 0) {
LABEL_6:
  }
    a2->mRateScalar = v8;
  return result;
}

uint64_t HALB_IOThread::HasBeenStopped(HALB_IOThread *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_opaque_pthread_t *)*((void *)this + 11);
  if (v2 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    double v5 = "HALB_IOThread.cpp";
    __int16 v6 = 1024;
    int v7 = 38;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::HasBeenStopped: this thread ought to lock the lock", (uint8_t *)&v4, 0x12u);
  }
  return *((unsigned __int8 *)this + 172);
}

void HALB_UCObject::CopyProperty_BOOL(const __CFDictionary **this, const __CFString *a2, BOOL *a3)
{
  CFTypeRef cf = 0;
  if (HALB_UCObject::CopyProperty_CFType(this, a2, &cf))
  {
    CFBooleanRef v4 = (const __CFBoolean *)cf;
    CFTypeID v5 = CFGetTypeID(cf);
    if (v5 == CFBooleanGetTypeID())
    {
      *a3 = CFBooleanGetValue(v4) != 0;
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(v4);
      if (v6 == CFNumberGetTypeID())
      {
        CFBooleanRef v8 = v4;
        char v9 = 0;
        int valuePtr = 0;
        if (v4)
        {
          CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
          BOOL v7 = valuePtr != 0;
        }
        else
        {
          BOOL v7 = 0;
        }
        *a3 = v7;
        CACFNumber::~CACFNumber((CACFNumber *)&v8);
      }
    }
    CFRelease(v4);
  }
}

void sub_1BAA7E2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t HALS_IOEngine2::GetCommandGate(HALS_IOEngine2 *this)
{
  return *((void *)this + 89);
}

{
  return *((void *)this + 89);
}

uint64_t HALS_IOEngine2::GetSafetyOffset(HALS_IOEngine2 *this, char a2)
{
  uint64_t v7 = 0;
  CFBooleanRef v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = ___ZNK14HALS_IOEngine215GetSafetyOffsetEb_block_invoke;
  v5[3] = &unk_1E6234888;
  v5[4] = &v7;
  v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAA7E3CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine215GetSafetyOffsetEb_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(v1
  }
                                                                                + 4
                                                                                * *(unsigned __int8 *)(result + 48)
                                                                                + 20);
  return result;
}

uint64_t HALS_IOEngine2::GetNumberStreams(HALS_IOEngine2 *this, char a2)
{
  uint64_t v7 = 0;
  CFBooleanRef v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = ___ZNK14HALS_IOEngine216GetNumberStreamsEb_block_invoke;
  v5[3] = &unk_1E6234948;
  v5[4] = &v7;
  v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAA7E4D8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine216GetNumberStreamsEb_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1) {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(void *)(v1
  }
                                                                                 + 24
                                                                                 * *(unsigned __int8 *)(result + 48)
                                                                                 + 56)
                                                                     - *(void *)(v1
                                                                                 + 24
                                                                                 * *(unsigned __int8 *)(result + 48)
                                                                                 + 48)) >> 3;
  return result;
}

double HALS_IOEngine2::QuantizeAnchorTime(HALS_IOEngine2 *this, double a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7 = (uint64_t)a2;
  uint64_t v21 = 0;
  long long v19 = 0u;
  *(_OWORD *)int v20 = 0u;
  int v8 = (*(uint64_t (**)(HALS_IOEngine2 *, void))(*(void *)this + 400))(this, 0);
  uint64_t v9 = *(void *)this;
  if (v8)
  {
    int v10 = (*(uint64_t (**)(HALS_IOEngine2 *, void))(v9 + 344))(this, 0);
    (*(void (**)(HALS_IOEngine2 *, void, void, long long *))(*(void *)this + 432))(this, 0, 0, &v19);
    if (DWORD2(v19) == 1819304813)
    {
      unsigned int v11 = v20[0];
      uint64_t v12 = HALS_IOEngine2::_CalculateSizeForQuantize((HALS_IOEngine2 *)LODWORD(v20[0])) / v11;
      uint64_t v13 = (v7 + a4 + v10) % v12;
      uint64_t v14 = v12 - v13;
      if (!v13) {
        uint64_t v14 = 0;
      }
      v7 += v14;
    }
  }
  else if ((*(unsigned int (**)(HALS_IOEngine2 *, uint64_t))(v9 + 400))(this, 1))
  {
    int v15 = (*(uint64_t (**)(HALS_IOEngine2 *, uint64_t))(*(void *)this + 344))(this, 1);
    (*(void (**)(HALS_IOEngine2 *, uint64_t, void, long long *))(*(void *)this + 432))(this, 1, 0, &v19);
    if (DWORD2(v19) == 1819304813)
    {
      unsigned int v16 = v20[0];
      unsigned int v17 = HALS_IOEngine2::_CalculateSizeForQuantize((HALS_IOEngine2 *)LODWORD(v20[0]));
      return (double)(a3 + (uint64_t)v15 + (v7 - (a3 + (uint64_t)v15)) / (v17 / v16) * (v17 / v16));
    }
  }
  return (double)v7;
}

uint64_t HALS_IOEngine2::GetStartingChannelForStreamAtIndex(HALS_IOEngine2 *this, char a2, int a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK14HALS_IOEngine234GetStartingChannelForStreamAtIndexEbj_block_invoke;
  v6[3] = &unk_1E62349C0;
  v6[4] = &v9;
  v6[5] = this;
  char v8 = a2;
  int v7 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOEngine2 *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAA7E810(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK14HALS_IOEngine234GetStartingChannelForStreamAtIndexEbj_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 768);
  if (v1)
  {
    unint64_t v2 = *(unsigned int *)(result + 48);
    uint64_t v4 = (uint64_t *)(v1 + 24 * *(unsigned __int8 *)(result + 52) + 48);
    uint64_t v3 = *v4;
    unint64_t v5 = (v4[1] - *v4) >> 3;
    if (v2 >= v5)
    {
      int v6 = 0;
    }
    else
    {
      if (v5 <= v2) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      int v6 = *(_DWORD *)(*(void *)(v3 + 8 * v2) + 28);
    }
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v6;
  }
  return result;
}

uint64_t HALS_AHPManager::GetReferenceID(HALS_AHPManager *this)
{
  return *((void *)this + 47);
}

BOOL HALS_IOA2Device::HasProperty(const __CFArray **this, unsigned int a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  if (!(*((unsigned int (**)(const __CFArray **, AudioObjectPropertyAddress *, AudioObjectPropertyAddress *))*this
         + 22))(this, a3, a4))return 0;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1668641651)
    {
      if (mSelector > 1818452845)
      {
        if (mSelector == 1818452846)
        {
          uint64_t v42 = 0;
          unint64_t v43 = &v42;
          uint64_t v44 = 0x3802000000;
          v45 = __Block_byref_object_copy__5093;
          v46 = __Block_byref_object_dispose__5094;
          mach_port_t v47 = &unk_1F1489A20;
          uint64_t v48 = 0;
          v39[0] = MEMORY[0x1E4F143A8];
          v39[1] = 0x40000000;
          v39[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_3;
          v39[3] = &unk_1E62315E8;
          v39[4] = &v42;
          v39[5] = this;
          v39[6] = a3;
          long long v19 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v39);
        }
        else
        {
          if (mSelector != 1818455662) {
            goto LABEL_40;
          }
          uint64_t v42 = 0;
          unint64_t v43 = &v42;
          uint64_t v44 = 0x3802000000;
          v45 = __Block_byref_object_copy__5093;
          v46 = __Block_byref_object_dispose__5094;
          mach_port_t v47 = &unk_1F1489A20;
          uint64_t v48 = 0;
          v38[0] = MEMORY[0x1E4F143A8];
          v38[1] = 0x40000000;
          v38[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_4;
          v38[3] = &unk_1E6231610;
          v38[4] = &v42;
          v38[5] = this;
          v38[6] = a3;
          uint64_t v11 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
          HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v38);
        }
        uint64_t HasProperty = v43[6] != 0;
        _Block_object_dispose(&v42, 8);
        int v15 = (OS::CF::UntypedObject *)&v47;
        goto LABEL_47;
      }
      if (mSelector == 1668641652) {
        return OS::CF::ArrayBase<__CFArray const*>::GetSize(this[224]) != 0;
      }
      if (mSelector != 1751474532) {
        goto LABEL_40;
      }
      uint64_t v42 = 0;
      unint64_t v43 = &v42;
      uint64_t v44 = 0x2000000000;
      LOBYTE(v45) = 0;
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 0x40000000;
      v34[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_8;
      v34[3] = &unk_1E62316B0;
      v34[4] = &v42;
      v34[5] = this;
      char v8 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v34);
LABEL_37:
      uint64_t HasProperty = *((unsigned char *)v43 + 24) != 0;
      _Block_object_dispose(&v42, 8);
      return HasProperty;
    }
    if (mSelector == 1635087471)
    {
      uint64_t v42 = 0;
      unint64_t v43 = &v42;
      uint64_t v44 = 0x2000000000;
      LOBYTE(v45) = 0;
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 0x40000000;
      v32[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_10;
      v32[3] = &unk_1E6231700;
      v32[4] = &v42;
      v32[5] = this;
      unsigned int v16 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v32);
      goto LABEL_37;
    }
    if (mSelector == 1667329635)
    {
      uint64_t v42 = 0;
      unint64_t v43 = &v42;
      uint64_t v44 = 0x2000000000;
      LOBYTE(v45) = 0;
      v35[0] = MEMORY[0x1E4F143A8];
      v35[1] = 0x40000000;
      v35[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_7;
      v35[3] = &unk_1E6231688;
      v35[4] = &v42;
      v35[5] = this;
      unsigned int v17 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v35);
      goto LABEL_37;
    }
    if (mSelector != 1667658618) {
      goto LABEL_40;
    }
    return 0;
  }
  if (mSelector <= 1851878763)
  {
    if (mSelector <= 1819634019)
    {
      if (mSelector == 1819107691)
      {
        uint64_t v42 = 0;
        unint64_t v43 = &v42;
        uint64_t v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__5093;
        v46 = __Block_byref_object_dispose__5094;
        mach_port_t v47 = &unk_1F1489A20;
        uint64_t v48 = 0;
        v40[0] = MEMORY[0x1E4F143A8];
        v40[1] = 0x40000000;
        v40[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_2;
        v40[3] = &unk_1E62315C0;
        v40[4] = &v42;
        v40[5] = this;
        uint64_t v14 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v14, (uint64_t)v40);
        goto LABEL_32;
      }
      if (mSelector != 1819173229) {
        goto LABEL_40;
      }
      goto LABEL_30;
    }
    if (mSelector != 1819634020)
    {
      if (mSelector == 1836411236)
      {
        uint64_t v42 = 0;
        unint64_t v43 = &v42;
        uint64_t v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__5093;
        v46 = __Block_byref_object_dispose__5094;
        mach_port_t v47 = &unk_1F1489A20;
        uint64_t v48 = 0;
        v37[0] = MEMORY[0x1E4F143A8];
        v37[1] = 0x40000000;
        v37[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_5;
        v37[3] = &unk_1E6231638;
        v37[4] = &v42;
        v37[5] = this;
        int v10 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v10, (uint64_t)v37);
LABEL_32:
        uint64_t HasProperty = v43[6] != 0;
        _Block_object_dispose(&v42, 8);
        int v15 = (OS::CF::UntypedObject *)&v47;
LABEL_47:
        OS::CF::UntypedObject::~UntypedObject(v15);
        return HasProperty;
      }
      goto LABEL_40;
    }
    uint64_t v42 = 0;
    unint64_t v43 = &v42;
    uint64_t v44 = 0x2000000000;
    LOBYTE(v45) = 0;
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 0x40000000;
    v33[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_9;
    v33[3] = &unk_1E62316D8;
    v33[4] = &v42;
    v33[5] = this;
    int v18 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
    HALB_CommandGate::ExecuteCommand(v18, (uint64_t)v33);
    goto LABEL_37;
  }
  uint64_t HasProperty = 1;
  if (mSelector > 1919251301)
  {
    if (mSelector != 1919251302)
    {
      if (mSelector == 1920168547)
      {
        uint64_t v42 = 0;
        unint64_t v43 = &v42;
        uint64_t v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__5093;
        v46 = __Block_byref_object_dispose__5094;
        mach_port_t v47 = &unk_1F1489A20;
        uint64_t v48 = 0;
        v36[0] = MEMORY[0x1E4F143A8];
        v36[1] = 0x40000000;
        v36[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_6;
        v36[3] = &unk_1E6231660;
        v36[4] = &v42;
        v36[5] = this;
        int v12 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v36);
        goto LABEL_32;
      }
LABEL_40:
      HALS_IOA2Device::GetCustomPropertyInfoByAddress((HALS_IOA2Device *)v30, (const AudioObjectPropertyAddress *)this, (CAPropertyAddress *)a3);
      if (v31)
      {
        uint64_t HasProperty = 1;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = &v26;
        uint64_t v28 = 0x2000000000;
        uint64_t v29 = 0;
        uint64_t v42 = 0;
        unint64_t v43 = &v42;
        uint64_t v44 = 0x3802000000;
        v45 = __Block_byref_object_copy__25;
        v46 = (void (*)(uint64_t))__Block_byref_object_dispose__26;
        mach_port_t v47 = 0;
        LODWORD(v48) = 0;
        v25[0] = MEMORY[0x1E4F143A8];
        v25[1] = 0x40000000;
        unsigned int v25[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke_27;
        v25[3] = &unk_1E6231728;
        v25[6] = this;
        v25[7] = a3;
        v25[4] = &v26;
        v25[5] = &v42;
        int v20 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
        HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v25);
        AudioObjectPropertyScope v22 = (unsigned int *)v27[3];
        if (v22)
        {
          uint64_t HasProperty = (*(uint64_t (**)(unsigned int *, void, uint64_t *, AudioObjectPropertyAddress *))(*(void *)v22 + 88))(v22, v22[4], v43 + 5, a4);
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v27[3], v23);
        }
        else
        {
          uint64_t HasProperty = HALS_Device::HasProperty((HALS_Device ***)this, v21, a3, a4);
        }
        _Block_object_dispose(&v42, 8);
        _Block_object_dispose(&v26, 8);
      }
      int v15 = (OS::CF::UntypedObject *)v30;
      goto LABEL_47;
    }
  }
  else
  {
    if (mSelector == 1851878764)
    {
LABEL_30:
      uint64_t v42 = 0;
      unint64_t v43 = &v42;
      uint64_t v44 = 0x3802000000;
      v45 = __Block_byref_object_copy__5093;
      v46 = __Block_byref_object_dispose__5094;
      mach_port_t v47 = &unk_1F1489A20;
      uint64_t v48 = 0;
      v41[0] = MEMORY[0x1E4F143A8];
      v41[1] = 0x40000000;
      v41[2] = ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
      v41[3] = &unk_1E6231598;
      v41[4] = &v42;
      v41[5] = this;
      uint64_t v13 = (HALB_Mutex *)(*((uint64_t (**)(const __CFArray **))*this + 7))(this);
      HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v41);
      goto LABEL_32;
    }
    if (mSelector != 1919251299) {
      goto LABEL_40;
    }
  }
  return HasProperty;
}

void sub_1BAA7F3D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose((const void *)(v10 - 104), 8);
  _Block_object_dispose(va, 8);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK15HALS_IOA2Device11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(uint64_t a1)
{
  unint64_t v2 = (const __CFDictionary **)(*(void *)(a1 + 40) + 1808);
  int v6 = 0;
  HALB_UCObject::CopyProperty_CFString(v2, @"device name", (const __CFString **)&v6);
  uint64_t v3 = v6;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8) + 40;

  return OS::CF::UntypedObject::operator=(v4, (uint64_t)v3);
}

void sub_1BAA7F4C4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_IOA2Device::GetCustomPropertyInfoByAddress(HALS_IOA2Device *this, const AudioObjectPropertyAddress *a2, CAPropertyAddress *a3)
{
  *(void *)this = &unk_1F14898A0;
  *((void *)this + 1) = 0;
  CFArrayRef Size = OS::CF::ArrayBase<__CFArray const*>::GetSize(*(const __CFArray **)&a2[149].mScope);
  if (*((void *)this + 1)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = Size == 0;
  }
  if (!v7)
  {
    CFArrayRef v8 = Size;
    p_AudioObjectPropertyElement mElement = &a2[148].mElement;
    unint64_t v10 = 1;
    do
    {
      OS::CF::ArrayBase<__CFArray const*>::operator[]((const __CFArray *)v20, (uint64_t)p_mElement, v10 - 1);
      OS::CF::UntypedObject::As<OS::CF::Dictionary>(&v21, (uint64_t)v20);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v20);
      OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v18, v22, @"property selector");
      OS::CF::UntypedObject::As<OS::CF::Number>(v20, (uint64_t)v18);
      v19.signed int mSelector = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v20[1], 0);
      OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v16, v22, @"property scope");
      OS::CF::UntypedObject::As<OS::CF::Number>(v17, (uint64_t)v16);
      v19.AudioObjectPropertyScope mScope = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v17[1], 707406378);
      OS::CF::DictionaryBase<__CFDictionary const*>::operator[]((uint64_t)v14, v22, @"property element");
      OS::CF::UntypedObject::As<OS::CF::Number>(v15, (uint64_t)v14);
      v19.AudioObjectPropertyElement mElement = OS::CF::Number::GetValue<unsigned int>((const __CFNumber *)v15[1], 0xFFFFFFFFLL);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v15);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v14);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v17);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v16);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v20);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v18);
      if (CAPropertyAddress::IsCongruentAddress(a3, &v19, v11))
      {
        CFDictionaryRef v12 = (const __CFDictionary *)*((void *)this + 1);
        *((void *)this + 1) = v22;
        CFDictionaryRef v22 = v12;
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
      if (*((void *)this + 1)) {
        break;
      }
    }
    while (v10++ < (unint64_t)v8);
  }
}

_DWORD *HALS_IOA2Device::_FindCustomControlForDeviceAddress(HALS_IOA2Device *this, const AudioObjectPropertyAddress *a2, AudioObjectPropertyAddress *a3)
{
  AudioObjectPropertyAddress v20 = *a2;
  uint64_t v3 = (void *)*((void *)this + 176);
  if (!v3) {
    return 0;
  }
  BOOL v7 = (char *)this + 1408;
  CFArrayRef v8 = (char *)this + 1408;
  do
  {
    uint64_t v9 = *((void *)this + 181);
    if (!v9) {
      goto LABEL_45;
    }
    int v10 = (*(uint64_t (**)(uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(void *)v9 + 48))(v9, (uint64_t)v3 + 28, &v20);
    uint64_t v11 = v3 + 1;
    if (!v10)
    {
      uint64_t v11 = v3;
      CFArrayRef v8 = (char *)v3;
    }
    uint64_t v3 = (void *)*v11;
  }
  while (*v11);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v12 = *((void *)this + 181);
  if (!v12) {
LABEL_45:
  }
    std::__throw_bad_function_call[abi:ne180100]();
  if ((*(unsigned int (**)(uint64_t, AudioObjectPropertyAddress *, char *))(*(void *)v12 + 48))(v12, &v20, v8 + 28))
  {
    return 0;
  }
  uint64_t v13 = (HALS_ObjectMap *)*((unsigned int *)v8 + 10);
  if (!v13) {
    return 0;
  }
  UInt64 result = (_DWORD *)HALS_ObjectMap::CopyObjectByObjectID(v13);
  if (a2->mScope == result[12] && a2->mElement == result[13])
  {
    uint64_t v15 = result[42];
    if (v15)
    {
      uint64_t v16 = 0;
      for (unint64_t i = 0; v15 != i; ++i)
      {
        if (a2->mSelector == result[i + 43])
        {
          *(void *)&a3->AudioObjectPropertyScope mScope = 1735159650;
          int v18 = result[6];
          if (v18 > 1936483441)
          {
            switch(v18)
            {
              case 1953458028:
                if (!i)
                {
                  AudioObjectPropertySelector v19 = 1650685548;
                  goto LABEL_40;
                }
                break;
              case 1936744814:
                if (!i)
                {
                  AudioObjectPropertySelector v19 = 1936745334;
                  goto LABEL_40;
                }
                AudioObjectPropertySelector v19 = 1936745315;
                goto LABEL_36;
              case 1936483442:
                if (!i)
                {
                  AudioObjectPropertySelector v19 = 1935962742;
                  goto LABEL_40;
                }
                AudioObjectPropertySelector v19 = 1935962738;
LABEL_36:
                if (i != 1) {
                  break;
                }
                goto LABEL_40;
            }
          }
          else if (v18 == 1651273579)
          {
            AudioObjectPropertySelector v19 = 1651272546;
            if (!i) {
              goto LABEL_40;
            }
            if (i == 1)
            {
              AudioObjectPropertySelector v19 = 1651272548;
LABEL_40:
              a3->signed int mSelector = v19;
            }
          }
          else
          {
            if (v18 != 1818588780)
            {
              if (v18 != 1936483188 || i >= 3) {
                goto LABEL_41;
              }
              AudioObjectPropertySelector v19 = *(_DWORD *)((char *)&unk_1BB02ADD0 + (v16 >> 30));
              goto LABEL_40;
            }
            if (i < 6)
            {
              AudioObjectPropertySelector v19 = *(_DWORD *)((char *)&unk_1BB02ADB8 + (v16 >> 30));
              goto LABEL_40;
            }
          }
        }
LABEL_41:
        v16 += 0x100000000;
      }
    }
  }
  return result;
}

void HALB_CommandGate::ExecuteCommand(HALB_Mutex *a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v6 = a1;
  int v3 = HALB_Mutex::Lock(a1);
  int v7 = v3;
  if (v3)
  {
    int v4 = v3;
    v5[0] = HIBYTE(v3);
    v5[1] = BYTE2(v3);
    std::runtime_error v5[2] = BYTE1(v3);
    v5[3] = v3;
    v5[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      uint64_t v9 = "HALB_CommandGate.cpp";
      __int16 v10 = 1024;
      int v11 = 55;
      __int16 v12 = 1024;
      int v13 = v4;
      __int16 v14 = 2080;
      uint64_t v15 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_CommandGate::ExecuteCommand: locking the mutex failed, Error: %d (%s)", buf, 0x22u);
    }
  }
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  HALB_Mutex::Locker::~Locker(&v6);
}

void sub_1BAA7FA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOProcessor::DriftCorrection_IsEnabled(HALS_IOProcessor *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOProcessor *))(*(void *)this + 24))(this);
  if (result) {
    return *(unsigned char *)(*((void *)this + 16) + 9) != 0;
  }
  return result;
}

uint64_t HALS_DeviceManager::GetReferenceID(HALS_DeviceManager *this)
{
  return 0;
}

uint64_t HALS_DeviceManager::WantsOwnedObjectPropertiesChanged(HALS_DeviceManager *this)
{
  return 1;
}

void *AMCP::IO_Core::Play_State_Manager::get_debug_string(AMCP::IO_Core::Play_State_Manager *this, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v4 = "Prewarmed";
  if (!a2) {
    int v4 = "Stopped";
  }
  if (a3) {
    int v4 = "Running";
  }
  snprintf(__str, 0x64uLL, "Prewarm: %llu Play: %llu State: %s", a2, a3, v4);
  return std::string::basic_string[abi:ne180100]<0>(this, __str);
}

uint64_t HALS_IOContextDescription::GetNumberStreams(HALS_IOContextDescription *this, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = 0x21CFB2B78C13521DLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 5;
    uint64_t v3 = 0x21CFB2B78C13521DLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 3);
  }
  if (v3 != *((_DWORD *)this + 34) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    uint64_t v7 = "HALS_IOContextDescription.cpp";
    __int16 v8 = 1024;
    int v9 = 1395;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", (uint8_t *)&v6, 0x12u);
  }
  if (*((_DWORD *)this + 28) != (uint64_t)(*((void *)this + 11) - *((void *)this + 10)) >> 5
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    uint64_t v7 = "HALS_IOContextDescription.cpp";
    __int16 v8 = 1024;
    int v9 = 1396;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Extra items in mStreamActiveState", (uint8_t *)&v6, 0x12u);
  }
  return v4;
}

double HALS_IOContextDescription::GetStreamInfoAtIndex(void *a1, int a2, unsigned int a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  *(_DWORD *)(a4 + 4) = a2;
  uint64_t v5 = a4 + 16;
  double result = 0.0;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 40) = 0u;
  if (a2)
  {
    uint64_t v8 = a1[7];
    if (0x21CFB2B78C13521DLL * ((a1[8] - v8) >> 3) > (unint64_t)a3)
    {
      uint64_t v9 = v8 + 424 * a3;
      int v11 = *(_DWORD *)(v9 + 108);
      uint64_t v10 = (_DWORD *)(v9 + 108);
      if (!v11
        || ((uint64_t v12 = *(void *)(v8 + 424 * a3 + 112), *(void *)(v8 + 424 * a3 + 120) != v12)
          ? (BOOL v13 = v12 == 0)
          : (BOOL v13 = 1),
            v13))
      {
        uint64_t v12 = v8 + 424 * a3 + 408;
      }
      uint64_t v14 = *(void *)v12;
      uint64_t v15 = *(void *)(*(void *)v12 + 8);
      if (v15)
      {
        uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 320))(v15);
        if (v16) {
          int v17 = *(_DWORD *)(v16 + 16);
        }
        else {
          int v17 = 0;
        }
        *(_DWORD *)a4 = v17;
        uint64_t v30 = v8 + 424 * a3;
        *(_DWORD *)(a4 + 4) = *(unsigned __int8 *)(v30 + 8);
        *(_DWORD *)(a4 + 8) = *(_DWORD *)(v30 + 104);
        *(_DWORD *)(a4 + 12) = *(_DWORD *)(v14 + 308);
        if (*v10)
        {
          HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v53, (uint64_t *)(v8 + 424 * a3 + 112));
        }
        else
        {
          uint64_t v31 = v8 + 424 * a3;
          long long v32 = *(_OWORD *)(v31 + 384);
          long long v53 = *(_OWORD *)(v31 + 368);
          long long v54 = v32;
          uint64_t v55 = *(void *)(v31 + 400);
        }
        double result = *(double *)&v53;
        long long v33 = v54;
        *(_OWORD *)uint64_t v5 = v53;
        *(_OWORD *)(v5 + 16) = v33;
        *(void *)(v5 + 32) = v55;
      }
    }
    return result;
  }
  uint64_t v18 = a1[10];
  if (a3 >= (unint64_t)((a1[11] - v18) >> 5)) {
    return result;
  }
  uint64_t v19 = v18 + 32 * a3;
  AudioObjectPropertyAddress v20 = *(uint64_t **)(v19 + 8);
  unint64_t v21 = *(void *)(v19 + 16) - (void)v20;
  if (!v21) {
    return result;
  }
  int v22 = -1431655765 * (v21 >> 3);
  if (!v22) {
    return result;
  }
  if (v22 == 1)
  {
    uint64_t v23 = *v20;
    if (!*(_DWORD *)(*v20 + 108)
      || ((v24 = *(uint64_t **)(v23 + 112), *(uint64_t **)(v23 + 120) != v24) ? (BOOL v25 = v24 == 0) : (BOOL v25 = 1), v25))
    {
      int v24 = (uint64_t *)(v23 + 408);
    }
    uint64_t v26 = *v24;
    uint64_t v27 = *(void *)(*v24 + 8);
    if (v27)
    {
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 320))(v27);
      int v29 = v28 ? *(_DWORD *)(v28 + 16) : 0;
      *(_DWORD *)a4 = v29;
      *(_DWORD *)(a4 + 4) = *(unsigned __int8 *)(v23 + 8);
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(v23 + 104);
      *(_DWORD *)(a4 + 12) = *(_DWORD *)(v26 + 308);
      if (*(_DWORD *)(v23 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v53, (uint64_t *)(v23 + 112));
      }
      else
      {
        long long v41 = *(_OWORD *)(v23 + 384);
        long long v53 = *(_OWORD *)(v23 + 368);
        long long v54 = v41;
        uint64_t v55 = *(void *)(v23 + 400);
      }
      double result = *(double *)&v53;
      long long v42 = v54;
      *(_OWORD *)uint64_t v5 = v53;
      *(_OWORD *)(v5 + 16) = v42;
      *(void *)(v5 + 32) = v55;
      if (*(_DWORD *)(a4 + 24) == 1819304813 && !*(_DWORD *)(v23 + 108))
      {
        long long v43 = *(_OWORD *)(v23 + 384);
        long long v53 = *(_OWORD *)(v23 + 368);
        long long v54 = v43;
        uint64_t v55 = *(void *)(v23 + 400);
        int v44 = *(_DWORD *)v19;
        if ((BYTE12(v53) & 0x20) != 0)
        {
          unsigned int v45 = 1;
        }
        else
        {
          unsigned int v45 = HIDWORD(v54);
          if (!HIDWORD(v54))
          {
            unsigned int v46 = (v55 + 7) >> 3;
LABEL_60:
            if ((BYTE12(v53) & 0x20) != 0) {
              int v51 = 1;
            }
            else {
              int v51 = *(_DWORD *)v19;
            }
            DWORD2(v54) = v46 * v51;
            HIDWORD(v54) = v44;
            LODWORD(v54) = v46 * v51;
            DWORD1(v54) = 1;
            *(void *)(v5 + 32) = v55;
            double result = *(double *)&v53;
            long long v52 = v54;
            *(_OWORD *)uint64_t v5 = v53;
            *(_OWORD *)(v5 + 16) = v52;
            return result;
          }
        }
        unsigned int v46 = DWORD2(v54) / v45;
        goto LABEL_60;
      }
    }
  }
  else
  {
    uint64_t v34 = *v20;
    if (!*(_DWORD *)(*v20 + 108)
      || ((uint64_t v35 = *(uint64_t **)(v34 + 112), *(uint64_t **)(v34 + 120) != v35) ? (v36 = v35 == 0) : (v36 = 1), v36))
    {
      uint64_t v35 = (uint64_t *)(v34 + 408);
    }
    uint64_t v37 = *v35;
    uint64_t v38 = *(void *)(*v35 + 8);
    if (v38)
    {
      uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 320))(v38);
      int v40 = v39 ? *(_DWORD *)(v39 + 16) : 0;
      *(_DWORD *)a4 = v40;
      *(_DWORD *)(a4 + 4) = *(unsigned __int8 *)(v34 + 8);
      *(_DWORD *)(a4 + 8) = *(_DWORD *)(v34 + 104);
      *(_DWORD *)(a4 + 12) = *(_DWORD *)(v37 + 308);
      if (*(_DWORD *)(v34 + 108))
      {
        HALS_IODSPInfo::GetClientFormat((HALS_IODSPInfo *)&v53, (uint64_t *)(v34 + 112));
      }
      else
      {
        long long v47 = *(_OWORD *)(v34 + 384);
        long long v53 = *(_OWORD *)(v34 + 368);
        long long v54 = v47;
        uint64_t v55 = *(void *)(v34 + 400);
      }
      double result = *(double *)&v53;
      long long v48 = v54;
      *(_OWORD *)uint64_t v5 = v53;
      *(_OWORD *)(v5 + 16) = v48;
      *(void *)(v5 + 32) = v55;
      if (*(_DWORD *)(a4 + 24) == 1819304813)
      {
        int v49 = *(_DWORD *)v19;
        unsigned int v50 = (((8 * *(_DWORD *)(a4 + 40)) / *(_DWORD *)(a4 + 44)) >> 3) * *(_DWORD *)v19;
        *(_DWORD *)(a4 + 40) = v50;
        *(_DWORD *)(a4 + 44) = v49;
        *(_DWORD *)(a4 + 32) = v50;
      }
    }
  }
  return result;
}

uint64_t HALS_IOContextDescription::GetNumberActiveStreams(HALS_IOContextDescription *this, int a2)
{
  uint64_t v2 = 112;
  uint64_t v3 = 104;
  if (a2) {
    uint64_t v3 = 128;
  }
  uint64_t v4 = *(int8x8_t **)((char *)this + v3);
  if (a2) {
    uint64_t v2 = 136;
  }
  return std::__count[abi:ne180100]<std::_ClassicAlgPolicy,std::vector<BOOL>,true,BOOL,std::__identity,0>(v4, 0, (uint64_t)&v4[*(void *)((char *)this + v2) >> 6], *(void *)((unsigned char *)this + v2) & 0x3F, 1);
}

uint64_t HALS_IOContextDescription::IsStreamEnabledAtIndex(HALS_IOContextDescription *this, int a2, unsigned int a3)
{
  if (a2)
  {
    if (*((void *)this + 17) > (unint64_t)a3)
    {
      uint64_t v3 = (char *)this + 128;
      return (*(void *)(*(void *)v3 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1;
    }
  }
  else if (*((void *)this + 14) > (unint64_t)a3)
  {
    uint64_t v3 = (char *)this + 104;
    return (*(void *)(*(void *)v3 + (((unint64_t)a3 >> 3) & 0x1FFFFFF8)) >> a3) & 1;
  }
  return 1;
}

uint64_t HALB_IOBufferManager_Server::GetIOStatus(HALB_IOBufferManager_Server *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 7);
  if (!v2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    int v4 = 136315394;
    uint64_t v5 = "HALB_IOBufferManager.cpp";
    __int16 v6 = 1024;
    int v7 = 225;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOStatus: no shared buffer", (uint8_t *)&v4, 0x12u);
    uint64_t v2 = *((void *)this + 7);
    if (!v2) {
      return 0;
    }
  }
  uint64_t result = *(void *)(v2 + 8);
  if (result) {
    return result;
  }
  if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
    return 0;
  }
  int v4 = 136315394;
  uint64_t v5 = "HALB_IOBufferManager.cpp";
  __int16 v6 = 1024;
  int v7 = 228;
  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOBufferManager_Server::GetIOStatus: the shared buffer isn't valid", (uint8_t *)&v4, 0x12u);
  return *(void *)(*((void *)this + 7) + 8);
}

CFTypeID OS::CF::UntypedObject::As<OS::CF::Dictionary>(void *a1, uint64_t a2)
{
  TypeID = OS::CF::UntypedObject::GetTypeID(*(const void **)(a2 + 8));
  CFTypeID result = CFDictionaryGetTypeID();
  if (TypeID == (const void *)result)
  {
    __int16 v6 = *(const void **)(a2 + 8);
    if (v6) {
      CFTypeID result = (CFTypeID)CFRetain(v6);
    }
    a1[1] = v6;
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &unk_1F14898A0;
  return result;
}

CFTypeID OS::CF::UntypedObject::As<OS::CF::Number>(void *a1, uint64_t a2)
{
  TypeID = OS::CF::UntypedObject::GetTypeID(*(const void **)(a2 + 8));
  CFTypeID result = CFNumberGetTypeID();
  if (TypeID == (const void *)result)
  {
    __int16 v6 = *(const void **)(a2 + 8);
    if (v6) {
      CFTypeID result = (CFTypeID)CFRetain(v6);
    }
    a1[1] = v6;
  }
  else
  {
    a1[1] = 0;
  }
  *a1 = &unk_1F14899D0;
  return result;
}

const void *OS::CF::UntypedObject::GetTypeID(const void *this)
{
  if (this) {
    return (const void *)CFGetTypeID(this);
  }
  return this;
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::operator[](uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)CFTypeID result = &unk_1F1489918;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    value = 0;
    CFTypeID result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      int v4 = value;
      if (value)
      {
        CFRetain(value);
        uint64_t v5 = v3;
        uint64_t v6 = (uint64_t)v4;
      }
      else
      {
        uint64_t v5 = v3;
        uint64_t v6 = 0;
      }
      return OS::CF::UntypedObject::operator=(v5, v6);
    }
  }
  return result;
}

uint64_t OS::CF::Number::GetValue<unsigned int>(const __CFNumber *a1, uint64_t a2)
{
  unsigned int valuePtr = a2;
  if (a1)
  {
    CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
    return valuePtr;
  }
  return a2;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::GetSize(const __CFArray *result)
{
  if (result) {
    return (const __CFArray *)CFArrayGetCount(result);
  }
  return result;
}

const __CFArray *OS::CF::ArrayBase<__CFArray const*>::operator[](const __CFArray *result, uint64_t a2, CFIndex a3)
{
  *(void *)CFTypeID result = &unk_1F1489918;
  *((void *)result + 1) = 0;
  if ((a3 & 0x8000000000000000) == 0)
  {
    CFArrayRef v4 = result;
    CFTypeID result = *(const __CFArray **)(a2 + 8);
    if (result)
    {
      CFTypeID result = (const __CFArray *)CFArrayGetCount(result);
      if ((uint64_t)result > a3)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 8), a3);
        uint64_t v7 = (uint64_t)ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          uint64_t v8 = (uint64_t)v4;
          uint64_t v9 = v7;
        }
        else
        {
          uint64_t v8 = (uint64_t)v4;
          uint64_t v9 = 0;
        }
        return (const __CFArray *)OS::CF::UntypedObject::operator=(v8, v9);
      }
    }
  }
  return result;
}

float MonoMultiCoefsSRC_Neon(_OWORD *a1, uint64_t a2, float *a3, int a4, int a5, unsigned int a6, unsigned int a7, unsigned int a8, int a9)
{
  do
  {
    float32x4_t v9 = 0uLL;
    float32x4_t v10 = 0uLL;
    float32x4_t v11 = 0uLL;
    float32x4_t v12 = 0uLL;
    BOOL v13 = (float32x4_t *)(a2 + 4 * (unsigned __int16)(a7 * a9));
    float32x4_t v15 = *(float32x4_t *)a1;
    float32x4_t v16 = *((float32x4_t *)a1 + 1);
    uint64_t v14 = (float32x4_t *)(a1 + 2);
    float32x4_t v18 = *v13;
    float32x4_t v19 = v13[1];
    int v17 = v13 + 2;
    int v20 = a9 - 16;
    if (a9 != 16)
    {
      do
      {
        float32x4_t v22 = *v14;
        float32x4_t v23 = v14[1];
        unint64_t v21 = v14 + 2;
        float32x4_t v9 = vmlaq_f32(v9, v15, v18);
        v20 -= 16;
        float32x4_t v25 = *v17;
        float32x4_t v26 = v17[1];
        int v24 = v17 + 2;
        float32x4_t v10 = vmlaq_f32(v10, v16, v19);
        float32x4_t v15 = *v21;
        float32x4_t v16 = v21[1];
        uint64_t v14 = v21 + 2;
        float32x4_t v11 = vmlaq_f32(v11, v22, v25);
        float32x4_t v18 = *v24;
        float32x4_t v19 = v24[1];
        int v17 = v24 + 2;
        float32x4_t v12 = vmlaq_f32(v12, v23, v26);
      }
      while (v20);
    }
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a6);
    a7 += HIWORD(a6);
    float32x4_t v27 = vaddq_f32(vmlaq_f32(v9, v15, v18), vmlaq_f32(v10, v16, v19));
    float32x4_t v28 = vaddq_f32(vmlaq_f32(v11, *v14, *v17), vmlaq_f32(v12, v14[1], v17[1]));
    if (a7 >= a8)
    {
      a7 -= a8;
      a1 = (_OWORD *)((char *)a1 + 4);
    }
    float32x4_t v29 = vaddq_f32(v27, v28);
    float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v29, v29));
    --a4;
    *a3 = result;
    a3 += a5;
  }
  while (a4);
  return result;
}

float StereoMultiCoefsSRC_Neon(_OWORD *a1, _OWORD *a2, uint64_t a3, float *a4, float *a5, int a6, int a7, unsigned int a8, unsigned int a9, unsigned int a10, int a11)
{
  do
  {
    float32x4_t v12 = 0uLL;
    float32x4_t v13 = 0uLL;
    float32x4_t v14 = 0uLL;
    float32x4_t v15 = 0uLL;
    float32x4_t v16 = 0uLL;
    float32x4_t v17 = 0uLL;
    float32x4_t v18 = 0uLL;
    float32x4_t v19 = 0uLL;
    int v20 = (float32x4_t *)(a3 + 4 * (unsigned __int16)(a9 * a11));
    float32x4_t v22 = *(float32x4_t *)a1;
    float32x4_t v23 = *((float32x4_t *)a1 + 1);
    unint64_t v21 = (float32x4_t *)(a1 + 2);
    float32x4_t v25 = *(float32x4_t *)a2;
    float32x4_t v26 = *((float32x4_t *)a2 + 1);
    int v24 = (float32x4_t *)(a2 + 2);
    float32x4_t v28 = *v20;
    float32x4_t v29 = v20[1];
    float32x4_t v27 = v20 + 2;
    int v30 = a11 - 16;
    if (a11 != 16)
    {
      do
      {
        float32x4_t v32 = *v21;
        float32x4_t v33 = v21[1];
        uint64_t v31 = v21 + 2;
        float32x4_t v12 = vmlaq_f32(v12, v22, v28);
        float32x4_t v35 = *v24;
        float32x4_t v36 = v24[1];
        uint64_t v34 = v24 + 2;
        float32x4_t v16 = vmlaq_f32(v16, v25, v28);
        v30 -= 16;
        float32x4_t v38 = *v27;
        float32x4_t v39 = v27[1];
        uint64_t v37 = v27 + 2;
        float32x4_t v13 = vmlaq_f32(v13, v23, v29);
        float32x4_t v17 = vmlaq_f32(v17, v26, v29);
        float32x4_t v22 = *v31;
        float32x4_t v23 = v31[1];
        unint64_t v21 = v31 + 2;
        float32x4_t v14 = vmlaq_f32(v14, v32, v38);
        float32x4_t v25 = *v34;
        float32x4_t v26 = v34[1];
        int v24 = v34 + 2;
        float32x4_t v18 = vmlaq_f32(v18, v35, v38);
        float32x4_t v28 = *v37;
        float32x4_t v29 = v37[1];
        float32x4_t v27 = v37 + 2;
        float32x4_t v15 = vmlaq_f32(v15, v33, v39);
        float32x4_t v19 = vmlaq_f32(v19, v36, v39);
      }
      while (v30);
    }
    float32x4_t v40 = v27[1];
    a1 = (_OWORD *)((char *)a1 + 4 * (unsigned __int16)a8);
    a2 = (_OWORD *)((char *)a2 + 4 * (unsigned __int16)a8);
    a9 += HIWORD(a8);
    float32x4_t v41 = vaddq_f32(vmlaq_f32(v12, v22, v28), vmlaq_f32(v13, v23, v29));
    float32x4_t v42 = vaddq_f32(vmlaq_f32(v16, v25, v28), vmlaq_f32(v17, v26, v29));
    float32x4_t v43 = vaddq_f32(vmlaq_f32(v14, *v21, *v27), vmlaq_f32(v15, v21[1], v40));
    float32x4_t v44 = vaddq_f32(vmlaq_f32(v18, *v24, *v27), vmlaq_f32(v19, v24[1], v40));
    if (a9 >= a10)
    {
      a9 -= a10;
      a1 = (_OWORD *)((char *)a1 + 4);
      a2 = (_OWORD *)((char *)a2 + 4);
    }
    float32x4_t v45 = vaddq_f32(v41, v43);
    float32x4_t v46 = vaddq_f32(v42, v44);
    float result = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v45, v45));
    --a6;
    *a4 = result;
    *a5 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46));
    a4 += a7;
    a5 += a7;
  }
  while (a6);
  return result;
}

uint64_t AMCP::DAL::Audio_Samples_Data::allocate(AMCP::DAL::Audio_Samples_Data *this, uint64_t a2)
{
  uint64_t v3 = this;
  if (*(void *)this && !*((_DWORD *)this + 4))
  {
    uint64_t v6 = caulk::audio_buffer_resource(this);
    this = (AMCP::DAL::Audio_Samples_Data *)(*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v6 + 24))(v6, *(void *)v3, a2, 8);
    if (a2) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t result = 0;
    goto LABEL_7;
  }
  if (!a2) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v4 = caulk::audio_buffer_resource(this);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a2, 8);
LABEL_7:
  *(void *)uint64_t v3 = result;
  *((void *)v3 + 1) = a2;
  *((_DWORD *)v3 + 4) = 0;
  return result;
}

void __clang_call_terminate(void *a1)
{
}

void AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data(AMCP::DAL::Audio_Samples_Data *this)
{
  if (*(void *)this)
  {
    if (!*((_DWORD *)this + 4))
    {
      uint64_t v2 = caulk::audio_buffer_resource(this);
      (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v2 + 24))(v2, *(void *)this, *((void *)this + 1), 8);
    }
  }
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_MetaDevice_HostedDSP::VisitSubdevices(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 24))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(uint64_t **)(*(void *)result + 1344);
    uint64_t v4 = *(uint64_t **)(*(void *)result + 1352);
    if (v3 != v4)
    {
      int v6 = 0;
      do
      {
        uint64_t v8 = *v3;
        uint64_t v7 = v3[1];
        v3 += 3;
        v6 += (unint64_t)(v7 - v8) >> 3;
      }
      while (v3 != v4);
      if (v6)
      {
        for (int i = 0; i != v6; ++i)
        {
          uint64_t result = HALS_MetaDeviceDescription::GetSubDeviceByIndex(*(uint64_t ***)(*(void *)v2 + 1344), *(HALS_MetaDeviceDescription **)(*(void *)v2 + 1352), i);
          if (result)
          {
            uint64_t v11 = result;
            uint64_t v10 = *(void *)(a2 + 24);
            if (!v10) {
              std::__throw_bad_function_call[abi:ne180100]();
            }
            uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v10 + 48))(v10, &v11);
          }
        }
      }
    }
  }
  return result;
}

uint64_t HALS_MetaDevice_HostedDSP::HasProperty(HALS_MetaDevice_HostedDSP *this, _DWORD *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*a2 != 1685278561 && *a2 != 1685278578)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    float32x4_t v9 = **(NSObject ***)buf;
    if ((void)v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      LOWORD(v14) = 2080;
      *(void *)((char *)&v14 + 2) = "HALS_MetaDevice_HostedDSP.cpp";
      WORD5(v14) = 1024;
      HIDWORD(v14) = 60;
      __int16 v15 = 2080;
      float32x4_t v16 = "HandlesProperty(inAddress, inClient)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This property is not processed by HALS_MetaDevice_HostedDSP", buf, 0x22u);
    }
    abort();
  }
  *(void *)buf = 0;
  *(void *)&long long v14 = buf;
  *((void *)&v14 + 1) = 0x2000000000;
  LOBYTE(v15) = 0;
  uint64_t v5 = *(void *)this;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = ___ZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke;
  v12[3] = &unk_1E62302E8;
  v12[6] = a2;
  v12[7] = a3;
  v12[4] = buf;
  v12[5] = this;
  int v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 56))(v5);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v12);
  uint64_t v7 = *(unsigned __int8 *)(v14 + 24);
  _Block_object_dispose(buf, 8);
  return v7;
}

void sub_1BAA80C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void AMCP::Log::Scope_Registry::fetch(AMCP::Log::Scope_Registry *this, char *__s, char *a3)
{
  if (*((void *)&AMCP::Log::Scope_Registry::get(void)::s_registry + 1) != strlen(__s)
    || memcmp((const void *)AMCP::Log::Scope_Registry::get(void)::s_registry, __s, *((size_t *)&AMCP::Log::Scope_Registry::get(void)::s_registry + 1))|| *((void *)&xmmword_1EBFFA260 + 1) != strlen(a3)|| memcmp((const void *)xmmword_1EBFFA260, a3, *((size_t *)&xmmword_1EBFFA260 + 1)))
  {
    std::string::basic_string[abi:ne180100]<0>(v31, __s);
    std::string::basic_string[abi:ne180100]<0>(v33, a3);
    v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1EBFFA298;
    v38.__r_.__value_.__s.__data_[8] = 1;
    std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)&unk_1EBFFA298);
    float32x4_t v29 = a3;
    int v6 = (unsigned __int8 *)xmmword_1EBFFA280;
    if (*((void *)&xmmword_1EBFFA280 + 1) != (void)xmmword_1EBFFA280)
    {
      unint64_t v7 = (uint64_t)(*((void *)&xmmword_1EBFFA280 + 1) - xmmword_1EBFFA280) >> 6;
      do
      {
        uint64_t v8 = &v6[64 * (v7 >> 1)];
        int v9 = (char)std::operator<=>[abi:ne180100]<std::string,std::string,std::string,std::string>(v8, v31);
        if (v9 >= 0) {
          v7 >>= 1;
        }
        else {
          v7 += ~(v7 >> 1);
        }
        if (v9 < 0) {
          int v6 = v8 + 64;
        }
      }
      while (v7);
    }
    if (AMCP::Log::Scope_Registry::was_found((unsigned __int8 *)v31, v6))
    {
      uint64_t v10 = *((void *)v6 + 6);
      *(void *)this = v10;
      uint64_t v11 = *((void *)v6 + 7);
      *((void *)this + 1) = v11;
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v38);
      if (v10) {
        goto LABEL_46;
      }
    }
    else
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
      std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v38);
    }
    do
    {
      float32x4_t v35 = &unk_1EBFFA298;
      char v36 = 1;
      std::__shared_mutex_base::lock((std::__shared_mutex_base *)&unk_1EBFFA298);
      float32x4_t v12 = (unsigned __int8 *)xmmword_1EBFFA280;
      if (*((void *)&xmmword_1EBFFA280 + 1) != (void)xmmword_1EBFFA280)
      {
        unint64_t v13 = (uint64_t)(*((void *)&xmmword_1EBFFA280 + 1) - xmmword_1EBFFA280) >> 6;
        do
        {
          long long v14 = &v12[64 * (v13 >> 1)];
          int v15 = (char)std::operator<=>[abi:ne180100]<std::string,std::string,std::string,std::string>(v14, v31);
          if (v15 >= 0) {
            v13 >>= 1;
          }
          else {
            v13 += ~(v13 >> 1);
          }
          if (v15 < 0) {
            float32x4_t v12 = v14 + 64;
          }
        }
        while (v13);
      }
      if (!AMCP::Log::Scope_Registry::was_found((unsigned __int8 *)v31, v12))
      {
        int v17 = v32;
        float32x4_t v18 = (void **)v31[0];
        int v19 = v34;
        int v20 = (void **)v33[0];
        unint64_t v21 = operator new(0x30uLL);
        if (v19 >= 0) {
          float32x4_t v22 = v33;
        }
        else {
          float32x4_t v22 = v20;
        }
        if (v17 >= 0) {
          float32x4_t v23 = v31;
        }
        else {
          float32x4_t v23 = v18;
        }
        v21[1] = 0;
        v21[2] = 0;
        *unint64_t v21 = &unk_1F148A750;
        v21[3] = os_log_create((const char *)v23, (const char *)v22);
        v21[4] = 0;
        *((_DWORD *)v21 + 10) = 2;
        std::string::basic_string[abi:ne180100]<0>(&__p, "AMCP Logging Spool");
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(&v38, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          LOBYTE(v39) = 1;
          uint64_t v40 = -4294967279;
          int v41 = 0;
          char v42 = 1;
          char v43 = 0;
          char v44 = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string v38 = __p;
          LOBYTE(v39) = 1;
          uint64_t v40 = -4294967279;
          int v41 = 0;
          char v42 = 1;
          char v43 = 0;
          char v44 = 0;
        }
        operator new();
      }
      long long v16 = *((_OWORD *)v12 + 3);
      long long v30 = *((_OWORD *)v12 + 3);
      if (*((void *)&v16 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v35);
      int v24 = (std::__shared_weak_count *)*((void *)this + 1);
      *(_OWORD *)this = v30;
      uint64_t v10 = v30;
      if (v24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
      }
    }
    while (!(void)v30);
    uint64_t v11 = *((void *)&v30 + 1);
LABEL_46:
    size_t v25 = strlen(__s);
    *(void *)&AMCP::Log::Scope_Registry::get(void)::s_registry = __s;
    *((void *)&AMCP::Log::Scope_Registry::get(void)::s_registry + 1) = v25;
    size_t v26 = strlen(v29);
    *(void *)&xmmword_1EBFFA260 = v29;
    *((void *)&xmmword_1EBFFA260 + 1) = v26;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    float32x4_t v27 = (std::__shared_weak_count *)*((void *)&xmmword_1EBFFA270 + 1);
    *(void *)&xmmword_1EBFFA270 = v10;
    *((void *)&xmmword_1EBFFA270 + 1) = v11;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    return;
  }
  uint64_t v28 = *((void *)&xmmword_1EBFFA270 + 1);
  *(void *)this = xmmword_1EBFFA270;
  *((void *)this + 1) = v28;
  if (v28) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v28 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1BAA8143C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void *___ZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(void *a1)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  char v9 = 0;
  uint64_t v3 = a1[5];
  uint64_t v2 = (uint64_t *)a1[6];
  uint64_t v7 = *v2;
  int v8 = *((_DWORD *)v2 + 2);
  uint64_t v4 = a1[7];
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = &unk_1F145BAC8;
  v5[1] = &v9;
  std::runtime_error v5[2] = v7;
  *((_DWORD *)v5 + 6) = v8;
  v5[4] = v4;
  v10[3] = v5;
  HALS_MetaDevice_HostedDSP::VisitSubdevices(v3, (uint64_t)v10);
  uint64_t result = std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100](v10);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v9;
  return result;
}

void sub_1BAA815FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0;
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return 1;
  }
  if ((a2 & a1) < 0 != __OFSUB__(a1, a2)) {
    return strcmp((const char *)(a1 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(a2 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEEclEOSD_(uint64_t result, HALS_MetaSubDevice **a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    uint64_t result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void))(*(void *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(void *)(v3 + 32));
    **(unsigned char **)(v3 + 8) |= result;
  }
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145BAC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_1F145BAC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP11HasPropertyEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb_E3__0NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
}

uint64_t std::operator<=>[abi:ne180100]<std::string,std::string,std::string,std::string>(void *a1, void *a2)
{
  uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a2);
  if (!(_BYTE)result)
  {
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1 + 3, a2 + 3);
  }
  return result;
}

uint64_t AMCP::Log::Scope_Registry::was_found(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*((unsigned __int8 **)&xmmword_1EBFFA280 + 1) == a2) {
    return 0;
  }
  uint64_t v2 = a2;
  uint64_t v4 = a1[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[23];
  }
  else {
    uint64_t v5 = *((void *)a1 + 1);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((void *)a1 + 1))) {
      return 0;
    }
  }
  else if (a1[23])
  {
    int v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v9 = a1[47];
  if ((v9 & 0x80u) == 0) {
    uint64_t v10 = a1[47];
  }
  else {
    uint64_t v10 = *((void *)a1 + 4);
  }
  uint64_t v11 = v2[47];
  int v12 = (char)v11;
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *((void *)v2 + 4);
  }
  if (v10 != v11) {
    return 0;
  }
  unint64_t v13 = (const void **)(a1 + 24);
  long long v16 = (unsigned __int8 *)*((void *)v2 + 3);
  int v15 = v2 + 24;
  long long v14 = v16;
  if (v12 >= 0) {
    int v17 = v15;
  }
  else {
    int v17 = v14;
  }
  if ((v9 & 0x80) != 0) {
    return memcmp(*v13, v17, *((void *)a1 + 4)) == 0;
  }
  if (!a1[47]) {
    return 1;
  }
  uint64_t v18 = v9 - 1;
  do
  {
    int v20 = *(unsigned __int8 *)v13;
    unint64_t v13 = (const void **)((char *)v13 + 1);
    int v19 = v20;
    int v22 = *v17++;
    int v21 = v22;
    BOOL v24 = v18-- != 0;
    uint64_t result = v19 == v21;
  }
  while (v19 == v21 && v24);
  return result;
}

uint64_t std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

std::string *std::pair<std::string,std::string>::pair[abi:ne180100](std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  uint64_t v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BAA81A84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>,0ul,1ul>(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)uint64_t v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  long long v7 = a2[3];
  *((void *)a2 + 6) = 0;
  *((void *)a2 + 7) = 0;
  int v8 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v7;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(unint64_t a1)
{
  if (a1 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 6);
}

uint64_t std::__split_buffer<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 64;
    std::__destroy_at[abi:ne180100]<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>,0>(i - 64);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E4FBA350], MEMORY[0x1E4FBA1F8]);
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6230078, MEMORY[0x1E4FBA1C8]);
}

void sub_1BAA81CD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D0] + 16);
  return result;
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    int v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__shared_ptr_emplace<AMCP::Log::Scope>::__on_zero_shared(uint64_t a1)
{
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a1 + 32), 0);
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2) {
    os_release(v2);
  }
}

uint64_t std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1C1858BC0]();
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__shared_ptr_emplace<AMCP::Log::Scope>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F148A750;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Log::Scope>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F148A750;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  size_t v2 = a1[1];
  if (*((char *)a1 + 23) >= 0)
  {
    size_t v3 = *((unsigned __int8 *)a1 + 23);
  }
  else
  {
    a1 = (void *)*a1;
    size_t v3 = v2;
  }
  size_t v4 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (void *)*a2;
    size_t v5 = v4;
  }
  if (v5 >= v3) {
    size_t v6 = v3;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7)
  {
    if ((v7 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (v3 == v5) {
      return 0;
    }
    if (v3 >= v5) {
      return 1;
    }
  }
  return 255;
}

uint64_t std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::__shared_mutex_base::unlock_shared(*(std::__shared_mutex_base **)a1);
  }
  return a1;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    size_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    size_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *___ZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_Client_block_invoke(void *a1)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  char v9 = 0;
  uint64_t v3 = a1[5];
  size_t v2 = (uint64_t *)a1[6];
  uint64_t v7 = *v2;
  int v8 = *((_DWORD *)v2 + 2);
  uint64_t v4 = a1[7];
  size_t v5 = operator new(0x28uLL);
  void *v5 = &unk_1F145BB58;
  v5[1] = &v9;
  std::runtime_error v5[2] = v7;
  *((_DWORD *)v5 + 6) = v8;
  v5[4] = v4;
  v10[3] = v5;
  HALS_MetaDevice_HostedDSP::VisitSubdevices(v3, (uint64_t)v10);
  uint64_t result = std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100](v10);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v9;
  return result;
}

void sub_1BAA82118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1;
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEEclEOSD_(uint64_t result, HALS_MetaSubDevice **a2)
{
  size_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    uint64_t result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void))(*(void *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(void *)(v3 + 32));
    if (result)
    {
      uint64_t v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
      uint64_t result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void))(*(void *)v2 + 96))(v2, v5, v3 + 16, *(void *)(v3 + 32));
      **(unsigned char **)(v3 + 8) |= result;
    }
  }
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145BB58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x28uLL);
  *(void *)size_t v2 = &unk_1F145BB58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP18IsPropertySettableEjRK26AudioObjectPropertyAddressP11HALS_ClientEUb0_E3__1NS_9allocatorIS8_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
}

void *___ZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  v10[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 40);
  size_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v7 = *v2;
  int v8 = *((_DWORD *)v2 + 2);
  int v9 = 0;
  int v4 = *(_DWORD *)(a1 + 72);
  uint64_t v5 = operator new(0x30uLL);
  void *v5 = &unk_1F145BBD8;
  v5[1] = &v9;
  std::runtime_error v5[2] = v7;
  *((_DWORD *)v5 + 6) = v8;
  *((_DWORD *)v5 + 7) = v4;
  *((_OWORD *)v5 + 2) = *(_OWORD *)(a1 + 56);
  v10[3] = v5;
  HALS_MetaDevice_HostedDSP::VisitSubdevices(v3, (uint64_t)v10);
  __n128 result = std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100](v10);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
  return result;
}

void sub_1BAA823B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2;
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEEclEOSF_(uint64_t result, HALS_MetaSubDevice **a2)
{
  size_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    __n128 result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void))(*(void *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(void *)(v3 + 40));
    if (result)
    {
      if (!**(_DWORD **)(v3 + 8))
      {
        uint64_t v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
        __n128 result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void, void, void))(*(void *)v2 + 104))(v2, v5, v3 + 16, *(unsigned int *)(v3 + 28), *(void *)(v3 + 32), *(void *)(v3 + 40));
        **(_DWORD **)(v3 + 8) = result;
      }
    }
  }
  return result;
}

void sub_1BAA824D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145BBD8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  *(void *)(a2 + 40) = *(void *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x30uLL);
  *(void *)size_t v2 = &unk_1F145BBD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((void *)v2 + 5) = *(void *)(a1 + 40);
  return result;
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_ClientEUb1_E3__2NS_9allocatorISA_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
}

void *___ZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  char v12 = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  size_t v2 = *(uint64_t **)(a1 + 40);
  uint64_t v10 = *v2;
  int v11 = *((_DWORD *)v2 + 2);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = a1 + 56;
  int v6 = *(_DWORD *)(a1 + 80);
  int v7 = *(_DWORD *)(a1 + 84);
  int v8 = (char *)operator new(0x48uLL);
  *(void *)int v8 = &unk_1F145BC58;
  *((void *)v8 + 1) = &v12;
  *((void *)v8 + 2) = v10;
  *((_DWORD *)v8 + 6) = v11;
  *((_DWORD *)v8 + 7) = v6;
  *((void *)v8 + 4) = v4;
  *((void *)v8 + 5) = v5;
  *((_DWORD *)v8 + 12) = v7;
  *(_OWORD *)(v8 + 56) = *(_OWORD *)(a1 + 64);
  v13[3] = v8;
  HALS_MetaDevice_HostedDSP::VisitSubdevices(v3, (uint64_t)v13);
  return std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100](v13);
}

void sub_1BAA82698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(HALS_MetaSubDevice const*)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3;
}

uint64_t _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEEclEOSH_(uint64_t result, HALS_MetaSubDevice **a2)
{
  size_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    __n128 result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void))(*(void *)v2 + 88))(v2, RealDeviceObjectID, v3 + 16, *(void *)(v3 + 64));
    if (result)
    {
      if (!**(unsigned char **)(v3 + 8))
      {
        uint64_t v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
        __n128 result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void, void, void, void, void, void))(*(void *)v2 + 112))(v2, v5, v3 + 16, *(unsigned int *)(v3 + 28), *(void *)(v3 + 32), **(void **)(v3 + 40), *(unsigned int *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64));
        **(unsigned char **)(v3 + 8) = 1;
      }
    }
  }
  return result;
}

void sub_1BAA827D8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISI_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145BC58;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x48uLL);
  *(void *)size_t v2 = &unk_1F145BC58;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  __n128 result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZZNK25HALS_MetaDevice_HostedDSP15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_ClientEUb2_E3__3NS_9allocatorISC_EEFvPK18HALS_MetaSubDeviceEED0Ev()
{
}

void *___ZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  char v18 = 0;
  uint64_t v3 = *(void *)(a1 + 40);
  size_t v2 = *(uint64_t **)(a1 + 48);
  uint64_t v16 = *v2;
  int v17 = *((_DWORD *)v2 + 2);
  uint64_t v4 = *(void *)(a1 + 56);
  int v5 = *(_DWORD *)(a1 + 80);
  int v6 = *(_DWORD *)(a1 + 84);
  int v7 = operator new(0x40uLL);
  *int v7 = &unk_1F145BCD8;
  v7[1] = &v18;
  v7[2] = v16;
  *((_DWORD *)v7 + 6) = v17;
  *((_DWORD *)v7 + 7) = v5;
  v7[4] = v4;
  *((_DWORD *)v7 + 10) = v6;
  *((_OWORD *)v7 + 3) = *(_OWORD *)(a1 + 64);
  int v21 = v7;
  int v8 = *(uint64_t **)(*(void *)v3 + 1344);
  int v9 = *(uint64_t **)(*(void *)v3 + 1352);
  if (v8 != v9)
  {
    int v10 = 0;
    do
    {
      uint64_t v12 = *v8;
      uint64_t v11 = v8[1];
      v8 += 3;
      v10 += (unint64_t)(v11 - v12) >> 3;
    }
    while (v8 != v9);
    if (v10)
    {
      for (int i = 0; i != v10; ++i)
      {
        uint64_t SubDeviceByIndex = HALS_MetaDeviceDescription::GetSubDeviceByIndex(*(uint64_t ***)(*(void *)v3 + 1344), *(HALS_MetaDeviceDescription **)(*(void *)v3 + 1352), i);
        if (SubDeviceByIndex)
        {
          uint64_t v19 = SubDeviceByIndex;
          if (!v21) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(void *, uint64_t *))(*v21 + 48))(v21, &v19);
        }
      }
    }
  }
  __n128 result = std::__function::__value_func<void ()(HALS_MetaSubDevice *)>::~__value_func[abi:ne180100](v20);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v18;
  return result;
}

void sub_1BAA82A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(HALS_MetaSubDevice *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(HALS_MetaSubDevice *)>::~__value_func[abi:ne180100](void *a1)
{
  size_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *_ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE11target_typeEv()
{
  return &_ZTIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_ClientEUb3_E3__4;
}

uint64_t _ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_ClientEUb3_E3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEEclEOSE_(uint64_t result, HALS_MetaSubDevice **a2)
{
  size_t v2 = *a2;
  if (*a2)
  {
    uint64_t v3 = result;
    uint64_t RealDeviceObjectID = HALS_MetaSubDevice::GetRealDeviceObjectID(*a2);
    __n128 result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void))(*(void *)v2 + 96))(v2, RealDeviceObjectID, v3 + 16, *(void *)(v3 + 56));
    if (result)
    {
      uint64_t v5 = HALS_MetaSubDevice::GetRealDeviceObjectID(v2);
      __n128 result = (*(uint64_t (**)(HALS_MetaSubDevice *, uint64_t, uint64_t, void, void, void, void, void))(*(void *)v2 + 120))(v2, v5, v3 + 16, *(unsigned int *)(v3 + 28), *(void *)(v3 + 32), *(unsigned int *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56));
      **(unsigned char **)(v3 + 8) = 1;
    }
  }
  return result;
}

void sub_1BAA82BF0(void *a1)
{
}

__n128 _ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE7__cloneEPNS0_6__baseISF_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145BCD8;
  __n128 result = *(__n128 *)(a1 + 8);
  long long v3 = *(_OWORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 40);
  *(void *)(a2 + 56) = *(void *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEE7__cloneEv(uint64_t a1)
{
  size_t v2 = (char *)operator new(0x40uLL);
  *(void *)size_t v2 = &unk_1F145BCD8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((void *)v2 + 7) = *(void *)(a1 + 56);
  return result;
}

void _ZNSt3__110__function6__funcIZZN25HALS_MetaDevice_HostedDSP15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS7_P11HALS_ClientEUb3_E3__4NS_9allocatorISA_EEFvP18HALS_MetaSubDeviceEED0Ev()
{
}

void AMCP::Device::~Device(AMCP::Device *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t AMCP::Device::Device(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v4 = (AMCP::Object *)AMCP::Clock::Clock(a1, a2, a3);
  *(void *)long long v4 = &unk_1F145BD68;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x61646576);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    int v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&v11[2] = "Device.cpp";
      __int16 v12 = 1024;
      int v13 = 27;
      __int16 v14 = 2080;
      int v15 = "constructed_correct_class(k_class_id_device)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAA82EB4(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = &unk_1F145F4E8;
  long long v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Device::Device(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_mutex_base **)(**(void **)a2 + 16);
  *(void *)buf = &unk_1F145BD88;
  *(void *)uint64_t v16 = a3;
  v19[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v14, v5, (uint64_t)buf);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v6 = v14[0];
  if (v14[0]) {
    int v7 = *(_DWORD *)v14[0];
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 8) = v7;
  int v8 = (std::__shared_weak_count *)v14[1];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    *(void *)a1 = &unk_1F14642B8;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
    *(void *)a1 = &unk_1F14642B8;
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
  *(void *)a1 = &unk_1F145BD68;
  uint64_t v9 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x61646576);
  if ((v9 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v16 = 2080;
      *(void *)&uint64_t v16[2] = "Device.cpp";
      __int16 v17 = 1024;
      int v18 = 43;
      LOWORD(v19[0]) = 2080;
      *(void *)((char *)v19 + 2) = "constructed_correct_class(k_class_id_device)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAA83114(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  long long v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP6DeviceC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1650682995u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "slcbbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      long long v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "bcls");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      uint64_t v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      mach_port_t v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAA833F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::is_base_of(AMCP *this, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t result = 1;
  if (this && this != a2)
  {
    AMCP::get_class_traits((AMCP *)&v6, a2);
    unsigned int v5 = HIDWORD(v6);
    if (v10 < 0) {
      operator delete(__p);
    }
    if (v7)
    {
      __int16 v8 = v7;
      operator delete(v7);
    }
    return AMCP::is_base_of(this, v5, v4);
  }
  return result;
}

uint64_t AMCP::Core::Core::get_simple_required_property<1969841184u>(void *a1, AMCP::Core::Core *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  strcpy(buf, " diubolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, a2, (const AMCP::Address *)buf);
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      char v10 = 4;
      strcpy((char *)__p, "uid ");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v14 = 1024;
      int v15 = 391;
      __int16 v16 = 2080;
      int v17 = "optional_value.operator BOOL() == true";
      __int16 v18 = 2080;
      uint64_t v19 = __p;
      __int16 v20 = 1024;
      int v21 = 1735159650;
      __int16 v22 = 1024;
      int v23 = 0;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  CFTypeRef v4 = cf;
  if (cf) {
    CFRetain(cf);
  }
  *a1 = v4;
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void sub_1BAA83618(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

CFComparisonResult applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(const __CFString *cf, const __CFString **a2)
{
  if (cf)
  {
    CFRetain(cf);
    CFStringRef v4 = *a2;
    if (!v4)
    {
      CFComparisonResult v5 = kCFCompareGreaterThan;
LABEL_9:
      CFRelease(cf);
      return v5;
    }
  }
  else
  {
    CFStringRef v4 = *a2;
    if (!*a2) {
      return 0;
    }
  }
  CFRetain(v4);
  if (cf) {
    CFComparisonResult v5 = CFStringCompare(cf, v4, 0);
  }
  else {
    CFComparisonResult v5 = kCFCompareLessThan;
  }
  CFRelease(v4);
  if (cf) {
    goto LABEL_9;
  }
  return v5;
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(unsigned char *a1, AMCP::Core::Core *a2, const AMCP::Address *a3)
{
  if (!AMCP::Core::Core::has_property(a2, a3))
  {
LABEL_13:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)a2, (unsigned int *)a3);
  uint64_t v6 = v13;
  if (!v13) {
    goto LABEL_9;
  }
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)v11, v6);
    int v8 = 0;
    *(void *)a1 = v11[0];
    a1[8] = 1;
    goto LABEL_10;
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, v6);
    AMCP::Thing::convert_to<applesauce::CF::StringRef>(&v10, (uint64_t)v11);
    *(void *)a1 = v10;
    a1[8] = 1;
    if (v12) {
      v12(0, v11, 0, 0);
    }
    int v8 = 0;
  }
  else
  {
LABEL_9:
    int v8 = 1;
  }
LABEL_10:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v8) {
    goto LABEL_13;
  }
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t AMCP::Core::Core::has_property(AMCP::Core::Core *this, const AMCP::Address *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a2 == 707406378 || *((_DWORD *)a2 + 1) == 707406378 || *((_DWORD *)a2 + 2) == -1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v11, "com.apple.coreaudio", "AMCP");
    int v8 = *(NSObject **)v11;
    if (*(void *)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      LODWORD(v11) = 67109890;
      HIDWORD(v11) = v10;
      *(_WORD *)char v12 = 2080;
      *(void *)&v12[2] = "Core.h";
      __int16 v13 = 1024;
      int v14 = 224;
      __int16 v15 = 2080;
      __int16 v16 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v11, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v11, (int8x8_t *)this, (unsigned int *)a2);
  uint64_t v4 = (uint64_t)v11;
  if (v11)
  {
    unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)v4, Has_Property))
    {
      uint64_t v4 = AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>((void *)v4);
    }
    else
    {
      unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      uint64_t v4 = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)v4, v6) != 0;
    }
  }
  if (*(void *)v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
  }
  return v4;
}

void sub_1BAA839B4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::find_operation(AMCP::Core::Core *this, int8x8_t *a2, unsigned int *a3)
{
  __int16 v18 = a2 + 6;
  char v19 = 1;
  caulk::concurrent::shared_spin_lock::lock_shared((unsigned int *)&a2[6]);
  int8x8_t v6 = a2[2];
  if (!*(void *)&v6) {
    goto LABEL_18;
  }
  uint64_t v7 = *a3;
  unsigned int v8 = a3[1];
  unsigned int v9 = a3[2];
  unint64_t v10 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(void *)&v9 & 0xFFFFFFLL;
  uint8x8_t v11 = (uint8x8_t)vcnt_s8(v6);
  v11.i16[0] = vaddlv_u8(v11);
  if (v11.u32[0] > 1uLL)
  {
    uint64_t v12 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(void *)&v9 & 0xFFFFFFLL;
    if (v10 >= *(void *)&v6) {
      uint64_t v12 = v10 % *(void *)&v6;
    }
  }
  else
  {
    uint64_t v12 = v10 & (*(void *)&v6 - 1);
  }
  __int16 v13 = *(uint64_t ***)(*(void *)&a2[1] + 8 * v12);
  if (!v13 || (int v14 = *v13) == 0)
  {
LABEL_18:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v18);
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v10 == v15) {
      break;
    }
    if (v11.u32[0] > 1uLL)
    {
      if (v15 >= *(void *)&v6) {
        v15 %= *(void *)&v6;
      }
    }
    else
    {
      v15 &= *(void *)&v6 - 1;
    }
    if (v15 != v12) {
      goto LABEL_18;
    }
LABEL_17:
    int v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_18;
    }
  }
  if (v14[2] != __PAIR64__(v8, v7) || *((_DWORD *)v14 + 6) != v9) {
    goto LABEL_17;
  }
  uint64_t v17 = v14[5];
  *(void *)this = v14[4];
  *((void *)this + 1) = v17;
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  return std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100]((uint64_t)&v18);
}

uint64_t AMCP::Core::Operation::call_function<applesauce::CF::StringRef>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint8x8_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)float32x4_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    char v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Strin"
          "gRef, Argument_Types = <>]";
    float32x4_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    __int16 v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFComparisonResult v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)float32x4_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    char v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Strin"
          "gRef, Argument_Types = <>]";
    float32x4_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    __int16 v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAA83F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Thing>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint8x8_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)float32x4_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    char v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Thing, Argument_Types = <>]";
    float32x4_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    __int16 v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  CFComparisonResult v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)float32x4_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    char v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Thing, Argument_Types = <>]";
    float32x4_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    __int16 v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAA844D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::StringRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  CFComparisonResult v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::runtime_error v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    CFComparisonResult v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        uint64_t result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint8x8_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    mach_port_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    uint64_t result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAA84730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[239];
}

void AMCP::Thing::~Thing(AMCP::Thing *this)
{
  uint64_t v1 = (void (*)(void, AMCP::Thing *, void, void))*((void *)this + 4);
  if (v1) {
    v1(0, this, 0, 0);
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[154];
}

void *std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(void *a1, unint64_t a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  uint8x8_t v3 = (uint8x8_t)vcnt_s8(v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    unint64_t v4 = a2;
    if (*(void *)&v2 <= a2) {
      unint64_t v4 = a2 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v4 = (*(void *)&v2 - 1) & a2;
  }
  CFComparisonResult v5 = *(void **)(*a1 + 8 * v4);
  if (!v5) {
    return 0;
  }
  uint64_t result = (void *)*v5;
  if (*v5)
  {
    do
    {
      unint64_t v7 = result[1];
      if (v7 == a2)
      {
        if (result[2] == a2) {
          return result;
        }
      }
      else
      {
        if (v3.u32[0] > 1uLL)
        {
          if (v7 >= *(void *)&v2) {
            v7 %= *(void *)&v2;
          }
        }
        else
        {
          v7 &= *(void *)&v2 - 1;
        }
        if (v7 != v4) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

AMCP::Utility::With_Realtime_Disabled *AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled(AMCP::Utility::With_Realtime_Disabled *this)
{
  *(unsigned char *)this = 0;
  int8x8_t v2 = pthread_self();
  BOOL is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v2, v3);
  *(unsigned char *)this = is_thread_configured_for_realtime;
  if (is_thread_configured_for_realtime)
  {
    CFComparisonResult v5 = pthread_self();
    AMCP::Utility::configure_thread_for_normal_priority(v5, v6);
  }
  return this;
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  va_start(va, a2);
  int v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    int v6 = *(char *)(a2 + 23);
    if (v6 >= 0) {
      unint64_t v7 = (char *)a2;
    }
    else {
      unint64_t v7 = *(char **)a2;
    }
    if (v6 >= 0) {
      size_t v8 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v8 = *(void *)(a2 + 8);
    }
    int v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 56) = &unk_1F148A978;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F148A8D8;
  *(void *)(a1 + 16) = &unk_1F148A910;
  *(void *)(a1 + 56) = &unk_1F148A948;
  uint64_t v10 = 0;
  uint64_t v6 = *(void *)(a2 + 24);
  if (v6)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v6 + 40))(&v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v10, v9);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v9);
    uint64_t v7 = v10;
  }
  else
  {
    uint64_t v7 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v7);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + 56) = &unk_1F148A978;
  std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F148A8D8;
  *(void *)(a1 + 16) = &unk_1F148A910;
  *(void *)(a1 + 56) = &unk_1F148A948;
  return a1;
}

void sub_1BAA84B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

char **applesauce::backtrace::snapshot_N<64>::snapshot_N(char **a1)
{
  std::vector<void *>::vector(a1);
  int v2 = backtrace((void **)*a1, (unint64_t)(a1[1] - *a1) >> 3);
  std::vector<void *>::resize(a1, v2);
  return a1;
}

void boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>()
{
}

void sub_1BAA84D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_1BAA84EAC(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x1C1859840);
}

void boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x1C1859840);
}

void AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled(AMCP::Utility::With_Realtime_Disabled *this)
{
  if (*(unsigned char *)this)
  {
    uint64_t v1 = pthread_self();
    AMCP::Utility::configure_thread_for_realtime(v1, (_opaque_pthread_t *)0x880DE, 0);
  }
}

void sub_1BAA84FB8(void *a1)
{
}

uint64_t *boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2 && (*(unsigned int (**)(uint64_t))(*(void *)v2 + 32))(v2)) {
    *a1 = 0;
  }
  return a1;
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);

  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_1BAA85190(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone()
{
}

void sub_1BAA85380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(v10);
  MEMORY[0x1C1859840](v10, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 32))(result);
  }
  *a1 = a2;
  if (a2)
  {
    long long v5 = *(uint64_t (**)(uint64_t))(*(void *)a2 + 24);
    return v5(a2);
  }
  return result;
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error(v1);
}

void boost::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::shared_ptr<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>(void *a1, uint64_t a2)
{
  *a1 = a2;
  a1[1] = 0;
  operator new();
}

void sub_1BAA855C8(void *a1)
{
  __cxa_begin_catch(a1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 24))(v1);
  }
  __cxa_rethrow();
}

void sub_1BAA85600(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  boost::detail::shared_count::~shared_count(v1);
  _Unwind_Resume(a1);
}

void boost::detail::shared_count::~shared_count(atomic_uint **this)
{
  uint64_t v1 = *this;
  if (*this && atomic_fetch_add(v1 + 2, 0xFFFFFFFF) == 1)
  {
    (*(void (**)(atomic_uint *))(*(void *)v1 + 16))(v1);
    if (atomic_fetch_add(v1 + 3, 0xFFFFFFFF) == 1) {
      (*(void (**)(atomic_uint *))(*(void *)v1 + 24))(v1);
    }
  }
}

void boost::exception_detail::error_info_container_impl::clone(void *a1@<X8>)
{
  *a1 = 0;
  operator new();
}

void sub_1BAA85904()
{
}

void sub_1BAA8595C()
{
}

void *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = (void *)(a1 + 8);
  long long v5 = *(void **)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = v5[4];
    if (v7 != a3)
    {
      size_t v8 = (const char *)(*(void *)(a3 + 8) & 0x7FFFFFFFFFFFFFFFLL);
      do
      {
        uint64_t v9 = (const char *)(*(void *)(v7 + 8) & 0x7FFFFFFFFFFFFFFFLL);
        if (strcmp(v8, v9) < 0)
        {
          uint64_t v10 = (void *)*v5;
          uint64_t v4 = v5;
          if (!*v5) {
            break;
          }
        }
        else
        {
          if ((strcmp(v9, v8) & 0x80000000) == 0) {
            break;
          }
          uint64_t v4 = v5 + 1;
          uint64_t v10 = (void *)v5[1];
          if (!v10) {
            break;
          }
        }
        uint64_t v7 = v10[4];
        long long v5 = v10;
      }
      while (v7 != a3);
    }
  }
  else
  {
    long long v5 = (void *)(a1 + 8);
  }
  *a2 = v5;
  return v4;
}

uint64_t *std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(atomic_uint ***)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      boost::detail::shared_count::~shared_count(v1 + 6);
    }
    operator delete(v1);
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint8x8_t v3 = (uint64_t *)v2[2];
      uint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint8x8_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            const char *v9 = v2;
            v2[2] = (uint64_t)v9;
            uint8x8_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          uint64_t *v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (int v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint8x8_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint8x8_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_base::destroy(uint64_t this)
{
  if (this) {
    return (*(uint64_t (**)(void))(*(void *)this + 8))();
  }
  return this;
}

uint64_t boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::exception_detail::error_info_base>::~sp_counted_impl_p()
{
}

BOOL boost::exception_detail::error_info_container_impl::release(boost::exception_detail::error_info_container_impl *this)
{
  int v1 = *((_DWORD *)this + 14) - 1;
  *((_DWORD *)this + 14) = v1;
  if (this && !v1)
  {
    if (*((char *)this + 55) < 0) {
      operator delete(*((void **)this + 4));
    }
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*((atomic_uint ***)this + 2));
    MEMORY[0x1C1859840](this, 0x10B3C409A6CECE4);
  }
  return v1 == 0;
}

void std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(atomic_uint **a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(*a1);
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::destroy(a1[1]);
    boost::detail::shared_count::~shared_count(a1 + 6);
    operator delete(a1);
  }
}

uint64_t boost::exception_detail::error_info_container_impl::add_ref(uint64_t this)
{
  return this;
}

void boost::exception_detail::error_info_container_impl::set(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  if (!*a2) {
    __assert_rtn("set", "info.hpp", 77, "x");
  }
  int v6 = (uint64_t **)(a1 + 8);
  uint64_t v7 = (uint64_t **)std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__find_equal<boost::exception_detail::type_info_>(a1 + 8, &v16, *a3);
  int v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = v7;
    int v8 = (uint64_t *)operator new(0x38uLL);
    *((void *)&v14 + 1) = a1 + 16;
    uint64_t v10 = *a3;
    v8[5] = 0;
    v8[6] = 0;
    v8[4] = v10;
    char v15 = 1;
    std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, v16, v9, v8);
    *(void *)&long long v14 = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v14);
  }
  uint64_t v12 = *a2;
  uint64_t v11 = a2[1];
  if (v11) {
    atomic_fetch_add_explicit((atomic_uint *volatile)(v11 + 8), 1u, memory_order_relaxed);
  }
  long long v13 = *(_OWORD *)(v8 + 5);
  v8[5] = v12;
  v8[6] = v11;
  long long v14 = v13;
  boost::detail::shared_count::~shared_count((atomic_uint **)&v14 + 1);
  if (*(char *)(a1 + 55) < 0)
  {
    **(unsigned char **)(a1 + 32) = 0;
    *(void *)(a1 + 40) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 55) = 0;
  }
}

uint64_t boost::exception_detail::error_info_container_impl::get@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = (void *)(result + 16);
  long long v5 = *(void **)(result + 16);
  if (!v5) {
    goto LABEL_12;
  }
  uint64_t v6 = *a2;
  uint64_t v7 = (void *)(result + 16);
  do
  {
    uint64_t v8 = v5[4];
    if (v8 == v6)
    {
      uint64_t v7 = v5;
    }
    else
    {
      uint64_t result = strcmp((const char *)(*(void *)(v8 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL));
      if ((int)result < 0) {
        ++v5;
      }
      else {
        uint64_t v7 = v5;
      }
    }
    long long v5 = (void *)*v5;
  }
  while (v5);
  if (v4 != v7
    && ((uint64_t v9 = v7[4], v6 == v9)
     || (uint64_t result = strcmp((const char *)(*(void *)(v6 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(void *)(v9 + 8) & 0x7FFFFFFFFFFFFFFFLL)), (result & 0x80000000) == 0)))
  {
    uint64_t v10 = v7[6];
    *a3 = v7[5];
    a3[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(v10 + 8), 1u, memory_order_relaxed);
    }
  }
  else
  {
LABEL_12:
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t boost::exception_detail::error_info_container_impl::diagnostic_information(boost::exception_detail::error_info_container_impl *this, const char *a2)
{
  void (***v6)(void **__return_ptr);
  void **v7;
  uint64_t v8;
  boost::exception_detail::error_info_container_impl *v9;
  boost::exception_detail::error_info_container_impl *v10;
  BOOL v11;
  uint64_t v12;
  long long v13;
  uint64_t result;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  void v18[10];
  char v19;
  uint64_t v20;

  if (a2)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
    size_t v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)a2, v4);
    long long v5 = (boost::exception_detail::error_info_container_impl *)*((void *)this + 1);
    if (v5 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16))
    {
      do
      {
        uint64_t v6 = (void (***)(void **__return_ptr))*((void *)v5 + 5);
        if (!v6) {
          __assert_rtn("operator*", "shared_ptr.hpp", 780, "px != 0");
        }
        (**v6)(__p);
        if (v16 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        if (v16 >= 0) {
          uint64_t v8 = HIBYTE(v16);
        }
        else {
          uint64_t v8 = (uint64_t)__p[1];
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v17, (uint64_t)v7, v8);
        if (SHIBYTE(v16) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v9 = (boost::exception_detail::error_info_container_impl *)*((void *)v5 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = *(boost::exception_detail::error_info_container_impl **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (boost::exception_detail::error_info_container_impl *)*((void *)v5 + 2);
            uint64_t v11 = *(void *)v10 == (void)v5;
            long long v5 = v10;
          }
          while (!v11);
        }
        long long v5 = v10;
      }
      while (v10 != (boost::exception_detail::error_info_container_impl *)((char *)this + 16));
    }
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)v18);
    uint64_t v12 = v16;
    long long v13 = *(_OWORD *)__p;
    *(_OWORD *)std::string __p = *((_OWORD *)this + 2);
    uint64_t v16 = *((void *)this + 6);
    *((_OWORD *)this + 2) = v13;
    *((void *)this + 6) = v12;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
    long long v17 = *MEMORY[0x1E4FBA418];
    *(void *)((char *)&v18[-1] + *(void *)(v17 - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
    v18[0] = MEMORY[0x1E4FBA470] + 16;
    if (v19 < 0) {
      operator delete((void *)v18[8]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C1859700](&v20);
  }
  uint64_t result = (uint64_t)this + 32;
  if (*((char *)this + 55) < 0) {
    return *(void *)result;
  }
  return result;
}

void sub_1BAA86230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA498] + 64;
  *(void *)(a1 + 112) = MEMORY[0x1E4FBA498] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x1E4FBA418] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x1E4FBA418] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  long long v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x1E4FBA498] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1BAA863D8(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x1C1859700](v1);
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1C1859320](v20, a1);
  if (v20[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x1E4FBA258]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_23;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    int64_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_23;
    }
    if (v16 >= 1)
    {
      std::string::basic_string[abi:ne180100](&__b, v16, (char)v9);
      long long v17 = v22 >= 0 ? &__b : (std::locale *)__b.__locale_;
      uint64_t v18 = (*(uint64_t (**)(uint64_t, std::locale *, int64_t))(*(void *)v7 + 96))(v7, v17, v16);
      if (v22 < 0) {
        operator delete(__b.__locale_);
      }
      if (v18 != v16) {
        goto LABEL_23;
      }
    }
    if (v11 - v12 < 1
      || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) == v11 - v12)
    {
      *((void *)v6 + 3) = 0;
    }
    else
    {
LABEL_23:
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x1C1859330](v20);
  return a1;
}

void sub_1BAA86640(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x1C1859330](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1BAA8661CLL);
}

void sub_1BAA866AC(_Unwind_Exception *a1)
{
}

void *std::stringbuf::str[abi:ne180100]<std::allocator<char>>(void *__dst, uint64_t a2)
{
  uint64_t v2 = __dst;
  int v3 = *(_DWORD *)(a2 + 96);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *(void *)(a2 + 88);
    unint64_t v6 = *(void *)(a2 + 48);
    if (v5 < v6)
    {
      *(void *)(a2 + 88) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void **)(a2 + 40);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      *((unsigned char *)__dst + 23) = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void **)(a2 + 16);
    unint64_t v5 = *(void *)(a2 + 32);
  }
  int v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    v2[1] = v4;
    v2[2] = v10 | 0x8000000000000000;
    *uint64_t v2 = v11;
    uint64_t v2 = v11;
  }
  else
  {
    *((unsigned char *)__dst + 23) = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  __dst = memmove(v2, v8, v4);
LABEL_16:
  *((unsigned char *)v2 + v4) = 0;
  return __dst;
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA418];
  uint64_t v3 = *MEMORY[0x1E4FBA418];
  *(void *)a1 = *MEMORY[0x1E4FBA418];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C1859700](a1 + 112);
  return a1;
}

void *std::string::basic_string[abi:ne180100](void *__b, size_t __len, int __c)
{
  if (__len >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (__len >= 0x17)
  {
    size_t v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17) {
      size_t v7 = __len | 7;
    }
    size_t v8 = v7 + 1;
    unint64_t v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *std::locale __b = v6;
  }
  else
  {
    *((unsigned char *)__b + 23) = __len;
    unint64_t v6 = __b;
    if (!__len) {
      goto LABEL_9;
    }
  }
  memset(v6, __c, __len);
LABEL_9:
  *((unsigned char *)v6 + __len) = 0;
  return __b;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_untyped_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_local_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::get_deleter()
{
  return 0;
}

uint64_t boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::dispose(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void boost::detail::sp_counted_impl_p<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::~sp_counted_impl_p()
{
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(void *a1)
{
  *a1 = &unk_1F148AA90;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

void *boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::~error_info(void *a1)
{
  *a1 = &unk_1F148AA90;
  uint64_t v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::clone()
{
}

void sub_1BAA86B24(_Unwind_Exception *a1)
{
  size_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C1859840](v1, 0x81C4018A671A6);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>::name_value_string(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  LODWORD(status.__r_.__value_.__l.__data_) = 0;
  size_t outlen = 0;
  size_t v4 = __cxa_demangle((const char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL), 0, &outlen, (int *)&status);
  unint64_t v5 = v4;
  if (v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = (char *)((unint64_t)"PN10applesauce10exceptions13tag_backtraceE" & 0x7FFFFFFFFFFFFFFFLL);
  }
  std::string::basic_string[abi:ne180100]<0>(&v18, v6);
  free(v5);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)&v18;
  }
  else {
    v7.__i_ = (std::__wrap_iter<const char *>::iterator_type)v18.__r_.__value_.__r.__words[0];
  }
  std::string::insert(&v18, v7, 91);
  std::string v19 = v18;
  memset(&v18, 0, sizeof(v18));
  size_t v8 = std::string::append(&v19, "] = ", 4uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&outlen);
  applesauce::backtrace::detail::symbolicate_snapshot(&status, a1 + 8);
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string status = &status;
  }
  else {
    p_std::string status = (std::string *)status.__r_.__value_.__r.__words[0];
  }
  if ((status.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(status.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = status.__r_.__value_.__l.__size_;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&outlen, (uint64_t)p_status, size);
  if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(status.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(v16, (uint64_t)v23);
  size_t outlen = *MEMORY[0x1E4FBA418];
  *(void *)((char *)&v23[-1] + *(void *)(outlen - 24)) = *(void *)(MEMORY[0x1E4FBA418] + 24);
  v23[0] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C1859700](&v25);
  if ((v17 & 0x80u) == 0) {
    uint64_t v12 = v16;
  }
  else {
    uint64_t v12 = (void **)v16[0];
  }
  if ((v17 & 0x80u) == 0) {
    std::string::size_type v13 = v17;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v16[1];
  }
  BOOL v14 = std::string::append(&v20, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v21, 10);
  *a2 = v21;
  memset(&v21, 0, sizeof(v21));
  if ((char)v17 < 0) {
    operator delete(v16[0]);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
}

void sub_1BAA86E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::backtrace::detail::symbolicate_snapshot(std::string *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  unint64_t v4 = *(void *)(a2 + 8) - *(void *)a2;
  uint64_t v37 = backtrace_symbols(*(void *const **)a2, v4 >> 3);
  if ((int)(v4 >> 3) < 1) {
    goto LABEL_72;
  }
  unint64_t v36 = v4 >> 3;
  uint64_t v5 = 0;
  uint64_t v38 = (v4 >> 3);
  do
  {
    unint64_t v6 = *(const void **)(*(void *)a2 + 8 * v5);
    snprintf(__str, 0x40uLL, "%-3d\t%*p\t", v5, 18, v6);
    size_t v7 = strlen(__str);
    std::string::append(v3, __str, v7);
    memset(&v46, 0, sizeof(v46));
    if (dladdr(v6, &v46)) {
      BOOL v8 = v46.dli_sname == 0;
    }
    else {
      BOOL v8 = 1;
    }
    if (!v8)
    {
      std::string::basic_string[abi:ne180100]<0>(&v42, (char *)v46.dli_sname);
      LODWORD(status.__r_.__value_.__l.__data_) = 0;
      outlen.__r_.__value_.__r.__words[0] = 0;
      if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v15 = &v42;
      }
      else {
        long long v15 = (std::string *)v42.__r_.__value_.__r.__words[0];
      }
      int64_t v16 = __cxa_demangle((const char *)v15, 0, (size_t *)&outlen, (int *)&status);
      unsigned __int8 v17 = v16;
      int data = (int)status.__r_.__value_.__l.__data_;
      if (LODWORD(status.__r_.__value_.__l.__data_))
      {
        LOBYTE(__p[0]) = 0;
        char v45 = 0;
        if (!v16) {
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      size_t v20 = outlen.__r_.__value_.__r.__words[0] - 1;
      if (outlen.__r_.__value_.__r.__words[0] - 1 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v20 >= 0x17)
      {
        float32x4_t v33 = v3;
        uint64_t v34 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v20 | 7) != 0x17) {
          uint64_t v34 = v20 | 7;
        }
        uint64_t v35 = v34 + 1;
        p_dst = (long long *)operator new(v34 + 1);
        *((void *)&__dst + 1) = v20;
        int64_t v48 = v35 | 0x8000000000000000;
        *(void *)&long long __dst = p_dst;
        uint64_t v3 = v33;
      }
      else
      {
        HIBYTE(v48) = outlen.__r_.__value_.__s.__data_[0] - 1;
        p_dst = &__dst;
        if (outlen.__r_.__value_.__r.__words[0] == 1)
        {
LABEL_68:
          *((unsigned char *)p_dst + v20) = 0;
          *(_OWORD *)std::string __p = __dst;
          int64_t v44 = v48;
          char v45 = 1;
          if (!v17)
          {
LABEL_24:
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v42.__r_.__value_.__l.__data_);
              if (data)
              {
LABEL_26:
                dli_sname = (char *)v46.dli_sname;
                if (!v46.dli_sname) {
                  dli_sname = v37[v5];
                }
LABEL_36:
                dli_saddr = v46.dli_saddr;
                std::string::basic_string[abi:ne180100]<0>(&status, dli_sname);
                uint64_t v23 = std::string::append(&status, " + ", 3uLL);
                long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
                outlen.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
                *(_OWORD *)&outlen.__r_.__value_.__l.__data_ = v24;
                v23->__r_.__value_.__l.__size_ = 0;
                v23->__r_.__value_.__r.__words[2] = 0;
                v23->__r_.__value_.__r.__words[0] = 0;
                std::to_string(&v39, (unsigned char *)v6 - dli_saddr);
                if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v25 = &v39;
                }
                else {
                  uint64_t v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
                }
                if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v39.__r_.__value_.__l.__size_;
                }
                char v27 = std::string::append(&outlen, (const std::string::value_type *)v25, size);
                long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
                v42.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v28;
                v27->__r_.__value_.__l.__size_ = 0;
                v27->__r_.__value_.__r.__words[2] = 0;
                v27->__r_.__value_.__r.__words[0] = 0;
                float32x4_t v29 = std::string::append(&v42, "\n", 1uLL);
                long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
                int64_t v48 = v29->__r_.__value_.__r.__words[2];
                long long __dst = v30;
                v29->__r_.__value_.__l.__size_ = 0;
                v29->__r_.__value_.__r.__words[2] = 0;
                v29->__r_.__value_.__r.__words[0] = 0;
                if (v48 >= 0) {
                  int v31 = (const std::string::value_type *)&__dst;
                }
                else {
                  int v31 = (const std::string::value_type *)__dst;
                }
                if (v48 >= 0) {
                  std::string::size_type v32 = HIBYTE(v48);
                }
                else {
                  std::string::size_type v32 = *((void *)&__dst + 1);
                }
                std::string::append(v3, v31, v32);
                if (SHIBYTE(v48) < 0) {
                  operator delete((void *)__dst);
                }
                if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v42.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v39.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(outlen.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(outlen.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(status.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(status.__r_.__value_.__l.__data_);
                }
                if (!data && SHIBYTE(v44) < 0)
                {
                  BOOL v14 = __p[0];
                  goto LABEL_61;
                }
                goto LABEL_62;
              }
            }
            else if (data)
            {
              goto LABEL_26;
            }
            if (v44 >= 0) {
              dli_sname = (char *)__p;
            }
            else {
              dli_sname = (char *)__p[0];
            }
            goto LABEL_36;
          }
LABEL_23:
          free(v17);
          goto LABEL_24;
        }
      }
      memmove(p_dst, v17, v20);
      goto LABEL_68;
    }
    long long v9 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&__dst, v37[v5]);
    uint64_t v10 = std::string::append(v9, "\n", 1uLL);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    int64_t v44 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string __p = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    if (v44 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    if (v44 >= 0) {
      std::string::size_type v13 = HIBYTE(v44);
    }
    else {
      std::string::size_type v13 = (std::string::size_type)__p[1];
    }
    std::string::append(v3, (const std::string::value_type *)v12, v13);
    if (SHIBYTE(v44) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v48) < 0)
    {
      BOOL v14 = (void *)__dst;
LABEL_61:
      operator delete(v14);
    }
LABEL_62:
    ++v5;
  }
  while (v38 != v5);
  if (v36 == 64) {
    std::string::append(v3, "[truncated?]\n", 0xDuLL);
  }
LABEL_72:
  if (v37) {
    free(v37);
  }
}

void sub_1BAA87428(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::vector<void *>::vector(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(0x200uLL);
  a1[2] = v2 + 32;
  *uint64_t v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  v2[12] = 0u;
  v2[13] = 0u;
  v2[14] = 0u;
  v2[15] = 0u;
  v2[16] = 0u;
  v2[17] = 0u;
  v2[18] = 0u;
  v2[19] = 0u;
  v2[20] = 0u;
  v2[21] = 0u;
  v2[22] = 0u;
  v2[23] = 0u;
  v2[24] = 0u;
  v2[25] = 0u;
  v2[26] = 0u;
  v2[27] = 0u;
  v2[28] = 0u;
  v2[29] = 0u;
  v2[30] = 0u;
  v2[31] = 0u;
  *a1 = v2;
  a1[1] = v2 + 32;
  return a1;
}

void std::vector<void *>::resize(char **a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = (v4 - *a1) >> 3;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    std::string v19 = &v3[8 * a2];
    goto LABEL_19;
  }
  unint64_t v6 = a2 - v5;
  size_t v7 = a1[2];
  if (a2 - v5 <= (v7 - v4) >> 3)
  {
    bzero(a1[1], 8 * v6);
    std::string v19 = &v4[8 * v6];
LABEL_19:
    a1[1] = v19;
    return;
  }
  if (a2 >> 61) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v8 = v7 - v3;
  uint64_t v9 = v8 >> 2;
  if (v8 >> 2 <= a2) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v9;
  }
  long long v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
  uint64_t v12 = &v11[8 * v5];
  BOOL v14 = &v11[8 * v13];
  bzero(v12, 8 * v6);
  long long v15 = &v12[8 * v6];
  unsigned __int8 v17 = *a1;
  int64_t v16 = a1[1];
  if (v16 != *a1)
  {
    do
    {
      uint64_t v18 = *((void *)v16 - 1);
      v16 -= 8;
      *((void *)v12 - 1) = v18;
      v12 -= 8;
    }
    while (v16 != v17);
    int64_t v16 = *a1;
  }
  *a1 = v12;
  a1[1] = v15;
  a1[2] = v14;
  if (v16)
  {
    operator delete(v16);
  }
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 2);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error(v1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[158];
}

unsigned int *caulk::concurrent::shared_spin_lock::lock_shared(unsigned int *this)
{
  uint64_t v1 = this;
  for (unsigned int i = 0; ; ++i)
  {
    unsigned int v3 = atomic_load(v1);
    if (v3 <= 0x7FFFFFFE) {
      break;
    }
LABEL_6:
    if (i >= 0x65)
    {
      uint64_t v5 = mach_absolute_time();
      this = (unsigned int *)mach_wait_until(v5 + 24000);
    }
  }
  unsigned int v4 = v3;
  while (1)
  {
    atomic_compare_exchange_strong((atomic_uint *volatile)v1, &v4, v3 + 1);
    if (v4 == v3) {
      return this;
    }
    unsigned int v3 = v4;
    if (v4 >= 0x7FFFFFFF) {
      goto LABEL_6;
    }
  }
}

uint64_t std::shared_lock<caulk::concurrent::shared_spin_lock>::~shared_lock[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v1 = *(unsigned int **)result;
    uint64_t v2 = atomic_load(*(unsigned int **)result);
    int v3 = v2 & 0x7FFFFFFF;
    if ((v2 & 0x7FFFFFFF) != 0)
    {
      while ((v2 & 0x80000000) == 0)
      {
        unsigned int v4 = v3 - 1;
        uint64_t v5 = v2;
        atomic_compare_exchange_strong((atomic_uint *volatile)v1, (unsigned int *)&v5, v4);
        if (v5 == v2) {
          return result;
        }
        uint64_t v2 = v5;
        int v3 = v5 & 0x7FFFFFFF;
        if (!v3) {
          goto LABEL_6;
        }
      }
      _os_assert_log();
      uint64_t result = _os_crash();
      __break(1u);
    }
    else
    {
LABEL_6:
      _os_assert_log();
      uint64_t result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

uint64_t AMCP::Core::Operation::call_function<BOOL,AMCP::Core::Has_Property_Function>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t Has_Property = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>();
  int v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, Has_Property);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      long long v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)long long v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types "
          "= <AMCP::Core::Has_Property_Function>]";
    std::string::size_type v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    long long v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unsigned int v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>(),
        (int v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    size_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types "
          "= <AMCP::Core::Has_Property_Function>]";
    std::string::size_type v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    long long v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v5 + 48))(v5, buf);
}

void sub_1BAA87CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Has_Property_Function)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[150];
}

void AMCP::get_class_traits(AMCP *this, unsigned int a2)
{
  stock_class_traits_list = (void *)AMCP::get_stock_class_traits_list(this);
  unint64_t v6 = (_DWORD *)*stock_class_traits_list;
  uint64_t v5 = (_DWORD *)stock_class_traits_list[1];
  if (v5 != (_DWORD *)*stock_class_traits_list)
  {
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v5 - *stock_class_traits_list) >> 4);
    do
    {
      unint64_t v8 = v7 >> 1;
      mach_port_t v9 = &v6[20 * (v7 >> 1)];
      unsigned int v11 = *v9;
      unint64_t v10 = v9 + 20;
      v7 += ~(v7 >> 1);
      if (v11 < a2) {
        unint64_t v6 = v10;
      }
      else {
        unint64_t v7 = v8;
      }
    }
    while (v7);
  }
  if (v6 == v5 || *v6 != a2)
  {
    *(_DWORD *)this = a2;
    *((_DWORD *)this + 1) = 0;
    *((unsigned char *)this + 8) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    *((void *)this + 2) = 0;
    long long v15 = operator new(4uLL);
    *((void *)this + 2) = v15;
    *v15++ = 1735159650;
    *((void *)this + 3) = v15;
    *((void *)this + 4) = v15;
    *((_DWORD *)this + 10) = -1;
    std::string::basic_string[abi:ne180100]<0>((void *)this + 6, "Unknown");
    *((_DWORD *)this + 18) = 0;
  }
  else
  {
    uint64_t v12 = *(void *)v6;
    *((unsigned char *)this + 8) = *((unsigned char *)v6 + 8);
    *(void *)this = v12;
    *((void *)this + 2) = 0;
    *((void *)this + 3) = 0;
    *((void *)this + 4) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)this + 2, *((const void **)v6 + 2), *((void *)v6 + 3), (uint64_t)(*((void *)v6 + 3) - *((void *)v6 + 2)) >> 2);
    *((_DWORD *)this + 10) = v6[10];
    long long v13 = (std::string *)((char *)this + 48);
    if (*((char *)v6 + 71) < 0)
    {
      std::string::__init_copy_ctor_external(v13, *((const std::string::value_type **)v6 + 6), *((void *)v6 + 7));
    }
    else
    {
      long long v14 = *((_OWORD *)v6 + 3);
      *((void *)this + 8) = *((void *)v6 + 8);
      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
    }
    *((_DWORD *)this + 18) = v6[18];
  }
}

void sub_1BAA87F04(void *a1)
{
  unsigned int v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  __clang_call_terminate(a1);
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAA87F90(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(unint64_t a1)
{
  if (a1 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  if (!AMCP::Core::Core::has_property(a1, a2)) {
    goto LABEL_14;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)a1, (unsigned int *)a2);
  uint64_t v5 = v13;
  if (v13)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      LODWORD(v5) = AMCP::Core::Operation::call_function<unsigned int>(v5);
LABEL_5:
      int v7 = 0;
      unsigned int v2 = v5 >> 8;
      goto LABEL_11;
    }
    unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, v5);
      LODWORD(v5) = AMCP::Thing::convert_to<unsigned int>((uint64_t)v11);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      goto LABEL_5;
    }
    LOBYTE(v5) = 0;
  }
  int v7 = 1;
LABEL_11:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v7)
  {
    uint64_t v9 = 0x100000000;
    return v9 | v5 | (v2 << 8);
  }
LABEL_14:
  uint64_t v9 = 0;
  LOBYTE(v5) = 0;
  return v9 | v5 | (v2 << 8);
}

uint64_t AMCP::Core::Operation::call_function<unsigned int>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  int v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)long long v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = unsigned int, Argument_Types = <>]";
    std::string::size_type v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    long long v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>(),
        (int v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = unsigned int, Argument_Types = <>]";
    std::string::size_type v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    long long v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAA885B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<unsigned int>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<unsigned int>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  std::runtime_error v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    int v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<unsigned int>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    unint64_t v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned int v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  unint64_t v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    mach_port_t v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAA887E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<unsigned int>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<unsigned int>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3B0], v3);
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[261];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[152];
}

uint64_t std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145BD88;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145BD88;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Device::Device(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

unint64_t AMCP::Device::get_input_safety_offset(AMCP::Device *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1935763060u>(v5, 1768845428);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1935763060u>(AMCP::Core::Core *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)buf = 1935763060;
  *(_DWORD *)&uint8_t buf[4] = a2;
  *(_DWORD *)unint64_t v10 = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      char v8 = 4;
      strcpy((char *)__p, "saft");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)unint64_t v10 = 2080;
      *(void *)&v10[2] = "Core.h";
      __int16 v11 = 1024;
      int v12 = 391;
      __int16 v13 = 2080;
      uint64_t v14 = "optional_value.operator BOOL() == true";
      __int16 v15 = 2080;
      long long v16 = __p;
      __int16 v17 = 1024;
      int v18 = a2;
      __int16 v19 = 1024;
      int v20 = 0;
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAA88B80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Device::get_output_safety_offset(AMCP::Device *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1935763060u>(v5, 1869968496);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

void AMCP::Device::get_stream_list(AMCP::Device *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (int v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    char v8 = v7;
    mach_port_t v9 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v9)
    {
      AMCP::Core::Core::get_simple_required_property<1937009955u>(a3, v9, a2);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void AMCP::Core::Core::get_simple_required_property<1937009955u>(void *a1, AMCP::Core::Core *a2, int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)buf = 1937009955;
  *(_DWORD *)&uint8_t buf[4] = a3;
  *(_DWORD *)long long v16 = 0;
  AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v12, a2, (AMCP::Address *)buf);
  if (!v14)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v7 = **(NSObject ***)buf;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      char v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      char v11 = 4;
      strcpy((char *)__p, "stm#");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v16 = 2080;
      *(void *)&_OWORD v16[2] = "Core.h";
      __int16 v17 = 1024;
      int v18 = 391;
      __int16 v19 = 2080;
      int v20 = "optional_value.operator BOOL() == true";
      __int16 v21 = 2080;
      uint64_t v22 = __p;
      __int16 v23 = 1024;
      int v24 = a3;
      __int16 v25 = 1024;
      int v26 = 0;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  mach_port_t v6 = v12;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, v12, v13, (v13 - (uint64_t)v12) >> 2);
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAA88E58(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(uint64_t a1, AMCP::Core::Core *this, AMCP::Address *a3)
{
  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_13:
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)this, (unsigned int *)a3);
  mach_port_t v6 = v15;
  if (!v15) {
    goto LABEL_9;
  }
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)&v12, v6);
    int v8 = 0;
    *(_OWORD *)a1 = v12;
    *(void *)(a1 + 16) = v13;
    *(unsigned char *)(a1 + 24) = 1;
    goto LABEL_10;
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)&v12, v6);
    AMCP::Thing::convert_to<std::vector<unsigned int>>(&v10, (uint64_t)&v12);
    *(_OWORD *)a1 = v10;
    *(void *)(a1 + 16) = v11;
    *(unsigned char *)(a1 + 24) = 1;
    if (v14) {
      v14(0, &v12, 0, 0);
    }
    int v8 = 0;
  }
  else
  {
LABEL_9:
    int v8 = 1;
  }
LABEL_10:
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v8) {
    goto LABEL_13;
  }
}

uint64_t AMCP::Core::Operation::call_function<std::vector<unsigned int>>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      long long v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    std::string::size_type v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsigned "
          "int>, Argument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    long long v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    std::string::size_type v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::vector<unsigned "
          "int>, Argument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    long long v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAA89424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void *AMCP::Thing::convert_to<std::vector<unsigned int>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::runtime_error v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    mach_port_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAA89688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned int>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[191];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[156];
}

uint64_t AMCP::Device::get_stream(AMCP::Device *a1, int a2, unsigned int a3)
{
  uint64_t v4 = (uint64_t **)*((void *)a1 + 4);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  v21[0] = v6;
  v21[1] = v5;
  if (v5) {
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
  }
  if (a2) {
    int v7 = 1768845428;
  }
  else {
    int v7 = 1869968496;
  }
  AMCP::Device::get_stream_list(a1, v7, &v19);
  uint64_t v8 = v19;
  unint64_t v9 = v20;
  if (v19 == v20)
  {
LABEL_12:
    uint64_t v12 = 0;
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v11 = v19;
    while (1)
    {
      AMCP::Stream::Stream((uint64_t)&v16, (uint64_t)v21, *v11);
      AMCP::Stream::get_current_format((AMCP::Stream *)&v16, (uint64_t)v14);
      v10 += v15;
      if (v10 >= a3) {
        break;
      }
      uint64_t v16 = &unk_1F145F4E8;
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      if (++v11 == v9) {
        goto LABEL_12;
      }
    }
    uint64_t v12 = v17;
    uint64_t v16 = &unk_1F145F4E8;
    if (v18) {
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v8) {
    operator delete(v8);
  }
  AMCP::System_Context::~System_Context(v21);
  return v12;
}

uint64_t AMCP::Device::count_channels(AMCP::Device *this, int a2)
{
  AMCP::Device::get_stream_list(this, a2, &v13);
  unint64_t v3 = v13;
  uint64_t v4 = v14;
  if (v13 == v14)
  {
    uint64_t v5 = 0;
    if (!v13) {
      return v5;
    }
    goto LABEL_7;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v13;
  do
  {
    AMCP::Stream::Stream((uint64_t)v11, *((void *)this + 4), *v6);
    AMCP::Stream::get_current_format((AMCP::Stream *)v11, (uint64_t)v9);
    uint64_t v7 = v10;
    v11[0] = &unk_1F145F4E8;
    if (v12) {
      std::__shared_weak_count::__release_weak(v12);
    }
    v5 += v7;
    ++v6;
  }
  while (v6 != v4);
  if (v3) {
LABEL_7:
  }
    operator delete(v3);
  return v5;
}

BOOL AMCP::Device::can_be_default_input_device(AMCP::Device *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    BOOL simple_required = AMCP::Core::Core::get_simple_required_property<1684434036u>(v5, 1768845428);
  }
  else {
    BOOL simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

BOOL AMCP::Core::Core::get_simple_required_property<1684434036u>(AMCP::Core::Core *a1, int a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)buf = 1684434036;
  *(_DWORD *)&uint8_t buf[4] = a2;
  *(_DWORD *)uint64_t v11 = 0;
  unint64_t v3 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if ((unsigned __int16)v3 <= 0xFFu)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      char v9 = 4;
      strcpy((char *)__p, "dflt");
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&v11[2] = "Core.h";
      __int16 v12 = 1024;
      int v13 = 391;
      __int16 v14 = 2080;
      int v15 = "optional_value.operator BOOL() == true";
      __int16 v16 = 2080;
      unsigned int v17 = __p;
      __int16 v18 = 1024;
      int v19 = a2;
      __int16 v20 = 1024;
      int v21 = 0;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return v3 != 0;
}

void sub_1BAA89B70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  if (!AMCP::Core::Core::has_property(a1, a2)) {
    goto LABEL_13;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v12, (int8x8_t *)a1, (unsigned int *)a2);
  uint64_t v4 = v12;
  if (v12)
  {
    unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
    {
      LOBYTE(v4) = AMCP::Core::Operation::call_function<BOOL>(v4);
LABEL_5:
      int v6 = 0;
      goto LABEL_10;
    }
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v7))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v10, v4);
      LOBYTE(v4) = AMCP::Thing::convert_to<BOOL>((uint64_t)v10);
      if (v11) {
        v11(0, v10, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v6 = 1;
LABEL_10:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!v6)
  {
    int v8 = 1;
    return v4 | (v8 << 8);
  }
LABEL_13:
  LOBYTE(v4) = 0;
  int v8 = 0;
  return v4 | (v8 << 8);
}

uint64_t AMCP::Core::Operation::call_function<BOOL>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  unint64_t v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)long long v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types = <>]";
    std::string::size_type v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>(),
        (unint64_t v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)long long v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Types = <>]";
    std::string::size_type v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAA8A0FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

BOOL AMCP::Thing::convert_to<BOOL>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<BOOL>();
  unint64_t v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  std::runtime_error v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    unint64_t v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4)
    {
      int v5 = *v4;
      return v5 != 0;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<BOOL>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    unsigned int v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  int v6 = (unsigned __int8 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    mach_port_t v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  int v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5 != 0;
}

void sub_1BAA8A32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<BOOL>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<BOOL>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA378], v3);
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[171];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[78];
}

BOOL AMCP::Device::can_be_default_output_device(AMCP::Device *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  int v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    BOOL simple_required = AMCP::Core::Core::get_simple_required_property<1684434036u>(v5, 1869968496);
  }
  else {
    BOOL simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

BOOL AMCP::Device::can_be_default_system_output_device(AMCP::Device *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  int v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "tlfsptuo");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    int v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unsigned int v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "sflt");
        *(_DWORD *)buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        uint64_t v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        std::runtime_error v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1869968496;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAA8A63C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Device::wants_display_routing(AMCP::Device *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2 && (unint64_t v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    uint64_t v4 = v3;
    int v5 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v5)
    {
      uint64_t v10 = 0x676C6F6264727465;
      int v11 = 0;
      __int16 v6 = AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)&v10);
      unsigned __int8 v7 = v6;
      int v8 = HIBYTE(v6);
    }
    else
    {
      int v8 = 0;
      unsigned __int8 v7 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  else
  {
    unsigned __int8 v7 = 0;
    int v8 = 0;
  }
  return v7 | (v8 << 8);
}

uint64_t AMCP::Device::wants_display_routing(AMCP::Device *this, char a2)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4)
  {
    int v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      __int16 v6 = v5;
      unsigned __int8 v7 = (AMCP::Core::Core *)*((void *)this + 2);
      if (!v7)
      {
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return a2 & 1;
      }
      uint64_t v13 = 0x676C6F6264727465;
      int v14 = 0;
      if (!AMCP::Core::Core::has_property(v7, (const AMCP::Address *)&v13))
      {
LABEL_16:
        LOBYTE(v8) = a2;
LABEL_17:
        a2 = (char)v8;
        goto LABEL_18;
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v17, (int8x8_t *)v7, (unsigned int *)&v13);
      int v8 = v17;
      if (v17)
      {
        unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
        {
          LOBYTE(v8) = AMCP::Core::Operation::call_function<BOOL>(v8);
LABEL_8:
          int v10 = 0;
          goto LABEL_13;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v15, v8);
          LOBYTE(v8) = AMCP::Thing::convert_to<BOOL>((uint64_t)v15);
          if (v16) {
            v16(0, v15, 0, 0);
          }
          goto LABEL_8;
        }
      }
      int v10 = 1;
LABEL_13:
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      if (!v10) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  return a2 & 1;
}

void AMCP::Device::get_channel_layout(AMCP::Device *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v5 || (unsigned __int8 v7 = std::__shared_weak_count::lock(v5)) == 0)
  {
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 24) = 0;
    return;
  }
  int v8 = v7;
  unint64_t v9 = (int8x8_t *)*((void *)this + 2);
  if (v9)
  {
    v14[0] = 1936879204;
    v14[1] = a2;
    void v14[2] = 0;
    if (AMCP::Core::Core::has_property((AMCP::Core::Core *)v9, (const AMCP::Address *)v14))
    {
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v20, v9, v14);
      int v10 = v20;
      if (!v20) {
        goto LABEL_13;
      }
      unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11))
      {
        AMCP::Core::Operation::call_function<CA::ChannelLayout>((uint64_t)&v17, v10);
        int v12 = 0;
        *(_OWORD *)a3 = v17;
        *(void *)(a3 + 16) = v18;
        *(unsigned char *)(a3 + 24) = 1;
        goto LABEL_14;
      }
      unint64_t v13 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v13))
      {
        AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)&v17, v10);
        AMCP::Thing::convert_to<CA::ChannelLayout>(&v15, (uint64_t)&v17);
        *(_OWORD *)a3 = v15;
        *(void *)(a3 + 16) = v16;
        *(unsigned char *)(a3 + 24) = 1;
        if (v19) {
          v19(0, &v17, 0, 0);
        }
        int v12 = 0;
      }
      else
      {
LABEL_13:
        int v12 = 1;
      }
LABEL_14:
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (!v12) {
        goto LABEL_18;
      }
    }
  }
  *(unsigned char *)a3 = 0;
  *(unsigned char *)(a3 + 24) = 0;
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

uint64_t AMCP::Core::Operation::call_function<CA::ChannelLayout>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    std::string::size_type v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ChannelLayout, Ar"
          "gument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    std::string::size_type v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ChannelLayout, Ar"
          "gument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAA8AE08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void *AMCP::Thing::convert_to<CA::ChannelLayout>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
  int v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::runtime_error v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    int v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    mach_port_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAA8B064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
{
  v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[231];
}

void *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    unint64_t result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      unint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAA8B14C(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[344];
}

void AMCP::Device::get_channel_layout(AMCP::Device *this@<X0>, const CA::ChannelLayout *a2@<X2>, unsigned int a3@<W1>, void *a4@<X8>)
{
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7)
  {
    unint64_t v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      mach_port_t v10 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v10)
      {
        v15[0] = 1936879204;
        v15[1] = a3;
        void v15[2] = 0;
        if (!AMCP::Core::Core::has_property(v10, (const AMCP::Address *)v15))
        {
LABEL_19:
          *a4 = 0;
          a4[1] = 0;
          a4[2] = 0;
          std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a4, *(const void **)a2, *((void *)a2 + 1), *((void *)a2 + 1) - *(void *)a2);
          goto LABEL_20;
        }
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)v10, v15);
        unint64_t v11 = v18;
        if (v18)
        {
          unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v11, v12))
          {
            AMCP::Core::Operation::call_function<CA::ChannelLayout>((uint64_t)a4, v11);
LABEL_8:
            int v13 = 0;
            goto LABEL_16;
          }
          unint64_t v14 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
          if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v11, v14))
          {
            AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v16, v11);
            AMCP::Thing::convert_to<CA::ChannelLayout>(a4, (uint64_t)v16);
            if (v17) {
              v17(0, v16, 0, 0);
            }
            goto LABEL_8;
          }
        }
        int v13 = 1;
LABEL_16:
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        if (!v13) {
          goto LABEL_20;
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a4, *(const void **)a2, *((void *)a2 + 1), *((void *)a2 + 1) - *(void *)a2);
  if (v9) {
LABEL_20:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
}

void ___Z34LogVolumeChangeForClientSideDeviceNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKv_block_invoke(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v2 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v2 = (void *)*v2;
    }
    unint64_t v3 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      unint64_t v3 = (void *)*v3;
    }
    uint64_t v4 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = *(void *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 112);
    uint64_t v7 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    int v8 = 136316930;
    unint64_t v9 = "HALB_Logging.cpp";
    __int16 v10 = 1024;
    int v11 = 31;
    __int16 v12 = 2080;
    int v13 = v2;
    __int16 v14 = 2048;
    uint64_t v15 = v5;
    __int16 v16 = 2080;
    long long v17 = v3;
    __int16 v18 = 2080;
    uint64_t v19 = v4;
    __int16 v20 = 2048;
    uint64_t v21 = v6;
    __int16 v22 = 2080;
    uint64_t v23 = v7;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  LogVolumeChangeForClientSideDevice from %s: device id %lu, property address ['%s', '%s', %lu], volume %s", (uint8_t *)&v8, 0x4Eu);
  }
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    int v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  uint64_t v7 = (std::string *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

void sub_1BAA8B620(_Unwind_Exception *exception_object)
{
  if (v2[111] < 0) {
    operator delete(*v4);
  }
  if (v2[87] < 0) {
    operator delete(*v3);
  }
  if (v2[55] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void LogVolumeChangeForServerSideControl(uint64_t a1, unsigned int a2, unint64_t a3, unsigned int a4, int a5, float *a6, HALS_ObjectMap *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  std::string::basic_string[abi:ne180100]<0>(&v37, "(nullptr)");
  if (a5 == 4 && a6)
  {
    std::to_string(&v36, *a6);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    std::string v37 = v36;
  }
  uint64_t v18 = HALS_ObjectMap::CopyObjectByObjectID(a7);
  __int16 v20 = (HALS_ObjectMap *)v18;
  if (v18)
  {
    uint64_t v21 = (char *)(*(uint64_t (**)(uint64_t))(*(void *)v18 + 216))(v18);
    std::string::basic_string[abi:ne180100]<0>(&v36, v21);
    v22[0] = MEMORY[0x1E4F143A8];
    v22[1] = 1174405120;
    v22[2] = ___Z35LogVolumeChangeForServerSideControlNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKvjjjS5__block_invoke;
    v22[3] = &__block_descriptor_tmp_3;
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string v23 = *(std::string *)a1;
    }
    uint64_t v24 = a2;
    uint64_t v25 = (void *)bswap32(a3);
    char v26 = 5;
    char v27 = (void *)((a3 >> 40) & 0xFF00 | HIBYTE(a3) | (a3 >> 24) & 0xFF0000 | (a3 >> 8) & 0xFF000000);
    char v28 = 5;
    uint64_t v29 = a4;
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v30, v36.__r_.__value_.__l.__data_, v36.__r_.__value_.__l.__size_);
    }
    else {
      std::string v30 = v36;
    }
    if (*(char *)(a10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a10, *(void *)(a10 + 8));
    }
    else
    {
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
      v31.__r_.__value_.__r.__words[2] = *(void *)(a10 + 16);
    }
    std::string::size_type v32 = (void *)bswap32(a8);
    char v33 = 5;
    uint64_t v34 = a9;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v37;
    }
    AMCP::Utility::Dispatch_Queue::async_on_global(v22);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v31.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v30.__r_.__value_.__l.__data_);
    }
    if (v28 < 0) {
      operator delete(v27);
    }
    if (v26 < 0) {
      operator delete(v25);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v36.__r_.__value_.__l.__data_);
    }
  }
  HALS_ObjectMap::ReleaseObject(v20, v19);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_1BAA8B954(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (*(char *)(v52 - 113) < 0) {
    operator delete(*(void **)(v52 - 136));
  }
  HALS_ObjectMap::ReleaseObject(v51, a2);
  if (*(char *)(v52 - 89) < 0) {
    operator delete(*(void **)(v52 - 112));
  }
  _Unwind_Resume(a1);
}

void ___Z35LogVolumeChangeForServerSideControlNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEj26AudioObjectPropertyAddressjPKvjjjS5__block_invoke(uint64_t a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v2 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      int v2 = (void *)*v2;
    }
    unint64_t v3 = (void *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      unint64_t v3 = (void *)*v3;
    }
    long long v4 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      long long v4 = (void *)*v4;
    }
    long long v5 = (void *)(a1 + 120);
    if (*(char *)(a1 + 143) < 0) {
      long long v5 = (void *)*v5;
    }
    long long v6 = (void *)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      long long v6 = (void *)*v6;
    }
    uint64_t v7 = (void *)(a1 + 168);
    if (*(char *)(a1 + 191) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    uint64_t v8 = *(void *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 112);
    uint64_t v10 = *(void *)(a1 + 192);
    int v11 = (void *)(a1 + 200);
    if (*(char *)(a1 + 223) < 0) {
      int v11 = (void *)*v11;
    }
    int v12 = 136317954;
    int v13 = "HALB_Logging.cpp";
    __int16 v14 = 1024;
    int v15 = 53;
    __int16 v16 = 2080;
    long long v17 = v2;
    __int16 v18 = 2048;
    uint64_t v19 = v8;
    __int16 v20 = 2080;
    uint64_t v21 = v3;
    __int16 v22 = 2080;
    std::string v23 = v4;
    __int16 v24 = 2048;
    uint64_t v25 = v9;
    __int16 v26 = 2080;
    char v27 = v5;
    __int16 v28 = 2080;
    uint64_t v29 = v6;
    __int16 v30 = 2080;
    std::string v31 = v7;
    __int16 v32 = 2048;
    uint64_t v33 = v10;
    __int16 v34 = 2080;
    uint64_t v35 = v11;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  LogVolumeChangeForServerSideControl from %s: control id %lu, property address ['%s', '%s', %lu], owning device UID %s, control type %s, control scope '%s', control element %lu, volume %s", (uint8_t *)&v12, 0x76u);
  }
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE144c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE168c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE200c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 55) < 0)
  {
    int v2 = *(void **)(a1 + 32);
    operator delete(v2);
  }
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE88c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE120c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE144c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE168c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE200c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v5;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v6;
  }
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 120), *(const std::string::value_type **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v7;
  }
  if (*(char *)(a2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 144), *(const std::string::value_type **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v8;
  }
  if (*(char *)(a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), *(const std::string::value_type **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v9;
  }
  uint64_t v10 = (std::string *)(a1 + 200);
  if (*(char *)(a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 200), *(void *)(a2 + 208));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
}

void sub_1BAA8BDD8(_Unwind_Exception *exception_object)
{
  if (v2[191] < 0) {
    operator delete(*v7);
  }
  if (v2[167] < 0) {
    operator delete(*v6);
  }
  if (v2[143] < 0) {
    operator delete(*v5);
  }
  if (v2[111] < 0) {
    operator delete(*v4);
  }
  if (v2[87] < 0) {
    operator delete(*v3);
  }
  if (v2[55] < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Meta_Timebase::get_private_transport_state(AMCP::Graph::Meta_Timebase *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109890;
    HIDWORD(v4) = v3;
    *(_WORD *)long long v5 = 2080;
    *(void *)&std::runtime_error v5[2] = "Meta_Timebase.cpp";
    __int16 v6 = 1024;
    int v7 = 300;
    __int16 v8 = 2080;
    long long v9 = "false";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s This should not be called outside of tests", (uint8_t *)&v4, 0x22u);
  }
  abort();
}

uint64_t AMCP::Graph::Meta_Timebase::release_power_assertions(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 240))();
}

uint64_t AMCP::Graph::Meta_Timebase::take_power_assertions(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 232))();
}

double AMCP::Graph::Meta_Timebase::get_max_io_buffer_frame_size(AMCP::Graph::Meta_Timebase *this)
{
  double v2 = (double)(uint64_t)floor((*(double (**)(void))(**((void **)this + 5) + 224))(*((void *)this + 5)));
  double v3 = *((double *)this + 4);
  return v3 / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5)) * v2;
}

uint64_t AMCP::Graph::Meta_Timebase::reset_clock_anchor_time(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 216))();
}

uint64_t AMCP::Graph::Meta_Timebase::set_clock_anchor_time(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 208))();
}

AMCP::Log::Scope_Registry *AMCP::Graph::Meta_Timebase::wait_for_time_to_start(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  double v2 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 200))(*(void *)(a1 + 40));
  double v3 = v2;
  if (v2 == 1)
  {
    AMCP::Log::Scope_Registry::get(v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v4 = **(NSObject ***)buf;
    if (*(void *)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      __int16 v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 40) + 24))(__p);
      if (v10 >= 0) {
        __int16 v8 = __p;
      }
      else {
        __int16 v8 = (void **)__p[0];
      }
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)int v12 = 2080;
      *(void *)&v12[2] = "Meta_Timebase.cpp";
      __int16 v13 = 1024;
      int v14 = 143;
      __int16 v15 = 2080;
      __int16 v16 = v8;
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failure to start underlying hardware for Meta_Timebase: %s", buf, 0x22u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return v3;
}

uint64_t AMCP::Graph::Meta_Timebase::get_engine_ptr(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 192))();
}

uint64_t AMCP::Graph::Meta_Timebase::available_past_data(AMCP::Graph::Meta_Timebase *this)
{
  unsigned int v2 = (*(uint64_t (**)(void))(**((void **)this + 5) + 184))(*((void *)this + 5));
  double v3 = *((double *)this + 4);
  return (v3
                      / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5))
                      * (double)v2);
}

uint64_t AMCP::Graph::Meta_Timebase::supports_past_data(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 176))();
}

uint64_t AMCP::Graph::Meta_Timebase::is_valid(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 168))();
}

uint64_t AMCP::Graph::Meta_Timebase::get_rate_scalar(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 160))();
}

double AMCP::Graph::Meta_Timebase::get_sample_rate(AMCP::Graph::Meta_Timebase *this)
{
  return *((double *)this + 4);
}

unint64_t AMCP::Graph::Meta_Timebase::get_engine_info(uint64_t a1)
{
  unint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 144))(*(void *)(a1 + 40));
  unint64_t v3 = HIDWORD(v2);
  double v4 = *(double *)(a1 + 32);
  uint64_t v5 = (v4
                    / (*(double (**)(void))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40))
                    * (double)v2);
  double v6 = *(double *)(a1 + 32);
  return v5 | ((unint64_t)(v6
                                              / (*(double (**)(void))(**(void **)(a1 + 40) + 152))(*(void *)(a1 + 40))
                                              * (double)v3) << 32);
}

uint64_t AMCP::Graph::Meta_Timebase::get_anchor_time(AMCP::Graph::Meta_Timebase *this)
{
  (*(void (**)(void))(**((void **)this + 5) + 136))(*((void *)this + 5));
  if (v2)
  {
    double v3 = COERCE_DOUBLE((*(uint64_t (**)(void))(**((void **)this + 5) + 136))(*((void *)this + 5)));
    if (!v4) {
      std::__throw_bad_optional_access[abi:ne180100]();
    }
    double v5 = *((double *)this + 4);
    *(double *)&uint64_t result = v5
                       / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5))
                       * (double)(uint64_t)floor(v3);
  }
  else
  {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F8] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA348], MEMORY[0x1E4FBA1F0]);
}

uint64_t AMCP::Graph::Meta_Timebase::get_state(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 128))();
}

uint64_t AMCP::Graph::Meta_Timebase::is_running(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 120))();
}

uint64_t AMCP::Graph::Meta_Timebase::stop(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 112))();
}

uint64_t AMCP::Graph::Meta_Timebase::advance_to_time(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v3.n128_f64[0] = (*(double (**)(uint64_t))(*(void *)v2 + 152))(v2)
                 / *(double *)(a1 + 32)
                 * (double)(uint64_t)floor(a2);
  char v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)v2 + 104);

  return v4(v2, v3);
}

uint64_t AMCP::Graph::Meta_Timebase::advance(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  v3.n128_f64[0] = (*(double (**)(uint64_t))(*(void *)v2 + 152))(v2)
                 / *(double *)(a1 + 32)
                 * (double)(uint64_t)floor(a2);
  char v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)v2 + 96);

  return v4(v2, v3);
}

uint64_t AMCP::Graph::Meta_Timebase::begin_cycle(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 88))();
}

uint64_t AMCP::Graph::Meta_Timebase::start(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 80))();
}

double AMCP::Graph::Meta_Timebase::get_host_ticks_per_frame(AMCP::Graph::Meta_Timebase *this)
{
  double v2 = (*(double (**)(void))(**((void **)this + 5) + 72))(*((void *)this + 5));
  return v2
       * ((*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5))
        / *((double *)this + 4));
}

double AMCP::Graph::Meta_Timebase::convert_host_to_sample_time(AMCP::Graph::Meta_Timebase *this)
{
  double v2 = (*(double (**)(void))(**((void **)this + 5) + 64))(*((void *)this + 5));
  double v3 = *((double *)this + 4);
  return v2 * (v3 / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5)));
}

uint64_t AMCP::Graph::Meta_Timebase::convert_sample_to_host_time(AMCP::Graph::Meta_Timebase *this, double a2)
{
  uint64_t v2 = *((void *)this + 5);
  v3.n128_f64[0] = (*(double (**)(uint64_t))(*(void *)v2 + 152))(v2) / *((double *)this + 4) * a2;
  char v4 = *(uint64_t (**)(uint64_t, __n128))(*(void *)v2 + 56);

  return v4(v2, v3);
}

uint64_t AMCP::Graph::Meta_Timebase::get_clock_domain(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 48))();
}

double AMCP::Graph::Meta_Timebase::get_last_zero_time_stamp@<D0>(AMCP::Graph::Meta_Timebase *this@<X0>, double *a2@<X8>)
{
  (*(void (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
  double v4 = *a2;
  double v5 = *((double *)this + 4);
  *a2 = v4 * (v5 / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5)));
  double v6 = *((double *)this + 4);
  double result = a2[2] * (v6 / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5)));
  a2[2] = result;
  return result;
}

double AMCP::Graph::Meta_Timebase::get_current_time@<D0>(AMCP::Graph::Meta_Timebase *this@<X0>, double *a2@<X8>)
{
  (*(void (**)(void))(**((void **)this + 5) + 32))(*((void *)this + 5));
  double v4 = *a2;
  double v5 = *((double *)this + 4);
  *a2 = v4 * (v5 / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5)));
  double v6 = *((double *)this + 4);
  double result = a2[2] * (v6 / (*(double (**)(void))(**((void **)this + 5) + 152))(*((void *)this + 5)));
  a2[2] = result;
  return result;
}

uint64_t AMCP::Graph::Meta_Timebase::get_underlying_device_uid(AMCP::Graph::Meta_Timebase *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 24))();
}

uint64_t AMCP::Graph::Meta_Timebase::get_clock_id(AMCP::Graph::Meta_Timebase *this)
{
  return (uint64_t)this + 8;
}

void AMCP::Graph::Meta_Timebase::~Meta_Timebase(AMCP::Graph::Meta_Timebase *this)
{
  AMCP::Graph::Meta_Timebase::~Meta_Timebase(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;

  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t std::string::basic_string[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    double v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

unint64_t std::hash<std::pair<double,std::string>>::operator()(double *a1)
{
  double v2 = *a1;
  uint64_t v1 = (char *)(a1 + 1);
  unint64_t v3 = 0xC6A4A7935BD1E995 * *(void *)&v2;
  if (v2 == 0.0) {
    unint64_t v3 = 0;
  }
  uint64_t v4 = 0x35A98F4D286A90B9 * (v3 ^ (v3 >> 47)) + 3864292196u;
  unint64_t v5 = boost::hash<std::string>::operator()(v1);
  return 3864292196u
       - 0x395B586CA42E166BLL
       * (v4 ^ (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))));
}

uint64_t std::equal_to<std::pair<double,std::string>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 != *(double *)a2) {
    return 0;
  }
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  double v6 = (const void **)(a1 + 8);
  long long v9 = *(unsigned __int8 **)(a2 + 8);
  mach_port_t v7 = (unsigned __int8 *)(a2 + 8);
  __int16 v8 = v9;
  if (v5 < 0) {
    mach_port_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    double v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::pair<double,std::string>,std::shared_ptr<AMCP::Graph::Timebase>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::pair<double,std::string>,std::shared_ptr<AMCP::Graph::Timebase>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::pair<double,std::string> const,std::shared_ptr<AMCP::Graph::Timebase>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 8);
    operator delete(v3);
  }
}

unint64_t boost::hash<std::string>::operator()(char *a1)
{
  uint64_t v1 = a1[23];
  uint64_t v2 = *((void *)a1 + 1);
  if ((v1 & 0x80u) == 0) {
    uint64_t v3 = a1;
  }
  else {
    uint64_t v3 = *(char **)a1;
  }
  unint64_t result = 0;
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = v2;
  }
  for (; v1; --v1)
  {
    uint64_t v5 = *v3++;
    unint64_t result = 3864292196u
           - 0x395B586CA42E166BLL
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ result);
  }
  return result;
}

AMCP::Graph::Meta_Timebase *std::unique_ptr<AMCP::Graph::Meta_Timebase>::reset[abi:ne180100](AMCP::Graph::Meta_Timebase **a1)
{
  unint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    AMCP::Graph::Meta_Timebase::~Meta_Timebase(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<AMCP::Graph::Meta_Timebase *,std::shared_ptr<AMCP::Graph::Meta_Timebase>::__shared_ptr_default_delete<AMCP::Graph::Meta_Timebase,AMCP::Graph::Meta_Timebase>,std::allocator<AMCP::Graph::Meta_Timebase>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph13Meta_TimebaseEE27__shared_ptr_default_deleteIS3_S3_EE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

AMCP::Graph::Meta_Timebase *std::__shared_ptr_pointer<AMCP::Graph::Meta_Timebase *,std::shared_ptr<AMCP::Graph::Meta_Timebase>::__shared_ptr_default_delete<AMCP::Graph::Meta_Timebase,AMCP::Graph::Meta_Timebase>,std::allocator<AMCP::Graph::Meta_Timebase>>::__on_zero_shared(uint64_t a1)
{
  unint64_t result = *(AMCP::Graph::Meta_Timebase **)(a1 + 24);
  if (result)
  {
    AMCP::Graph::Meta_Timebase::~Meta_Timebase(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::Graph::Meta_Timebase *,std::shared_ptr<AMCP::Graph::Meta_Timebase>::__shared_ptr_default_delete<AMCP::Graph::Meta_Timebase,AMCP::Graph::Meta_Timebase>,std::allocator<AMCP::Graph::Meta_Timebase>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void __destroy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_40c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t __copy_helper_block_ea8_48c47_ZTSNSt3__110shared_ptrI19HALS_UCRemotePlugInEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + ++*(_DWORD *)(this + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1BAA8D72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef((const void **)va);
  _Unwind_Resume(a1);
}

mcp_applesauce::CF::PropertyListRef *mcp_applesauce::CF::PropertyListRef::from_get(mcp_applesauce::CF::PropertyListRef *this, CFTypeRef cf)
{
  uint64_t v2 = this;
  if (cf)
  {
    CFRetain(cf);
    return mcp_applesauce::CF::PropertyListRef::PropertyListRef(v2, cf);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::PropertyListRef::~PropertyListRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

mcp_applesauce::CF::PropertyListRef *mcp_applesauce::CF::PropertyListRef::PropertyListRef(mcp_applesauce::CF::PropertyListRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID()
      && v3 != CFDataGetTypeID()
      && v3 != CFNumberGetTypeID()
      && v3 != CFBooleanGetTypeID()
      && v3 != CFDateGetTypeID()
      && v3 != CFArrayGetTypeID()
      && v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAA8D8A0(_Unwind_Exception *a1)
{
  applesauce::CF::ObjectRef<void const*>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<void const*>::~ObjectRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_1BAA8DADC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BAA8DE18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void std::__shared_ptr_emplace<unsigned long long>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C2F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<unsigned long long>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C2F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAA8E0C8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAA8E2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_1BAA8E31C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::ObjectSetPropertyData(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = (void *)*((void *)this + 89);
  v24[0] = a2;
  v24[1] = a3;
  AudioObjectPropertyAddress v25 = *a4;
  uint64_t result = objc_msgSend(v10, "set_property_data:qualifier_data_size:qualifier_data:data_size:data:", v24, a5, a6, a7, a8);
  int v13 = result;
  if (result)
  {
    if (result == 1768911973)
    {
      int v14 = objc_msgSend(*((id *)this + 89), "connection_to_driver");
      [v14 invalidate];
    }
    v12.i32[0] = a4->mSelector;
    int16x8_t v15 = (int16x8_t)vmovl_u8(v12);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    *(int8x8_t *)v15.i8 = vmovn_s16(v15);
    __int32 v22 = v15.i32[0];
    char v23 = 0;
    v15.i32[0] = a4->mScope;
    int16x8_t v16 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v15.i8);
    *(int16x4_t *)v16.i8 = vrev64_s16(*(int16x4_t *)v16.i8);
    unsigned __int32 v20 = vmovn_s16(v16).u32[0];
    char v21 = 0;
    v19[0] = HIBYTE(v13);
    v19[1] = BYTE2(v13);
    v19[2] = BYTE1(v13);
    void v19[3] = v13;
    v19[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      char v27 = "HALS_UCRemotePlugIn.mm";
      __int16 v28 = 1024;
      int v29 = 1359;
      __int16 v30 = 2080;
      std::string v31 = &v22;
      __int16 v32 = 2080;
      uint64_t v33 = &v20;
      __int16 v34 = 2048;
      uint64_t v35 = mElement;
      __int16 v36 = 1024;
      int v37 = v13;
      __int16 v38 = 2080;
      std::string v39 = v19;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectSetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v13;
  }
  return result;
}

void sub_1BAA8E5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectGetPropertyData(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, unsigned int *a8, void *a9)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int v11 = (void *)*((void *)this + 89);
  v25[0] = a2;
  v25[1] = a3;
  AudioObjectPropertyAddress v26 = *a4;
  uint64_t result = objc_msgSend(v11, "get_property_data:qualifier_data_size:qualifier_data:data_size:out_data_size:out_data:", v25, a5, a6, a7, a8, a9);
  int v14 = result;
  if (result)
  {
    if (result == 1768911973)
    {
      int16x8_t v15 = objc_msgSend(*((id *)this + 89), "connection_to_driver");
      [v15 invalidate];
    }
    v13.i32[0] = a4->mSelector;
    int16x8_t v16 = (int16x8_t)vmovl_u8(v13);
    *(int16x4_t *)v16.i8 = vrev64_s16(*(int16x4_t *)v16.i8);
    *(int8x8_t *)v16.i8 = vmovn_s16(v16);
    __int32 v23 = v16.i32[0];
    char v24 = 0;
    v16.i32[0] = a4->mScope;
    int16x8_t v17 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v16.i8);
    *(int16x4_t *)v17.i8 = vrev64_s16(*(int16x4_t *)v17.i8);
    unsigned __int32 v21 = vmovn_s16(v17).u32[0];
    char v22 = 0;
    v20[0] = HIBYTE(v14);
    v20[1] = BYTE2(v14);
    void v20[2] = BYTE1(v14);
    void v20[3] = v14;
    v20[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      __int16 v28 = "HALS_UCRemotePlugIn.mm";
      __int16 v29 = 1024;
      int v30 = 1349;
      __int16 v31 = 2080;
      __int16 v32 = &v23;
      __int16 v33 = 2080;
      __int16 v34 = &v21;
      __int16 v35 = 2048;
      uint64_t v36 = mElement;
      __int16 v37 = 1024;
      int v38 = v14;
      __int16 v39 = 2080;
      uint64_t v40 = v20;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectGetPropertyData: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v14;
  }
  return result;
}

void sub_1BAA8E7C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectGetPropertyDataSize(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  __int16 v8 = (void *)*((void *)this + 89);
  v23[0] = a2;
  v23[1] = a3;
  AudioObjectPropertyAddress v24 = *a4;
  unsigned int v25 = 0;
  int v9 = objc_msgSend(v8, "get_property_data_size:qualifier_data_size:qualifier_data:out_size:", v23, a5, a6, &v25);
  int v11 = v9;
  if (v9)
  {
    if (v9 == 1768911973)
    {
      uint8x8_t v13 = objc_msgSend(*((id *)this + 89), "connection_to_driver");
      [v13 invalidate];
    }
    v10.i32[0] = a4->mSelector;
    int16x8_t v14 = (int16x8_t)vmovl_u8(v10);
    *(int16x4_t *)v14.i8 = vrev64_s16(*(int16x4_t *)v14.i8);
    *(int8x8_t *)v14.i8 = vmovn_s16(v14);
    __int32 v21 = v14.i32[0];
    char v22 = 0;
    v14.i32[0] = a4->mScope;
    int16x8_t v15 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v14.i8);
    *(int16x4_t *)v15.i8 = vrev64_s16(*(int16x4_t *)v15.i8);
    unsigned __int32 v19 = vmovn_s16(v15).u32[0];
    char v20 = 0;
    v18[0] = HIBYTE(v11);
    v18[1] = BYTE2(v11);
    v18[2] = BYTE1(v11);
    v18[3] = v11;
    v18[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      char v27 = "HALS_UCRemotePlugIn.mm";
      __int16 v28 = 1024;
      int v29 = 1338;
      __int16 v30 = 2080;
      __int16 v31 = &v21;
      __int16 v32 = 2080;
      __int16 v33 = &v19;
      __int16 v34 = 2048;
      uint64_t v35 = mElement;
      __int16 v36 = 1024;
      int v37 = v11;
      __int16 v38 = 2080;
      __int16 v39 = v18;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectGetPropertyDataSize: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v11;
  }
  return v25;
}

void sub_1BAA8E9D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL HALS_UCRemotePlugIn::ObjectIsPropertySettable(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  char v23 = 0;
  double v6 = (void *)*((void *)this + 89);
  v21[0] = a2;
  v21[1] = a3;
  AudioObjectPropertyAddress v22 = *a4;
  int v7 = objc_msgSend(v6, "is_property_settable:out_settable:", v21, &v23);
  int v9 = v7;
  if (v7)
  {
    if (v7 == 1768911973)
    {
      int v11 = objc_msgSend(*((id *)this + 89), "connection_to_driver");
      [v11 invalidate];
    }
    v8.i32[0] = a4->mSelector;
    int16x8_t v12 = (int16x8_t)vmovl_u8(v8);
    *(int16x4_t *)v12.i8 = vrev64_s16(*(int16x4_t *)v12.i8);
    *(int8x8_t *)v12.i8 = vmovn_s16(v12);
    __int32 v19 = v12.i32[0];
    char v20 = 0;
    v12.i32[0] = a4->mScope;
    int16x8_t v13 = (int16x8_t)vmovl_u8(*(uint8x8_t *)v12.i8);
    *(int16x4_t *)v13.i8 = vrev64_s16(*(int16x4_t *)v13.i8);
    unsigned __int32 v17 = vmovn_s16(v13).u32[0];
    char v18 = 0;
    v16[0] = HIBYTE(v9);
    v16[1] = BYTE2(v9);
    _OWORD v16[2] = BYTE1(v9);
    v16[3] = v9;
    v16[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t mElement = a4->mElement;
      *(_DWORD *)buf = 136316674;
      unsigned int v25 = "HALS_UCRemotePlugIn.mm";
      __int16 v26 = 1024;
      int v27 = 1326;
      __int16 v28 = 2080;
      int v29 = &v19;
      __int16 v30 = 2080;
      __int16 v31 = &v17;
      __int16 v32 = 2048;
      uint64_t v33 = mElement;
      __int16 v34 = 1024;
      int v35 = v9;
      __int16 v36 = 2080;
      int v37 = v16;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_UCRemotePlugIn::ObjectIsPropertySettable: failed:  [%s/%s/%lu], Error: %d (%s)", buf, 0x40u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v9;
  }
  return v23 != 0;
}

void sub_1BAA8EBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL HALS_UCRemotePlugIn::ObjectHasProperty(HALS_UCRemotePlugIn *this, int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  char v9 = 0;
  uint64_t v4 = (void *)*((void *)this + 89);
  v7[0] = a2;
  v7[1] = a3;
  AudioObjectPropertyAddress v8 = *a4;
  if (objc_msgSend(v4, "has_property:out_has_property:", v7, &v9)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = v9 == 0;
  }
  return !v5;
}

uint64_t HALS_UCRemotePlugIn::End_WriteMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_WriteMix(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int16x8_t v14 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v20 = "HALS_UCRemotePlugIn.mm";
      __int16 v21 = 1024;
      int v22 = 1286;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int16x8_t v15 = v14;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v15[3], a3, (AudioServerPlugInIOCycleInfo *)0x72697465, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), 0, 0);
}

void sub_1BAA8EDE0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1293;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_WriteMix message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8ED08);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>(void *a1, unsigned int a2, unsigned int a3)
{
  int8x8_t v3 = (int8x8_t)a1[1];
  if (!*(void *)&v3) {
    return 0;
  }
  unint64_t v4 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a3) ^ ((0xC6A4A7935BD1E995 * a3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47)) + 3864292196u))
     + 3864292196u;
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    unint64_t v6 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a3) ^ ((0xC6A4A7935BD1E995 * a3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47)) + 3864292196u))
       + 3864292196u;
    if (v4 >= *(void *)&v3) {
      unint64_t v6 = v4 % *(void *)&v3;
    }
  }
  else
  {
    unint64_t v6 = v4 & (*(void *)&v3 - 1);
  }
  int v7 = *(uint64_t ***)(*a1 + 8 * v6);
  if (!v7) {
    return 0;
  }
  for (uint64_t result = *v7; result; uint64_t result = (uint64_t *)*result)
  {
    unint64_t v9 = result[1];
    if (v9 == v4)
    {
      if (*((_DWORD *)result + 4) == a2 && *((_DWORD *)result + 5) == a3) {
        return result;
      }
    }
    else
    {
      if (v5.u32[0] > 1uLL)
      {
        if (v9 >= *(void *)&v3) {
          v9 %= *(void *)&v3;
        }
      }
      else
      {
        v9 &= *(void *)&v3 - 1;
      }
      if (v9 != v6) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t HALS_UCRemotePlugIn::get_buffer_type(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v6 = 0;
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  v11[0] = a2;
  v11[1] = a4;
  v11[2] = a3;
  void v11[3] = 1;
  void v11[4] = a2;
  v11[5] = 0;
  v11[6] = a3;
  v11[7] = 2;
  v11[8] = a2;
  uint64_t v12 = 0;
  int v13 = 3;
  int v14 = a2;
  uint64_t v15 = 0;
  int v7 = (void *)(a1 + 840);
  AudioObjectPropertyAddress v8 = v11;
  int v16 = 4;
  while (1)
  {
    unint64_t v9 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(v7, v8);
    if (v9)
    {
      if (v9[7] == a5) {
        break;
      }
    }
    ++v6;
    v8 += 4;
    if (v6 == 4) {
      return 0;
    }
  }
  return v11[4 * v6 + 3];
}

uint64_t *std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>(void *a1, unsigned int *a2)
{
  unint64_t v4 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  unsigned int i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (unsigned int i = (uint64_t *)*i; i; unsigned int i = (uint64_t *)*i)
    {
      unint64_t v9 = i[1];
      if (v9 == v4)
      {
        if (*((_DWORD *)i + 4) == *a2
          && *((_DWORD *)i + 5) == a2[1]
          && *((_DWORD *)i + 6) == a2[2]
          && *((_DWORD *)i + 7) == a2[3])
        {
          return i;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v9 >= *(void *)&v5) {
            v9 %= *(void *)&v5;
          }
        }
        else
        {
          v9 &= *(void *)&v5 - 1;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

unint64_t std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(unsigned int *a1)
{
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a1[1]) ^ ((0xC6A4A7935BD1E995 * a1[1]) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * *a1) ^ ((0xC6A4A7935BD1E995 * *a1) >> 47)) + 3864292196u))
           + 3864292196u) ^ (0xC6A4A7935BD1E995
                           * ((0xC6A4A7935BD1E995 * a1[2]) ^ ((0xC6A4A7935BD1E995 * a1[2]) >> 47))))
         + 3864292196u) ^ (0xC6A4A7935BD1E995
                         * ((0xC6A4A7935BD1E995 * (int)a1[3]) ^ ((0xC6A4A7935BD1E995 * (int)a1[3]) >> 47))))
       + 3864292196u;
}

uint64_t HALS_UCRemotePlugIn::Begin_WriteMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_WriteMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "HALS_UCRemotePlugIn.mm";
      __int16 v10 = 1024;
      int v11 = 1261;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationWriteMix, a4, (BOOL *)&v8);
}

void sub_1BAA8F330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1267;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_WriteMix message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8F260);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_ConvertMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ConvertMix(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v23 = "HALS_UCRemotePlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 1234;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = v16;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  int v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x636D6978, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1BAA8F594(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1242;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ConvertMix message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8F4B8);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_ConvertMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ConvertMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "HALS_UCRemotePlugIn.mm";
      __int16 v12 = 1024;
      int v13 = 1210;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationConvertMix, a4, a5);
}

void sub_1BAA8F77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1215;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ConvertMix message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8F6ACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_ProcessMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ProcessMix(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v23 = "HALS_UCRemotePlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 1183;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = v16;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  int v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x706D6978, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1BAA8F9DC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1191;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessMix message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8F900);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_ProcessMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ProcessMix(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "HALS_UCRemotePlugIn.mm";
      __int16 v12 = 1024;
      int v13 = 1159;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationProcessMix, a4, a5);
}

void sub_1BAA8FBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1164;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ProcessMix message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8FAF4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_MixOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_MixOutput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v14 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v20 = "HALS_UCRemotePlugIn.mm";
      __int16 v21 = 1024;
      int v22 = 1133;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v15 = v14;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v15[3], a3, (AudioServerPlugInIOCycleInfo *)0x6D69786F, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), 0, 0);
}

void sub_1BAA8FDF8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1140;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_MixOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8FD20);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_MixOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_MixOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "HALS_UCRemotePlugIn.mm";
      __int16 v10 = 1024;
      int v11 = 1108;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationMixOutput, a4, (BOOL *)&v8);
}

void sub_1BAA8FFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1114;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_MixOutput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA8FF0CLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_ProcessOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ProcessOutput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v23 = "HALS_UCRemotePlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 1081;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = v16;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  int v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x706F7574, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1BAA90240(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1089;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA90164);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_ProcessOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ProcessOutput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "HALS_UCRemotePlugIn.mm";
      __int16 v12 = 1024;
      int v13 = 1057;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationProcessOutput, a4, a5);
}

void sub_1BAA90428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1062;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ProcessOutput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA90358);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_ProcessInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ProcessInput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v23 = "HALS_UCRemotePlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 1030;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = v16;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  int v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x70696E70, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1BAA90688(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 1038;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA905ACLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_ProcessInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ProcessInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "HALS_UCRemotePlugIn.mm";
      __int16 v12 = 1024;
      int v13 = 1006;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationProcessInput, a4, a5);
}

void sub_1BAA90870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 1011;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ProcessInput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA907A0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_ConvertInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_ConvertInput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v16 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v23 = "HALS_UCRemotePlugIn.mm";
      __int16 v24 = 1024;
      int v25 = 979;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v17 = v16;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  int v19 = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a8);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v17[3], a3, (AudioServerPlugInIOCycleInfo *)0x63696E70, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), v19, *(_DWORD *)(a8 + 8));
}

void sub_1BAA90AD0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 987;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ProcessOutput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA909F4);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_ConvertInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ConvertInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4, BOOL *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  unint64_t v7 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      int v11 = "HALS_UCRemotePlugIn.mm";
      __int16 v12 = 1024;
      int v13 = 955;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v10, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v7[3], kAudioServerPlugInIOOperationConvertInput, a4, a5);
}

void sub_1BAA90CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 960;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ConvertInput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA90BE8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_ReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::Do_TeardownForIsolatedIO(HALS_UCRemotePlugIn *this)
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::Do_SetupForIsolatedIO(HALS_UCRemotePlugIn *this)
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::Do_IsolatedReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::Do_ReadInput(uint64_t a1, unsigned int a2, int a3, unsigned int a4, unsigned int a5, AMCP::Portal::IPC::IO_Sender *a6, uint64_t a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v14 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)(a1 + 800), a2, a4);
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      char v20 = "HALS_UCRemotePlugIn.mm";
      __int16 v21 = 1024;
      int v22 = 908;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v15 = v14;
  buffer_uint64_t type = HALS_UCRemotePlugIn::get_buffer_type(a1, a2, a3, a4, *(void *)a7);
  return AMCP::Portal::IPC::IO_Sender::do_io_operation(v15[3], a3, (AudioServerPlugInIOCycleInfo *)0x72656164, a6, a5, buffer_type, *(_DWORD *)(a7 + 8), 0, 0);
}

void sub_1BAA90F14(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long buf, __int16 a12, __int16 a13, int a14, uint64_t a15)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315906;
      *(void *)((char *)&buf + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 915;
      a13 = 1024;
      a14 = v16;
      LOWORD(a15) = 1024;
      *(_DWORD *)((char *)&a15 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Do_ReadInput message for device id %u, client id %u", (uint8_t *)&buf, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA90E3CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Begin_ReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::WillDo_ReadInput(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      unint64_t v9 = "HALS_UCRemotePlugIn.mm";
      __int16 v10 = 1024;
      int v11 = 883;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationReadInput, a4, (BOOL *)&v8);
}

void sub_1BAA910F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 889;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_ReadInput message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA91028);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_IOCycle(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_UCRemotePlugIn.mm";
      __int16 v11 = 1024;
      int v12 = 865;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::end_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1668899692, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1BAA912D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 870;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send End_IOCycle message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA91200);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_IOCycle(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_UCRemotePlugIn.mm";
      __int16 v11 = 1024;
      int v12 = 847;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::begin_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1668899692, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1BAA914A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 852;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Begin_IOCycle message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA913D4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::WillDo_IOCycle(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "HALS_UCRemotePlugIn.mm";
      __int16 v10 = 1024;
      int v11 = 828;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationCycle, a4, (BOOL *)&v8);
}

void sub_1BAA9167C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 834;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_IOCycle message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA915ACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::End_IOThread(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_UCRemotePlugIn.mm";
      __int16 v11 = 1024;
      int v12 = 810;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::end_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1953002084, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1BAA91854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 815;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send End_IOThread message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA91784);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Begin_IOThread(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, AudioServerPlugInIOCycleInfo *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      __int16 v10 = "HALS_UCRemotePlugIn.mm";
      __int16 v11 = 1024;
      int v12 = 792;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v9, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::begin_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], 1953002084, (AMCP::Portal::IPC::IO_Sender *)a4, v6);
}

void sub_1BAA91A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_free_exception(v15);
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 797;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send Begin_IOThread message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA91958);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::WillDo_IOThread(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, BOOL *a4)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  int8x8_t v5 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v8 = 136315394;
      int v9 = "HALS_UCRemotePlugIn.mm";
      __int16 v10 = 1024;
      int v11 = 773;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender", (uint8_t *)&v8, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return AMCP::Portal::IPC::IO_Sender::will_do_io_operation((AMCP::Portal::IPC::IO_Sender *)v5[3], kAudioServerPlugInIOOperationThread, a4, (BOOL *)&v8);
}

void sub_1BAA91C00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 779;
      a11 = 1024;
      a12 = v14;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to send WillDo_IOThread message for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA91B30);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Log::Scope_Registry *HALS_UCRemotePlugIn::GetZeroTimeStamp(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, double *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  int v9 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)Dl_info v46 = 136315394;
      *(void *)&v46[4] = "HALS_UCRemotePlugIn.mm";
      __int16 v47 = 1024;
      *(_DWORD *)int64_t v48 = 755;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender for device id", v46, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = 1768911973;
  uint64_t v11 = v9[3];
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(v11 + 65));
  if ((v12 & 1) == 0)
  {
    *(_DWORD *)&v46[8] = 0;
    *(void *)&v48[2] = 0;
    int v49 = 0;
    long long v50 = 0u;
    long long v51 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    *(void *)Dl_info v46 = 3;
    *(void *)((char *)&v63 + 4) = *(void *)(v11 + 48);
    LODWORD(v33) = 0;
    uint64_t v37 = 0;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    *((void *)&v33 + 1) = 0;
    __int16 v36 = 0;
    int v13 = (AMCP::Log::Scope_Registry *)AMCP::Portal::IPC::IO_Sender::send_and_receive_io_message(v11, v46, &v33, &AMCP::Portal::IPC::k_default_timeout);
    if (v13 == 1768911973)
    {
      AMCP::Log::Scope_Registry::get(v13);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v16 = **(NSObject ***)buf;
      if (*(void *)v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)__int16 v39 = 2080;
        *(void *)&v39[2] = "IO_Sender.cpp";
        __int16 v40 = 1024;
        int v41 = 335;
        __int16 v42 = 2080;
        *(void *)char v43 = "status == k_io_message_terminate_error";
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO Sender timed out sending message", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v25, "IO Sender timed out sending message");
      std::runtime_error::runtime_error(&v26, &v25);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      int v31 = -1;
      v26.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      int v27 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
      *(void *)&v43[6] = "OSStatus AMCP::Portal::IPC::IO_Sender::get_zero_time_stamp(Float64 &, UInt64 &, UInt64 &)";
      int64_t v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      int v45 = 335;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
      int v22 = &unk_1F148AA90;
      long long v23 = v20;
      uint64_t v24 = v21;
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    *a4 = *((double *)&v33 + 1);
    unint64_t v14 = v35;
    *a5 = v34;
    *a6 = v14;
    return v13;
  }
  return (AMCP::Log::Scope_Registry *)v10;
}

void sub_1BAA92068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint8_t buf,int a44,int a45,__int16 a46,__int16 a47,__int16 a48,__int16 a49,int a50)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    void *v52 = 0;
    void *v51 = 0;
    *long long v50 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAA91DACLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Stop(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(*((id *)this + 89), "stop_io:client_info:", a2, a3);
}

void sub_1BAA92238(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 742;
      a11 = 1024;
      a12 = v12;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to stop IO sender for device id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA9220CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::Start(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (objc_msgSend(*((id *)this + 89), "start_io:client_info:", a2, a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      unint64_t v7 = "HALS_UCRemotePlugIn.mm";
      __int16 v8 = 1024;
      int v9 = 719;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed calling start_io on remote driver", (uint8_t *)&v6, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed calling start_io on remote driver");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  objc_msgSend(*((id *)this + 89), "retain_reply_for_process_boost");
  return 0;
}

void sub_1BAA923D0(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAA92304);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_UCRemotePlugIn::Unregister_IOThread(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v6 = (os_unfair_lock_s *)((char *)this + 752);
  os_unfair_lock_lock((os_unfair_lock_t)this + 188);
  unint64_t v7 = (void *)((char *)this + 800);
  __int16 v8 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      __int16 v36 = "HALS_UCRemotePlugIn.mm";
      __int16 v37 = 1024;
      int v38 = 698;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Could not find io sender for device id", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "could not find io sender");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v10 = v8;
  uint64_t v11 = v8[3];
  unsigned __int8 v12 = atomic_load((unsigned __int8 *)(v11 + 65));
  if ((v12 & 1) == 0)
  {
    if (AMCP::Feature_Flags::access_event_link_oop_io(0, v9)) {
      caulk::ipc::synchronous_messenger::eventlink_sender::stop(*(caulk::ipc::synchronous_messenger::eventlink_sender **)(v11 + 8), 5.0);
    }
    else {
      caulk::ipc::synchronous_messenger::semaphore_sender::stop(*(caulk::ipc::synchronous_messenger::semaphore_sender **)(v11 + 24), 5.0);
    }
    if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v13))
    {
      unint64_t v34 = v6;
      uint64_t v14 = *(void *)(v11 + 40);
      if (*(void *)v14)
      {
        unsigned __int8 v15 = atomic_load((unsigned __int8 *)(v14 + 8));
        if ((v15 & 1) == 0)
        {
          unint64_t v16 = atomic_load((unint64_t *)(v14 + 16));
          if (v16 <= 0x1000 && MEMORY[0x1E4FB8998] && MEMORY[0x1E4FB8988] != 0)
          {
            if (atomic_load((unint64_t *)(v14 + 16)))
            {
              for (unint64_t i = 0; i < v20; ++i)
              {
                pdwriter_new_value();
                pdwriter_record_variable_dbl();
                unint64_t v20 = atomic_load((unint64_t *)(v14 + 16));
                if (i > 0xFFE) {
                  break;
                }
              }
            }
          }
        }
      }
      uint64_t v21 = *(void *)(v11 + 40);
      if (*(void *)v21)
      {
        if (MEMORY[0x1E4FB8978]) {
          pdwriter_close();
        }
        *(void *)uint64_t v21 = 0;
      }
      atomic_store(1u, (unsigned __int8 *)(v21 + 8));
      int v6 = v34;
    }
  }
  uint64_t v22 = objc_msgSend(*((id *)this + 89), "stop_synchronous_messenger:client_id:", a2, a3);
  int8x8_t v23 = *(int8x8_t *)((char *)this + 808);
  unint64_t v24 = v10[1];
  uint8x8_t v25 = (uint8x8_t)vcnt_s8(v23);
  v25.i16[0] = vaddlv_u8(v25);
  if (v25.u32[0] > 1uLL)
  {
    if (v24 >= *(void *)&v23) {
      v24 %= *(void *)&v23;
    }
  }
  else
  {
    v24 &= *(void *)&v23 - 1;
  }
  std::runtime_error v26 = *(uint64_t **)(*v7 + 8 * v24);
  do
  {
    int v27 = v26;
    std::runtime_error v26 = (uint64_t *)*v26;
  }
  while (v26 != v10);
  if (v27 == (uint64_t *)((char *)this + 816)) {
    goto LABEL_40;
  }
  unint64_t v28 = v27[1];
  if (v25.u32[0] > 1uLL)
  {
    if (v28 >= *(void *)&v23) {
      v28 %= *(void *)&v23;
    }
  }
  else
  {
    v28 &= *(void *)&v23 - 1;
  }
  if (v28 != v24)
  {
LABEL_40:
    if (!*v10) {
      goto LABEL_41;
    }
    unint64_t v29 = *(void *)(*v10 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v29 >= *(void *)&v23) {
        v29 %= *(void *)&v23;
      }
    }
    else
    {
      v29 &= *(void *)&v23 - 1;
    }
    if (v29 != v24) {
LABEL_41:
    }
      *(void *)(*v7 + 8 * v24) = 0;
  }
  uint64_t v30 = *v10;
  if (*v10)
  {
    unint64_t v31 = *(void *)(v30 + 8);
    if (v25.u32[0] > 1uLL)
    {
      if (v31 >= *(void *)&v23) {
        v31 %= *(void *)&v23;
      }
    }
    else
    {
      v31 &= *(void *)&v23 - 1;
    }
    if (v31 != v24)
    {
      *(void *)(*v7 + 8 * v31) = v27;
      uint64_t v30 = *v10;
    }
  }
  *int v27 = v30;
  uint64_t *v10 = 0;
  --*((void *)this + 103);
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v10);
  os_unfair_lock_unlock(v6);
  return v22;
}

void sub_1BAA927DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA925B0);
  }
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    int8x8_t v3 = (std::__shared_weak_count *)__p[4];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t HALS_UCRemotePlugIn::Register_IOThread(HALS_UCRemotePlugIn *this, unint64_t a2, unsigned int a3, double a4, unsigned int a5, unsigned int a6)
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v12 = (os_unfair_lock_s *)((char *)this + 752);
  os_unfair_lock_lock((os_unfair_lock_t)this + 188);
  int v13 = (void **)((char *)this + 800);
  unsigned int v108 = a3;
  unint64_t v107 = a2;
  if (std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::find<AMCP::Portal::IPC::io_messenger_id_t>((void *)this + 100, a2, a3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)out = 136315394;
      *(void *)&out[4] = "HALS_UCRemotePlugIn.mm";
      *(_WORD *)&out[12] = 1024;
      *(_DWORD *)&out[14] = 668;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  io sender already exists", out, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "io sender already exists");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v14 = (char *)operator new(0x60uLL);
  *((void *)v14 + 1) = 0;
  *((void *)v14 + 2) = 0;
  *(void *)uint64_t v14 = &unk_1F145C348;
  unsigned __int8 v15 = *((unsigned char *)this + 696);
  *((void *)v14 + 3) = &unk_1F1464640;
  *((_OWORD *)v14 + 2) = 0u;
  unint64_t v16 = (caulk::ipc::synchronous_messenger::eventlink_sender **)(v14 + 32);
  *((_OWORD *)v14 + 3) = 0u;
  *((void *)v14 + 8) = 0;
  *((_DWORD *)v14 + 18) = a2;
  *((_DWORD *)v14 + 19) = a3;
  *((void *)v14 + 10) = 0x40E5888000000000;
  *((_WORD *)v14 + 44) = v15;
  unsigned int v105 = a5;
  unsigned int v106 = a6;
  if (AMCP::Feature_Flags::access_event_link_oop_io(0, v17))
  {
    caulk::make_string((caulk *)"IO Sender: %u", (uint64_t)__p, a2);
    mach_port_t v18 = operator new(0x58uLL);
    v18[1] = 0;
    v18[2] = 0;
    void *v18 = &unk_1F1464670;
    int v19 = (caulk::ipc::synchronous_messenger::eventlink_sender *)(v18 + 3);
    MEMORY[0x1C1858C30](v18 + 3, 320, 0);
    MEMORY[0x1C1858C30](v18 + 6, 4, 0);
    caulk::mach::os_eventlink::make();
    *((unsigned char *)v18 + 80) = 0;
    *(void *)&long long v21 = v18 + 3;
    *((void *)&v21 + 1) = v18;
    uint64_t v22 = (std::__shared_weak_count *)*((void *)v14 + 5);
    *((_OWORD *)v14 + 2) = v21;
    if (v22)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      int v19 = *v16;
    }
    if (!*(void *)v19
      || !*((void *)v19 + 1)
      || !*((void *)v19 + 3)
      || !*((void *)v19 + 4)
      || !*((void *)v19 + 6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)out, "com.apple.coreaudio", "AMCP");
      v91 = **(NSObject ***)out;
      if (*(void *)&out[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&out[8]);
      }
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        v92 = pthread_self();
        mach_port_t v93 = pthread_mach_thread_np(v92);
        *(_DWORD *)out = 67109890;
        *(_DWORD *)&out[4] = v93;
        *(_WORD *)&out[8] = 2080;
        *(void *)&out[10] = "IO_Sender.cpp";
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = 99;
        *(_WORD *)&out[24] = 2080;
        *(void *)&out[26] = "!m_event_link_sender->is_valid()";
        _os_log_error_impl(&dword_1BAA78000, v91, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to create io sender", out, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v112);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v111, "Failed to create io sender");
      std::runtime_error::runtime_error((std::runtime_error *)&v117, &v111);
      long long v119 = 0uLL;
      uint64_t v120 = 0;
      int v121 = -1;
      v117 = (std::string::value_type *)&unk_1F148A9A8;
      v118.__imp_.__imp_ = (const char *)&unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)out, (uint64_t)&v117);
      *(void *)&out[32] = "AMCP::Portal::IPC::IO_Sender::IO_Sender(AudioObjectID, AudioObjectID, Emulated_Driver_Translation, double)";
      v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      int v124 = 99;
      std::vector<void *>::vector(&v109);
      int v94 = backtrace((void **)&v109.~runtime_error, (unint64_t)(v109.__imp_.__imp_ - (const char *)v109.__vftable) >> 3);
      std::vector<void *>::resize((char **)&v109, v94);
      v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(std::runtime_error *)&v113.__r_.__value_.__r.__words[1] = v109;
      uint64_t v114 = v110;
      v109.__vftable = 0;
      v109.__imp_.__imp_ = 0;
      uint64_t v110 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    if (SHIBYTE(v116) < 0) {
      operator delete(__p[0]);
    }
    unint64_t v23 = a2;
  }
  else
  {
    unint64_t v24 = operator new(0x60uLL);
    v24[1] = 0;
    _DWORD v24[2] = 0;
    void *v24 = &unk_1F14646C0;
    uint8x8_t v25 = (caulk::ipc::synchronous_messenger::semaphore_sender *)(v24 + 3);
    MEMORY[0x1C1858C30](v24 + 3, 320, 0);
    MEMORY[0x1C1858C30](v24 + 6, 4, 0);
    MEMORY[0x1C1858E40](v24 + 9);
    MEMORY[0x1C1858E40](v24 + 10);
    *((unsigned char *)v24 + 88) = 0;
    *(void *)&long long v26 = v24 + 3;
    *((void *)&v26 + 1) = v24;
    int v27 = (std::__shared_weak_count *)*((void *)v14 + 7);
    *((_OWORD *)v14 + 3) = v26;
    if (v27)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      uint8x8_t v25 = (caulk::ipc::synchronous_messenger::semaphore_sender *)*((void *)v14 + 6);
    }
    BOOL is_valid = caulk::ipc::synchronous_messenger::semaphore_sender::is_valid(v25);
    unint64_t v23 = a2;
    if (!is_valid)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)out, "com.apple.coreaudio", "AMCP");
      v98 = **(NSObject ***)out;
      if (*(void *)&out[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&out[8]);
      }
      if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR))
      {
        v99 = pthread_self();
        mach_port_t v100 = pthread_mach_thread_np(v99);
        *(_DWORD *)out = 67109890;
        *(_DWORD *)&out[4] = v100;
        *(_WORD *)&out[8] = 2080;
        *(void *)&out[10] = "IO_Sender.cpp";
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = 104;
        *(_WORD *)&out[24] = 2080;
        *(void *)&out[26] = "!m_semaphore_sender->is_valid()";
        _os_log_error_impl(&dword_1BAA78000, v98, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to create io sender", out, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v109, "Failed to create io sender");
      std::runtime_error::runtime_error((std::runtime_error *)&v117, &v109);
      long long v119 = 0uLL;
      uint64_t v120 = 0;
      int v121 = -1;
      v117 = (std::string::value_type *)&unk_1F148A9A8;
      v118.__imp_.__imp_ = (const char *)&unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)out, (uint64_t)&v117);
      *(void *)&out[32] = "AMCP::Portal::IPC::IO_Sender::IO_Sender(AudioObjectID, AudioObjectID, Emulated_Driver_Translation, double)";
      v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
      int v124 = 104;
      std::vector<void *>::vector(__p);
      int v101 = backtrace((void **)__p[0], (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3);
      std::vector<void *>::resize((char **)__p, v101);
      v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
      *(_OWORD *)&v113.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
      uint64_t v114 = v116;
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v116 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
  }
  if (AMCP::Feature_Flags::access_collect_io_perfdata(0, v20)) {
    operator new();
  }
  v104 = v12;
  uint64_t v30 = v23;
  *(void *)&long long v31 = v14 + 24;
  *((void *)&v31 + 1) = v14;
  long long v103 = v31;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v14 + 1, 1uLL, memory_order_relaxed);
  unint64_t v32 = (0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a3) ^ ((0xC6A4A7935BD1E995 * a3) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v23) ^ ((0xC6A4A7935BD1E995 * v23) >> 47)) + 3864292196u);
  unint64_t v33 = 0xC6A4A7935BD1E995 * v32 + 3864292196u;
  unint64_t v34 = *((void *)this + 101);
  if (v34)
  {
    uint8x8_t v35 = (uint8x8_t)vcnt_s8((int8x8_t)v34);
    v35.i16[0] = vaddlv_u8(v35);
    if (v35.u32[0] > 1uLL)
    {
      unint64_t v23 = 0xC6A4A7935BD1E995 * v32 + 3864292196u;
      if (v33 >= v34) {
        unint64_t v23 = v33 % v34;
      }
    }
    else
    {
      unint64_t v23 = v33 & (v34 - 1);
    }
    __int16 v36 = (uint64_t **)*((void *)*v13 + v23);
    if (v36)
    {
      for (unint64_t i = *v36; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v38 = i[1];
        if (v38 == v33)
        {
          if (*((_DWORD *)i + 4) == a2 && *((_DWORD *)i + 5) == v108)
          {
            int v78 = v104;
            uint64_t v79 = v106;
            uint64_t v80 = (std::__shared_weak_count *)*((void *)&v103 + 1);
            goto LABEL_96;
          }
        }
        else
        {
          if (v35.u32[0] > 1uLL)
          {
            if (v38 >= v34) {
              v38 %= v34;
            }
          }
          else
          {
            v38 &= v34 - 1;
          }
          if (v38 != v23) {
            break;
          }
        }
      }
    }
  }
  __int16 v40 = (char *)operator new(0x28uLL);
  int v41 = (void *)((char *)this + 816);
  *(void *)__int16 v40 = 0;
  *((void *)v40 + 1) = v33;
  *((void *)v40 + 2) = v30 | ((unint64_t)v108 << 32);
  *(_OWORD *)(v40 + 24) = v103;
  float v42 = (float)(unint64_t)(*((void *)this + 103) + 1);
  float v43 = *((float *)this + 208);
  if (v34 && (float)(v43 * (float)v34) >= v42)
  {
    int v78 = v104;
    goto LABEL_86;
  }
  BOOL v44 = 1;
  if (v34 >= 3) {
    BOOL v44 = (v34 & (v34 - 1)) != 0;
  }
  unint64_t v45 = v44 | (2 * v34);
  unint64_t v46 = vcvtps_u32_f32(v42 / v43);
  if (v45 <= v46) {
    int8x8_t prime = (int8x8_t)v46;
  }
  else {
    int8x8_t prime = (int8x8_t)v45;
  }
  int v78 = v104;
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v34 = *((void *)this + 101);
  }
  if (*(void *)&prime <= v34)
  {
    if (*(void *)&prime >= v34) {
      goto LABEL_81;
    }
    unint64_t v54 = vcvtps_u32_f32((float)*((unint64_t *)this + 103) / *((float *)this + 208));
    if (v34 < 3 || (uint8x8_t v55 = (uint8x8_t)vcnt_s8((int8x8_t)v34), v55.i16[0] = vaddlv_u8(v55), v55.u32[0] > 1uLL))
    {
      unint64_t v54 = std::__next_prime(v54);
    }
    else
    {
      uint64_t v56 = 1 << -(char)__clz(v54 - 1);
      if (v54 >= 2) {
        unint64_t v54 = v56;
      }
    }
    if (*(void *)&prime <= v54) {
      int8x8_t prime = (int8x8_t)v54;
    }
    if (*(void *)&prime >= v34)
    {
      unint64_t v34 = *((void *)this + 101);
      goto LABEL_81;
    }
    if (!*(void *)&prime)
    {
      v81 = *v13;
      const BOOL *v13 = 0;
      if (v81) {
        operator delete(v81);
      }
      unint64_t v34 = 0;
      *((void *)this + 101) = 0;
      goto LABEL_81;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  int64_t v48 = operator new(8 * *(void *)&prime);
  int v49 = *v13;
  const BOOL *v13 = v48;
  if (v49) {
    operator delete(v49);
  }
  uint64_t v50 = 0;
  *((int8x8_t *)this + 101) = prime;
  do
    *((void *)*v13 + v50++) = 0;
  while (*(void *)&prime != v50);
  long long v51 = (void *)*v41;
  if (*v41)
  {
    unint64_t v52 = v51[1];
    uint8x8_t v53 = (uint8x8_t)vcnt_s8(prime);
    v53.i16[0] = vaddlv_u8(v53);
    if (v53.u32[0] > 1uLL)
    {
      if (v52 >= *(void *)&prime) {
        v52 %= *(void *)&prime;
      }
    }
    else
    {
      v52 &= *(void *)&prime - 1;
    }
    *((void *)*v13 + v52) = v41;
    long long v57 = (void *)*v51;
    if (*v51)
    {
      do
      {
        unint64_t v58 = v57[1];
        if (v53.u32[0] > 1uLL)
        {
          if (v58 >= *(void *)&prime) {
            v58 %= *(void *)&prime;
          }
        }
        else
        {
          v58 &= *(void *)&prime - 1;
        }
        if (v58 != v52)
        {
          if (!*((void *)*v13 + v58))
          {
            *((void *)*v13 + v58) = v51;
            goto LABEL_77;
          }
          void *v51 = *v57;
          *long long v57 = **((void **)*v13 + v58);
          **((void **)*v13 + v58) = v57;
          long long v57 = v51;
        }
        unint64_t v58 = v52;
LABEL_77:
        long long v51 = v57;
        long long v57 = (void *)*v57;
        unint64_t v52 = v58;
      }
      while (v57);
    }
  }
  unint64_t v34 = (unint64_t)prime;
LABEL_81:
  if ((v34 & (v34 - 1)) != 0)
  {
    if (v33 >= v34) {
      unint64_t v23 = v33 % v34;
    }
    else {
      unint64_t v23 = v33;
    }
  }
  else
  {
    unint64_t v23 = (v34 - 1) & v33;
  }
LABEL_86:
  long long v59 = *v13;
  long long v60 = (void *)*((void *)*v13 + v23);
  if (v60)
  {
    *(void *)__int16 v40 = *v60;
    a2 = v107;
    uint64_t v79 = v106;
LABEL_94:
    *long long v60 = v40;
    goto LABEL_95;
  }
  *(void *)__int16 v40 = *v41;
  *int v41 = v40;
  v59[v23] = v41;
  a2 = v107;
  uint64_t v79 = v106;
  if (*(void *)v40)
  {
    unint64_t v61 = *(void *)(*(void *)v40 + 8);
    if ((v34 & (v34 - 1)) != 0)
    {
      if (v61 >= v34) {
        v61 %= v34;
      }
    }
    else
    {
      v61 &= v34 - 1;
    }
    long long v60 = (char *)*v13 + 8 * v61;
    goto LABEL_94;
  }
LABEL_95:
  ++*((void *)this + 103);
  uint64_t v80 = 0;
LABEL_96:
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  long long v62 = (void *)*((void *)this + 89);
  if (AMCP::Feature_Flags::access_event_link_oop_io(0, v29)) {
    caulk::ipc::synchronous_messenger::eventlink_sender::create_connection_info((uint64_t *)out, *v16);
  }
  else {
    caulk::ipc::synchronous_messenger::semaphore_sender::create_connection_info((uint64_t *)out, *((caulk::ipc::synchronous_messenger::semaphore_sender **)v14 + 6));
  }
  long long v64 = *(caulk::mach::details **)out;
  *(void *)out = 0;
  caulk::mach::details::release_os_object(0, v63);
  uint64_t v65 = objc_msgSend(v62, "start_synchronous_messenger:client_id:nominal_sample_rate:io_buffer_frame_size:work_group_port:io_messenger:", a2, v108, v105, v79, v64, a4);
  caulk::mach::details::release_os_object(v64, v66);
  if (!v65)
  {
    unsigned __int8 v68 = atomic_load((unsigned __int8 *)v14 + 89);
    if ((v68 & 1) == 0)
    {
      if (AMCP::Feature_Flags::access_event_link_oop_io(0, v67)) {
        uint64_t v69 = caulk::ipc::synchronous_messenger::eventlink_sender::start(*v16, 5.0);
      }
      else {
        uint64_t v69 = caulk::ipc::synchronous_messenger::semaphore_sender::start(*((caulk::ipc::synchronous_messenger::semaphore_sender **)v14 + 6), 5.0);
      }
      if ((v69 & 0xFF00000000) == 0 || !(_BYTE)v69)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v69);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)out, "com.apple.coreaudio", "AMCP");
        v87 = **(NSObject ***)out;
        if (*(void *)&out[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&out[8]);
        }
        if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
        {
          v88 = pthread_self();
          mach_port_t v89 = pthread_mach_thread_np(v88);
          *(_DWORD *)out = 67109890;
          *(_DWORD *)&out[4] = v89;
          *(_WORD *)&out[8] = 2080;
          *(void *)&out[10] = "IO_Sender.cpp";
          *(_WORD *)&out[18] = 1024;
          *(_DWORD *)&out[20] = 267;
          *(_WORD *)&out[24] = 2080;
          *(void *)&out[26] = "result.value_or(false) != true";
          _os_log_error_impl(&dword_1BAA78000, v87, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to start io sender", out, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v111);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v109, "Failed to start io sender");
        std::runtime_error::runtime_error((std::runtime_error *)&v117, &v109);
        long long v119 = 0uLL;
        uint64_t v120 = 0;
        int v121 = -1;
        v117 = (std::string::value_type *)&unk_1F148A9A8;
        v118.__imp_.__imp_ = (const char *)&unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)out, (uint64_t)&v117);
        *(void *)&out[32] = "OSStatus AMCP::Portal::IPC::IO_Sender::start()";
        v123 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Server/IO_Sender.cpp";
        int v124 = 267;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)__p);
        v113.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        *(_OWORD *)&v113.__r_.__value_.__r.__words[1] = *(_OWORD *)__p;
        uint64_t v114 = v116;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v116 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      if (!AMCP::Feature_Flags::access_collect_io_perfdata(0, v70)) {
        goto LABEL_159;
      }
      uint64_t v71 = *((void *)v14 + 8);
      unsigned __int8 v72 = atomic_load((unsigned __int8 *)(v71 + 8));
      if ((v72 & 1) != 0 || *(void *)v71) {
        goto LABEL_159;
      }
      memset(&v113, 0, sizeof(v113));
      get_temporary_folder((std::string *)out);
      if (out[23] >= 0) {
        double v73 = out;
      }
      else {
        double v73 = *(const std::string::value_type **)out;
      }
      if (out[23] >= 0) {
        std::string::size_type v74 = out[23];
      }
      else {
        std::string::size_type v74 = *(void *)&out[8];
      }
      std::string::append(&v113, v73, v74);
      if ((out[23] & 0x80000000) != 0) {
        operator delete(*(void **)out);
      }
      std::string::append(&v113, "HAL_IO_perfdata_", 0x10uLL);
      __p[0] = 0;
      __p[1] = 0;
      MEMORY[0x1C185A9D0](__p);
      memset(out, 0, 37);
      uuid_unparse((const unsigned __int8 *)__p, out);
      std::string::basic_string[abi:ne180100]<0>(&v117, out);
      if (SHIBYTE(v118.__imp_.__imp_) >= 0) {
        unint64_t v75 = (const std::string::value_type *)&v117;
      }
      else {
        unint64_t v75 = v117;
      }
      if (SHIBYTE(v118.__imp_.__imp_) >= 0) {
        std::string::size_type imp_high = HIBYTE(v118.__imp_.__imp_);
      }
      else {
        std::string::size_type imp_high = (std::string::size_type)v118.__vftable;
      }
      std::string::append(&v113, v75, imp_high);
      if (SHIBYTE(v118.__imp_.__imp_) < 0) {
        operator delete(v117);
      }
      std::string::append(&v113, ".pdj", 4uLL);
      if (MEMORY[0x1E4FB8980] && (int)pdwriter_name() >= 1 && MEMORY[0x1E4FB8990])
      {
        v77 = (AMCP::Log::Scope_Registry *)pdwriter_open();
        *(void *)uint64_t v71 = v77;
      }
      else
      {
        v77 = *(AMCP::Log::Scope_Registry **)v71;
      }
      if (v77)
      {
        AMCP::Log::Scope_Registry::get(v77);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v117, "com.apple.coreaudio", "AMCP");
        double v82 = *(NSObject **)v117;
        if (v118.__vftable) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v118.__vftable);
        }
        if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_157;
        }
        double v83 = pthread_self();
        mach_port_t v84 = pthread_mach_thread_np(v83);
        double v85 = &v113;
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          double v85 = (std::string *)v113.__r_.__value_.__r.__words[0];
        }
        LODWORD(v117) = 67109890;
        HIDWORD(v117) = v84;
        LOWORD(v118.__vftable) = 2080;
        *(std::runtime_error_vtbl **)((char *)&v118.__vftable + 2) = (std::runtime_error_vtbl *)"Performance_Data_Writer.cpp";
        WORD1(v118.__imp_.__imp_) = 1024;
        HIDWORD(v118.__imp_.__imp_) = 53;
        LOWORD(v119) = 2080;
        *(void *)((char *)&v119 + 2) = v85;
        uint64_t v86 = "%6u %32s:%-5d Performance_Data_Writer: SUCCESS: Created file %s";
      }
      else
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v117, "com.apple.coreaudio", "AMCP");
        double v82 = *(NSObject **)v117;
        if (v118.__vftable) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v118.__vftable);
        }
        if (!os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_157;
        }
        v95 = pthread_self();
        mach_port_t v96 = pthread_mach_thread_np(v95);
        v97 = &v113;
        if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v97 = (std::string *)v113.__r_.__value_.__r.__words[0];
        }
        LODWORD(v117) = 67109890;
        HIDWORD(v117) = v96;
        LOWORD(v118.__vftable) = 2080;
        *(std::runtime_error_vtbl **)((char *)&v118.__vftable + 2) = (std::runtime_error_vtbl *)"Performance_Data_Writer.cpp";
        WORD1(v118.__imp_.__imp_) = 1024;
        HIDWORD(v118.__imp_.__imp_) = 49;
        LOWORD(v119) = 2080;
        *(void *)((char *)&v119 + 2) = v97;
        uint64_t v86 = "%6u %32s:%-5d Performance_Data_Writer: FAILURE: Could not create file %s";
      }
      _os_log_debug_impl(&dword_1BAA78000, v82, OS_LOG_TYPE_DEBUG, v86, (uint8_t *)&v117, 0x22u);
LABEL_157:
      if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v113.__r_.__value_.__l.__data_);
      }
LABEL_159:
      uint64_t v65 = 0;
      goto LABEL_160;
    }
    uint64_t v65 = 1768911973;
  }
LABEL_160:
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
  os_unfair_lock_unlock(v78);
  return v65;
}

void sub_1BAA93C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, std::runtime_error a17, uint64_t a18, std::runtime_error a19, int a20,__int16 a21,char a22,char a23,void *__p,void *a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,id *buf,long long a39,uint64_t a40,int a41,int a42)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  uint64_t shared_weak_owners = v43[2].__shared_weak_owners_;
  v43[2].__shared_weak_owners_ = 0;
  if (shared_weak_owners) {
    MEMORY[0x1C1859840](shared_weak_owners, 0x1020C401EC519C5);
  }
  shared_owners = (std::__shared_weak_count *)v43[2].__shared_owners_;
  if (shared_owners) {
    std::__shared_weak_count::__release_shared[abi:ne180100](shared_owners);
  }
  __int16 v47 = (std::__shared_weak_count *)v43[1].__shared_weak_owners_;
  if (v47) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v47);
  }
  std::__shared_weak_count::~__shared_weak_count(v43);
  operator delete(v48);
  os_unfair_lock_unlock(v42);
  int v49 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
  AMCP::Log::Scope_Registry::get(v49);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
  uint64_t v50 = *buf;
  AMCP::Log::Scope::get_os_log_t(*buf);
  objc_claimAutoreleasedReturnValue();
  if ((void)a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a39);
  }
  if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
  {
    long long v51 = pthread_self();
    mach_port_t v52 = pthread_mach_thread_np(v51);
    LODWORD(buf) = 67110146;
    HIDWORD(buf) = v52;
    LOWORD(a39) = 2080;
    *(void *)((char *)&a39 + 2) = "HALS_UCRemotePlugIn.mm";
    WORD5(a39) = 1024;
    HIDWORD(a39) = 683;
    LOWORD(a40) = 1024;
    *(_DWORD *)((char *)&a40 + 2) = a14;
    HIWORD(a40) = 1024;
    a41 = a16;
    _os_log_error_impl(&dword_1BAA78000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception while registering IO Thread, deviceID %u, clientID %u", (uint8_t *)&buf, 0x24u);
  }

  __cxa_end_catch();
  JUMPOUT(0x1BAA93540);
}

void sub_1BAA94168()
{
  __cxa_end_catch();
  JUMPOUT(0x1BAA93F88);
}

void sub_1BAA9417C()
{
}

void sub_1BAA94184(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::runtime_error a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
  {
    if (__p)
    {
      a24 = (uint64_t)__p;
      operator delete(__p);
    }
    if (a26)
    {
      a27 = (uint64_t)a26;
      operator delete(a26);
    }
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v32 - 192);
    boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a30);
    std::runtime_error::~runtime_error(&a17);
    if (v30) {
      __cxa_free_exception(v31);
    }
    AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a19);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA93530);
  }
  JUMPOUT(0x1BAA93F88);
}

void sub_1BAA941FC(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAA94204);
  }
  JUMPOUT(0x1BAA93F88);
}

void sub_1BAA9421C(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAA93F88);
  }
  JUMPOUT(0x1BAA93E08);
}

uint64_t std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Sender>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Sender>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C348;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Portal::IPC::IO_Sender>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_UCRemotePlugIn::UnregisterIOBuffer(HALS_UCRemotePlugIn *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, void *a7)
{
}

void sub_1BAA94348(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13, int a14, int a15, __int16 a16, __int16 a17)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136316674;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 579;
      a11 = 1024;
      a12 = v20;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v19;
      HIWORD(a13) = 1024;
      a14 = v18;
      LOWORD(a15) = 1024;
      *(int *)((char *)&a15 + 2) = v17;
      a17 = 2048;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to unregister IO buffer, device ID:%u, stream ID:%u, client ID %u, is input:%d, ioBuffer %p", (uint8_t *)&a9, 0x34u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA94314);
  }
  _Unwind_Resume(a1);
}

void HALS_UCRemotePlugIn::unregister_shared_buffer(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v20 = __PAIR64__(a3, a2);
  unint64_t v21 = __PAIR64__(a5, a4);
  int v6 = (os_unfair_lock_s *)(a1 + 752);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 752));
  unint64_t v7 = (void *)(a1 + 840);
  __int16 v8 = std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::find<AMCP::Portal::IPC::shared_buffer_info_t>((void *)(a1 + 840), (unsigned int *)&v20);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_UCRemotePlugIn.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 558;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Invalid shared buffer", buf, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid shared buffer");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v9 = v8;
  objc_msgSend(*(id *)(a1 + 712), "unregister_buffer:", v8[4], v20, v21);
  int8x8_t v10 = *(int8x8_t *)(a1 + 848);
  unint64_t v11 = v9[1];
  uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    if (v11 >= *(void *)&v10) {
      v11 %= *(void *)&v10;
    }
  }
  else
  {
    v11 &= *(void *)&v10 - 1;
  }
  int v13 = *(uint64_t **)(*v7 + 8 * v11);
  do
  {
    uint64_t v14 = v13;
    int v13 = (uint64_t *)*v13;
  }
  while (v13 != v9);
  if (v14 == (uint64_t *)(a1 + 856)) {
    goto LABEL_19;
  }
  unint64_t v15 = v14[1];
  if (v12.u32[0] > 1uLL)
  {
    if (v15 >= *(void *)&v10) {
      v15 %= *(void *)&v10;
    }
  }
  else
  {
    v15 &= *(void *)&v10 - 1;
  }
  if (v15 != v11)
  {
LABEL_19:
    if (!*v9) {
      goto LABEL_20;
    }
    unint64_t v16 = *(void *)(*v9 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v16 >= *(void *)&v10) {
        v16 %= *(void *)&v10;
      }
    }
    else
    {
      v16 &= *(void *)&v10 - 1;
    }
    if (v16 != v11) {
LABEL_20:
    }
      *(void *)(*v7 + 8 * v11) = 0;
  }
  uint64_t v17 = *v9;
  if (*v9)
  {
    unint64_t v18 = *(void *)(v17 + 8);
    if (v12.u32[0] > 1uLL)
    {
      if (v18 >= *(void *)&v10) {
        v18 %= *(void *)&v10;
      }
    }
    else
    {
      v18 &= *(void *)&v10 - 1;
    }
    if (v18 != v11)
    {
      *(void *)(*v7 + 8 * v18) = v14;
      uint64_t v17 = *v9;
    }
  }
  *uint64_t v14 = v17;
  uint64_t *v9 = 0;
  --*(void *)(a1 + 864);
  *(void *)buf = v9;
  *(void *)&uint8_t buf[8] = a1 + 856;
  buf[16] = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);

  os_unfair_lock_unlock(v6);
}

void sub_1BAA9466C(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Portal::IPC::shared_buffer_info_t const,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::Portal::IPC::shared_buffer_info_t const,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  int8x8_t v3 = *(void **)(a1 + 16);
}

AMCP::Log::Scope_Registry *HALS_UCRemotePlugIn::RegisterIOBuffer(HALS_UCRemotePlugIn *this, int64_t a2, int64_t a3, unsigned int a4, BOOL a5, size_t length, void *region)
{
  return HALS_UCRemotePlugIn::register_shared_buffer((uint64_t)this, a2, a4, a3, 1u, region, length);
}

AMCP::Log::Scope_Registry *HALS_UCRemotePlugIn::register_shared_buffer(uint64_t a1, int64_t a2, unsigned int a3, int64_t a4, unsigned int a5, void *region, size_t length)
{
  unsigned int value = a3;
  uint64_t v63 = *MEMORY[0x1E4F143B8];
  xpc_object_t v12 = xpc_shmem_create(region, length);
  caulk::mach::details::release_os_object(0, v13);
  xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v15 = v14;
  if (!v14) {
    xpc_object_t v15 = xpc_null_create();
  }

  unint64_t v16 = v15;
  uint64_t v17 = v16;
  unint64_t v45 = v16;
  if (!v16 || MEMORY[0x1C185AAD0](v16) != MEMORY[0x1E4F14590])
  {
    unint64_t v45 = (applesauce::xpc::object *)xpc_null_create();
  }
  applesauce::xpc::object::object((applesauce::xpc::object *)&v60, a2);
  *(void *)buf = &v45;
  *(void *)&uint8_t buf[8] = "buffer device id";
  applesauce::xpc::dict::object_proxy::operator=(&value_4, (uint64_t)buf, &v60);
  unint64_t v18 = (void *)value_4;
  *(void *)&long long value_4 = 0;

  id v19 = v60;
  id v60 = 0;

  applesauce::xpc::object::object((applesauce::xpc::object *)&v58, value);
  *(void *)buf = &v45;
  *(void *)&uint8_t buf[8] = "buffer client id";
  applesauce::xpc::dict::object_proxy::operator=(&v59, (uint64_t)buf, &v58);
  unint64_t v20 = v59;
  long long v59 = 0;

  id v21 = v58;
  id v58 = 0;

  applesauce::xpc::object::object((applesauce::xpc::object *)&v56, a4);
  *(void *)buf = &v45;
  *(void *)&uint8_t buf[8] = "buffer stream id";
  applesauce::xpc::dict::object_proxy::operator=(&v57, (uint64_t)buf, &v56);
  uint64_t v22 = v57;
  long long v57 = 0;

  id v23 = v56;
  id v56 = 0;

  xpc_object_t v24 = xpc_int64_create(a5);
  id v54 = v24;
  if (!v24) {
    id v54 = xpc_null_create();
  }

  *(void *)buf = &v45;
  *(void *)&uint8_t buf[8] = "buffer type";
  applesauce::xpc::dict::object_proxy::operator=(&v55, (uint64_t)buf, &v54);
  uint8x8_t v25 = v55;
  uint8x8_t v55 = 0;

  id v26 = v54;
  id v54 = 0;

  id v27 = v12;
  id v52 = v27;
  if (!v27) {
    id v52 = xpc_null_create();
  }

  *(void *)buf = &v45;
  *(void *)&uint8_t buf[8] = "buffer shared memory";
  applesauce::xpc::dict::object_proxy::operator=(&v53, (uint64_t)buf, &v52);

  applesauce::xpc::object::object((applesauce::xpc::object *)&v49, v45);
  uint64_t v50 = (caulk::mach::details *)caulk::mach::details::retain_os_object((caulk::mach::details *)v27, v28);
  *(void *)&long long v51 = __PAIR64__(value, a2);
  *((void *)&v51 + 1) = __PAIR64__(a5, a4);
  unint64_t v29 = v45;
  unint64_t v45 = 0;

  caulk::mach::details::release_os_object((caulk::mach::details *)v27, v30);
  long long v31 = (os_unfair_lock_s *)(a1 + 752);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 752));
  id v32 = v49;
  std::allocate_shared[abi:ne180100]<caulk::ipc::mapped_memory,std::allocator<caulk::ipc::mapped_memory>,caulk::mach::xpc_object const&,void>((uint64_t *)&value_4, (uint64_t)&v50);
  uint64_t v33 = a1 + 840;
  *(_OWORD *)buf = v51;
  *(_OWORD *)long long v62 = value_4;
  uint64_t v47 = 0;
  int64_t v48 = region;
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  *(void *)&buf[16] = v32;
  *(void *)&v62[16] = region;
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::__emplace_unique_key_args<AMCP::Portal::IPC::shared_buffer_info_t,std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>(a1 + 840, (unsigned int *)buf, (long long *)buf);
  if (*(void *)&v62[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v62[8]);
  }

  unint64_t v34 = (AMCP::Log::Scope_Registry *)objc_msgSend(*(id *)(a1 + 712), "register_buffer:", v49);
  uint8x8_t v35 = v34;
  if (v34)
  {
    AMCP::Log::Scope_Registry::get(v34);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v36 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      int v41 = pthread_self();
      mach_port_t v42 = pthread_mach_thread_np(v41);
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v42;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_UCRemotePlugIn.mm";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 547;
      *(_WORD *)long long v62 = 1024;
      *(_DWORD *)&v62[2] = a2;
      *(_WORD *)&v62[6] = 1024;
      *(_DWORD *)&v62[8] = a4;
      *(_WORD *)&v62[12] = 1024;
      *(_DWORD *)&v62[14] = value;
      *(_WORD *)&v62[18] = 2048;
      *(void *)&v62[20] = region;
      _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failed to register IO buffer, device ID:%u, stream ID:%u, client ID %u, ioBuffer %p", buf, 0x34u);
    }
  }
  else
  {
    id v37 = v49;
    std::allocate_shared[abi:ne180100]<caulk::ipc::mapped_memory,std::allocator<caulk::ipc::mapped_memory>,caulk::mach::xpc_object const&,void>((uint64_t *)&value_4, (uint64_t)&v50);
    *(_OWORD *)buf = v51;
    *(_OWORD *)long long v62 = value_4;
    uint64_t v47 = 0;
    int64_t v48 = region;
    unint64_t v45 = 0;
    uint64_t v46 = 0;
    *(void *)&buf[16] = v37;
    *(void *)&v62[16] = region;
    std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::__emplace_unique_key_args<AMCP::Portal::IPC::shared_buffer_info_t,std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>(v33, (unsigned int *)buf, (long long *)buf);
    if (*(void *)&v62[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v62[8]);
    }
  }
  os_unfair_lock_unlock(v31);
  caulk::mach::details::release_os_object(v50, v38);
  id v39 = v49;
  id v49 = 0;

  return v35;
}

void sub_1BAA94C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>::~pair(v7 - 160);
  std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>::~tuple((uint64_t)va);
  os_unfair_lock_unlock(v6);
  std::tuple<applesauce::xpc::dict,caulk::mach::xpc_object,AMCP::Portal::IPC::shared_buffer_info_t>::~tuple((uint64_t)va1, v9);
  _Unwind_Resume(a1);
}

applesauce::xpc::object *applesauce::xpc::object::object(applesauce::xpc::object *this, int64_t value)
{
  xpc_object_t v3 = xpc_int64_create(value);
  *(void *)this = v3;
  if (!v3)
  {
    xpc_object_t v4 = xpc_null_create();
    int8x8_t v5 = *(void **)this;
    *(void *)this = v4;
  }
  return this;
}

void applesauce::xpc::dict::object_proxy::operator=(void *a1, uint64_t a2, id *a3)
{
  int v6 = **(void ***)a2;
  AMCP::Log::Scope::get_os_log_t(v6);
  objc_claimAutoreleasedReturnValue();
  uint64_t v7 = *(const char **)(a2 + 8);
  id v8 = *a3;
  xpc_dictionary_set_value(v6, v7, v8);

  *a1 = *a3;
  xpc_object_t v9 = xpc_null_create();
  id v10 = *a3;
  *a3 = v9;
}

applesauce::xpc::object *applesauce::xpc::object::object(applesauce::xpc::object *this, const applesauce::xpc::object *a2)
{
  xpc_object_t v3 = a2;
  *(void *)this = v3;
  if (!v3)
  {
    xpc_object_t v4 = xpc_null_create();
    int8x8_t v5 = *(void **)this;
    *(void *)this = v4;
  }
  return this;
}

uint64_t std::allocate_shared[abi:ne180100]<caulk::ipc::mapped_memory,std::allocator<caulk::ipc::mapped_memory>,caulk::mach::xpc_object const&,void>(uint64_t *a1, uint64_t a2)
{
  xpc_object_t v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_1F147E530;
  uint64_t result = MEMORY[0x1C1858C20](v4 + 3, a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1BAA94EA8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::__emplace_unique_key_args<AMCP::Portal::IPC::shared_buffer_info_t,std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>(uint64_t a1, unsigned int *a2, long long *a3)
{
  unint64_t v7 = std::hash<AMCP::Portal::IPC::shared_buffer_info_t>::operator()(a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = v7;
      if (v7 >= v9) {
        unint64_t v3 = v7 % v9;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v7;
    }
    unint64_t v11 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (unint64_t i = *v11; i; unint64_t i = (uint64_t *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v7)
        {
          if (*((_DWORD *)i + 4) == *a2
            && *((_DWORD *)i + 5) == a2[1]
            && *((_DWORD *)i + 6) == a2[2]
            && *((_DWORD *)i + 7) == a2[3])
          {
            return;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v14 = (void *)(a1 + 16);
  xpc_object_t v15 = operator new(0x40uLL);
  long long v16 = *a3;
  long long v17 = a3[1];
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  uint64_t v18 = *((void *)a3 + 4);
  uint64_t v19 = *((void *)a3 + 5);
  *((void *)a3 + 4) = 0;
  v41[0] = v15;
  v41[1] = a1 + 16;
  void *v15 = 0;
  v15[1] = v8;
  *((_OWORD *)v15 + 1) = v16;
  *((_OWORD *)v15 + 2) = v17;
  void v15[6] = v18;
  v15[7] = v19;
  char v42 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v9 || (float)(v21 * (float)v9) < v20)
  {
    BOOL v22 = 1;
    if (v9 >= 3) {
      BOOL v22 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v9);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    else {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if (*(void *)&prime > v9) {
      goto LABEL_33;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v32 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (uint8x8_t v33 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        unint64_t v32 = std::__next_prime(v32);
      }
      else
      {
        uint64_t v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2) {
          unint64_t v32 = v34;
        }
      }
      if (*(void *)&prime <= v32) {
        int8x8_t prime = (int8x8_t)v32;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *(void *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          id v26 = operator new(8 * *(void *)&prime);
          id v27 = *(void **)a1;
          *(void *)a1 = v26;
          if (v27) {
            operator delete(v27);
          }
          uint64_t v28 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v28++) = 0;
          while (*(void *)&prime != v28);
          unint64_t v29 = (void *)*v14;
          if (*v14)
          {
            unint64_t v30 = v29[1];
            uint8x8_t v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(void *)&prime) {
                v30 %= *(void *)&prime;
              }
            }
            else
            {
              v30 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v30) = v14;
            uint8x8_t v35 = (void *)*v29;
            if (*v29)
            {
              do
              {
                unint64_t v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(void *)&prime) {
                    v36 %= *(void *)&prime;
                  }
                }
                else
                {
                  v36 &= *(void *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v36))
                  {
                    *(void *)(*(void *)a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  void *v29 = *v35;
                  *uint8x8_t v35 = **(void **)(*(void *)a1 + 8 * v36);
                  **(void **)(*(void *)a1 + 8 * v36) = v35;
                  uint8x8_t v35 = v29;
                }
                unint64_t v36 = v30;
LABEL_58:
                unint64_t v29 = v35;
                uint8x8_t v35 = (void *)*v35;
                unint64_t v30 = v36;
              }
              while (v35);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        __int16 v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *(void *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  id v37 = *(void **)(*(void *)a1 + 8 * v3);
  uint64_t v38 = v41[0];
  if (v37)
  {
    *(void *)v41[0] = *v37;
LABEL_75:
    *id v37 = v38;
    goto LABEL_76;
  }
  *(void *)v41[0] = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v38;
  *(void *)(*(void *)a1 + 8 * v3) = v14;
  if (*(void *)v38)
  {
    unint64_t v39 = *(void *)(*(void *)v38 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9) {
        v39 %= v9;
      }
    }
    else
    {
      v39 &= v9 - 1;
    }
    id v37 = (void *)(*(void *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v41[0] = 0;
  ++*(void *)(a1 + 24);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)v41);
}

void sub_1BAA952FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::pair<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return a1;
}

uint64_t std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>::~tuple(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  return a1;
}

uint64_t std::tuple<applesauce::xpc::dict,caulk::mach::xpc_object,AMCP::Portal::IPC::shared_buffer_info_t>::~tuple(uint64_t a1, void *a2)
{
  caulk::mach::details::release_os_object(*(caulk::mach::details **)(a1 + 8), a2);
  id v3 = *(id *)a1;
  *(void *)a1 = 0;

  return a1;
}

uint64_t std::__shared_ptr_emplace<caulk::ipc::mapped_memory>::__on_zero_shared(uint64_t a1)
{
  return caulk::ipc::mapped_memory::reset((caulk::ipc::mapped_memory *)(a1 + 24));
}

void std::__shared_ptr_emplace<caulk::ipc::mapped_memory>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<caulk::ipc::mapped_memory>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147E530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void HALS_UCRemotePlugIn::create_mcp_engine(HALS_UCRemotePlugIn *this, HALS_PlugIn *a2, const HALS_IODevice *a3, unsigned int *a4)
{
  obj[40] = *(id *)MEMORY[0x1E4F143B8];
  unint64_t v8 = (const void *)(*(uint64_t (**)(const HALS_IODevice *))(*(void *)a3 + 208))(a3);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v8);
  double v22 = (*(double (**)(const HALS_IODevice *))(*(void *)a3 + 264))(a3);
  int v21 = (*(uint64_t (**)(const HALS_IODevice *))(*(void *)a3 + 296))(a3);
  int v20 = (*(uint64_t (**)(const HALS_IODevice *))(*(void *)a3 + 320))(a3);
  int v19 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(void *)a3 + 312))(a3, 1);
  int v18 = (*(uint64_t (**)(const HALS_IODevice *, void))(*(void *)a3 + 312))(a3, 0);
  int v17 = (*(uint64_t (**)(const HALS_IODevice *, uint64_t))(*(void *)a3 + 304))(a3, 1);
  int v16 = (*(uint64_t (**)(const HALS_IODevice *, void))(*(void *)a3 + 304))(a3, 0);
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)obj, "ASP::Engine Queue");
  unint64_t v9 = (id *)((char *)this + 48);
  objc_storeStrong(v9, obj[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)obj);
  make_stream_list((const HALS_IODevice *)obj, a3, 1);
  make_stream_list((const HALS_IODevice *)__p, a3, 0);
  long long v13 = 0uLL;
  unsigned __int8 v12 = 1;
  uint64_t v10 = *((void *)a2 + 51);
  *(void *)&long long v11 = *((void *)a2 + 50);
  *((void *)&v11 + 1) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  std::allocate_shared[abi:ne180100]<AMCP::ASP::Engine,std::allocator<AMCP::ASP::Engine>,std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int const&,applesauce::CF::StringRef &,double &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,AMCP::Utility::Dispatch_Queue &,void>((uint64_t)&v14, &v13, &v12, &v11, a4, &cf, &v22, &v21, &v20, &v19, &v18, &v17, &v16, (uint64_t)obj, (uint64_t)__p, (dispatch_queue_t *)v9);
}

void sub_1BAA95768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAA957E8()
{
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAA95878(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

void make_stream_list(const HALS_IODevice *a1, HALS_IODevice *this, char a3)
{
  char v3 = a3;
  xpc_object_t v4 = a1;
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  unsigned int NumberStreams = HALS_IODevice::GetNumberStreams(this, a3);
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve((void **)v4, NumberStreams);
  if (NumberStreams)
  {
    int v6 = 0;
    unsigned int v43 = NumberStreams;
    uint64_t v38 = v4;
    char v37 = v3;
    do
    {
      unint64_t v7 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, v3, v6);
      int v8 = (*(uint64_t (**)(unsigned int *))(*(void *)v7 + 200))(v7);
      unsigned int v9 = v7[21];
      uint64_t v10 = v7[4];
      uint64_t v54 = 0x676C6F6270667420;
      int v55 = 0;
      int v56 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, void, void, void))(*(void *)v7 + 112))(v7, v10, &v54, 40, &v56, &v45, 0, 0, 0);
      int v11 = v46;
      int v12 = v47;
      int v13 = v48;
      int v14 = v49;
      int v16 = v50;
      int v15 = v51;
      int v17 = v52;
      if (v46 == 1819304813 && (v47 & 0x40) == 0)
      {
        int v16 = 4 * v51;
        int v17 = 32;
        int v12 = 9;
        int v14 = 1;
        int v13 = 4 * v51;
      }
      uint64_t v18 = v45;
      int v19 = v53;
      int v21 = (_DWORD *)*((void *)v4 + 1);
      unint64_t v20 = *((void *)v4 + 2);
      if ((unint64_t)v21 >= v20)
      {
        int v39 = v53;
        int v40 = v51;
        int v41 = v17;
        int v42 = v6;
        int v24 = v46;
        uint8x8_t v25 = *(_DWORD **)v4;
        uint64_t v26 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v21 - *(void *)v4) >> 3);
        unint64_t v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) > 0x492492492492492) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v28 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v20 - (void)v25) >> 3);
        if (2 * v28 > v27) {
          unint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x249249249249249) {
          unint64_t v29 = 0x492492492492492;
        }
        else {
          unint64_t v29 = v27;
        }
        unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v29);
        unint64_t v32 = &v30[56 * v26];
        *(_DWORD *)unint64_t v32 = v8;
        *((_DWORD *)v32 + 1) = v9;
        *((_DWORD *)v32 + 2) = 0;
        *((void *)v32 + 2) = v18;
        *((_DWORD *)v32 + 6) = v24;
        *((_DWORD *)v32 + 7) = v12;
        *((_DWORD *)v32 + 8) = v13;
        *((_DWORD *)v32 + 9) = v14;
        *((_DWORD *)v32 + 10) = v16;
        *((_DWORD *)v32 + 11) = v40;
        *((_DWORD *)v32 + 12) = v41;
        *((_DWORD *)v32 + 13) = v39;
        uint8x8_t v33 = v32;
        if (v21 == v25)
        {
          xpc_object_t v4 = v38;
          int v6 = v42;
          unsigned int v23 = v43;
        }
        else
        {
          xpc_object_t v4 = v38;
          int v6 = v42;
          unsigned int v23 = v43;
          do
          {
            long long v34 = *(_OWORD *)(v21 - 14);
            long long v35 = *(_OWORD *)(v21 - 10);
            long long v36 = *(_OWORD *)(v21 - 6);
            *((void *)v33 - 1) = *((void *)v21 - 1);
            *(_OWORD *)(v33 - 24) = v36;
            *(_OWORD *)(v33 - 40) = v35;
            *(_OWORD *)(v33 - ++*(_DWORD *)(this + 56) = v34;
            v33 -= 56;
            v21 -= 14;
          }
          while (v21 != v25);
          int v21 = v25;
        }
        double v22 = v32 + 56;
        *(void *)xpc_object_t v4 = v33;
        *((void *)v4 + 1) = v32 + 56;
        *((void *)v4 + 2) = &v30[56 * v31];
        char v3 = v37;
        if (v21) {
          operator delete(v21);
        }
      }
      else
      {
        *int v21 = v8;
        v21[1] = v9;
        _DWORD v21[2] = 0;
        *((void *)v21 + 2) = v18;
        v21[6] = v11;
        v21[7] = v12;
        v21[8] = v13;
        v21[9] = v14;
        v21[10] = v16;
        v21[11] = v15;
        double v22 = v21 + 14;
        v21[12] = v17;
        v21[13] = v19;
        unsigned int v23 = v43;
      }
      *((void *)v4 + 1) = v22;
      ++v6;
    }
    while (v6 != v23);
  }
}

void sub_1BAA95B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v13 = *(void **)v11;
  if (*(void *)v11)
  {
    *(void *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<AMCP::ASP::Engine,std::allocator<AMCP::ASP::Engine>,std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int const&,applesauce::CF::StringRef &,double &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,unsigned int &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> &,AMCP::Utility::Dispatch_Queue &,void>(uint64_t a1, long long *a2, unsigned __int8 *a3, long long *a4, unsigned int *a5, CFTypeRef *a6, double *a7, int *a8, int *a9, int *a10, int *a11, int *a12, int *a13, uint64_t a14, uint64_t a15, dispatch_queue_t *a16)
{
  int v21 = (char *)operator new(0x328uLL);
  *(_OWORD *)(v21 + 8) = 0u;
  *(void *)int v21 = &unk_1F14756E0;
  long long v22 = *a2;
  *a2 = 0u;
  int v23 = *a3;
  long long v29 = *a4;
  long long v30 = v22;
  *a4 = 0u;
  unsigned int v25 = *a5;
  CFTypeRef v24 = *a6;
  if (*a6) {
    CFRetain(*a6);
  }
  CFTypeRef v28 = v24;
  AMCP::ASP::Engine::Engine((uint64_t)(v21 + 24), *a7, (uint64_t)&v30, v23 != 0, (uint64_t)&v29, v25, &v28, *a8, *a9, *a10, *a11, *a12, *a13, a14, a15, a16);
}

void sub_1BAA95D84(_Unwind_Exception *a1)
{
  applesauce::CF::StringRef::~StringRef((const void **)(v4 - 136));
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v6);
  _Unwind_Resume(a1);
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void std::shared_ptr<AMCP::ASP::Engine>::__enable_weak_this[abi:ne180100]<AMCP::Core::Engine,AMCP::ASP::Engine,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int8x8_t v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::Engine>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14756E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14756E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::reserve(void **a1, unint64_t a2)
{
  if (0x6DB6DB6DB6DB6DB7 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) < a2)
  {
    if (a2 >= 0x492492492492493) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v3 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 56;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a2);
    int8x8_t v5 = &v4[56 * v3];
    unint64_t v7 = &v4[56 * v6];
    unsigned int v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        long long v11 = *(_OWORD *)(v8 - 56);
        long long v12 = *(_OWORD *)(v8 - 40);
        long long v13 = *(_OWORD *)(v8 - 24);
        *((void *)v10 - 1) = *((void *)v8 - 1);
        *(_OWORD *)(v10 - 24) = v13;
        *(_OWORD *)(v10 - 40) = v12;
        *(_OWORD *)(v10 - ++*(_DWORD *)(this + 56) = v11;
        v10 -= 56;
        v8 -= 56;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a1);
}

void HALS_UCRemotePlugIn::DestroyEngine(HALS_UCRemotePlugIn *this, HALS_Object *a2)
{
  unint64_t v2 = *((void *)this + 96);
  if (v2)
  {
    uint8x8_t v4 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
    v4.i16[0] = vaddlv_u8(v4);
    if (v4.u32[0] > 1uLL)
    {
      unint64_t v5 = a2;
      if (v2 <= a2) {
        unint64_t v5 = a2 % v2;
      }
    }
    else
    {
      unint64_t v5 = (v2 - 1) & a2;
    }
    uint64_t v6 = *(_DWORD ***)(*((void *)this + 95) + 8 * v5);
    if (v6)
    {
      for (unint64_t i = *v6; i; unint64_t i = *(_DWORD **)i)
      {
        unint64_t v8 = *((void *)i + 1);
        if (v8 == a2)
        {
          if (i[4] == a2)
          {
            HALS_ObjectMap::ReleaseObject(*((HALS_ObjectMap **)i + 3), a2);
            int8x8_t v9 = *(int8x8_t *)((char *)this + 768);
            unint64_t v10 = *((void *)i + 1);
            uint8x8_t v11 = (uint8x8_t)vcnt_s8(v9);
            v11.i16[0] = vaddlv_u8(v11);
            if (v11.u32[0] > 1uLL)
            {
              if (v10 >= *(void *)&v9) {
                v10 %= *(void *)&v9;
              }
            }
            else
            {
              v10 &= *(void *)&v9 - 1;
            }
            uint64_t v12 = *((void *)this + 95);
            long long v13 = *(void **)(v12 + 8 * v10);
            do
            {
              int v14 = v13;
              long long v13 = (void *)*v13;
            }
            while (v13 != (void *)i);
            if (v14 == (void *)((char *)this + 776)) {
              goto LABEL_35;
            }
            unint64_t v15 = v14[1];
            if (v11.u32[0] > 1uLL)
            {
              if (v15 >= *(void *)&v9) {
                v15 %= *(void *)&v9;
              }
            }
            else
            {
              v15 &= *(void *)&v9 - 1;
            }
            if (v15 != v10)
            {
LABEL_35:
              if (!*(void *)i) {
                goto LABEL_36;
              }
              unint64_t v16 = *(void *)(*(void *)i + 8);
              if (v11.u32[0] > 1uLL)
              {
                if (v16 >= *(void *)&v9) {
                  v16 %= *(void *)&v9;
                }
              }
              else
              {
                v16 &= *(void *)&v9 - 1;
              }
              if (v16 != v10) {
LABEL_36:
              }
                *(void *)(v12 + 8 * v10) = 0;
            }
            uint64_t v17 = *(void *)i;
            if (*(void *)i)
            {
              unint64_t v18 = *(void *)(v17 + 8);
              if (v11.u32[0] > 1uLL)
              {
                if (v18 >= *(void *)&v9) {
                  v18 %= *(void *)&v9;
                }
              }
              else
              {
                v18 &= *(void *)&v9 - 1;
              }
              if (v18 != v10)
              {
                *(void *)(*((void *)this + 95) + 8 * v18) = v14;
                uint64_t v17 = *(void *)i;
              }
            }
            *int v14 = v17;
            *(void *)unint64_t i = 0;
            --*((void *)this + 98);
            operator delete(i);
            return;
          }
        }
        else
        {
          if (v4.u32[0] > 1uLL)
          {
            if (v8 >= v2) {
              v8 %= v2;
            }
          }
          else
          {
            v8 &= v2 - 1;
          }
          if (v8 != v5) {
            return;
          }
        }
      }
    }
  }
}

void HALS_UCRemotePlugIn::CreateEngine(HALS_UCRemotePlugIn *this, HALS_PlugIn *a2, HALS_IODevice *a3)
{
}

void sub_1BAA966C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::ObjectWasDestroyed(HALS_UCRemotePlugIn *this, uint64_t a2)
{
  return objc_msgSend(*((id *)this + 89), "object_was_destroyed:", a2);
}

void sub_1BAA96758(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 417;
      a11 = 1024;
      a12 = v12;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to tell remote driver that ObjectWasDestroyed for object id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA9672CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::DestroyDevice(HALS_UCRemotePlugIn *this, uint64_t a2)
{
  return objc_msgSend(*((id *)this + 89), "destroy_device:", a2);
}

void sub_1BAA9683C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 402;
      a11 = 1024;
      a12 = v12;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to DestroyDevice for device id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA96810);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::CreateDevice(HALS_UCRemotePlugIn *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3, unsigned int *a4)
{
  return objc_msgSend(*((id *)this + 89), "create_device:client_info:out_object_id:", a2, a3, a4);
}

void sub_1BAA96928(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = *v12;
      LODWORD(a9) = 136315650;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 387;
      a11 = 1024;
      a12 = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to CreateDevice for device id %u", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA968FCLL);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::AbortDeviceConfigChange(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = objc_msgSend(*((id *)this + 89), "perform_device_configuration_change:action:change:", a2, a3, *a4);
  unint64_t v7 = (void **)*((void *)this + 91);
  unint64_t v8 = (void **)*((void *)this + 92);
  if (v7 != v8)
  {
    while (*v7 != a4)
    {
      v7 += 2;
      if (v7 == v8) {
        return v6;
      }
    }
  }
  if (v7 != v8)
  {
    int8x8_t v9 = v7 + 2;
    if (v7 + 2 != v8)
    {
      do
      {
        unint64_t v7 = v9;
        long long v10 = *(_OWORD *)v9;
        char *v9 = 0;
        v9[1] = 0;
        uint8x8_t v11 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - 1) = v10;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        int8x8_t v9 = v7 + 2;
      }
      while (v7 + 2 != v8);
      unint64_t v8 = (void **)*((void *)this + 92);
    }
    while (v8 != v7)
    {
      int v12 = (std::__shared_weak_count *)*(v8 - 1);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v8 -= 2;
    }
    *((void *)this + 92) = v7;
  }
  return v6;
}

uint64_t HALS_UCRemotePlugIn::PerformDeviceConfigChange(HALS_UCRemotePlugIn *this, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = objc_msgSend(*((id *)this + 89), "perform_device_configuration_change:action:change:", a2, a3, *a4);
  unint64_t v7 = (void **)*((void *)this + 91);
  unint64_t v8 = (void **)*((void *)this + 92);
  if (v7 != v8)
  {
    while (*v7 != a4)
    {
      v7 += 2;
      if (v7 == v8) {
        return v6;
      }
    }
  }
  if (v7 != v8)
  {
    int8x8_t v9 = v7 + 2;
    if (v7 + 2 != v8)
    {
      do
      {
        unint64_t v7 = v9;
        long long v10 = *(_OWORD *)v9;
        char *v9 = 0;
        v9[1] = 0;
        uint8x8_t v11 = (std::__shared_weak_count *)*(v9 - 1);
        *((_OWORD *)v9 - 1) = v10;
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        int8x8_t v9 = v7 + 2;
      }
      while (v7 + 2 != v8);
      unint64_t v8 = (void **)*((void *)this + 92);
    }
    while (v8 != v7)
    {
      int v12 = (std::__shared_weak_count *)*(v8 - 1);
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      v8 -= 2;
    }
    *((void *)this + 92) = v7;
  }
  return v6;
}

uint64_t HALS_UCRemotePlugIn::RemoveDeviceClient(HALS_UCRemotePlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return objc_msgSend(*((id *)this + 89), "remove_device_client:client_info:", a2, a3);
}

void sub_1BAA96BD4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = *v14;
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 338;
      a11 = 1024;
      a12 = v13;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to RemoveDeviceClient for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA96BA8);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_UCRemotePlugIn::AddDeviceClient(HALS_UCRemotePlugIn *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return objc_msgSend(*((id *)this + 89), "add_device_client:client_info:", a2, a3);
}

void sub_1BAA96CCC(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, __int16 a11, int a12, uint64_t a13)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v15 = *v14;
      LODWORD(a9) = 136315906;
      *(void *)((char *)&a9 + 4) = "HALS_UCRemotePlugIn.mm";
      WORD6(a9) = 1024;
      *(_DWORD *)((char *)&a9 + 14) = 323;
      a11 = 1024;
      a12 = v13;
      LOWORD(a13) = 1024;
      *(_DWORD *)((char *)&a13 + 2) = v15;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Failed to AddDeviceClient for device id %u, client id %u", (uint8_t *)&a9, 0x1Eu);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAA96CA0);
  }
  _Unwind_Resume(a1);
}

void HALS_UCRemotePlugIn::Teardown(HALS_UCRemotePlugIn *this)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN19HALS_UCRemotePlugIn8TeardownEv_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 408);
  if (v1) {
    atomic_store(1u, (unsigned __int8 *)this + 409);
  }
  dispatch_sync(*((dispatch_queue_t *)this + 47), block);
}

void ___ZN19HALS_UCRemotePlugIn8TeardownEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = *(void **)(v1 + 704);
  if (v2)
  {
    [v2 teardown];
    uint64_t v3 = *(void **)(v1 + 704);
    *(void *)(v1 + 704) = 0;

    *(void *)(v1 + 720) = 0;
  }
}

uint64_t HALS_UCRemotePlugIn::Initialize()
{
  return 1970171760;
}

uint64_t HALS_UCRemotePlugIn::Initialize(HALS_UCRemotePlugIn *this, const AudioServerPlugInHostInterface *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3 || (v5 = *((void *)this + 2), (uint64_t v6 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v7 = v6;
  unint64_t v8 = [Remote_Driver_Host_Delegate alloc];
  uint64_t v17 = v5;
  unint64_t v18 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = [(Remote_Driver_Host_Delegate *)v8 init_with_remote_plugin:&v17];
  long long v10 = (void *)*((void *)this + 88);
  *((void *)this + 88) = v9;

  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  id v11 = [[Core_Audio_Driver_Host alloc] init_with_delegate:*((void *)this + 88)];
  int v12 = (void *)*((void *)this + 89);
  *((void *)this + 89) = v11;

  objc_msgSend(*((id *)this + 89), "setDriver_endpoint:", *((void *)this + 46));
  *((void *)this + 90) = a2;
  int v13 = (void *)*((void *)this + 89);
  int v14 = objc_msgSend(v13, "driver_endpoint");
  uint64_t v15 = objc_msgSend(v13, "initialize_driver:", v14);

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return v15;
}

void sub_1BAA96F20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA438] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA2E0], MEMORY[0x1E4FBA208]);
}

uint64_t HALS_UCRemotePlugIn::GetBundleLocation(HALS_UCRemotePlugIn *this)
{
  return *((void *)this + 5);
}

uint64_t HALS_UCRemotePlugIn::GetBundleID(HALS_UCRemotePlugIn *this)
{
  return *((void *)this + 4);
}

uint64_t HALS_UCRemotePlugIn::SupportsIsolatedIO(HALS_UCRemotePlugIn *this)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::IsOldStyle(HALS_UCRemotePlugIn *this)
{
  return 0;
}

uint64_t HALS_UCRemotePlugIn::IsNub(HALS_UCRemotePlugIn *this)
{
  return 0;
}

void HALS_UCRemotePlugIn::~HALS_UCRemotePlugIn(HALS_UCRemotePlugIn *this, HALS_Object *a2)
{
  HALS_UCRemotePlugIn::~HALS_UCRemotePlugIn(this, a2);

  JUMPOUT(0x1C1859840);
}

{
  void *v3;
  void **v4;
  HALS_ObjectMap **i;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t j;
  const void *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  void **v13;

  *(void *)this = &unk_1F145C088;
  uint64_t v3 = (void *)((char *)this + 760);
  uint8x8_t v4 = (void **)((char *)this + 776);
  for (unint64_t i = (HALS_ObjectMap **)((char *)this + 776); ; HALS_ObjectMap::ReleaseObject(i[3], a2))
  {
    unint64_t i = (HALS_ObjectMap **)*i;
    if (!i) {
      break;
    }
  }
  if (*((void *)this + 98))
  {
    uint64_t v6 = *v4;
    if (*v4)
    {
      do
      {
        unint64_t v7 = (void *)*v6;
        operator delete(v6);
        uint64_t v6 = v7;
      }
      while (v7);
    }
    *((void *)this + 97) = 0;
    unint64_t v8 = *((void *)this + 96);
    if (v8)
    {
      for (j = 0; j != v8; ++j)
        *(void *)(*v3 + 8 * j) = 0;
    }
    *((void *)this + 98) = 0;
  }
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::~__hash_table((uint64_t)this + 840);
  std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table((uint64_t)this + 800);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v3);
  int v13 = (void **)((char *)this + 728);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v13);

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)((char *)this + 376));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)((char *)this + 48));
  long long v10 = (const void *)*((void *)this + 5);
  if (v10) {
    CFRelease(v10);
  }
  id v11 = (const void *)*((void *)this + 4);
  if (v11) {
    CFRelease(v11);
  }
  int v12 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::__unordered_map_hasher<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::shared_buffer_info_t,std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,std::equal_to<AMCP::Portal::IPC::shared_buffer_info_t>,std::hash<AMCP::Portal::IPC::shared_buffer_info_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::shared_buffer_info_t,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::Portal::IPC::shared_buffer_info_t const,std::tuple<NSObject  {objcproto13OS_xpc_object}* {__strong},std::shared_ptr<caulk::ipc::mapped_memory>,void *>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::__unordered_map_hasher<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::__unordered_map_equal<AMCP::Portal::IPC::io_messenger_id_t,std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,std::equal_to<AMCP::Portal::IPC::io_messenger_id_t>,std::hash<AMCP::Portal::IPC::io_messenger_id_t>,true>,std::allocator<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint8x8_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint8x8_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (std::__shared_weak_count *)*((void *)v4 - 1);
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        v4 -= 16;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAA9735C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Utility::Dispatch_Queue::Dispatch_Queue(uint64_t a1, char *a2)
{
  v4[40] = *(void **)MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::create_serial_with_workloop((AMCP::Utility::Dispatch_Queue *)v4, a2);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a1, v4[0]);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v4);
  return a1;
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t AMCP::Utility::Dispatch_Queue::Dispatch_Queue(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  *(void *)(a1 + 64) = 850045863;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 850045863;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(void *)(a1 + 240) = 850045863;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(void *)(a1 + 312) = dispatch_semaphore_create(0);
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint8x8_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
}

void sub_1BAA97640(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
  return result;
}

void LogError(const char *a1, ...)
{
  va_start(va, a1);
  vsyslog(3, "Couldn't find physical format in PDP format list.", va);
}

void ADS::Simulator::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, const __CFString **a6, uint64_t a7, const __CFString **a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  int v12 = a7;
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == 1684371021)
  {
    if (a5 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 572;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::SetPropertyData: the qualifier is the wrong size for kAudioFakeDevicePropertyManageDevices", (uint8_t *)&buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    if (!a6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 573;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::SetPropertyData: no qualifier for kAudioFakeDevicePropertyManageDevices", (uint8_t *)&buf, 0x12u);
      }
      int v56 = __cxa_allocate_exception(0x10uLL);
      *(void *)int v56 = off_1F148A5D8;
      v56[2] = 561211770;
    }
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v64 = a1 + 56;
    char v65 = (*(uint64_t (**)(void))(v14 + 16))();
    CFStringRef v15 = *a6;
    if (CFStringCompare(v15, @"create", 1uLL))
    {
      if (CFStringCompare(v15, @"destroy", 1uLL))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 595;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::SetPropertyData: Unsupported operation", (uint8_t *)&buf, 0x12u);
        }
LABEL_75:
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v64);
        return;
      }
      if (v12 == 8)
      {
        CFDictionaryRef v22 = PropertyListDeepImmutableCopy(*a8);
        v63[0] = &unk_1F1489A20;
        v63[1] = v22;
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v62, v22);
        v62[0] = &unk_1F1489A20;
        int v23 = (ADS::Simulator *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)1);
        if (!v23)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 787;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_PlugIn::IOServiceInterestHandler: no plug-in object", (uint8_t *)&buf, 0x12u);
          }
          id v60 = __cxa_allocate_exception(0x10uLL);
          *(void *)id v60 = off_1F148A5D8;
          v60[2] = 1852797029;
        }
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v66, (CFTypeRef)v62[1]);
        v66 = &unk_1F1489A20;
        pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
        CFTypeRef v24 = v67;
        if (v67)
        {
          char v25 = ADS::ObjectManager::sMutex;
          *(void *)uint64_t v69 = ADS::ObjectManager::sMutex;
          if (ADS::ObjectManager::sMutex)
          {
            char v25 = (*(uint64_t (**)(uint64_t))(*(void *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
            CFTypeRef v24 = v67;
          }
          v69[8] = v25;
          uint64_t v26 = ADS::ObjectManager::sInstance;
          OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v68, v24);
          unsigned __int8 v68 = &unk_1F1489A20;
          OS::CF::String::AsStdString(&buf, (uint64_t)&v68);
          uint64_t v27 = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(v26 + 40), (unsigned __int8 *)&buf);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          if (v27)
          {
            CFTypeRef v28 = *(unsigned int **)(v27 + 40);
            if (*(unsigned int **)(v27 + 48) == v28) {
              std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v27 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v28);
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v68);
          CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v69);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v66);
          if (v27)
          {
            if (*(_DWORD *)(v27 + 12) == 1633905771) {
              int v30 = 1668049699;
            }
            else {
              int v30 = 1684370979;
            }
            ADS::Simulator::RemoveDevice(v23, (ADS::Device *)v27);
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v27, v31);
            *a9 = 2;
            uint8x8_t v33 = (_DWORD *)a10[1];
            unint64_t v32 = a10[2];
            if ((unint64_t)v33 >= v32)
            {
              long long v36 = (_DWORD *)*a10;
              unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v33 - *a10) >> 2);
              unint64_t v38 = v37 + 1;
              if (v37 + 1 > 0x1555555555555555) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (void)v36) >> 2);
              if (2 * v39 > v38) {
                unint64_t v38 = 2 * v39;
              }
              if (v39 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v40 = 0x1555555555555555;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                unint64_t v40 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v40);
                long long v36 = (_DWORD *)*a10;
                uint8x8_t v33 = (_DWORD *)a10[1];
              }
              else
              {
                long long v29 = 0;
              }
              unint64_t v41 = v40 + 12 * v37;
              unint64_t v32 = v40 + 12 * (void)v29;
              *(void *)unint64_t v41 = 0x676C6F626F776E64;
              *(_DWORD *)(v41 + 8) = 0;
              long long v34 = (int *)(v41 + 12);
              if (v33 != v36)
              {
                do
                {
                  uint64_t v42 = *(void *)(v33 - 3);
                  v33 -= 3;
                  int v43 = v33[2];
                  *(void *)(v41 - 12) = v42;
                  v41 -= 12;
                  *(_DWORD *)(v41 + 8) = v43;
                }
                while (v33 != v36);
                long long v36 = (_DWORD *)*a10;
              }
              *a10 = v41;
              a10[1] = (unint64_t)v34;
              a10[2] = v32;
              if (v36)
              {
                operator delete(v36);
                unint64_t v32 = a10[2];
              }
            }
            else
            {
              *(void *)uint8x8_t v33 = 0x676C6F626F776E64;
              v33[2] = 0;
              long long v34 = v33 + 3;
            }
            a10[1] = (unint64_t)v34;
            if ((unint64_t)v34 >= v32)
            {
              uint64_t v45 = (int *)*a10;
              unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v34 - *a10) >> 2);
              unint64_t v47 = v46 + 1;
              if (v46 + 1 > 0x1555555555555555) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32 - (void)v45) >> 2);
              if (2 * v48 > v47) {
                unint64_t v47 = 2 * v48;
              }
              if (v48 >= 0xAAAAAAAAAAAAAAALL) {
                unint64_t v49 = 0x1555555555555555;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                unint64_t v49 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v49);
                uint64_t v45 = (int *)*a10;
                long long v34 = (int *)a10[1];
              }
              else
              {
                long long v29 = 0;
              }
              unint64_t v50 = v49 + 12 * v46;
              unint64_t v51 = v49 + 12 * (void)v29;
              *(_DWORD *)unint64_t v50 = v30;
              *(void *)(v50 + 4) = 1735159650;
              unint64_t v44 = v50 + 12;
              if (v34 != v45)
              {
                do
                {
                  uint64_t v52 = *(void *)(v34 - 3);
                  v34 -= 3;
                  int v53 = v34[2];
                  *(void *)(v50 - 12) = v52;
                  v50 -= 12;
                  *(_DWORD *)(v50 + 8) = v53;
                }
                while (v34 != v45);
                uint64_t v45 = (int *)*a10;
              }
              *a10 = v50;
              a10[1] = v44;
              a10[2] = v51;
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *long long v34 = v30;
              *(void *)(v34 + 1) = 1735159650;
              unint64_t v44 = (unint64_t)(v34 + 3);
            }
            a10[1] = v44;
          }
        }
        else
        {
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v66);
          uint64_t v27 = 0;
        }
        ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v27, v29);
        ADS::ObjectManager::ReleaseObject(v23, v54);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v62);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v63);
        goto LABEL_75;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 587;
        long long v57 = MEMORY[0x1E4F14500];
        goto LABEL_89;
      }
    }
    else
    {
      if (v12 == 8)
      {
        CFDictionaryRef v16 = PropertyListDeepImmutableCopy(*a8);
        v66 = &unk_1F14898A0;
        CFTypeRef v67 = v16;
        if (v16)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>((uint64_t)v69, v16, @"type");
          OS::CF::String::AsStdString(&buf, (uint64_t)v69);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v69);
          std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
          if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = buf.__r_.__value_.__l.__size_;
          }
          if (size != 3
            || ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? (p_std::string buf = &buf)
              : (p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0]),
                (int data_low = LOWORD(p_buf->__r_.__value_.__l.__data_),
                 int v20 = p_buf->__r_.__value_.__s.__data_[2],
                 data_low == 28514)
              ? (BOOL v21 = v20 == 120)
              : (BOOL v21 = 0),
                !v21))
          {
            ADS::Simulator::AddDeviceWithProperties((uint64_t)&v66);
          }
          long long v35 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)1);
          if (v35)
          {
            ADS::ObjectManager::GetNextObjectID(v35);
            operator new();
          }
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)uint64_t v69 = 136315394;
            *(void *)&v69[4] = "ADS_Simulator.cpp";
            __int16 v70 = 1024;
            int v71 = 700;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::AddBox: no plug-in object", v69, 0x12u);
          }
          unint64_t v61 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v61 = off_1F148A5D8;
          v61[2] = 1852797029;
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 680;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::AddDeviceWithProperties: no properties dictionary for device creation", (uint8_t *)&buf, 0x12u);
        }
        id v58 = __cxa_allocate_exception(0x10uLL);
        *(void *)id v58 = off_1F148A5D8;
        v58[2] = 1852797029;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Simulator.cpp";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 580;
        long long v57 = MEMORY[0x1E4F14500];
LABEL_89:
        _os_log_impl(&dword_1BAA78000, v57, OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::SetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyManageDevices", (uint8_t *)&buf, 0x12u);
      }
    }
    long long v59 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v59 = off_1F148A5D8;
    v59[2] = 561211770;
  }

  ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, (uint64_t)a6, a7, (uint64_t)a8, a9, a10, a11);
}

void sub_1BAA98574(_Unwind_Exception *a1, ADS::BaseObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  ADS::ObjectManager::ReleaseObject(v6, a2);
  if (*(char *)(v7 - 57) < 0) {
    operator delete(*(void **)(v7 - 80));
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

OS::CF::UntypedObject *OS::CF::UntypedObject::UntypedObject(OS::CF::UntypedObject *this, CFTypeRef cf)
{
  *(void *)this = &unk_1F1489918;
  if (cf) {
    CFRetain(cf);
  }
  *((void *)this + 1) = cf;
  return this;
}

void CADeprecated::CAMutex::Locker::~Locker(CADeprecated::CAMutex::Locker *this)
{
  if (*((unsigned char *)this + 8)) {
    (*(void (**)(void))(**(void **)this + 24))();
  }
}

void ADS::Simulator::RemoveDevice(ADS::Simulator *this, ADS::Device *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 7);
  CFDictionaryRef v16 = (char *)this + 56;
  char v17 = (*(uint64_t (**)(char *))(v4 + 16))((char *)this + 56);
  if (a2)
  {
    int v5 = *((_DWORD *)a2 + 3);
    BOOL v6 = v5 == 1633905771 || v5 == 1633969526;
    if (!v6)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315394;
        int v19 = "ADS_Simulator.cpp";
        __int16 v20 = 1024;
        int v21 = 866;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::_RemoveDevice: Trying to remove a device that is neither a 'device' nor a 'clockdevice'", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    BOOL v6 = v5 == 1633969526;
    uint64_t v7 = 168;
    if (v6)
    {
      uint64_t v7 = 144;
      unint64_t v8 = (char *)this + 144;
    }
    else
    {
      unint64_t v8 = (char *)this + 168;
    }
    uint64_t v9 = *(char **)((char *)this + v7);
    long long v10 = (char *)*((void *)v8 + 1);
    if (v9 != v10)
    {
      while (*(_DWORD *)v9 != *((_DWORD *)a2 + 2))
      {
        v9 += 4;
        if (v9 == v10) {
          goto LABEL_18;
        }
      }
    }
    if (v9 == v10)
    {
LABEL_18:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        int v19 = "ADS_Simulator.cpp";
        __int16 v20 = 1024;
        int v21 = 883;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device not found on ADS remove", buf, 0x12u);
      }
    }
    else
    {
      (*(void (**)(ADS::Device *))(*(void *)a2 + 8))(a2);
      ADS::ObjectManager::ReleaseObject(a2, v11);
      *(_DWORD *)uint64_t v9 = 0;
      int v12 = (char *)*((void *)v8 + 1);
      int64_t v13 = v12 - (v9 + 4);
      if (v12 != v9 + 4) {
        memmove(v9, v9 + 4, v12 - (v9 + 4));
      }
      *((void *)v8 + 1) = &v9[v13];
    }
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v16);
}

void sub_1BAA98A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(unint64_t a1)
{
  if (a1 >= 0x1555555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(12 * a1);
}

void OS::CF::String::~String(OS::CF::String *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::String>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)uint64_t result = &unk_1F1489A20;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    unsigned int value = 0;
    uint64_t result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0;
      uint64_t result = CFStringGetTypeID();
      if (v4 == result)
      {
        int v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

void OS::CF::String::AsStdString(std::string *this, uint64_t a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  CFStringRef v3 = *(const __CFString **)(a2 + 8);
  if (v3)
  {
    CStringPtr = CFStringGetCStringPtr(v3, 0x8000100u);
    if (CStringPtr)
    {
      std::string::__assign_external(this, CStringPtr);
    }
    else
    {
      CFIndex maxBufLen = 0;
      CFStringRef v6 = *(const __CFString **)(a2 + 8);
      v10.length = CFStringGetLength(v6);
      v10.location = 0;
      CFStringGetBytes(v6, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
      std::vector<char>::vector(&v8, maxBufLen + 1);
      CFStringRef v7 = *(const __CFString **)(a2 + 8);
      v11.length = CFStringGetLength(v7);
      v11.location = 0;
      CFStringGetBytes(v7, v11, 0x8000100u, 0, 0, (UInt8 *)v8.__begin_, maxBufLen, &maxBufLen);
      v8.__begin_[maxBufLen] = 0;
      std::string::__assign_external(this, v8.__begin_);
      if (v8.__begin_)
      {
        v8.__end_ = v8.__begin_;
        operator delete(v8.__begin_);
      }
    }
  }
}

void ADS::Simulator::AddDeviceWithProperties(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)1);
  if (v2)
  {
    if (*(void *)(a1 + 8))
    {
      ADS::ObjectManager::GetNextObjectID(v2);
      operator new();
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_9:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    *(_DWORD *)std::string buf = 136315394;
    CFStringRef v7 = "ADS_Simulator.cpp";
    __int16 v8 = 1024;
    int v9 = 737;
    CFStringRef v3 = MEMORY[0x1E4F14500];
    CFTypeID v4 = "%25s:%-5d  ADS::Simulator::AddDeviceWithProperties: no properties dictionary for device creation";
  }
  else
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
    *(_DWORD *)std::string buf = 136315394;
    CFStringRef v7 = "ADS_Simulator.cpp";
    __int16 v8 = 1024;
    int v9 = 736;
    CFStringRef v3 = MEMORY[0x1E4F14500];
    CFTypeID v4 = "%25s:%-5d  ADS::Simulator::AddDeviceWithProperties: no plug-in object";
  }
  _os_log_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, v4, buf, 0x12u);
  goto LABEL_9;
}

void sub_1BAA9931C(_Unwind_Exception *a1, ADS::BaseObject *a2)
{
  ADS::ObjectManager::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1BAA99394(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAA9939CLL);
  }
  JUMPOUT(0x1BAA99384);
}

void sub_1BAA99428()
{
}

void ADS::Simulator::_RemoveBox(ADS::Simulator *this, int a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v5 = (char *)this + 56;
  uint64_t v4 = *((void *)this + 7);
  int v9 = (char *)this + 56;
  char v10 = (*(uint64_t (**)(char *))(v4 + 16))((char *)this + 56);
  CFStringRef v7 = (char *)*((void *)v5 + 17);
  CFStringRef v6 = (char *)*((void *)v5 + 18);
  if (v7 != v6)
  {
    while (*(_DWORD *)v7 != a2)
    {
      v7 += 4;
      if (v7 == v6) {
        goto LABEL_9;
      }
    }
  }
  if (v7 == v6)
  {
LABEL_9:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v12 = "ADS_Simulator.cpp";
      __int16 v13 = 1024;
      int v14 = 911;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device not found on ADS remove", buf, 0x12u);
    }
  }
  else
  {
    int64_t v8 = v6 - (v7 + 4);
    if (v6 != v7 + 4) {
      memmove(v7, v7 + 4, v6 - (v7 + 4));
    }
    *((void *)this + 25) = &v7[v8];
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v9);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    int v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_1BAA9962C(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    CFStringRef v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    CFStringRef v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

void OS::CF::Dictionary::~Dictionary(OS::CF::Dictionary *this)
{
  OS::CF::UntypedObject::~UntypedObject(this);

  JUMPOUT(0x1C1859840);
}

void ADS::Simulator::GetPropertyData(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, uint64_t *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  __int16 v13 = a9;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector <= 1920168546)
    {
      if (mSelector == 1819173229)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 361;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyName", buf, 0x12u);
          }
          exception = __cxa_allocate_exception(0x10uLL);
          *(void *)exception = off_1F148A5D8;
          exception[2] = 561211770;
        }
        uint64_t v15 = @"PluginSimulator";
        goto LABEL_77;
      }
      if (mSelector != 1819569763)
      {
        if (mSelector == 1870098020)
        {
          uint64_t v17 = *((void *)this + 7);
          v87 = (char *)this + 56;
          char v88 = (*(uint64_t (**)(char *))(v17 + 16))((char *)this + 56);
          unint64_t v18 = (int *)*((void *)this + 18);
          uint64_t v19 = *((void *)this + 19) - (void)v18;
          uint64_t v20 = *((void *)this + 24);
          if (((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 2)
             + (v19 >> 2)
             + ((*((void *)this + 25) - v20) >> 2) >= (unint64_t)(a7 >> 2))
            uint64_t v21 = a7 >> 2;
          else {
            uint64_t v21 = ((uint64_t)(*((void *)this + 22) - *((void *)this + 21)) >> 2)
          }
                + (v19 >> 2)
                + ((*((void *)this + 25) - v20) >> 2);
          if (v21)
          {
            uint64_t v22 = v19 >> 2;
            uint64_t v23 = v21;
            CFTypeRef v24 = a9;
            while (v22)
            {
              int v25 = *v18++;
              *(_DWORD *)CFTypeRef v24 = v25;
              v24 += 4;
              --v22;
              if (!--v23) {
                goto LABEL_111;
              }
            }
            unint64_t v64 = (unint64_t)v19 >> 2;
          }
          else
          {
            BOOL v63 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
            LODWORD(v64) = 0;
            if (v63)
            {
              *(_DWORD *)std::string buf = 136315394;
              *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 378;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioObjectPropertyOwnedObjects to be returned", buf, 0x12u);
              LODWORD(v64) = 0;
            }
          }
          uint64_t v65 = (v21 - v64);
          if (v21 <= v64)
          {
            LODWORD(v21) = v64;
          }
          else
          {
            v66 = (int *)*((void *)this + 21);
            CFTypeRef v67 = &a9[4 * v64];
            do
            {
              int v68 = *v66++;
              *(_DWORD *)CFTypeRef v67 = v68;
              v67 += 4;
              --v65;
            }
            while (v65);
          }
LABEL_111:
          unsigned int v39 = 4 * v21;
          goto LABEL_112;
        }
        goto LABEL_88;
      }
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 355;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
        }
        uint64_t v79 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v79 = off_1F148A5D8;
        v79[2] = 561211770;
      }
      *(_DWORD *)a9 = 0;
LABEL_86:
      int v16 = 4;
      goto LABEL_87;
    }
    if (mSelector <= 1969841250)
    {
      if (mSelector == 1920168547)
      {
        if (a7 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 529;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  SA_GetPlugInPropertyData: not enough space for the return value of kAudioPlugInPropertyResourceBundle", buf, 0x12u);
          }
          int v71 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v71 = off_1F148A5D8;
          v71[2] = 561211770;
        }
        uint64_t v15 = &stru_1F148AD50;
        goto LABEL_77;
      }
      if (mSelector == 1936618861)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 340;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertySerialNumber", buf, 0x12u);
          }
          unint64_t v75 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v75 = off_1F148A5D8;
          v75[2] = 561211770;
        }
        uint64_t v15 = @"001";
        goto LABEL_77;
      }
      goto LABEL_88;
    }
    if (mSelector == 1969841251)
    {
      if (a5 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 503;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: the qualifier size is too small for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
        }
        uint64_t v73 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v73 = off_1F148A5D8;
        v73[2] = 561211770;
      }
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 504;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
        }
        v81 = __cxa_allocate_exception(0x10uLL);
        *(void *)v81 = off_1F148A5D8;
        v81[2] = 561211770;
      }
      if (!a6)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 505;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: no qualifier specified for kAudioPlugInPropertyTranslateUIDToClockDevice", buf, 0x12u);
        }
        mach_port_t v84 = __cxa_allocate_exception(0x10uLL);
        *(void *)mach_port_t v84 = off_1F148A5D8;
        v84[2] = 2003332927;
      }
      uint64_t v42 = *((void *)this + 7);
      v87 = (char *)this + 56;
      char v88 = (*(uint64_t (**)(char *))(v42 + 16))((char *)this + 56);
      uint64_t v27 = (unsigned int *)*((void *)this + 21);
      int v43 = (unsigned int *)*((void *)this + 22);
      if (v27 == v43) {
        goto LABEL_67;
      }
      while (1)
      {
        unint64_t v44 = (CFTypeRef *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v27);
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v44[12]);
        *(void *)std::string buf = &unk_1F1489A20;
        uint64_t v45 = *(void *)&buf[8];
        uint64_t v46 = *a6;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v44, v47);
        if (v45 == v46) {
          break;
        }
        if (++v27 == v43)
        {
          uint64_t v27 = v43;
          break;
        }
      }
      uint8x8_t v33 = (unsigned int *)*((void *)this + 22);
    }
    else
    {
      if (mSelector != 1969841252) {
        goto LABEL_88;
      }
      if (a5 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 435;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: the qualifier size is too small for kAudioPlugInPropertyTranslateUIDToDevice", buf, 0x12u);
        }
        v77 = __cxa_allocate_exception(0x10uLL);
        *(void *)v77 = off_1F148A5D8;
        v77[2] = 561211770;
      }
      if (a7 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 436;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioPlugInPropertyTranslateUIDToDevice", buf, 0x12u);
        }
        double v83 = __cxa_allocate_exception(0x10uLL);
        *(void *)double v83 = off_1F148A5D8;
        v83[2] = 561211770;
      }
      if (!a6)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 437;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: no qualifier specified for kAudioPlugInPropertyTranslateUIDToDevice", buf, 0x12u);
        }
        uint64_t v86 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v86 = off_1F148A5D8;
        v86[2] = 2003332927;
      }
      uint64_t v26 = *((void *)this + 7);
      v87 = (char *)this + 56;
      char v88 = (*(uint64_t (**)(char *))(v26 + 16))((char *)this + 56);
      uint64_t v27 = (unsigned int *)*((void *)this + 18);
      CFTypeRef v28 = (unsigned int *)*((void *)this + 19);
      if (v27 == v28) {
        goto LABEL_67;
      }
      while (1)
      {
        long long v29 = (CFTypeRef *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)*v27);
        OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)buf, v29[12]);
        *(void *)std::string buf = &unk_1F1489A20;
        uint64_t v30 = *(void *)&buf[8];
        uint64_t v31 = *a6;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
        ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v29, v32);
        if (v30 == v31) {
          break;
        }
        if (++v27 == v28)
        {
          uint64_t v27 = v28;
          break;
        }
      }
      uint8x8_t v33 = (unsigned int *)*((void *)this + 19);
    }
    if (v27 != v33)
    {
      unsigned int v48 = *v27;
LABEL_68:
      *(_DWORD *)a9 = v48;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v87);
      goto LABEL_86;
    }
LABEL_67:
    unsigned int v48 = 0;
    goto LABEL_68;
  }
  if (mSelector > 1684370978)
  {
    if (mSelector > 1719105133)
    {
      if (mSelector == 1719105134)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 348;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyFirmwareVersion", buf, 0x12u);
          }
          unsigned __int8 v72 = __cxa_allocate_exception(0x10uLL);
          *(void *)unsigned __int8 v72 = off_1F148A5D8;
          v72[2] = 561211770;
        }
        uint64_t v15 = @"1.0";
        goto LABEL_77;
      }
      if (mSelector == 1819107691)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 333;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyManufacturer", buf, 0x12u);
          }
          unint64_t v76 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v76 = off_1F148A5D8;
          v76[2] = 561211770;
        }
        uint64_t v15 = @"Apple Inc.";
        goto LABEL_77;
      }
      goto LABEL_88;
    }
    if (mSelector != 1684370979)
    {
      if (mSelector == 1684371021)
      {
        if (a7 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 552;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioFakeDevicePropertyManageDevices", buf, 0x12u);
          }
          std::string::size_type v74 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string::size_type v74 = off_1F148A5D8;
          v74[2] = 561211770;
        }
        if (a5 != 8)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 553;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: the qualifier is the wrong size for kAudioFakeDevicePropertyManageDevices", buf, 0x12u);
          }
          double v82 = __cxa_allocate_exception(0x10uLL);
          *(void *)double v82 = off_1F148A5D8;
          v82[2] = 561211770;
        }
        if (!a6)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 554;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: no qualifier for kAudioFakeDevicePropertyManageDevices", buf, 0x12u);
          }
          double v85 = __cxa_allocate_exception(0x10uLL);
          *(void *)double v85 = off_1F148A5D8;
          v85[2] = 561211770;
        }
        uint64_t v15 = @"PlugIn Custom Property";
LABEL_77:
        *(void *)a9 = v15;
        int v16 = 8;
LABEL_87:
        *a8 = v16;
        return;
      }
      goto LABEL_88;
    }
    uint64_t v34 = *((void *)this + 7);
    v87 = (char *)this + 56;
    char v88 = (*(uint64_t (**)(char *))(v34 + 16))((char *)this + 56);
    if (*((unsigned char *)this + 216)) {
      goto LABEL_98;
    }
    unint64_t v35 = a7 >> 2;
    long long v36 = (int *)*((void *)this + 18);
    unint64_t v37 = (_DWORD *)*((void *)this + 19);
    if (v37 - v36 < v35) {
      unint64_t v35 = v37 - v36;
    }
    if (v37 != v36 && !v35)
    {
      BOOL v38 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
      unsigned int v39 = 0;
      if (v38)
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 416;
        unint64_t v40 = MEMORY[0x1E4F14500];
        unint64_t v41 = "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioPlugInPropertyDeviceList to be returned";
LABEL_97:
        _os_log_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, 0x12u);
        goto LABEL_98;
      }
      goto LABEL_112;
    }
    if (!v35) {
      goto LABEL_98;
    }
    unint64_t v69 = v35;
    do
    {
      int v70 = *v36++;
      *(_DWORD *)__int16 v13 = v70;
      v13 += 4;
      --v69;
    }
    while (v69);
    goto LABEL_110;
  }
  switch(mSelector)
  {
    case 1651472419:
      uint64_t v50 = *((void *)this + 7);
      unint64_t v49 = (char *)this + 56;
      v87 = (char *)this + 56;
      char v51 = (*(uint64_t (**)(char *))(v50 + 16))((char *)this + 56);
      unint64_t v35 = a7 >> 2;
      uint64_t v52 = (int *)*((void *)v49 + 17);
      int v53 = (_DWORD *)*((void *)v49 + 18);
      if (v53 - v52 < v35) {
        unint64_t v35 = v53 - v52;
      }
      char v88 = v51;
      if (v53 != v52 && !v35)
      {
        BOOL v54 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        unsigned int v39 = 0;
        if (v54)
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 465;
          unint64_t v40 = MEMORY[0x1E4F14500];
          unint64_t v41 = "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioPlugInPropertyBoxList to be returned";
          goto LABEL_97;
        }
LABEL_112:
        *a8 = v39;
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v87);
        return;
      }
      if (!v35)
      {
LABEL_98:
        unsigned int v39 = 0;
        goto LABEL_112;
      }
      unint64_t v60 = v35;
      do
      {
        int v61 = *v52++;
        *(_DWORD *)__int16 v13 = v61;
        v13 += 4;
        --v60;
      }
      while (v60);
LABEL_110:
      unsigned int v39 = 4 * v35;
      goto LABEL_112;
    case 1668049699:
      uint64_t v56 = *((void *)this + 7);
      int v55 = (char *)this + 56;
      v87 = (char *)this + 56;
      char v88 = (*(uint64_t (**)(char *))(v56 + 16))((char *)this + 56);
      unint64_t v35 = a7 >> 2;
      long long v57 = (int *)*((void *)v55 + 14);
      if ((uint64_t)(*((void *)v55 + 15) - (void)v57) >> 2 < v35) {
        unint64_t v35 = (uint64_t)(*((void *)v55 + 15) - (void)v57) >> 2;
      }
      if (!v35)
      {
        BOOL v62 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        unsigned int v39 = 0;
        if (v62)
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 488;
          unint64_t v40 = MEMORY[0x1E4F14500];
          unint64_t v41 = "%25s:%-5d  ADS::Simulator::GetPropertyData: inDataSize too small for any of kAudioPlugInPropertyClockDev"
                "iceList to be returned";
          goto LABEL_97;
        }
        goto LABEL_112;
      }
      unint64_t v58 = v35;
      do
      {
        int v59 = *v57++;
        *(_DWORD *)__int16 v13 = v59;
        v13 += 4;
        --v58;
      }
      while (v58);
      goto LABEL_110;
    case 1668641652:
      if (a7 <= 0xB)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "ADS_Simulator.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 539;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Simulator::GetPropertyData: not enough space for the return value of kAudioObjectPropertyCustomPropertyInfoList", buf, 0x12u);
        }
        uint64_t v80 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v80 = off_1F148A5D8;
        v80[2] = 561211770;
      }
      qmemcpy(a9, "Mvedtslptsfc", 12);
      *(_DWORD *)std::string buf = *a8 - 12;
      ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, (unsigned int *)buf, a9 + 24);
      int v16 = *(_DWORD *)buf + 12;
      goto LABEL_87;
  }
LABEL_88:

  ADS::BaseObject::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1BAA9AB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

uint64_t ADS::Simulator::GetPropertyDataSize(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, int *a6)
{
  unint64_t v6 = a6;
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a4->mSelector;
  uint64_t v10 = 8;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector > 1920168546)
    {
      if (mSelector <= 1969841250)
      {
        if (mSelector == 1920168547) {
          return v10;
        }
        int v13 = 1936618861;
        goto LABEL_36;
      }
      if (mSelector != 1969841251 && mSelector != 1969841252) {
        goto LABEL_45;
      }
      return 4;
    }
    if (mSelector == 1819173229) {
      return v10;
    }
    if (mSelector == 1819569763) {
      return 4;
    }
    if (mSelector != 1870098020) {
      goto LABEL_45;
    }
    uint64_t v14 = *((void *)this + 7);
    *(void *)long long v29 = (char *)this + 56;
    v29[8] = (*(uint64_t (**)(char *))(v14 + 16))((char *)this + 56);
    if (*((unsigned char *)this + 216)) {
      goto LABEL_42;
    }
    if (!a5 || !v6)
    {
      uint64_t v10 = 4
          * (((*((_DWORD *)this + 44) - *((_DWORD *)this + 42)) >> 2)
           + ((*((_DWORD *)this + 38) - *((_DWORD *)this + 36)) >> 2)
           + ((*((_DWORD *)this + 50) - *((_DWORD *)this + 48)) >> 2));
      goto LABEL_50;
    }
    if (a5 < 4) {
      goto LABEL_42;
    }
    uint64_t v10 = 0;
    uint64_t v15 = a5 >> 2;
    while (1)
    {
      int v17 = *v6++;
      int v16 = v17;
      if (v17 == 1633841016)
      {
        unint64_t v18 = (char *)this + 200;
        uint64_t v19 = (char *)this + 192;
      }
      else
      {
        unint64_t v18 = (char *)this + 152;
        uint64_t v19 = (char *)this + 144;
        if (v16 != 1633969526)
        {
          unint64_t v18 = (char *)this + 176;
          uint64_t v19 = (char *)this + 168;
          if (v16 != 1633905771) {
            goto LABEL_32;
          }
        }
      }
      uint64_t v10 = v10 + ((*(void *)v18 - *(void *)v19) >> 2);
LABEL_32:
      if (!--v15) {
        goto LABEL_50;
      }
    }
  }
  if (mSelector <= 1684370978)
  {
    if (mSelector == 1651472419)
    {
      uint64_t v22 = *((void *)this + 7);
      uint64_t v21 = (char *)this + 56;
      *(void *)long long v29 = (char *)this + 56;
      v29[8] = (*(uint64_t (**)(char *))(v22 + 16))((char *)this + 56);
      int v23 = *((_DWORD *)v21 + 36);
      int v24 = *((_DWORD *)v21 + 34);
      goto LABEL_49;
    }
    if (mSelector == 1668049699)
    {
      uint64_t v26 = *((void *)this + 7);
      int v25 = (char *)this + 56;
      *(void *)long long v29 = (char *)this + 56;
      v29[8] = (*(uint64_t (**)(char *))(v26 + 16))((char *)this + 56);
      int v23 = *((_DWORD *)v25 + 30);
      int v24 = *((_DWORD *)v25 + 28);
      goto LABEL_49;
    }
    if (mSelector != 1668641652) {
      goto LABEL_45;
    }
    return 12 * ((*((void *)this + 4) - *((void *)this + 3)) >> 4) + 12;
  }
  if (mSelector > 1719105133)
  {
    if (mSelector == 1719105134) {
      return v10;
    }
    int v13 = 1819107691;
LABEL_36:
    if (mSelector != v13) {
      goto LABEL_45;
    }
    return v10;
  }
  if (mSelector == 1684370979)
  {
    uint64_t v20 = *((void *)this + 7);
    *(void *)long long v29 = (char *)this + 56;
    v29[8] = (*(uint64_t (**)(char *))(v20 + 16))((char *)this + 56);
    if (*((unsigned char *)this + 216))
    {
LABEL_42:
      uint64_t v10 = 0;
LABEL_50:
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v29);
      return v10;
    }
    int v23 = *((_DWORD *)this + 38);
    int v24 = *((_DWORD *)this + 36);
LABEL_49:
    uint64_t v10 = (v23 - v24) & 0xFFFFFFFC;
    goto LABEL_50;
  }
  if (mSelector == 1684371021)
  {
    if (a5 != 8)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      *(_DWORD *)long long v29 = 136315394;
      *(void *)&v29[4] = "ADS_Simulator.cpp";
      __int16 v30 = 1024;
      int v31 = 315;
      CFRange v11 = MEMORY[0x1E4F14500];
      int v12 = "%25s:%-5d  ADS::Simulator::GetPropertyDataSize: the qualifier is the wrong size for kAudioFakeDevicePropertyManageDevices";
LABEL_55:
      _os_log_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, v12, v29, 0x12u);
LABEL_56:
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    if (!a6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      *(_DWORD *)long long v29 = 136315394;
      *(void *)&v29[4] = "ADS_Simulator.cpp";
      __int16 v30 = 1024;
      int v31 = 316;
      CFRange v11 = MEMORY[0x1E4F14500];
      int v12 = "%25s:%-5d  ADS::Simulator::GetPropertyDataSize: no qualifier for kAudioFakeDevicePropertyManageDevices";
      goto LABEL_55;
    }
    return v10;
  }
LABEL_45:

  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::Simulator::IsPropertySettable(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  uint64_t result = 0;
  signed int mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector > 1969841250)
    {
      if ((mSelector - 1969841251) < 2) {
        return result;
      }
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    }
    if (mSelector != 1819173229)
    {
      BOOL v7 = mSelector == 1870098020;
      int v8 = 1920168547;
      goto LABEL_10;
    }
    return 1;
  }
  if (mSelector > 1684370978)
  {
    if (mSelector == 1684370979) {
      return result;
    }
    if (mSelector != 1684371021)
    {
      if (mSelector == 1819107691) {
        return result;
      }
      return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
    }
    return 1;
  }
  BOOL v7 = mSelector == 1651472419 || mSelector == 1668049699;
  int v8 = 1668641652;
LABEL_10:
  if (!v7 && mSelector != v8) {
    return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
  }
  return result;
}

BOOL ADS::Simulator::HasProperty(ADS::Simulator *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a4->mSelector;
  BOOL v5 = 1;
  if ((int)a4->mSelector > 1819173228)
  {
    if (mSelector <= 1969841250)
    {
      BOOL v6 = mSelector == 1819173229 || mSelector == 1870098020;
      int v7 = 1920168547;
LABEL_12:
      if (!v6 && mSelector != v7) {
        goto LABEL_22;
      }
      return v5;
    }
    if ((mSelector - 1969841251) < 2) {
      return v5;
    }
  }
  else
  {
    if (mSelector <= 1684370978)
    {
      BOOL v6 = mSelector == 1651472419 || mSelector == 1668049699;
      int v7 = 1668641652;
      goto LABEL_12;
    }
    switch(mSelector)
    {
      case 1684370979:
        return v5;
      case 1684371021:
        v10[0] = 0;
        v10[1] = 0;
        HALS_System::GetInstance(&v11, 0, v10);
        BOOL v5 = *(unsigned char *)(v11 + 1280) != 0;
        if (v12) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        }
        return v5;
      case 1819107691:
        return v5;
    }
  }
LABEL_22:

  return ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::Simulator::~Simulator(ADS::Simulator *this)
{
  ADS::Simulator::~Simulator(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void *v3;
  void *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F145C398;
  unint64_t v2 = (void *)*((void *)this + 24);
  if (v2)
  {
    *((void *)this + 25) = v2;
    operator delete(v2);
  }
  CFStringRef v3 = (void *)*((void *)this + 21);
  if (v3)
  {
    *((void *)this + 22) = v3;
    operator delete(v3);
  }
  size_t v4 = (void *)*((void *)this + 18);
  if (v4)
  {
    *((void *)this + 19) = v4;
    operator delete(v4);
  }
  CADeprecated::CAMutex::~CAMutex((ADS::Simulator *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

uint64_t ADS::BaseObject::Deactivate(uint64_t this)
{
  *(unsigned char *)(this + 48) = 0;
  return this;
}

uint64_t ADS::BaseObject::Activate(uint64_t this)
{
  *(unsigned char *)(this + 48) = 1;
  return this;
}

uint64_t Simulator_EndIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1877;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    int v9 = 560947818;
LABEL_11:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v9;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1878;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: no cycle info", (uint8_t *)&v12, 0x12u);
    }
    int v9 = 1852797029;
    goto LABEL_11;
  }
  BOOL v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1882;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: unknown device", (uint8_t *)&v12, 0x12u);
    }
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v11 = off_1F148A5D8;
    v11[2] = 560947818;
  }
  ADS::ObjectManager::ReleaseObject(v6, v7);
  return 0;
}

void sub_1BAA9B590(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9B5A8(void *a1, ADS::BaseObject *a2)
{
  if (a2)
  {
    ADS::ObjectManager::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9B388);
  }
  JUMPOUT(0x1BAA9B598);
}

void sub_1BAA9B608()
{
}

uint64_t Simulator_DoIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  v144[0] = a3;
  uint64_t v154 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)outPropertyData = 136315394;
      *(void *)&outPropertyData[4] = "ADS_Simulator.cpp";
      *(_WORD *)&outPropertyData[12] = 1024;
      *(_DWORD *)&outPropertyData[14] = 1843;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIOOperation: bad driver reference", outPropertyData, 0x12u);
    }
    int v126 = 560947818;
LABEL_141:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v126;
  }
  uint64_t v9 = a7;
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)outPropertyData = 136315394;
      *(void *)&outPropertyData[4] = "ADS_Simulator.cpp";
      *(_WORD *)&outPropertyData[12] = 1024;
      *(_DWORD *)&outPropertyData[14] = 1844;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIOOperation: no cycle info", outPropertyData, 0x12u);
    }
    int v126 = 1852797029;
    goto LABEL_141;
  }
  uint64_t v14 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v16 = v14;
  if (!v14)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)outPropertyData = 136315394;
      *(void *)&outPropertyData[4] = "ADS_Simulator.cpp";
      *(_WORD *)&outPropertyData[12] = 1024;
      *(_DWORD *)&outPropertyData[14] = 1848;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_EndIOOperation: unknown device", outPropertyData, 0x12u);
    }
    v128 = __cxa_allocate_exception(0x10uLL);
    *(void *)v128 = off_1F148A5D8;
    v128[2] = 560947818;
  }
  unsigned int v143 = a4;
  if (a5 == 1919513701)
  {
    char v34 = atomic_load((unsigned int *)(v14 + 764));
    if ((v34 & 0x10) != 0)
    {
      uint64_t v35 = *(void *)(v14 + 208);
      *(void *)outPropertyData = v14 + 208;
      outPropertyData[8] = (*(uint64_t (**)(void))(v35 + 16))();
      double v36 = *(double *)(v16 + 672);
      uint64_t v37 = *(void *)(v16 + 680);
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)outPropertyData);
      double v38 = *(double *)(v16 + 472);
      unsigned int v39 = *(_DWORD *)(v16 + 664);
      uint64_t v14 = mach_absolute_time();
      double v40 = *(double *)(v9 + 144) - (floor(1.0 / v38 * (double)(v14 - v37)) + v36 + (double)v39);
      if (v40 < 0.0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
        unint64_t v41 = *(caulk::concurrent::messenger **)(*(void *)outPropertyData + 8);
        uint64_t v42 = pthread_self();
        mach_port_t v43 = pthread_mach_thread_np(v42);
        uint64_t v44 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
        *(_DWORD *)(v44 + 16) = 0;
        *(unsigned char *)(v44 + 20) = 16;
        *(_DWORD *)(v44 + 24) = v43;
        *(void *)(v44 + 32) = "ADS_Device.cpp";
        *(_DWORD *)(v44 + 40) = 3541;
        *(double *)(v44 + 48) = v40;
        *(void *)uint64_t v44 = &unk_1F1467068;
        *(void *)(v44 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v41, (caulk::concurrent::message *)v44);
        uint64_t v14 = *(void *)&outPropertyData[8];
        if (*(void *)&outPropertyData[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&outPropertyData[8]);
        }
        *(_DWORD *)(v16 + 696) = 1;
      }
    }
    if (*(void *)(v16 + 440))
    {
      __int16 v45 = atomic_load((unsigned int *)(v16 + 764));
      if ((v45 & 0x200) != 0) {
        usleep(((double)a6 / *(double *)(v16 + 640) / 3.0 * 1000.0 * 1000.0));
      }
      if (*(unsigned char *)(v16 + 544))
      {
        uint64_t v46 = *(void *)(v16 + 208);
        uint64_t v152 = v16 + 208;
        uint64_t v47 = v9;
        char v153 = (*(uint64_t (**)(void))(v46 + 16))();
        unsigned int v48 = *(OpaqueExtAudioFile ***)(v16 + 504);
        for (unint64_t i = *(OpaqueExtAudioFile ***)(v16 + 512); v48 != i; ++v48)
        {
          uint64_t v50 = *v48;
          v144[1] = 40;
          OSStatus Property = ExtAudioFileGetProperty(v50, 0x66666D74u, &v144[1], outPropertyData);
          if (Property)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              ioData.mNumberBuffers = 136315394;
              *(void *)(&ioData.mNumberBuffers + 1) = "ADS_Device.cpp";
              LOWORD(ioData.mBuffers[0].mDataByteSize) = 1024;
              *(UInt32 *)((char *)&ioData.mBuffers[0].mDataByteSize + 2) = 1737;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::WriteOutputData: could not get the file format for the given audio file", (uint8_t *)&ioData, 0x12u);
            }
            uint64_t v125 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v125 = off_1F148A5D8;
            v125[2] = Property;
          }
          ioData.mNumberBuffers = 1;
          ioData.mBuffers[0].mNumberChannels = *(_DWORD *)&outPropertyData[28];
          ioData.mBuffers[0].mDataByteCFArrayRef Size = *(_DWORD *)&outPropertyData[24] * a6;
          ioData.mBuffers[0].mData = a8;
          OSStatus v52 = ExtAudioFileWriteAsync(v50, a6, &ioData);
          if (v52)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = "ADS_Device.cpp";
              __int16 v147 = 1024;
              int v148 = 1751;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::WriteOutputData: could not write audio buffer to file", __p, 0x12u);
            }
            int v124 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v124 = off_1F148A5D8;
            v124[2] = v52;
          }
        }
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v152);
        uint64_t v9 = v47;
        a5 = 1919513701;
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
      int v53 = **(NSObject ***)outPropertyData;
      if (*(void *)&outPropertyData[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&outPropertyData[8]);
      }
      if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
      {
        BOOL v54 = pthread_self();
        mach_port_t v55 = pthread_mach_thread_np(v54);
        *(_DWORD *)outPropertyData = 67109634;
        *(_DWORD *)&outPropertyData[4] = v55;
        *(_WORD *)&outPropertyData[8] = 2080;
        *(void *)&outPropertyData[10] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[18] = 1024;
        *(_DWORD *)&outPropertyData[20] = 1717;
        _os_log_error_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d ADS::Device::WriteOutputData - mStartCount is 0 - this means the device thinks it should not be running!!!", outPropertyData, 0x18u);
      }
    }
    goto LABEL_126;
  }
  if (a5 != 1919246692) {
    goto LABEL_126;
  }
  char v17 = atomic_load((unsigned int *)(v14 + 764));
  if ((v17 & 0x20) != 0)
  {
    uint64_t v18 = *(void *)(v14 + 208);
    *(void *)outPropertyData = v14 + 208;
    outPropertyData[8] = (*(uint64_t (**)(void))(v18 + 16))();
    double v19 = *(double *)(v16 + 672);
    uint64_t v20 = *(void *)(v16 + 680);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)outPropertyData);
    double v21 = *(double *)(v16 + 472);
    unsigned int v22 = *(_DWORD *)(v16 + 664);
    int v23 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
    double v24 = floor(1.0 / v21 * (double)((unint64_t)v23 - v20))
        + v19
        - (double)v22
        - (*(double *)(v9 + 80)
         + (double)a6);
    if (v24 < 0.0)
    {
      AMCP::Log::Scope_Registry::get(v23);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
      int v25 = *(caulk::concurrent::messenger **)(*(void *)outPropertyData + 8);
      uint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      uint64_t v28 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v28 + 16) = 0;
      *(unsigned char *)(v28 + 20) = 16;
      *(_DWORD *)(v28 + 24) = v27;
      *(void *)(v28 + 32) = "ADS_Device.cpp";
      *(_DWORD *)(v28 + 40) = 3560;
      *(double *)(v28 + 48) = v24;
      *(void *)uint64_t v28 = &unk_1F14670C0;
      *(void *)(v28 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v25, (caulk::concurrent::message *)v28);
      if (*(void *)&outPropertyData[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&outPropertyData[8]);
      }
      *(_DWORD *)(v16 + 700) = 1;
    }
  }
  CFStringRef v29 = *(const __CFString **)(v16 + 600);
  if (!v29)
  {
LABEL_145:
    v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v129, "Could not construct");
    __cxa_throw(v129, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)outPropertyData, v29);
  if (outPropertyData[23] >= 0) {
    uint64_t v30 = outPropertyData[23];
  }
  else {
    uint64_t v30 = *(void *)&outPropertyData[8];
  }
  if ((outPropertyData[23] & 0x80000000) == 0)
  {
    if (v30) {
      goto LABEL_17;
    }
LABEL_43:
    double v56 = *(double *)(v9 + 80);
    uint64_t v57 = *(void *)(v16 + 208);
    *(void *)std::string __p = v16 + 208;
    uint64_t v141 = v9;
    __p[8] = (*(uint64_t (**)(void))(v57 + 16))();
    unint64_t v58 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)v144[0]);
    v139 = v58;
    if (!v58)
    {
LABEL_125:
      ADS::ObjectManager::ReleaseObject(v139, v59);
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)__p);
      uint64_t v9 = v141;
      goto LABEL_126;
    }
    if (!*(void *)(v16 + 440))
    {
      AMCP::Log::Scope_Registry::get(v58);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
      mach_port_t v93 = **(NSObject ***)outPropertyData;
      if (*(void *)&outPropertyData[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&outPropertyData[8]);
      }
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        int v94 = pthread_self();
        mach_port_t v95 = pthread_mach_thread_np(v94);
        OS::CF::String::AsStdString((std::string *)&ioData, v16 + 88);
        mach_port_t v96 = SHIBYTE(ioData.mBuffers[0].mData) >= 0 ? &ioData : *(AudioBufferList **)&ioData.mNumberBuffers;
        *(_DWORD *)outPropertyData = 67109890;
        *(_DWORD *)&outPropertyData[4] = v95;
        *(_WORD *)&outPropertyData[8] = 2080;
        *(void *)&outPropertyData[10] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[18] = 1024;
        *(_DWORD *)&outPropertyData[20] = 1599;
        *(_WORD *)&outPropertyData[24] = 2080;
        *(void *)&outPropertyData[26] = v96;
        _os_log_error_impl(&dword_1BAA78000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d ADS::Device::ReadInputData - mStartCount is 0 - this means the device thinks it should not be running: %s", outPropertyData, 0x22u);
        if (SHIBYTE(ioData.mBuffers[0].mData) < 0) {
          operator delete(*(void **)&ioData.mNumberBuffers);
        }
      }
      goto LABEL_125;
    }
    int v60 = *((_DWORD *)v58 + 17);
    uint64_t v62 = *((unsigned int *)v58 + 21);
    int v61 = *((_DWORD *)v58 + 22);
    bzero(a8, (*((_DWORD *)v58 + 20) * a6));
    if (v60)
    {
      if (v61 == 32)
      {
        if (a6)
        {
          unsigned int v107 = 0;
          unsigned int v108 = 0;
          float v109 = v56;
          do
          {
            if (v62)
            {
              float v110 = *(double *)(v16 + 640);
              float v111 = sin((float)(v109 + (float)v108) * 2764.60154 / v110);
              unsigned int v112 = v107;
              uint64_t v113 = v62;
              do
              {
                *((float *)a8 + v112++) = v111;
                --v113;
              }
              while (v113);
            }
            ++v108;
            v107 += v62;
          }
          while (v108 != a6);
        }
        goto LABEL_125;
      }
      if (v61 == 64)
      {
        if (a6)
        {
          unsigned int v97 = 0;
          int v98 = 0;
          double v99 = 0.0;
          do
          {
            if (v62)
            {
              unsigned int v100 = v97;
              uint64_t v101 = v62;
              do
              {
                *((long double *)a8 + v100++) = sin((v56 + v99) * 2764.60154 / *(double *)(v16 + 640));
                --v101;
              }
              while (v101);
            }
            double v99 = v99 + 1.0;
            ++v98;
            v97 += v62;
          }
          while (v98 != a6);
        }
        goto LABEL_125;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outPropertyData = 136315394;
        *(void *)&outPropertyData[4] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[12] = 1024;
        *(_DWORD *)&outPropertyData[14] = 1617;
        v133 = MEMORY[0x1E4F14500];
        v134 = "%25s:%-5d  Reading input currently only supports 32- and 64-bit floats";
LABEL_159:
        _os_log_impl(&dword_1BAA78000, v133, OS_LOG_TYPE_ERROR, v134, outPropertyData, 0x12u);
      }
    }
    else if ((v60 & 4) != 0)
    {
      if (v61 == 8)
      {
        if (a6)
        {
          unsigned int v118 = 0;
          int v119 = 0;
          do
          {
            if (v62)
            {
              unsigned int v120 = v118;
              uint64_t v121 = v62;
              do
              {
                *((unsigned char *)a8 + v120++) = (int)sin((double)(v119 + (int)v56)* 2764.60154/ (double)(int)*(double *)(v16 + 640));
                --v121;
              }
              while (v121);
            }
            ++v119;
            v118 += v62;
          }
          while (v119 != a6);
        }
        goto LABEL_125;
      }
      if (v61 == 16)
      {
        if (a6)
        {
          unsigned int v102 = 0;
          int v103 = 0;
          do
          {
            if (v62)
            {
              int v104 = (int)sin((double)(v103 + (int)v56) * 2764.60154 / (double)(int)*(double *)(v16 + 640));
              unsigned int v105 = v102;
              uint64_t v106 = v62;
              do
              {
                *((_WORD *)a8 + v105++) = v104;
                --v106;
              }
              while (v106);
            }
            ++v103;
            v102 += v62;
          }
          while (v103 != a6);
        }
        goto LABEL_125;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outPropertyData = 136315394;
        *(void *)&outPropertyData[4] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[12] = 1024;
        *(_DWORD *)&outPropertyData[14] = 1632;
        v133 = MEMORY[0x1E4F14500];
        v134 = "%25s:%-5d  Reading input currently only supports 16- and 8-bit SInts";
        goto LABEL_159;
      }
    }
    else
    {
      if (v61 == 8)
      {
        if (a6)
        {
          unsigned int v114 = 0;
          int v115 = 0;
          do
          {
            if (v62)
            {
              unsigned int v116 = v114;
              uint64_t v117 = v62;
              do
              {
                *((unsigned char *)a8 + v116++) = (int)sin((double)(v115 + (int)v56)* 2764.60154/ (double)(int)*(double *)(v16 + 640));
                --v117;
              }
              while (v117);
            }
            ++v115;
            v114 += v62;
          }
          while (v115 != a6);
        }
        goto LABEL_125;
      }
      if (v61 == 16)
      {
        if (a6)
        {
          unsigned int v63 = 0;
          int v64 = 0;
          do
          {
            if (v62)
            {
              int v65 = (int)sin((double)(v64 + (int)v56)* 2764.60154/ (double)(int)*(double *)(v16 + 640));
              unsigned int v66 = v63;
              uint64_t v67 = v62;
              do
              {
                *((_WORD *)a8 + v66++) = v65;
                --v67;
              }
              while (v67);
            }
            ++v64;
            v63 += v62;
          }
          while (v64 != a6);
        }
        goto LABEL_125;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outPropertyData = 136315394;
        *(void *)&outPropertyData[4] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[12] = 1024;
        *(_DWORD *)&outPropertyData[14] = 1647;
        v133 = MEMORY[0x1E4F14500];
        v134 = "%25s:%-5d  Reading input currently only supports 16- and 8-bit UInts";
        goto LABEL_159;
      }
    }
    v135 = __cxa_allocate_exception(0x10uLL);
    *(void *)v135 = off_1F148A5D8;
    v135[2] = 560226676;
  }
  operator delete(*(void **)outPropertyData);
  if (!v30) {
    goto LABEL_43;
  }
LABEL_17:
  CFStringRef v31 = *(const __CFString **)(v16 + 600);
  if (!v31) {
    goto LABEL_145;
  }
  uint64_t v32 = (AMCP::Log::Scope_Registry *)applesauce::CF::convert_to<std::string,0>((uint64_t)outPropertyData, v31);
  if (outPropertyData[23] >= 0) {
    uint64_t v33 = outPropertyData[23];
  }
  else {
    uint64_t v33 = *(void *)&outPropertyData[8];
  }
  if ((outPropertyData[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)outPropertyData);
    if (!v33) {
      goto LABEL_126;
    }
  }
  else if (!v33)
  {
    goto LABEL_126;
  }
  if (*(void *)(v16 + 440))
  {
    uint64_t v68 = *(void *)(v16 + 208);
    *(void *)&v144[1] = v16 + 208;
    char v145 = 0;
    uint64_t v142 = v9;
    char v145 = (*(uint64_t (**)(void))(v68 + 16))();
    uint64_t v69 = ADS::ObjectManager::CopyObjectByObjectID((ADS::ObjectManager *)v144[0]);
    AudioBufferList ioData = *(AudioBufferList *)(v69 + 56);
    int v70 = *(_DWORD *)(v69 + 80);
    int v140 = *(_DWORD *)(v69 + 84);
    v138 = (ADS::ObjectManager *)v69;
    uint64_t v71 = *(void *)(v69 + 88);
    int v72 = v70 * a6;
    bzero(a8, (v70 * a6));
    uint64_t v73 = v16 + 608;
    std::string::size_type v74 = (ExtAudioFileRef *)(v16 + 616);
    if (!*(void *)(v16 + 616))
    {
      uint64_t v136 = v71;
      CFStringRef v75 = *(const __CFString **)(v16 + 600);
      if (!v75)
      {
        v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v131, "Could not construct");
        __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      outExtAudioFile = (ExtAudioFileRef *)(v16 + 616);
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v75);
      int v76 = v149;
      v77 = *(const char **)__p;
      CAExtAudioFile::Close((CAExtAudioFile *)(v16 + 608));
      if (v76 >= 0) {
        int v78 = __p;
      }
      else {
        int v78 = v77;
      }
      CFIndex v79 = strlen(v78);
      CFURLRef v80 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF88], (const UInt8 *)v78, v79, 0);
      CFURLRef v81 = v80;
      if (!v80)
      {
        if (os_log_type_enabled(0, OS_LOG_TYPE_ERROR))
        {
          CAX4CCString::CAX4CCString((CAX4CCString *)&v152);
          *(_DWORD *)outPropertyData = 136315906;
          *(void *)&outPropertyData[4] = "CAExtAudioFile.h";
          *(_WORD *)&outPropertyData[12] = 1024;
          *(_DWORD *)&outPropertyData[14] = 42;
          *(_WORD *)&outPropertyData[18] = 2080;
          *(void *)&outPropertyData[20] = &v152;
          *(_WORD *)&outPropertyData[28] = 2080;
          *(void *)&outPropertyData[30] = "couldn't convert path to CFURLRef";
          _os_log_impl(&dword_1BAA78000, 0, OS_LOG_TYPE_ERROR, "%25s:%-5d about to throw %s: %s", outPropertyData, 0x26u);
        }
        v132 = (CAXException *)__cxa_allocate_exception(0x110uLL);
        CAXException::CAXException(v132, "couldn't convert path to CFURLRef", -1);
      }
      uint64_t v82 = ExtAudioFileOpenURL(v80, outExtAudioFile);
      CFRelease(v81);
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v73 + 16))(v16 + 608, v82, "ExtAudioFileOpenURL");
      if (v149 < 0) {
        operator delete(*(void **)__p);
      }
      *(AudioBufferList *)outPropertyData = ioData;
      *(_DWORD *)&outPropertyData[24] = v70;
      *(_DWORD *)&outPropertyData[28] = v140;
      std::string::size_type v74 = (ExtAudioFileRef *)(v16 + 616);
      *(void *)&outPropertyData[32] = v136;
      uint64_t v83 = ExtAudioFileSetProperty(*outExtAudioFile, 0x63666D74u, 0x28u, outPropertyData);
      (*(void (**)(uint64_t, uint64_t, const char *, uint64_t))(*(void *)v73 + 24))(v16 + 608, v83, "ExtAudioFileSetProperty", 1667657076);
    }
    mach_port_t v84 = malloc_type_calloc(1uLL, 0x18uLL, 0xC517D68uLL);
    double v85 = v84;
    uint64_t v9 = v142;
    if (!v84)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)outPropertyData = 136315394;
        *(void *)&outPropertyData[4] = "ADS_Device.cpp";
        *(_WORD *)&outPropertyData[12] = 1024;
        *(_DWORD *)&outPropertyData[14] = 1688;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::inputFileBasedHardwareIOProc: couldn't allocate AudioBufferList", outPropertyData, 0x12u);
      }
      v130 = __cxa_allocate_exception(0x10uLL);
      *(void *)v130 = off_1F148A5D8;
      v130[2] = 1852797029;
    }
    *(_DWORD *)mach_port_t v84 = 1;
    v84[2] = a8;
    *((_DWORD *)v84 + 2) = v140;
    *((_DWORD *)v84 + 3) = v72;
    *(_DWORD *)outPropertyData = a6;
    uint64_t v86 = ExtAudioFileRead(*v74, (UInt32 *)outPropertyData, (AudioBufferList *)v84);
    (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v73 + 16))(v16 + 608, v86, "ExtAudioFileRead");
    if (!*(_DWORD *)outPropertyData)
    {
      uint64_t v87 = ExtAudioFileSeek(*v74, 0);
      (*(void (**)(uint64_t, uint64_t, const char *))(*(void *)v73 + 16))(v16 + 608, v87, "ExtAudioFileSeek");
    }
    MEMORY[0x1C1859840](v85, 0x1080C404ACF7207);
    ADS::ObjectManager::ReleaseObject(v138, v88);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v144[1]);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)outPropertyData, "com.apple.coreaudio", "AMCP");
    mach_port_t v89 = **(NSObject ***)outPropertyData;
    if (*(void *)&outPropertyData[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&outPropertyData[8]);
    }
    if (os_log_type_enabled(v89, OS_LOG_TYPE_ERROR))
    {
      uint64_t v90 = pthread_self();
      mach_port_t v91 = pthread_mach_thread_np(v90);
      OS::CF::String::AsStdString((std::string *)&ioData, v16 + 88);
      v92 = SHIBYTE(ioData.mBuffers[0].mData) >= 0 ? &ioData : *(AudioBufferList **)&ioData.mNumberBuffers;
      *(_DWORD *)outPropertyData = 67109890;
      *(_DWORD *)&outPropertyData[4] = v91;
      *(_WORD *)&outPropertyData[8] = 2080;
      *(void *)&outPropertyData[10] = "ADS_Device.cpp";
      *(_WORD *)&outPropertyData[18] = 1024;
      *(_DWORD *)&outPropertyData[20] = 1662;
      *(_WORD *)&outPropertyData[24] = 2080;
      *(void *)&outPropertyData[26] = v92;
      _os_log_error_impl(&dword_1BAA78000, v89, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d ADS::Device::inputFileBasedHardwareIOProc - mStartCount is 0 - this means the device thinks it should not be running: %s", outPropertyData, 0x22u);
      if (SHIBYTE(ioData.mBuffers[0].mData) < 0) {
        operator delete(*(void **)&ioData.mNumberBuffers);
      }
    }
  }
LABEL_126:
  v122 = *(void (**)(void, void, uint64_t, uint64_t, uint64_t, void *, uint64_t))(v16 + 560);
  if (v122) {
    v122(v144[0], v143, a5, a6, v9, a8, a9);
  }
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v16, v15);
  return 0;
}

void sub_1BAA9CA38(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ADS::ObjectManager *a11, ADS::ObjectManager *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,long long buf,long long a29)
{
  if (a2)
  {
    __cxa_free_exception(v30);
    if (a22 < 0) {
      operator delete(__p);
    }
    ADS::ObjectManager::ReleaseObject(a11, v33);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a15);
    if (a2 == 3)
    {
      uint64_t v35 = __cxa_begin_catch(a1);
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = (*(uint64_t (**)(_DWORD *))(*(void *)v35 + 16))(v35);
        LODWORD(buf) = 136315650;
        *(void *)((char *)&buf + 4) = "ADS_Device.cpp";
        WORD6(buf) = 1024;
        *(_DWORD *)((char *)&buf + 14) = 1706;
        WORD1(a29) = 2080;
        *(void *)((char *)&a29 + 4) = v36;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::inputFileBasedHardwareIOProc error in CAExtAudioFile: %s", (uint8_t *)&buf, 0x1Cu);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      int v38 = v35[66];
      *(void *)exception = off_1F148A5D8;
      exception[2] = v38;
    }
    ADS::ObjectManager::ReleaseObject(v29, v34);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9C34CLL);
  }
  JUMPOUT(0x1BAA9CCB0);
}

void sub_1BAA9CC90(void *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    ADS::ObjectManager::ReleaseObject(v2, v4);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9C34CLL);
  }
  JUMPOUT(0x1BAA9CCB0);
}

void sub_1BAA9CCA8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9CCC0(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAA9CD14);
  }
  JUMPOUT(0x1BAA9CCB0);
}

void sub_1BAA9CCD4(void *a1, int a2)
{
  if (a2)
  {
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v3 - 160));
    ADS::ObjectManager::ReleaseObject(v2, v5);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9C34CLL);
  }
  JUMPOUT(0x1BAA9CCB0);
}

void sub_1BAA9CD00(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAA9CD0CLL);
  }
  JUMPOUT(0x1BAA9CCB0);
}

void sub_1BAA9CD40()
{
}

uint64_t Simulator_BeginIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1697;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_BeginIOOperation: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    int v9 = 560947818;
LABEL_11:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v9;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1698;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_BeginIOOperation: no cycle info", (uint8_t *)&v12, 0x12u);
    }
    int v9 = 1852797029;
    goto LABEL_11;
  }
  BOOL v6 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1702;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_BeginIOOperation: unknown device", (uint8_t *)&v12, 0x12u);
    }
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v11 = off_1F148A5D8;
    v11[2] = 560947818;
  }
  ADS::ObjectManager::ReleaseObject(v6, v7);
  return 0;
}

void sub_1BAA9CF9C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9CFB4(void *a1, ADS::BaseObject *a2)
{
  if (a2)
  {
    ADS::ObjectManager::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9CD94);
  }
  JUMPOUT(0x1BAA9CFA4);
}

void sub_1BAA9D014()
{
}

uint64_t Simulator_WillDoIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, int a4, BOOL *a5, unsigned char *a6)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      double v19 = "ADS_Simulator.cpp";
      __int16 v20 = 1024;
      int v21 = 1656;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_WillDoIOOperation: bad driver reference", (uint8_t *)&v18, 0x12u);
    }
    int v13 = 560947818;
LABEL_19:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v13;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      double v19 = "ADS_Simulator.cpp";
      __int16 v20 = 1024;
      int v21 = 1657;
      __int16 v14 = MEMORY[0x1E4F14500];
      int v15 = "%25s:%-5d  Simulator_WillDoIOOperation: no place to put the will-do return value";
LABEL_17:
      _os_log_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, v15, (uint8_t *)&v18, 0x12u);
    }
LABEL_18:
    int v13 = 1852797029;
    goto LABEL_19;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      double v19 = "ADS_Simulator.cpp";
      __int16 v20 = 1024;
      int v21 = 1658;
      __int16 v14 = MEMORY[0x1E4F14500];
      int v15 = "%25s:%-5d  Simulator_WillDoIOOperation: no place to put the in-place return value";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  int v9 = (ADS::ObjectManager *)ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v18 = 136315394;
      double v19 = "ADS_Simulator.cpp";
      __int16 v20 = 1024;
      int v21 = 1662;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_WillDoIOOperation: unknown device", (uint8_t *)&v18, 0x12u);
    }
    char v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v17 = off_1F148A5D8;
    _OWORD v17[2] = 560947818;
  }
  if (a4 == 1919246692)
  {
    BOOL v11 = 1;
  }
  else
  {
    BOOL v11 = 1;
    if (a4 != 1919513701) {
      BOOL v11 = *((void *)v9 + 70) != 0;
    }
  }
  *a5 = v11;
  *a6 = 1;
  ADS::ObjectManager::ReleaseObject(v9, v10);
  return 0;
}

void sub_1BAA9D324(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9D33C(void *a1, ADS::BaseObject *a2)
{
  if (a2)
  {
    ADS::ObjectManager::ReleaseObject(0, a2);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9D0C0);
  }
  JUMPOUT(0x1BAA9D32CLL);
}

void sub_1BAA9D39C()
{
}

uint64_t Simulator_GetZeroTimeStamp(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, double *a4, void *a5, void *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)&v35[4] = "ADS_Simulator.cpp";
      __int16 v36 = 1024;
      int v37 = 1620;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetZeroTimeStamp: bad driver reference", v35, 0x12u);
    }
    int v30 = 560947818;
LABEL_32:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v30;
  }
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    *(_DWORD *)uint64_t v35 = 136315394;
    *(void *)&v35[4] = "ADS_Simulator.cpp";
    __int16 v36 = 1024;
    int v37 = 1621;
    CFStringRef v31 = MEMORY[0x1E4F14500];
    uint64_t v32 = "%25s:%-5d  Simulator_GetZeroTimeStamp: no place to put the sample time";
LABEL_30:
    _os_log_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, v32, v35, 0x12u);
    goto LABEL_31;
  }
  if (!a5)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_31;
    }
    *(_DWORD *)uint64_t v35 = 136315394;
    *(void *)&v35[4] = "ADS_Simulator.cpp";
    __int16 v36 = 1024;
    int v37 = 1622;
    CFStringRef v31 = MEMORY[0x1E4F14500];
    uint64_t v32 = "%25s:%-5d  Simulator_GetZeroTimeStamp: no place to put the host time";
    goto LABEL_30;
  }
  if (!a6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)&v35[4] = "ADS_Simulator.cpp";
      __int16 v36 = 1024;
      int v37 = 1623;
      CFStringRef v31 = MEMORY[0x1E4F14500];
      uint64_t v32 = "%25s:%-5d  Simulator_GetZeroTimeStamp: no place to put the seed";
      goto LABEL_30;
    }
LABEL_31:
    int v30 = 1852797029;
    goto LABEL_32;
  }
  uint64_t v9 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v11 = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v35 = 136315394;
      *(void *)&v35[4] = "ADS_Simulator.cpp";
      __int16 v36 = 1024;
      int v37 = 1627;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetZeroTimeStamp: unknown device", v35, 0x12u);
    }
    char v34 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v34 = off_1F148A5D8;
    v34[2] = 560947818;
  }
  char v12 = atomic_load((unsigned int *)(v9 + 764));
  if ((v12 & 4) != 0)
  {
    *(_OWORD *)(v9 + 672) = 0u;
    *a4 = 0.0;
    *a5 = 0;
    *(void *)(v9 + 688) = 0;
    *a6 = 0;
    *(void *)(v9 + 4++*(_DWORD *)(this + 56) = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v9 + 208);
    *(void *)uint64_t v35 = v9 + 208;
    v35[8] = (*(uint64_t (**)(uint64_t))(v13 + 16))(v9 + 208);
    uint64_t v14 = mach_absolute_time();
    uint64_t v15 = *(unsigned int *)(v11 + 660);
    double v16 = *(double *)(v11 + 472) * (double)v15;
    unint64_t v17 = *(void *)(v11 + 448);
    uint64_t v18 = *(void *)(v11 + 464);
    if (v18 + (unint64_t)(v16 * (double)(v17 + 1)) <= v14)
    {
      uint64_t v19 = *(void *)(v11 + 456) + 1;
      *(void *)(v11 + 448) = v17 + 1;
      *(void *)(v11 + 4++*(_DWORD *)(this + 56) = v19;
      ++v17;
    }
    else
    {
      uint64_t v19 = *(void *)(v11 + 456);
    }
    double v20 = (double)(unint64_t)(v19 * v15);
    *(double *)(v11 + 672) = v20;
    *a4 = v20;
    if (*(_DWORD *)(v11 + 624))
    {
      LODWORD(v20) = *(_DWORD *)(v11 + 628);
      double v21 = (double)*(unint64_t *)&v20;
    }
    else
    {
      double v21 = 0.0;
    }
    double v22 = v21 + *(double *)(v11 + 672);
    *(double *)(v11 + 672) = v22;
    *a4 = v22;
    uint64_t v23 = v18 + (unint64_t)(v16 * (double)v17);
    *(void *)(v11 + 680) = v23;
    *a5 = v23;
    *a6 = *(void *)(v11 + 688);
    if (*(void *)(v11 + 448) == 2)
    {
      double v24 = (unsigned int *)(v11 + 764);
      char v25 = atomic_load((unsigned int *)(v11 + 764));
      if ((v25 & 8) != 0)
      {
        *(void *)(v11 + 4++*(_DWORD *)(this + 56) = 0;
        *a4 = 0.0;
        unsigned int v26 = atomic_load(v24);
        atomic_store(v26 & 0xFFFFFFF7, v24);
      }
      __int16 v27 = atomic_load(v24);
      if ((v27 & 0x800) != 0)
      {
        *(void *)(v11 + 688) = 1;
        *a6 = 1;
        unsigned int v28 = atomic_load((unsigned int *)(v11 + 764));
        atomic_store(v28 & 0xFFFFF7FF, (unsigned int *)(v11 + 764));
      }
    }
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v35);
  }
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v11, v10);
  return 0;
}

void sub_1BAA9D828(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
    ADS::ObjectManager::ReleaseObject(v2, v4);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9D56CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAA9D8AC()
{
}

uint64_t Simulator_StopIO(_UNKNOWN **a1, ADS::ObjectManager *this)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      char v25 = "ADS_Simulator.cpp";
      __int16 v26 = 1024;
      int v27 = 1583;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StopIO: bad driver reference", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v2 = ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      char v25 = "ADS_Simulator.cpp";
      __int16 v26 = 1024;
      int v27 = 1587;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StopIO: unknown device", buf, 0x12u);
    }
    unint64_t v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)unint64_t v17 = off_1F148A5D8;
    _OWORD v17[2] = 560947818;
  }
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v22 = v2 + 120;
  char v23 = (*(uint64_t (**)(void))(v3 + 16))();
  uint64_t v4 = *(void *)(v2 + 208);
  uint64_t v20 = v2 + 208;
  char v21 = (*(uint64_t (**)(uint64_t))(v4 + 16))(v2 + 208);
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(v2 + 436));
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      char v25 = "ADS_Device.cpp";
      __int16 v26 = 1024;
      int v27 = 1335;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StopIO: config change is in progress, cannot start IO", buf, 0x12u);
    }
    int v18 = 1852990585;
LABEL_31:
    uint64_t v19 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v19 = off_1F148A5D8;
    v19[2] = v18;
  }
  uint64_t v6 = *(void *)(v2 + 440);
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315394;
      char v25 = "ADS_Device.cpp";
      __int16 v26 = 1024;
      int v27 = 1337;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StopIO: failed to stop because IO was not running", buf, 0x12u);
    }
    int v18 = 1852797029;
    goto LABEL_31;
  }
  uint64_t v7 = v6 - 1;
  *(void *)(v2 + 440) = v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(v2 + 8);
      *(_DWORD *)std::string buf = 136315650;
      char v25 = "ADS_Device.cpp";
      __int16 v26 = 1024;
      int v27 = 1341;
      __int16 v28 = 1024;
      int v29 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %d stopping IO.\n", buf, 0x18u);
    }
    uint64_t v9 = *(ExtAudioFileRef **)(v2 + 504);
    uint64_t v10 = *(ExtAudioFileRef **)(v2 + 512);
    if (v9 != v10)
    {
      do
      {
        OSStatus v11 = ExtAudioFileDispose(*v9);
        if (v11)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            char v25 = "ADS_Device.cpp";
            __int16 v26 = 1024;
            int v27 = 1345;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StopIO: could not dispose of given ExtAudioFileRef", buf, 0x12u);
          }
          uint64_t v15 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v15 = off_1F148A5D8;
          void v15[2] = v11;
        }
        ++v9;
      }
      while (v9 != v10);
      uint64_t v9 = *(ExtAudioFileRef **)(v2 + 504);
    }
    *(void *)(v2 + 512) = v9;
  }
  char v12 = atomic_load((unsigned int *)(v2 + 764));
  if (v12 < 0) {
    usleep(0x2625A0u);
  }
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v20);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v22);
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v2, v13);
  return 0;
}

void sub_1BAA9DDBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9DDD4(void *a1, int a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a2)
  {
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
    ADS::ObjectManager::ReleaseObject(v4, v6);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9DA50);
  }
  JUMPOUT(0x1BAA9DDC4);
}

void sub_1BAA9DE6C()
{
}

uint64_t Simulator_StartIO(_UNKNOWN **a1, ADS::ObjectManager *this)
{
  uint64_t v102 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "ADS_Simulator.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1549;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StartIO: bad driver reference", (uint8_t *)&buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v2 = ADS::ObjectManager::CopyObjectByObjectID(this);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "ADS_Simulator.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1553;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_StartIO: unknown device", (uint8_t *)&buf, 0x12u);
    }
    CFStringRef v75 = __cxa_allocate_exception(0x10uLL);
    *(void *)CFStringRef v75 = off_1F148A5D8;
    v75[2] = 560947818;
  }
  uint64_t v3 = *(void *)(v2 + 120);
  uint64_t v79 = v2 + 120;
  char v80 = (*(uint64_t (**)(void))(v3 + 16))();
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(v2 + 436));
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1279;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StartIO: config change is in progress, cannot start IO", (uint8_t *)&buf, 0x12u);
    }
    int v6 = 1852990585;
    goto LABEL_137;
  }
  uint64_t v5 = *(void *)(v2 + 440);
  if (!v5)
  {
    uint64_t v7 = (unsigned int *)(v2 + 764);
    char v8 = atomic_load((unsigned int *)(v2 + 764));
    if ((v8 & 2) == 0) {
      goto LABEL_10;
    }
    unsigned int v76 = atomic_load(v7);
    atomic_store(v76 & 0xFFFFFFFD, v7);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      OS::CF::String::AsStdString(&v95, v2 + 88);
      v77 = (v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v95
          : (std::string *)v95.__r_.__value_.__r.__words[0];
      LODWORD(buf.mSampleRate) = 136315650;
      *(void *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1293;
      HIWORD(buf.mBytesPerPacket) = 2080;
      *(void *)&buf.mFramesPerPacket = v77;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  %s: Neglecting to start IO due to Device Behavior", (uint8_t *)&buf, 0x1Cu);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v95.__r_.__value_.__l.__data_);
      }
    }
    int v6 = 2003329396;
LABEL_137:
    int v78 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v78 = off_1F148A5D8;
    v78[2] = v6;
  }
  if (v5 == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1282;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::Device::StartIO: failed to start because the ref count was maxxed out already", (uint8_t *)&buf, 0x12u);
    }
    int v6 = 1852797029;
    goto LABEL_137;
  }
LABEL_10:
  char v9 = atomic_load((unsigned int *)(v2 + 764));
  if (v9 < 0) {
    usleep(0x2625A0u);
  }
  uint64_t v10 = *(void *)(v2 + 440);
  *(void *)(v2 + 440) = v10 + 1;
  if (!v10)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      UInt32 v13 = *(_DWORD *)(v2 + 8);
      LODWORD(buf.mSampleRate) = 136315650;
      *(void *)((char *)&buf.mSampleRate + 4) = "ADS_Device.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 1307;
      HIWORD(buf.mBytesPerPacket) = 1024;
      buf.mFramesPerPacket = v13;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Device %d starting IO.\n", (uint8_t *)&buf, 0x18u);
    }
    *(void *)(v2 + 448) = 0;
    *(void *)(v2 + 4++*(_DWORD *)(this + 56) = 0;
    if (*(unsigned char *)(v2 + 545))
    {
      uint64_t v14 = *(void *)(v2 + 552);
      *(void *)(v2 + 448) = v14;
      *(void *)(v2 + 4++*(_DWORD *)(this + 56) = v14;
    }
    *(void *)(v2 + 696) = 0;
    *(void *)(v2 + 464) = mach_absolute_time();
    *(void *)(v2 + 688) = 0;
    if (*(unsigned char *)(v2 + 544))
    {
      double v16 = *(unsigned int **)(v2 + 384);
      uint64_t v15 = *(unsigned int **)(v2 + 392);
      if (v16 != v15)
      {
        CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF88];
        while (1)
        {
          int v18 = (ADS::ObjectManager *)*v16;
          uint64_t v98 = v2 + 208;
          char v99 = (*(uint64_t (**)(uint64_t))(*(void *)(v2 + 208) + 16))(v2 + 208);
          uint64_t v19 = ADS::ObjectManager::CopyObjectByObjectID(v18);
          long long v20 = *(_OWORD *)(v19 + 72);
          *(_OWORD *)&buf.mSampleRate = *(_OWORD *)(v19 + 56);
          *(_OWORD *)&buf.mBytesPerPacket = v20;
          *(void *)&buf.mBitsPerChannel = *(void *)(v19 + 88);
          time_t v96 = 0;
          ExtAudioFileRef outExtAudioFile = 0;
          time_t v96 = time(0);
          char v21 = localtime(&v96);
          std::to_string(&v86, v21->tm_year + 1900);
          uint64_t v22 = std::string::append(&v86, "_", 1uLL);
          long long v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
          v87.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v23;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          v22->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v85, v21->tm_mon + 1);
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            double v24 = &v85;
          }
          else {
            double v24 = (std::string *)v85.__r_.__value_.__r.__words[0];
          }
          if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v85.__r_.__value_.__l.__size_;
          }
          __int16 v26 = std::string::append(&v87, (const std::string::value_type *)v24, size);
          long long v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
          v88.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v27;
          v26->__r_.__value_.__l.__size_ = 0;
          v26->__r_.__value_.__r.__words[2] = 0;
          v26->__r_.__value_.__r.__words[0] = 0;
          __int16 v28 = std::string::append(&v88, "_", 1uLL);
          long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          v89.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v89.__r_.__value_.__l.__data_ = v29;
          v28->__r_.__value_.__l.__size_ = 0;
          v28->__r_.__value_.__r.__words[2] = 0;
          v28->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v84, v21->tm_mday);
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v30 = &v84;
          }
          else {
            uint64_t v30 = (std::string *)v84.__r_.__value_.__r.__words[0];
          }
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v31 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v31 = v84.__r_.__value_.__l.__size_;
          }
          uint64_t v32 = std::string::append(&v89, (const std::string::value_type *)v30, v31);
          long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
          v90.__r_.__value_.__r.__words[2] = v32->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v90.__r_.__value_.__l.__data_ = v33;
          v32->__r_.__value_.__l.__size_ = 0;
          v32->__r_.__value_.__r.__words[2] = 0;
          v32->__r_.__value_.__r.__words[0] = 0;
          char v34 = std::string::append(&v90, "_", 1uLL);
          long long v35 = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
          v91.__r_.__value_.__r.__words[2] = v34->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v35;
          v34->__r_.__value_.__l.__size_ = 0;
          v34->__r_.__value_.__r.__words[2] = 0;
          v34->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v83, v21->tm_hour);
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            __int16 v36 = &v83;
          }
          else {
            __int16 v36 = (std::string *)v83.__r_.__value_.__r.__words[0];
          }
          if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v37 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v37 = v83.__r_.__value_.__l.__size_;
          }
          uint64_t v38 = std::string::append(&v91, (const std::string::value_type *)v36, v37);
          long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
          v92.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v39;
          v38->__r_.__value_.__l.__size_ = 0;
          v38->__r_.__value_.__r.__words[2] = 0;
          v38->__r_.__value_.__r.__words[0] = 0;
          double v40 = std::string::append(&v92, ".", 1uLL);
          long long v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          v93.__r_.__value_.__r.__words[2] = v40->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v82, v21->tm_min);
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v42 = &v82;
          }
          else {
            uint64_t v42 = (std::string *)v82.__r_.__value_.__r.__words[0];
          }
          if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v43 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v43 = v82.__r_.__value_.__l.__size_;
          }
          uint64_t v44 = std::string::append(&v93, (const std::string::value_type *)v42, v43);
          long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
          v94.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v45;
          v44->__r_.__value_.__l.__size_ = 0;
          v44->__r_.__value_.__r.__words[2] = 0;
          v44->__r_.__value_.__r.__words[0] = 0;
          uint64_t v46 = std::string::append(&v94, ".", 1uLL);
          long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
          v100.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v47;
          v46->__r_.__value_.__l.__size_ = 0;
          v46->__r_.__value_.__r.__words[2] = 0;
          v46->__r_.__value_.__r.__words[0] = 0;
          std::to_string(&v81, v21->tm_sec);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unsigned int v48 = &v81;
          }
          else {
            unsigned int v48 = (std::string *)v81.__r_.__value_.__r.__words[0];
          }
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = v81.__r_.__value_.__l.__size_;
          }
          uint64_t v50 = std::string::append(&v100, (const std::string::value_type *)v48, v49);
          long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
          v95.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v95.__r_.__value_.__l.__data_ = v51;
          v50->__r_.__value_.__l.__size_ = 0;
          v50->__r_.__value_.__r.__words[2] = 0;
          v50->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v94.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v93.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v92.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v83.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v90.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v84.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v89.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v88.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v85.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v87.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
          OS::CF::String::AsStdString(&v100, v2 + 528);
          OSStatus v52 = &v100;
          if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            OSStatus v52 = (std::string *)v100.__r_.__value_.__r.__words[0];
          }
          int v53 = &v95;
          if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v53 = (std::string *)v95.__r_.__value_.__r.__words[0];
          }
          CFStringRef v54 = CFStringCreateWithFormat(v17, 0, @"%s/Out_Stream_%d(%s).caf", v52, v18, v53);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v100.__r_.__value_.__l.__data_);
          }
          CFURLRef v55 = CFURLCreateWithFileSystemPath(0, v54, kCFURLPOSIXPathStyle, 0);
          CFRelease(v54);
          OSStatus v56 = ExtAudioFileCreateWithURL(v55, 0x63616666u, &buf, 0, 1u, &outExtAudioFile);
          if (v56) {
            break;
          }
          CFRelease(v55);
          OSStatus v56 = ExtAudioFileSetProperty(outExtAudioFile, 0x63666D74u, 0x28u, &buf);
          if (v56)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_118;
            }
            LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Device.cpp";
            WORD2(v100.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = 1260;
            uint64_t v71 = MEMORY[0x1E4F14500];
            int v72 = "%25s:%-5d  ADS::Device::prepareAudioFile: Could not set the properties for the destination audio file";
LABEL_117:
            _os_log_impl(&dword_1BAA78000, v71, OS_LOG_TYPE_ERROR, v72, (uint8_t *)&v100, 0x12u);
            goto LABEL_118;
          }
          OSStatus v56 = ExtAudioFileWriteAsync(outExtAudioFile, 0, 0);
          if (v56)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
              *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Device.cpp";
              WORD2(v100.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = 1264;
              uint64_t v71 = MEMORY[0x1E4F14500];
              int v72 = "%25s:%-5d  ADS::Device::prepareAudioFile: Could not prime the async writing mechanism.";
              goto LABEL_117;
            }
LABEL_118:
            uint64_t v73 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v73 = off_1F148A5D8;
            v73[2] = v56;
          }
          unint64_t v58 = *(ExtAudioFileRef **)(v2 + 512);
          unint64_t v59 = *(void *)(v2 + 520);
          if ((unint64_t)v58 >= v59)
          {
            uint64_t v61 = *(void *)(v2 + 504);
            uint64_t v62 = ((uint64_t)v58 - v61) >> 3;
            if ((unint64_t)(v62 + 1) >> 61) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v63 = v59 - v61;
            uint64_t v64 = v63 >> 2;
            if (v63 >> 2 <= (unint64_t)(v62 + 1)) {
              uint64_t v64 = v62 + 1;
            }
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              if (v65 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unsigned int v66 = (char *)operator new(8 * v65);
            }
            else
            {
              unsigned int v66 = 0;
            }
            uint64_t v67 = (ExtAudioFileRef *)&v66[8 * v62];
            ExtAudioFileRef *v67 = outExtAudioFile;
            int v60 = v67 + 1;
            uint64_t v69 = *(char **)(v2 + 504);
            uint64_t v68 = *(char **)(v2 + 512);
            if (v68 != v69)
            {
              do
              {
                int v70 = (OpaqueExtAudioFile *)*((void *)v68 - 1);
                v68 -= 8;
                *--uint64_t v67 = v70;
              }
              while (v68 != v69);
              uint64_t v68 = *(char **)(v2 + 504);
            }
            *(void *)(v2 + 504) = v67;
            *(void *)(v2 + 512) = v60;
            *(void *)(v2 + 520) = &v66[8 * v65];
            if (v68) {
              operator delete(v68);
            }
          }
          else
          {
            *unint64_t v58 = outExtAudioFile;
            int v60 = v58 + 1;
          }
          *(void *)(v2 + 512) = v60;
          if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v95.__r_.__value_.__l.__data_);
          }
          ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v19, v57);
          CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v98);
          if (++v16 == v15) {
            goto LABEL_13;
          }
        }
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_118;
        }
        LODWORD(v100.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_Device.cpp";
        WORD2(v100.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&v100.__r_.__value_.__r.__words[1] + 6) = 1255;
        uint64_t v71 = MEMORY[0x1E4F14500];
        int v72 = "%25s:%-5d  ADS::Device::prepareAudioFile: Call to ExtAudioFileCreateWithURL failed";
        goto LABEL_117;
      }
    }
  }
LABEL_13:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v79);
  ADS::ObjectManager::ReleaseObject((ADS::ObjectManager *)v2, v11);
  return 0;
}

void sub_1BAA9EAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9EB10(void *a1, ADS::BaseObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,void *a62,uint64_t a63)
{
  if (a2)
  {
    if (a79 < 0) {
      operator delete(__p);
    }
    if (a23 < 0) {
      operator delete(a18);
    }
    if (a77 < 0) {
      operator delete(a76);
    }
    if (a75 < 0) {
      operator delete(a74);
    }
    if (a29 < 0) {
      operator delete(a24);
    }
    if (a73 < 0) {
      operator delete(a72);
    }
    if (a71 < 0) {
      operator delete(a69);
    }
    if (a35 < 0) {
      operator delete(a30);
    }
    if (a67 < 0) {
      operator delete(a62);
    }
    if (a60 < 0) {
      operator delete(a55);
    }
    if (a41 < 0) {
      operator delete(a36);
    }
    if (a53 < 0) {
      operator delete(a48);
    }
    if (a47 < 0) {
      operator delete(a42);
    }
    ADS::ObjectManager::ReleaseObject(v80, a2);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)(v81 - 192));
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a13);
    ADS::ObjectManager::ReleaseObject(v79, v83);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9DFD0);
  }
  JUMPOUT(0x1BAA9EB00);
}

void sub_1BAA9EDC8()
{
}

uint64_t Simulator_SetPropertyData(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v34 = 0;
  std::string::size_type v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      __int16 v36 = "ADS_Simulator.cpp";
      __int16 v37 = 1024;
      int v38 = 1486;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetPropertyData: bad driver reference", buf, 0x12u);
    }
    int v22 = 560947818;
LABEL_25:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v22;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      __int16 v36 = "ADS_Simulator.cpp";
      __int16 v37 = 1024;
      int v38 = 1487;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetPropertyData: no address", buf, 0x12u);
    }
    int v22 = 1852797029;
    goto LABEL_25;
  }
  uint64_t v15 = ADS::ObjectManager::CopyObjectByObjectID(this);
  double v16 = (ADS::ObjectManager *)v15;
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      __int16 v36 = "ADS_Simulator.cpp";
      __int16 v37 = 1024;
      int v38 = 1491;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetPropertyData: unknown object", buf, 0x12u);
    }
    double v24 = __cxa_allocate_exception(0x10uLL);
    *(void *)double v24 = off_1F148A5D8;
    _DWORD v24[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v15 + 32))(v15, this, a3, a4))
  {
    if ((*(unsigned int (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v16 + 40))(v16, this, a3, a4))
    {
      (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, int *, void **, _BYTE))(*(void *)v16 + 64))(v16, this, a3, a4, a5, a6, a7, a8, &v34, &v31, 0);
      if (v34)
      {
        pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 1174405120;
        block[2] = __Simulator_SetPropertyData_block_invoke;
        block[3] = &__block_descriptor_tmp_45;
        int v29 = (int)this;
        int v30 = v34;
        long long v27 = 0;
        uint64_t v28 = 0;
        std::string __p = 0;
        std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&__p, v31, (uint64_t)v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - (unsigned char *)v31) >> 2));
        int v18 = (dispatch_queue_t *)ADS::Simulator::sServerHighPriorityQueue;
        if (ADS::Simulator::sServerHighPriorityQueue)
        {
          unsigned __int8 v19 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 32));
          if (v19) {
            atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerHighPriorityQueue + 33));
          }
          dispatch_async(*v18, block);
        }
        if (__p)
        {
          long long v27 = __p;
          operator delete(__p);
        }
      }
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = 1970171760;
    }
  }
  else
  {
    uint64_t v20 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v16, v17);
  if (v31)
  {
    uint64_t v32 = v31;
    operator delete(v31);
  }
  return v20;
}

void sub_1BAA9F234(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9F24C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9F010);
  }
  JUMPOUT(0x1BAA9F23CLL);
}

void sub_1BAA9F2A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAA9F23CLL);
}

void sub_1BAA9F334(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void *std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAA9F3BC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x1555555555555556) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[12 * v4];
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_32c68_ZTSNSt3__16vectorI26AudioObjectPropertyAddressNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
}

void ADS::Simulator::StaticInitializer(ADS::Simulator *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAA9F7E0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9F7F8(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2)
  {
    int v18 = *(void **)(v16 - 48);
    if (v18) {
      operator delete(v18);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a14);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a16);
    HALS_System::WithADSEnabled::~WithADSEnabled((HALS_System::WithADSEnabled *)&a13);
    __cxa_begin_catch(a1);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)(v16 - 48) = 136315394;
      *(void *)(v16 - 44) = "ADS_Simulator.cpp";
      *(_WORD *)(v16 - 36) = 1024;
      *(_DWORD *)(v16 - 34) = 134;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::Simulator::StaticInitializer: failed to create the plug-in", (uint8_t *)(v16 - 48), 0x12u);
    }
    if (ADS::Simulator::sInstance) {
      (*(void (**)(uint64_t))(*(void *)ADS::Simulator::sInstance + 24))(ADS::Simulator::sInstance);
    }
    ADS::Simulator::sInstance = 0;
    if (ADS::Simulator::sServerHighPriorityQueue)
    {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerHighPriorityQueue);
      MEMORY[0x1C1859840]();
    }
    ADS::Simulator::sServerHighPriorityQueue = 0;
    if (ADS::Simulator::sServerDefaultPriorityQueue)
    {
      AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerDefaultPriorityQueue);
      MEMORY[0x1C1859840]();
    }
    ADS::Simulator::sServerDefaultPriorityQueue = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAA9F7B4);
  }
  JUMPOUT(0x1BAA9F7E8);
}

void sub_1BAA9F968()
{
}

uint64_t OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>(uint64_t result, CFDictionaryRef theDict, void *key)
{
  *(void *)uint64_t result = &unk_1F14898A0;
  *(void *)(result + 8) = 0;
  if (theDict)
  {
    uint64_t v3 = result;
    unsigned int value = 0;
    uint64_t result = CFDictionaryGetValueIfPresent(theDict, key, (const void **)&value);
    if (result)
    {
      CFTypeID v4 = value ? CFGetTypeID(value) : 0;
      uint64_t result = CFDictionaryGetTypeID();
      if (v4 == result)
      {
        uint64_t v5 = value;
        if (value)
        {
          CFRetain(value);
          uint64_t v6 = v3;
          uint64_t v7 = (uint64_t)v5;
        }
        else
        {
          uint64_t v6 = v3;
          uint64_t v7 = 0;
        }
        return OS::CF::UntypedObject::operator=(v6, v7);
      }
    }
  }
  return result;
}

uint64_t ___ZN3ADS9Simulator14LoadNullDeviceEv_block_invoke(uint64_t result)
{
  if (ADS::Simulator::sHost)
  {
    uint64_t v1 = *(unsigned int *)(ADS::Simulator::sInstance + 8);
    uint64_t v2 = *(unsigned int *)(result + 56);
    uint64_t v3 = *(void *)(result + 32);
    CFTypeID v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))ADS::Simulator::sHost;
    pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
    return v4(ADS::Simulator::sHost, v1, v2, v3);
  }
  return result;
}

void sub_1BAA9FAB0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_System::WithADSEnabled::~WithADSEnabled(HALS_System::WithADSEnabled *this)
{
  char v1 = *(unsigned char *)this;
  v3[0] = 0;
  v3[1] = 0;
  HALS_System::GetInstance(v4, 0, v3);
  uint64_t v2 = (std::__shared_weak_count *)v4[1];
  *(unsigned char *)(v4[0] + 1280) = v1;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t Simulator_GetPropertyData(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      long long v27 = "ADS_Simulator.cpp";
      __int16 v28 = 1024;
      int v29 = 1444;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyData: bad driver reference", buf, 0x12u);
    }
    int v21 = 560947818;
LABEL_21:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v21;
  }
  if (!a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    long long v27 = "ADS_Simulator.cpp";
    __int16 v28 = 1024;
    int v29 = 1445;
    int v22 = MEMORY[0x1E4F14500];
    long long v23 = "%25s:%-5d  Simulator_GetPropertyData: no address";
LABEL_19:
    _os_log_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, v23, buf, 0x12u);
    goto LABEL_20;
  }
  if (!a8)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    long long v27 = "ADS_Simulator.cpp";
    __int16 v28 = 1024;
    int v29 = 1446;
    int v22 = MEMORY[0x1E4F14500];
    long long v23 = "%25s:%-5d  Simulator_GetPropertyData: no place to put the return value size";
    goto LABEL_19;
  }
  if (!a9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      long long v27 = "ADS_Simulator.cpp";
      __int16 v28 = 1024;
      int v29 = 1447;
      int v22 = MEMORY[0x1E4F14500];
      long long v23 = "%25s:%-5d  Simulator_GetPropertyData: no place to put the return value";
      goto LABEL_19;
    }
LABEL_20:
    int v21 = 1852797029;
    goto LABEL_21;
  }
  uint64_t v16 = ADS::ObjectManager::CopyObjectByObjectID(this);
  CFAllocatorRef v17 = (ADS::ObjectManager *)v16;
  if (!v16)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      long long v27 = "ADS_Simulator.cpp";
      __int16 v28 = 1024;
      int v29 = 1450;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyData: unknown object", buf, 0x12u);
    }
    char v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v25 = off_1F148A5D8;
    _DWORD v25[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v16 + 32))(v16, this, a3, a4))
  {
    (*(void (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 56))(v17, this, a3, a4, a5, a6, a7, a8, a9);
    uint64_t v19 = 0;
  }
  else
  {
    uint64_t v19 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v17, v18);
  return v19;
}

void sub_1BAA9FF14(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAA9FF2C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAA9FC4CLL);
  }
  JUMPOUT(0x1BAA9FF1CLL);
}

void sub_1BAA9FF74()
{
}

uint64_t Simulator_GetPropertyDataSize(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      double v24 = "ADS_Simulator.cpp";
      __int16 v25 = 1024;
      int v26 = 1404;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyDataSize: bad driver reference", (uint8_t *)&v23, 0x12u);
    }
    int v18 = 560947818;
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v18;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      double v24 = "ADS_Simulator.cpp";
      __int16 v25 = 1024;
      int v26 = 1405;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "%25s:%-5d  Simulator_GetPropertyDataSize: no address";
LABEL_16:
      _os_log_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, v20, (uint8_t *)&v23, 0x12u);
    }
LABEL_17:
    int v18 = 1852797029;
    goto LABEL_18;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      double v24 = "ADS_Simulator.cpp";
      __int16 v25 = 1024;
      int v26 = 1406;
      uint64_t v19 = MEMORY[0x1E4F14500];
      uint64_t v20 = "%25s:%-5d  Simulator_GetPropertyDataSize: no place to put the return value";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v13 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v14 = (ADS::ObjectManager *)v13;
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v23 = 136315394;
      double v24 = "ADS_Simulator.cpp";
      __int16 v25 = 1024;
      int v26 = 1410;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_GetPropertyDataSize: unknown object", (uint8_t *)&v23, 0x12u);
    }
    int v22 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v22 = off_1F148A5D8;
    v22[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v13 + 32))(v13, this, a3, a4))
  {
    uint64_t v16 = 0;
    *a7 = (*(uint64_t (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 48))(v14, this, a3, a4, a5, a6);
  }
  else
  {
    uint64_t v16 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v14, v15);
  return v16;
}

void sub_1BAAA02EC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA0304(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA0080);
  }
  JUMPOUT(0x1BAAA02F4);
}

void sub_1BAAA034C()
{
}

uint64_t Simulator_IsPropertySettable(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "ADS_Simulator.cpp";
      __int16 v21 = 1024;
      int v22 = 1364;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_IsPropertySettable: bad driver reference", (uint8_t *)&v19, 0x12u);
    }
    int v14 = 560947818;
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v14;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "ADS_Simulator.cpp";
      __int16 v21 = 1024;
      int v22 = 1365;
      uint64_t v15 = MEMORY[0x1E4F14500];
      uint64_t v16 = "%25s:%-5d  Simulator_IsPropertySettable: no address";
LABEL_16:
      _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v19, 0x12u);
    }
LABEL_17:
    int v14 = 1852797029;
    goto LABEL_18;
  }
  if (!a5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "ADS_Simulator.cpp";
      __int16 v21 = 1024;
      int v22 = 1366;
      uint64_t v15 = MEMORY[0x1E4F14500];
      uint64_t v16 = "%25s:%-5d  Simulator_IsPropertySettable: no place to put the return value";
      goto LABEL_16;
    }
    goto LABEL_17;
  }
  uint64_t v9 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v10 = (ADS::ObjectManager *)v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "ADS_Simulator.cpp";
      __int16 v21 = 1024;
      int v22 = 1370;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_IsPropertySettable: unknown object", (uint8_t *)&v19, 0x12u);
    }
    int v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v18 = off_1F148A5D8;
    v18[2] = 560947818;
  }
  if ((*(unsigned int (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v9 + 32))(v9, this, a3, a4))
  {
    uint64_t v12 = 0;
    *a5 = (*(uint64_t (**)(ADS::ObjectManager *, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v10 + 40))(v10, this, a3, a4);
  }
  else
  {
    uint64_t v12 = 2003332927;
  }
  ADS::ObjectManager::ReleaseObject(v10, v11);
  return v12;
}

void sub_1BAAA06AC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA06C4(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA0444);
  }
  JUMPOUT(0x1BAAA06B4);
}

void sub_1BAAA070C()
{
}

uint64_t Simulator_HasProperty(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!this)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1323;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: unknown AudioObjectID", (uint8_t *)&v16, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1331;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: bad driver reference", (uint8_t *)&v16, 0x12u);
    }
    int v13 = 560947818;
LABEL_15:
    int v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v14 = off_1F148A5D8;
    void v14[2] = v13;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1332;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: no address", (uint8_t *)&v16, 0x12u);
    }
    int v13 = 1852797029;
    goto LABEL_15;
  }
  uint64_t v7 = ADS::ObjectManager::CopyObjectByObjectID(this);
  size_t v8 = (ADS::ObjectManager *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1336;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_HasProperty: unknown object", (uint8_t *)&v16, 0x12u);
    }
    uint64_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v15 = off_1F148A5D8;
    void v15[2] = 560947818;
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, ADS::ObjectManager *, uint64_t, uint64_t))(*(void *)v7 + 32))(v7, this, a3, a4);
  ADS::ObjectManager::ReleaseObject(v8, v10);
  return v9;
}

void sub_1BAAA0A70(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t Simulator_AbortDeviceConfigurationChange(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1297;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v6 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v7 = (ADS::ObjectManager *)v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1301;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: unknown device", (uint8_t *)&v12, 0x12u);
    }
    OSStatus v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)OSStatus v11 = off_1F148A5D8;
    v11[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 80))(v6, a3, a4);
  ADS::ObjectManager::ReleaseObject(v7, v8);
  return 0;
}

void sub_1BAAA0CEC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA0D04(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA0B50);
  }
  JUMPOUT(0x1BAAA0CF4);
}

void sub_1BAAA0D58()
{
}

uint64_t Simulator_PerformDeviceConfigurationChange(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1265;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: bad driver reference", (uint8_t *)&v12, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v6 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v7 = (ADS::ObjectManager *)v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      int v13 = "ADS_Simulator.cpp";
      __int16 v14 = 1024;
      int v15 = 1269;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_PerformDeviceConfigurationChange: unknown device", (uint8_t *)&v12, 0x12u);
    }
    OSStatus v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)OSStatus v11 = off_1F148A5D8;
    v11[2] = 560947818;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 72))(v6, a3, a4);
  ADS::ObjectManager::ReleaseObject(v7, v8);
  return 0;
}

void sub_1BAAA0F88(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA0FA0(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA0DECLL);
  }
  JUMPOUT(0x1BAAA0F90);
}

void sub_1BAAA0FF4()
{
}

uint64_t Simulator_RemoveDeviceClient()
{
  return 0;
}

uint64_t Simulator_AddDeviceClient()
{
  return 0;
}

uint64_t Simulator_DestroyDevice()
{
  return 1970171760;
}

uint64_t Simulator_CreateDevice()
{
  return 1970171760;
}

uint64_t Simulator_Initialize(_UNKNOWN **a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "ADS_Simulator.cpp";
      __int16 v7 = 1024;
      int v8 = 1184;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_Initialize: bad driver reference", (uint8_t *)&v5, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
  uint64_t result = 0;
  ADS::Simulator::sHost = a2;
  return result;
}

void sub_1BAAA1164(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA1084);
  }
  _Unwind_Resume(a1);
}

uint64_t Simulator_Release(_UNKNOWN **a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (a1 == &gAudioServerPlugInDriverInterfacePtr)
  {
    return --gAudioServerPlugInDriverRefCount;
  }
  else if (a1 == &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    return --gAudioServerPlugInIsolatedInterfaceRefCount;
  }
  else if (a1 == &gAudioServerPlugInIOThreadStateChangeInterfacePtr)
  {
    return --gAudioServerPlugInIOThreadStateChangeRefCount;
  }
  else
  {
    uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v2 = 136315394;
      uint64_t v3 = "ADS_Simulator.cpp";
      __int16 v4 = 1024;
      int v5 = 1158;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_AddRef: bad driver reference", (uint8_t *)&v2, 0x12u);
      return 0;
    }
  }
  return result;
}

void Simulator_IOThreadStateChange(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3)
{
  if (a1 == &gAudioServerPlugInIOThreadStateChangeInterfacePtr)
  {
    uint64_t v4 = ADS::ObjectManager::CopyObjectByObjectID(this);
    uint64_t v6 = (ADS::ObjectManager *)v4;
    if (v4)
    {
      __int16 v7 = *(void (**)(uint64_t))(v4 + 592);
      if (v7) {
        v7(a3);
      }
    }
    ADS::ObjectManager::ReleaseObject(v6, v5);
  }
}

void sub_1BAAA1310(_Unwind_Exception *a1, ADS::BaseObject *a2)
{
  ADS::ObjectManager::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t Simulator_DoIsolatedIOOperation(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      uint64_t v27 = "ADS_Simulator.cpp";
      __int16 v28 = 1024;
      int v29 = 1791;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIsolatedIOOperation: bad driver reference", (uint8_t *)&v26, 0x12u);
    }
    int v21 = 560947818;
LABEL_18:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v21;
  }
  if (!a7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v26 = 136315394;
      uint64_t v27 = "ADS_Simulator.cpp";
      __int16 v28 = 1024;
      int v29 = 1792;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_DoIsolatedIOOperation: no cycle info", (uint8_t *)&v26, 0x12u);
    }
    int v21 = 1852797029;
    goto LABEL_18;
  }
  uint64_t v12 = ADS::ObjectManager::CopyObjectByObjectID(this);
  int v13 = (ADS::ObjectManager *)v12;
  if (!v12)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    int v26 = 136315394;
    uint64_t v27 = "ADS_Simulator.cpp";
    __int16 v28 = 1024;
    int v29 = 1796;
    uint64_t v23 = MEMORY[0x1E4F14500];
    double v24 = "%25s:%-5d  Simulator_DoIsolatedIOOperation: unknown device";
    goto LABEL_23;
  }
  __int16 v14 = *(__int32 **)(v12 + 368);
  int v15 = wmemchr(*(__int32 **)(v12 + 360), a3, ((uint64_t)v14 - *(void *)(v12 + 360)) >> 2);
  if (v15) {
    CFAllocatorRef v17 = v15;
  }
  else {
    CFAllocatorRef v17 = v14;
  }
  if (v14 == v17)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    int v26 = 136315394;
    uint64_t v27 = "ADS_Device.cpp";
    __int16 v28 = 1024;
    int v29 = 1449;
    uint64_t v23 = MEMORY[0x1E4F14500];
    double v24 = "%25s:%-5d  DoIsolatedIOOperation bad inStreamObjectID";
LABEL_23:
    _os_log_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&v26, 0x12u);
LABEL_24:
    __int16 v25 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v25 = off_1F148A5D8;
    _DWORD v25[2] = 560947818;
  }
  __int16 v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v13 + 71);
  if (v18) {
    uint64_t v19 = v18(a3, a4, a5, a6, a7);
  }
  else {
    uint64_t v19 = 0;
  }
  ADS::ObjectManager::ReleaseObject(v13, v16);
  return v19;
}

void sub_1BAAA1674(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA168C(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA13ECLL);
  }
  JUMPOUT(0x1BAAA167CLL);
}

void sub_1BAAA16E0()
{
}

uint64_t Simulator_TeardownForIsolatedIO(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v19 = 136315394;
      uint64_t v20 = "ADS_Simulator.cpp";
      __int16 v21 = 1024;
      int v22 = 1758;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_TeardownForIsolatedIO: bad driver reference", (uint8_t *)&v19, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v6 = ADS::ObjectManager::CopyObjectByObjectID(this);
  __int16 v7 = (ADS::ObjectManager *)v6;
  if (!v6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    int v19 = 136315394;
    uint64_t v20 = "ADS_Simulator.cpp";
    __int16 v21 = 1024;
    int v22 = 1761;
    uint64_t v16 = MEMORY[0x1E4F14500];
    CFAllocatorRef v17 = "%25s:%-5d  Simulator_TeardownForIsolatedIO: unknown device";
    goto LABEL_18;
  }
  int v8 = *(__int32 **)(v6 + 368);
  uint64_t v9 = wmemchr(*(__int32 **)(v6 + 360), a3, ((uint64_t)v8 - *(void *)(v6 + 360)) >> 2);
  if (v9) {
    OSStatus v11 = v9;
  }
  else {
    OSStatus v11 = v8;
  }
  if (v8 == v11)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    int v19 = 136315394;
    uint64_t v20 = "ADS_Device.cpp";
    __int16 v21 = 1024;
    int v22 = 1478;
    uint64_t v16 = MEMORY[0x1E4F14500];
    CFAllocatorRef v17 = "%25s:%-5d  DoTeardownForIsolatedIO bad inStreamObjectID";
LABEL_18:
    _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0x12u);
LABEL_19:
    __int16 v18 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v18 = off_1F148A5D8;
    v18[2] = 560947818;
  }
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))*((void *)v7 + 73);
  if (v12) {
    uint64_t v13 = v12(a3, a4);
  }
  else {
    uint64_t v13 = 0;
  }
  ADS::ObjectManager::ReleaseObject(v7, v10);
  return v13;
}

void sub_1BAAA1994(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA19AC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA1784);
  }
  JUMPOUT(0x1BAAA199CLL);
}

void sub_1BAAA1A00()
{
}

uint64_t Simulator_SetupForIsolatedIO(_UNKNOWN **a1, ADS::ObjectManager *this, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v21 = 136315394;
      int v22 = "ADS_Simulator.cpp";
      __int16 v23 = 1024;
      int v24 = 1729;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_SetupForIsolatedIO: bad driver reference", (uint8_t *)&v21, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v8 = ADS::ObjectManager::CopyObjectByObjectID(this);
  uint64_t v9 = (ADS::ObjectManager *)v8;
  if (!v8)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    int v21 = 136315394;
    int v22 = "ADS_Simulator.cpp";
    __int16 v23 = 1024;
    int v24 = 1732;
    __int16 v18 = MEMORY[0x1E4F14500];
    int v19 = "%25s:%-5d  Simulator_SetupForIsolatedIO: unknown device";
    goto LABEL_18;
  }
  uint64_t v10 = *(__int32 **)(v8 + 368);
  OSStatus v11 = wmemchr(*(__int32 **)(v8 + 360), a3, ((uint64_t)v10 - *(void *)(v8 + 360)) >> 2);
  if (v11) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v10;
  }
  if (v10 == v13)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_19;
    }
    int v21 = 136315394;
    int v22 = "ADS_Device.cpp";
    __int16 v23 = 1024;
    int v24 = 1464;
    __int16 v18 = MEMORY[0x1E4F14500];
    int v19 = "%25s:%-5d  DoSetupForIsolatedIO bad inStreamObjectID";
LABEL_18:
    _os_log_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, v19, (uint8_t *)&v21, 0x12u);
LABEL_19:
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = off_1F148A5D8;
    void v20[2] = 560947818;
  }
  __int16 v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((void *)v9 + 72);
  if (v14) {
    uint64_t v15 = v14(a3, a4, a5);
  }
  else {
    uint64_t v15 = 0;
  }
  ADS::ObjectManager::ReleaseObject(v9, v12);
  return v15;
}

void sub_1BAAA1CC4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAAA1CDC(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA1AB0);
  }
  JUMPOUT(0x1BAAA1CCCLL);
}

void sub_1BAAA1D30()
{
}

uint64_t Simulator_AddRef(_UNKNOWN **a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (a1 == &gAudioServerPlugInDriverInterfacePtr)
  {
    if (gAudioServerPlugInDriverRefCount != -1) {
      return ++gAudioServerPlugInDriverRefCount;
    }
    uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v4 = 136315394;
    int v5 = "ADS_Simulator.cpp";
    __int16 v6 = 1024;
    int v7 = 1110;
    int v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  Simulator_AddRef: out of references";
    goto LABEL_18;
  }
  if (a1 == &gAudioServerPlugInIsolatedDriverInterfacePtr)
  {
    if (gAudioServerPlugInIsolatedInterfaceRefCount != -1) {
      return ++gAudioServerPlugInIsolatedInterfaceRefCount;
    }
    uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v4 = 136315394;
    int v5 = "ADS_Simulator.cpp";
    __int16 v6 = 1024;
    int v7 = 1118;
    int v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  Simulator_AddRef: out of isolated references";
LABEL_18:
    _os_log_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, v3, (uint8_t *)&v4, 0x12u);
    return 0;
  }
  if (a1 != &gAudioServerPlugInIOThreadStateChangeInterfacePtr)
  {
    uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    int v4 = 136315394;
    int v5 = "ADS_Simulator.cpp";
    __int16 v6 = 1024;
    int v7 = 1124;
    int v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  Simulator_AddRef: bad driver reference";
    goto LABEL_18;
  }
  if (gAudioServerPlugInIOThreadStateChangeRefCount != -1) {
    return ++gAudioServerPlugInIOThreadStateChangeRefCount;
  }
  uint64_t result = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
  if (result)
  {
    int v4 = 136315394;
    int v5 = "ADS_Simulator.cpp";
    __int16 v6 = 1024;
    int v7 = 1125;
    int v2 = MEMORY[0x1E4F14500];
    uint64_t v3 = "%25s:%-5d  Simulator_AddRef: out of isolated references";
    goto LABEL_18;
  }
  return result;
}

uint64_t Simulator_QueryInterface(_UNKNOWN **a1, CFUUIDBytes a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (a1 != &gAudioServerPlugInDriverInterfacePtr)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1070;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_QueryInterface: bad driver reference", buf, 0x12u);
    }
    int v8 = 560947818;
LABEL_14:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v8;
  }
  if (!a3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1071;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_QueryInterface: no place to store the returned interface", buf, 0x12u);
    }
    int v8 = 1852797029;
    goto LABEL_14;
  }
  CFUUIDRef v4 = CFUUIDCreateFromUUIDBytes(0, a2);
  CFUUIDRef v14 = v4;
  char v15 = 1;
  if (!v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1075;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  Simulator_QueryInterface: failed to create the CFUUIDRef", buf, 0x12u);
    }
    int v10 = 1852797029;
LABEL_24:
    uint64_t v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v13 = off_1F148A5D8;
    v13[2] = v10;
  }
  CFUUIDRef v5 = CFUUIDGetConstantUUIDWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CFA8], 0, 0, 0, 0, 0, 0, 0, 0, 0xC0u, 0, 0, 0, 0, 0, 0, 0x46u);
  if (!CFEqual(v4, v5))
  {
    CFUUIDRef v6 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
    if (!CFEqual(v14, v6))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFAllocatorRef v17 = "ADS_Simulator.cpp";
        __int16 v18 = 1024;
        int v19 = 1080;
        OSStatus v11 = MEMORY[0x1E4F14500];
        uint64_t v12 = "%25s:%-5d  Simulator_QueryInterface: requested interface is unsupported";
        goto LABEL_22;
      }
LABEL_23:
      int v10 = -2147483644;
      goto LABEL_24;
    }
  }
  if (gAudioServerPlugInDriverRefCount == -1)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      CFAllocatorRef v17 = "ADS_Simulator.cpp";
      __int16 v18 = 1024;
      int v19 = 1081;
      OSStatus v11 = MEMORY[0x1E4F14500];
      uint64_t v12 = "%25s:%-5d  Simulator_QueryInterface: the ref count is maxxed out";
LABEL_22:
      _os_log_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, v12, buf, 0x12u);
      goto LABEL_23;
    }
    goto LABEL_23;
  }
  ++gAudioServerPlugInDriverRefCount;
  *a3 = &gAudioServerPlugInDriverInterfacePtr;
  CACFObject<__CFUUID const*>::~CACFObject((uint64_t)&v14);
  return 0;
}

void sub_1BAAA236C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA2098);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CACFObject<__CFUUID const*>::~CACFObject(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  return a1;
}

void ADS::Simulator::FlushAllQueues(ADS::Simulator *this)
{
  if (ADS::Simulator::sServerHighPriorityQueue) {
    AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerHighPriorityQueue);
  }
  char v1 = (AMCP::Utility::Dispatch_Queue *)ADS::Simulator::sServerDefaultPriorityQueue;
  if (ADS::Simulator::sServerDefaultPriorityQueue)
  {
    AMCP::Utility::Dispatch_Queue::flush_all_work(v1);
  }
}

void *OS::CF::Dictionary::Dictionary(void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = &unk_1F14898A0;
  a1[1] = 0;
  std::vector<void const*>::vector(keys, a3);
  std::vector<void const*>::vector(values, a3);
  if (a3)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a2 + 16 * a3;
    do
    {
      keys[0][v6] = *(void **)a2;
      values[0][v6++] = *(void **)(a2 + 8);
      a2 += 16;
    }
    while (a2 != v7);
  }
  CFDictionaryRef v8 = CFDictionaryCreate(0, (const void **)keys[0], (const void **)values[0], a3, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  OS::CF::UntypedObject::operator=((uint64_t)a1, (uint64_t)v8);
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  if (keys[0])
  {
    keys[1] = keys[0];
    operator delete(keys[0]);
  }
  return a1;
}

void sub_1BAAA2554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  OS::CF::UntypedObject::~UntypedObject(v13);
  _Unwind_Resume(a1);
}

void *std::vector<void const*>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<void const*>::__vallocate[abi:ne180100](a1, a2);
    CFUUIDRef v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1BAAA25F4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<void const*>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void non-virtual thunk to'HALS_PlugIn::HandlePlugIn_PropertiesChanged(HALS_PlugIn *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void HALS_PlugIn::HandlePlugIn_PropertiesChanged(HALS_PlugIn *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
  _OWORD v16[2] = 0uLL;
  uint64_t v17 = 0;
  if (a2)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    char v8 = 0;
    int v9 = 0;
    char v10 = 0;
    do
    {
      OSStatus v11 = &a3[v6];
      while (1)
      {
        AudioObjectPropertySelector mSelector = v11->mSelector;
        ++v11;
        AudioObjectPropertySelector v12 = mSelector;
        if (mSelector != 1684370979) {
          break;
        }
        ++v6;
        char v10 = 1;
        if (a2 == v6) {
          goto LABEL_20;
        }
      }
      if (v12 == 1668049699) {
        int v14 = 1;
      }
      else {
        int v14 = v7;
      }
      if (v12 == 1701733411) {
        int v15 = 1;
      }
      else {
        int v15 = v9;
      }
      if (v12 == 1701733411) {
        int v14 = v7;
      }
      if (v12 == 1651472419)
      {
        char v8 = 1;
      }
      else
      {
        int v9 = v15;
        int v7 = v14;
      }
      ++v6;
    }
    while (v6 != a2);
    if (v10) {
LABEL_20:
    }
      HALS_PlugIn::RebuildDeviceList((HALS_PlugIn *)v16, (uint64_t)this);
    if (v9) {
      HALS_PlugIn::RebuildEndPointList((uint64_t)this);
    }
    if (v8) {
      HALS_PlugIn::RebuildBoxList(this);
    }
    if (v7) {
      HALS_PlugIn::RebuildClockDeviceList(this);
    }
  }
  HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, a2, a3);
}

void sub_1BAAA2848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    operator delete(v14);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugIn::RebuildDeviceList(HALS_PlugIn *this, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v2 = *(void *)(a2 + 400);
  uint64_t v3 = 0x676C6F6264657623;
  LODWORD(v4) = 0;
  unsigned int v5 = (*(unsigned int (**)(void))(*(void *)v2 + 568))() >> 2;
  operator new[]();
}

void sub_1BAAA3064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  __cxa_end_catch();
  MEMORY[0x1C1859810](a6, 0x1000C8052888210);
  MEMORY[0x1C1859810](v10, 0x1000C8052888210);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, v11);
  MEMORY[0x1C1859810](v9, 0x1000C8052888210);
  AudioObjectPropertySelector v12 = *(void **)a9;
  if (*(void *)a9)
  {
    *(void *)(a9 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(v13);
}

void sub_1BAAA311C()
{
  _Unwind_Resume(v0);
}

void sub_1BAAA3128(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAAA3134);
  }
  JUMPOUT(0x1BAAA313CLL);
}

uint64_t HALS_PlugIn::RebuildEndPointList(uint64_t this)
{
  uint64_t v1 = this;
  int v3 = *(_DWORD *)(this + 20);
  int v2 = *(_DWORD *)(this + 24);
  if (v3 == v2 || v3 == 1953656941)
  {
    if (v3 == 1953656941 || v3 != v2)
    {
LABEL_13:
      unsigned int v10 = 0;
      uint64_t v6 = *(void *)(this + 400);
      uint64_t v7 = *(unsigned int *)(v1 + 348);
      uint64_t v8 = 0x676C6F62656E6423;
      LODWORD(v9) = 0;
      unsigned int v10 = (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void))(*(void *)v6 + 568))(v6, v7, 0, &v8, 0, 0) >> 2;
      operator new[]();
    }
  }
  else if (v2 == 1953656941)
  {
    goto LABEL_13;
  }
  return this;
}

void sub_1BAAA3724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, HALS_ObjectMap ***a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  MEMORY[0x1C1859810](v19, 0x1000C8052888210);
  MEMORY[0x1C1859810](a11, 0x1000C8052888210);
  _Block_object_dispose(&a18, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(a10, v21);
  MEMORY[0x1C1859810](v18, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RebuildBoxList(HALS_PlugIn *this)
{
  v17[0] = 0;
  v17[1] = v17;
  _OWORD v17[2] = 0x2000000000;
  char v18 = 0;
  uint64_t v2 = *((void *)this + 50);
  v15.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F62626F7823;
  LODWORD(v15.__end_) = 0;
  if ((*(unsigned int (**)(void))(*(void *)v2 + 552))())
  {
    uint64_t v3 = *((void *)this + 50);
    uint64_t v4 = *((unsigned int *)this + 87);
    v15.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F62626F7823;
    LODWORD(v15.__end_) = 0;
    unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, void, std::vector<unsigned int> *, void, void))(*(void *)v3 + 568))(v3, v4, 0, &v15, 0, 0);
    unsigned int v16 = v5 >> 2;
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v15, v5 >> 2, __x);
    if (v5 >= 4)
    {
      uint64_t v6 = *((void *)this + 50);
      uint64_t v7 = *((unsigned int *)this + 87);
      *(void *)__x = 0x676C6F62626F7823;
      int v14 = 0;
      (*(void (**)(uint64_t, uint64_t, void, std::vector<unsigned int>::value_type *, void, void, void, unsigned int *, std::vector<unsigned int>::pointer))(*(void *)v6 + 576))(v6, v7, 0, __x, 0, 0, v5 & 0xFFFFFFFC, &v16, v15.__begin_);
      v16 >>= 2;
    }
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1174405120;
    v9[2] = ___ZN11HALS_PlugIn14RebuildBoxListEv_block_invoke;
    v9[3] = &unk_1F145C5F0;
    v9[4] = v17;
    v9[5] = this;
    OSStatus v11 = 0;
    uint64_t v12 = 0;
    std::string __p = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v15.__begin_, (uint64_t)v15.__end_, v15.__end_ - v15.__begin_);
    uint64_t v8 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v9);
    if (__p)
    {
      OSStatus v11 = __p;
      operator delete(__p);
    }
    if (v15.__begin_)
    {
      v15.__end_ = v15.__begin_;
      operator delete(v15.__begin_);
    }
  }
  _Block_object_dispose(v17, 8);
}

void sub_1BAAA3A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v22 - 64), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RebuildClockDeviceList(HALS_PlugIn *this)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 50);
  uint64_t v3 = *((unsigned int *)this + 87);
  *(void *)__x = 0x676C6F62636C6B23;
  LODWORD(v52) = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, std::vector<unsigned int>::value_type *))(*(void *)v2 + 552))(v2, v3, 0, __x))
  {
    unsigned int v50 = 0;
    uint64_t v4 = *((void *)this + 50);
    uint64_t v5 = *((unsigned int *)this + 87);
    *(void *)__x = 0x676C6F62636C6B23;
    LODWORD(v52) = 0;
    unsigned int v50 = (*(unsigned int (**)(uint64_t, uint64_t, void, std::vector<unsigned int>::value_type *, void, void))(*(void *)v4 + 568))(v4, v5, 0, __x, 0, 0) >> 2;
    __x[0] = 0;
    std::vector<unsigned int>::vector(&v49, v50, __x);
    if (v50)
    {
      uint64_t v6 = *((void *)this + 50);
      uint64_t v7 = *((unsigned int *)this + 87);
      *(void *)__x = 0x676C6F62636C6B23;
      LODWORD(v52) = 0;
      (*(void (**)(uint64_t, uint64_t, void, std::vector<unsigned int>::value_type *, void, void, void, unsigned int *, std::vector<unsigned int>::pointer))(*(void *)v6 + 576))(v6, v7, 0, __x, 0, 0, 4 * v50, &v50, v49.__begin_);
      v50 >>= 2;
    }
    uint64_t v46 = 0;
    long long v47 = 0;
    uint64_t v48 = 0;
    HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v46);
    uint64_t v44 = this;
    std::vector<unsigned int>::pointer begin = v49.__begin_;
    std::vector<unsigned int>::pointer end = v49.__end_;
    if (v49.__begin_ == v49.__end_)
    {
      OSStatus v11 = 0;
      long long v45 = 0;
    }
    else
    {
      OSStatus v11 = 0;
      long long v45 = 0;
      unint64_t v12 = 0;
      uint64_t v13 = 0;
      do
      {
        int v14 = v46;
        if (v46 == v47)
        {
LABEL_9:
          if ((unint64_t)v13 >= v12)
          {
            uint64_t v15 = v13 - v11;
            unint64_t v16 = v15 + 1;
            if ((unint64_t)(v15 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v12 - (void)v11) >> 1 > v16) {
              unint64_t v16 = (uint64_t)(v12 - (void)v11) >> 1;
            }
            if (v12 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17)
            {
              unint64_t v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v17);
              uint64_t v13 = v45;
            }
            else
            {
              uint64_t v8 = 0;
            }
            char v18 = (unsigned int *)(v17 + 4 * v15);
            unsigned int *v18 = *begin;
            long long v45 = v18 + 1;
            while (v13 != v11)
            {
              unsigned int v19 = *--v13;
              *--char v18 = v19;
            }
            unint64_t v12 = v17 + 4 * (void)v8;
            if (v11) {
              operator delete(v11);
            }
            OSStatus v11 = v18;
            uint64_t v13 = v45;
          }
          else
          {
            *v13++ = *begin;
            long long v45 = v13;
          }
        }
        else
        {
          while (*((_DWORD *)*v14 + 11) != *begin)
          {
            if (++v14 == v47) {
              goto LABEL_9;
            }
          }
        }
        ++begin;
      }
      while (begin != end);
    }
    uint64_t v20 = v46;
    int v21 = v47;
    if (v46 == v47)
    {
      uint64_t v22 = 0;
    }
    else
    {
      uint64_t v22 = 0;
      __int16 v23 = 0;
      unint64_t v24 = 0;
      uint64_t v25 = 0;
      do
      {
        int v26 = v49.__begin_;
        if (v49.__begin_ == v49.__end_)
        {
LABEL_34:
          int v27 = *((_DWORD *)*v20 + 11);
          if ((unint64_t)v25 >= v24)
          {
            uint64_t v28 = v25 - v22;
            unint64_t v29 = v28 + 1;
            if ((unint64_t)(v28 + 1) >> 62) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v24 - (void)v22) >> 1 > v29) {
              unint64_t v29 = (uint64_t)(v24 - (void)v22) >> 1;
            }
            if (v24 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v29;
            }
            if (v30)
            {
              unint64_t v30 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v30);
              uint64_t v25 = v23;
            }
            else
            {
              uint64_t v8 = 0;
            }
            std::string::size_type v31 = (int *)(v30 + 4 * v28);
            *std::string::size_type v31 = v27;
            __int16 v23 = v31 + 1;
            while (v25 != v22)
            {
              int v32 = *--v25;
              *--std::string::size_type v31 = v32;
            }
            unint64_t v24 = v30 + 4 * (void)v8;
            if (v22) {
              operator delete(v22);
            }
            uint64_t v22 = v31;
            uint64_t v25 = v23;
          }
          else
          {
            *v25++ = v27;
            __int16 v23 = v25;
          }
        }
        else
        {
          while (*((_DWORD *)*v20 + 11) != *v26)
          {
            if (++v26 == v49.__end_) {
              goto LABEL_34;
            }
          }
        }
        ++v20;
      }
      while (v20 != v21);
      if (v22 != v25)
      {
        uint64_t v33 = v22;
        do
        {
          int v34 = (unsigned int *)HALS_PlugIn::CopyObjectByUCID(v44, *v33);
          __int16 v36 = (HALS_PlugInClockDevice *)v34;
          if (v34)
          {
            __int16 v37 = (HALS_System *)*((void *)v44 + 40);
            int v38 = (const BOOL *)v34[4];
            unsigned int v39 = v34[7];
            CFStringRef v40 = (const __CFString *)(*(uint64_t (**)(unsigned int *))(*(void *)v34 + 200))(v34);
            HALS_System::ClockDeviceDied(v37, v38, v39, v40);
            (*(void (**)(HALS_PlugInClockDevice *))(*(void *)v36 + 8))(v36);
            HALS_PlugIn::RemoveClockDevice(v44, v36);
          }
          HALS_ObjectMap::ReleaseObject(v36, v35);
          ++v33;
        }
        while (v33 != v25);
      }
    }
    if (v11 != v45)
    {
      long long v41 = (int *)v11;
      do
      {
        std::string::size_type v43 = (HALS_ObjectMap *)HALS_PlugIn::CopyClockDeviceByUCID(v44, *v41);
        if (!v43) {
          operator new();
        }
        HALS_ObjectMap::ReleaseObject(v43, v42);
        ++v41;
      }
      while (v41 != (int *)v45);
    }
    if (v22) {
      operator delete(v22);
    }
    if (v11) {
      operator delete(v11);
    }
    HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v46, v8);
    if (v49.__begin_)
    {
      v49.__end_ = v49.__begin_;
      operator delete(v49.__begin_);
    }
  }
}

void sub_1BAAA4A20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,HALS_ObjectMap **a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32)
{
  __cxa_end_catch();
  if (v32) {
    operator delete(v32);
  }
  if (v33) {
    operator delete(v33);
  }
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a28, v34);
  if (__p)
  {
    a32 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(v35);
}

void sub_1BAAA4AB0(uint64_t a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAAA4ABCLL);
  }
  JUMPOUT(0x1BAAA4AC4);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    uint64_t v7 = &end[__n];
    std::vector<unsigned int>::size_type v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_1BAAA4B34(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PlugIn::CopyObjectByUCID(HALS_PlugIn *this, int a2)
{
  unsigned int v50 = 0;
  long long v51 = 0;
  uint64_t v52 = 0;
  HALS_DeviceManager::CopyDeviceList(this, (HALS_DeviceManager::BasicDeviceList *)&v50, 1, 0);
  uint64_t v4 = v50;
  uint64_t v5 = v51;
  while (1)
  {
    if (v4 == v5)
    {
      unsigned int NumberEndPoints = HALS_PlugIn::GetNumberEndPoints(this, 0);
      if (!NumberEndPoints)
      {
LABEL_62:
        long long v47 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        HALS_DeviceManager::CopyBoxList((uint64_t)this, (uint64_t)&v47, 0);
        for (unint64_t i = v47; i != v48; ++i)
        {
          int v14 = *i;
          if (*((_DWORD *)*i + 89) == a2)
          {
            HALS_ObjectMap::RetainObject(*i, v40);
            HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v47, v44);
            goto LABEL_75;
          }
        }
        HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v47, v40);
        long long v47 = 0;
        uint64_t v48 = 0;
        uint64_t v49 = 0;
        HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v47);
        for (j = v47; ; ++j)
        {
          if (j == v48)
          {
            int v14 = 0;
            goto LABEL_74;
          }
          int v14 = *j;
          if (*((_DWORD *)*j + 97) == a2) {
            break;
          }
        }
        HALS_ObjectMap::RetainObject(*j, v42);
LABEL_74:
        HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v47, v42);
        break;
      }
      unsigned int v23 = 0;
      while (1)
      {
        unint64_t v24 = HALS_PlugIn::CopyEndPointByIndex(this, v23, 0);
        int v26 = v24;
        if (v24)
        {
          if (*((_DWORD *)v24 + 331) == a2)
          {
            HALS_ObjectMap::RetainObject(v24, v25);
            int v14 = v26;
            goto LABEL_59;
          }
          char v27 = 0;
          char v28 = 1;
          do
          {
            unsigned int NumberStreams = HALS_IODevice::GetNumberStreams(v26, v27 & 1);
            if (NumberStreams)
            {
              unsigned int v30 = 1;
              do
              {
                std::string::size_type v31 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(v26, v27 & 1, v30 - 1);
                uint64_t v33 = v31;
                if (v31 && *((_DWORD *)v31 + 21) == a2)
                {
                  HALS_ObjectMap::RetainObject(v31, v32);
                  int v14 = v33;
                }
                else
                {
                  int v14 = 0;
                }
                HALS_ObjectMap::ReleaseObject(v33, v32);
                if (v14) {
                  break;
                }
                BOOL v15 = v30++ >= NumberStreams;
              }
              while (!v15);
            }
            else
            {
              int v14 = 0;
            }
            char v34 = (v14 == 0) & v28;
            char v27 = 1;
            char v28 = 0;
          }
          while ((v34 & 1) != 0);
          if (v14) {
            goto LABEL_59;
          }
          unsigned int v35 = (*(uint64_t (**)(HALS_IODevice *))(*(void *)v26 + 624))(v26);
          if (v35)
          {
            unsigned int v36 = 1;
            do
            {
              __int16 v37 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_IODevice *, void))(*(void *)v26 + 632))(v26, v36 - 1);
              unsigned int v39 = v37;
              if (v37 && *((_DWORD *)v37 + 23) == a2)
              {
                HALS_ObjectMap::RetainObject(v37, v38);
                int v14 = v39;
              }
              else
              {
                int v14 = 0;
              }
              HALS_ObjectMap::ReleaseObject(v39, v38);
              if (v14) {
                break;
              }
              BOOL v15 = v36++ >= v35;
            }
            while (!v15);
            goto LABEL_59;
          }
        }
        int v14 = 0;
LABEL_59:
        HALS_ObjectMap::ReleaseObject(v26, v25);
        if (!v14 && ++v23 < NumberEndPoints) {
          continue;
        }
        if (!v14) {
          goto LABEL_62;
        }
        goto LABEL_75;
      }
    }
    uint64_t v6 = *v4;
    if (*((_DWORD *)*v4 + 331) == a2)
    {
      HALS_ObjectMap::RetainObject(*v4, v3);
      int v14 = v6;
      break;
    }
    char v7 = 0;
    char v8 = 1;
    do
    {
      unsigned int v9 = HALS_IODevice::GetNumberStreams(v6, v7 & 1);
      if (v9)
      {
        unsigned int v10 = 1;
        do
        {
          OSStatus v11 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(v6, v7 & 1, v10 - 1);
          uint64_t v13 = v11;
          if (v11 && *((_DWORD *)v11 + 21) == a2)
          {
            HALS_ObjectMap::RetainObject(v11, v12);
            int v14 = v13;
          }
          else
          {
            int v14 = 0;
          }
          HALS_ObjectMap::ReleaseObject(v13, v12);
          if (v14) {
            break;
          }
          BOOL v15 = v10++ >= v9;
        }
        while (!v15);
      }
      else
      {
        int v14 = 0;
      }
      char v16 = (v14 == 0) & v8;
      char v7 = 1;
      char v8 = 0;
    }
    while ((v16 & 1) != 0);
    if (v14) {
      break;
    }
    unsigned int v17 = (*(uint64_t (**)(HALS_IODevice *))(*(void *)v6 + 624))(v6);
    if (v17)
    {
      unsigned int v18 = 1;
      do
      {
        unsigned int v19 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_IODevice *, void))(*(void *)v6 + 632))(v6, v18 - 1);
        int v21 = v19;
        if (v19 && *((_DWORD *)v19 + 23) == a2)
        {
          HALS_ObjectMap::RetainObject(v19, v20);
          int v14 = v21;
        }
        else
        {
          int v14 = 0;
        }
        HALS_ObjectMap::ReleaseObject(v21, v20);
        if (v14) {
          break;
        }
        BOOL v15 = v18++ >= v17;
      }
      while (!v15);
      if (v14) {
        break;
      }
    }
    ++v4;
  }
LABEL_75:
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v50, v3);
  return v14;
}

void sub_1BAAA4FA8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, HALS_ObjectMap **);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va1, v5);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RemoveClockDevice(HALS_PlugIn *this, HALS_PlugInClockDevice *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN11HALS_PlugIn17RemoveClockDeviceEP22HALS_PlugInClockDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_38;
  v3[4] = this;
  unsigned char v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t HALS_PlugIn::CopyClockDeviceByUCID(HALS_PlugIn *this, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = ___ZNK11HALS_PlugIn21CopyClockDeviceByUCIDEj_block_invoke;
  v5[3] = &unk_1E6230688;
  v5[4] = &v7;
  unsigned char v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAAA51E4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_PlugIn14AddClockDeviceEP22HALS_PlugInClockDevice_block_invoke(void *a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_PlugIn *)a1[5];
  uint64_t v3 = (int *)a1[6];
  uint64_t v5 = HALS_PlugIn::_CopyClockDeviceByUCID(v2, v3[97]);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (*(uint64_t (**)(int *))(*(void *)v3 + 216))(v3);
      int v19 = 136315650;
      uint64_t v20 = "HALS_PlugIn.cpp";
      __int16 v21 = 1024;
      int v22 = 2245;
      __int16 v23 = 2082;
      uint64_t v24 = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::_AddClockDevice: there is already a clcok device with the UID, %{public}s", (uint8_t *)&v19, 0x1Cu);
    }
    int v7 = 1852797029;
  }
  else
  {
    uint64_t v8 = (int **)*((void *)v2 + 69);
    unint64_t v9 = *((void *)v2 + 70);
    if ((unint64_t)v8 >= v9)
    {
      OSStatus v11 = (void *)*((void *)v2 + 68);
      uint64_t v12 = v8 - (int **)v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v9 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v16 = (char *)operator new(8 * v15);
      }
      else
      {
        char v16 = 0;
      }
      unsigned int v17 = (int **)&v16[8 * v12];
      *unsigned int v17 = v3;
      uint64_t v10 = v17 + 1;
      if (v8 != v11)
      {
        do
        {
          unsigned int v18 = *--v8;
          *--unsigned int v17 = v18;
        }
        while (v8 != v11);
        uint64_t v8 = (int **)*((void *)v2 + 68);
      }
      *((void *)v2 + 68) = v17;
      *((void *)v2 + 69) = v10;
      *((void *)v2 + 70) = &v16[8 * v15];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v8 = v3;
      uint64_t v10 = v8 + 1;
    }
    int v7 = 0;
    *((void *)v2 + 69) = v10;
  }
  HALS_ObjectMap::ReleaseObject(v5, v4);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v7;
}

void sub_1BAAA5404(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA53B0);
  }
  _Unwind_Resume(exception_object);
}

HALS_ObjectMap *HALS_PlugIn::_CopyClockDeviceByUCID(HALS_PlugIn *this, int a2)
{
  uint64_t v10 = 0;
  OSStatus v11 = 0;
  uint64_t v12 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)this, (uint64_t)&v10);
  uint64_t v4 = v10;
  if (v10 == v11)
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    do
    {
      int v7 = *v4++;
      uint64_t v6 = v7;
      if (*((_DWORD *)v7 + 97) == a2) {
        uint64_t v5 = v6;
      }
    }
    while (v4 != v11);
  }
  HALS_ObjectMap::RetainObject(v5, v3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v10, v8);
  return v5;
}

void sub_1BAAA54F8(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *___ZNK11HALS_PlugIn21CopyClockDeviceByUCIDEj_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_PlugIn::_CopyClockDeviceByUCID(*(HALS_PlugIn **)(a1 + 40), *(_DWORD *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN11HALS_PlugIn17RemoveClockDeviceEP22HALS_PlugInClockDevice_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(HALS_ObjectMap **)(a1 + 40);
  uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 544);
  uint64_t v4 = *(HALS_ObjectMap ***)(v2 + 552);
  if (v3 != v4)
  {
    while (*v3 != v1)
    {
      if (++v3 == v4)
      {
        uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 552);
        break;
      }
    }
  }
  if (v4 != v3)
  {
    uint64_t v5 = v3 + 1;
    int64_t v6 = (char *)v4 - (char *)(v3 + 1);
    if (v4 != v3 + 1) {
      memmove(v3, v5, (char *)v4 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 552) = (char *)v3 + v6;
    HALS_ObjectMap::ReleaseObject(v1, (HALS_Object *)v5);
  }
}

unint64_t HALS_PlugIn::GetNumberEndPoints(HALS_PlugIn *this, HALS_Client *a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x4002000000;
  uint64_t v10 = __Block_byref_object_copy__24;
  OSStatus v11 = __Block_byref_object_dispose__25;
  memset(v12, 0, sizeof(v12));
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_PlugIn18GetNumberEndPointsEP11HALS_Client_block_invoke;
  v6[3] = &unk_1E6230510;
  v6[4] = &v7;
  v6[5] = this;
  void v6[6] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v6);
  unint64_t v3 = (unint64_t)(v8[6] - v8[5]) >> 3;
  _Block_object_dispose(&v7, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v12, v4);
  return v3;
}

void sub_1BAAA56EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v9, v11);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_PlugIn::CopyEndPointByIndex(HALS_PlugIn *this, unsigned int a2, HALS_Client *a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x4002000000;
  uint64_t v14 = __Block_byref_object_copy__24;
  unint64_t v15 = __Block_byref_object_dispose__25;
  memset(v16, 0, sizeof(v16));
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  uint64_t v10[2] = ___ZNK11HALS_PlugIn19CopyEndPointByIndexEjP11HALS_Client_block_invoke;
  v10[3] = &unk_1E6230538;
  v10[4] = &v11;
  void v10[5] = this;
  v10[6] = a3;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v10);
  uint64_t v6 = v12[5];
  if (a2 >= (unint64_t)((v12[6] - v6) >> 3)) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = *(HALS_ObjectMap **)(v6 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v7, v5);
  _Block_object_dispose(&v11, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v16, v8);
  return v7;
}

void sub_1BAAA5834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v9, v11);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__24(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__25(uint64_t a1, HALS_Object *a2)
{
}

void ___ZNK11HALS_PlugIn19CopyEndPointByIndexEjP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BAAA58A8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_PlugIn::_CopyEndPointList(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 520);
  if (v2 != *(HALS_ObjectMap ***)(a1 + 528))
  {
    unint64_t v3 = a2;
    do
    {
      int v5 = *((unsigned __int8 *)*v2 + 432);
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      uint64_t v6 = *v2;
      uint64_t v8 = (HALS_ObjectMap **)v3[1];
      unint64_t v7 = (unint64_t)v3[2];
      if (v5)
      {
        if ((unint64_t)v8 >= v7)
        {
          uint64_t v9 = ((char *)v8 - (unsigned char *)*v3) >> 3;
          if ((unint64_t)(v9 + 1) >> 61) {
            goto LABEL_35;
          }
          uint64_t v10 = v7 - (void)*v3;
          uint64_t v11 = v10 >> 2;
          if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
            uint64_t v11 = v9 + 1;
          }
          if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
          }
          else {
            a2 = 0;
          }
          unsigned int v17 = (HALS_ObjectMap **)(v12 + 8 * v9);
          *unsigned int v17 = v6;
          uint64_t v13 = v17 + 1;
          int v19 = (char *)*v3;
          unsigned int v18 = (char *)v3[1];
          if (v18 != *v3)
          {
            do
            {
              uint64_t v20 = (HALS_ObjectMap *)*((void *)v18 - 1);
              v18 -= 8;
              *--unsigned int v17 = v20;
            }
            while (v18 != v19);
            goto LABEL_30;
          }
          goto LABEL_31;
        }
      }
      else if ((unint64_t)v8 >= v7)
      {
        uint64_t v14 = ((char *)v8 - (unsigned char *)*v3) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
LABEL_35:
        }
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        uint64_t v15 = v7 - (void)*v3;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v16;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unsigned int v17 = (HALS_ObjectMap **)(v12 + 8 * v14);
        *unsigned int v17 = v6;
        uint64_t v13 = v17 + 1;
        __int16 v21 = (char *)*v3;
        unsigned int v18 = (char *)v3[1];
        if (v18 != *v3)
        {
          do
          {
            int v22 = (HALS_ObjectMap *)*((void *)v18 - 1);
            v18 -= 8;
            *--unsigned int v17 = v22;
          }
          while (v18 != v21);
LABEL_30:
          unsigned int v18 = (char *)*v3;
        }
LABEL_31:
        HALS_Object *v3 = v17;
        v3[1] = v13;
        uint64_t v3[2] = (void *)(v12 + 8 * (void)a2);
        if (v18) {
          operator delete(v18);
        }
        goto LABEL_33;
      }
      *uint64_t v8 = v6;
      uint64_t v13 = v8 + 1;
LABEL_33:
      v3[1] = v13;
      ++v2;
    }
    while (v2 != *(HALS_ObjectMap ***)(a1 + 528));
  }
}

void ___ZNK11HALS_PlugIn18GetNumberEndPointsEP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BAAA5A74(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_PlugIn14RebuildBoxListEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v1 = (_DWORD *)a1[6];
  unint64_t v3 = (_DWORD *)a1[7];
  if (v1 == v3)
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unint64_t v7 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    int v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = *(void *)(v2 + 568);
      uint64_t v9 = *(void *)(v2 + 576);
      if (v8 == v9)
      {
LABEL_6:
        if ((unint64_t)v7 >= v6)
        {
          uint64_t v10 = (v7 - v4) >> 2;
          unint64_t v11 = v10 + 1;
          if ((unint64_t)(v10 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v6 - (void)v4) >> 1 > v11) {
            unint64_t v11 = (uint64_t)(v6 - (void)v4) >> 1;
          }
          if (v6 - (unint64_t)v4 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12)
          {
            unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
            unint64_t v7 = v5;
          }
          else
          {
            uint64_t v13 = 0;
          }
          uint64_t v14 = (char *)(v12 + 4 * v10);
          *(_DWORD *)uint64_t v14 = *v1;
          int v5 = v14 + 4;
          while (v7 != v4)
          {
            int v15 = *((_DWORD *)v7 - 1);
            v7 -= 4;
            *((_DWORD *)v14 - 1) = v15;
            v14 -= 4;
          }
          unint64_t v6 = v12 + 4 * v13;
          if (v4) {
            operator delete(v4);
          }
          uint64_t v4 = v14;
          unint64_t v7 = v5;
        }
        else
        {
          *(_DWORD *)unint64_t v7 = *v1;
          v7 += 4;
          int v5 = v7;
        }
      }
      else
      {
        while (*(_DWORD *)(*(void *)v8 + 44) != *v1)
        {
          v8 += 8;
          if (v8 == v9) {
            goto LABEL_6;
          }
        }
      }
      ++v1;
    }
    while (v1 != v3);
  }
  long long v41 = v5;
  uint64_t v16 = *(void *)(v2 + 568);
  uint64_t v17 = *(void *)(v2 + 576);
  if (v16 == v17)
  {
    __pa = 0;
    __int16 v21 = 0;
    __int16 v37 = v41;
  }
  else
  {
    unsigned int v18 = 0;
    int v19 = 0;
    unint64_t v20 = 0;
    __int16 v21 = 0;
    int v22 = a1;
    do
    {
      __int16 v23 = (_DWORD *)v22[6];
      uint64_t v24 = (_DWORD *)v22[7];
      if (v23 == v24)
      {
LABEL_31:
        std::string __p = v18;
        int v25 = *(_DWORD *)(*(void *)v16 + 44);
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v26 = v21 - v18;
          unint64_t v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v20 - (void)__p) >> 1 > v27) {
            unint64_t v27 = (uint64_t)(v20 - (void)__p) >> 1;
          }
          if (v20 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v28)
          {
            unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v28);
            __int16 v21 = v19;
          }
          else
          {
            uint64_t v29 = 0;
          }
          unsigned int v18 = (_DWORD *)(v28 + 4 * v26);
          _DWORD *v18 = v25;
          int v19 = v18 + 1;
          while (v21 != __p)
          {
            int v30 = *--v21;
            *--unsigned int v18 = v30;
          }
          unint64_t v20 = v28 + 4 * v29;
          if (__p) {
            operator delete(__p);
          }
          __int16 v21 = v19;
          int v22 = a1;
        }
        else
        {
          *v21++ = v25;
          int v19 = v21;
        }
      }
      else
      {
        while (*(_DWORD *)(*(void *)v16 + 44) != *v23)
        {
          if (++v23 == v24) {
            goto LABEL_31;
          }
        }
      }
      v16 += 8;
    }
    while (v16 != v17);
    if (v18 == v21)
    {
      __int16 v37 = v41;
      unint64_t v7 = v41;
      __pa = v18;
      __int16 v21 = v18;
    }
    else
    {
      std::string::size_type v31 = *(HALS_ObjectMap ***)(v2 + 576);
      int v32 = v18;
      do
      {
        uint64_t v33 = *(HALS_ObjectMap ***)(v2 + 568);
        if (v33 != v31)
        {
          while (*((_DWORD *)*v33 + 11) != *v32)
          {
            if (++v33 == v31) {
              goto LABEL_58;
            }
          }
          (*(void (**)(HALS_ObjectMap *))(*(void *)*v33 + 8))(*v33);
          HALS_ObjectMap::ReleaseObject(*v33, v34);
          unsigned int v35 = *(HALS_ObjectMap ***)(v2 + 576);
          int64_t v36 = (char *)v35 - (char *)(v33 + 1);
          if (v35 != v33 + 1) {
            memmove(v33, v33 + 1, (char *)v35 - (char *)(v33 + 1));
          }
          std::string::size_type v31 = (HALS_ObjectMap **)((char *)v33 + v36);
          *(void *)(v2 + 576) = (char *)v33 + v36;
        }
LABEL_58:
        ++v32;
      }
      while (v32 != v21);
      __pa = v18;
      __int16 v37 = v41;
      unint64_t v7 = v41;
    }
  }
  if (v4 != v37) {
    operator new();
  }
  if (__pa) {
    operator delete(__pa);
  }
  if (v4) {
    operator delete(v4);
  }
  BOOL v39 = v7 != v4 || v21 != __pa;
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v39;
}

void sub_1BAAA6074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + ++*(_DWORD *)(this + 56) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_48c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = 0;
  uint64_t v2 = (void *)(a1 + 48);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 48), *(void *)(a2 + 56), (uint64_t)(*(void *)(a2 + 56) - *(void *)(a2 + 48)) >> 2);
}

void ___ZN11HALS_PlugIn19RebuildEndPointListEv_block_invoke(uint64_t a1)
{
}

void sub_1BAAA6158(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_PlugIn::CopyEndPointByUCID(HALS_PlugIn *this, int a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = ___ZNK11HALS_PlugIn18CopyEndPointByUCIDEj_block_invoke;
  v5[3] = &unk_1E62305B0;
  v5[4] = &v7;
  unsigned char v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAAA6240(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RemoveEndPoint(HALS_PlugIn *this, HALS_PlugInDevice *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN11HALS_PlugIn14RemoveEndPointEP17HALS_PlugInDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_35;
  v3[4] = this;
  unsigned char v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void ___ZN11HALS_PlugIn11AddEndPointEP17HALS_PlugInDevice_block_invoke(void *a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_PlugIn *)a1[5];
  uint64_t v3 = a1[6];
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
  int v5 = HALS_PlugIn::CopyEndPointByUID(v2, v4, 0);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      int v19 = 136315394;
      unint64_t v20 = "HALS_PlugIn.cpp";
      __int16 v21 = 1024;
      int v22 = 2042;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::_AddEndPoint: there is already a endpoint with this UID", (uint8_t *)&v19, 0x12u);
    }
    HALS_ObjectMap::ReleaseObject(v5, v6);
    int v7 = 1852797029;
  }
  else
  {
    uint64_t v8 = (void *)*((void *)v2 + 66);
    unint64_t v9 = *((void *)v2 + 67);
    if ((unint64_t)v8 >= v9)
    {
      unint64_t v11 = (void *)*((void *)v2 + 65);
      uint64_t v12 = v8 - v11;
      unint64_t v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v9 - (void)v11;
      if (v14 >> 2 > v13) {
        unint64_t v13 = v14 >> 2;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v13;
      }
      if (v15)
      {
        if (v15 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v16 = (char *)operator new(8 * v15);
      }
      else
      {
        uint64_t v16 = 0;
      }
      uint64_t v17 = &v16[8 * v12];
      *(void *)uint64_t v17 = v3;
      uint64_t v10 = v17 + 8;
      if (v8 != v11)
      {
        do
        {
          uint64_t v18 = *--v8;
          *((void *)v17 - 1) = v18;
          v17 -= 8;
        }
        while (v8 != v11);
        uint64_t v8 = (void *)*((void *)v2 + 65);
      }
      *((void *)v2 + 65) = v17;
      *((void *)v2 + 66) = v10;
      *((void *)v2 + 67) = &v16[8 * v15];
      if (v8) {
        operator delete(v8);
      }
    }
    else
    {
      *uint64_t v8 = v3;
      uint64_t v10 = v8 + 1;
    }
    int v7 = 0;
    *((void *)v2 + 66) = v10;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v7;
}

void sub_1BAAA64E8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA6494);
  }
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_PlugIn::CopyEndPointByUID(HALS_PlugIn *this, const __CFString *a2, HALS_Client *a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = &v12;
  uint64_t v14 = 0x4002000000;
  unint64_t v15 = __Block_byref_object_copy__24;
  uint64_t v16 = __Block_byref_object_dispose__25;
  memset(v17, 0, sizeof(v17));
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = ___ZNK11HALS_PlugIn17CopyEndPointByUIDEPK10__CFStringP11HALS_Client_block_invoke;
  void v11[3] = &unk_1E6230560;
  void v11[4] = &v12;
  v11[5] = this;
  v11[6] = a3;
  CFStringRef v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v11);
  int v6 = (HALS_ObjectMap **)v13[5];
  while (v6 != (HALS_ObjectMap **)v13[6])
  {
    int v7 = *v6;
    CFStringRef v8 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)*v6 + 200))(*v6);
    ++v6;
    if (CFEqual(v8, a2)) {
      goto LABEL_6;
    }
  }
  int v7 = 0;
LABEL_6:
  HALS_ObjectMap::RetainObject(v7, v5);
  _Block_object_dispose(&v12, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v17, v9);
  return v7;
}

void sub_1BAAA6694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v9, v11);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_PlugIn17CopyEndPointByUIDEPK10__CFStringP11HALS_Client_block_invoke(uint64_t a1)
{
}

void sub_1BAAA66E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_PlugIn14RemoveEndPointEP17HALS_PlugInDevice_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(HALS_ObjectMap ***)(v1 + 520);
  uint64_t v3 = *(HALS_ObjectMap ***)(v1 + 528);
  if (v2 != v3)
  {
    CFStringRef v4 = *(HALS_ObjectMap **)(a1 + 40);
    while (*v2 != v4)
    {
      if (++v2 == v3) {
        return;
      }
    }
    *uint64_t v2 = 0;
    int v5 = v2 + 1;
    int64_t v6 = (char *)v3 - (char *)(v2 + 1);
    if (v3 != v2 + 1) {
      memmove(v2, v5, (char *)v3 - (char *)(v2 + 1));
    }
    *(void *)(v1 + 528) = (char *)v2 + v6;
    HALS_ObjectMap::ReleaseObject(v4, (HALS_Object *)v5);
  }
}

void sub_1BAAA6780(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

HALS_ObjectMap *___ZNK11HALS_PlugIn18CopyEndPointByUCIDEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(HALS_PlugIn **)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  int NumberEndPoints = HALS_PlugIn::GetNumberEndPoints(v2, 0);
  if (NumberEndPoints)
  {
    int v5 = NumberEndPoints;
    unsigned int v6 = 0;
    while (1)
    {
      __n128 result = HALS_PlugIn::CopyEndPointByIndex(v2, v6, 0);
      if (*((_DWORD *)result + 331) == v3) {
        break;
      }
      HALS_ObjectMap::ReleaseObject(result, v8);
      if (v5 == ++v6) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    __n128 result = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_PlugIn::CopyDeviceByUCID(HALS_PlugIn *this, int a2)
{
  uint64_t v7 = 0;
  CFStringRef v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  std::runtime_error v5[2] = ___ZNK11HALS_PlugIn16CopyDeviceByUCIDEj_block_invoke;
  v5[3] = &unk_1E6230430;
  v5[4] = &v7;
  unsigned char v5[5] = this;
  int v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAAA68FC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::RemoveDevice(HALS_PlugIn *this, HALS_PlugInDevice *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke;
  v3[3] = &__block_descriptor_tmp_21;
  v3[4] = this;
  unsigned char v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

void HALS_PlugIn::AddDevice(HALS_PlugIn *this, HALS_PlugInDevice *a2)
{
  v4[0] = 0;
  v4[1] = v4;
  void v4[2] = 0x2000000000;
  int v5 = 0;
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  uint64_t v3[2] = ___ZN11HALS_PlugIn9AddDeviceEP17HALS_PlugInDevice_block_invoke;
  v3[3] = &unk_1E6230458;
  v3[4] = v4;
  unsigned char v3[5] = this;
  void v3[6] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
  _Block_object_dispose(v4, 8);
}

void sub_1BAAA6A64(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_PlugIn9AddDeviceEP17HALS_PlugInDevice_block_invoke(void *a1)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_DeviceManager *)a1[5];
  uint64_t v3 = a1[6];
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
  int v5 = HALS_DeviceManager::CopyDeviceByUID(v2, v4, 0);
  if (v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 216))(v3);
      int v23 = 136315650;
      uint64_t v24 = "HALS_PlugIn.cpp";
      __int16 v25 = 1024;
      int v26 = 1665;
      __int16 v27 = 2082;
      uint64_t v28 = v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInManager::_AddDevice: there is already a device with the UID, %{public}s", (uint8_t *)&v23, 0x1Cu);
    }
    HALS_ObjectMap::ReleaseObject(v5, v6);
    int v8 = 1852797029;
  }
  else
  {
    uint64_t v10 = (void *)*((void *)v2 + 63);
    unint64_t v9 = *((void *)v2 + 64);
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = *((void *)v2 + 62);
      uint64_t v13 = ((uint64_t)v10 - v12) >> 3;
      if ((unint64_t)(v13 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v14 = v9 - v12;
      uint64_t v15 = v14 >> 2;
      if (v14 >> 2 <= (unint64_t)(v13 + 1)) {
        uint64_t v15 = v13 + 1;
      }
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v16 = v15;
      }
      if (v16) {
        unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = (void *)(v16 + 8 * v13);
      unint64_t v19 = v16 + 8 * v17;
      void *v18 = v3;
      unint64_t v11 = v18 + 1;
      __int16 v21 = (char *)*((void *)v2 + 62);
      unint64_t v20 = (char *)*((void *)v2 + 63);
      if (v20 != v21)
      {
        do
        {
          uint64_t v22 = *((void *)v20 - 1);
          v20 -= 8;
          *--uint64_t v18 = v22;
        }
        while (v20 != v21);
        unint64_t v20 = (char *)*((void *)v2 + 62);
      }
      *((void *)v2 + 62) = v18;
      *((void *)v2 + 63) = v11;
      *((void *)v2 + 64) = v19;
      if (v20) {
        operator delete(v20);
      }
    }
    else
    {
      void *v10 = v3;
      unint64_t v11 = v10 + 1;
    }
    int v8 = 0;
    *((void *)v2 + 63) = v11;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v8;
}

void sub_1BAAA6C80(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA6C3CLL);
  }
  _Unwind_Resume(a1);
}

void ___ZN11HALS_PlugIn12RemoveDeviceEP17HALS_PlugInDevice_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (char *)v1[62];
  uint64_t v3 = (HALS_ObjectMap **)v1[63];
  if (v2 != (char *)v3)
  {
    CFStringRef v4 = *(HALS_ObjectMap **)(a1 + 40);
    int v5 = (HALS_ObjectMap **)v1[62];
    while (*v5 != v4)
    {
      if (++v5 == v3) {
        return;
      }
    }
    HALS_ObjectMap *v5 = 0;
    int v6 = v5 + 1;
    int64_t v7 = (char *)v3 - (char *)(v5 + 1);
    if (v3 != v5 + 1)
    {
      memmove(v5, v6, (char *)v3 - (char *)(v5 + 1));
      uint64_t v2 = (char *)v1[62];
    }
    int v8 = (char *)v5 + v7;
    v1[63] = (char *)v5 + v7;
    uint64_t v9 = v1[64];
    if ((((char *)v5 + v7 - v2) >> 3) + 20 >= (unint64_t)((v9 - (uint64_t)v2) >> 3)) {
      goto LABEL_19;
    }
    uint64_t v10 = (unsigned char *)v1[62];
    unint64_t v11 = (v8 - v10) >> 3;
    if (v11 >= (v9 - (uint64_t)v10) >> 3) {
      goto LABEL_19;
    }
    if (v8 == v10)
    {
      uint64_t v15 = 0;
      uint64_t v14 = 8 * v11;
    }
    else
    {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>((v8 - v10) >> 3);
      uint64_t v13 = (char *)v1[62];
      int v8 = (char *)v1[63];
      uint64_t v14 = (uint64_t)&v12[8 * v11];
      uint64_t v15 = &v12[8 * (void)v6];
      if (v8 != v13)
      {
        uint64_t v16 = v14;
        do
        {
          uint64_t v17 = *((void *)v8 - 1);
          v8 -= 8;
          *(void *)(v16 - 8) = v17;
          v16 -= 8;
        }
        while (v8 != v13);
        int v8 = (char *)v1[62];
        goto LABEL_17;
      }
    }
    uint64_t v16 = v14;
LABEL_17:
    v1[62] = v16;
    v1[63] = v14;
    v1[64] = v15;
    if (v8) {
      operator delete(v8);
    }
LABEL_19:
    HALS_ObjectMap::ReleaseObject(v4, (HALS_Object *)v6);
  }
}

void sub_1BAAA6DE4(void *a1)
{
}

void sub_1BAAA6DF4(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_PlugIn16CopyDeviceByUCIDEj_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(HALS_DeviceManager **)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 48);
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v12 = 0;
  HALS_DeviceManager::CopyDeviceList(v2, (HALS_DeviceManager::BasicDeviceList *)&v10, 1, 0);
  int v5 = v10;
  if (v10 == v11)
  {
    int v6 = 0;
  }
  else
  {
    int v6 = 0;
    do
    {
      int v8 = *v5++;
      int64_t v7 = v8;
      if (*((_DWORD *)v8 + 331) == v3) {
        int v6 = v7;
      }
    }
    while (v5 != v11);
  }
  HALS_ObjectMap::RetainObject(v6, v4);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(&v10, v9);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
}

void sub_1BAAA6EB4(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, ...)
{
  va_start(va, a3);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'HALS_PlugIn::~HALS_PlugIn(HALS_PlugIn *this)
{
  HALS_PlugIn::~HALS_PlugIn((HALS_PlugIn *)((char *)this - 328));

  JUMPOUT(0x1C1859840);
}

{
  HALS_PlugIn::~HALS_PlugIn((HALS_PlugIn *)((char *)this - 328));
}

void HALS_PlugIn::~HALS_PlugIn(HALS_PlugIn *this)
{
  *(void *)this = &unk_1F145C478;
  uint64_t v2 = (HALS_PlugIn *)((char *)this + 328);
  *((void *)this + 41) = &unk_1F145C5C0;
  int v3 = (const void *)*((void *)this + 59);
  if (v3) {
    _Block_release(v3);
  }
  CFStringRef v4 = (const void *)*((void *)this + 60);
  if (v4) {
    _Block_release(v4);
  }
  int v5 = (const void *)*((void *)this + 61);
  if (v5) {
    _Block_release(v5);
  }
  (*(void (**)(void))(**((void **)this + 50) + 72))(*((void *)this + 50));
  if (*((unsigned char *)this + 384))
  {
    uint64_t v6 = *((void *)this + 49);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    }
    *((unsigned char *)this + 384) = 1;
    *((void *)this + 49) = 0;
  }
  int64_t v7 = (const void *)*((void *)this + 58);
  if (v7) {
    CFRelease(v7);
  }
  int v8 = (HALB_Mutex *)*((void *)this + 46);
  if (v8)
  {
    HALB_Mutex::~HALB_Mutex(v8);
    MEMORY[0x1C1859840]();
  }
  uint64_t v9 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 47);
  if (v9)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v9);
    MEMORY[0x1C1859840]();
  }
  uint64_t v10 = (void *)*((void *)this + 71);
  if (v10)
  {
    *((void *)this + 72) = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)*((void *)this + 68);
  if (v11)
  {
    *((void *)this + 69) = v11;
    operator delete(v11);
  }
  uint64_t v12 = (void *)*((void *)this + 65);
  if (v12)
  {
    *((void *)this + 66) = v12;
    operator delete(v12);
  }
  uint64_t v13 = (void *)*((void *)this + 62);
  if (v13)
  {
    *((void *)this + 63) = v13;
    operator delete(v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 51);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  HALS_PlugInObject::~HALS_PlugInObject(v2);
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_PlugIn *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

{
  uint64_t vars8;

  HALS_PlugIn::~HALS_PlugIn(this);

  JUMPOUT(0x1C1859840);
}

void HALS_PlugIn::_CopyDeviceList(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 496);
  int v3 = *(HALS_ObjectMap ***)(a1 + 504);
  if (v2 != v3)
  {
    CFStringRef v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      int v5 = *v2;
      int64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        uint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        void *v13 = v5;
        int v8 = v13 + 1;
        uint64_t v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        const void *v4 = v13;
        v4[1] = v8;
        void v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *int64_t v7 = v5;
        int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_DeviceManager::CopyMetaDeviceByIsolatedUseCaseID()
{
  return 0;
}

void HALS_PlugIn::_CopyIODeviceList(void *a1, void **a2)
{
  uint64_t v2 = a2;
  CFStringRef v4 = (HALS_ObjectMap **)a1[68];
  for (unint64_t i = (HALS_ObjectMap **)a1[69]; v4 != i; ++v4)
  {
    HALS_ObjectMap::RetainObject(*v4, (HALS_Object *)a2);
    unint64_t v6 = *v4;
    int v8 = (HALS_ObjectMap **)v2[1];
    unint64_t v7 = (unint64_t)v2[2];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v10 = ((char *)v8 - (unsigned char *)*v2) >> 3;
      if ((unint64_t)(v10 + 1) >> 61) {
LABEL_38:
      }
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      uint64_t v11 = v7 - (void)*v2;
      uint64_t v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
        uint64_t v12 = v10 + 1;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v12;
      }
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
      }
      else {
        a2 = 0;
      }
      uint64_t v14 = (HALS_ObjectMap **)(v13 + 8 * v10);
      *uint64_t v14 = v6;
      uint64_t v9 = v14 + 1;
      uint64_t v16 = (char *)*v2;
      uint64_t v15 = (char *)v2[1];
      if (v15 != *v2)
      {
        do
        {
          uint64_t v17 = (HALS_ObjectMap *)*((void *)v15 - 1);
          v15 -= 8;
          *--uint64_t v14 = v17;
        }
        while (v15 != v16);
        uint64_t v15 = (char *)*v2;
      }
      *uint64_t v2 = v14;
      v2[1] = v9;
      v2[2] = (void *)(v13 + 8 * (void)a2);
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      *int v8 = v6;
      uint64_t v9 = v8 + 1;
    }
    v2[1] = v9;
  }
  unint64_t v19 = (HALS_ObjectMap **)a1[62];
  for (j = (HALS_ObjectMap **)a1[63]; v19 != j; ++v19)
  {
    HALS_ObjectMap::RetainObject(*v19, (HALS_Object *)a2);
    unint64_t v20 = *v19;
    uint64_t v22 = (HALS_ObjectMap **)v2[1];
    unint64_t v21 = (unint64_t)v2[2];
    if ((unint64_t)v22 >= v21)
    {
      uint64_t v24 = ((char *)v22 - (unsigned char *)*v2) >> 3;
      if ((unint64_t)(v24 + 1) >> 61) {
        goto LABEL_38;
      }
      uint64_t v25 = v21 - (void)*v2;
      uint64_t v26 = v25 >> 2;
      if (v25 >> 2 <= (unint64_t)(v24 + 1)) {
        uint64_t v26 = v24 + 1;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v26;
      }
      if (v27) {
        unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v27);
      }
      else {
        a2 = 0;
      }
      uint64_t v28 = (HALS_ObjectMap **)(v27 + 8 * v24);
      std::string *v28 = v20;
      int v23 = v28 + 1;
      int v30 = (char *)*v2;
      uint64_t v29 = (char *)v2[1];
      if (v29 != *v2)
      {
        do
        {
          std::string::size_type v31 = (HALS_ObjectMap *)*((void *)v29 - 1);
          v29 -= 8;
          *--uint64_t v28 = v31;
        }
        while (v29 != v30);
        uint64_t v29 = (char *)*v2;
      }
      *uint64_t v2 = v28;
      v2[1] = v23;
      v2[2] = (void *)(v27 + 8 * (void)a2);
      if (v29) {
        operator delete(v29);
      }
    }
    else
    {
      void *v22 = v20;
      int v23 = v22 + 1;
    }
    v2[1] = v23;
  }
}

void HALS_PlugIn::_CopyClockDeviceList(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 544);
  int v3 = *(HALS_ObjectMap ***)(a1 + 552);
  if (v2 != v3)
  {
    CFStringRef v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      int v5 = *v2;
      unint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        void *v13 = v5;
        int v8 = v13 + 1;
        uint64_t v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        const void *v4 = v13;
        v4[1] = v8;
        void v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_PlugIn::_CopyBoxList(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 568);
  int v3 = *(HALS_ObjectMap ***)(a1 + 576);
  if (v2 != v3)
  {
    CFStringRef v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      int v5 = *v2;
      unint64_t v7 = (HALS_ObjectMap **)v4[1];
      unint64_t v6 = (unint64_t)v4[2];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - (void)*v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        void *v13 = v5;
        int v8 = v13 + 1;
        uint64_t v15 = (char *)*v4;
        uint64_t v14 = (char *)v4[1];
        if (v14 != *v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*v4;
        }
        const void *v4 = v13;
        v4[1] = v8;
        void v4[2] = (void *)(v12 + 8 * (void)a2);
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        int v8 = v7 + 1;
      }
      v4[1] = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_PlugIn::DoAnyQueuesHaveWorkAfterFlush(HALS_PlugIn *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*((void *)this + 47) + 33));
  return v1 & 1;
}

void HALS_PlugIn::FlushAllQueues(AMCP::Utility::Dispatch_Queue **this)
{
}

uint64_t HALS_Object::GetLocalizedStringKey(HALS_Object *this, const AudioObjectPropertyAddress *a2)
{
  return 0;
}

uint64_t HALS_Object::AllowClientAccessToProperty()
{
  return 1;
}

void HALS_PlugIn::SetPropertyData(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, HALS_Client *a8)
{
  if (a3->mSelector == 1819173229)
  {
    uint64_t v12 = *((void *)this + 42);
    uint64_t v13 = *(void *)(v12 + 400);
    uint64_t v14 = *(std::__shared_weak_count **)(v12 + 408);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v15 = *((unsigned int *)this + 87);
    if (a8) {
      uint64_t v16 = *((unsigned int *)a8 + 58);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v29 = 0x676C6F626C6E616DLL;
    int v30 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, const void *))(*(void *)v13 + 584))(v13, v15, v16, &v29, 0, 0, a4, a5);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    if (HALS_DeviceManager::HasProperty(this, a2, a3, a8)
      && HALS_DeviceManager::IsPropertySettable((uint64_t)this, (uint64_t)a2, (int *)a3))
    {
      HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v21, v22, v23, v24, (uint64_t)a8);
    }
    if ((*(unsigned int (**)(char *, void))(*((void *)this + 41) + 24))((char *)this + 328, a3->mSelector))
    {
      uint64_t v25 = *((void *)this + 42);
      uint64_t v26 = *(void *)(v25 + 400);
      unint64_t v27 = *(std::__shared_weak_count **)(v25 + 408);
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a8) {
        uint64_t v28 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v28 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, const void *))(*(void *)v26 + 584))(v26, *((unsigned int *)this + 87), v28, a3, a6, a7, a4, a5);
      if (v27)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
    }
  }
}

void sub_1BAAA77F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugIn::GetPropertyData(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, unsigned int *a5, uint64_t *a6, uint64_t a7, const __CFString **a8, HALS_Client *a9)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1920168546)
  {
    if (mSelector == 1668641652)
    {
      unsigned int v31 = a4 / 0xC;
      if (*((_DWORD *)this + 90) < a4 / 0xC) {
        unsigned int v31 = *((_DWORD *)this + 90);
      }
      if (v31)
      {
        uint64_t v32 = 0;
        unint64_t v33 = 0;
        do
        {
          if (v33 < *((unsigned int *)this + 90))
          {
            char v34 = (char *)a6 + v32;
            unsigned int v35 = (uint64_t *)(*((void *)this + 44) + v32);
            uint64_t v36 = *v35;
            *((_DWORD *)v34 + 2) = *((_DWORD *)v35 + 2);
            *(void *)char v34 = v36;
          }
          ++v33;
          v32 += 12;
        }
        while (12 * v31 != v32);
      }
      int v26 = 12 * v31;
    }
    else
    {
      if (mSelector != 1701733411) {
        goto LABEL_34;
      }
      unsigned int NumberEndPoints = HALS_PlugIn::GetNumberEndPoints(this, a9);
      if (a4 >> 2 >= NumberEndPoints) {
        uint64_t v22 = NumberEndPoints;
      }
      else {
        uint64_t v22 = a4 >> 2;
      }
      if (v22)
      {
        for (uint64_t i = 0; i != v22; ++i)
        {
          uint64_t v24 = HALS_PlugIn::CopyEndPointByIndex(this, i, a9);
          *((_DWORD *)a6 + i) = *((_DWORD *)v24 + 4);
          HALS_ObjectMap::ReleaseObject(v24, v25);
        }
      }
      int v26 = 4 * v22;
    }
LABEL_33:
    *a5 = v26;
    return;
  }
  switch(mSelector)
  {
    case 0x72737263u:
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          long long v45 = "HALS_PlugIn.cpp";
          __int16 v46 = 1024;
          int v47 = 591;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyResourceBundle", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 561211770;
      }
      *a6 = (uint64_t)HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 328, (uint64_t)a9);
      int v26 = 8;
      goto LABEL_33;
    case 0x7472616Eu:
      uint64_t v27 = *((void *)this + 42);
      uint64_t v28 = *(void *)(v27 + 400);
      uint64_t v29 = *(std::__shared_weak_count **)(v27 + 408);
      if (v29) {
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a9) {
        uint64_t v30 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v30 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const __CFString **, uint64_t, unsigned int *, uint64_t *))(*(void *)v28 + 576))(v28, *((unsigned int *)this + 87), v30, a3, a7, a8, a4, a5, a6);
      goto LABEL_45;
    case 0x75696465u:
      if (a7 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          long long v45 = "HALS_PlugIn.cpp";
          __int16 v46 = 1024;
          int v47 = 558;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::GetPropertyData: the qualifier is the wrong size for kAudioTransportManagerPropertyTranslateUIDToEndPoint", buf, 0x12u);
        }
        long long v41 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v41 = off_1F148A5D8;
        void v41[2] = 1852797029;
      }
      if (!a8)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          long long v45 = "HALS_PlugIn.cpp";
          __int16 v46 = 1024;
          int v47 = 559;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::GetPropertyData: no qualifier data for kAudioHardwarePropertyDeviceForUID", buf, 0x12u);
        }
        uint64_t v42 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v42 = off_1F148A5D8;
        v42[2] = 1852797029;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          long long v45 = "HALS_PlugIn.cpp";
          __int16 v46 = 1024;
          int v47 = 564;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::GetPropertyData: bad property data size for kAudioTransportManagerPropertyTranslateUIDToEndPoint", buf, 0x12u);
        }
        std::string::size_type v43 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::string::size_type v43 = off_1F148A5D8;
        v43[2] = 561211770;
      }
      uint64_t v18 = HALS_PlugIn::CopyEndPointByUID(this, *a8, a9);
      if (v18) {
        int v20 = *((_DWORD *)v18 + 4);
      }
      else {
        int v20 = 0;
      }
      *(_DWORD *)a6 = v20;
      *a5 = 4;
      HALS_ObjectMap::ReleaseObject(v18, v19);
      return;
  }
LABEL_34:
  if (HALS_DeviceManager::HasProperty(this, a2, a3, a9))
  {
    HALS_DeviceManager::GetPropertyData(this, (uint64_t)a2, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  if (!(*(unsigned int (**)(char *, void))(*((void *)this + 41) + 24))((char *)this + 328, a3->mSelector))return; {
  uint64_t v37 = *((void *)this + 42);
  }
  uint64_t v38 = *(void *)(v37 + 400);
  uint64_t v29 = *(std::__shared_weak_count **)(v37 + 408);
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a9) {
    uint64_t v39 = *((unsigned int *)a9 + 58);
  }
  else {
    uint64_t v39 = 0;
  }
  (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, const __CFString **, uint64_t, unsigned int *, uint64_t *))(*(void *)v38 + 576))(v38, *((unsigned int *)this + 87), v39, a3, a7, a8, a4, a5, a6);
LABEL_45:
  if (v29)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_1BAAA7EF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugIn::GetPropertyDataSize(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, HALS_Client *a6)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1851878763)
  {
    if (mSelector == 1668641652) {
      return (12 * *((_DWORD *)this + 90));
    }
    if (mSelector == 1701733411) {
      return 4 * HALS_PlugIn::GetNumberEndPoints(this, a6);
    }
    int v13 = 1819173229;
  }
  else
  {
    if (mSelector > 1953653101)
    {
      if (mSelector == 1953653102 || mSelector == 1969841253) {
        return 4;
      }
      goto LABEL_19;
    }
    if (mSelector == 1851878764) {
      return 8;
    }
    int v13 = 1920168547;
  }
  if (mSelector == v13) {
    return 8;
  }
LABEL_19:
  if (!HALS_DeviceManager::HasProperty(this, a2, a3, a6))
  {
    if (!(*(unsigned int (**)(char *, void))(*((void *)this + 41) + 24))((char *)this + 328, a3->mSelector))return 0; {
    uint64_t v17 = *((void *)this + 42);
    }
    uint64_t v18 = *(void *)(v17 + 400);
    unint64_t v19 = *(std::__shared_weak_count **)(v17 + 408);
    if (v19) {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a6) {
      uint64_t v20 = *((unsigned int *)a6 + 58);
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, uint64_t, _DWORD *))(*(void *)v18 + 568))(v18, *((unsigned int *)this + 87), v20, a3, a4, a5);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    return v14;
  }

  return HALS_DeviceManager::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

void sub_1BAAA813C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugIn::IsPropertySettable(HALS_PlugIn *this, HALS_Client *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t v8 = 0;
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1920168546)
  {
    if (mSelector == 1920168547 || mSelector == 1953653102 || mSelector == 1969841253) {
      return v8;
    }
  }
  else
  {
    if (mSelector == 1668641652 || mSelector == 1701733411) {
      return v8;
    }
    if (mSelector == 1819173229)
    {
      uint64_t v11 = *((void *)this + 42);
      uint64_t v12 = *(void *)(v11 + 400);
      int v13 = *(std::__shared_weak_count **)(v11 + 408);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *((unsigned int *)this + 87);
      if (a4) {
        uint64_t v15 = *((unsigned int *)a4 + 58);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v24 = 0x676C6F626C6E616DLL;
      int v25 = 0;
      uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v12 + 560))(v12, v14, v15, &v24);
      if (!v13) {
        return v8;
      }
      uint64_t v23 = v13;
      goto LABEL_30;
    }
  }
  if (!HALS_DeviceManager::HasProperty(this, a2, a3, a4))
  {
    if (!(*(unsigned int (**)(char *, void))(*((void *)this + 41) + 24))((char *)this + 328, a3->mSelector))return 0; {
    uint64_t v19 = *((void *)this + 42);
    }
    uint64_t v20 = *(void *)(v19 + 400);
    uint64_t v21 = *(std::__shared_weak_count **)(v19 + 408);
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a4) {
      uint64_t v22 = *((unsigned int *)a4 + 58);
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v8 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v20 + 560))(v20, *((unsigned int *)this + 87), v22, a3);
    if (!v21) {
      return v8;
    }
    uint64_t v23 = v21;
LABEL_30:
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    return v8;
  }

  return HALS_DeviceManager::IsPropertySettable((uint64_t)this, (uint64_t)a2, (int *)a3);
}

void sub_1BAAA837C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugIn::HasProperty(HALS_PlugIn *this, HALS_Client *a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1920168546)
  {
    if (mSelector == 1668641652) {
      return *((_DWORD *)this + 90) != 0;
    }
    int v8 = 1701733411;
    goto LABEL_7;
  }
  if (mSelector != 1920168547)
  {
    if (mSelector == 1953653102)
    {
      if (*((_DWORD *)this + 5) == 1953656941)
      {
        uint64_t v12 = *((void *)this + 42);
        uint64_t v13 = *(void *)(v12 + 400);
        uint64_t v14 = *(std::__shared_weak_count **)(v12 + 408);
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v15 = *((unsigned int *)this + 87);
        if (a4) {
          uint64_t v16 = *((unsigned int *)a4 + 58);
        }
        else {
          uint64_t v16 = 0;
        }
        goto LABEL_28;
      }
      return 0;
    }
    int v8 = 1969841253;
LABEL_7:
    if (mSelector == v8) {
      return *((_DWORD *)this + 5) == 1953656941;
    }
    if (HALS_DeviceManager::HasProperty(this, a2, a3, a4)) {
      return 1;
    }
    if ((*(unsigned int (**)(char *, void))(*((void *)this + 41) + 24))((char *)this + 328, a3->mSelector))
    {
      uint64_t v17 = *((void *)this + 42);
      uint64_t v13 = *(void *)(v17 + 400);
      uint64_t v14 = *(std::__shared_weak_count **)(v17 + 408);
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v15 = *((unsigned int *)this + 87);
      if (a4) {
        uint64_t v16 = *((unsigned int *)a4 + 58);
      }
      else {
        uint64_t v16 = 0;
      }
LABEL_28:
      uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v13 + 552))(v13, v15, v16, a3);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      return v9;
    }
    return 0;
  }
  uint64_t v10 = (char *)this + 328;

  return HALS_PlugInObject::HasResourceBundle((uint64_t)v10, (uint64_t)a4);
}

void sub_1BAAA85BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugIn::CopyResourceBundle(HALS_PlugIn *this)
{
  uint64_t v5 = 0;
  unint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  void v4[2] = ___ZNK11HALS_PlugIn18CopyResourceBundleEv_block_invoke;
  void v4[3] = &unk_1E6230408;
  v4[4] = &v5;
  v4[5] = this;
  unsigned __int8 v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAAA86A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_PlugIn18CopyResourceBundleEv_block_invoke(uint64_t a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (!*(unsigned char *)(v2 + 384))
  {
    *(unsigned char *)(v2 + 384) = 1;
    if (HALS_PlugInObject::HasResourceBundle(v2 + 328, 0))
    {
      CFStringRef v3 = (const __CFString *)HALS_PlugInObject::CopyResourceBundlePath(v2 + 328, 0);
      CFStringRef v7 = v3;
      char v8 = 1;
      if (v3)
      {
        if (CFURLCreateWithFileSystemPath(0, v3, kCFURLPOSIXPathStyle, 1u)) {
          operator new();
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          uint64_t v10 = "HALS_PlugIn.cpp";
          __int16 v11 = 1024;
          int v12 = 721;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::_InitializeResourceBundle: Can't create a URL for the given path to the resource bundle", buf, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 2003329396;
      }
      CACFString::~CACFString((CACFString *)&v7);
    }
  }
  uint64_t v4 = *(void *)(v2 + 392);
  if (v4)
  {
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(v4 + 8);
    uint64_t v5 = *(const void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    CFRetain(v5);
  }
}

void sub_1BAAA88F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v11, 0x10A1C4047070A01);
    CACFObject<__CFURL const*>::~CACFObject((uint64_t)&a9);
    CACFString::~CACFString((CACFString *)&a11);
    __cxa_begin_catch(exception_object);
    *(void *)(v12 + 392) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAAA87B0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t CACFObject<__CFURL const*>::~CACFObject(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  return a1;
}

void CACFString::~CACFString(CACFString *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

uint64_t HALS_PlugIn::GetMIGDispatchQueue(HALS_PlugIn *this)
{
  return *((void *)this + 47);
}

{
  return *((void *)this + 47);
}

uint64_t HALS_PlugIn::GetCommandGate(HALS_PlugIn *this)
{
  return *((void *)this + 46);
}

{
  return *((void *)this + 46);
}

void HALS_PlugIn::_Deactivate(HALS_PlugIn *this)
{
  *((_DWORD *)this + 2) = 0;
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 62);
  CFStringRef v3 = (HALS_ObjectMap **)*((void *)this + 63);
  if (v2 != v3)
  {
    do
    {
      if (*v2)
      {
        (*(void (**)(HALS_ObjectMap *))(*(void *)*v2 + 8))(*v2);
        HALS_ObjectMap::ReleaseObject(*v2, v4);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 62);
  }
  *((void *)this + 63) = v2;
  uint64_t v5 = (HALS_ObjectMap **)*((void *)this + 68);
  unint64_t v6 = (HALS_ObjectMap **)*((void *)this + 69);
  if (v5 != v6)
  {
    do
    {
      if (*v5)
      {
        (*(void (**)(HALS_ObjectMap *))(*(void *)*v5 + 8))(*v5);
        HALS_ObjectMap::ReleaseObject(*v5, v7);
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v5 = (HALS_ObjectMap **)*((void *)this + 68);
  }
  *((void *)this + 69) = v5;
  (*(void (**)(void))(**((void **)this + 50) + 72))(*((void *)this + 50));
  if (*((unsigned char *)this + 384))
  {
    uint64_t v8 = *((void *)this + 49);
    if (v8) {
      (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
    }
    *((unsigned char *)this + 384) = 1;
    *((void *)this + 49) = 0;
  }
  uint64_t v9 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
  *(void *)&v10.AudioObjectPropertySelector mSelector = 0x676C6F62706C6723;
  v10.uint64_t mElement = 0;
  HALS_Object::PropertiesChanged(this, v9, 0, 1u, &v10);
}

void HALS_PlugIn::Activate(std::runtime_error_vtbl *this)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  int v36 = 0;
  uint64_t v2 = (*((uint64_t (**)(std::runtime_error_vtbl *))this->~runtime_error + 8))(this);
  v29.__vftable = this;
  v29.__imp_.__imp_ = (const char *)&__p;
  uint64_t v30 = &v36;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(v2 + 32));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  }
  uint64_t v4 = *(NSObject **)v2;
  *(void *)block = MEMORY[0x1E4F143A8];
  *(void *)&block[8] = 0x40000000;
  *(void *)&block[16] = ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31_InitializePlugInAndAndActivateERNSt3__16vectorIjNS4_9allocatorIjEEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke;
  *(void *)&block[24] = &__block_descriptor_tmp_88;
  *(void *)&block[32] = &v29;
  dispatch_sync(v4, block);
  if (v36)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)block, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)block;
    if (*(void *)&block[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&block[8]);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)block = 67109890;
      *(_DWORD *)&void block[4] = v18;
      *(_WORD *)&block[8] = 2080;
      *(void *)&block[10] = "HALS_PlugIn.cpp";
      *(_WORD *)&block[18] = 1024;
      *(_DWORD *)&block[20] = 165;
      *(_WORD *)&block[24] = 2080;
      *(void *)&block[26] = "theError != kAudioHardwareNoError";
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device activation failed", block, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v28, "Device activation failed");
    std::runtime_error::runtime_error(&v29, &v28);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v30 = (int *)&unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)block, (uint64_t)&v29);
    *(void *)&block[32] = "void HALS_PlugIn::_InitializePlugInAndAndActivate(std::vector<AudioObjectID> &)";
    uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/PlugIn/HALS_PlugIn.cpp";
    int v39 = 165;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    int v25 = &unk_1F148AA90;
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  memset(block, 0, 32);
  v29.__vftable = (std::runtime_error_vtbl *)0x676C6F62706C6723;
  LODWORD(v29.__imp_.__imp_) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v29, v6);
  if (HALS_DeviceManager::GetNumberDevices((HALS_DeviceManager *)this, 0, v7))
  {
    v29.__vftable = (std::runtime_error_vtbl *)0x676C6F6264657623;
    LODWORD(v29.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v29, v8);
  }
  if (HALS_PlugIn::GetNumberEndPoints((HALS_PlugIn *)this, 0))
  {
    v29.__vftable = (std::runtime_error_vtbl *)0x676C6F62656E6423;
    LODWORD(v29.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v29, v9);
  }
  if (HALS_DeviceManager::GetNumberBoxes((HALS_DeviceManager *)this, 0))
  {
    v29.__vftable = (std::runtime_error_vtbl *)0x676C6F62626F7823;
    LODWORD(v29.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v29, v11);
  }
  if (HALS_DeviceManager::GetNumberClockDevices((HALS_DeviceManager *)this, v10))
  {
    v29.__vftable = (std::runtime_error_vtbl *)0x676C6F62636C6B23;
    LODWORD(v29.__imp_.__imp_) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)block, (AudioObjectPropertyAddress *)&v29, v12);
  }
  uint64_t v13 = *(void **)block;
  unsigned int v14 = -1431655765 * ((*(void *)&block[8] - *(void *)block) >> 2);
  if (v14) {
    HALS_Object::PropertiesChanged((HALS_Object *)this, (HALS_NotificationManager *)LODWORD(this->what), 0, v14, *(const AudioObjectPropertyAddress **)block);
  }
  if (v13) {
    operator delete(v13);
  }
  uint64_t v15 = v21;
  if (v21 != __p)
  {
    v19[0] = 0;
    v19[1] = 0;
    HALS_System::GetInstance(block, 0, v19);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_PlatformBehaviors **)block, (uint64_t)&__p);
    if (*(void *)&block[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&block[8]);
    }
    uint64_t v15 = __p;
  }
  if (v15)
  {
    uint64_t v21 = v15;
    operator delete(v15);
  }
}

void sub_1BAAA9008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,std::runtime_error a24,char a25)
{
  uint64_t v27 = *(std::__shared_weak_count **)(v25 - 104);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void CAPropertyAddressList::AppendUniqueItem(CAPropertyAddressList *this, AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3)
{
  uint64_t v5 = *(void *)this;
  unint64_t v6 = (AudioObjectPropertyAddress *)*((void *)this + 1);
  if (*(AudioObjectPropertyAddress **)this == v6)
  {
    unint64_t v6 = *(AudioObjectPropertyAddress **)this;
LABEL_8:
    uint64_t v21 = *(void *)&a2->mSelector;
    AudioObjectPropertyElement mElement = a2->mElement;
    unint64_t v8 = *((void *)this + 2);
    if ((unint64_t)v6 >= v8)
    {
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - v5) >> 2) + 1;
      if (v11 > 0x1555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - v5) >> 2);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x1555555555555555;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      unint64_t v15 = v13 + 4 * (((uint64_t)v6 - v5) >> 2);
      unint64_t v16 = v13 + 12 * v14;
      *(void *)unint64_t v15 = v21;
      *(_DWORD *)(v15 + 8) = mElement;
      AudioObjectPropertyAddress v10 = (AudioObjectPropertyAddress *)(v15 + 12);
      mach_port_t v18 = *(_DWORD **)this;
      uint64_t v17 = (_DWORD *)*((void *)this + 1);
      if (v17 != *(_DWORD **)this)
      {
        do
        {
          uint64_t v19 = *(void *)(v17 - 3);
          v17 -= 3;
          int v20 = v17[2];
          *(void *)(v15 - 12) = v19;
          v15 -= 12;
          *(_DWORD *)(v15 + 8) = v20;
        }
        while (v17 != v18);
        uint64_t v17 = *(_DWORD **)this;
      }
      *(void *)this = v15;
      *((void *)this + 1) = v10;
      *((void *)this + 2) = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      uint64_t v9 = *(void *)&a2->mSelector;
      v6->AudioObjectPropertyElement mElement = a2->mElement;
      *(void *)&v6->AudioObjectPropertySelector mSelector = v9;
      AudioObjectPropertyAddress v10 = v6 + 1;
    }
    *((void *)this + 1) = v10;
    return;
  }
  CFStringRef v7 = *(const AudioObjectPropertyAddress **)this;
  while (!CAPropertyAddress::IsCongruentAddress((CAPropertyAddress *)a2, v7, a3))
  {
    if (++v7 == v6) {
      goto LABEL_8;
    }
  }
  if (v7 == v6) {
    goto LABEL_8;
  }
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31_InitializePlugInAndAndActivateERNSt3__16vectorIjNS4_9allocatorIjEEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  unsigned __int8 v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *v1;
  char v3 = (*(uint64_t (**)(void))(**(void **)(*v1 + 400) + 24))(*(void *)(*v1 + 400));
  uint64_t v4 = **(void **)(v2 + 400);
  if (v3) {
    (*(void (**)(void))(v4 + 64))();
  }
  else {
    (*(void (**)(void))(v4 + 56))();
  }
  HALS_Object::Activate((HALS_Object *)v2, v5);
  (*(void (**)(void))(*(void *)(v2 + 328) + 32))();
  HALS_PlugIn::RebuildDeviceList((HALS_PlugIn *)&v6, v2);
}

void sub_1BAAA9378(void *a1)
{
  __cxa_begin_catch(a1);
  **(_DWORD **)(v1 + 16) = 2003329396;
  __cxa_end_catch();
}

void HALS_PlugIn::HALS_PlugIn(uint64_t a1, HALS_System *a2, uint64_t a3, uint64_t a4, HALS_Object *a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  HALS_DeviceManager::HALS_DeviceManager((HALS_DeviceManager *)a1, a2, @"temporary", a4, a5);
  *(_DWORD *)(v7 + 344) = *(_DWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 348) = 1;
  *(void *)(v7 + 352) = 0;
  *(_DWORD *)(v7 + 360) = 0;
  *(void *)uint64_t v7 = &unk_1F145C478;
  *(void *)(v7 + 328) = &unk_1F145C5C0;
  *(void *)(v7 + 336) = v7;
  *(void *)(v7 + 392) = 0;
  *(void *)(v7 + 368) = 0;
  *(void *)(v7 + 376) = 0;
  *(unsigned char *)(v7 + 384) = 0;
  *(_OWORD *)(v7 + 400) = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v7 + 560) = 0u;
  *(_OWORD *)(v7 + 576) = 0u;
  *(_OWORD *)(v7 + 528) = 0u;
  *(_OWORD *)(v7 + 544) = 0u;
  *(_OWORD *)(v7 + 496) = 0u;
  *(_OWORD *)(v7 + 512) = 0u;
  *(_OWORD *)(v7 + 464) = 0u;
  *(_OWORD *)(v7 + 480) = 0u;
  *(_OWORD *)(v7 + 432) = 0u;
  *(_OWORD *)(v7 + 448) = 0u;
  *(_OWORD *)(v7 + 416) = 0u;
  *(_DWORD *)(v7 + 44) = 1;
  unint64_t v8 = (const void *)(*(uint64_t (**)(void))(**(void **)(v7 + 400) + 40))(*(void *)(v7 + 400));
  uint64_t v9 = (void *)CACFString::operator=(a1 + 48, v8);
  if (*v9)
  {
    *(void *)(a1 + 464) = CFStringCreateWithFormat(0, 0, @"Plug-In.%@", *v9);
    int aBlock = 256;
    CACFString::GetCString(*(const __CFString **)(a1 + 48), (__CFString *)(a1 + 64), (char *)&aBlock, v10);
    operator new[]();
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int aBlock = 136315394;
    aBlock_4 = "HALS_PlugIn.cpp";
    __int16 v14 = 1024;
    int v15 = 252;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::InitializeCommon: all plugins have to have a bundle ID", (uint8_t *)&aBlock, 0x12u);
  }
  exception = __cxa_allocate_exception(0x10uLL);
  *(void *)exception = off_1F148A5D8;
  exception[2] = 1852797029;
}

void sub_1BAAA98C8(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA9888);
  }
  _Unwind_Resume(a1);
}

void sub_1BAAA98E0()
{
  MEMORY[0x1C1859840](v3, 0x10A0C40CF3E2C79);
  MEMORY[0x1C1859810](v2, 0x1000C8077774924);
  uint64_t v4 = (void *)*((void *)v0 + 71);
  if (v4)
  {
    *((void *)v0 + 72) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)v0 + 68);
  if (v5)
  {
    *((void *)v0 + 69) = v5;
    operator delete(v5);
  }
  long long v6 = (void *)*((void *)v0 + 65);
  if (v6)
  {
    *((void *)v0 + 66) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)v0 + 62);
  if (v7)
  {
    *((void *)v0 + 63) = v7;
    operator delete(v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)v0 + 51);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  HALS_PlugInObject::~HALS_PlugInObject(v1);
  HALS_DeviceManager::~HALS_DeviceManager(v0);
  JUMPOUT(0x1BAAA9980);
}

uint64_t HALS_UCPlugInBase::Object_GetClass(HALS_UCPlugInBase *this, uint64_t a2)
{
  uint64_t v3 = 0x676C6F62636C6173;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_UCPlugInBase *, uint64_t, void, uint64_t *))(*(void *)this + 576))(this, a2, 0, &v3);
  return HIDWORD(v5);
}

uint64_t HALS_UCPlugInBase::Object_GetBaseClass(HALS_UCPlugInBase *this, uint64_t a2)
{
  uint64_t v3 = 0x676C6F6262636C73;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_UCPlugInBase *, uint64_t, void, uint64_t *))(*(void *)this + 576))(this, a2, 0, &v3);
  return HIDWORD(v5);
}

uint64_t HALS_PlugIn::HostInterface_RequestDeviceConfigurationChange(HALS_PlugIn **this, const AudioServerPlugInHostInterface *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID(this[5], (int)a2);
  if (v9 || (uint64_t v9 = (HALS_ObjectMap *)HALS_PlugIn::CopyEndPointByUCID(this[5], (int)a2)) != 0)
  {
    if ((*(unsigned int (**)(HALS_ObjectMap *))(*(void *)v9 + 40))(v9))
    {
      *(void *)&long long v25 = a3;
      *((void *)&v25 + 1) = a4;
      char v26 = 1;
      HALS_PlugInDevice::HandlePlugIn_RequestConfigChange((uint64_t)v9, &v25, 0);
    }
    else
    {
      unint64_t v11 = this[5];
      uint64_t v12 = *((void *)v11 + 50);
      unint64_t v13 = (std::__shared_weak_count *)*((void *)v11 + 51);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, const AudioServerPlugInHostInterface *, uint64_t, uint64_t))(*(void *)v12 + 104))(v12, a2, a3, a4);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    HALS_ObjectMap::ReleaseObject(v9, v10);
  }
  else
  {
    uint64_t v15 = HALS_PlugIn::CopyClockDeviceByUCID(this[5], (int)a2);
    uint64_t v16 = v15;
    if (!v15)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)block = 136315394;
        *(void *)&void block[4] = "HALS_PlugIn.cpp";
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = 1069;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::HostInterface_RequestDeviceConfigurationChange: can't find a device/endpoint with that ID", block, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560227702;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 40))(v15))
    {
      int v17 = *(_DWORD *)(v16 + 16);
      int v18 = *(_DWORD *)(v16 + 388);
      int v19 = *(_DWORD *)(*(void *)(v16 + 376) + 16);
      *(void *)block = MEMORY[0x1E4F143A8];
      *(void *)&block[8] = 0x40000000;
      *(void *)&block[16] = ___ZN22HALS_PlugInClockDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEb_block_invoke;
      std::runtime_error v28 = &__block_descriptor_tmp_9638;
      int v32 = v19;
      int v33 = v17;
      uint64_t v29 = a3;
      uint64_t v30 = a4;
      char v31 = 1;
      int v34 = v18;
      LOBYTE(v18) = atomic_load((unsigned __int8 *)(v16 + 448));
      if (v18) {
        atomic_store(1u, (unsigned __int8 *)(v16 + 449));
      }
      dispatch_async(*(dispatch_queue_t *)(v16 + 416), block);
    }
    else
    {
      uint64_t v21 = this[5];
      uint64_t v22 = *((void *)v21 + 50);
      long long v23 = (std::__shared_weak_count *)*((void *)v21 + 51);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, const AudioServerPlugInHostInterface *, uint64_t, uint64_t))(*(void *)v22 + 104))(v22, a2, a3, a4);
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v16, v20);
  }
  return 0;
}

void sub_1BAAA9DC4(_Unwind_Exception *exception_object, HALS_Object *a2)
{
  if (a2)
  {
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    HALS_ObjectMap::ReleaseObject(v2, a2);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAAA9BACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAAA9E94()
{
}

uint64_t HALS_PlugIn::HostInterface_DeleteFromStorage(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, const __CFString *a3)
{
  CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(const __CFString **)(*((void *)this + 5) + 464));
  CFDictionaryRef v11 = Setting;
  char v12 = 1;
  if (Setting)
  {
    CFTypeID v6 = CFGetTypeID(Setting);
    if (v6 == CFDictionaryGetTypeID())
    {
      CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      __int16 v10 = 257;
      CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&theDict, v11);
      CFMutableDictionaryRef v7 = theDict;
      if (HIBYTE(v10))
      {
        if (theDict)
        {
          CFDictionaryRemoveValue(theDict, a2);
          CFMutableDictionaryRef v7 = theDict;
        }
      }
      HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((void *)this + 5) + 464), v7);
    }
    HALS_SettingsManager::DeleteSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((void *)this + 5) + 464));
  }
  CACFObject<void const*>::~CACFObject((uint64_t)&v11);
  return 0;
}

void sub_1BAAA9FA0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  CACFObject<void const*>::~CACFObject((uint64_t)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAA9F88);
}

CFMutableDictionaryRef CACFDictionary::SetCFMutableDictionaryFromCopy(CACFDictionary *this, CFDictionaryRef theDict)
{
  if (*((unsigned char *)this + 8))
  {
    int v4 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v4);
    }
  }
  CFMutableDictionaryRef result = CFDictionaryCreateMutableCopy(0, 0, theDict);
  *(void *)this = result;
  *((_WORD *)this + 4) = 257;
  return result;
}

void CACFDictionary::~CACFDictionary(CACFDictionary *this)
{
  if (*((unsigned char *)this + 8))
  {
    uint64_t v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

uint64_t CACFObject<void const*>::~CACFObject(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = *(const void **)a1;
    if (*(void *)a1)
    {
      CFRelease(v2);
      *(void *)a1 = 0;
    }
  }
  return a1;
}

void HALS_PlugIn::HostInterface_WriteToStorage(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, const __CFString *a3, const void *a4)
{
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  __int16 v13 = 257;
  CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(const __CFString **)(*((void *)this + 5) + 464));
  CFDictionaryRef v10 = Setting;
  char v11 = 1;
  if (Setting)
  {
    CFTypeID v8 = CFGetTypeID(Setting);
    if (v8 != CFDictionaryGetTypeID()) {
      HALS_SettingsManager::DeleteSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((void *)this + 5) + 464));
    }
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&theDict, v10);
  }
  CFMutableDictionaryRef v9 = theDict;
  if (HIBYTE(v13) && a3)
  {
    if (theDict)
    {
      CFDictionarySetValue(theDict, a2, a3);
      CFMutableDictionaryRef v9 = theDict;
    }
  }
  HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((void *)this + 5) + 464), v9);
}

void sub_1BAAAA1D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

__CFString *HALS_PlugIn::HostInterface_CopyFromStorage(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, __CFString *a3, const void **a4)
{
  int v4 = a3;
  if (a3)
  {
    a3->isa = 0;
    CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(const __CFString **)(*((void *)this + 5) + 464));
    CFDictionaryRef theDict = Setting;
    char v14 = 1;
    if (!Setting)
    {
LABEL_11:
      CACFObject<void const*>::~CACFObject((uint64_t)&theDict);
      return 0;
    }
    CFTypeID v8 = CFGetTypeID(Setting);
    if (v8 != CFDictionaryGetTypeID()) {
      HALS_SettingsManager::DeleteSetting(*(HALS_SettingsManager **)(*(void *)(*((void *)this + 5) + 320) + 1408), *(CFTypeRef *)(*((void *)this + 5) + 464));
    }
    CFDictionaryRef v11 = theDict;
    __int16 v12 = 0;
    if (theDict)
    {
      Value = (void *)CFDictionaryGetValue(theDict, a2);
      v4->isa = Value;
      if (!Value) {
        goto LABEL_10;
      }
    }
    else
    {
      Value = v4->isa;
      if (!v4->isa)
      {
LABEL_10:
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v11);
        goto LABEL_11;
      }
    }
    CFRetain(Value);
    goto LABEL_10;
  }
  return v4;
}

void sub_1BAAAA2FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t HALS_PlugIn::HostInterface_PropertiesChanged(HALS_PlugIn *this, const AudioServerPlugInHostInterface *a2, unsigned int a3, const void *a4, const AudioObjectPropertyAddress *a5)
{
  int v38 = (int)a2;
  v53[2] = *MEMORY[0x1E4F143B8];
  std::string __p = 0;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(&__p, a4, (uint64_t)a4 + 12 * a3, a3);
  CFMutableDictionaryRef v7 = (_anonymous_namespace_ *)__p;
  CFTypeID v8 = v44;
  CFMutableDictionaryRef v9 = (_anonymous_namespace_ *)__p;
  if (__p != v44)
  {
    CFMutableDictionaryRef v9 = (_anonymous_namespace_ *)__p;
    while ((AMCP::HAL::is_config_change_property((AMCP::HAL *)*(unsigned int *)v9) & 1) == 0)
    {
      CFMutableDictionaryRef v9 = (_anonymous_namespace_ *)((char *)v9 + 12);
      if (v9 == v8) {
        goto LABEL_14;
      }
    }
    if (v9 != v8)
    {
      for (uint64_t i = (_anonymous_namespace_ *)((char *)v9 + 12); i != v8; uint64_t i = (_anonymous_namespace_ *)((char *)i + 12))
      {
        if ((AMCP::HAL::is_config_change_property((AMCP::HAL *)*(unsigned int *)i) & 1) == 0)
        {
          uint64_t v11 = *(void *)i;
          *((_DWORD *)v9 + 2) = *((_DWORD *)i + 2);
          *(void *)CFMutableDictionaryRef v9 = v11;
          CFMutableDictionaryRef v9 = (_anonymous_namespace_ *)((char *)v9 + 12);
        }
      }
    }
  }
  if (v9 != v8)
  {
    CFTypeID v6 = (const AudioObjectPropertyAddress *)v8;
    CFTypeID v8 = v9;
    uint64_t v44 = v9;
  }
LABEL_14:
  if (v8 != v7)
  {
    {
LABEL_16:
      CFMutableDictionaryRef v7 = (_anonymous_namespace_ *)((char *)v7 + 12);
      if (v7 == v8) {
        goto LABEL_22;
      }
    }
    while (1)
    {
      CFTypeID v8 = (_anonymous_namespace_ *)((char *)v8 - 12);
      if (v8 == v7) {
        break;
      }
      {
        __int16 v12 = *(void **)v7;
        LODWORD(v48) = *((_DWORD *)v7 + 2);
        int v47 = v12;
        uint64_t v13 = *(void *)v8;
        *((_DWORD *)v7 + 2) = *((_DWORD *)v8 + 2);
        *(void *)CFMutableDictionaryRef v7 = v13;
        char v14 = v47;
        *((_DWORD *)v8 + 2) = v48;
        *(void *)CFTypeID v8 = v14;
        goto LABEL_16;
      }
    }
  }
  CFTypeID v8 = v7;
LABEL_22:
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  int v47 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v47, __p, (uint64_t)v8, 0xAAAAAAAAAAAAAAABLL * ((v8 - (_anonymous_namespace_ *)__p) >> 2));
  uint64_t v15 = v47;
  uint64_t v16 = v48;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  int v47 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(&v47, v8, (uint64_t)v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - v8) >> 2));
  int v17 = v47;
  uint64_t v18 = v48;
  LODWORD(v47) = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v37 = v17;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v48, v15, v16, 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v15) >> 2));
  int v51 = 1;
  v53[0] = 0;
  v53[1] = 0;
  uint64_t v52 = 0;
  std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v52, v17, v18, 0xAAAAAAAAAAAAAAABLL * ((v18 - (uint64_t)v17) >> 2));
  uint64_t v19 = 0;
  int v20 = &v47;
  do
  {
    uint64_t v21 = &v47 + 4 * v19;
    uint64_t v22 = v21[1];
    uint64_t v23 = (uint64_t)v21[2];
    if (v22 != (const void *)v23)
    {
      uint64_t v24 = (std::__shared_weak_count *)operator new(0x30uLL);
      *(_OWORD *)&v24->__shared_owners_ = 0u;
      v24->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464018;
      v24[1].__vftable = 0;
      *(_OWORD *)&v24[1].__shared_owners_ = 0u;
      std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress*,AudioObjectPropertyAddress*>(&v24[1].__vftable, v22, v23, 0xAAAAAAAAAAAAAAABLL * ((v23 - (uint64_t)v22) >> 2));
      int v39 = v24 + 1;
      uint64_t v40 = v24;
      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      int v41 = v38;
      uint64_t v42 = this;
      int v25 = (*(uint64_t (**)(void))(**((void **)this + 5) + 40))(*((void *)this + 5));
      if (*(_DWORD *)v20) {
        int v26 = 0;
      }
      else {
        int v26 = v25;
      }
      uint64_t v27 = *(uint64_t (**)(void))(**((void **)this + 5) + 64);
      if (v26 != 1)
      {
        uint64_t v31 = v27();
        unsigned __int8 v32 = atomic_load((unsigned __int8 *)(v31 + 32));
        if (v32) {
          atomic_store(1u, (unsigned __int8 *)(v31 + 33));
        }
        operator new();
      }
      uint64_t v28 = v27();
      unsigned __int8 v29 = atomic_load((unsigned __int8 *)(v28 + 32));
      if (v29) {
        atomic_store(1u, (unsigned __int8 *)(v28 + 33));
      }
      uint64_t v30 = *(NSObject **)v28;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31HostInterface_PropertiesChangedEPK30AudioServerPlugInHostInterfacejjPK26AudioObjectPropertyAddressE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke;
      block[3] = &__block_descriptor_tmp_90;
      void block[4] = &v39;
      dispatch_sync(v30, block);
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    uint64_t v33 = v19 + 1;
    int v20 = &v47 + 4 * v19 + 4;
    uint64_t v19 = 1;
  }
  while (v33 != 2);
  for (uint64_t j = 0; j != -8; j -= 4)
  {
    uint64_t v35 = (void *)v53[j - 1];
    if (v35)
    {
      v53[j] = v35;
      operator delete(v35);
    }
  }
  if (v37) {
    operator delete(v37);
  }
  if (v15) {
    operator delete(v15);
  }
  if (__p) {
    operator delete(__p);
  }
  return 0;
}

void sub_1BAAAA830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,void *__p,uint64_t a27)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    if (a9) {
      operator delete(a9);
    }
    if (a10) {
      operator delete(a10);
    }
    if (a17) {
      operator delete(a17);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAAAA7ECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BAAAA930()
{
}

void *std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<AudioObjectPropertyAddress const*,AudioObjectPropertyAddress const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFTypeID v6 = result;
    CFMutableDictionaryRef result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFMutableDictionaryRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAAA998(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<AudioObjectPropertyAddress>::__init_with_size[abi:ne180100]<std::__wrap_iter<AudioObjectPropertyAddress*>,std::__wrap_iter<AudioObjectPropertyAddress*>>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    CFTypeID v6 = result;
    CFMutableDictionaryRef result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      CFMutableDictionaryRef result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAAAA14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN10applesauce8dispatch2v19sync_implIRZN11HALS_PlugIn31HostInterface_PropertiesChangedEPK30AudioServerPlugInHostInterfacejjPK26AudioObjectPropertyAddressE3__0EEvP16dispatch_queue_sOT_NSt3__117integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
}

uint64_t *std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x1C1859840](v2, 0x1060C4005D4F44ELL);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0 &>(dispatch_queue_s *,HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v2 = a1;
  HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0::operator()(a1);
  return std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_1BAAAAAC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0,std::default_delete<HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void HALS_PlugIn::HostInterface_PropertiesChanged(AudioServerPlugInHostInterface const*,unsigned int,unsigned int,AudioObjectPropertyAddress const*)::$_0::operator()(uint64_t **a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = **a1;
  uint64_t v3 = -1431655765 * ((unint64_t)((*a1)[1] - v2) >> 2);
  int v4 = *((_DWORD *)a1 + 4);
  uint64_t v5 = (HALS_PlugIn *)a1[3][5];
  if (v4 != 1)
  {
    uint64_t v7 = HALS_PlugIn::CopyObjectByUCID(v5, v4);
    size_t v8 = (unsigned int *)v7;
    if (v7)
    {
      CFMutableDictionaryRef v9 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)v7 + 40))(v7);
      if (v9)
      {
        CFDictionaryRef v10 = (HALS_Object *)v8[5];
        uint64_t v11 = (HALB_Info *)v8[6];
        if (v10 == v11 || v10 == 1633841016)
        {
          BOOL v13 = v10 == v11;
          if (v10 == 1633841016) {
            BOOL v13 = 0;
          }
          if (!v13) {
            goto LABEL_64;
          }
        }
        else if (v11 == 1633841016)
        {
LABEL_64:
          (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(void *)v8 + 232))(v8, v3, v2);
          goto LABEL_41;
        }
        if ((int)v10 <= 1701078389)
        {
          BOOL v14 = v10 == 1633773415;
          int v15 = 1633969526;
        }
        else
        {
          BOOL v14 = v10 == 1701078390 || v10 == 1701733488;
          int v15 = 1919182198;
        }
        if (!v14 && v10 != v15)
        {
          if (v10 == v11)
          {
            if (v10 == 1634956402) {
              goto LABEL_64;
            }
LABEL_63:
            if (!HALS_Object::IsSubClass((HALS_Object *)v8[5], (HALB_Info *)v8[6], 1633907820))
            {
              if (HALS_Object::IsSubClass(v10, v11, 1633905771)) {
                (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(void *)v8 + 456))(v8, v3, v2);
              }
              goto LABEL_41;
            }
            goto LABEL_64;
          }
          if ((int)v11 <= 1701078389)
          {
            BOOL v28 = v11 == 1633773415;
            int v29 = 1633969526;
          }
          else
          {
            BOOL v28 = v11 == 1701078390 || v11 == 1919182198;
            int v29 = 1701733488;
          }
          if (!v28 && v11 != v29)
          {
            if (v10 == v11 || v10 == 1634956402 || v11 == 1634956402) {
              goto LABEL_64;
            }
            goto LABEL_63;
          }
        }
        (*(void (**)(unsigned int *, uint64_t, uint64_t))(*(void *)v8 + 952))(v8, v3, v2);
LABEL_41:
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v27);
        return;
      }
      AMCP::Log::Scope_Registry::get(v9);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
      uint64_t v23 = *v33;
      if (*(void *)v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
      }
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = pthread_self();
        mach_port_t v25 = pthread_mach_thread_np(v24);
        LODWORD(v33) = 67109634;
        HIDWORD(v33) = v25;
        *(_WORD *)int v34 = 2080;
        *(void *)&v34[2] = "HALS_PlugIn.cpp";
        __int16 v35 = 1024;
        int v36 = 840;
        _os_log_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_PlugIn::HostInterface_PropertiesChanged: the object is not active yet", (uint8_t *)&v33, 0x18u);
      }
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
      uint64_t v19 = *v33;
      if (*(void *)v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        uint64_t v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        LODWORD(v33) = 67109634;
        HIDWORD(v33) = v22;
        *(_WORD *)int v34 = 2080;
        *(void *)&v34[2] = "HALS_PlugIn.cpp";
        __int16 v35 = 1024;
        int v36 = 834;
        _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_PlugIn::HostInterface_PropertiesChanged: the object is not valid", (uint8_t *)&v33, 0x18u);
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v20);
    return;
  }
  CFTypeID v6 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_PlugIn *))(*(void *)v5 + 40))(v5);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1[3][5] + 304))(a1[3][5], v3, v2);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v33, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = *v33;
    if (*(void *)v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      LODWORD(v33) = 67109634;
      HIDWORD(v33) = v18;
      *(_WORD *)int v34 = 2080;
      *(void *)&v34[2] = "HALS_PlugIn.cpp";
      __int16 v35 = 1024;
      int v36 = 822;
      _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_PlugIn::HostInterface_PropertiesChanged: the plug-in is not active yet", (uint8_t *)&v33, 0x18u);
    }
  }
}

uint64_t HALS_Object::IsSubClass(HALS_Object *this, HALB_Info *a2, int a3)
{
  int v5 = (int)this;
  LODWORD(result) = HALB_Info::IsSubClass(this, a3);
  char v7 = result;
  if (v5 == a2) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 1;
  }
  if (v5 != a2 && (v7 & 1) == 0)
  {
    return HALB_Info::IsSubClass(a2, a3);
  }
  return result;
}

void std::__shared_ptr_emplace<std::vector<AudioObjectPropertyAddress>>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void std::__shared_ptr_emplace<std::vector<AudioObjectPropertyAddress>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::vector<AudioObjectPropertyAddress>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1464018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t anonymous namespace'::ShouldDispatchSynchronously(_anonymous_namespace_ *this, const AudioObjectPropertyAddress *a2)
{
  int v2 = *(_DWORD *)this;
  uint64_t result = 1;
  if (v2 > 1684370978)
  {
    BOOL v4 = v2 == 1684370979;
    int v5 = 1701733411;
  }
  else
  {
    BOOL v4 = v2 == 1651472419;
    int v5 = 1668049699;
  }
  if (!v4 && v2 != v5) {
    return 0;
  }
  return result;
}

uint64_t ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke(uint64_t a1, const HALS_Object *a2, int a3, uint64_t a4, unsigned int a5, int *a6)
{
  unint64_t v10 = *(void *)(a1 + 32);
  if (HALS_ObjectMap::IsObjectMapped(v10, a2))
  {
    if (a5)
    {
      uint64_t v11 = a5;
      do
      {
        int v12 = *a6++;
        BOOL v14 = (HALS_Device *)HALS_PlugIn::CopyDeviceByUCID((HALS_PlugIn *)v10, v12);
        if (v14)
        {
          HALS_System::DeviceDied(*(HALS_System **)(v10 + 320), v14);
          (*(void (**)(HALS_Device *))(*(void *)v14 + 8))(v14);
          HALS_PlugIn::RemoveDevice((HALS_PlugIn *)v10, v14);
        }
        HALS_ObjectMap::ReleaseObject(v14, v13);
        --v11;
      }
      while (v11);
    }
    memset(__p, 0, sizeof(__p));
    if (a3)
    {
      uint64_t v15 = 0;
      do
      {
        int v17 = (HALS_ObjectMap *)HALS_PlugIn::CopyDeviceByUCID((HALS_PlugIn *)v10, *(_DWORD *)(a4 + 4 * v15));
        if (!v17) {
          operator new();
        }
        HALS_ObjectMap::ReleaseObject(v17, v16);
        ++v15;
      }
      while (v15 != a3);
    }
    mach_port_t v18 = (HALS_NotificationManager *)*(unsigned int *)(v10 + 16);
    *(void *)&v21.AudioObjectPropertySelector mSelector = 0x676C6F6264657623;
    v21.AudioObjectPropertyElement mElement = 0;
    HALS_Object::PropertiesChanged((HALS_Object *)v10, v18, 0, 1u, &v21);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_PlatformBehaviors **)(v10 + 320), (uint64_t)__p);
    if (__p[0]) {
      operator delete(__p[0]);
    }
  }
  return 0;
}

void sub_1BAAAB584(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAAB55CLL);
}

void sub_1BAAAB5F0(void *a1)
{
}

uint64_t ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke_2(uint64_t a1, const HALS_Object *a2, int a3, uint64_t a4, uint64_t a5)
{
  size_t v8 = *(HALS_PlugIn **)(a1 + 32);
  if (HALS_ObjectMap::IsObjectMapped((unint64_t)v8, a2))
  {
    CFMutableDictionaryRef v9 = HALS_PlugIn::CopyObjectByUCID(v8, a3);
    uint64_t v11 = v9;
    if (v9)
    {
      int v12 = *((_DWORD *)v9 + 5);
      if (v12 <= 1701078389)
      {
        BOOL v13 = v12 == 1633773415;
        int v14 = 1633969526;
      }
      else
      {
        BOOL v13 = v12 == 1701078390 || v12 == 1701733488;
        int v14 = 1919182198;
      }
      if (!v13 && v12 != v14)
      {
        int v17 = (HALB_Info *)*((unsigned int *)v9 + 6);
        if (v12 == v17)
        {
          if (v12 == 1634956402)
          {
LABEL_19:
            (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t))(*(void *)v9 + 232))(v9, a4, a5);
            goto LABEL_15;
          }
          if (((v12 != v17) | HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)v9 + 5), 1633907820)) != 1) {
            goto LABEL_15;
          }
LABEL_26:
          (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t))(*(void *)v11 + 232))(v11, a4, a5);
          goto LABEL_15;
        }
        if ((int)v17 <= 1701078389)
        {
          BOOL v18 = v17 == 1633773415;
          int v19 = 1633969526;
        }
        else
        {
          BOOL v18 = v17 == 1701078390 || v17 == 1919182198;
          int v19 = 1701733488;
        }
        if (!v18 && v17 != v19)
        {
          if (v12 == v17 || v12 == 1634956402 || v17 == 1634956402) {
            goto LABEL_19;
          }
          BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)*((unsigned int *)v9 + 5), 1633907820);
          if (v12 != v17 && !IsSubClass && !HALB_Info::IsSubClass(v17, 1633907820)) {
            goto LABEL_15;
          }
          goto LABEL_26;
        }
      }
      (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t))(*(void *)v9 + 952))(v9, a4, a5);
    }
LABEL_15:
    HALS_ObjectMap::ReleaseObject(v11, v10);
  }
  return 0;
}

void sub_1BAAAB84C(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAAB6E4);
}

void sub_1BAAAB8A0(void *a1)
{
}

uint64_t ___ZN11HALS_PlugIn18InitializeHostInfoEv_block_invoke_3(uint64_t a1, const HALS_Object *a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  size_t v8 = *(HALS_PlugIn **)(a1 + 32);
  if (HALS_ObjectMap::IsObjectMapped((unint64_t)v8, a2))
  {
    uint64_t v9 = HALS_PlugIn::CopyDeviceByUCID(v8, a3);
    unint64_t v10 = (HALS_ObjectMap *)v9;
    if (!v9)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int v14 = 136315394;
        *(void *)&v14[4] = "HALS_PlugIn.cpp";
        *(_WORD *)&v14[12] = 1024;
        *(_DWORD *)&v14[14] = 1220;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugIn::HostInfo_RequestDeviceConfigChange: no device with the given UC ID", v14, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560947818;
    }
    *(void *)int v14 = a4;
    *(void *)&v14[8] = a5;
    unsigned char v14[16] = 1;
    HALS_PlugInDevice::HandlePlugIn_RequestConfigChange(v9, (long long *)v14, 0);
    HALS_ObjectMap::ReleaseObject(v10, v11);
  }
  return 0;
}

uint64_t CACFString::operator=(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef v4 = *(CFTypeRef *)a1;
  if (v4 != cf)
  {
    if (v4) {
      BOOL v5 = *(unsigned char *)(a1 + 8) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5) {
      CFRelease(v4);
    }
    *(void *)a1 = cf;
  }
  *(unsigned char *)(a1 + 8) = 1;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

void ___ZN11HALS_PlugIn25RemoveAllDevicesAndNotifyEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(HALS_System ***)(a1 + 32);
  uint64_t v39 = 0;
  uint64_t v40 = &v39;
  uint64_t v41 = 0x4002000000;
  uint64_t v42 = __Block_byref_object_copy_;
  std::string::size_type v43 = __Block_byref_object_dispose_;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v2 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 6))(v1);
  v38[0] = MEMORY[0x1E4F143A8];
  v38[1] = 0x40000000;
  v38[2] = ___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke;
  v38[3] = &unk_1E62304C0;
  v38[4] = &v39;
  v38[5] = v1;
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v38);
  uint64_t v3 = (HALS_Device **)v40[5];
  CFTypeRef v4 = (HALS_Device **)v40[6];
  while (v3 != v4)
  {
    BOOL v5 = *v3;
    if (*v3)
    {
      HALS_System::DeviceDied(v1[40], *v3);
      (*(void (**)(HALS_PlugInDevice *))(*(void *)v5 + 456))(v5);
      (*(void (**)(HALS_PlugInDevice *))(*(void *)v5 + 8))(v5);
      HALS_PlugIn::RemoveDevice((HALS_PlugIn *)v1, v5);
    }
    ++v3;
  }
  __int16 v35 = 0;
  int v36 = 0;
  uint64_t v37 = 0;
  HALS_DeviceManager::CopyClockDeviceList((uint64_t)v1, (uint64_t)&v35);
  CFTypeID v6 = v35;
  char v7 = v36;
  while (v6 != v7)
  {
    size_t v8 = *v6;
    uint64_t v9 = v1[40];
    unint64_t v10 = (const BOOL *)*((unsigned int *)*v6 + 4);
    unsigned int v11 = *((_DWORD *)*v6 + 7);
    CFStringRef v12 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)*v6 + 200))(*v6);
    HALS_System::ClockDeviceDied(v9, v10, v11, v12);
    (*(void (**)(HALS_PlugInClockDevice *))(*(void *)v8 + 8))(v8);
    HALS_PlugIn::RemoveClockDevice((HALS_PlugIn *)v1, v8);
    ++v6;
  }
  unsigned __int8 v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  HALS_DeviceManager::CopyBoxList((uint64_t)v1, (uint64_t)&v32, 0);
  BOOL v13 = v32;
  for (uint64_t i = v33; v13 != i; ++v13)
  {
    uint64_t v15 = *v13;
    (*(void (**)(HALS_ObjectMap *))(*(void *)*v13 + 8))(*v13);
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 0x40000000;
    v47[2] = ___ZN11HALS_PlugIn9RemoveBoxEP14HALS_PlugInBox_block_invoke;
    v47[3] = &__block_descriptor_tmp_37;
    v47[4] = v1;
    v47[5] = v15;
    uint64_t v16 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
    HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v47);
  }
  uint64_t v26 = 0;
  uint64_t v27 = &v26;
  uint64_t v28 = 0x4002000000;
  int v29 = __Block_byref_object_copy__24;
  uint64_t v30 = __Block_byref_object_dispose__25;
  memset(v31, 0, sizeof(v31));
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  _DWORD v25[2] = ___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke_26;
  v25[3] = &unk_1E62304E8;
  v25[4] = &v26;
  v25[5] = v1;
  int v17 = (HALB_Mutex *)(*((uint64_t (**)(HALS_System **))*v1 + 7))(v1);
  HALB_CommandGate::ExecuteCommand(v17, (uint64_t)v25);
  BOOL v18 = (HALS_PlugInDevice **)v27[5];
  int v19 = (HALS_PlugInDevice **)v27[6];
  while (v18 != v19)
  {
    int v20 = *v18;
    (*(void (**)(HALS_PlugInDevice *))(*(void *)*v18 + 8))(*v18);
    HALS_PlugIn::RemoveEndPoint((HALS_PlugIn *)v1, v20);
    ++v18;
  }
  _Block_object_dispose(&v26, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v31, v21);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&v32, v22);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&v35, v23);
  _Block_object_dispose(&v39, 8);
  if (v44)
  {
    uint64_t v45 = v44;
    operator delete(v44);
  }
  uint64_t v24 = (HALS_NotificationManager *)*((unsigned int *)v1 + 4);
  uint64_t v39 = 0x676C6F6264657623;
  LODWORD(v40) = 0;
  HALS_Object::PropertiesChanged((HALS_Object *)v1, v24, 0, 1u, (const AudioObjectPropertyAddress *)&v39);
  HALS_System::CheckForDefaultDeviceChanges(v1[40]);
}

void sub_1BAAABFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,HALS_ObjectMap **a23,uint64_t a24,uint64_t a25,HALS_ObjectMap **a26)
{
  _Block_object_dispose(&a15, 8);
  HALS_DeviceManager::BasicDeviceList::~BasicDeviceList(v26, v29);
  HALS_DeviceManager::BasicBoxList::~BasicBoxList(&a23, v30);
  HALS_DeviceManager::BasicClockDeviceList::~BasicClockDeviceList(&a26, v31);
  _Block_object_dispose((const void *)(v27 - 192), 8);
  unsigned __int8 v32 = *(void **)(v27 - 152);
  if (v32)
  {
    *(void *)(v27 - 144) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  return result;
}

void __Block_byref_object_dispose_(uint64_t a1)
{
  int v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke(char *result)
{
  uint64_t v1 = *((void *)result + 5);
  int v2 = *(void **)(*((void *)result + 4) + 8);
  if (v2 + 5 != (void *)(v1 + 496))
  {
    uint64_t v3 = *(char **)(v1 + 496);
    CFTypeRef v4 = *(unsigned char **)(v1 + 504);
    size_t v5 = v4 - v3;
    unint64_t v6 = (v4 - v3) >> 3;
    uint64_t v7 = v2[7];
    size_t v8 = (char *)v2[5];
    if (v6 <= (v7 - (uint64_t)v8) >> 3)
    {
      int v14 = (char *)v2[6];
      unsigned int v11 = (char **)(v2 + 6);
      BOOL v13 = v14;
      size_t v15 = v14 - v8;
      unint64_t v16 = (v14 - v8) >> 3;
      if (v16 < v6)
      {
        int v17 = &v3[8 * v16];
        if (v13 != v8)
        {
          __n128 result = (char *)memmove(v8, v3, v15);
          size_t v8 = *v11;
        }
        size_t v5 = v4 - v17;
        if (v4 == v17) {
          goto LABEL_21;
        }
        BOOL v18 = v8;
        int v19 = v17;
        goto LABEL_20;
      }
    }
    else
    {
      if (v8)
      {
        v2[6] = v8;
        operator delete(v8);
        uint64_t v7 = 0;
        v2[5] = 0;
        v2[6] = 0;
        v2[7] = 0;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        goto LABEL_23;
      }
      uint64_t v9 = v7 >> 2;
      if (v7 >> 2 <= v6) {
        uint64_t v9 = (v4 - v3) >> 3;
      }
      unint64_t v10 = (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v9;
      if (v10 >> 61) {
LABEL_23:
      }
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v10);
      size_t v8 = result;
      v2[6] = result;
      unsigned int v11 = (char **)(v2 + 6);
      *(v11 - 1) = result;
      v11[1] = &result[8 * v12];
    }
    if (v4 == v3)
    {
LABEL_21:
      HALS_Object *v11 = &v8[v5];
      return result;
    }
    BOOL v18 = v8;
    int v19 = v3;
LABEL_20:
    __n128 result = (char *)memmove(v18, v19, v5);
    goto LABEL_21;
  }
  return result;
}

void ___ZN11HALS_PlugIn17_RemoveAllDevicesEv_block_invoke_26(uint64_t a1)
{
}

void sub_1BAAAC1AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_PlugIn9RemoveBoxEP14HALS_PlugInBox_block_invoke(uint64_t a1, HALS_Object *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 568);
  CFTypeRef v4 = *(HALS_ObjectMap ***)(v2 + 576);
  if (v3 != v4)
  {
    while (*v3 != *(HALS_ObjectMap **)(a1 + 40))
    {
      if (++v3 == v4)
      {
        uint64_t v3 = *(HALS_ObjectMap ***)(v2 + 576);
        break;
      }
    }
  }
  if (v3 != v4)
  {
    HALS_ObjectMap::ReleaseObject(*v3, a2);
    size_t v5 = *(HALS_ObjectMap ***)(v2 + 576);
    int64_t v6 = (char *)v5 - (char *)(v3 + 1);
    if (v5 != v3 + 1) {
      memmove(v3, v3 + 1, (char *)v5 - (char *)(v3 + 1));
    }
    *(void *)(v2 + 576) = (char *)v3 + v6;
  }
}

void asbd_to_dictionary(const CA::StreamDescription *a1, uint64_t *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)v15, "SampleRate");
  uint64_t valuePtr = *a2;
  if (!CFNumberCreate(0, kCFNumberDoubleType, &valuePtr))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v17, "FormatID");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 2);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    size_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
    __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v19, "FormatFlags");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 3);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    uint64_t v9 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v9, "Could not construct");
    __cxa_throw(v9, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned int const&>((applesauce::CF::TypeRef *)&v21, "BytesPerPacket", (int *)a2 + 4);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v22, "FramesPerPacket");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 5);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    unint64_t v10 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v10, "Could not construct");
    __cxa_throw(v10, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v24, "BytesPerFrame");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 6);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    unsigned int v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v26, "ChannelsPerFrame");
  LODWORD(valuePtr) = *((_DWORD *)a2 + 7);
  if (!CFNumberCreate(0, kCFNumberIntType, &valuePtr))
  {
    uint64_t v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned int const&>((applesauce::CF::TypeRef *)v28, "BitsPerChannel", (int *)a2 + 8);
  v13[0] = v15;
  v13[1] = 8;
  uint64_t v4 = 0;
  *(void *)a1 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v13);
  do
  {
    size_t v5 = *(const void **)&v28[v4 + 8];
    if (v5) {
      CFRelease(v5);
    }
    int64_t v6 = *(const void **)&v28[v4];
    if (v6) {
      CFRelease(v6);
    }
    v4 -= 16;
  }
  while (v4 != -128);
}

void sub_1BAAAC5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, CFTypeRef a13, uint64_t a14, CFTypeRef a15, uint64_t a16, CFTypeRef a17, uint64_t a18, uint64_t a19, uint64_t a20,CFTypeRef a21,uint64_t a22,CFTypeRef a23,uint64_t a24,CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  applesauce::CF::TypeRef::~TypeRef(v25);
  do
  {
    v25 -= 2;
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v25);
  }
  while (v25 != (const void **)&a12);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[15],unsigned int const&>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  int valuePtr = *a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((void *)a1 + 1) = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1BAAAC800(_Unwind_Exception *a1)
{
  uint64_t v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 8);
  keys = 0;
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  uint64_t v34 = 0;
  unint64_t v35 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = *(void ***)a1;
    uint64_t v5 = *(void *)a1 + 16 * v3;
    do
    {
      int64_t v6 = *v4;
      uint64_t v7 = v37;
      if ((unint64_t)v37 >= v38)
      {
        uint64_t v9 = keys;
        uint64_t v10 = v37 - keys;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v12 = v38 - (void)keys;
        if ((uint64_t)(v38 - (void)keys) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13) {
          unint64_t v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v13);
        }
        else {
          uint64_t v14 = 0;
        }
        size_t v15 = (void **)(v13 + 8 * v10);
        HALS_ObjectMap *v15 = v6;
        size_t v8 = v15 + 1;
        if (v7 != v9)
        {
          do
          {
            unint64_t v16 = *--v7;
            *--size_t v15 = v16;
          }
          while (v7 != v9);
          uint64_t v7 = keys;
        }
        keys = v15;
        unint64_t v38 = v13 + 8 * v14;
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v37 = v6;
        size_t v8 = v7 + 1;
      }
      uint64_t v37 = v8;
      uint64_t v17 = v4[1];
      BOOL v18 = v34;
      if ((unint64_t)v34 >= v35)
      {
        int v20 = values;
        uint64_t v21 = v34 - values;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v23 = v35 - (void)values;
        if ((uint64_t)(v35 - (void)values) >> 2 > v22) {
          unint64_t v22 = v23 >> 2;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v24 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          unint64_t v24 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = (void **)(v24 + 8 * v21);
        *uint64_t v26 = v17;
        uint64_t v19 = v26 + 1;
        if (v18 != v20)
        {
          do
          {
            uint64_t v27 = *--v18;
            *--uint64_t v26 = v27;
          }
          while (v18 != v20);
          BOOL v18 = values;
        }
        values = v26;
        unint64_t v35 = v24 + 8 * v25;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *uint64_t v34 = v17;
        uint64_t v19 = v18 + 1;
      }
      uint64_t v34 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  uint64_t v28 = keys;
  uint64_t v29 = values;
  CFDictionaryRef v30 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  if (!v30)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v29) {
    operator delete(v29);
  }
  if (v28) {
    operator delete(v28);
  }
  return v30;
}

void sub_1BAAACAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  __cxa_free_exception(v12);
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  unint64_t v2 = (const void *)*((void *)this + 1);
  if (v2) {
    CFRelease(v2);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v7 = &v4[8 * v6];
    uint64_t v9 = (char *)*a1;
    size_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        uint64_t v11 = *((void *)v8 - 1);
        v8 -= 8;
        *((void *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      size_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0) {
    int64_t v3 = __p;
  }
  else {
    int64_t v3 = (void **)__p[0];
  }
  if ((v9 & 0x80u) == 0) {
    CFIndex v4 = v9;
  }
  else {
    CFIndex v4 = (CFIndex)__p[1];
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(void *)this = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if ((char)v9 < 0) {
    operator delete(__p[0]);
  }
  return this;
}

void sub_1BAAACCAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*v15) {
    CFRelease(*v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

unint64_t dictionary_to_asbd(const applesauce::CF::DictionaryRef *a1, const __CFDictionary **a2)
{
  *((void *)a1 + 4) = 0;
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  CFDictionaryRef v2 = *a2;
  if (!*a2) {
    goto LABEL_29;
  }
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)"SampleRate", 10, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v2, v5);
  CFRelease(v5);
  if (Value)
  {
    unint64_t v7 = applesauce::CF::convert_as<double,0>(Value);
  }
  else
  {
    unint64_t v7 = 0;
    char v8 = 0;
  }
  double v10 = *(double *)&v7;
  if (!v8) {
    double v10 = 0.0;
  }
  *(double *)a1 = v10;
  if (!*a2) {
    goto LABEL_29;
  }
  CFNumberRef v11 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[9]>(*a2, "FormatID");
  if (v11)
  {
    unint64_t v12 = applesauce::CF::convert_as<unsigned int,0>(v11);
    int v13 = 0;
    if (v12 > 0x100000000) {
      int v13 = v12;
    }
  }
  else
  {
    int v13 = 0;
  }
  *((_DWORD *)a1 + 2) = v13;
  if (!*a2) {
    goto LABEL_29;
  }
  CFNumberRef v14 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[12]>(*a2, "FormatFlags");
  if (v14)
  {
    unint64_t v15 = applesauce::CF::convert_as<unsigned int,0>(v14);
    int v16 = 0;
    if (v15 > 0x100000000) {
      int v16 = v15;
    }
  }
  else
  {
    int v16 = 0;
  }
  *((_DWORD *)a1 + 3) = v16;
  CFDictionaryRef v17 = *a2;
  if (!*a2)
  {
LABEL_29:
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v23);
    goto LABEL_55;
  }
  unsigned int v40 = 0;
  *((_DWORD *)a1 + 4) = applesauce::CF::at_or<unsigned int,char const(&)[15]>(v17, "BytesPerPacket", &v40);
  CFDictionaryRef v18 = *a2;
  if (!*a2) {
    goto LABEL_54;
  }
  CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"FramesPerPacket", 15, 0x8000100u, 0);
  if (!v19)
  {
    unint64_t v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v24, "Could not construct");
    __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v20 = (const __CFNumber *)CFDictionaryGetValue(v18, v19);
  CFRelease(v19);
  if (v20)
  {
    unint64_t v21 = applesauce::CF::convert_as<unsigned int,0>(v20);
    int v22 = 0;
    if (v21 > 0x100000000) {
      int v22 = v21;
    }
  }
  else
  {
    int v22 = 0;
  }
  *((_DWORD *)a1 + 5) = v22;
  CFDictionaryRef v25 = *a2;
  if (!*a2) {
    goto LABEL_54;
  }
  CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"BytesPerFrame", 13, 0x8000100u, 0);
  if (!v26)
  {
    CFDictionaryRef v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v27 = (const __CFNumber *)CFDictionaryGetValue(v25, v26);
  CFRelease(v26);
  if (v27)
  {
    unint64_t v28 = applesauce::CF::convert_as<unsigned int,0>(v27);
    int v29 = 0;
    if (v28 > 0x100000000) {
      int v29 = v28;
    }
  }
  else
  {
    int v29 = 0;
  }
  *((_DWORD *)a1 + 6) = v29;
  CFDictionaryRef v31 = *a2;
  if (!*a2) {
    goto LABEL_54;
  }
  CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)"ChannelsPerFrame", 16, 0x8000100u, 0);
  if (!v32)
  {
    int v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(v31, v32);
  CFRelease(v32);
  if (v33)
  {
    unint64_t v34 = applesauce::CF::convert_as<unsigned int,0>(v33);
    int v35 = 0;
    if (v34 > 0x100000000) {
      int v35 = v34;
    }
  }
  else
  {
    int v35 = 0;
  }
  *((_DWORD *)a1 + 7) = v35;
  CFDictionaryRef v37 = *a2;
  if (!*a2)
  {
LABEL_54:
    uint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v23);
LABEL_55:
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unsigned int v39 = 0;
  unint64_t result = applesauce::CF::at_or<unsigned int,char const(&)[15]>(v37, "BitsPerChannel", &v39);
  *((_DWORD *)a1 + 8) = result;
  return result;
}

std::runtime_error *applesauce::CF::construct_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not construct");
}

unint64_t applesauce::CF::at_or<unsigned int,char const(&)[15]>(const __CFDictionary *a1, char *__s, unsigned int *a3)
{
  CFIndex v6 = strlen(__s);
  CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v6, 0x8000100u, 0);
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1, v7);
  CFRelease(v7);
  if (!Value) {
    return *a3;
  }
  unint64_t result = applesauce::CF::convert_as<unsigned int,0>(Value);
  if (HIDWORD(result)) {
    return result;
  }
  else {
    return *a3;
  }
}

uint64_t applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        uint64_t v11 = Value != 0;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        int v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
          int v13 = 0;
        }
        uint64_t v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        int v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9) {
          uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        }
        else {
          uint64_t v5 = 0;
        }
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        uint64_t v14 = *(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        uint64_t v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        uint64_t v14 = valuePtr;
LABEL_35:
        uint64_t v5 = v14 | 0x100000000;
        if (!v10) {
          uint64_t v5 = 0;
        }
LABEL_37:
        int v7 = v5 & 0xFFFFFF00;
        uint64_t v8 = v5 & 0x100000000;
        break;
      default:
        int v7 = 0;
        uint64_t v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    uint64_t v6 = v8 | v7 & 0xFFFFFF00;
    uint64_t v5 = v5;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      uint64_t v5 = CFBooleanGetValue(a1);
      uint64_t v6 = 0x100000000;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  return v6 | v5;
}

const void *applesauce::CF::details::at_key<char const(&)[12]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_1BAAAD774(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

const void *applesauce::CF::details::at_key<char const(&)[9]>(const __CFDictionary *a1, char *__s)
{
  CFIndex v4 = strlen(__s);
  CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int Value = CFDictionaryGetValue(a1, v5);
  CFRelease(v5);
  return Value;
}

void sub_1BAAAD86C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

unint64_t applesauce::CF::convert_as<double,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v8 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_16;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      case kCFNumberSInt64Type:
        uint64_t valuePtr = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_23;
      case kCFNumberFloat64Type:
        uint64_t valuePtr = 0;
        int v12 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_36;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        BOOL v13 = Value == 0;
        int v14 = (char)valuePtr;
        goto LABEL_19;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v8 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_16:
        BOOL v13 = v8 == 0;
        int v14 = (__int16)valuePtr;
        goto LABEL_19;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_18:
        BOOL v13 = v9 == 0;
        int v14 = valuePtr;
LABEL_19:
        double v15 = (double)v14;
        goto LABEL_28;
      case kCFNumberLongType:
        uint64_t valuePtr = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongLongType:
        uint64_t valuePtr = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_23:
        BOOL v13 = v11 == 0;
        double v15 = *(float *)&valuePtr;
        goto LABEL_28;
      case kCFNumberDoubleType:
        uint64_t valuePtr = 0;
        int v12 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_36;
      case kCFNumberCFIndexType:
        uint64_t valuePtr = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_27;
      case kCFNumberNSIntegerType:
        uint64_t valuePtr = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_27:
        BOOL v13 = v10 == 0;
        double v15 = (double)valuePtr;
LABEL_28:
        double v7 = v15;
        goto LABEL_29;
      case kCFNumberCGFloatType:
        uint64_t valuePtr = 0;
        int v12 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_36:
        BOOL v13 = v12 == 0;
        double v7 = *(double *)&valuePtr;
LABEL_29:
        if (v13) {
          double v7 = 0.0;
        }
        unint64_t v6 = *(void *)&v7 & 0xFFFFFFFFFFFFFF00;
        break;
      default:
        unint64_t v6 = 0;
        LOBYTE(v7) = 0;
        break;
    }
    return LOBYTE(v7) | v6;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1)) {
      *(double *)&unint64_t result = (double)CFBooleanGetValue(a1);
    }
    else {
      *(double *)&unint64_t result = 0.0;
    }
  }
  return result;
}

void get_temporary_folder(std::string *a1)
{
  CFDictionaryRef v2 = "/Library/Preferences/Audio/";
  if (access("/Library/Preferences/Audio/", 6))
  {
    int64_t v3 = getenv("TMPDIR");
    if (v3) {
      CFDictionaryRef v2 = v3;
    }
    else {
      CFDictionaryRef v2 = "/tmp/";
    }
  }
  std::string::basic_string[abi:ne180100]<0>(a1, v2);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
    if (!size) {
      return;
    }
    CFStringRef v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (!*((unsigned char *)&a1->__r_.__value_.__s + 23)) {
      return;
    }
    CFStringRef v5 = a1;
  }
  if (v5->__r_.__value_.__s.__data_[size - 1] != 47) {
    std::string::push_back(a1, 47);
  }
}

void sub_1BAAADC40(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void get_audio_capture_folder(void *a1)
{
  get_temporary_folder(&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (access((const char *)p_p, 6))
  {
    BOOL v3 = 1;
  }
  else
  {
    get_temporary_folder(&v10);
    CFTypeID v4 = std::string::append(&v10, "AudioCapture/", 0xDuLL);
    std::string v11 = *v4;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    int v5 = SHIBYTE(v11.__r_.__value_.__r.__words[2]);
    unint64_t v6 = (void *)v11.__r_.__value_.__r.__words[0];
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      double v7 = &v11;
    }
    else {
      double v7 = (std::string *)v11.__r_.__value_.__r.__words[0];
    }
    BOOL v3 = access((const char *)v7, 6) != 0;
    if (v5 < 0) {
      operator delete(v6);
    }
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v3) {
      goto LABEL_15;
    }
  }
  else if (v3)
  {
LABEL_15:
    std::string::basic_string[abi:ne180100]<0>(a1, "/private/var/mobile/tmp/com.apple.audiomxd/AudioCapture/HAL/");
    return;
  }
  get_temporary_folder(&__p);
  int v8 = std::string::append(&__p, "AudioCapture/HAL/", 0x11uLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  a1[2] = *((void *)&v8->__r_.__value_.__l + 2);
  *(_OWORD *)a1 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BAAADDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::File_Capture_Settings::instance(AMCP::Graph::File_Capture_Settings *this)
{
  {
    byte_1E9F78AB4 = 0;
    AMCP::Graph::File_Capture_Settings::instance(void)::s_instance = 0;
  }
}

void AMCP::Utility::Settings_Storage::at_or<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(void *a1, uint64_t a2, const void **a3, void *a4)
{
  int v8 = (std::mutex *)(a2 + 16);
  std::mutex::lock((std::mutex *)(a2 + 16));
  CFDictionaryRef v9 = *(const __CFDictionary **)(a2 + 112);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(&cf, v9, *a3);
  if (v13)
  {
    CFTypeRef v10 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v10;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);

  std::mutex::unlock(v8);
}

void sub_1BAAADF28(void *a1)
{
  __cxa_free_exception(v1);
  __clang_call_terminate(a1);
}

BOOL applesauce::CF::convert_to<BOOL,0>(const __CFBoolean *a1)
{
  CFTypeID TypeID = CFBooleanGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    int Value = CFBooleanGetValue(a1);
  }
  else
  {
    CFTypeID v4 = CFNumberGetTypeID();
    if (v4 != CFGetTypeID(a1)
      || (LOWORD(Value) = applesauce::CF::details::number_convert_as<BOOL>(a1), (unsigned __int16)Value <= 0xFFu))
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::convert_error(exception);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int Value = Value;
  }
  return Value != 0;
}

void sub_1BAAADFF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::BooleanRef::~BooleanRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t applesauce::CF::details::number_convert_as<BOOL>(const __CFNumber *a1)
{
  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      CFNumberRef v5 = a1;
      CFNumberType v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      CFNumberRef v2 = a1;
      CFNumberType v3 = kCFNumberCharType;
LABEL_10:
      int Value = CFNumberGetValue(v2, v3, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      CFNumberRef v5 = a1;
      CFNumberType v6 = kCFNumberShortType;
LABEL_12:
      int Value = CFNumberGetValue(v5, v6, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v7 = a1;
      CFNumberType v8 = kCFNumberIntType;
LABEL_14:
      int Value = CFNumberGetValue(v7, v8, &valuePtr);
      BOOL v16 = Value == 0;
      int v17 = LODWORD(valuePtr);
LABEL_15:
      BOOL v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      CFNumberRef v11 = a1;
      CFNumberType v12 = kCFNumberFloatType;
LABEL_21:
      int Value = CFNumberGetValue(v11, v12, &valuePtr);
      BOOL v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      double valuePtr = 0.0;
      CFNumberRef v9 = a1;
      CFNumberType v10 = kCFNumberNSIntegerType;
LABEL_25:
      int Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value) {
        BOOL v18 = *(void *)&valuePtr == 0;
      }
      else {
        BOOL v18 = 1;
      }
      goto LABEL_33;
    case kCFNumberCGFloatType:
      double valuePtr = 0.0;
      CFNumberRef v13 = a1;
      CFNumberType v14 = kCFNumberCGFloatType;
LABEL_29:
      int Value = CFNumberGetValue(v13, v14, &valuePtr);
      BOOL v19 = valuePtr == 0.0;
LABEL_30:
      BOOL v18 = v19 || Value == 0;
LABEL_33:
      int v4 = !v18;
      if (!Value) {
        goto LABEL_38;
      }
      int v20 = 256;
      break;
    default:
      int v4 = 0;
LABEL_38:
      int v20 = 0;
      break;
  }
  return v20 | v4;
}

std::runtime_error *applesauce::CF::convert_error(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not convert");
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,applesauce::CF::StringRef const&>(unsigned char *a1, const __CFDictionary *a2, const void *a3)
{
  int v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(a2, a3);
  if (!v4) {
    goto LABEL_5;
  }
  CFNumberRef v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFBooleanGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    CFNumberRef v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

const void *applesauce::CF::details::at_key<applesauce::CF::StringRef const&>(const __CFDictionary *a1, const void *a2)
{
  if (a2) {
    return CFDictionaryGetValue(a1, a2);
  }
  else {
    return 0;
  }
}

void sub_1BAAAE784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
  {

    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAAAE714);
  }
  _Unwind_Resume(exception_object);
}

void std::function<void ()(NSString *,NSXPCConnection *)>::operator()(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, id *, id *))(*(void *)v5 + 48))(v5, &v7, &v6);
}

void sub_1BAAAE978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1BAAAEE98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__231(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__232(uint64_t a1)
{
}

void sub_1BAAAF36C(_Unwind_Exception *a1)
{
  objc_sync_exit(v3);

  _Unwind_Resume(a1);
}

void std::vector<Registrar_Connection_Info>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 16)
  {

    uint64_t v5 = *(void **)(i - 16);
  }
  *(void *)(a1 + 8) = a2;
}

void sub_1BAAAF4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::vector<Registrar_Connection_Info>>::__on_zero_shared(uint64_t a1)
{
  CFNumberRef v2 = (void **)(a1 + 24);
  uint64_t v1 = *(void *)(a1 + 24);
  if (v1)
  {
    std::vector<Registrar_Connection_Info>::__base_destruct_at_end[abi:ne180100](a1 + 24, v1);
    CFNumberType v3 = *v2;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<std::vector<Registrar_Connection_Info>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C630;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::vector<Registrar_Connection_Info>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C630;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::DAL::Multi_Reader_Ring_Buffer::remove_source(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a3 != 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFNumberRef v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CFNumberType v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "Multi_Reader_Ring_Buffer.cpp";
      __int16 v30 = 1024;
      int v31 = 29;
      __int16 v32 = 2080;
      *(void *)CFNumberRef v33 = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Input)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Multi_Reader_Ring_Buffer has a source that's output aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Multi_Reader_Ring_Buffer has a source that's output aligned", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&void v33[6] = "virtual BOOL AMCP::DAL::Multi_Reader_Ring_Buffer::remove_source(const Source_ID &, Buffer_Alignment)";
    unint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    int v35 = 29;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    BOOL v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v4 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  int v6 = *(_DWORD *)(a1 + 112);
  *(_DWORD *)(a1 + 112) = v6 - 1;
  if (v6 == 1)
  {
    *(unsigned char *)(a1 + 116) = 1;
  }
  else if (v6 <= 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    id v7 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFNumberType v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "Multi_Reader_Ring_Buffer.cpp";
      __int16 v30 = 1024;
      int v31 = 36;
      __int16 v32 = 2080;
      *(void *)CFNumberRef v33 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::logic_error::logic_error(&v20, &v19);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v22 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&void v33[6] = "virtual BOOL AMCP::DAL::Multi_Reader_Ring_Buffer::remove_source(const Source_ID &, Buffer_Alignment)";
    unint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    int v35 = 36;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    BOOL v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  os_unfair_lock_unlock(v4);
  return 0;
}

void sub_1BAAAFA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_1F148A978;
  int v4 = std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2);
  v4->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  v4[1].__vftable = (std::logic_error_vtbl *)&unk_1F148A9F0;
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)a1 = &unk_1F1489C28;
  *(void *)(a1 + 16) = &unk_1F1489C60;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_1F1489C98;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 24), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  uint64_t v4;
  long long v5;

  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_1F148A978;
  std::logic_error::logic_error((std::logic_error *)a1, (const std::logic_error *)a2)->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
  int v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  uint64_t v5 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  *(void *)a1 = &unk_1F1489C28;
  *(void *)(a1 + 16) = &unk_1F1489C60;
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = &unk_1F1489C98;
  return a1;
}

void sub_1BAAAFD28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>()
{
}

void sub_1BAAAFED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  JUMPOUT(0x1C18590A0);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1C18590A0](a1);

  JUMPOUT(0x1C1859840);
}

void boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  JUMPOUT(0x1C18590A0);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  JUMPOUT(0x1C18590A0);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1C18590A0](a1);

  JUMPOUT(0x1C1859840);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 2) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 3);

  JUMPOUT(0x1C18590A0);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_1BAAB0250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone()
{
}

void sub_1BAAB045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(v10);
  MEMORY[0x1C1859840](v10, 0x10F1C40311038C2);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(void *a1)
{
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  JUMPOUT(0x1C18590A0);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector(void *a1)
{
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  JUMPOUT(0x1C18590A0);
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::add_source(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (a3 != 1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)unint64_t v28 = 2080;
      *(void *)&v28[2] = "Multi_Reader_Ring_Buffer.cpp";
      __int16 v29 = 1024;
      int v30 = 19;
      __int16 v31 = 2080;
      *(void *)__int16 v32 = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Input)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Multi_Reader_Ring_Buffer has a source that's output aligned", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Multi_Reader_Ring_Buffer has a source that's output aligned", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::add_source(const Source_ID &, Buffer_Alignment)";
    CFNumberRef v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    int v34 = 19;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v4 = a1 + 26;
  os_unfair_lock_lock(a1 + 26);
  uint32_t os_unfair_lock_opaque = a1[28]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)unint64_t v28 = 2080;
      *(void *)&v28[2] = "Multi_Reader_Ring_Buffer.cpp";
      __int16 v29 = 1024;
      int v30 = 21;
      __int16 v31 = 2080;
      *(void *)__int16 v32 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::add_source(const Source_ID &, Buffer_Alignment)";
    CFNumberRef v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    int v34 = 21;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  a1[28]._uint32_t os_unfair_lock_opaque = os_unfair_lock_opaque + 1;

  os_unfair_lock_unlock(v4);
}

void sub_1BAAB0AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  os_unfair_lock_unlock(v27);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::commit_direct_write(os_unfair_lock_s *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 26;
  os_unfair_lock_lock(a1 + 26);
  AMCP::DAL::Ring_Buffer_Base::commit_direct_write((uint64_t)a1, v6, a3);

  os_unfair_lock_unlock(v5);
}

void sub_1BAAB0C68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::set_anchor_time_and_nominal_buffer_size(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (os_unfair_lock_s *)(a1 + 104);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 104));
  int v10 = *(_DWORD *)(a1 + 112);
  if (v10 < 0)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)__int16 v32 = 2080;
      *(void *)&v32[2] = "Multi_Reader_Ring_Buffer.cpp";
      __int16 v33 = 1024;
      int v34 = 62;
      __int16 v35 = 2080;
      *(void *)uint64_t v36 = "not (m_refcount >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(void *)&void v36[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::set_anchor_time_and_nominal_buffer_size(const"
                         " Source_ID &, const DAL_Time_Range &, Buffer_Alignment)";
    CFDictionaryRef v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    int v38 = 62;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    std::logic_error v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (a4 != 1)
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = **(NSObject ***)buf;
    if (*(void *)v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v32);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)__int16 v32 = 2080;
      *(void *)&v32[2] = "Multi_Reader_Ring_Buffer.cpp";
      __int16 v33 = 1024;
      int v34 = 63;
      __int16 v35 = 2080;
      *(void *)uint64_t v36 = "not (buffer_alignment == Buffer_Alignment::Aligned_For_Input)";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Multi_Reader_Ring_Buffer should only be used for input", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Multi_Reader_Ring_Buffer should only be used for input", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(void *)&void v36[6] = "virtual void AMCP::DAL::Multi_Reader_Ring_Buffer::set_anchor_time_and_nominal_buffer_size(const"
                         " Source_ID &, const DAL_Time_Range &, Buffer_Alignment)";
    CFDictionaryRef v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Multi_Reader_Ring_Buffer.cpp";
    int v38 = 63;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v17);
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    std::logic_error v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v10 == 1 || *(unsigned char *)(a1 + 116))
  {
    *(unsigned char *)(a1 + 116) = 0;
    AMCP::DAL::Ring_Buffer_Base::set_anchor_time_and_nominal_buffer_size(a1, v9, a3);
  }

  os_unfair_lock_unlock(v7);
}

void sub_1BAAB114C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  os_unfair_lock_unlock(v24);
  _Unwind_Resume(a1);
}

double AMCP::DAL::Ring_Buffer_Base::get_format@<D0>(AMCP::DAL::Ring_Buffer_Base *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 11);
  if (v2)
  {
    long long v3 = *(_OWORD *)(v2 + 8);
    long long v4 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)a2 = v3;
    *(_OWORD *)(a2 + 16) = v4;
    *(void *)(a2 + 32) = *(void *)(v2 + 40);
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    *(void *)&long long v3 = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return *(double *)&v3;
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::get_allowed_read_range(AMCP::DAL::Multi_Reader_Ring_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  if (*((_DWORD *)this + 27))
  {
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v5, (uint64_t)this);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range(a2, &v5, 0.0, 4294967300.0);
    long long v3 = v6;
    if (v6)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    long long v4 = *(void (**)(void))(*(void *)this + 64);
    v4();
  }
}

void AMCP::DAL::DAL_Buffer::get_timebase(AMCP::DAL::DAL_Buffer *this, uint64_t a2)
{
  (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a2 + 64))(v4, a2);
  long long v3 = v5;
  *(void *)this = v4[3];
  *((void *)this + 1) = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::get_time_range(AMCP::DAL::Multi_Reader_Ring_Buffer *this@<X0>, uint64_t a2@<X8>)
{
  long long v4 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  uint64_t v5 = *((void *)this + 4);
  *(void *)(a2 + 16) = *((void *)this + 3);
  *(void *)(a2 + 24) = v5;
  uint64_t v6 = *((void *)this + 5);
  *(void *)(a2 + 32) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a2 + 40) = *((_OWORD *)this + 3);
  uint64_t v7 = *((void *)this + 9);
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = *((void *)this + 8);
  *(void *)(a2 + 64) = v7;
  uint64_t v8 = *((void *)this + 10);
  *(void *)(a2 + 72) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }

  os_unfair_lock_unlock(v4);
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_container@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 96);
  *a2 = *(void *)(this + 88);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

uint64_t AMCP::DAL::DAL_Buffer::is_silent(AMCP::DAL::DAL_Buffer *this)
{
  return 0;
}

void AMCP::DAL::Multi_Reader_Ring_Buffer::~Multi_Reader_Ring_Buffer(AMCP::DAL::Multi_Reader_Ring_Buffer *this)
{
  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(void *)this = &unk_1F147E198;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t AMCP::get_clock_property_traits_list(AMCP *this)
{
  {
    AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_clock_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    long long v4 = &v2;
    long long v3 = &v4;
    std::__call_once(&AMCP::get_clock_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_clock_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_clock_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_clock_property_traits_list(void)::$_0 &&>>()
{
  void v25[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v21, 1751737454, 1, 0, 0, &AMCP::Property_Traits<1751737454u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049764u>::k_valid_scopes, 0, 1751737454, 2);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v22, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v23, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v24, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v25, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  operator new();
}

void sub_1BAAB1CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1248;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>(uint64_t a1, int a2, char a3, char a4, char a5, const void *a6, uint64_t a7, int a8, int a9, int a10)
{
  *(_DWORD *)a1 = a2;
  *(unsigned char *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 5) = a4;
  *(unsigned char *)(a1 + 6) = a5;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((void *)(a1 + 8), a6, a7, (a7 - (uint64_t)a6) >> 2);
  *(_DWORD *)(a1 + 32) = a8;
  *(_DWORD *)(a1 + 36) = a9;
  *(_DWORD *)(a1 + 40) = a10;
  return a1;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits const*,AMCP::Live_Property_Traits*>(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  uint64_t v13 = a4;
  v10[0] = a1;
  v10[1] = &v12;
  uint64_t v10[2] = &v13;
  char v11 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      int v7 = *v6;
      *(_DWORD *)(v4 + 3) = *(int *)((char *)v6 + 3);
      *(_DWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 16) = 0;
      *(void *)(v4 + 24) = 0;
      *(void *)(v4 + 8) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(v4 + 8), *((const void **)v6 + 1), *((void *)v6 + 2), (uint64_t)(*((void *)v6 + 2) - *((void *)v6 + 1)) >> 2);
      uint64_t v8 = *((void *)v6 + 4);
      *(_DWORD *)(v4 + 40) = v6[10];
      *(void *)(v4 + 32) = v8;
      uint64_t v4 = v13 + 48;
      v13 += 48;
      v6 += 12;
    }
    while (v6 != a3);
  }
  char v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1BAAB1E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 5);
        if (v6)
        {
          *((void *)v4 - 4) = v6;
          operator delete(v6);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<AMCP::Live_Property_Traits>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  HALS_ObjectMap *result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(unsigned int *a1, unsigned int *a2, uint64_t a3, char a4)
{
LABEL_1:
  unint64_t v9 = (unint64_t)a1;
  v137 = a1 + 24;
  v138 = a1 + 12;
  uint64_t v10 = a1 + 2;
  char v11 = a1 + 8;
  v139 = a1 + 1;
  while (1)
  {
    uint64_t v12 = (uint64_t)a2 - v9;
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unsigned int v54 = *(a2 - 12);
          uint64_t v53 = (uint64_t)(a2 - 12);
          if (v54 < *(_DWORD *)v9)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>(v9, v53);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v9, (unsigned int *)(v9 + 48), a2 - 12);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v9, (unsigned int *)(v9 + 48), (unsigned int *)(v9 + 96), a2 - 12);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v9, (unsigned int *)(v9 + 48), (unsigned int *)(v9 + 96), (unsigned int *)(v9 + 144), a2 - 12);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1151) {
      break;
    }
    if (!a3)
    {
      if ((unsigned int *)v9 == a2) {
        return;
      }
      v150 = a2;
      int64_t v75 = (v13 - 2) >> 1;
      int64_t v76 = v75;
      do
      {
        int64_t v77 = v76;
        if (v75 >= v76)
        {
          uint64_t v78 = (2 * v76) | 1;
          uint64_t v79 = (unsigned int *)(v9 + 48 * v78);
          if (2 * v77 + 2 < (uint64_t)v13)
          {
            unsigned int v81 = *v79;
            unsigned int v80 = v79[12];
            if (*v79 <= v80) {
              unsigned int v81 = v79[12];
            }
            if (*v79 < v80)
            {
              v79 += 12;
              uint64_t v78 = 2 * v77 + 2;
            }
          }
          else
          {
            unsigned int v81 = *v79;
          }
          unint64_t v82 = v9 + 48 * v77;
          unsigned int v83 = *(_DWORD *)v82;
          if (v81 >= *(_DWORD *)v82)
          {
            char v163 = *(unsigned char *)(v82 + 6);
            __int16 v157 = *(_WORD *)(v82 + 4);
            unint64_t v84 = v9 + 48 * v77;
            long long v144 = *(_OWORD *)(v84 + 8);
            *(void *)(v84 + 8) = 0;
            *(void *)(v84 + 16) = 0;
            uint64_t v141 = *(void *)(v84 + 24);
            uint64_t v85 = *(void *)(v84 + 32);
            *(void *)(v84 + 24) = 0;
            uint64_t v173 = v85;
            unsigned int v180 = *(_DWORD *)(v84 + 40);
            do
            {
              std::string v86 = v79;
              unsigned int v87 = *v79;
              *(_DWORD *)(v82 + 3) = *(unsigned int *)((char *)v86 + 3);
              *(_DWORD *)unint64_t v82 = v87;
              std::string v88 = *(void **)(v82 + 8);
              if (v88)
              {
                *(void *)(v82 + 16) = v88;
                operator delete(v88);
                *(void *)(v82 + 8) = 0;
                *(void *)(v82 + 16) = 0;
                *(void *)(v82 + 24) = 0;
              }
              *(_OWORD *)(v82 + 8) = *(_OWORD *)(v86 + 2);
              *(void *)(v82 + 24) = *((void *)v86 + 3);
              *((void *)v86 + 1) = 0;
              *((void *)v86 + 2) = 0;
              *((void *)v86 + 3) = 0;
              uint64_t v89 = *((void *)v86 + 4);
              *(_DWORD *)(v82 + 40) = v86[10];
              *(void *)(v82 + 32) = v89;
              if (v75 < v78) {
                break;
              }
              uint64_t v79 = (unsigned int *)(v9 + 48 * ((2 * v78) | 1));
              if (2 * v78 + 2 < (uint64_t)v13)
              {
                unsigned int v91 = *v79;
                unsigned int v90 = v79[12];
                if (*v79 <= v90) {
                  unsigned int v91 = v79[12];
                }
                if (*v79 >= v90)
                {
                  uint64_t v78 = (2 * v78) | 1;
                }
                else
                {
                  v79 += 12;
                  uint64_t v78 = 2 * v78 + 2;
                }
              }
              else
              {
                unsigned int v91 = *v79;
                uint64_t v78 = (2 * v78) | 1;
              }
              unint64_t v82 = (unint64_t)v86;
            }
            while (v91 >= v83);
            *std::string v86 = v83;
            *((_WORD *)v86 + 2) = v157;
            *((unsigned char *)v86 + 6) = v163;
            std::string v92 = (void *)*((void *)v86 + 1);
            if (v92)
            {
              *((void *)v86 + 2) = v92;
              operator delete(v92);
            }
            *(_OWORD *)(v86 + 2) = v144;
            *((void *)v86 + 3) = v141;
            *((void *)v86 + 4) = v173;
            v86[10] = v180;
          }
        }
        int64_t v76 = v77 - 1;
      }
      while (v77);
      int64_t v93 = v12 / 0x30uLL;
      std::string v94 = v150;
      while (2)
      {
        if (v93 >= 2)
        {
          v151 = v94;
          uint64_t v95 = 0;
          *(_DWORD *)&v166[3] = *(_DWORD *)(v9 + 3);
          *(_DWORD *)v166 = *(_DWORD *)v9;
          uint64_t v96 = *(void *)(v9 + 8);
          uint64_t v142 = *(void *)(v9 + 24);
          uint64_t v145 = *(void *)(v9 + 16);
          *(void *)(v9 + 8) = 0;
          *(void *)(v9 + 16) = 0;
          uint64_t v158 = *(void *)(v9 + 32);
          unsigned int v165 = *(_DWORD *)(v9 + 40);
          unint64_t v97 = v9;
          *(void *)(v9 + 24) = 0;
          do
          {
            uint64_t v98 = v97 + 48 * v95 + 48;
            uint64_t v99 = 2 * v95;
            uint64_t v95 = (2 * v95) | 1;
            if (v99 + 2 < v93 && *(_DWORD *)v98 < *(_DWORD *)(v98 + 48))
            {
              v98 += 48;
              uint64_t v95 = v99 + 2;
            }
            unsigned int v100 = *(_DWORD *)v98;
            *(_DWORD *)(v97 + 3) = *(_DWORD *)(v98 + 3);
            *(_DWORD *)unint64_t v97 = v100;
            uint64_t v101 = *(void **)(v97 + 8);
            if (v101)
            {
              *(void *)(v97 + 16) = v101;
              operator delete(v101);
              *(void *)(v97 + 8) = 0;
              *(void *)(v97 + 16) = 0;
              *(void *)(v97 + 24) = 0;
            }
            uint64_t v102 = (void *)(v98 + 8);
            *(_OWORD *)(v97 + 8) = *(_OWORD *)(v98 + 8);
            *(void *)(v97 + 24) = *(void *)(v98 + 24);
            *(void *)(v98 + 8) = 0;
            *(void *)(v98 + 16) = 0;
            int v104 = (uint64_t *)(v98 + 32);
            uint64_t v103 = *(void *)(v98 + 32);
            *(void *)(v98 + 24) = 0;
            *(_DWORD *)(v97 + 40) = *(_DWORD *)(v98 + 40);
            *(void *)(v97 + 32) = v103;
            unint64_t v97 = v98;
          }
          while (v95 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
          unsigned int v105 = v94 - 12;
          if ((unsigned int *)v98 == v151 - 12)
          {
            *(_DWORD *)(v98 + 3) = *(_DWORD *)&v166[3];
            *(_DWORD *)uint64_t v98 = *(_DWORD *)v166;
            uint64_t v121 = *(void **)(v98 + 8);
            if (v121)
            {
              *(void *)(v98 + 16) = v121;
              operator delete(v121);
            }
            *(void *)(v98 + 8) = v96;
            *(void *)(v98 + 16) = v145;
            *(void *)(v98 + 24) = v142;
            uint64_t *v104 = v158;
            *(_DWORD *)(v98 + 40) = v165;
LABEL_150:
            std::string v94 = v151;
          }
          else
          {
            unsigned int v106 = *v105;
            *(_DWORD *)(v98 + 3) = *(unsigned int *)((char *)v151 - 45);
            *(_DWORD *)uint64_t v98 = v106;
            unsigned int v107 = *(void **)(v98 + 8);
            if (v107)
            {
              *(void *)(v98 + 16) = v107;
              operator delete(v107);
              *uint64_t v102 = 0;
              *(void *)(v98 + 16) = 0;
              *(void *)(v98 + 24) = 0;
            }
            unsigned int v108 = v151 - 10;
            *(_OWORD *)(v98 + 8) = *(_OWORD *)(v151 - 10);
            *(void *)(v98 + 24) = *((void *)v151 - 3);
            *(void *)unsigned int v108 = 0;
            *((void *)v108 + 1) = 0;
            *((void *)v108 + 2) = 0;
            int v109 = *(v151 - 2);
            uint64_t *v104 = *((void *)v151 - 2);
            *(_DWORD *)(v98 + 40) = v109;
            *(unsigned int *)((char *)v151 - 45) = *(_DWORD *)&v166[3];
            *unsigned int v105 = *(_DWORD *)v166;
            std::string v94 = v151;
            float v110 = (void *)*((void *)v151 - 5);
            if (v110)
            {
              *((void *)v151 - 4) = v110;
              operator delete(v110);
            }
            *((void *)v151 - 5) = v96;
            *((void *)v151 - 4) = v145;
            *((void *)v151 - 3) = v142;
            *(v151 - 2) = v165;
            *((void *)v151 - 2) = v158;
            uint64_t v111 = v98 + 48 - v9;
            if (v111 >= 49)
            {
              unint64_t v112 = (unint64_t)(-2 - 0x5555555555555555 * (v111 >> 4)) >> 1;
              uint64_t v113 = (unsigned int *)(v9 + 48 * v112);
              unsigned int v114 = *(_DWORD *)v98;
              if (*v113 < *(_DWORD *)v98)
              {
                char v168 = *(unsigned char *)(v98 + 6);
                __int16 v167 = *(_WORD *)(v98 + 4);
                long long v146 = *(_OWORD *)(v98 + 8);
                uint64_t v115 = *(void *)(v98 + 24);
                *(void *)(v98 + 16) = 0;
                *(void *)(v98 + 24) = 0;
                *uint64_t v102 = 0;
                unsigned int v181 = *(_DWORD *)(v98 + 40);
                uint64_t v174 = *v104;
                do
                {
                  unsigned int v116 = v113;
                  unsigned int v117 = *v113;
                  *(_DWORD *)(v98 + 3) = *(unsigned int *)((char *)v116 + 3);
                  *(_DWORD *)uint64_t v98 = v117;
                  unsigned int v118 = *(void **)(v98 + 8);
                  if (v118)
                  {
                    *(void *)(v98 + 16) = v118;
                    operator delete(v118);
                    *(void *)(v98 + 8) = 0;
                    *(void *)(v98 + 16) = 0;
                    *(void *)(v98 + 24) = 0;
                  }
                  *(_OWORD *)(v98 + 8) = *(_OWORD *)(v116 + 2);
                  *(void *)(v98 + 24) = *((void *)v116 + 3);
                  *((void *)v116 + 1) = 0;
                  *((void *)v116 + 2) = 0;
                  *((void *)v116 + 3) = 0;
                  uint64_t v119 = *((void *)v116 + 4);
                  *(_DWORD *)(v98 + 40) = v116[10];
                  *(void *)(v98 + 32) = v119;
                  if (!v112) {
                    break;
                  }
                  unint64_t v112 = (v112 - 1) >> 1;
                  uint64_t v113 = (unsigned int *)(v9 + 48 * v112);
                  uint64_t v98 = (uint64_t)v116;
                }
                while (*v113 < v114);
                *unsigned int v116 = v114;
                *((_WORD *)v116 + 2) = v167;
                *((unsigned char *)v116 + 6) = v168;
                unsigned int v120 = (void *)*((void *)v116 + 1);
                if (v120)
                {
                  *((void *)v116 + 2) = v120;
                  operator delete(v120);
                }
                *(_OWORD *)(v116 + 2) = v146;
                *((void *)v116 + 3) = v115;
                *((void *)v116 + 4) = v174;
                v116[10] = v181;
                goto LABEL_150;
              }
            }
          }
        }
        v94 -= 12;
        if ((unint64_t)v93-- <= 2) {
          return;
        }
        continue;
      }
    }
    uint64_t v14 = (int *)(v9 + 48 * (v13 >> 1));
    if ((unint64_t)v12 < 0x1801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)(v9 + 48 * (v13 >> 1)), (unsigned int *)v9, a2 - 12);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v9, (unsigned int *)(v9 + 48 * (v13 >> 1)), a2 - 12);
      unint64_t v15 = v9 + 48 * (v13 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(v138, (unsigned int *)(v15 - 48), a2 - 24);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(v137, (unsigned int *)(v15 + 48), a2 - 36);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)(v15 - 48), (unsigned int *)v15, (unsigned int *)(v15 + 48));
      *(_DWORD *)((char *)&v153 + 3) = *(_DWORD *)(v9 + 3);
      LODWORD(v153) = *(_DWORD *)v9;
      long long v16 = *(_OWORD *)(v9 + 8);
      uint64_t v17 = *(void *)(v9 + 24);
      void *v10 = 0;
      v10[1] = 0;
      uint64_t v10[2] = 0;
      uint64_t v169 = *(void *)v11;
      unsigned int v176 = v11[2];
      int v18 = *v14;
      *(_DWORD *)(v9 + 3) = *(int *)((char *)v14 + 3);
      *(_DWORD *)unint64_t v9 = v18;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(v15 + 8);
      uint64_t v19 = *(void *)(v15 + 32);
      *(void *)(v9 + 24) = *(void *)(v15 + 24);
      *(void *)(v15 + 24) = 0;
      v11[2] = *(_DWORD *)(v15 + 40);
      *(void *)char v11 = v19;
      *uint64_t v14 = v153;
      *(int *)((char *)v14 + 3) = *(_DWORD *)((char *)&v153 + 3);
      *(_OWORD *)(v15 + 8) = v16;
      *(void *)(v15 + 24) = v17;
      *(_DWORD *)(v15 + 40) = v176;
      *(void *)(v15 + 32) = v169;
    }
    uint64_t v20 = a3 - 1;
    if (a4)
    {
      unsigned int v21 = *(_DWORD *)v9;
    }
    else
    {
      unsigned int v21 = *(_DWORD *)v9;
      if (*(_DWORD *)(v9 - 48) >= *(_DWORD *)v9)
      {
        long long v38 = *(_OWORD *)(v9 + 8);
        __int16 v155 = *(_WORD *)(v9 + 4);
        char v161 = *(unsigned char *)(v9 + 6);
        uint64_t v39 = *(void *)(v9 + 24);
        *(void *)(v9 + 8) = 0;
        *(void *)(v9 + 16) = 0;
        uint64_t v40 = *(void *)(v9 + 32);
        *(void *)(v9 + 24) = 0;
        unsigned int v178 = *(_DWORD *)(v9 + 40);
        uint64_t v171 = v40;
        if (v21 >= *(a2 - 12))
        {
          uint64_t v42 = (unsigned int *)(v9 + 48);
          do
          {
            a1 = v42;
            if (v42 >= a2) {
              break;
            }
            v42 += 12;
          }
          while (v21 >= *a1);
        }
        else
        {
          a1 = (unsigned int *)v9;
          do
          {
            unsigned int v41 = a1[12];
            a1 += 12;
          }
          while (v21 >= v41);
        }
        uint64_t v43 = v20;
        unint64_t v44 = (unint64_t)a2;
        if (a1 < a2)
        {
          unint64_t v44 = (unint64_t)a2;
          do
          {
            unsigned int v45 = *(_DWORD *)(v44 - 48);
            v44 -= 48;
          }
          while (v21 < v45);
        }
        long long v148 = v38;
        while ((unint64_t)a1 < v44)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, v44);
          do
          {
            unsigned int v46 = a1[12];
            a1 += 12;
          }
          while (v21 >= v46);
          do
          {
            unsigned int v47 = *(_DWORD *)(v44 - 48);
            v44 -= 48;
          }
          while (v21 < v47);
        }
        BOOL v4 = (unint64_t)(a1 - 12) >= v9;
        BOOL v5 = a1 - 12 == (unsigned int *)v9;
        a3 = v43;
        if (a1 - 12 != (unsigned int *)v9)
        {
          int v48 = *(a1 - 12);
          *(_DWORD *)(v9 + 3) = *(unsigned int *)((char *)a1 - 45);
          *(_DWORD *)unint64_t v9 = v48;
          uint64_t v49 = *(void **)(v9 + 8);
          if (v49)
          {
            *(void *)(v9 + 16) = v49;
            operator delete(v49);
            *(void *)(v9 + 8) = 0;
            *(void *)(v9 + 16) = 0;
            *(void *)(v9 + 24) = 0;
          }
          uint64_t v50 = a1 - 10;
          *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 - 10);
          *(void *)(v9 + 24) = *((void *)a1 - 3);
          *(void *)uint64_t v50 = 0;
          *((void *)v50 + 1) = 0;
          *((void *)v50 + 2) = 0;
          uint64_t v51 = *((void *)a1 - 2);
          *(_DWORD *)(v9 + 40) = *(a1 - 2);
          *(void *)(v9 + 32) = v51;
        }
        *(a1 - 12) = v21;
        *((unsigned char *)a1 - 42) = v161;
        *((_WORD *)a1 - 22) = v155;
        uint64_t v52 = (void *)*((void *)a1 - 5);
        if (v52)
        {
          *((void *)a1 - 4) = v52;
          operator delete(v52);
        }
        a4 = 0;
        *(_OWORD *)(a1 - 10) = v148;
        *((void *)a1 - 3) = v39;
        *(a1 - 2) = v178;
        *((void *)a1 - 2) = v171;
        goto LABEL_1;
      }
    }
    uint64_t v147 = v20;
    __int16 v154 = *(_WORD *)v139;
    char v160 = *((unsigned char *)v139 + 2);
    long long v143 = *(_OWORD *)(v9 + 8);
    uint64_t v22 = *(void *)(v9 + 24);
    v10[1] = 0;
    uint64_t v10[2] = 0;
    void *v10 = 0;
    uint64_t v170 = *(void *)v11;
    uint64_t v23 = (unsigned int *)v9;
    unsigned int v177 = v11[2];
    do
    {
      uint64_t v24 = v23;
      unsigned int v25 = v23[12];
      v23 += 12;
    }
    while (v25 < v21);
    uint64_t v26 = a2;
    if (v24 == (unsigned int *)v9)
    {
      do
      {
        if (v23 >= a2) {
          break;
        }
        unsigned int v28 = *(a2 - 12);
        a2 -= 12;
      }
      while (v28 >= v21);
    }
    else
    {
      do
      {
        unsigned int v27 = *(a2 - 12);
        a2 -= 12;
      }
      while (v27 >= v21);
    }
    a1 = v23;
    if (v23 < a2)
    {
      unint64_t v29 = (unint64_t)a2;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, v29);
        do
        {
          unsigned int v30 = a1[12];
          a1 += 12;
        }
        while (v30 < v21);
        do
        {
          unsigned int v31 = *(_DWORD *)(v29 - 48);
          v29 -= 48;
        }
        while (v31 >= v21);
      }
      while ((unint64_t)a1 < v29);
    }
    if (a1 - 12 != (unsigned int *)v9)
    {
      int v32 = *(a1 - 12);
      *(_DWORD *)(v9 + 3) = *(unsigned int *)((char *)a1 - 45);
      *(_DWORD *)unint64_t v9 = v32;
      __int16 v33 = *(void **)(v9 + 8);
      if (v33)
      {
        *(void *)(v9 + 16) = v33;
        operator delete(v33);
        void *v10 = 0;
        v10[1] = 0;
        uint64_t v10[2] = 0;
      }
      int v34 = a1 - 10;
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a1 - 10);
      *(void *)(v9 + 24) = *((void *)a1 - 3);
      *(void *)int v34 = 0;
      *((void *)v34 + 1) = 0;
      *((void *)v34 + 2) = 0;
      uint64_t v35 = *((void *)a1 - 2);
      v11[2] = *(a1 - 2);
      *(void *)char v11 = v35;
    }
    *(a1 - 12) = v21;
    *((unsigned char *)a1 - 42) = v160;
    *((_WORD *)a1 - 22) = v154;
    uint64_t v36 = (void *)*((void *)a1 - 5);
    if (v36)
    {
      *((void *)a1 - 4) = v36;
      operator delete(v36);
    }
    *(_OWORD *)(a1 - 10) = v143;
    *((void *)a1 - 3) = v22;
    *(a1 - 2) = v177;
    *((void *)a1 - 2) = v170;
    BOOL v4 = v23 >= a2;
    a2 = v26;
    a3 = v147;
    if (!v4) {
      goto LABEL_37;
    }
    BOOL v37 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>((unsigned int *)v9, a1 - 12);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a2))
    {
      if (!v37)
      {
LABEL_37:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *,false>(v9, a1 - 12, v147, a4 & 1);
        a4 = 0;
      }
      goto LABEL_1;
    }
    a2 = a1 - 12;
    if (v37) {
      return;
    }
  }
  CFURLRef v55 = (unsigned int *)(v9 + 48);
  BOOL v57 = (unsigned int *)v9 == a2 || v55 == a2;
  if (a4)
  {
    if (!v57)
    {
      uint64_t v58 = 0;
      unint64_t v59 = v9;
      do
      {
        int v60 = a2;
        uint64_t v61 = v55;
        unsigned int v62 = *(_DWORD *)(v59 + 48);
        if (v62 < *(_DWORD *)v59)
        {
          __int16 v156 = *(_WORD *)(v59 + 52);
          char v162 = *(unsigned char *)(v59 + 54);
          uint64_t v63 = *(void **)(v59 + 56);
          long long v149 = *(_OWORD *)(v59 + 64);
          *(void *)(v59 + ++*(_DWORD *)(this + 56) = 0;
          *(void *)(v59 + 64) = 0;
          *(void *)(v59 + 72) = 0;
          uint64_t v172 = *(void *)(v59 + 80);
          uint64_t v64 = v58;
          int v179 = *(_DWORD *)(v59 + 88);
          while (1)
          {
            uint64_t v65 = v9 + v64;
            *(_DWORD *)(v65 + 48) = *(_DWORD *)(v9 + v64);
            *(_DWORD *)(v65 + 51) = *(_DWORD *)(v9 + v64 + 3);
            unsigned int v66 = *(void **)(v9 + v64 + 56);
            if (v66)
            {
              *(void *)(v65 + 64) = v66;
              operator delete(v66);
              *(void *)(v65 + 72) = 0;
            }
            *(_OWORD *)(v65 + ++*(_DWORD *)(this + 56) = *(_OWORD *)(v65 + 8);
            *(void *)(v65 + 8) = 0;
            *(void *)(v65 + 16) = 0;
            uint64_t v67 = *(void *)(v65 + 24);
            uint64_t v68 = *(void *)(v65 + 32);
            *(void *)(v65 + 24) = 0;
            *(void *)(v65 + 72) = v67;
            *(void *)(v65 + 80) = v68;
            *(_DWORD *)(v65 + 88) = *(_DWORD *)(v65 + 40);
            if (!v64) {
              break;
            }
            uint64_t v69 = v9 + v64;
            unsigned int v70 = *(_DWORD *)(v9 + v64 - 48);
            v64 -= 48;
            if (v62 >= v70)
            {
              uint64_t v71 = v9 + v64 + 48;
              int v72 = (void **)(v69 + 8);
              unint64_t v73 = v69 + 32;
              goto LABEL_92;
            }
          }
          int v72 = (void **)(v9 + 8);
          unint64_t v73 = v9 + 32;
          uint64_t v71 = v9;
LABEL_92:
          *(_DWORD *)uint64_t v71 = v62;
          *(_WORD *)(v71 + 4) = v156;
          *(unsigned char *)(v71 + 6) = v162;
          std::string::size_type v74 = *v72;
          if (*v72)
          {
            *(void *)(v71 + 16) = v74;
            operator delete(v74);
          }
          *int v72 = v63;
          *(_OWORD *)(v71 + 16) = v149;
          *(_DWORD *)(v73 + 8) = v179;
          *(void *)unint64_t v73 = v172;
        }
        CFURLRef v55 = v61 + 12;
        v58 += 48;
        unint64_t v59 = (unint64_t)v61;
        a2 = v60;
      }
      while (v55 != v60);
    }
  }
  else if (!v57)
  {
    unint64_t v123 = v9 + 24;
    do
    {
      int v124 = a2;
      unint64_t v125 = (unint64_t)v55;
      unsigned int v126 = *(_DWORD *)(v9 + 48);
      if (v126 < *(_DWORD *)v9)
      {
        __int16 v159 = *(_WORD *)(v9 + 52);
        char v164 = *(unsigned char *)(v9 + 54);
        long long v152 = *(_OWORD *)(v9 + 56);
        *(void *)(v9 + ++*(_DWORD *)(this + 56) = 0;
        *(void *)(v9 + 64) = 0;
        uint64_t v128 = *(void *)(v9 + 72);
        uint64_t v127 = *(void *)(v9 + 80);
        *(void *)(v9 + 72) = 0;
        uint64_t v175 = v127;
        unint64_t v129 = v123;
        int v182 = *(_DWORD *)(v9 + 88);
        do
        {
          unint64_t v130 = v129;
          *(_DWORD *)(v129 + 24) = *(_DWORD *)(v129 - 24);
          *(_DWORD *)(v129 + 27) = *(_DWORD *)(v129 - 21);
          v131 = *(void **)(v129 + 32);
          if (v131)
          {
            *(void *)(v129 + 40) = v131;
            operator delete(v131);
            *(void *)(v129 + 48) = 0;
          }
          v132 = (void *)(v129 - 16);
          *(_OWORD *)(v129 + 32) = *(_OWORD *)(v129 - 16);
          uint64_t v133 = *(void *)v129;
          v132[1] = 0;
          *(void *)unint64_t v129 = 0;
          void *v132 = 0;
          uint64_t v134 = *(void *)(v129 + 8);
          *(void *)(v129 + 48) = v133;
          *(void *)(v129 + ++*(_DWORD *)(this + 56) = v134;
          *(_DWORD *)(v129 + 64) = *(_DWORD *)(v129 + 16);
          LODWORD(v134) = *(_DWORD *)(v129 - 72);
          v129 -= 48;
        }
        while (v126 < v134);
        unint64_t v135 = v130 - 24;
        *(_DWORD *)(v130 - 24) = v126;
        *(unsigned char *)(v135 + 6) = v164;
        *(_WORD *)(v135 + 4) = v159;
        uint64_t v136 = *(void **)(v130 - 16);
        if (v136)
        {
          *(void *)(v130 - 8) = v136;
          operator delete(v136);
        }
        *(_OWORD *)(v130 - 16) = v152;
        *(void *)unint64_t v130 = v128;
        *(_DWORD *)(v130 + 16) = v182;
        *(void *)(v130 + 8) = v175;
      }
      CFURLRef v55 = (unsigned int *)(v125 + 48);
      v123 += 48;
      unint64_t v9 = v125;
      a2 = v124;
    }
    while (v55 != v124);
  }
}

  unint64_t v9 = (unint64_t)a1;
  v150 = a1 + 20;
  v151 = a1 + 10;
  uint64_t v10 = a1 + 2;
  char v11 = a1 + 6;
  long long v149 = a1 + 7;
  long long v152 = (char *)a1 + 49;
  uint64_t v153 = (char *)a1 + 4;
  while (1)
  {
    uint64_t v12 = (uint64_t)a2 - v9;
    unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v9) >> 4);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v61 = *((_DWORD *)a2 - 20);
          int v60 = a2 - 10;
          if (v61 < *(_DWORD *)v9)
          {
            std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>((uint64_t *)v9, v60);
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)v9, (uint64_t *)(v9 + 80), a2 - 10);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)v9, (uint64_t *)(v9 + 80), (uint64_t *)(v9 + 160), a2 - 10);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)v9, (uint64_t *)(v9 + 80), (uint64_t *)(v9 + 160), (uint64_t *)(v9 + 240), a2 - 10);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v12 <= 1919) {
      break;
    }
    if (!a3)
    {
      if ((uint64_t *)v9 != a2)
      {
        v186 = a2;
        unsigned int v83 = (v13 - 2) >> 1;
        unint64_t v84 = v83;
        do
        {
          uint64_t v85 = v84;
          if (v83 >= v84)
          {
            std::string v86 = (2 * v84) | 1;
            unsigned int v87 = (unsigned int *)(v9 + 80 * v86);
            if (2 * v85 + 2 < (uint64_t)v13)
            {
              uint64_t v89 = *v87;
              std::string v88 = v87[20];
              if (*v87 <= v88) {
                uint64_t v89 = v87[20];
              }
              if (*v87 < v88)
              {
                v87 += 20;
                std::string v86 = 2 * v85 + 2;
              }
            }
            else
            {
              uint64_t v89 = *v87;
            }
            unsigned int v90 = v9 + 80 * v85;
            unsigned int v91 = *(_DWORD *)v90;
            if (v89 >= *(_DWORD *)v90)
            {
              v203 = *(unsigned char *)(v90 + 8);
              v197 = *(_DWORD *)(v90 + 4);
              std::string v92 = v9 + 80 * v85;
              char v168 = *(_OWORD *)(v92 + 16);
              char v162 = *(void *)(v92 + 32);
              *(void *)(v92 + 24) = 0;
              *(void *)(v92 + 32) = 0;
              *(void *)(v92 + 16) = 0;
              __int16 v155 = *(_DWORD *)(v92 + 40);
              unsigned int v180 = *(unsigned char *)(v92 + 48);
              *(void *)&v209[14] = *(void *)(v90 + 63);
              *(_OWORD *)v209 = *(_OWORD *)(v90 + 49);
              uint64_t v174 = *(unsigned char *)(v90 + 71);
              *(void *)(v92 + 48) = 0;
              *(void *)(v92 + ++*(_DWORD *)(this + 56) = 0;
              *(void *)(v92 + 64) = 0;
              uint64_t v158 = *(_DWORD *)(v92 + 72);
              do
              {
                int64_t v93 = v87;
                std::string v94 = *(void *)v87;
                *(unsigned char *)(v90 + 8) = *((unsigned char *)v93 + 8);
                *(void *)unsigned int v90 = v94;
                uint64_t v95 = *(void **)(v90 + 16);
                if (v95)
                {
                  *(void *)(v90 + 24) = v95;
                  operator delete(v95);
                  *(void *)(v90 + 16) = 0;
                  *(void *)(v90 + 24) = 0;
                  *(void *)(v90 + 32) = 0;
                }
                *(_OWORD *)(v90 + 16) = *((_OWORD *)v93 + 1);
                *(void *)(v90 + 32) = *((void *)v93 + 4);
                *((void *)v93 + 3) = 0;
                *((void *)v93 + 4) = 0;
                *((void *)v93 + 2) = 0;
                *(_DWORD *)(v90 + 40) = v93[10];
                uint64_t v96 = (void **)(v90 + 48);
                if (*(char *)(v90 + 71) < 0) {
                  operator delete(*v96);
                }
                unint64_t v97 = *((_OWORD *)v93 + 3);
                *(void *)(v90 + 64) = *((void *)v93 + 8);
                *(_OWORD *)uint64_t v96 = v97;
                *((unsigned char *)v93 + 71) = 0;
                *((unsigned char *)v93 + 48) = 0;
                *(_DWORD *)(v90 + 72) = v93[18];
                if (v83 < v86) {
                  break;
                }
                unsigned int v87 = (unsigned int *)(v9 + 80 * ((2 * v86) | 1));
                if (2 * v86 + 2 < (uint64_t)v13)
                {
                  uint64_t v99 = *v87;
                  uint64_t v98 = v87[20];
                  if (*v87 <= v98) {
                    uint64_t v99 = v87[20];
                  }
                  if (*v87 >= v98)
                  {
                    std::string v86 = (2 * v86) | 1;
                  }
                  else
                  {
                    v87 += 20;
                    std::string v86 = 2 * v86 + 2;
                  }
                }
                else
                {
                  uint64_t v99 = *v87;
                  std::string v86 = (2 * v86) | 1;
                }
                unsigned int v90 = (unint64_t)v93;
              }
              while (v99 >= v91);
              *int64_t v93 = v91;
              v93[1] = v197;
              *((unsigned char *)v93 + 8) = v203;
              unsigned int v100 = (void *)*((void *)v93 + 2);
              if (v100)
              {
                *((void *)v93 + 3) = v100;
                operator delete(v100);
              }
              *((_OWORD *)v93 + 1) = v168;
              *((void *)v93 + 4) = v162;
              v93[10] = v155;
              if (*((char *)v93 + 71) < 0) {
                operator delete(*((void **)v93 + 6));
              }
              *((unsigned char *)v93 + 48) = v180;
              *(_OWORD *)((char *)v93 + 49) = *(_OWORD *)v209;
              *(void *)((char *)v93 + 63) = *(void *)&v209[14];
              *((unsigned char *)v93 + 71) = v174;
              v93[18] = v158;
            }
          }
          unint64_t v84 = v85 - 1;
        }
        while (v85);
        uint64_t v101 = v12 / 0x50uLL;
        uint64_t v102 = v186;
        do
        {
          if (v101 >= 2)
          {
            v187 = v102;
            uint64_t v103 = 0;
            v190 = *(unsigned char *)(v9 + 8);
            v189 = *(void *)v9;
            __int16 v159 = *(void *)(v9 + 24);
            char v163 = *(void *)(v9 + 16);
            __int16 v156 = *(void *)(v9 + 32);
            *(void *)(v9 + 16) = 0;
            *(void *)(v9 + 24) = 0;
            *(void *)(v9 + 32) = 0;
            int v104 = *(_DWORD *)(v9 + 40);
            uint64_t v175 = *(unsigned char *)(v9 + 48);
            *(_OWORD *)v198 = *(_OWORD *)(v9 + 49);
            *(void *)&v198[14] = *(void *)(v9 + 63);
            unsigned int v181 = *(unsigned char *)(v9 + 71);
            *(void *)(v9 + 48) = 0;
            *(void *)(v9 + ++*(_DWORD *)(this + 56) = 0;
            *(void *)(v9 + 64) = 0;
            unsigned int v105 = v9;
            uint64_t v169 = *(_DWORD *)(v9 + 72);
            do
            {
              unsigned int v106 = v105 + 80 * v103 + 80;
              unsigned int v107 = 2 * v103;
              uint64_t v103 = (2 * v103) | 1;
              if (v107 + 2 < v101 && *(_DWORD *)v106 < *(_DWORD *)(v106 + 80))
              {
                v106 += 80;
                uint64_t v103 = v107 + 2;
              }
              unsigned int v108 = *(void *)v106;
              *(unsigned char *)(v105 + 8) = *(unsigned char *)(v106 + 8);
              *(void *)unsigned int v105 = v108;
              int v109 = *(void **)(v105 + 16);
              if (v109)
              {
                *(void *)(v105 + 24) = v109;
                operator delete(v109);
                *(void *)(v105 + 16) = 0;
                *(void *)(v105 + 24) = 0;
                *(void *)(v105 + 32) = 0;
              }
              float v110 = (void *)(v106 + 16);
              *(_OWORD *)(v105 + 16) = *(_OWORD *)(v106 + 16);
              *(void *)(v105 + 32) = *(void *)(v106 + 32);
              *(void *)(v106 + 24) = 0;
              *(void *)(v106 + 32) = 0;
              *(void *)(v106 + 16) = 0;
              *(_DWORD *)(v105 + 40) = *(_DWORD *)(v106 + 40);
              uint64_t v111 = (void **)(v105 + 48);
              if (*(char *)(v105 + 71) < 0) {
                operator delete(*v111);
              }
              unint64_t v112 = *(_OWORD *)(v106 + 48);
              *(void *)(v105 + 64) = *(void *)(v106 + 64);
              *(_OWORD *)uint64_t v111 = v112;
              *(unsigned char *)(v106 + 71) = 0;
              *(unsigned char *)(v106 + 48) = 0;
              *(_DWORD *)(v105 + 72) = *(_DWORD *)(v106 + 72);
              unsigned int v105 = v106;
            }
            while (v103 <= (uint64_t)((unint64_t)(v101 - 2) >> 1));
            uint64_t v113 = (void **)(v106 + 48);
            unsigned int v114 = v187 - 10;
            if ((uint64_t *)v106 == v187 - 10)
            {
              *(unsigned char *)(v106 + 8) = v190;
              *(void *)unsigned int v106 = v189;
              v132 = *(void **)(v106 + 16);
              if (v132)
              {
                *(void *)(v106 + 24) = v132;
                operator delete(v132);
              }
              *(void *)(v106 + 16) = v163;
              *(void *)(v106 + 24) = v159;
              *(void *)(v106 + 32) = v156;
              *(_DWORD *)(v106 + 40) = v104;
              if (*(char *)(v106 + 71) < 0) {
                operator delete(*v113);
              }
              *(unsigned char *)(v106 + 48) = v175;
              *(void *)(v106 + 63) = *(void *)&v198[14];
              *(_OWORD *)(v106 + 49) = *(_OWORD *)v198;
              *(unsigned char *)(v106 + 71) = v181;
              *(_DWORD *)(v106 + 72) = v169;
            }
            else
            {
              uint64_t v115 = *v114;
              *(unsigned char *)(v106 + 8) = *((unsigned char *)v187 - 72);
              *(void *)unsigned int v106 = v115;
              unsigned int v116 = *(void **)(v106 + 16);
              if (v116)
              {
                *(void *)(v106 + 24) = v116;
                operator delete(v116);
                *float v110 = 0;
                *(void *)(v106 + 24) = 0;
                *(void *)(v106 + 32) = 0;
              }
              unsigned int v117 = v187 - 8;
              *(_OWORD *)(v106 + 16) = *((_OWORD *)v187 - 4);
              *(void *)(v106 + 32) = *(v187 - 6);
              v117[1] = 0;
              v117[2] = 0;
              std::string::value_type *v117 = 0;
              *(_DWORD *)(v106 + 40) = *((_DWORD *)v187 - 10);
              if (*(char *)(v106 + 71) < 0) {
                operator delete(*v113);
              }
              unsigned int v118 = *((_OWORD *)v187 - 2);
              *(void *)(v106 + 64) = *(v187 - 2);
              *(_OWORD *)uint64_t v113 = v118;
              *((unsigned char *)v187 - 9) = 0;
              *((unsigned char *)v187 - 32) = 0;
              *(_DWORD *)(v106 + 72) = *((_DWORD *)v187 - 2);
              *((unsigned char *)v187 - 72) = v190;
              *unsigned int v114 = v189;
              uint64_t v119 = (void *)*(v187 - 8);
              if (v119)
              {
                *(v187 - 7) = (uint64_t)v119;
                operator delete(v119);
              }
              *(v187 - 8) = v163;
              *(v187 - 7) = v159;
              *(v187 - 6) = v156;
              *((_DWORD *)v187 - 10) = v104;
              if (*((char *)v187 - 9) < 0) {
                operator delete((void *)*(v187 - 4));
              }
              *((unsigned char *)v187 - 32) = v175;
              *(uint64_t *)((char *)v187 - 17) = *(void *)&v198[14];
              *(_OWORD *)((char *)v187 - 31) = *(_OWORD *)v198;
              *((unsigned char *)v187 - 9) = v181;
              *((_DWORD *)v187 - 2) = v169;
              unsigned int v120 = v106 + 80 - v9;
              if (v120 >= 81)
              {
                uint64_t v121 = (unint64_t)(-2 - 0x3333333333333333 * (v120 >> 4)) >> 1;
                v122 = (void *)(v9 + 80 * v121);
                unint64_t v123 = *(_DWORD *)v106;
                if (*(_DWORD *)v122 < *(_DWORD *)v106)
                {
                  v192 = *(unsigned char *)(v106 + 8);
                  v191 = *(_DWORD *)(v106 + 4);
                  uint64_t v170 = *(_OWORD *)(v106 + 16);
                  int v124 = *(void *)(v106 + 32);
                  *float v110 = 0;
                  *(void *)(v106 + 24) = 0;
                  *(void *)(v106 + 32) = 0;
                  unint64_t v125 = *(_DWORD *)(v106 + 40);
                  int v182 = *(unsigned char *)(v106 + 48);
                  *(_OWORD *)v210 = *(_OWORD *)(v106 + 49);
                  *(void *)&v210[14] = *(void *)(v106 + 63);
                  unsigned int v176 = *(unsigned char *)(v106 + 71);
                  *uint64_t v113 = 0;
                  *(void *)(v106 + ++*(_DWORD *)(this + 56) = 0;
                  *(void *)(v106 + 64) = 0;
                  char v164 = *(_DWORD *)(v106 + 72);
                  do
                  {
                    unsigned int v126 = v122;
                    uint64_t v127 = *v122;
                    *(unsigned char *)(v106 + 8) = *((unsigned char *)v126 + 8);
                    *(void *)unsigned int v106 = v127;
                    uint64_t v128 = *(void **)(v106 + 16);
                    if (v128)
                    {
                      *(void *)(v106 + 24) = v128;
                      operator delete(v128);
                      *(void *)(v106 + 16) = 0;
                      *(void *)(v106 + 24) = 0;
                      *(void *)(v106 + 32) = 0;
                    }
                    *(_OWORD *)(v106 + 16) = *((_OWORD *)v126 + 1);
                    *(void *)(v106 + 32) = v126[4];
                    v126[3] = 0;
                    v126[4] = 0;
                    v126[2] = 0;
                    *(_DWORD *)(v106 + 40) = *((_DWORD *)v126 + 10);
                    unint64_t v129 = (void **)(v106 + 48);
                    if (*(char *)(v106 + 71) < 0) {
                      operator delete(*v129);
                    }
                    unint64_t v130 = *((_OWORD *)v126 + 3);
                    *(void *)(v106 + 64) = v126[8];
                    *(_OWORD *)unint64_t v129 = v130;
                    *((unsigned char *)v126 + 71) = 0;
                    *((unsigned char *)v126 + 48) = 0;
                    *(_DWORD *)(v106 + 72) = *((_DWORD *)v126 + 18);
                    if (!v121) {
                      break;
                    }
                    uint64_t v121 = (v121 - 1) >> 1;
                    v122 = (void *)(v9 + 80 * v121);
                    unsigned int v106 = (uint64_t)v126;
                  }
                  while (*(_DWORD *)v122 < v123);
                  *(_DWORD *)unsigned int v126 = v123;
                  *((_DWORD *)v126 + 1) = v191;
                  *((unsigned char *)v126 + 8) = v192;
                  v131 = (void *)v126[2];
                  if (v131)
                  {
                    v126[3] = v131;
                    operator delete(v131);
                  }
                  *((_OWORD *)v126 + 1) = v170;
                  v126[4] = v124;
                  *((_DWORD *)v126 + 10) = v125;
                  if (*((char *)v126 + 71) < 0) {
                    operator delete((void *)v126[6]);
                  }
                  *((unsigned char *)v126 + 48) = v182;
                  *(_OWORD *)((char *)v126 + 49) = *(_OWORD *)v210;
                  *(void *)((char *)v126 + 63) = *(void *)&v210[14];
                  *((unsigned char *)v126 + 71) = v176;
                  *((_DWORD *)v126 + 18) = v164;
                }
              }
            }
            uint64_t v102 = v187;
          }
          v102 -= 10;
        }
        while ((unint64_t)v101-- > 2);
      }
      return;
    }
    uint64_t v14 = v9 + 80 * (v13 >> 1);
    if ((unint64_t)v12 < 0x2801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)(v9 + 80 * (v13 >> 1)), (uint64_t *)v9, a2 - 10);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)v9, (uint64_t *)(v9 + 80 * (v13 >> 1)), a2 - 10);
      unint64_t v15 = v9 + 80 * (v13 >> 1);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v151, (uint64_t *)(v15 - 80), a2 - 20);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(v150, (uint64_t *)(v15 + 80), a2 - 30);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)(v15 - 80), (uint64_t *)v15, (uint64_t *)(v15 + 80));
      v212 = *(unsigned char *)(v9 + 8);
      v205 = *(void *)v9;
      long long v16 = *(_OWORD *)(v9 + 16);
      uint64_t v17 = *(void *)(v9 + 32);
      v10[1] = 0;
      uint64_t v10[2] = 0;
      void *v10 = 0;
      int v18 = *(_DWORD *)(v9 + 40);
      uint64_t v19 = *(void *)(v9 + 48);
      *(void *)&v193 = *v149;
      *(void *)((char *)&v193 + 7) = *(void *)((char *)v149 + 7);
      uint64_t v20 = *(unsigned char *)(v9 + 71);
      v11[1] = 0;
      v11[2] = 0;
      unsigned int *v11 = 0;
      unsigned int v21 = *(_DWORD *)(v9 + 72);
      uint64_t v22 = *(void *)v14;
      *(unsigned char *)(v9 + 8) = *(unsigned char *)(v14 + 8);
      *(void *)unint64_t v9 = v22;
      uint64_t v23 = *(void *)(v15 + 32);
      uint64_t v24 = *(_DWORD *)(v15 + 40);
      *(_OWORD *)(v9 + 16) = *(_OWORD *)(v15 + 16);
      *(void *)(v9 + 32) = v23;
      *(void *)(v15 + 16) = 0;
      *(void *)(v15 + 24) = 0;
      *(void *)(v15 + 32) = 0;
      *(_DWORD *)(v9 + 40) = v24;
      LODWORD(v23) = *(_DWORD *)(v15 + 72);
      unsigned int v25 = *(_OWORD *)(v15 + 48);
      v11[2] = *(void *)(v15 + 64);
      *(_OWORD *)char v11 = v25;
      *(unsigned char *)(v14 + 71) = 0;
      *(unsigned char *)(v15 + 48) = 0;
      *(_DWORD *)(v9 + 72) = v23;
      *(unsigned char *)(v14 + 8) = v212;
      *(void *)uint64_t v14 = v205;
      *(_OWORD *)(v15 + 16) = v16;
      *(void *)(v15 + 32) = v17;
      *(_DWORD *)(v15 + 40) = v18;
      *(void *)(v15 + 48) = v19;
      *(void *)(v15 + 63) = *(void *)((char *)&v193 + 7);
      *(void *)(v15 + ++*(_DWORD *)(this + 56) = v193;
      *(unsigned char *)(v14 + 71) = v20;
      *(_DWORD *)(v15 + 72) = v21;
    }
    uint64_t v26 = a3 - 1;
    v184 = v26;
    if (a4)
    {
      unsigned int v27 = *(_DWORD *)v9;
    }
    else
    {
      unsigned int v27 = *(_DWORD *)v9;
      if (*(_DWORD *)(v9 - 80) >= *(_DWORD *)v9)
      {
        v166 = *(_OWORD *)(v9 + 16);
        v195 = *(_DWORD *)(v9 + 4);
        v201 = *(unsigned char *)(v9 + 8);
        char v161 = *(void *)(v9 + 32);
        *(void *)(v9 + 16) = 0;
        *(void *)(v9 + 24) = 0;
        *(void *)(v9 + 32) = 0;
        unint64_t v44 = *(_DWORD *)(v9 + 40);
        unsigned int v45 = (void **)(v9 + 48);
        unsigned int v178 = *(unsigned char *)(v9 + 48);
        *(void *)&v207[14] = *(void *)(v9 + 63);
        *(_OWORD *)v207 = *(_OWORD *)(v9 + 49);
        uint64_t v172 = *(unsigned char *)(v9 + 71);
        *(void *)(v9 + 48) = 0;
        *(void *)(v9 + ++*(_DWORD *)(this + 56) = 0;
        *(void *)(v9 + 64) = 0;
        if (v27 >= *((_DWORD *)a2 - 20))
        {
          unsigned int v47 = v9 + 80;
          do
          {
            a1 = (uint64_t *)v47;
            if (v47 >= (unint64_t)a2) {
              break;
            }
            v47 += 80;
          }
          while (v27 >= *(_DWORD *)a1);
        }
        else
        {
          a1 = (uint64_t *)v9;
          do
          {
            unsigned int v46 = *((_DWORD *)a1 + 20);
            a1 += 10;
          }
          while (v27 >= v46);
        }
        int v48 = v26;
        uint64_t v49 = a2;
        if (a1 < a2)
        {
          uint64_t v49 = a2;
          do
          {
            uint64_t v50 = *((_DWORD *)v49 - 20);
            v49 -= 10;
          }
          while (v27 < v50);
        }
        uint64_t v51 = a2;
        uint64_t v52 = *(_DWORD *)(v9 + 72);
        while (a1 < v49)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, v49);
          do
          {
            uint64_t v53 = *((_DWORD *)a1 + 20);
            a1 += 10;
          }
          while (v27 >= v53);
          do
          {
            unsigned int v54 = *((_DWORD *)v49 - 20);
            v49 -= 10;
          }
          while (v27 < v54);
        }
        BOOL v4 = (unint64_t)(a1 - 10) >= v9;
        BOOL v5 = a1 - 10 == (uint64_t *)v9;
        a3 = v48;
        if (a1 - 10 != (uint64_t *)v9)
        {
          CFURLRef v55 = *(a1 - 10);
          *(unsigned char *)(v9 + 8) = *((unsigned char *)a1 - 72);
          *(void *)unint64_t v9 = v55;
          OSStatus v56 = *(void **)(v9 + 16);
          if (v56)
          {
            *(void *)(v9 + 24) = v56;
            operator delete(v56);
            *(void *)(v9 + 16) = 0;
            *(void *)(v9 + 24) = 0;
            *(void *)(v9 + 32) = 0;
          }
          BOOL v57 = a1 - 8;
          *(_OWORD *)(v9 + 16) = *((_OWORD *)a1 - 4);
          *(void *)(v9 + 32) = *(a1 - 6);
          v57[1] = 0;
          v57[2] = 0;
          *BOOL v57 = 0;
          *(_DWORD *)(v9 + 40) = *((_DWORD *)a1 - 10);
          if (*(char *)(v9 + 71) < 0) {
            operator delete(*v45);
          }
          uint64_t v58 = *((_OWORD *)a1 - 2);
          *(void *)(v9 + 64) = *(a1 - 2);
          *(_OWORD *)unsigned int v45 = v58;
          *((unsigned char *)a1 - 9) = 0;
          *((unsigned char *)a1 - 32) = 0;
          *(_DWORD *)(v9 + 72) = *((_DWORD *)a1 - 2);
        }
        *((_DWORD *)a1 - 20) = v27;
        *((unsigned char *)a1 - 72) = v201;
        *((_DWORD *)a1 - 19) = v195;
        unint64_t v59 = (void *)*(a1 - 8);
        if (v59)
        {
          *(a1 - 7) = (uint64_t)v59;
          operator delete(v59);
        }
        *((_OWORD *)a1 - 4) = v166;
        *(a1 - 6) = v161;
        *((_DWORD *)a1 - 10) = v44;
        if (*((char *)a1 - 9) < 0) {
          operator delete((void *)*(a1 - 4));
        }
        a4 = 0;
        *((unsigned char *)a1 - 32) = v178;
        *(uint64_t *)((char *)a1 - 17) = *(void *)&v207[14];
        *(_OWORD *)((char *)a1 - 31) = *(_OWORD *)v207;
        *((unsigned char *)a1 - 9) = v172;
        *((_DWORD *)a1 - 2) = v52;
        a2 = v51;
        goto LABEL_1;
      }
    }
    v194 = *(_DWORD *)v153;
    v200 = v153[4];
    unsigned int v165 = *(_OWORD *)(v9 + 16);
    char v160 = *(void *)(v9 + 32);
    v10[1] = 0;
    uint64_t v10[2] = 0;
    void *v10 = 0;
    unsigned int v28 = *(_DWORD *)(v9 + 40);
    unsigned int v177 = *(unsigned char *)(v9 + 48);
    *(_OWORD *)v206 = *(_OWORD *)v152;
    *(void *)&v206[14] = *(void *)(v152 + 14);
    uint64_t v171 = *(unsigned char *)(v9 + 71);
    unsigned int *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
    unint64_t v29 = v9;
    __int16 v157 = *(_DWORD *)(v9 + 72);
    do
    {
      unsigned int v30 = v29;
      unsigned int v31 = *(_DWORD *)(v29 + 80);
      v29 += 80;
    }
    while (v31 < v27);
    int v32 = a2;
    if (v30 == v9)
    {
      do
      {
        if (v29 >= (unint64_t)a2) {
          break;
        }
        int v34 = *((_DWORD *)a2 - 20);
        a2 -= 10;
      }
      while (v34 >= v27);
    }
    else
    {
      do
      {
        __int16 v33 = *((_DWORD *)a2 - 20);
        a2 -= 10;
      }
      while (v33 >= v27);
    }
    if (v29 >= (unint64_t)a2)
    {
      a1 = (uint64_t *)v29;
    }
    else
    {
      uint64_t v35 = a2;
      a1 = (uint64_t *)v29;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, v35);
        do
        {
          uint64_t v36 = *((_DWORD *)a1 + 20);
          a1 += 10;
        }
        while (v36 < v27);
        do
        {
          BOOL v37 = *((_DWORD *)v35 - 20);
          v35 -= 10;
        }
        while (v37 >= v27);
      }
      while (a1 < v35);
    }
    if (a1 - 10 != (uint64_t *)v9)
    {
      long long v38 = *(a1 - 10);
      *(unsigned char *)(v9 + 8) = *((unsigned char *)a1 - 72);
      *(void *)unint64_t v9 = v38;
      uint64_t v39 = *(void **)(v9 + 16);
      if (v39)
      {
        *(void *)(v9 + 24) = v39;
        operator delete(v39);
        void *v10 = 0;
        v10[1] = 0;
        uint64_t v10[2] = 0;
      }
      uint64_t v40 = a1 - 8;
      *(_OWORD *)(v9 + 16) = *((_OWORD *)a1 - 4);
      *(void *)(v9 + 32) = *(a1 - 6);
      v40[1] = 0;
      v40[2] = 0;
      *uint64_t v40 = 0;
      *(_DWORD *)(v9 + 40) = *((_DWORD *)a1 - 10);
      if (*(char *)(v9 + 71) < 0) {
        operator delete((void *)*v11);
      }
      unsigned int v41 = *((_OWORD *)a1 - 2);
      v11[2] = *(a1 - 2);
      *(_OWORD *)char v11 = v41;
      *((unsigned char *)a1 - 9) = 0;
      *((unsigned char *)a1 - 32) = 0;
      *(_DWORD *)(v9 + 72) = *((_DWORD *)a1 - 2);
    }
    *((_DWORD *)a1 - 20) = v27;
    *((unsigned char *)a1 - 72) = v200;
    *((_DWORD *)a1 - 19) = v194;
    uint64_t v42 = (void *)*(a1 - 8);
    if (v42)
    {
      *(a1 - 7) = (uint64_t)v42;
      operator delete(v42);
    }
    *((_OWORD *)a1 - 4) = v165;
    *(a1 - 6) = v160;
    *((_DWORD *)a1 - 10) = v28;
    if (*((char *)a1 - 9) < 0) {
      operator delete((void *)*(a1 - 4));
    }
    *((unsigned char *)a1 - 32) = v177;
    *(uint64_t *)((char *)a1 - 17) = *(void *)&v206[14];
    *(_OWORD *)((char *)a1 - 31) = *(_OWORD *)v206;
    *((unsigned char *)a1 - 9) = v171;
    *((_DWORD *)a1 - 2) = v157;
    BOOL v4 = v29 >= (unint64_t)a2;
    a2 = v32;
    a3 = v184;
    if (!v4) {
      goto LABEL_43;
    }
    uint64_t v43 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>((uint64_t *)v9, a1 - 10);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, v32))
    {
      if (v43) {
        goto LABEL_1;
      }
LABEL_43:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *,false>(v9, a1 - 10, v184, a4 & 1);
      a4 = 0;
      goto LABEL_1;
    }
    a2 = a1 - 10;
    if (v43) {
      return;
    }
  }
  unsigned int v62 = v9 + 80;
  uint64_t v64 = (uint64_t *)v9 == a2 || v62 == (void)a2;
  if (a4)
  {
    if (!v64)
    {
      uint64_t v65 = 0;
      unsigned int v66 = v9;
      do
      {
        uint64_t v67 = a2;
        uint64_t v68 = v62;
        uint64_t v69 = *(_DWORD *)(v66 + 80);
        if (v69 < *(_DWORD *)v66)
        {
          v196 = *(_DWORD *)(v62 + 4);
          v202 = *(unsigned char *)(v62 + 8);
          uint64_t v173 = *(void **)(v66 + 96);
          __int16 v167 = *(_OWORD *)(v66 + 104);
          *(void *)(v66 + 96) = 0;
          *(void *)(v66 + 104) = 0;
          *(void *)(v66 + 112) = 0;
          unsigned int v70 = *(_DWORD *)(v66 + 120);
          v185 = *(unsigned char *)(v66 + 128);
          *(_OWORD *)v208 = *(_OWORD *)(v66 + 129);
          *(void *)&v208[14] = *(void *)(v66 + 143);
          int v179 = *(unsigned char *)(v66 + 151);
          *(void *)(v66 + 136) = 0;
          *(void *)(v66 + 144) = 0;
          *(void *)(v66 + 128) = 0;
          uint64_t v71 = v65;
          int v72 = *(_DWORD *)(v66 + 152);
          while (1)
          {
            unint64_t v73 = v71;
            std::string::size_type v74 = v9 + v71;
            *(void *)(v74 + 80) = *(void *)(v9 + v71);
            *(unsigned char *)(v74 + 88) = *(unsigned char *)(v9 + v71 + 8);
            int64_t v75 = *(void **)(v9 + v71 + 96);
            if (v75)
            {
              *(void *)(v74 + 104) = v75;
              operator delete(v75);
              *(void *)(v74 + 112) = 0;
            }
            *(_OWORD *)(v74 + 96) = *(_OWORD *)(v74 + 16);
            *(void *)(v74 + 112) = *(void *)(v74 + 32);
            *(void *)(v74 + 16) = 0;
            *(void *)(v74 + 24) = 0;
            *(void *)(v74 + 32) = 0;
            *(_DWORD *)(v74 + 120) = *(_DWORD *)(v74 + 40);
            int64_t v76 = (void **)(v74 + 128);
            if (*(char *)(v74 + 151) < 0) {
              operator delete(*v76);
            }
            int64_t v77 = v9 + v73;
            *(_OWORD *)int64_t v76 = *(_OWORD *)(v9 + v73 + 48);
            *(void *)(v74 + 144) = *(void *)(v9 + v73 + 64);
            *(unsigned char *)(v77 + 71) = 0;
            *(unsigned char *)(v77 + 48) = 0;
            *(_DWORD *)(v77 + 152) = *(_DWORD *)(v9 + v73 + 72);
            if (!v73) {
              break;
            }
            uint64_t v78 = *(_DWORD *)(v77 - 80);
            uint64_t v71 = v73 - 80;
            if (v69 >= v78)
            {
              uint64_t v79 = v9 + v73;
              unsigned int v80 = (void **)(v9 + v73 + 16);
              unsigned int v81 = (void **)(v9 + v73 + 48);
              goto LABEL_104;
            }
          }
          unsigned int v80 = (void **)(v77 + 16);
          unsigned int v81 = (void **)(v77 + 48);
          uint64_t v79 = v9;
LABEL_104:
          *(_DWORD *)uint64_t v79 = v69;
          *(_DWORD *)(v79 + 4) = v196;
          *(unsigned char *)(v79 + 8) = v202;
          unint64_t v82 = *v80;
          if (*v80)
          {
            *(void *)(v79 + 24) = v82;
            operator delete(v82);
          }
          *unsigned int v80 = v173;
          *(_OWORD *)(v79 + 24) = v167;
          *(_DWORD *)(v79 + 40) = v70;
          if (*(char *)(v79 + 71) < 0) {
            operator delete(*v81);
          }
          *(unsigned char *)unsigned int v81 = v185;
          *(_OWORD *)(v79 + 49) = *(_OWORD *)v208;
          *(void *)(v79 + 63) = *(void *)&v208[14];
          *(unsigned char *)(v79 + 71) = v179;
          *(_DWORD *)(v79 + 72) = v72;
        }
        unsigned int v62 = v68 + 80;
        v65 += 80;
        unsigned int v66 = v68;
        a2 = v67;
      }
      while ((uint64_t *)v62 != v67);
    }
  }
  else if (!v64)
  {
    uint64_t v134 = (_DWORD *)(v9 + 152);
    do
    {
      unint64_t v135 = a2;
      uint64_t v136 = v62;
      v137 = *(_DWORD *)(v9 + 80);
      if (v137 < *(_DWORD *)v9)
      {
        v199 = *(_DWORD *)(v62 + 4);
        v204 = *(unsigned char *)(v62 + 8);
        v183 = *(_OWORD *)(v9 + 96);
        v138 = *(void *)(v9 + 112);
        *(void *)(v9 + 96) = 0;
        *(void *)(v9 + 104) = 0;
        *(void *)(v9 + 112) = 0;
        v139 = *(_DWORD *)(v9 + 120);
        v188 = *(unsigned char *)(v9 + 128);
        *(_OWORD *)v211 = *(_OWORD *)(v9 + 129);
        *(void *)&v211[14] = *(void *)(v9 + 143);
        int v140 = *(unsigned char *)(v9 + 151);
        *(void *)(v9 + 136) = 0;
        *(void *)(v9 + 144) = 0;
        *(void *)(v9 + 128) = 0;
        uint64_t v141 = v134;
        uint64_t v142 = *(_DWORD *)(v9 + 152);
        do
        {
          long long v143 = v141;
          *((void *)v141 - 9) = *((void *)v141 - 19);
          *((unsigned char *)v141 - 64) = *((unsigned char *)v141 - 144);
          long long v144 = (void *)*((void *)v141 - 7);
          if (v144)
          {
            *((void *)v141 - 6) = v144;
            operator delete(v144);
            *((void *)v141 - 5) = 0;
          }
          uint64_t v145 = v141 - 34;
          *(_OWORD *)(v141 - 14) = *(_OWORD *)(v141 - 34);
          *((void *)v141 - 5) = *((void *)v141 - 15);
          v145[1] = 0;
          v145[2] = 0;
          *uint64_t v145 = 0;
          *(v141 - 8) = *(v141 - 28);
          long long v146 = (void **)(v141 - 6);
          if (*((char *)v143 - 1) < 0) {
            operator delete(*v146);
          }
          *(_OWORD *)long long v146 = *(_OWORD *)(v143 - 26);
          *((void *)v143 - 1) = *((void *)v143 - 11);
          *((unsigned char *)v143 - 81) = 0;
          *((unsigned char *)v143 - 104) = 0;
          uint64_t v141 = v143 - 20;
          *long long v143 = *(v143 - 20);
        }
        while (v137 < *(v143 - 58));
        uint64_t v147 = v143 - 38;
        *(v141 - 18) = v137;
        *((unsigned char *)v147 + 8) = v204;
        v147[1] = v199;
        long long v148 = (void *)*((void *)v141 - 7);
        if (v148)
        {
          *((void *)v147 + 3) = v148;
          operator delete(v148);
        }
        *(_OWORD *)(v141 - 14) = v183;
        *((void *)v141 - 5) = v138;
        *(v141 - 8) = v139;
        if (*((char *)v141 - 1) < 0) {
          operator delete(*((void **)v141 - 3));
        }
        *((unsigned char *)v141 - 24) = v188;
        *(void *)((char *)v147 + 63) = *(void *)&v211[14];
        *(_OWORD *)((char *)v147 + 49) = *(_OWORD *)v211;
        *((unsigned char *)v141 - 1) = v140;
        *uint64_t v141 = v142;
      }
      unsigned int v62 = v136 + 80;
      v134 += 20;
      unint64_t v9 = v136;
      a2 = v135;
    }
    while ((uint64_t *)v62 != v135);
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>(uint64_t a1, uint64_t a2)
{
  LODWORD(v12) = *(_DWORD *)a1;
  *(_DWORD *)((char *)&v12 + 3) = *(_DWORD *)(a1 + 3);
  long long v3 = *(_OWORD *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = 0;
  uint64_t v10 = v4;
  int v11 = *(_DWORD *)(a1 + 40);
  LODWORD(v4) = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_DWORD *)a1 = v4;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v6 = a2 + 32;
  int v7 = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = v7;
  *(_DWORD *)a2 = v12;
  *(_DWORD *)(a2 + 3) = *(_DWORD *)((char *)&v12 + 3);
  uint64_t v8 = *(void **)(a2 + 8);
  if (v8)
  {
    *(void *)(a2 + 16) = v8;
    long long v9 = v3;
    operator delete(v8);
    long long v3 = v9;
  }
  *(_OWORD *)(a2 + 8) = v3;
  *(void *)(a2 + 24) = v5;
  *(void *)uint64_t v6 = v10;
  *(_DWORD *)(v6 + 8) = v11;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5 = a1;
  unsigned int v6 = *a2;
  unsigned int v7 = *a3;
  if (*a2 >= *a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a2, (uint64_t)a3);
    if (*a2 >= *v5) {
      return;
    }
    a1 = v5;
    uint64_t v8 = (uint64_t)a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)a2);
      if (*a3 >= *a2) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = (uint64_t)a3;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, v8);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a2, a3);
  if (*a4 < *a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a3, (uint64_t)a4);
    if (*a3 < *a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a2, (uint64_t)a3);
      if (*a2 < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a2, a3, a4);
  if (*a5 < *a4)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a4, (uint64_t)a5);
    if (*a4 < *a3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a3, (uint64_t)a4);
      if (*a3 < *a2)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a2, (uint64_t)a3);
        if (*a2 < *a1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(unsigned int *a1, unsigned int *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(a2 - 12) < *a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Property_Traits *&,AMCP::Live_Property_Traits *&>((uint64_t)a1, (uint64_t)(a2 - 12));
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a2 - 12);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a1 + 24, a2 - 12);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a1 + 24, a1 + 36, a2 - 12);
      return 1;
    default:
      unsigned int v6 = a1 + 24;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Property_Traits *>(a1, a1 + 12, a1 + 24);
      unsigned int v7 = a1 + 36;
      if (a1 + 36 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    unsigned int v10 = *v7;
    if (*v7 < *v6)
    {
      __int16 v26 = *((_WORD *)v7 + 2);
      char v27 = *((unsigned char *)v7 + 6);
      int v11 = (void *)*((void *)v7 + 1);
      long long v23 = *((_OWORD *)v7 + 1);
      *((void *)v7 + 1) = 0;
      *((void *)v7 + 2) = 0;
      *((void *)v7 + 3) = 0;
      uint64_t v24 = *((void *)v7 + 4);
      uint64_t v12 = v8;
      unsigned int v25 = v7[10];
      while (1)
      {
        unint64_t v13 = (char *)a1 + v12;
        *((_DWORD *)v13 + 36) = *(unsigned int *)((char *)a1 + v12 + 96);
        *(_DWORD *)(v13 + 147) = *(unsigned int *)((char *)a1 + v12 + 99);
        uint64_t v14 = *(void **)((char *)a1 + v12 + 152);
        if (v14)
        {
          *((void *)v13 + 20) = v14;
          operator delete(v14);
          *((void *)v13 + 21) = 0;
        }
        *(_OWORD *)(v13 + 152) = *(_OWORD *)(v13 + 104);
        *((void *)v13 + 13) = 0;
        *((void *)v13 + 14) = 0;
        uint64_t v15 = *((void *)v13 + 15);
        uint64_t v16 = *((void *)v13 + 16);
        *((void *)v13 + 15) = 0;
        *((void *)v13 + 21) = v15;
        *((void *)v13 + 22) = v16;
        *((_DWORD *)v13 + 46) = *((_DWORD *)v13 + 34);
        if (v12 == -96) {
          break;
        }
        uint64_t v17 = (char *)a1 + v12;
        unsigned int v18 = *(unsigned int *)((char *)a1 + v12 + 48);
        v12 -= 48;
        if (v10 >= v18)
        {
          uint64_t v19 = (void **)(v17 + 104);
          uint64_t v20 = (uint64_t)a1 + v12 + 144;
          unsigned int v21 = (unsigned int *)(v17 + 128);
          goto LABEL_14;
        }
      }
      uint64_t v19 = (void **)(a1 + 2);
      unsigned int v21 = a1 + 8;
      uint64_t v20 = (uint64_t)a1;
LABEL_14:
      *(_DWORD *)uint64_t v20 = v10;
      *(_WORD *)(v20 + 4) = v26;
      *(unsigned char *)(v20 + 6) = v27;
      uint64_t v22 = *v19;
      if (*v19)
      {
        *(void *)(v20 + 16) = v22;
        operator delete(v22);
      }
      *uint64_t v19 = v11;
      *(_OWORD *)(v20 + 16) = v23;
      *(void *)unsigned int v21 = v24;
      _DWORD v21[2] = v25;
      if (++v9 == 8) {
        return v7 + 12 == a2;
      }
    }
    unsigned int v6 = v7;
    v8 += 48;
    v7 += 12;
    if (v7 == a2) {
      return 1;
    }
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<AMCP::Live_Property_Traits>,AMCP::Live_Property_Traits*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      uint64_t v5 = *(void **)(v3 - 40);
      if (v5)
      {
        *(void *)(v3 - 32) = v5;
        operator delete(v5);
      }
      v3 -= 48;
    }
  }
  return a1;
}

void *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unsigned int v6 = result;
    BOOL result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAB33A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IO_Core::IOContext_Core::get_class_id(AMCP::IO_Core::IOContext_Core *this)
{
  return 1768907630;
}

void AMCP::IO_Core::IOContext_Core::update_core(std::string::size_type a1, uint64_t a2)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v115, 0, 1.58366012e190);
  uint64_t v4 = v115;
  unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145C7F0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v4, v5, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v4 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  unsigned int v6 = (std::__shared_weak_count *)*((void *)&v115 + 1);
  long long v115 = v116;
  uint64_t v98 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v7 = v116;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>();
  int v124 = &unk_1F145C870;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v7, v8, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(unsigned long long)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v7 + 40), &v115);
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  int v124 = &unk_1F145C900;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v7, v9, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v7 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  unsigned int v10 = v98;
  long long v115 = v116;
  uint64_t v99 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v11 = v116;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145C980;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v11, v12, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v11 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  unint64_t v13 = v99;
  long long v115 = v116;
  unsigned int v100 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v14 = v116;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145CA00;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, v15, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v14 + 40), &v115);
  unint64_t v16 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145CA80;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v14, v16, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v14 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  uint64_t v17 = v100;
  long long v115 = v116;
  uint64_t v101 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v18 = v116;
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  unint64_t v19 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145CB00;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v18, v19, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v18 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366009e190);
  uint64_t v20 = v101;
  long long v115 = v116;
  uint64_t v102 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v21 = v116;
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  unint64_t v22 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>();
  int v124 = &unk_1F145CB80;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v21, v22, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v21 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  long long v23 = v102;
  long long v115 = v116;
  uint64_t v103 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v24 = v116;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  unint64_t v25 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
  int v124 = &unk_1F145CC10;
  std::string::size_type v125 = a1 + 160;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<AMCP::Transport_State ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v24, v25, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<AMCP::Transport_State ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v124, v24);
  uint64_t v128 = *(void *)(v24 + 40);
  int v129 = *(_DWORD *)(v24 + 48);
  unint64_t v26 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  char v27 = v124;
  std::string::size_type v28 = v125;
  int v124 = 0;
  std::string::size_type v125 = 0;
  *(void *)&long long v116 = v27;
  *((void *)&v116 + 1) = v28;
  long long v117 = v126;
  LODWORD(v118) = v127;
  if (*((void *)&v126 + 1))
  {
    std::string::size_type v29 = *(void *)(v126 + 8);
    if ((v28 & (v28 - 1)) != 0)
    {
      if (v29 >= v28) {
        v29 %= v28;
      }
    }
    else
    {
      v29 &= v28 - 1;
    }
    v27[v29] = &v117;
    long long v126 = 0uLL;
  }
  uint64_t v119 = v128;
  int v120 = v129;
  v131 = 0;
  unsigned int v30 = operator new(0x40uLL);
  void *v30 = &unk_1F145CCA0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v30 + 1), (uint64_t *)&v116);
  v30[6] = v119;
  *((_DWORD *)v30 + 14) = v120;
  v131 = v30;
  long long v121 = 0u;
  long long v122 = 0u;
  unint64_t v123 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v121, (uint64_t)v130);
  unint64_t v123 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v24, v26, (AMCP *)&v121);
  if (v123) {
    v123(0, (uint64_t)&v121, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v130);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v116);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v24 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366011e190);
  unsigned int v31 = v103;
  long long v115 = v116;
  int v104 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v32 = v116;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  unint64_t v33 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>();
  int v124 = &unk_1F145CD20;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v32, v33, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v32 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  int v34 = v104;
  long long v115 = v116;
  unsigned int v105 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v35 = v116;
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  unint64_t v36 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>();
  int v124 = &unk_1F145CDB0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v35, v36, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v35 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366008e190);
  uint64_t v37 = v121;
  unint64_t v38 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  int v124 = &unk_1F145CE40;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v37, v38, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v37);
  unint64_t v39 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  int v124 = &unk_1F145CEC0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v37, v39, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(v37);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v37 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366008e190);
  uint64_t v40 = v105;
  long long v115 = v116;
  unsigned int v106 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v41 = v116;
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  unint64_t v42 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  int v124 = &unk_1F145CF40;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v41, v42, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(v41);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v41 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.5836601e190);
  uint64_t v43 = v121;
  unint64_t v44 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  int v124 = &unk_1F145CFC0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v43, v44, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(v43);
  unint64_t v45 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  int v124 = &unk_1F145D040;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v43, v45, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(v43);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v43 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366006e190);
  unsigned int v46 = v106;
  long long v115 = v116;
  unsigned int v107 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v47 = v116;
  if (v46) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  }
  unint64_t v48 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  int v124 = &unk_1F145D0C0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v47, v48, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(v47);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v47 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.5836601e190);
  uint64_t v49 = v107;
  long long v115 = v116;
  unsigned int v108 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v50 = v116;
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  unint64_t v51 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  int v124 = &unk_1F145D140;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v50, v51, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v50);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v50 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  uint64_t v52 = v108;
  long long v115 = v116;
  int v109 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v53 = v116;
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  unint64_t v54 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  int v124 = &unk_1F145D1C0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v53, v54, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v53);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v53 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v113, 0, 1.58366013e190);
  uint64_t v55 = v113;
  unint64_t v56 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
  int v124 = &unk_1F145D240;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v55, v56, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v124, v55);
  uint64_t v128 = *(void *)(v55 + 40);
  int v129 = *(_DWORD *)(v55 + 48);
  unint64_t v57 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v58 = v124;
  std::string::size_type v59 = v125;
  int v124 = 0;
  std::string::size_type v125 = 0;
  *(void *)&long long v116 = v58;
  *((void *)&v116 + 1) = v59;
  long long v117 = v126;
  LODWORD(v118) = v127;
  if (*((void *)&v126 + 1))
  {
    std::string::size_type v60 = *(void *)(v126 + 8);
    if ((v59 & (v59 - 1)) != 0)
    {
      if (v60 >= v59) {
        v60 %= v59;
      }
    }
    else
    {
      v60 &= v59 - 1;
    }
    v58[v60] = &v117;
    long long v126 = 0uLL;
  }
  uint64_t v119 = v128;
  int v120 = v129;
  v131 = 0;
  uint64_t v61 = operator new(0x40uLL);
  *uint64_t v61 = &unk_1F145D2D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v61 + 1), (uint64_t *)&v116);
  v61[6] = v119;
  *((_DWORD *)v61 + 14) = v120;
  v131 = v61;
  long long v121 = 0u;
  long long v122 = 0u;
  unint64_t v123 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v121, (uint64_t)v130);
  unint64_t v123 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v55, v57, (AMCP *)&v121);
  if (v123) {
    v123(0, (uint64_t)&v121, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v130);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v116);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v124);
  unint64_t v62 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
  int v124 = &unk_1F145D350;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v55, v62, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v124, v55);
  uint64_t v128 = *(void *)(v55 + 40);
  int v129 = *(_DWORD *)(v55 + 48);
  unint64_t v63 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v64 = v124;
  std::string::size_type v65 = v125;
  int v124 = 0;
  std::string::size_type v125 = 0;
  *(void *)&long long v116 = v64;
  *((void *)&v116 + 1) = v65;
  long long v117 = v126;
  LODWORD(v118) = v127;
  if (*((void *)&v126 + 1))
  {
    std::string::size_type v66 = *(void *)(v126 + 8);
    if ((v65 & (v65 - 1)) != 0)
    {
      if (v66 >= v65) {
        v66 %= v65;
      }
    }
    else
    {
      v66 &= v65 - 1;
    }
    v64[v66] = &v117;
    long long v126 = 0uLL;
  }
  uint64_t v119 = v128;
  int v120 = v129;
  v131 = 0;
  uint64_t v67 = operator new(0x40uLL);
  void *v67 = &unk_1F145D3E0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v67 + 1), (uint64_t *)&v116);
  v67[6] = v119;
  *((_DWORD *)v67 + 14) = v120;
  v131 = v67;
  long long v121 = 0u;
  long long v122 = 0u;
  unint64_t v123 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)&v121, (uint64_t)v130);
  unint64_t v123 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v55, v63, (AMCP *)&v121);
  if (v123) {
    v123(0, (uint64_t)&v121, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v130);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v116);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v55 + 40), &v113);
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366008e190);
  uint64_t v68 = v121;
  unint64_t v69 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145D460;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v68, v69, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v68);
  unint64_t v70 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  int v124 = &unk_1F145D4E0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v68, v70, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v68);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v68 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366009e190);
  uint64_t v71 = v121;
  unint64_t v72 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145D560;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v71, v72, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v71);
  unint64_t v73 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  int v124 = &unk_1F145D5E0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v71, v73, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v71);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v71 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366011e190);
  uint64_t v74 = v121;
  unint64_t v75 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145D660;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v74, v75, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v74);
  unint64_t v76 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  int v124 = &unk_1F145D6E0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v74, v76, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v74);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v74 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366011e190);
  uint64_t v77 = v121;
  unint64_t v78 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145D760;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v77, v78, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v77);
  unint64_t v79 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  int v124 = &unk_1F145D7E0;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v77, v79, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v77);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v77 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366009e190);
  unsigned int v80 = v109;
  long long v115 = v116;
  float v110 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v81 = v116;
  if (v80) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v80);
  }
  unint64_t v82 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
  int v124 = &unk_1F145D860;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v81, v82, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Power_State)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v81 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.5836601e190);
  unsigned int v83 = v110;
  long long v115 = v116;
  uint64_t v111 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v84 = v116;
  if (v83) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v83);
  }
  unint64_t v85 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>();
  int v124 = &unk_1F145D938;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v84, v85, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](&v124);
  unint64_t v86 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  int v124 = &unk_1F145D9B8;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v84, v86, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v84 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v116, 0, 1.58366012e190);
  unsigned int v87 = v111;
  long long v115 = v116;
  unint64_t v112 = (std::__shared_weak_count *)*((void *)&v116 + 1);
  uint64_t v88 = v116;
  if (v87) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v87);
  }
  unint64_t v89 = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>();
  int v124 = &unk_1F145DA38;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v88, v89, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::~__value_func[abi:ne180100](&v124);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v124, v88);
  uint64_t v128 = *(void *)(v88 + 40);
  int v129 = *(_DWORD *)(v88 + 48);
  unint64_t v90 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  unsigned int v91 = v124;
  std::string::size_type v92 = v125;
  int v124 = 0;
  std::string::size_type v125 = 0;
  *(void *)&long long v116 = v91;
  *((void *)&v116 + 1) = v92;
  long long v117 = v126;
  LODWORD(v118) = v127;
  if (*((void *)&v126 + 1))
  {
    std::string::size_type v93 = *(void *)(v126 + 8);
    if ((v92 & (v92 - 1)) != 0)
    {
      if (v93 >= v92) {
        v93 %= v92;
      }
    }
    else
    {
      v93 &= v92 - 1;
    }
    v91[v93] = &v117;
    long long v126 = 0uLL;
  }
  uint64_t v119 = v128;
  int v120 = v129;
  v131 = 0;
  std::string v94 = operator new(0x40uLL);
  *std::string v94 = &unk_1F145DAC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v94 + 1), (uint64_t *)&v116);
  v94[6] = v119;
  *((_DWORD *)v94 + 14) = v120;
  v131 = v94;
  long long v121 = 0u;
  long long v122 = 0u;
  unint64_t v123 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)&v121, (uint64_t)v130);
  unint64_t v123 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v88, v90, (AMCP *)&v121);
  if (v123) {
    v123(0, (uint64_t)&v121, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v130);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v116);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v88 + 40), &v115);
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v121, 0, 1.58366012e190);
  uint64_t v95 = v121;
  unint64_t v96 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  int v124 = &unk_1F145DB58;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v95, v96, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v95);
  unint64_t v97 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  int v124 = &unk_1F145DBD8;
  std::string::size_type v125 = a1;
  *((void *)&v126 + 1) = &v124;
  long long v116 = 0u;
  long long v117 = 0u;
  unsigned int v118 = 0;
  std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)&v116, (uint64_t)&v124);
  unsigned int v118 = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v95, v97, (AMCP *)&v116);
  if (v118) {
    v118(0, (uint64_t)&v116, 0, 0);
  }
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](&v124);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(v95);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v95 + 40), &v121);
  if (*((void *)&v121 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v121 + 1));
  }
  AMCP::IO_Core::Node::update_core(a1, a2);
  if (v112) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v112);
  }
}

void sub_1BAAB5294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>(uint64_t *a1, int a2, double a3)
{
  unsigned int v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1F1488548;
  double v8 = a3;
  int v9 = a2;
  uint64_t result = AMCP::Core::Operation::Operation((uint64_t)(v6 + 3), (int *)&v8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1BAAB5530(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(uint64_t a1, unint64_t a2, AMCP *this)
{
  unint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    goto LABEL_18;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v3 = a2;
    if (v7 <= a2) {
      unint64_t v3 = a2 % v7;
    }
  }
  else
  {
    unint64_t v3 = (v7 - 1) & a2;
  }
  int v9 = *(void **)(*(void *)a1 + 8 * v3);
  if (!v9 || (unsigned int v10 = (void *)*v9) == 0)
  {
LABEL_18:
    unint64_t v12 = (char *)operator new(0x40uLL);
    *(void *)unint64_t v12 = 0;
    *((void *)v12 + 1) = a2;
    *((void *)v12 + 2) = a2;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *((void *)v12 + 7) = 0;
    unint64_t v13 = (void (*)(uint64_t, AMCP *, char *, void))*((void *)this + 4);
    if (v13) {
      v13(2, this, v12 + 24, 0);
    }
    float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v15 = *(float *)(a1 + 32);
    if (!v7 || (float)(v15 * (float)v7) < v14)
    {
      BOOL v16 = 1;
      if (v7 >= 3) {
        BOOL v16 = (v7 & (v7 - 1)) != 0;
      }
      unint64_t v17 = v16 | (2 * v7);
      unint64_t v18 = vcvtps_u32_f32(v14 / v15);
      if (v17 <= v18) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v17;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v19);
      unint64_t v7 = *(void *)(a1 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v7 <= a2) {
          unint64_t v3 = a2 % v7;
        }
        else {
          unint64_t v3 = a2;
        }
      }
      else
      {
        unint64_t v3 = (v7 - 1) & a2;
      }
    }
    uint64_t v20 = *(void *)a1;
    uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
    if (v21)
    {
      *(void *)unint64_t v12 = *v21;
    }
    else
    {
      *(void *)unint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v12;
      *(void *)(v20 + 8 * v3) = a1 + 16;
      if (!*(void *)v12)
      {
LABEL_41:
        ++*(void *)(a1 + 24);
        return;
      }
      unint64_t v22 = *(void *)(*(void *)v12 + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v22 >= v7) {
          v22 %= v7;
        }
      }
      else
      {
        v22 &= v7 - 1;
      }
      uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    }
    *uint64_t v21 = v12;
    goto LABEL_41;
  }
  while (1)
  {
    unint64_t v11 = v10[1];
    if (v11 == a2) {
      break;
    }
    if (v8.u32[0] > 1uLL)
    {
      if (v11 >= v7) {
        v11 %= v7;
      }
    }
    else
    {
      v11 &= v7 - 1;
    }
    if (v11 != v3) {
      goto LABEL_18;
    }
LABEL_17:
    unsigned int v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_18;
    }
  }
  if (v10[2] != a2) {
    goto LABEL_17;
  }

  AMCP::swap(this, (AMCP::Thing *)(v10 + 3), this);
}

void sub_1BAAB5814(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(uint64_t a1, unsigned int *a2, void *a3)
{
  uint64_t v7 = *a2;
  unsigned int v8 = a2[1];
  unsigned int v9 = a2[2];
  unint64_t v10 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(void *)&v9 & 0xFFFFFFLL;
  unint64_t v11 = *(void *)(a1 + 8);
  if (!v11) {
    goto LABEL_19;
  }
  uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
  v12.i16[0] = vaddlv_u8(v12);
  if (v12.u32[0] > 1uLL)
  {
    uint64_t v3 = v8 & 0xFF000000 | (unint64_t)(v7 << 32) | *(void *)&v9 & 0xFFFFFFLL;
    if (v10 >= v11) {
      uint64_t v3 = v10 % v11;
    }
  }
  else
  {
    uint64_t v3 = v10 & (v11 - 1);
  }
  unint64_t v13 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
  if (!v13 || (float v14 = *v13) == 0)
  {
LABEL_19:
    BOOL v16 = operator new(0x30uLL);
    void *v16 = 0;
    v16[1] = v10;
    _OWORD v16[2] = *(void *)a2;
    *((_DWORD *)v16 + 6) = v9;
    uint64_t v17 = a3[1];
    v16[4] = *a3;
    unsigned char v16[5] = v17;
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
    float v19 = *(float *)(a1 + 32);
    if (!v11 || (float)(v19 * (float)v11) < v18)
    {
      BOOL v20 = 1;
      if (v11 >= 3) {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
      }
      unint64_t v21 = v20 | (2 * v11);
      unint64_t v22 = vcvtps_u32_f32(v18 / v19);
      if (v21 <= v22) {
        size_t v23 = v22;
      }
      else {
        size_t v23 = v21;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v23);
      unint64_t v11 = *(void *)(a1 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v10 >= v11) {
          uint64_t v3 = v10 % v11;
        }
        else {
          uint64_t v3 = v10;
        }
      }
      else
      {
        uint64_t v3 = (v11 - 1) & v10;
      }
    }
    uint64_t v24 = *(void *)a1;
    unint64_t v25 = *(void **)(*(void *)a1 + 8 * v3);
    if (v25)
    {
      void *v16 = *v25;
    }
    else
    {
      void *v16 = *(void *)(a1 + 16);
      *(void *)(a1 + 16) = v16;
      *(void *)(v24 + 8 * v3) = a1 + 16;
      if (!*v16)
      {
LABEL_42:
        ++*(void *)(a1 + 24);
        return;
      }
      unint64_t v26 = *(void *)(*v16 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11) {
          v26 %= v11;
        }
      }
      else
      {
        v26 &= v11 - 1;
      }
      unint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
    }
    *unint64_t v25 = v16;
    goto LABEL_42;
  }
  while (1)
  {
    unint64_t v15 = v14[1];
    if (v15 == v10) {
      break;
    }
    if (v12.u32[0] > 1uLL)
    {
      if (v15 >= v11) {
        v15 %= v11;
      }
    }
    else
    {
      v15 &= v11 - 1;
    }
    if (v15 != v3) {
      goto LABEL_19;
    }
LABEL_18:
    float v14 = (uint64_t *)*v14;
    if (!v14) {
      goto LABEL_19;
    }
  }
  if (v14[2] != __PAIR64__(v8, v7) || *((_DWORD *)v14 + 6) != v9) {
    goto LABEL_18;
  }
  uint64_t v28 = *a3;
  uint64_t v27 = a3[1];
  if (v27) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::size_type v29 = (std::__shared_weak_count *)v14[5];
  v14[4] = v28;
  v14[5] = v27;
  if (v29)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
}

void sub_1BAAB5B44(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[358];
}

uint64_t std::__function::__value_func<BOOL ()(unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(unsigned long long)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[428];
}

uint64_t std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 3448);
}

uint64_t std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[354];
}

uint64_t std::__function::__value_func<AMCP::Transport_State ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Transport_State ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[54];
}

uint64_t std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 3464);
}

uint64_t std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(uint64_t *a1, int a2, double a3)
{
  unsigned int v6 = operator new(0x50uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = &unk_1F1488548;
  double v8 = a3;
  int v9 = a2;
  uint64_t result = AMCP::Core::Operation::Operation((uint64_t)(v6 + 3), (int *)&v8);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_1BAAB6464(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F14888D8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB6724(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[426];
}

uint64_t std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1482A38;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB6A4C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[430];
}

uint64_t std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1482CC0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB6D74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<float ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[432];
}

uint64_t std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1482EC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB709C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[434];
}

uint64_t std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1483048;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB73C4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<double ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[362];
}

uint64_t std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1478A28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB76EC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[364];
}

uint64_t std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[368];
}

uint64_t std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1482B58;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB7B80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[442];
}

uint64_t std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  size_t v23 = 0;
  unsigned int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1483700;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  size_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAAB7EA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[386];
}

uint64_t std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Power_State)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 2768);
}

uint64_t std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 3408);
}

uint64_t std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_34"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::operator()(uint64_t a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  uint64_t v5 = *(void *)(*(void *)(v3 + 160) + 32);
  LODWORD(v6) = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v5);
  WORD2(v6) = 0;
  DWORD2(v6) = 4;
  BYTE12(v6) = v2;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store(v5, &v6);

  std::mutex::unlock(v4);
}

void sub_1BAAB84D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::mutex::unlock(v16);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145DBD8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145DBD8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_34>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_33"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (std::mutex *)(v1 + 200);
  std::mutex::lock((std::mutex *)(v1 + 200));
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*(void *)(v1 + 160)
                                                                                                  + 32));
  uint64_t v4 = HIDWORD(v3) & 1;
  std::mutex::unlock(v2);
  return v4;
}

void sub_1BAAB8630(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145DB58;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145DB58;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_33>,BOOL ()(void)>::~__func()
{
}

uint64_t std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    long long v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
        v9.i16[0] = vaddlv_u8(v9);
        if (v9.u32[0] > 1uLL)
        {
          unint64_t v2 = v5[2];
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
        uint64_t v10 = *(void **)(*(void *)a1 + 8 * v2);
        if (v10)
        {
          for (uint64_t i = (void *)*v10; i; uint64_t i = (void *)*i)
          {
            unint64_t v12 = i[1];
            if (v12 == v7)
            {
              if (i[2] == v7) {
                goto LABEL_43;
              }
            }
            else
            {
              if (v9.u32[0] > 1uLL)
              {
                if (v12 >= v8) {
                  v12 %= v8;
                }
              }
              else
              {
                v12 &= v8 - 1;
              }
              if (v12 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v13 = (char *)operator new(0x40uLL);
      *(void *)uint64_t v13 = 0;
      *((void *)v13 + 1) = v7;
      *((void *)v13 + 2) = v5[2];
      *(_OWORD *)(v13 + 24) = 0u;
      *(_OWORD *)(v13 + 40) = 0u;
      *((void *)v13 + 7) = 0;
      int v14 = (void (*)(uint64_t, void *, char *, void))v5[7];
      if (v14) {
        v14(1, v5 + 3, v13 + 24, 0);
      }
      float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v16 = *(float *)(a1 + 32);
      if (!v8 || (float)(v16 * (float)v8) < v15)
      {
        BOOL v17 = (v8 & (v8 - 1)) != 0;
        if (v8 < 3) {
          BOOL v17 = 1;
        }
        unint64_t v18 = v17 | (2 * v8);
        unint64_t v19 = vcvtps_u32_f32(v15 / v16);
        if (v18 <= v19) {
          size_t v20 = v19;
        }
        else {
          size_t v20 = v18;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v20);
        unint64_t v8 = *(void *)(a1 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v7 >= v8) {
            unint64_t v2 = v7 % v8;
          }
          else {
            unint64_t v2 = v7;
          }
        }
        else
        {
          unint64_t v2 = (v8 - 1) & v7;
        }
      }
      uint64_t v21 = *(void *)a1;
      unint64_t v22 = *(void **)(*(void *)a1 + 8 * v2);
      if (v22)
      {
        *(void *)uint64_t v13 = *v22;
      }
      else
      {
        *(void *)uint64_t v13 = *v6;
        void *v6 = v13;
        *(void *)(v21 + 8 * v2) = v6;
        if (!*(void *)v13) {
          goto LABEL_42;
        }
        unint64_t v23 = *(void *)(*(void *)v13 + 8);
        if ((v8 & (v8 - 1)) != 0)
        {
          if (v23 >= v8) {
            v23 %= v8;
          }
        }
        else
        {
          v23 &= v8 - 1;
        }
        unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
      }
      void *v22 = v13;
LABEL_42:
      ++*(void *)(a1 + 24);
LABEL_43:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BAAB8924(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      uint64_t v4 = (void (*)(void, void *, void, void))v2[7];
      if (v4) {
        v4(0, v2 + 3, 0, 0);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *(void *)uint64_t result = v2;
  *(void *)(result + 8) = a2[1];
  a2[1] = 0;
  uint64_t v5 = a2[2];
  uint64_t v3 = a2 + 2;
  uint64_t v4 = v5;
  *(void *)(result + 16) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 24) = v6;
  *(_DWORD *)(result + 32) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 16;
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_5Graph12Timebase_SetEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<AMCP::Graph::Timebase_Set>((uint64_t)&v3, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::construct<AMCP::Graph::Timebase_Set&>(a2);
}

void sub_1BAAB8AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Graph::Timebase_Set>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)std::string::size_type v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    unint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    uint64_t v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Graph::Timebase"
          "_Set, Argument_Types = <>]";
    unint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    float v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)AudioStreamBasicDescription buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint8x8_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)std::string::size_type v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    unint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    uint64_t v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Graph::Timebase"
          "_Set, Argument_Types = <>]";
    unint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    float v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAAB8FA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::construct<AMCP::Graph::Timebase_Set&>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::dispatch;
  operator new();
}

void sub_1BAAB90D8(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
  MEMORY[0x1C1859840](v1, 0x10A0C4080155EDELL);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = (std::__shared_weak_count *)v2[3];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  uint64_t v5 = *(void **)(a2 + 16);
  if (v5)
  {
    uint64_t v6 = (void *)(a1 + 16);
    do
    {
      unint64_t v7 = v5[2];
      unint64_t v8 = 0x9DDFEA08EB382D69 * (((8 * v7) + 8) ^ HIDWORD(v7));
      unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(v7) ^ (v8 >> 47) ^ v8);
      unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      unint64_t v11 = *(void *)(a1 + 8);
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v2 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
          if (v10 >= v11) {
            unint64_t v2 = v10 % v11;
          }
        }
        else
        {
          unint64_t v2 = v10 & (v11 - 1);
        }
        mach_port_t v13 = *(void **)(*(void *)a1 + 8 * v2);
        if (v13)
        {
          for (uint64_t i = (void *)*v13; i; uint64_t i = (void *)*i)
          {
            unint64_t v15 = i[1];
            if (v15 == v10)
            {
              if (i[2] == v7) {
                goto LABEL_43;
              }
            }
            else
            {
              if (v12.u32[0] > 1uLL)
              {
                if (v15 >= v11) {
                  v15 %= v11;
                }
              }
              else
              {
                v15 &= v11 - 1;
              }
              if (v15 != v2) {
                break;
              }
            }
          }
        }
      }
      float v16 = operator new(0x20uLL);
      void *v16 = 0;
      v16[1] = v10;
      uint64_t v17 = v5[3];
      void v16[2] = v5[2];
      _OWORD v16[3] = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v11 || (float)(v19 * (float)v11) < v18)
      {
        BOOL v20 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v11);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t v23 = v22;
        }
        else {
          size_t v23 = v21;
        }
        std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(a1, v23);
        unint64_t v11 = *(void *)(a1 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v2 = v10 % v11;
          }
          else {
            unint64_t v2 = v10;
          }
        }
        else
        {
          unint64_t v2 = (v11 - 1) & v10;
        }
      }
      uint64_t v24 = *(void *)a1;
      uint64_t v25 = *(void **)(*(void *)a1 + 8 * v2);
      if (v25)
      {
        void *v16 = *v25;
      }
      else
      {
        void *v16 = *v6;
        void *v6 = v16;
        *(void *)(v24 + 8 * v2) = v6;
        if (!*v16) {
          goto LABEL_42;
        }
        unint64_t v26 = *(void *)(*v16 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v26 >= v11) {
            v26 %= v11;
          }
        }
        else
        {
          v26 &= v11 - 1;
        }
        uint64_t v25 = (void *)(*(void *)a1 + 8 * v26);
      }
      *uint64_t v25 = v16;
LABEL_42:
      ++*(void *)(a1 + 24);
LABEL_43:
      uint64_t v5 = (void *)*v5;
    }
    while (v5);
  }
  return a1;
}

void sub_1BAAB93E4(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAB9470(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(void *)&v4)
  {
    if (prime >= *(void *)&v4) {
      return;
    }
    unint64_t v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      unint64_t v11 = std::__next_prime(v11);
    }
    else
    {
      uint64_t v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2) {
        unint64_t v11 = v13;
      }
    }
    if (prime <= v11) {
      size_t prime = v11;
    }
    if (prime >= *(void *)&v4) {
      return;
    }
    if (!prime)
    {
      float v16 = *(void **)a1;
      *(void *)a1 = 0;
      if (v16) {
        operator delete(v16);
      }
      *(void *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v5 = operator new(8 * prime);
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = v5;
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = 0;
  *(void *)(a1 + 8) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  size_t v8 = *(void **)(a1 + 16);
  if (v8)
  {
    size_t v9 = v8[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime) {
        v9 %= prime;
      }
    }
    else
    {
      v9 &= prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v9) = a1 + 16;
    long long v14 = (void *)*v8;
    if (*v8)
    {
      do
      {
        size_t v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime) {
            v15 %= prime;
          }
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v15))
          {
            *(void *)(*(void *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *size_t v8 = *v14;
          *long long v14 = **(void **)(*(void *)a1 + 8 * v15);
          **(void **)(*(void *)a1 + 8 * v15) = v14;
          long long v14 = v8;
        }
        size_t v15 = v9;
LABEL_31:
        size_t v8 = v14;
        long long v14 = (void *)*v14;
        size_t v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::shared_ptr<AMCP::Graph::Timebase>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (std::__shared_weak_count *)__p[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::dispatch(int a1, uint64_t *a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::construct<AMCP::Graph::Timebase_Set&>(a3, *a2);
      goto LABEL_15;
    case 2:
      uint64_t v9 = *a2;
      *a2 = 0;
      uint64_t v10 = *(void *)a3;
      *(void *)a3 = v9;
      if (v10) {
        std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](v10);
      }
      *((void *)a3 + 4) = AMCP::Implementation::Outboard_Storage<AMCP::Graph::Timebase_Set>::dispatch;
LABEL_6:
      uint64_t v11 = *a2;
      *a2 = 0;
      if (v11) {
        std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](v11);
      }
      uint64_t result = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return result;
    case 3:
      uint64_t v12 = AMCP::Implementation::get_type_marker<AMCP::Graph::Timebase_Set>();
      uint64_t result = 0;
      *a4 = v12;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Graph::Timebase_Set>()) {
        return *a2;
      }
      else {
        return 0;
      }
    case 6:
      long long v14 = 0;
      memset(v13, 0, sizeof(v13));
      AMCP::swap((AMCP::Thing *)v13, a3, a3);
      if (v14) {
        v14(0, v13, 0, 0);
      }
LABEL_15:
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t std::default_delete<AMCP::Graph::Timebase_Set>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    unint64_t v2 = *(void **)(result + 40);
    if (v2)
    {
      *(void *)(v1 + 48) = v2;
      operator delete(v2);
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Graph::Timebase_Set>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 2784);
}

AMCP::Thing *AMCP::swap(AMCP::Thing *this, AMCP::Thing *a2, AMCP::Thing *a3)
{
  if (this != a2)
  {
    unint64_t v3 = a2;
    int8x8_t v4 = this;
    uint64_t v5 = (uint64_t (*)(uint64_t, AMCP::Thing *, AMCP::Thing *, void))*((void *)a2 + 4);
    if (*((void *)this + 4))
    {
      if (v5)
      {
        uint64_t v7 = 0;
        memset(v6, 0, sizeof(v6));
        v5(2, a2, (AMCP::Thing *)v6, 0);
        (*((void (**)(uint64_t, AMCP::Thing *, AMCP::Thing *, void))v4 + 4))(2, v4, v3, 0);
        this = (AMCP::Thing *)v7(2, v6, v4, 0);
        if (v7) {
          return (AMCP::Thing *)v7(0, v6, 0, 0);
        }
        return this;
      }
      a2 = this;
      int8x8_t v4 = v3;
      uint64_t v5 = (uint64_t (*)(uint64_t, AMCP::Thing *, AMCP::Thing *, void))*((void *)this + 4);
    }
    else if (!v5)
    {
      return this;
    }
    return (AMCP::Thing *)v5(2, a2, v4, 0);
  }
  return this;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145DAC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F145DAC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAAB9AEC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145DAC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Graph::Timebase_Set>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145DAC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    unint64_t v3 = (void (*)(void, void *, void, void))__p[7];
    if (v3) {
      v3(0, __p + 3, 0, 0);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Graph::Timebase_Set ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Graph::Timebase_Set ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Graph::Timebase_Set ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_32"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int8x8_t v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  uint64_t v5 = *(void *)(v3 + 128);
  if (!v5) {
    goto LABEL_8;
  }
  uint64_t v7 = *(void *)(v5 + 80);
  uint64_t v6 = *(std::__shared_weak_count **)(v5 + 88);
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
LABEL_8:
      *(void *)(a2 + 32) = 0;
      *(void *)(a2 + 40) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(_DWORD *)(a2 + 32) = 1065353216;
      *(void *)(a2 + 48) = 0;
      *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
      goto LABEL_9;
    }
  }
  else if (!v7)
  {
    goto LABEL_8;
  }
  std::unordered_set<std::shared_ptr<AMCP::Graph::Timebase>>::unordered_set(a2, v7);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + ++*(_DWORD *)(this + 56) = 0;
  std::vector<AMCP::IO_Core::Play_State_Manager::Play_Request>::__init_with_size[abi:ne180100]<AMCP::IO_Core::Play_State_Manager::Play_Request*,AMCP::IO_Core::Play_State_Manager::Play_Request*>((void *)(a2 + 40), *(const void **)(v7 + 40), *(void *)(v7 + 48), (uint64_t)(*(void *)(v7 + 48) - *(void *)(v7 + 40)) >> 2);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
LABEL_9:

  std::mutex::unlock(v4);
}

void sub_1BAAB9EE4(_Unwind_Exception *a1)
{
  std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::~__hash_table(v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145DA38;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145DA38;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_32>,AMCP::Graph::Timebase_Set ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_31"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  AMCP::IO_Core::IOContext_Core::get_master_timebase((AMCP::IO_Core::IOContext_Core *)&v4, v3);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)a2 = v4;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;

  std::mutex::unlock((std::mutex *)(v3 + 200));
}

void sub_1BAABA21C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::get_master_timebase(AMCP::IO_Core::IOContext_Core *this, uint64_t a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 128);
  if (!v3)
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    return;
  }
  uint64_t v5 = *(void *)(v3 + 96);
  long long v4 = *(atomic_ullong **)(v3 + 104);
  if (!v4)
  {
    if (v5)
    {
      *(void *)this = v5;
      *((void *)this + 1) = 0;
      return;
    }
LABEL_10:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&v28[2] = "IOContext_Core.cpp";
      __int16 v29 = 1024;
      int v30 = 1040;
      __int16 v31 = 2080;
      *(void *)uint64_t v32 = "not (m_inventory->get_master_timebase())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&void v32[6] = "Timebase_Ref AMCP::IO_Core::IOContext_Core::get_master_timebase() const";
    unint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    int v34 = 1040;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    size_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v4);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = *(void *)(a2 + 128);
  uint64_t v9 = *(void *)(v7 + 96);
  uint64_t v8 = *(void *)(v7 + 104);
  *(void *)this = v9;
  *((void *)this + 1) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_1BAABA4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a26);
  MEMORY[0x1C1859090](&a24);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (v26) {
    __cxa_free_exception(a10);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(std::__shared_weak_count **)(a2 + 8);
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(void *)a3 = *(void *)a2;
      uint64_t v9 = *(void *)(a2 + 8);
      *((void *)a3 + 1) = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::shared_ptr<AMCP::Graph::Timebase>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
      uint64_t result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
      mach_port_t v12 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v17[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v17);
        mach_port_t v12 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v17[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v11) {
        goto LABEL_24;
      }
      long long v13 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      std::logic_error v19 = 0;
      if (v13)
      {
        v13(3, a3, 0, &v19);
        long long v13 = v19;
      }
      if (v13 == (void (*)(uint64_t, AMCP::Thing *, void, void))v11)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v17[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
          uint64_t v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v17);
        }
        else
        {
          uint64_t v14 = 0;
        }
        *(void *)&v17[0] = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
        if (*v14 == *(void *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v17))return 1; {
      }
        }
      else
      {
LABEL_24:
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(v17, a2);
        AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(&v19, (uint64_t)a3);
        size_t v15 = *(void (**)(void, void, void, void))&v17[0];
        long long v16 = (void (*)(void, void, void, void))v19;
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if (*((void *)&v17[0] + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17[0] + 1));
        }
        if (v15 == v16) {
          return 1;
        }
      }
      return 0;
    case 6:
      std::string v18 = 0;
      memset(v17, 0, sizeof(v17));
      AMCP::swap((AMCP::Thing *)v17, a3, a3);
      if (v18) {
        v18(0, v17, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[417];
}

void *AMCP::Thing::convert_to<std::shared_ptr<AMCP::Graph::Timebase>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_15;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::logic_error v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t result = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      uint64_t v7 = result[1];
      *a1 = *result;
      a1[1] = v7;
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      return result;
    }
LABEL_15:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::shared_ptr<AMCP::Graph::Timebase>>();
  memset(v17, 0, sizeof(v17));
  std::string v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t result = (void *)v18(4, v17, 0, &v15);
  if (!result)
  {
    long long v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v8 = result[1];
  *a1 = *result;
  a1[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAABAA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D9B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D9B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_31>,AMCP::Thing ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>::dispatch;
LABEL_4:
      std::__function::__value_func<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>();
      uint64_t result = 0;
      *a4 = v9;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Graph::Timebase> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v11 = 0;
      memset(v10, 0, sizeof(v10));
      AMCP::swap((AMCP::Thing *)v10, a3, a3);
      if (v11) {
        v11(0, v10, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_30"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::operator()(uint64_t a1@<X0>, AMCP::IO_Core::IOContext_Core *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  AMCP::IO_Core::IOContext_Core::get_master_timebase(a2, v3);

  std::mutex::unlock((std::mutex *)(v3 + 200));
}

void sub_1BAABAD8C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D938;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D938;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_30>,std::shared_ptr<AMCP::Graph::Timebase> ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Power_State)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Power_State)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Power_State)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Power_State)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_29"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::operator()(uint64_t a1, int *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = (std::mutex *)(v3 + 200);
  std::mutex::lock((std::mutex *)(v3 + 200));
  uint64_t v5 = *(void *)(v3 + 160);
  uint64_t v6 = pthread_self();
  BOOL is_thread_configured_for_realtime = AMCP::Utility::is_thread_configured_for_realtime(v6, v7);
  if (is_thread_configured_for_realtime)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_thread_configured_for_realtime);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)unint64_t v36 = 2080;
      *(void *)&v36[2] = "IO_Thread.cpp";
      __int16 v37 = 1024;
      int v38 = 177;
      __int16 v39 = 2080;
      *(void *)uint64_t v40 = "not (not AMCP::Utility::is_thread_configured_for_realtime(pthread_self()))";
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call notify_and_update_power_assertions from a realtime thread", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v21);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Don't call notify_and_update_power_assertions from a realtime thread", (uint64_t)&v24);
    std::logic_error::logic_error(&v20, &v24);
    v20.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v29, &v20);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v34 = -1;
    v29.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v30 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    *(void *)&void v40[6] = "void AMCP::IO_Core::IO_Thread::update_power_state_and_notify(AMCP::Power_State)";
    uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread.cpp";
    LODWORD(v42) = 177;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    int v26 = &unk_1F148AA90;
    long long v27 = v22;
    uint64_t v28 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_DWORD *)(v5 + ++*(_DWORD *)(this + 56) = v2;
  uint64_t v9 = *(pthread_cond_t **)(v5 + 32);
  *(_DWORD *)AudioStreamBasicDescription buf = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v9);
  *(_WORD *)&uint8_t buf[4] = 0;
  *(_DWORD *)unint64_t v36 = v2;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)v9);
  v36[4] = v10 & 1;
  caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store((uint64_t)v9, buf);
  uint64_t v11 = (AMCP::Utility::Kernel_Error_Category *)pthread_cond_broadcast(v9 + 4);
  unsigned int v12 = v11;
  AMCP::Utility::Kernel_Error_Category::get(v11);
  if (v12)
  {
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      std::string v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)unint64_t v36 = 2080;
      *(void *)&v36[2] = "Thread_Control_State.cpp";
      __int16 v37 = 1024;
      int v38 = 178;
      __int16 v39 = 2080;
      *(void *)uint64_t v40 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to set the signaling the condition variable", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v26, v12, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    boost::enable_error_info<std::system_error>((std::runtime_error *)&v29, (uint64_t)&v26);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&v29);
    unint64_t v42 = "void AMCP::IO_Core::Thread_Control_State::power_state_changed(AMCP::Power_State)";
    uint64_t v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Thread_Control_State.cpp";
    int v44 = 178;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v22);
    *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = v22;
    uint64_t v25 = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    v24.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }

  std::mutex::unlock(v4);
}

void sub_1BAABB4C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,uint64_t a26,char a27)
{
  if (__p)
  {
    a22 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(v29 - 144);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector((uint64_t)&a27);
  std::runtime_error::~runtime_error(&a24);
  if (a10) {
    __cxa_free_exception(v28);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a11);
  std::mutex::unlock(v27);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D860;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D860;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_29>,void ()(AMCP::Power_State)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_28"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::operator()(uint64_t result, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(*(void *)(result + 8) + 160);
  int v4 = *(_DWORD *)(v3 + 56);
  *(unsigned char *)(v3 + 61) = v2;
  BOOL v6 = v4 == 2 && v2 == 0;
  *(unsigned char *)(v3 + 62) = v6;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D7E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D7E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_28>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_27"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 160) + 61);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D760;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D760;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_27>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_26"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::operator()(uint64_t result, unsigned char *a2)
{
  uint64_t v2 = *(void *)(*(void *)(result + 8) + 160);
  int v3 = *(_DWORD *)(v2 + 56);
  *(unsigned char *)(v2 + 60) = *a2;
  BOOL v4 = v3 == 2 && *(unsigned char *)(v2 + 61) == 0;
  *(unsigned char *)(v2 + 62) = v4;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D6E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D6E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_26>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_25"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 8) + 160) + 60);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D660;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D660;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_25>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_24"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::operator()(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(result + 8) + 616) = *a2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D5E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D5E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_24>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_23"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 616);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D560;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D560;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_23>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIbEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  BOOL v4 = AMCP::Thing::convert_to<BOOL>(a2);
  return AMCP::Core::Operation::call_function<void,BOOL const&>(v2, (uint64_t)&v4);
}

uint64_t AMCP::Core::Operation::call_function<void,BOOL const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
  uint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    uint64_t v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const BOOL &>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  BOOL v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)AudioStreamBasicDescription buf = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>(),
        (uint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      char v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    uint64_t v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const BOOL &>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAABC104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483700;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + ++*(_DWORD *)(this + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  void *v3 = &unk_1F1483700;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  void v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAABC2BC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1483700;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<BOOL>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1483700;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(BOOL const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(BOOL const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(BOOL const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      unsigned int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_22"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::operator()(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(result + 8) + 604) = *a2;
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D4E0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = &unk_1F145D4E0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_22>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIbEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = AMCP::Core::Operation::call_function<BOOL>((void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(unsigned char *)a2 = v3;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
  return result;
}

BOOL AMCP::Implementation::In_Place_Storage<BOOL>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      double result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      double result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      return result;
    case 2:
      double result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<BOOL>();
      double result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<BOOL>();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        uint64_t v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      mach_port_t v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      int v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        mach_port_t v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        BOOL v15 = AMCP::Thing::convert_to<BOOL>(a2);
        return v15 == AMCP::Thing::convert_to<BOOL>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<BOOL>();
        unsigned int v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        unsigned int v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<BOOL>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_88;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<BOOL>();
        mach_port_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        mach_port_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            char v17 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v17;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            char v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            char v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            __int16 v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v20;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            __int16 v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v22;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = 0.0;
            if (*v14) {
              float v28 = 1.0;
            }
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            double v29 = 0.0;
            if (*v14) {
              double v29 = 1.0;
            }
            long long v33 = 0uLL;
            long long v32 = *(unint64_t *)&v29;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_82;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            double v30 = 0.0;
            if (*v14) {
              double v30 = 1.0;
            }
            long long v33 = 0uLL;
            long long v32 = *(unint64_t *)&v30;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_82;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<BOOL,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_88:
              int v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_89;
          }
          if (v14)
          {
            int v31 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            uint64_t v16 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_82;
          }
        }
LABEL_83:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_83;
      }
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = *v14;
      uint64_t v16 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_82:
      int v34 = v16;
LABEL_89:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAABCCEC(void *a1)
{
}

BOOL AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(void *a1)
{
  if (*a1 == AMCP::Implementation::get_type_marker<char>()
    || *a1 == AMCP::Implementation::get_type_marker<signed char>()
    || *a1 == AMCP::Implementation::get_type_marker<unsigned char>()
    || *a1 == AMCP::Implementation::get_type_marker<short>()
    || *a1 == AMCP::Implementation::get_type_marker<unsigned short>()
    || *a1 == AMCP::Implementation::get_type_marker<int>()
    || *a1 == AMCP::Implementation::get_type_marker<unsigned int>()
    || *a1 == AMCP::Implementation::get_type_marker<long>())
  {
    return 1;
  }

  return AMCP::is_one_of<unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a1);
}

uint64_t AMCP::Implementation::get_type_marker<char>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<char>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA380], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[249];
}

uint64_t AMCP::Implementation::get_type_marker<signed char>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<signed char>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA370], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[251];
}

uint64_t AMCP::Implementation::get_type_marker<unsigned char>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<unsigned char>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3A0], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[253];
}

uint64_t AMCP::Implementation::get_type_marker<short>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<short>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3C8], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[255];
}

uint64_t AMCP::Implementation::get_type_marker<unsigned short>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<unsigned short>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3D0], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[257];
}

uint64_t AMCP::Implementation::get_type_marker<int>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<int>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3A8], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[259];
}

uint64_t AMCP::Implementation::get_type_marker<long>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3B8], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[263];
}

uint64_t AMCP::Implementation::get_type_marker<unsigned long>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<unsigned long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3C0], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[265];
}

uint64_t AMCP::Implementation::get_type_marker<long long>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<long long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3E0], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[267];
}

uint64_t AMCP::Implementation::get_type_marker<unsigned long long>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<unsigned long long>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA3E8], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[169];
}

uint64_t AMCP::Implementation::get_type_marker<float>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<float>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA398], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[269];
}

uint64_t AMCP::Implementation::get_type_marker<double>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<double>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA388], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[271];
}

uint64_t AMCP::Implementation::get_type_marker<long double>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<long double>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FBA390], v3);
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[273];
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Direction>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[275];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[277];
}

void *AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(void *result, unsigned char *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (*a2) {
    int v2 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  }
  else {
    int v2 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  void *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[279];
}

void AMCP::Implementation::create_number_from<BOOL,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  char valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAABD598(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return a1;
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      double result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      CFNumberRef v9 = *(CFNumberRef *)(a2 + 32);
      number[0] = 0;
      if (v9)
      {
        ((void (*)(uint64_t, uint64_t, void, CFNumberRef *))v9)(3, a2, 0, number);
        CFNumberRef v9 = number[0];
      }
      if (v9 != (CFNumberRef)v8) {
        goto LABEL_28;
      }
      CFNumberRef v10 = *(CFNumberRef *)(a3 + 32);
      otherNumber[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, uint64_t, void, CFNumberRef *))v10)(3, a3, 0, otherNumber);
        CFNumberRef v10 = otherNumber[0];
      }
      if (v10 != (CFNumberRef)v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::NumberRef>(number, a2);
        AMCP::Thing::convert_to<applesauce::CF::NumberRef>(otherNumber, a3);
        CFNumberRef v13 = number[0];
        CFNumberRef v14 = otherNumber[0];
        if (number[0])
        {
          if (!otherNumber[0])
          {
            BOOL v15 = 0;
            goto LABEL_67;
          }
          BOOL v15 = CFNumberCompare(number[0], otherNumber[0], 0) == kCFCompareEqualTo;
        }
        else
        {
          if (otherNumber[0]) {
            uint64_t v16 = -1;
          }
          else {
            uint64_t v16 = 0;
          }
          BOOL v15 = otherNumber[0] == 0;
          if (!otherNumber[0]) {
            return !v16;
          }
        }
        CFRelease(v14);
        if (!v13) {
          return v15;
        }
LABEL_67:
        CFRelease(v13);
        return v15;
      }
      if (*(void *)(a2 + 32))
      {
        number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
        mach_port_t v11 = (CFNumberRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(a2 + 32))(4, a2, 0, number);
      }
      else
      {
        mach_port_t v11 = 0;
      }
      number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
      CFNumberRef v24 = *(const __CFNumber **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(a3 + 32))(4, a3, 0, number);
      if (*v11)
      {
        if (!v24) {
          return 0;
        }
        CFComparisonResult v25 = CFNumberCompare(*v11, v24, 0);
      }
      else if (v24)
      {
        CFComparisonResult v25 = kCFCompareLessThan;
      }
      else
      {
        CFComparisonResult v25 = kCFCompareEqualTo;
      }
      return v25 == kCFCompareEqualTo;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (*(void *)(a2 + 32))
      {
        number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
        unsigned int v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(a2 + 32))(4, a2, 0, number);
      }
      else
      {
        unsigned int v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)number, *v12);
          int v31 = 0;
          *(_OWORD *)otherNumber = 0u;
          long long v30 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>((uint64_t)otherNumber, (CFTypeRef *)number);
          if (number[0]) {
            CFRelease(number[0]);
          }
          if (v31) {
            goto LABEL_125;
          }
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>() {
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
      }
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_52:
        int v31 = 0;
        *(_OWORD *)otherNumber = 0u;
        long long v30 = 0u;
        if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
          && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
        {
          goto LABEL_122;
        }
LABEL_53:
        if (*(void *)(a2 + 32))
        {
          number[0] = (CFNumberRef)AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
          char v19 = (const __CFNumber **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(a2 + 32))(4, a2, 0, number);
        }
        else
        {
          char v19 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
        {
          if (v19)
          {
            if (*v19)
            {
              BOOL v20 = applesauce::CF::convert_to<BOOL,0>(*v19);
              *(_OWORD *)number = 0u;
              long long v33 = 0u;
              LOBYTE(number[0]) = v20;
              __int16 v21 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_93:
              int v34 = v21;
              goto LABEL_123;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v19)
          {
            if (*v19)
            {
              char v22 = applesauce::CF::convert_to<char,0>(*v19);
              *(_OWORD *)number = 0u;
              long long v33 = 0u;
              LOBYTE(number[0]) = v22;
              __int16 v21 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
              goto LABEL_93;
            }
LABEL_129:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_108:
          __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v19)
          {
            if (*v19)
            {
              char v23 = applesauce::CF::convert_to<signed char,0>(*v19);
              *(_OWORD *)number = 0u;
              long long v33 = 0u;
              LOBYTE(number[0]) = v23;
              __int16 v21 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
              goto LABEL_93;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v19)
          {
            if (*v19)
            {
              char v26 = applesauce::CF::convert_to<unsigned char,0>(*v19);
              *(_OWORD *)number = 0u;
              long long v33 = 0u;
              LOBYTE(number[0]) = v26;
              __int16 v21 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
              goto LABEL_93;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v19)
          {
            if (*v19)
            {
              __int16 v27 = applesauce::CF::convert_to<short,0>(*v19);
              *(_OWORD *)number = 0u;
              long long v33 = 0u;
              LOWORD(number[0]) = v27;
              __int16 v21 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
              goto LABEL_93;
            }
            goto LABEL_129;
          }
          goto LABEL_108;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned short>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,int>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned int>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long long>((unint64_t *)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,float>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,double>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long double>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Direction>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,AMCP::Direction>((uint64_t)number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::BooleanRef>(number, v19);
          goto LABEL_123;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::NumberRef>((uint64_t)number, (CFTypeRef *)v19);
        }
        else
        {
LABEL_122:
          int v34 = 0;
          *(_OWORD *)number = 0u;
          long long v33 = 0u;
        }
LABEL_123:
        AMCP::swap((AMCP::Thing *)number, (AMCP::Thing *)otherNumber, v18);
        if (v34) {
          v34(0, (uint64_t)number, 0, 0);
        }
LABEL_125:
        AMCP::swap((AMCP::Thing *)otherNumber, (AMCP::Thing *)a3, v17);
        if (v31) {
          v31(0, otherNumber, 0, 0);
        }
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAABDE44(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::NumberRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    double result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        double result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFNumberRef v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
  memset(v17, 0, sizeof(v17));
  char v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    mach_port_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  double result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    CFNumberRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFNumberRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    double result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAABE12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::NumberRef::~NumberRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

BOOL applesauce::CF::convert_to<BOOL,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    unsigned __int16 v3 = applesauce::CF::details::number_convert_as<BOOL>(a1);
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      __int16 v5 = CFBooleanGetValue(a1) != 0;
      __int16 v6 = 1;
    }
    else
    {
      __int16 v5 = 0;
      __int16 v6 = 0;
    }
    unsigned __int16 v3 = v5 | (v6 << 8);
  }
  if (v3 <= 0xFFu)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v3 != 0;
}

void sub_1BAABE244(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<char,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt64Type:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloat32Type:
        __int16 v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloat32Type);
        goto LABEL_26;
      case kCFNumberFloat64Type:
        __int16 v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberFloat64Type);
        goto LABEL_26;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
        goto LABEL_20;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_20;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongLongType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloatType:
        __int16 v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloatType);
        goto LABEL_26;
      case kCFNumberDoubleType:
        __int16 v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberDoubleType);
        goto LABEL_26;
      case kCFNumberCFIndexType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_20;
      case kCFNumberNSIntegerType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_20:
        BOOL v6 = Value != 0;
        if (Value) {
          LOBYTE(v5) = valuePtr;
        }
        else {
          LOBYTE(v5) = 0;
        }
        if (v6) {
          return (char)v5;
        }
        goto LABEL_27;
      case kCFNumberCGFloatType:
        __int16 v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberCGFloatType);
LABEL_26:
        if (!HIBYTE(v5)) {
          goto LABEL_27;
        }
        return (char)v5;
      default:
        goto LABEL_27;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LOBYTE(v5) = CFBooleanGetValue(a1);
  return (char)v5;
}

void sub_1BAABE498(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<signed char,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt64Type:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloat32Type:
        __int16 v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloat32Type);
        goto LABEL_26;
      case kCFNumberFloat64Type:
        __int16 v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberFloat64Type);
        goto LABEL_26;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
        goto LABEL_20;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_20;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongLongType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloatType:
        __int16 v5 = applesauce::CF::details::handle_case<float,signed char>(a1, kCFNumberFloatType);
        goto LABEL_26;
      case kCFNumberDoubleType:
        __int16 v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberDoubleType);
        goto LABEL_26;
      case kCFNumberCFIndexType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_20;
      case kCFNumberNSIntegerType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_20:
        BOOL v6 = Value != 0;
        if (Value) {
          LOBYTE(v5) = valuePtr;
        }
        else {
          LOBYTE(v5) = 0;
        }
        if (v6) {
          return (char)v5;
        }
        goto LABEL_27;
      case kCFNumberCGFloatType:
        __int16 v5 = applesauce::CF::details::handle_case<double,signed char>(a1, kCFNumberCGFloatType);
LABEL_26:
        if (!HIBYTE(v5)) {
          goto LABEL_27;
        }
        return (char)v5;
      default:
        goto LABEL_27;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LOBYTE(v5) = CFBooleanGetValue(a1);
  return (char)v5;
}

void sub_1BAABE72C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<unsigned char,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberSInt64Type:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloat32Type:
        LOWORD(result) = applesauce::CF::details::handle_case<float,unsigned char>(a1, kCFNumberFloat32Type);
        goto LABEL_26;
      case kCFNumberFloat64Type:
        LOWORD(result) = applesauce::CF::details::handle_case<double,unsigned char>(a1, kCFNumberFloat64Type);
        goto LABEL_26;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
        goto LABEL_20;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_20;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberLongLongType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_20;
      case kCFNumberFloatType:
        LOWORD(result) = applesauce::CF::details::handle_case<float,unsigned char>(a1, kCFNumberFloatType);
        goto LABEL_26;
      case kCFNumberDoubleType:
        LOWORD(result) = applesauce::CF::details::handle_case<double,unsigned char>(a1, kCFNumberDoubleType);
        goto LABEL_26;
      case kCFNumberCFIndexType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_20;
      case kCFNumberNSIntegerType:
        uint64_t valuePtr = 0;
        int Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_20:
        BOOL v6 = Value != 0;
        if (Value) {
          LOBYTE(result) = valuePtr;
        }
        else {
          LOBYTE(result) = 0;
        }
        if (v6) {
          return result;
        }
        goto LABEL_27;
      case kCFNumberCGFloatType:
        LOWORD(result) = applesauce::CF::details::handle_case<double,unsigned char>(a1, kCFNumberCGFloatType);
LABEL_26:
        if (!BYTE1(result)) {
          goto LABEL_27;
        }
        return result;
      default:
        goto LABEL_27;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_27:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LOBYTE(result) = CFBooleanGetValue(a1);
  return result;
}

void sub_1BAABE9C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned short>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int16 v3 = applesauce::CF::convert_to<unsigned short,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

void sub_1BAABEAB8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,int>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = applesauce::CF::convert_to<int,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  return result;
}

void sub_1BAABEB68(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned int>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v3 = applesauce::CF::convert_to<unsigned int,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void sub_1BAABEC18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long>(unint64_t *a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t result = applesauce::CF::convert_to<long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<long>::dispatch;
  return result;
}

void sub_1BAABECC4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long>(unint64_t *a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t result = applesauce::CF::convert_to<unsigned long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
  return result;
}

void sub_1BAABED70(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long long>(unint64_t *a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t result = applesauce::CF::convert_to<long long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<long long>::dispatch;
  return result;
}

void sub_1BAABEE1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,unsigned long long>(unint64_t *a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t result = applesauce::CF::convert_to<unsigned long long,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (unint64_t)AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  return result;
}

void sub_1BAABEEC8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,float>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  float v3 = applesauce::CF::convert_to<float,0>(*a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
}

void sub_1BAABEF78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,double>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v3 = applesauce::CF::convert_to<double,0>(*a2);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(double *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
}

void sub_1BAABF028(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,long double>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v3 = applesauce::CF::convert_to<double,0>(*a2);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(double *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
}

void sub_1BAABF0D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,AMCP::Direction>(uint64_t a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  return result;
}

void sub_1BAABF188(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::BooleanRef>(void *a1, const __CFNumber **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL result = applesauce::CF::convert_to<BOOL,0>(*a2);
  CFTypeID v4 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  if (!result) {
    CFTypeID v4 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v5 = *v4;
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v5;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void sub_1BAABF250(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::create_number_from<applesauce::CF::NumberRef,applesauce::CF::NumberRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;

  return AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef const&>(a1, a2);
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::construct<applesauce::CF::BooleanRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      BOOL result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
      CFBooleanRef v9 = *(CFBooleanRef *)(a2 + 32);
      BOOLean[0] = 0;
      if (v9)
      {
        ((void (*)(uint64_t, uint64_t, void, CFBooleanRef *))v9)(3, a2, 0, BOOLean);
        CFBooleanRef v9 = BOOLean[0];
      }
      if (v9 != (CFBooleanRef)v8) {
        goto LABEL_28;
      }
      CFNumberRef v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf);
        CFNumberRef v10 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(BOOLean, a2);
        AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(cf, a3);
        CFBooleanRef v13 = BOOLean[0];
        CFBooleanRef v14 = (const __CFBoolean *)cf[0];
        if (BOOLean[0])
        {
          if (!cf[0])
          {
            BOOL v18 = 0;
LABEL_74:
            CFRelease(v13);
            return v18;
          }
          unsigned int Value = CFBooleanGetValue(BOOLean[0]);
          if (Value >= CFBooleanGetValue(v14))
          {
            int v26 = CFBooleanGetValue(v13);
            BOOL v16 = v26 != CFBooleanGetValue(v14);
          }
          else
          {
            BOOL v16 = 1;
          }
          BOOL v18 = !v16;
        }
        else
        {
          if (cf[0]) {
            uint64_t v17 = -1;
          }
          else {
            uint64_t v17 = 0;
          }
          BOOL v18 = cf[0] == 0;
          if (!cf[0]) {
            return !v17;
          }
        }
        CFRelease(v14);
        if (!v13) {
          return v18;
        }
        goto LABEL_74;
      }
      if (*(void *)(a2 + 32))
      {
        BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
        mach_port_t v11 = (CFBooleanRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFBooleanRef *))(a2 + 32))(4, a2, 0, BOOLean);
      }
      else
      {
        mach_port_t v11 = 0;
      }
      if (*(void *)(a3 + 32))
      {
        BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
        __int16 v27 = (CFBooleanRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFBooleanRef *))(a3 + 32))(4, a3, 0, BOOLean);
      }
      else
      {
        __int16 v27 = 0;
      }
      CFBooleanRef v28 = *v27;
      if (!*v11)
      {
        if (v28) {
          uint64_t v17 = -1;
        }
        else {
          uint64_t v17 = 0;
        }
        return !v17;
      }
      if (v28)
      {
        unsigned int v29 = CFBooleanGetValue(*v11);
        if (v29 >= CFBooleanGetValue(*v27))
        {
          int v30 = CFBooleanGetValue(*v11);
          uint64_t v17 = v30 != CFBooleanGetValue(*v27);
          return !v17;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (*(void *)(a2 + 32))
      {
        BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
        unsigned int v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFBooleanRef *))(a2 + 32))(4, a2, 0, BOOLean);
      }
      else
      {
        unsigned int v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)BOOLean, *v12);
          uint64_t v36 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v35 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>((uint64_t)cf, (CFTypeRef *)BOOLean);
          if (BOOLean[0]) {
            CFRelease(BOOLean[0]);
          }
          if (v36) {
            goto LABEL_130;
          }
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>() {
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
      }
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_52:
        uint64_t v36 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v35 = 0u;
        if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
          && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
        {
          goto LABEL_127;
        }
LABEL_53:
        if (*(void *)(a2 + 32))
        {
          BOOLean[0] = (CFBooleanRef)AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
          __int16 v21 = (const __CFBoolean **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFBooleanRef *))(a2 + 32))(4, a2, 0, BOOLean);
        }
        else
        {
          __int16 v21 = 0;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
        {
          if (v21)
          {
            if (*v21)
            {
              BOOL v22 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              long long v38 = 0u;
              LOBYTE(BOOLean[0]) = v22;
              char v23 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_98:
              __int16 v39 = v23;
              goto LABEL_128;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v21)
          {
            if (*v21)
            {
              BOOL v24 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              long long v38 = 0u;
              LOBYTE(BOOLean[0]) = v24;
              char v23 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
              goto LABEL_98;
            }
LABEL_134:
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
LABEL_113:
          __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v21)
          {
            if (*v21)
            {
              BOOL v25 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              long long v38 = 0u;
              LOBYTE(BOOLean[0]) = v25;
              char v23 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
              goto LABEL_98;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v21)
          {
            if (*v21)
            {
              BOOL v31 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              long long v38 = 0u;
              LOBYTE(BOOLean[0]) = v31;
              char v23 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
              goto LABEL_98;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v21)
          {
            if (*v21)
            {
              __int16 v32 = applesauce::CF::convert_to<BOOL,0>(*v21);
              *(_OWORD *)BOOLean = 0u;
              long long v38 = 0u;
              LOWORD(BOOLean[0]) = v32;
              char v23 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
              goto LABEL_98;
            }
            goto LABEL_134;
          }
          goto LABEL_113;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned short>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,int>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned int>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long>((BOOL *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long>((BOOL *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long long>((BOOL *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long long>((BOOL *)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,float>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,double>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long double>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Direction>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,AMCP::Direction>((uint64_t)BOOLean, v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::BooleanRef>((uint64_t)BOOLean, (CFTypeRef *)v21);
          goto LABEL_128;
        }
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        {
          AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(BOOLean, v21);
        }
        else
        {
LABEL_127:
          __int16 v39 = 0;
          *(_OWORD *)BOOLean = 0u;
          long long v38 = 0u;
        }
LABEL_128:
        AMCP::swap((AMCP::Thing *)BOOLean, (AMCP::Thing *)cf, v20);
        if (v39) {
          v39(0, (uint64_t)BOOLean, 0, 0);
        }
LABEL_130:
        AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v19);
        if (v36) {
          v36(0, cf, 0, 0);
        }
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAABFB5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::construct<applesauce::CF::BooleanRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::BooleanRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    double result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        double result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFNumberRef v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    mach_port_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  double result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    CFBooleanRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFBooleanRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    double result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAABFE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned short>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __int16 v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

void sub_1BAABFF00(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,int>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  return result;
}

void sub_1BAABFFB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned int>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void sub_1BAAC0060(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long>(BOOL *a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (BOOL)AMCP::Implementation::In_Place_Storage<long>::dispatch;
  return result;
}

void sub_1BAAC0110(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long>(BOOL *a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (BOOL)AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
  return result;
}

void sub_1BAAC01C0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long long>(BOOL *a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (BOOL)AMCP::Implementation::In_Place_Storage<long long>::dispatch;
  return result;
}

void sub_1BAAC0270(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,unsigned long long>(BOOL *a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL result = applesauce::CF::convert_to<BOOL,0>(*a2);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (BOOL)AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  return result;
}

void sub_1BAAC0320(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

float AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,float>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  float result = (float)applesauce::CF::convert_to<BOOL,0>(*a2);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(float *)a1 = result;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
  return result;
}

void sub_1BAAC03D4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,double>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double result = (double)applesauce::CF::convert_to<BOOL,0>(*a2);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(double *)a1 = result;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  return result;
}

void sub_1BAAC0488(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,long double>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double result = (double)applesauce::CF::convert_to<BOOL,0>(*a2);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  *(double *)a1 = result;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
  return result;
}

void sub_1BAAC053C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,AMCP::Direction>(uint64_t a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v3 = applesauce::CF::convert_to<BOOL,0>(*a2);
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
  return result;
}

void sub_1BAAC05EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::BooleanRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;

  return AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::construct<applesauce::CF::BooleanRef const&>(a1, a2);
}

CFNumberRef AMCP::Implementation::create_number_from<applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(CFNumberRef *a1, const __CFBoolean **a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    goto LABEL_8;
  }
  BOOL valuePtr = applesauce::CF::convert_to<BOOL,0>(*a2);
  CFNumberRef result = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (CFNumberRef)AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return result;
}

void sub_1BAAC0728(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<long double>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      CFNumberRef result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      CFNumberRef result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
      return result;
    case 2:
      CFNumberRef result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<long double>();
      CFNumberRef result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<long double>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<long double>();
      CFNumberRef v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v31 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v31);
        CFNumberRef v10 = (void (*)(uint64_t, uint64_t, void, long long *))v31;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      mach_port_t v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      int v34 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v34);
        mach_port_t v11 = v34;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        double v15 = AMCP::Thing::convert_to<long double>(a2);
        return v15 == AMCP::Thing::convert_to<long double>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<long double>();
        unsigned int v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        unsigned int v12 = 0;
      }
      *(void *)&long long v31 = AMCP::Implementation::get_type_marker<long double>();
      return *v12 == *(double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v31);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_81;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<long double>();
        CFBooleanRef v14 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        CFBooleanRef v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          BOOL v16 = *v14 != 0.0;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v16;
          uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_43:
          long long v33 = v17;
          goto LABEL_82;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          int v18 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v18;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_43;
        }
LABEL_76:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          int v19 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v19;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          int v20 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v20;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          int v21 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOWORD(v31) = v21;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = (int)*v14;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v22;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            unsigned int v23 = *v14;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v23;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            uint64_t v24 = (uint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = (unint64_t)v24;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = (unint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = v25;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            uint64_t v26 = (uint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = (unint64_t)v26;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = (unint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = v27;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = *v14;
            long long v31 = 0u;
            long long v32 = 0u;
            *(float *)&long long v31 = v28;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            double v29 = *v14;
            long long v32 = 0uLL;
            long long v31 = *(unint64_t *)&v29;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *((void *)&v31 + 1) = 0;
            long long v32 = 0uLL;
            *(double *)&long long v31 = *v14;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_43;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<long double,applesauce::CF::BooleanRef>(&v31, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<long double,applesauce::CF::NumberRef>((CFNumberRef *)&v31, (uint64_t *)v14);
            }
            else
            {
LABEL_81:
              long long v33 = 0;
              long long v31 = 0u;
              long long v32 = 0u;
            }
            goto LABEL_82;
          }
          if (v14)
          {
            BOOL v30 = *v14 != 0.0;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v30;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_43;
          }
        }
        goto LABEL_76;
      }
      AMCP::Implementation::create_number_from<long double,unsigned short>((uint64_t)&v31, v14);
LABEL_82:
      AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v13);
      if (v33) {
        v33(0, (uint64_t)&v31, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAC0D8C(void *a1)
{
}

double AMCP::Thing::convert_to<long double>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<long double>();
  BOOL v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  int v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    BOOL v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(double *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<long double>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    CFNumberRef v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  BOOL v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    unsigned int v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFBooleanRef v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  double v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAC0F48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<long double,unsigned short>(uint64_t a1, double *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int v2 = (int)*a2;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v2;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

void *AMCP::Implementation::create_number_from<long double,applesauce::CF::BooleanRef>(void *result, double *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int v2 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  if (*a2 == 0.0) {
    int v2 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  CFTypeRef *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

CFNumberRef AMCP::Implementation::create_number_from<long double,applesauce::CF::NumberRef>(CFNumberRef *a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  uint64_t valuePtr = *a2;
  CFNumberRef result = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (CFNumberRef)AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return result;
}

void sub_1BAAC10EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<double>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      CFNumberRef result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      CFNumberRef result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
      return result;
    case 2:
      CFNumberRef result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<double>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<double>();
      CFNumberRef result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<double>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<double>();
      CFNumberRef v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v31 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v31);
        CFNumberRef v10 = (void (*)(uint64_t, uint64_t, void, long long *))v31;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      mach_port_t v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      int v34 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v34);
        mach_port_t v11 = v34;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        double v15 = AMCP::Thing::convert_to<double>(a2);
        return v15 == AMCP::Thing::convert_to<double>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<double>();
        unsigned int v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        unsigned int v12 = 0;
      }
      *(void *)&long long v31 = AMCP::Implementation::get_type_marker<double>();
      return *v12 == *(double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v31);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_81;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<double>();
        uint64_t v14 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          BOOL v16 = *v14 != 0.0;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v16;
          uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_43:
          long long v33 = v17;
          goto LABEL_82;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          int v18 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v18;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_43;
        }
LABEL_76:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          int v19 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v19;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          int v20 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v20;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          int v21 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOWORD(v31) = v21;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = (int)*v14;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v22;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            unsigned int v23 = *v14;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v23;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            uint64_t v24 = (uint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = (unint64_t)v24;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = (unint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = v25;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            uint64_t v26 = (uint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = (unint64_t)v26;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = (unint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = v27;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = *v14;
            long long v31 = 0u;
            long long v32 = 0u;
            *(float *)&long long v31 = v28;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *((void *)&v31 + 1) = 0;
            long long v32 = 0uLL;
            *(double *)&long long v31 = *v14;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            double v29 = *v14;
            long long v32 = 0uLL;
            long long v31 = *(unint64_t *)&v29;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_43;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<long double,applesauce::CF::BooleanRef>(&v31, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<double,applesauce::CF::NumberRef>((uint64_t)&v31, (uint64_t *)v14);
            }
            else
            {
LABEL_81:
              long long v33 = 0;
              long long v31 = 0u;
              long long v32 = 0u;
            }
            goto LABEL_82;
          }
          if (v14)
          {
            BOOL v30 = *v14 != 0.0;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v30;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_43;
          }
        }
        goto LABEL_76;
      }
      AMCP::Implementation::create_number_from<long double,unsigned short>((uint64_t)&v31, v14);
LABEL_82:
      AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v13);
      if (v33) {
        v33(0, (uint64_t)&v31, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAC174C(void *a1)
{
}

double AMCP::Thing::convert_to<double>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<double>();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  int v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    uint64_t v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(double *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<double>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    CFNumberRef v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  BOOL v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    unsigned int v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFBooleanRef v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  double v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAC1908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<double,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  uint64_t valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAAC19F0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<float>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      CFNumberRef result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      CFNumberRef result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
      return result;
    case 2:
      CFNumberRef result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<float>();
      CFNumberRef result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<float>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<float>();
      CFNumberRef v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v31 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v31);
        CFNumberRef v10 = (void (*)(uint64_t, uint64_t, void, long long *))v31;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      mach_port_t v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      int v34 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v34);
        mach_port_t v11 = v34;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        float v15 = AMCP::Thing::convert_to<float>(a2);
        return v15 == AMCP::Thing::convert_to<float>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<float>();
        unsigned int v12 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        unsigned int v12 = 0;
      }
      *(void *)&long long v31 = AMCP::Implementation::get_type_marker<float>();
      return *v12 == *(float *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v31);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_81;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<float>();
        uint64_t v14 = (float *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (v14)
        {
          BOOL v16 = *v14 != 0.0;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v16;
          uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_43:
          long long v33 = v17;
          goto LABEL_82;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<char>())
      {
        if (v14)
        {
          int v18 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v18;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
          goto LABEL_43;
        }
LABEL_76:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
      {
        if (v14)
        {
          int v19 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v19;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
      {
        if (v14)
        {
          int v20 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOBYTE(v31) = v20;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<short>())
      {
        if (v14)
        {
          int v21 = (int)*v14;
          long long v31 = 0u;
          long long v32 = 0u;
          LOWORD(v31) = v21;
          uint64_t v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
          goto LABEL_43;
        }
        goto LABEL_76;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<unsigned short>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = (int)*v14;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v22;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            unsigned int v23 = *v14;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v23;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            uint64_t v24 = (uint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = (unint64_t)v24;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = (unint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = v25;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            uint64_t v26 = (uint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = (unint64_t)v26;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = (unint64_t)*v14;
            long long v32 = 0uLL;
            long long v31 = v27;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            long long v31 = 0u;
            long long v32 = 0u;
            *(float *)&long long v31 = *v14;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v28 = *v14;
            long long v32 = 0uLL;
            long long v31 = v28;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_43;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v29 = *v14;
            long long v32 = 0uLL;
            long long v31 = v29;
            uint64_t v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_43;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<float,applesauce::CF::BooleanRef>(&v31, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<float,applesauce::CF::NumberRef>((uint64_t)&v31, (int *)v14);
            }
            else
            {
LABEL_81:
              long long v33 = 0;
              long long v31 = 0u;
              long long v32 = 0u;
            }
            goto LABEL_82;
          }
          if (v14)
          {
            BOOL v30 = *v14 != 0.0;
            long long v31 = 0u;
            long long v32 = 0u;
            LODWORD(v31) = v30;
            uint64_t v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_43;
          }
        }
        goto LABEL_76;
      }
      AMCP::Implementation::create_number_from<float,unsigned short>((uint64_t)&v31, v14);
LABEL_82:
      AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v13);
      if (v33) {
        v33(0, (uint64_t)&v31, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAC2058(void *a1)
{
}

float AMCP::Thing::convert_to<float>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<float>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  int v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(float *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<float>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    CFNumberRef v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (float *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    unsigned int v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFBooleanRef v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  float v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAC2214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

double AMCP::Implementation::create_number_from<float,unsigned short>(uint64_t a1, float *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int v2 = (int)*a2;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)a1 = v2;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
  return result;
}

void *AMCP::Implementation::create_number_from<float,applesauce::CF::BooleanRef>(void *result, float *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int v2 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  if (*a2 == 0.0) {
    int v2 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  CFTypeRef *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void AMCP::Implementation::create_number_from<float,applesauce::CF::NumberRef>(uint64_t a1, int *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAAC23C8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[173];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[241];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[243];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[245];
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[247];
}

uint64_t AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
      double result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, cf);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8) {
        goto LABEL_27;
      }
      CFNumberRef v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      BOOL v30 = 0;
      if (v10)
      {
        v10(3, a3, 0, (CFTypeRef *)&v30);
        CFNumberRef v10 = v30;
      }
      if (v10 == (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8)
      {
        if (*(void *)(a2 + 32))
        {
          cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
          mach_port_t v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
        }
        else
        {
          mach_port_t v11 = 0;
        }
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
        unsigned int v23 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
        if (mcp_applesauce::CF::operator==(*v11, *v23)) {
          return 1;
        }
      }
      else
      {
LABEL_27:
        AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(cf, a2);
        AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(&v30, a3);
        CFTypeRef v14 = cf[0];
        CFTypeRef v15 = v30;
        BOOL v16 = mcp_applesauce::CF::operator==((unint64_t)cf[0], (unint64_t)v30);
        if (v15) {
          CFRelease(v15);
        }
        if (v14) {
          CFRelease(v14);
        }
        if (v16) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_84;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
        CFBooleanRef v13 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFBooleanRef v13 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
        {
          if (v13)
          {
            if (*v13 && (CFTypeID TypeID = CFStringGetTypeID(), TypeID == CFGetTypeID(*v13)))
            {
              CFTypeRef v18 = *v13;
              if (v18) {
                CFRetain(v18);
              }
              applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)cf, v18);
              BOOL v30 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
              char v31 = 1;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
              AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef&>((uint64_t)cf, (CFTypeRef *)&v30);
            }
            else
            {
              LOBYTE(v30) = 0;
              char v31 = 0;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
        {
          if (v13)
          {
            if (*v13 && (CFTypeID v19 = CFDataGetTypeID(), v19 == CFGetTypeID(*v13)))
            {
              CFTypeRef v20 = *v13;
              if (v20) {
                CFRetain(v20);
              }
              applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)cf, v20);
              BOOL v30 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
              char v31 = 1;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
              AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef&>((uint64_t)cf, (CFTypeRef *)&v30);
            }
            else
            {
              LOBYTE(v30) = 0;
              char v31 = 0;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
        {
          if (v13)
          {
            if (*v13 && (CFTypeID v21 = CFNumberGetTypeID(), v21 == CFGetTypeID(*v13)))
            {
              CFTypeRef v22 = *v13;
              if (v22) {
                CFRetain(v22);
              }
              applesauce::CF::NumberRef::NumberRef((applesauce::CF::NumberRef *)cf, v22);
              BOOL v30 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
              char v31 = 1;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
              AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>((uint64_t)cf, (CFTypeRef *)&v30);
            }
            else
            {
              LOBYTE(v30) = 0;
              char v31 = 0;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>())
            {
              AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DateRef>((uint64_t)cf, v13);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::ArrayRef>((uint64_t)cf, v13);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
            {
              AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DictionaryRef>((uint64_t)cf, v13);
            }
            else
            {
LABEL_84:
              unint64_t v29 = 0;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
            }
            goto LABEL_85;
          }
          if (v13)
          {
            if (*v13 && (CFTypeID v24 = CFBooleanGetTypeID(), v24 == CFGetTypeID(*v13)))
            {
              CFTypeRef v25 = *v13;
              if (v25) {
                CFRetain(v25);
              }
              applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)cf, v25);
              CFTypeRef v26 = cf[0];
              BOOL v30 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
              char v31 = 1;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
              if (v30) {
                CFRetain(v26);
              }
              cf[0] = v26;
              unint64_t v29 = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
            }
            else
            {
              LOBYTE(v30) = 0;
              char v31 = 0;
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v28 = 0u;
              unint64_t v29 = 0;
            }
            std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v30);
            goto LABEL_85;
          }
        }
LABEL_89:
        __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
      }
      if (!v13) {
        goto LABEL_89;
      }
      unint64_t v29 = 0;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v28 = 0u;
      AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>((uint64_t)cf, v13);
LABEL_85:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v12);
      if (v29) {
        ((void (*)(void, CFTypeRef *, void, void))v29)(0, cf, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAC2CA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::dispatch;
  return a1;
}

BOOL mcp_applesauce::CF::operator==(unint64_t cf1, unint64_t a2)
{
  BOOL result = (cf1 | a2) == 0;
  if (cf1)
  {
    if (a2) {
      return CFEqual((CFTypeRef)cf1, (CFTypeRef)a2) != 0;
    }
  }
  return result;
}

CFTypeRef *AMCP::Thing::convert_to<mcp_applesauce::CF::PropertyListRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  float v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFTypeRef v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    float v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    BOOL result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        BOOL result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFNumberRef v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>();
  memset(v17, 0, sizeof(v17));
  CFTypeRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    mach_port_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  BOOL result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    CFBooleanRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    BOOL result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAC2F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

double AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DateRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2) {
    __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
  }
  if (*a2 && (CFTypeID TypeID = CFDateGetTypeID(), TypeID == CFGetTypeID(*a2)))
  {
    CFTypeRef v5 = *a2;
    if (v5)
    {
      CFRetain(v5);
      CFTypeID v6 = CFGetTypeID(v5);
      if (v6 != CFDateGetTypeID())
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      *(void *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      CFRetain(v5);
      *(void *)a1 = v5;
      *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
      CFRelease(v5);
    }
    else
    {
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)a1 = 0;
      *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
    }
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1BAAC31E8(void *a1)
{
  __cxa_free_exception(v2);
  CFRelease(v1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::ArrayRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2) {
    __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
  }
  if (*a2 && (CFTypeID TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(*a2)))
  {
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v9, v5);
    CFTypeRef v7 = v9;
    char v8 = 1;
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>(a1, &v7);
  }
  else
  {
    LOBYTE(v7) = 0;
    char v8 = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
}

uint64_t AMCP::Implementation::create_cf_plist_from<mcp_applesauce::CF::PropertyListRef,applesauce::CF::DictionaryRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2) {
    __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
  }
  if (*a2 && (CFTypeID TypeID = CFDictionaryGetTypeID(), TypeID == CFGetTypeID(*a2)))
  {
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v9, v5);
    CFTypeRef v7 = v9;
    char v8 = 1;
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>(a1, &v7);
  }
  else
  {
    LOBYTE(v7) = 0;
    char v8 = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(void *)(a1 + 32) = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      goto LABEL_4;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
LABEL_4:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      double result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf1[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, cf1);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf1[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8) {
        goto LABEL_19;
      }
      CFNumberRef v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      CFTypeRef cf2 = 0;
      if (v10)
      {
        v10(3, a3, 0, &cf2);
        CFNumberRef v10 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf2;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8)
      {
LABEL_19:
        AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(cf1, a2);
        AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf2, a3);
        CFTypeRef v13 = cf1[0];
        CFTypeRef v14 = cf2;
        BOOL v15 = ((unint64_t)cf1[0] | (unint64_t)cf2) == 0;
        if (cf1[0] && cf2)
        {
          BOOL v15 = CFEqual(cf1[0], cf2) != 0;
        }
        else if (!cf2)
        {
          goto LABEL_24;
        }
        CFRelease(v14);
LABEL_24:
        if (v13) {
          CFRelease(v13);
        }
        return v15;
      }
      if (*(void *)(a2 + 32))
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
        mach_port_t v11 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
      }
      else
      {
        mach_port_t v11 = 0;
      }
      cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      uint64_t v16 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf1);
      unint64_t v17 = (unint64_t)*v11;
      unint64_t v18 = (unint64_t)*v16;
      if (*v11 && v18) {
        return CFEqual((CFTypeRef)v17, (CFTypeRef)v18) != 0;
      }
      return !(v17 | v18);
    case 6:
      AMCP::Implementation::create_thing_from<applesauce::CF::DictionaryRef>((uint64_t)cf1, a2, a4);
      AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)a3, v12);
      if (v20) {
        v20(0, cf1, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAC3708(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  CFTypeRef v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFTypeRef v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    CFTypeRef v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    double result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        double result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFNumberRef v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  memset(v17, 0, sizeof(v17));
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    mach_port_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unsigned int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  double result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    CFTypeRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    double result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAC398C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

void AMCP::Implementation::create_thing_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
    || *a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
  {
    goto LABEL_27;
  }
  if (*(void *)(a2 + 32))
  {
    cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    CFTypeID v6 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
  }
  else
  {
    CFTypeID v6 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
  {
    if ((*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
       || *a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      && !v6)
    {
LABEL_142:
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    }
LABEL_27:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_28;
  }
  if (!v6) {
    goto LABEL_142;
  }
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)cf, *v6);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(a1, cf);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (*(void *)(a1 + 32)) {
    return;
  }
LABEL_28:
  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_47;
  }
  if (*(void *)(a2 + 32))
  {
    cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    CFTypeRef v8 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
  }
  else
  {
    CFTypeRef v8 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (v8)
      {
        uint64_t v77 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v76 = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>((uint64_t)cf, v8);
        goto LABEL_61;
      }
LABEL_143:
      __assert_rtn("create_selector_item_from", "Thing.h", 1366, "in_value_ptr != nullptr");
    }
LABEL_47:
    uint64_t v77 = 0;
    *(_OWORD *)CFTypeRef cf = 0u;
    long long v76 = 0u;
    goto LABEL_61;
  }
  if (!v8) {
    goto LABEL_143;
  }
  if (!*v8)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"item id", 7, 0x8000100u, 0);
  if (!v9)
  {
    int v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
    __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v82, (CFDictionaryRef)*v8, v9);
  CFRelease(v9);
  if (!*v8)
  {
    uint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v45, "Could not construct");
    __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"kind", 4, 0x8000100u, 0);
  if (!v10)
  {
    unsigned int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "Could not construct");
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v80, (CFDictionaryRef)*v8, v10);
  CFRelease(v10);
  if (!*v8)
  {
    uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v47, "Could not construct");
    __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"name", 4, 0x8000100u, 0);
  if (!v11)
  {
    unint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v48, "Could not construct");
    __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&valuePtr, (CFDictionaryRef)*v8, v11);
  CFRelease(v11);
  if (v83)
  {
    if (!v82)
    {
      uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v49, "Could not construct");
      __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v12 = applesauce::CF::convert_to<unsigned int,0>(v82);
  }
  else
  {
    unsigned int v12 = 0;
  }
  if (v81)
  {
    if (!v80)
    {
      uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v50, "Could not construct");
      __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unsigned int v13 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v80);
  }
  else
  {
    unsigned int v13 = 0;
  }
  if (!v79)
  {
    CFTypeRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v14)
    {
      unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v51, "Could not construct");
      __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    goto LABEL_57;
  }
  CFTypeRef v14 = valuePtr;
  if (valuePtr)
  {
    CFRetain(valuePtr);
LABEL_57:
    CFRetain(v14);
  }
  long long v76 = 0uLL;
  cf[0] = (CFTypeRef)__PAIR64__(v13, v12);
  cf[1] = v14;
  uint64_t v77 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
  if (v14) {
    CFRelease(v14);
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&valuePtr);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v80);
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v82);
LABEL_61:
  AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a1, v7);
  if (v77) {
    ((void (*)(void, CFTypeRef *, void, void))v77)(0, cf, 0, 0);
  }
  if (*(void *)(a1 + 32)) {
    return;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_87;
  }
  if (*(void *)(a2 + 32))
  {
    cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    uint64_t v16 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
  }
  else
  {
    uint64_t v16 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (v16)
      {
        uint64_t v77 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v76 = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>((uint64_t)cf, v16);
        goto LABEL_88;
      }
LABEL_144:
      __assert_rtn("create_min_max_u32_from", "Thing.h", 1502, "in_value_ptr != nullptr");
    }
LABEL_87:
    uint64_t v77 = 0;
    *(_OWORD *)CFTypeRef cf = 0u;
    long long v76 = 0u;
    goto LABEL_88;
  }
  if (!v16) {
    goto LABEL_144;
  }
  if (!*v16)
  {
    uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v52, "Could not construct");
    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"u32 minimum", 11, 0x8000100u, 0);
  cf[0] = v17;
  if (!v17)
  {
    uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v53, "Could not construct");
    __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v80)
  {
    unint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v54, "Could not construct");
    __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v82, (const __CFDictionary *)*v16, v17, &v80);
  if (v80) {
    CFRelease(v80);
  }
  CFRelease(v17);
  if (!*v16)
  {
    uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v55, "Could not construct");
    __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"u32 maximum", 11, 0x8000100u, 0);
  cf[0] = v18;
  if (!v18)
  {
    unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v56, "Could not construct");
    __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v84 = 0;
  CFTypeRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v84);
  if (!valuePtr)
  {
    unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v57, "Could not construct");
    __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v80, (const __CFDictionary *)*v16, v18, &valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFRelease(v18);
  CFNumberRef v19 = v82;
  if (!v82)
  {
    uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v58, "Could not construct");
    __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v20 = applesauce::CF::convert_to<double,0>(v82);
  CFTypeRef v21 = v80;
  if (!v80)
  {
    std::string::size_type v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v59, "Could not construct");
    __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  double v22 = v20;
  double v23 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v80);
  long long v76 = 0uLL;
  cf[0] = (CFTypeRef)(v22 | ((unint64_t)v23 << 32));
  cf[1] = 0;
  uint64_t v77 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  CFRelease(v21);
  CFRelease(v19);
LABEL_88:
  AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a1, v15);
  if (v77) {
    ((void (*)(void, CFTypeRef *, void, void))v77)(0, cf, 0, 0);
  }
  if (!*(void *)(a1 + 32))
  {
    if (*a3 != AMCP::Implementation::get_type_marker<AudioValueRange>()
      && *a3 != AMCP::Implementation::get_type_marker<CA::ValueRange>()
      && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      goto LABEL_130;
    }
    if (*(void *)(a2 + 32))
    {
      cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
      CFTypeRef v25 = (const __CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
    }
    else
    {
      CFTypeRef v25 = 0;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<AudioValueRange>())
    {
      if (v25)
      {
        if (*v25)
        {
          CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"float minimum", 13, 0x8000100u, 0);
          cf[0] = v26;
          if (!v26)
          {
            std::string::size_type v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v60, "Could not construct");
            __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          LODWORD(valuePtr) = 0;
          CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v80)
          {
            uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v61, "Could not construct");
            __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v82, *v25, v26, &v80);
          if (v80) {
            CFRelease(v80);
          }
          CFRelease(v26);
          if (!*v25)
          {
            unint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v62, "Could not construct");
            __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"float maximum", 13, 0x8000100u, 0);
          cf[0] = v27;
          if (!v27)
          {
            unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v63, "Could not construct");
            __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v84 = 0;
          CFTypeRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v84);
          if (!valuePtr)
          {
            uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v64, "Could not construct");
            __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v80, *v25, v27, &valuePtr);
          if (valuePtr) {
            CFRelease(valuePtr);
          }
          CFRelease(v27);
          CFNumberRef v28 = v82;
          if (!v82)
          {
            std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v65, "Could not construct");
            __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v29 = applesauce::CF::convert_to<double,0>(v82);
          CFTypeRef v30 = v80;
          if (!v80)
          {
            std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v66, "Could not construct");
            __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v31 = v29;
          double v32 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v80);
          long long v76 = 0uLL;
          cf[0] = *(CFTypeRef *)&v31;
          cf[1] = *(CFTypeRef *)&v32;
          uint64_t v77 = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
          CFRelease(v30);
          CFRelease(v28);
          goto LABEL_131;
        }
LABEL_171:
        uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v67, "Could not construct");
        __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_145;
    }
    if (*a3 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
    {
      if (v25)
      {
        if (*v25)
        {
          CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"float minimum", 13, 0x8000100u, 0);
          cf[0] = v33;
          if (!v33)
          {
            uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v68, "Could not construct");
            __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          LODWORD(valuePtr) = 0;
          CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v80)
          {
            unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v69, "Could not construct");
            __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v82, *v25, v33, &v80);
          if (v80) {
            CFRelease(v80);
          }
          CFRelease(v33);
          if (!*v25)
          {
            unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v70, "Could not construct");
            __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)"float maximum", 13, 0x8000100u, 0);
          cf[0] = v34;
          if (!v34)
          {
            uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v71, "Could not construct");
            __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int v84 = 0;
          CFTypeRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v84);
          if (!valuePtr)
          {
            unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v72, "Could not construct");
            __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v80, *v25, v34, &valuePtr);
          if (valuePtr) {
            CFRelease(valuePtr);
          }
          CFRelease(v34);
          CFNumberRef v35 = v82;
          if (!v82)
          {
            unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v73, "Could not construct");
            __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v36 = applesauce::CF::convert_to<double,0>(v82);
          CFTypeRef v37 = v80;
          if (!v80)
          {
            uint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v74, "Could not construct");
            __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v38 = v36;
          double v39 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v80);
          long long v76 = 0uLL;
          cf[0] = *(CFTypeRef *)&v38;
          cf[1] = *(CFTypeRef *)&v39;
          uint64_t v77 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
          CFRelease(v37);
          CFRelease(v35);
          goto LABEL_131;
        }
        goto LABEL_171;
      }
LABEL_145:
      __assert_rtn("create_value_range_from", "Thing.h", 1563, "in_value_ptr != nullptr");
    }
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (!v25) {
        goto LABEL_145;
      }
      uint64_t v77 = 0;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v76 = 0u;
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>((uint64_t)cf, (CFTypeRef *)v25);
    }
    else
    {
LABEL_130:
      uint64_t v77 = 0;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v76 = 0u;
    }
LABEL_131:
    AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a1, v24);
    if (v77) {
      ((void (*)(void, CFTypeRef *, void, void))v77)(0, cf, 0, 0);
    }
    if (!*(void *)(a1 + 32))
    {
      AMCP::Implementation::create_acl_from<applesauce::CF::DictionaryRef>((uint64_t)cf, a2, a3);
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a1, v40);
      if (v77) {
        ((void (*)(void, CFTypeRef *, void, void))v77)(0, cf, 0, 0);
      }
      if (!*(void *)(a1 + 32))
      {
        AMCP::Implementation::create_asbd_from<applesauce::CF::DictionaryRef>((uint64_t)cf, a2, a3);
        AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a1, v41);
        if (v77) {
          ((void (*)(void, CFTypeRef *, void, void))v77)(0, cf, 0, 0);
        }
        if (!*(void *)(a1 + 32))
        {
          AMCP::Implementation::create_available_format_from<applesauce::CF::DictionaryRef>((uint64_t)cf, a2, a3);
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a1, v42);
          AMCP::Thing::~Thing((AMCP::Thing *)cf);
        }
      }
    }
  }
}

void sub_1BAAC4CA4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, const void *a16, uint64_t a17, const void *a18)
{
  __cxa_free_exception(v18);
  applesauce::CF::NumberRef::~NumberRef(&a16);
  applesauce::CF::NumberRef::~NumberRef(&a18);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::create_acl_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_77;
  }
  if (*(void *)(a2 + 32))
  {
    v84.__begin_ = (std::vector<char>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    CFTypeID v6 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, std::vector<char> *))(a2 + 32))(4, a2, 0, &v84);
  }
  else
  {
    CFTypeID v6 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
    {
      if (v6)
      {
        *(void *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a1, v6);
        return result;
      }
LABEL_84:
      __assert_rtn("create_acl_from", "Thing.h", 1632, "in_value_ptr != nullptr");
    }
LABEL_77:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return result;
  }
  if (!v6) {
    goto LABEL_84;
  }
  if (!*v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v7 = (char *)CFStringCreateWithBytes(0, (const UInt8 *)"channel layout tag", 18, 0x8000100u, 0);
  v84.__begin_ = v7;
  if (!v7)
  {
    uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v68, "Could not construct");
    __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  LODWORD(valuePtr) = 0;
  CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!cf)
  {
    unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v69, "Could not construct");
    __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v87, (const __CFDictionary *)*v6, v7, &cf);
  if (cf) {
    CFRelease(cf);
  }
  CFRelease(v7);
  if (!*v6)
  {
    unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v70, "Could not construct");
    __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef v8 = (char *)CFStringCreateWithBytes(0, (const UInt8 *)"channel bitmap", 14, 0x8000100u, 0);
  v84.__begin_ = v8;
  if (!v8)
  {
    uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v71, "Could not construct");
    __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(_DWORD *)__x = 0;
  CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, __x);
  if (!valuePtr)
  {
    unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v72, "Could not construct");
    __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, (const __CFDictionary *)*v6, v8, &valuePtr);
  if (valuePtr) {
    CFRelease(valuePtr);
  }
  CFRelease(v8);
  if (!*v6)
  {
    unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v73, "Could not construct");
    __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"channel descriptions", 20, 0x8000100u, 0);
  if (!v9)
  {
    uint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v74, "Could not construct");
    __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFArrayRef v10 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v84, v10);
  applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&valuePtr, (const __CFDictionary *)*v6, v9, &v84);
  if (v84.__begin_) {
    CFRelease(v84.__begin_);
  }
  *(void *)char v79 = a1;
  CFRelease(v9);
  CFArrayRef v11 = valuePtr;
  if (!valuePtr)
  {
    unint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v75, "Could not construct");
    __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex Count = CFArrayGetCount(valuePtr);
  CFNumberRef v13 = v87;
  if (!v87)
  {
    long long v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v76, "Could not construct");
    __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex v14 = Count;
  int v15 = applesauce::CF::convert_to<unsigned int,0>(v87);
  CFTypeRef v16 = cf;
  if (!cf)
  {
    uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v77, "Could not construct");
    __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v17 = v15;
  int v18 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
  if (v14 <= 1) {
    unsigned int v19 = 1;
  }
  else {
    unsigned int v19 = v14;
  }
  __x[0] = 0;
  std::vector<char>::vector(&v84, 20 * v19 + 12, __x);
  std::vector<char>::pointer begin = v84.__begin_;
  *(_DWORD *)v84.__begin_ = v17;
  *((_DWORD *)begin + 1) = v18;
  *((_DWORD *)begin + 2) = v14;
  if (v14)
  {
    CFTypeRef v78 = v16;
    uint64_t v21 = 0;
    unint64_t v22 = 0;
    double v23 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D518];
    do
    {
      CFDictionaryRef v24 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v82, v24);
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(__x, v11, v22, &v82);
      if (v82) {
        CFRelease(v82);
      }
      CFDictionaryRef v25 = *(const __CFDictionary **)__x;
      if (!*(void *)__x)
      {
        uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v47, "Could not construct");
        __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"channel label", 13, 0x8000100u, 0);
      CFTypeRef v81 = v26;
      if (!v26)
      {
        unint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v48, "Could not construct");
        __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v88 = -1;
      CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v80)
      {
        uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
        __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v82, v25, v26, &v80);
      CFTypeRef v27 = v82;
      if (!v82)
      {
        uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v50, "Could not construct");
        __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v28 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v82);
      unint64_t v29 = *((unsigned int *)v84.__begin_ + 2);
      if (v29 > (v84.__end_ - v84.__begin_ - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      if (v22 >= v29)
      {
        unint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v51, "accessing a CA::ChannelLayout with an out-of-range index");
        v51->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v51, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
      *(_DWORD *)&v84.__begin_[v21 + 12] = v28;
      CFRelease(v27);
      if (v80) {
        CFRelease(v80);
      }
      CFRelease(v26);
      CFStringRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)"channel flags", 13, 0x8000100u, 0);
      CFTypeRef v81 = v30;
      if (!v30)
      {
        uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v52, "Could not construct");
        __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v88 = 0;
      CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v80)
      {
        uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v82, v25, v30, &v80);
      CFTypeRef v31 = v82;
      if (!v82)
      {
        unint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Could not construct");
        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v32 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v82);
      unint64_t v33 = *((unsigned int *)v84.__begin_ + 2);
      if (v33 > (v84.__end_ - v84.__begin_ - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      if (v22 >= v33)
      {
        unint64_t v56 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v56, "accessing a CA::ChannelLayout with an out-of-range index");
        v56->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v56, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
      *(_DWORD *)&v84.__begin_[v21 + 16] = v32;
      CFRelease(v31);
      if (v80) {
        CFRelease(v80);
      }
      CFRelease(v30);
      CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)"coordinates", 11, 0x8000100u, 0);
      if (!v34)
      {
        uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFArrayRef v35 = CFArrayCreate(0, 0, 0, v23);
      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v81, v35);
      applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v82, v25, v34, &v81);
      if (v81) {
        CFRelease(v81);
      }
      CFRelease(v34);
      CFArrayRef v36 = (const __CFArray *)v82;
      if (!v82)
      {
        uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Could not construct");
        __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v88 = 0;
      CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v80)
      {
        unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef>(&v81, v36, 0, &v80);
      CFTypeRef v37 = v81;
      if (!v81)
      {
        std::string::size_type v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v59, "Could not construct");
        __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      float v38 = applesauce::CF::convert_to<float,0>((const __CFNumber *)v81);
      unint64_t v39 = *((unsigned int *)v84.__begin_ + 2);
      if (v39 > (v84.__end_ - v84.__begin_ - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      if (v22 >= v39)
      {
        unint64_t v62 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v62, "accessing a CA::ChannelLayout with an out-of-range index");
        v62->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v62, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
      *(float *)&v84.__begin_[v21 + 20] = v38;
      CFRelease(v37);
      if (v80) {
        CFRelease(v80);
      }
      int v88 = 0;
      CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v80)
      {
        std::string::size_type v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v60, "Could not construct");
        __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef>(&v81, v36, 1uLL, &v80);
      CFTypeRef v40 = v81;
      if (!v81)
      {
        uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v61, "Could not construct");
        __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      float v41 = applesauce::CF::convert_to<float,0>((const __CFNumber *)v81);
      unint64_t v42 = *((unsigned int *)v84.__begin_ + 2);
      if (v42 > (v84.__end_ - v84.__begin_ - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      if (v22 >= v42)
      {
        unint64_t v63 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v63, "accessing a CA::ChannelLayout with an out-of-range index");
        v63->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v63, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
      *(float *)&v84.__begin_[v21 + 24] = v41;
      CFRelease(v40);
      if (v80) {
        CFRelease(v80);
      }
      int v88 = 0;
      CFTypeRef v80 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v80)
      {
        std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v65, "Could not construct");
        __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef>(&v81, v36, 2uLL, &v80);
      CFTypeRef v43 = v81;
      if (!v81)
      {
        uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v64, "Could not construct");
        __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      float v44 = applesauce::CF::convert_to<float,0>((const __CFNumber *)v81);
      unint64_t v45 = *((unsigned int *)v84.__begin_ + 2);
      if (v45 > (v84.__end_ - v84.__begin_ - 12) / 0x14uLL) {
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      }
      if (v22 >= v45)
      {
        std::string::size_type v66 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v66, "accessing a CA::ChannelLayout with an out-of-range index");
        v66->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v66, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
      *(float *)&v84.__begin_[v21 + 28] = v44;
      CFRelease(v43);
      if (v80) {
        CFRelease(v80);
      }
      CFRelease(v36);
      CFRelease(v25);
      ++v22;
      v21 += 20;
    }
    while (v14 != v22);
    std::vector<char>::pointer begin = v84.__begin_;
    CFTypeRef v16 = v78;
  }
  *(void *)(*(void *)v79 + 32) = 0;
  **(_OWORD **)char v79 = 0u;
  *(_OWORD *)(*(void *)v79 + 16) = 0u;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(*(void **)v79, begin, (uint64_t)v84.__end_, v84.__end_ - begin);
  *(void *)(*(void *)v79 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
  if (v84.__begin_)
  {
    v84.__end_ = v84.__begin_;
    operator delete(v84.__begin_);
  }
  CFRelease(v11);
  CFRelease(v16);
  CFRelease(v13);
  return result;
}

void sub_1BAAC5EF8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,uint64_t a27,const void *a28,const void *a29,const void *a30)
{
  __cxa_free_exception(v30);
  applesauce::CF::ArrayRef::~ArrayRef(&a28);
  applesauce::CF::NumberRef::~NumberRef(&a29);
  applesauce::CF::NumberRef::~NumberRef(&a30);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::create_asbd_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
    && *a3 != AMCP::Implementation::get_type_marker<CA::StreamDescription>())
  {
    uint64_t result = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    if (*a3 != result) {
      goto LABEL_112;
    }
  }
  if (*(void *)(a2 + 32))
  {
    CFNumberRef v96 = (const __CFNumber *)AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    CFTypeRef v7 = (const __CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, void, const __CFNumber **))(a2 + 32))(4, a2, 0, &v96);
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
  {
    if (v7)
    {
      if (*v7)
      {
        CFNumberRef v8 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
        CFNumberRef v95 = v8;
        if (v8)
        {
          LODWORD(valuePtr) = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (cf)
          {
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v96, *v7, v8, &cf);
            if (cf) {
              CFRelease(cf);
            }
            CFRelease(v8);
            if (*v7)
            {
              CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
              CFTypeRef cf = v9;
              if (v9)
              {
                LODWORD(v92) = 0;
                CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v92);
                if (valuePtr)
                {
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v95, *v7, v9, &valuePtr);
                  if (valuePtr) {
                    CFRelease(valuePtr);
                  }
                  CFRelease(v9);
                  if (*v7)
                  {
                    CFNumberRef v10 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
                    CFNumberRef valuePtr = v10;
                    if (v10)
                    {
                      LODWORD(v91) = 0;
                      CFTypeRef v92 = CFNumberCreate(0, kCFNumberIntType, &v91);
                      if (v92)
                      {
                        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, *v7, v10, &v92);
                        if (v92) {
                          CFRelease(v92);
                        }
                        CFRelease(v10);
                        if (*v7)
                        {
                          CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
                          CFTypeRef v92 = v11;
                          if (v11)
                          {
                            LODWORD(v90) = 0;
                            CFTypeRef v91 = CFNumberCreate(0, kCFNumberIntType, &v90);
                            if (v91)
                            {
                              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *v7, v11, &v91);
                              if (v91) {
                                CFRelease(v91);
                              }
                              CFRelease(v11);
                              if (*v7)
                              {
                                CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
                                CFTypeRef v91 = v12;
                                if (v12)
                                {
                                  LODWORD(v89) = 0;
                                  CFTypeRef v90 = CFNumberCreate(0, kCFNumberIntType, &v89);
                                  if (v90)
                                  {
                                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v92, *v7, v12, &v90);
                                    if (v90) {
                                      CFRelease(v90);
                                    }
                                    CFRelease(v12);
                                    if (*v7)
                                    {
                                      CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
                                      CFTypeRef v90 = v13;
                                      if (v13)
                                      {
                                        LODWORD(v88) = 0;
                                        CFTypeRef v89 = CFNumberCreate(0, kCFNumberIntType, &v88);
                                        if (v89)
                                        {
                                          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v91, *v7, v13, &v89);
                                          if (v89) {
                                            CFRelease(v89);
                                          }
                                          CFRelease(v13);
                                          if (*v7)
                                          {
                                            CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
                                            CFTypeRef v89 = v14;
                                            if (v14)
                                            {
                                              LODWORD(v87) = 0;
                                              CFTypeRef v88 = CFNumberCreate(0, kCFNumberIntType, &v87);
                                              if (v88)
                                              {
                                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v90, *v7, v14, &v88);
                                                if (v88) {
                                                  CFRelease(v88);
                                                }
                                                CFRelease(v14);
                                                if (*v7)
                                                {
                                                  CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
                                                  CFTypeRef v88 = v15;
                                                  if (v15)
                                                  {
                                                    int v97 = 0;
                                                    CFTypeRef v87 = CFNumberCreate(0, kCFNumberIntType, &v97);
                                                    if (v87)
                                                    {
                                                      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v89, *v7, v15, &v87);
                                                      if (v87) {
                                                        CFRelease(v87);
                                                      }
                                                      CFRelease(v15);
                                                      if (v96)
                                                      {
                                                        applesauce::CF::convert_to<double,0>(v96);
                                                        if (v95)
                                                        {
                                                          applesauce::CF::convert_to<unsigned int,0>(v95);
                                                          if (cf)
                                                          {
                                                            applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
                                                            if (valuePtr)
                                                            {
                                                              applesauce::CF::convert_to<unsigned int,0>(valuePtr);
                                                              if (v92)
                                                              {
                                                                applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v92);
                                                                if (v91)
                                                                {
                                                                  applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v91);
                                                                  if (v90)
                                                                  {
                                                                    applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v90);
                                                                    if (v89)
                                                                    {
                                                                      applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v89);
                                                                      *(_OWORD *)a1 = 0u;
                                                                      *(_OWORD *)(a1 + 16) = 0u;
                                                                      *(void *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
                                                                      operator new();
                                                                    }
                                                                    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                                    std::runtime_error::runtime_error(exception, "Could not construct");
                                                                    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                                  }
                                                                  uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                                  std::runtime_error::runtime_error(v53, "Could not construct");
                                                                  __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                                }
                                                                uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                                std::runtime_error::runtime_error(v52, "Could not construct");
                                                                __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                              }
                                                              unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                              std::runtime_error::runtime_error(v51, "Could not construct");
                                                              __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                            }
                                                            uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                            std::runtime_error::runtime_error(v50, "Could not construct");
                                                            __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                          }
                                                          uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                          std::runtime_error::runtime_error(v49, "Could not construct");
                                                          __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                        }
                                                        unint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                        std::runtime_error::runtime_error(v48, "Could not construct");
                                                        __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                      }
                                                      uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                      std::runtime_error::runtime_error(v47, "Could not construct");
                                                      __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                    }
                                                    unsigned int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                    std::runtime_error::runtime_error(v46, "Could not construct");
                                                    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                  }
                                                  unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                  std::runtime_error::runtime_error(v45, "Could not construct");
                                                  __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                }
                                                float v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                std::runtime_error::runtime_error(v44, "Could not construct");
                                                __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                              }
                                              CFTypeRef v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                              std::runtime_error::runtime_error(v43, "Could not construct");
                                              __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                            }
                                            unint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                            std::runtime_error::runtime_error(v42, "Could not construct");
                                            __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                          }
                                          float v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                          std::runtime_error::runtime_error(v41, "Could not construct");
                                          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                        }
                                        CFTypeRef v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::runtime_error::runtime_error(v40, "Could not construct");
                                        __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                      }
                                      unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                      std::runtime_error::runtime_error(v39, "Could not construct");
                                      __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                    }
                                    float v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v38, "Could not construct");
                                    __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                  }
                                  CFTypeRef v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v37, "Could not construct");
                                  __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                CFArrayRef v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v36, "Could not construct");
                                __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                              }
                              CFArrayRef v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::runtime_error::runtime_error(v35, "Could not construct");
                              __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                            }
                            CFStringRef v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v34, "Could not construct");
                            __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          unint64_t v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v33, "Could not construct");
                          __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        int v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v32, "Could not construct");
                        __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      CFTypeRef v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v31, "Could not construct");
                      __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    CFStringRef v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v30, "Could not construct");
                    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  unint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v29, "Could not construct");
                  __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                int v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v28, "Could not construct");
                __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFTypeRef v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v27, "Could not construct");
              __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFStringRef v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Could not construct");
            __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFDictionaryRef v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v25, "Could not construct");
          __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        CFDictionaryRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v24, "Could not construct");
        __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_146;
    }
    goto LABEL_113;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<CA::StreamDescription>())
  {
    if (v7)
    {
      if (*v7)
      {
        CFNumberRef v16 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
        CFNumberRef v95 = v16;
        if (v16)
        {
          LODWORD(valuePtr) = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (cf)
          {
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v96, *v7, v16, &cf);
            if (cf) {
              CFRelease(cf);
            }
            CFRelease(v16);
            if (*v7)
            {
              CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
              CFTypeRef cf = v17;
              if (v17)
              {
                LODWORD(v92) = 0;
                CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v92);
                if (valuePtr)
                {
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v95, *v7, v17, &valuePtr);
                  if (valuePtr) {
                    CFRelease(valuePtr);
                  }
                  CFRelease(v17);
                  if (*v7)
                  {
                    CFNumberRef v18 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
                    CFNumberRef valuePtr = v18;
                    if (v18)
                    {
                      LODWORD(v91) = 0;
                      CFTypeRef v92 = CFNumberCreate(0, kCFNumberIntType, &v91);
                      if (v92)
                      {
                        applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, *v7, v18, &v92);
                        if (v92) {
                          CFRelease(v92);
                        }
                        CFRelease(v18);
                        if (*v7)
                        {
                          CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
                          CFTypeRef v92 = v19;
                          if (v19)
                          {
                            LODWORD(v90) = 0;
                            CFTypeRef v91 = CFNumberCreate(0, kCFNumberIntType, &v90);
                            if (v91)
                            {
                              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, *v7, v19, &v91);
                              if (v91) {
                                CFRelease(v91);
                              }
                              CFRelease(v19);
                              if (*v7)
                              {
                                CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
                                CFTypeRef v91 = v20;
                                if (v20)
                                {
                                  LODWORD(v89) = 0;
                                  CFTypeRef v90 = CFNumberCreate(0, kCFNumberIntType, &v89);
                                  if (v90)
                                  {
                                    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v92, *v7, v20, &v90);
                                    if (v90) {
                                      CFRelease(v90);
                                    }
                                    CFRelease(v20);
                                    if (*v7)
                                    {
                                      CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
                                      CFTypeRef v90 = v21;
                                      if (v21)
                                      {
                                        LODWORD(v88) = 0;
                                        CFTypeRef v89 = CFNumberCreate(0, kCFNumberIntType, &v88);
                                        if (v89)
                                        {
                                          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v91, *v7, v21, &v89);
                                          if (v89) {
                                            CFRelease(v89);
                                          }
                                          CFRelease(v21);
                                          if (*v7)
                                          {
                                            CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
                                            CFTypeRef v89 = v22;
                                            if (v22)
                                            {
                                              LODWORD(v87) = 0;
                                              CFTypeRef v88 = CFNumberCreate(0, kCFNumberIntType, &v87);
                                              if (v88)
                                              {
                                                applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v90, *v7, v22, &v88);
                                                if (v88) {
                                                  CFRelease(v88);
                                                }
                                                CFRelease(v22);
                                                if (*v7)
                                                {
                                                  CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
                                                  CFTypeRef v88 = v23;
                                                  if (v23)
                                                  {
                                                    int v97 = 0;
                                                    CFTypeRef v87 = CFNumberCreate(0, kCFNumberIntType, &v97);
                                                    if (v87)
                                                    {
                                                      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v89, *v7, v23, &v87);
                                                      if (v87) {
                                                        CFRelease(v87);
                                                      }
                                                      CFRelease(v23);
                                                      if (v96)
                                                      {
                                                        applesauce::CF::convert_to<double,0>(v96);
                                                        if (v95)
                                                        {
                                                          applesauce::CF::convert_to<unsigned int,0>(v95);
                                                          if (cf)
                                                          {
                                                            applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
                                                            if (valuePtr)
                                                            {
                                                              applesauce::CF::convert_to<unsigned int,0>(valuePtr);
                                                              if (v92)
                                                              {
                                                                applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v92);
                                                                if (v91)
                                                                {
                                                                  applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v91);
                                                                  if (v90)
                                                                  {
                                                                    applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v90);
                                                                    if (v89)
                                                                    {
                                                                      applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v89);
                                                                      *(_OWORD *)a1 = 0u;
                                                                      *(_OWORD *)(a1 + 16) = 0u;
                                                                      *(void *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
                                                                      operator new();
                                                                    }
                                                                    unint64_t v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                                    std::runtime_error::runtime_error(v86, "Could not construct");
                                                                    __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                                  }
                                                                  unint64_t v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                                  std::runtime_error::runtime_error(v85, "Could not construct");
                                                                  __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                                }
                                                                std::vector<char> v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                                std::runtime_error::runtime_error(v84, "Could not construct");
                                                                __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                              }
                                                              char v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                              std::runtime_error::runtime_error(v83, "Could not construct");
                                                              __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                            }
                                                            CFTypeRef v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                            std::runtime_error::runtime_error(v82, "Could not construct");
                                                            __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                          }
                                                          CFTypeRef v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                          std::runtime_error::runtime_error(v81, "Could not construct");
                                                          __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                        }
                                                        CFTypeRef v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                        std::runtime_error::runtime_error(v80, "Could not construct");
                                                        __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                      }
                                                      char v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                      std::runtime_error::runtime_error(v79, "Could not construct");
                                                      __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                    }
                                                    CFTypeRef v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                    std::runtime_error::runtime_error(v78, "Could not construct");
                                                    __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                  }
                                                  uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                  std::runtime_error::runtime_error(v77, "Could not construct");
                                                  __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                }
                                                long long v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                std::runtime_error::runtime_error(v76, "Could not construct");
                                                __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                              }
                                              unint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                              std::runtime_error::runtime_error(v75, "Could not construct");
                                              __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                            }
                                            uint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                            std::runtime_error::runtime_error(v74, "Could not construct");
                                            __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                          }
                                          unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                          std::runtime_error::runtime_error(v73, "Could not construct");
                                          __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                        }
                                        unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::runtime_error::runtime_error(v72, "Could not construct");
                                        __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                      }
                                      uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                      std::runtime_error::runtime_error(v71, "Could not construct");
                                      __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                    }
                                    unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v70, "Could not construct");
                                    __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                  }
                                  unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v69, "Could not construct");
                                  __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v68, "Could not construct");
                                __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                              }
                              uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::runtime_error::runtime_error(v67, "Could not construct");
                              __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                            }
                            std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v66, "Could not construct");
                            __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v65, "Could not construct");
                          __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v64, "Could not construct");
                        __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v63, "Could not construct");
                      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    unint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v62, "Could not construct");
                    __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v61, "Could not construct");
                  __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                std::string::size_type v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Could not construct");
                __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              std::string::size_type v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v59, "Could not construct");
              __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "Could not construct");
            __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
          __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
LABEL_146:
      uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v55, "Could not construct");
      __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_113:
    __assert_rtn("create_asbd_from", "Thing.h", 1718, "in_value_ptr != nullptr");
  }
  uint64_t result = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
  if (*a3 == result)
  {
    if (!v7) {
      goto LABEL_113;
    }
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a1, (CFTypeRef *)v7);
  }
  else
  {
LABEL_112:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_1BAAC7C20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, const void *a17, const void *a18, const void *a19, const void *a20,const void *a21,const void *a22,const void *a23,const void *a24)
{
  __cxa_free_exception(v24);
  applesauce::CF::NumberRef::~NumberRef(&a17);
  applesauce::CF::NumberRef::~NumberRef(&a18);
  applesauce::CF::NumberRef::~NumberRef(&a19);
  applesauce::CF::NumberRef::~NumberRef(&a20);
  applesauce::CF::NumberRef::~NumberRef(&a21);
  applesauce::CF::NumberRef::~NumberRef(&a22);
  applesauce::CF::NumberRef::~NumberRef(&a23);
  applesauce::CF::NumberRef::~NumberRef(&a24);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::create_available_format_from<applesauce::CF::DictionaryRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>();
    CFTypeID v6 = (const __CFDictionary **)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v8);
  }
  else
  {
    CFTypeID v6 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()) {
    AMCP::Implementation::create_available_format_from<applesauce::CF::DictionaryRef,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(a1, v6);
  }
  if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
  {
    if (!v6) {
      __assert_rtn("create_available_format_from", "Thing.h", 2115, "in_value_ptr != nullptr");
    }
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef const&>(a1, (CFTypeRef *)v6);
  }
  else
  {
LABEL_11:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[237];
}

void AMCP::Implementation::create_available_format_from<applesauce::CF::DictionaryRef,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(uint64_t a1, const __CFDictionary **a2)
{
  if (a2)
  {
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v101 = 0;
    if (*a2)
    {
      CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate range list", 22, 0x8000100u, 0);
      if (v3)
      {
        cf[0] = 0;
        applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&v98, *a2, v3, cf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        CFRelease(v3);
        CFArrayRef theArray = v98;
        if (v98)
        {
          CFIndex Count = CFArrayGetCount(v98);
          CFIndex v5 = CFArrayGetCount(theArray);
          if (Count)
          {
            CFIndex v6 = v5;
            for (unint64_t i = 0; i != Count; ++i)
            {
              if (v6 == i) {
                break;
              }
              applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v97, theArray, i);
              if (!v97)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFNumberRef v8 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
              CFNumberRef v96 = v8;
              if (!v8)
              {
                CFTypeRef v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v40, "Could not construct");
                __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr) = 0;
              CFNumberRef v95 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v95)
              {
                CFTypeRef v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v37, "Could not construct");
                __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(cf, v97, v8, &v95);
              CFTypeRef v9 = cf[0];
              if (!cf[0])
              {
                float v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v41, "Could not construct");
                __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              double v10 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf[0]);
              CFRelease(v9);
              if (v95) {
                CFRelease(v95);
              }
              CFRelease(v8);
              if (!v97)
              {
                float v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v38, "Could not construct");
                __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFNumberRef v11 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
              CFNumberRef v96 = v11;
              if (!v11)
              {
                unint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v42, "Could not construct");
                __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr) = 0;
              CFNumberRef v95 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v95)
              {
                unint64_t v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v39, "Could not construct");
                __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(cf, v97, v11, &v95);
              CFTypeRef v12 = cf[0];
              if (!cf[0])
              {
                CFTypeRef v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v43, "Could not construct");
                __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              double v13 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf[0]);
              CFRelease(v12);
              if (v95) {
                CFRelease(v95);
              }
              CFRelease(v11);
              cf[0] = *(CFTypeRef *)&v10;
              cf[1] = *(CFTypeRef *)&v13;
              CA::ValueRangeList::AddRange(&v99, (double *)cf);
              if (v97) {
                CFRelease(v97);
              }
            }
          }
        }
        if (*a2)
        {
          CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"format", 6, 0x8000100u, 0);
          if (v14)
          {
            cf[0] = 0;
            applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&v97, *a2, v14, cf);
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            CFRelease(v14);
            CFDictionaryRef v15 = v97;
            if (v97)
            {
              CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
              cf[0] = v16;
              if (v16)
              {
                LODWORD(valuePtr) = 0;
                CFNumberRef v95 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
                if (v95)
                {
                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v96, v15, v16, &v95);
                  if (v95) {
                    CFRelease(v95);
                  }
                  CFRelease(v16);
                  CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
                  cf[0] = v17;
                  if (v17)
                  {
                    LODWORD(v93) = 0;
                    CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v93);
                    if (valuePtr)
                    {
                      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v95, v15, v17, &valuePtr);
                      if (valuePtr) {
                        CFRelease(valuePtr);
                      }
                      CFRelease(v17);
                      CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
                      cf[0] = v18;
                      if (v18)
                      {
                        LODWORD(v92) = 0;
                        CFTypeRef v93 = CFNumberCreate(0, kCFNumberIntType, &v92);
                        if (v93)
                        {
                          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v15, v18, &v93);
                          if (v93) {
                            CFRelease(v93);
                          }
                          CFRelease(v18);
                          CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
                          cf[0] = v19;
                          if (v19)
                          {
                            LODWORD(v91) = 0;
                            CFTypeRef v92 = CFNumberCreate(0, kCFNumberIntType, &v91);
                            if (v92)
                            {
                              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v93, v15, v19, &v92);
                              if (v92) {
                                CFRelease(v92);
                              }
                              CFRelease(v19);
                              CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
                              cf[0] = v20;
                              if (v20)
                              {
                                LODWORD(v90) = 0;
                                CFTypeRef v91 = CFNumberCreate(0, kCFNumberIntType, &v90);
                                if (v91)
                                {
                                  applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v92, v15, v20, &v91);
                                  if (v91) {
                                    CFRelease(v91);
                                  }
                                  CFRelease(v20);
                                  CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
                                  cf[0] = v21;
                                  if (v21)
                                  {
                                    LODWORD(v89) = 0;
                                    CFTypeRef v90 = CFNumberCreate(0, kCFNumberIntType, &v89);
                                    if (v90)
                                    {
                                      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v91, v15, v21, &v90);
                                      if (v90) {
                                        CFRelease(v90);
                                      }
                                      CFRelease(v21);
                                      CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
                                      cf[0] = v22;
                                      if (v22)
                                      {
                                        LODWORD(v88) = 0;
                                        CFTypeRef v89 = CFNumberCreate(0, kCFNumberIntType, &v88);
                                        if (v89)
                                        {
                                          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v90, v15, v22, &v89);
                                          if (v89) {
                                            CFRelease(v89);
                                          }
                                          CFRelease(v22);
                                          CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
                                          cf[0] = v23;
                                          if (v23)
                                          {
                                            v102[0] = 0;
                                            CFTypeRef v88 = CFNumberCreate(0, kCFNumberIntType, v102);
                                            if (v88)
                                            {
                                              applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v89, v15, v23, &v88);
                                              if (v88) {
                                                CFRelease(v88);
                                              }
                                              CFRelease(v23);
                                              if (v96)
                                              {
                                                double v24 = applesauce::CF::convert_to<double,0>(v96);
                                                if (v95)
                                                {
                                                  double v25 = v24;
                                                  int v26 = applesauce::CF::convert_to<unsigned int,0>(v95);
                                                  if (valuePtr)
                                                  {
                                                    int v27 = v26;
                                                    int v28 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
                                                    if (v93)
                                                    {
                                                      int v29 = v28;
                                                      int v30 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v93);
                                                      if (v92)
                                                      {
                                                        int v74 = v30;
                                                        int v73 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v92);
                                                        if (v91)
                                                        {
                                                          int v31 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v91);
                                                          if (v90)
                                                          {
                                                            int v32 = v31;
                                                            int v33 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v90);
                                                            if (v89)
                                                            {
                                                              int v34 = v33;
                                                              int v35 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v89);
                                                              cf[0] = 0;
                                                              cf[1] = 0;
                                                              uint64_t v78 = 0;
                                                              std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(cf, v99, v100, (v100 - (uint64_t)v99) >> 4);
                                                              double v79 = v25;
                                                              int v80 = v27;
                                                              int v81 = v29;
                                                              int v82 = v74;
                                                              int v83 = v73;
                                                              int v84 = v32;
                                                              int v85 = v34;
                                                              int v86 = v35;
                                                              int v87 = 0;
                                                              *(_OWORD *)a1 = 0u;
                                                              *(_OWORD *)(a1 + 16) = 0u;
                                                              *(void *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
                                                              operator new();
                                                            }
                                                            unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                            std::runtime_error::runtime_error(v72, "Could not construct");
                                                            __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                          }
                                                          uint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                          std::runtime_error::runtime_error(v71, "Could not construct");
                                                          __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                        }
                                                        unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                        std::runtime_error::runtime_error(v70, "Could not construct");
                                                        __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                      }
                                                      unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                      std::runtime_error::runtime_error(v69, "Could not construct");
                                                      __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                    }
                                                    uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                    std::runtime_error::runtime_error(v68, "Could not construct");
                                                    __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                  }
                                                  uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                  std::runtime_error::runtime_error(v67, "Could not construct");
                                                  __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                                }
                                                std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                                std::runtime_error::runtime_error(v66, "Could not construct");
                                                __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                              }
                                              std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                              std::runtime_error::runtime_error(v65, "Could not construct");
                                              __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                            }
                                            uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                            std::runtime_error::runtime_error(v64, "Could not construct");
                                            __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                          }
                                          unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                          std::runtime_error::runtime_error(v63, "Could not construct");
                                          __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                        }
                                        unint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                        std::runtime_error::runtime_error(v62, "Could not construct");
                                        __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                      }
                                      uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                      std::runtime_error::runtime_error(v61, "Could not construct");
                                      __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                    }
                                    std::string::size_type v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                    std::runtime_error::runtime_error(v60, "Could not construct");
                                    __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                  }
                                  std::string::size_type v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                  std::runtime_error::runtime_error(v59, "Could not construct");
                                  __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                                }
                                uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v58, "Could not construct");
                                __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                              }
                              unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                              std::runtime_error::runtime_error(v57, "Could not construct");
                              __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                            }
                            unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v56, "Could not construct");
                            __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v55, "Could not construct");
                          __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        unint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v54, "Could not construct");
                        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v53, "Could not construct");
                      __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v52, "Could not construct");
                    __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v51, "Could not construct");
                  __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v50, "Could not construct");
                __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v49, "Could not construct");
              __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            unint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v48, "Could not construct");
            __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v47, "Could not construct");
          __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unsigned int v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v46, "Could not construct");
        __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v45, "Could not construct");
      __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    float v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v44, "Could not construct");
    __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  __assert_rtn("create_available_format_from", "Thing.h", 2115, "in_value_ptr != nullptr");
}

void sub_1BAAC9338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,const void *a26,const void *a27,const void *a28,const void *a29,const void *a30,const void *a31)
{
  __cxa_free_exception(v31);
  applesauce::CF::NumberRef::~NumberRef(&a26);
  applesauce::CF::NumberRef::~NumberRef(&a27);
  applesauce::CF::NumberRef::~NumberRef(&a28);
  applesauce::CF::NumberRef::~NumberRef(&a29);
  applesauce::CF::NumberRef::~NumberRef(&a30);
  applesauce::CF::NumberRef::~NumberRef(&a31);
  applesauce::CF::NumberRef::~NumberRef((const void **)(v32 - 168));
  applesauce::CF::NumberRef::~NumberRef((const void **)(v32 - 160));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v32 - 152));
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v32 - 144));
  int v34 = *(void **)(v32 - 136);
  if (v34) {
    operator delete(v34);
  }
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

applesauce::CF::DictionaryRef *applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(applesauce::CF::DictionaryRef *a1, CFArrayRef theArray, unint64_t a3)
{
  if (!theArray
    || CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (CFTypeRef v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRetain(ValueAtIndex);

  return applesauce::CF::DictionaryRef::DictionaryRef(a1, v7);
}

void sub_1BAAC98A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

double applesauce::CF::convert_to<double,0>(const __CFNumber *a1)
{
  double v1 = COERCE_DOUBLE(applesauce::CF::convert_as<double,0>(a1));
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return v1;
}

void sub_1BAAC997C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void CA::ValueRangeList::AddRange(double **a1, double *a2)
{
  char v2 = a2;
  CFIndex v5 = *a1;
  uint64_t v4 = a1[1];
  CFTypeRef v6 = *a1;
  if (*a1 != v4)
  {
    double v8 = *a2;
    double v7 = a2[1];
    CFTypeRef v6 = *a1;
    while (1)
    {
      double v9 = *v6;
      if (v7 >= *v6)
      {
        double v10 = v6[1];
        if (v8 < v9 && v7 <= v10) {
          break;
        }
        if (v8 < v9 && v7 > v10) {
          break;
        }
        BOOL v13 = v8 == v9 && v7 == v10;
        if (v13 || v8 > v9 && v7 < v10 || v8 >= v9 && v8 <= v10 && v7 > v10) {
          break;
        }
      }
      v6 += 2;
      if (v6 == v4) {
        goto LABEL_59;
      }
    }
  }
  if (v6 == v4)
  {
LABEL_59:
    if (v5 == v4)
    {
      int v26 = *a1;
    }
    else
    {
      int v26 = *a1;
      while (a2[1] >= *v26)
      {
        v26 += 2;
        if (v26 == v4)
        {
          int v26 = a1[1];
          break;
        }
      }
    }
    unint64_t v27 = (unint64_t)a1[2];
    if ((unint64_t)v4 >= v27)
    {
      unint64_t v32 = (((char *)v4 - (char *)v5) >> 4) + 1;
      if (v32 >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v33 = (char *)v26 - (char *)v5;
      uint64_t v34 = ((char *)v26 - (char *)v5) >> 4;
      uint64_t v35 = v27 - (void)v5;
      if (v35 >> 3 > v32) {
        unint64_t v32 = v35 >> 3;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v32;
      }
      if (v36)
      {
        float v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v36);
      }
      else
      {
        float v38 = 0;
        uint64_t v37 = 0;
      }
      unint64_t v39 = &v38[16 * v34];
      CFTypeRef v40 = &v38[16 * v37];
      if (v34 == v37)
      {
        if (v33 < 1)
        {
          if (v5 == v26) {
            unint64_t v42 = 1;
          }
          else {
            unint64_t v42 = v33 >> 3;
          }
          CFTypeRef v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v42);
          unint64_t v39 = &v43[16 * (v42 >> 2)];
          CFTypeRef v40 = &v43[16 * v44];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          unint64_t v41 = v34 + 2;
          if (v34 >= -1) {
            unint64_t v41 = v34 + 1;
          }
          v39 -= 16 * (v41 >> 1);
        }
      }
      *(_OWORD *)unint64_t v39 = *(_OWORD *)v2;
      unint64_t v45 = *a1;
      unsigned int v46 = (double *)v39;
      if (*a1 != v26)
      {
        uint64_t v47 = v26;
        unint64_t v48 = v39;
        do
        {
          unsigned int v46 = (double *)(v48 - 16);
          *((_OWORD *)v48 - 1) = *((_OWORD *)v47 - 1);
          v47 -= 2;
          v48 -= 16;
        }
        while (v47 != v45);
      }
      uint64_t v49 = a1[1];
      int64_t v50 = (char *)v49 - (char *)v26;
      if (v49 != v26) {
        memmove(v39 + 16, v26, (char *)v49 - (char *)v26);
      }
      unint64_t v51 = *a1;
      *a1 = v46;
      a1[1] = (double *)&v39[v50 + 16];
      a1[2] = (double *)v40;
      if (v51)
      {
        operator delete(v51);
      }
    }
    else
    {
      if (v26 == v4)
      {
        *(_OWORD *)uint64_t v4 = *(_OWORD *)a2;
        double v25 = v4 + 2;
LABEL_87:
        a1[1] = v25;
        return;
      }
      int v28 = v26 + 2;
      int v29 = v4 - 2;
      int v30 = a1[1];
      while (v29 < v4)
      {
        long long v31 = *(_OWORD *)v29;
        v29 += 2;
        *(_OWORD *)int v30 = v31;
        v30 += 2;
      }
      a1[1] = v30;
      if (v4 != v28) {
        memmove(&v4[-2 * (((char *)v4 - (char *)v28) >> 4)], v26, (char *)v4 - (char *)v28);
      }
      if (v26 <= v2) {
        v2 += 2 * (a1[1] > v2);
      }
      *(_OWORD *)int v26 = *(_OWORD *)v2;
    }
  }
  else
  {
    CFStringRef v14 = v6 + 2;
    double v15 = *a2;
    if (v6 + 2 == v4)
    {
LABEL_49:
      CFStringRef v17 = a1[1];
    }
    else
    {
      double v16 = a2[1];
      CFStringRef v17 = v6 + 2;
      while (1)
      {
        double v18 = *v17;
        if (v16 < *v17) {
          break;
        }
        double v19 = v17[1];
        if ((v15 >= v18 || v16 > v19) && (v15 >= v18 || v16 <= v19))
        {
          BOOL v22 = v15 == v18 && v16 == v19;
          if (!v22 && (v15 <= v18 || v16 >= v19) && (v15 < v18 || v15 > v19 || v16 <= v19)) {
            break;
          }
        }
        v17 += 2;
        if (v17 == v4) {
          goto LABEL_49;
        }
      }
    }
    if (v15 >= *v6) {
      double v15 = *v6;
    }
    double *v6 = v15;
    double v23 = a2[1];
    if (v6 == v17 - 2)
    {
      if (v6[1] >= v23) {
        double v23 = v6[1];
      }
      v6[1] = v23;
    }
    else
    {
      if (*(v17 - 1) >= v23) {
        double v23 = *(v17 - 1);
      }
      v6[1] = v23;
      if (v14 != v17)
      {
        int64_t v24 = (char *)v4 - (char *)v17;
        if (v4 != v17) {
          memmove(v14, v17, (char *)v4 - (char *)v17);
        }
        double v25 = (double *)((char *)v14 + v24);
        goto LABEL_87;
      }
    }
  }
}

void sub_1BAAC9D64(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

unint64_t applesauce::CF::convert_to<unsigned int,0>(const __CFNumber *a1)
{
  unint64_t result = applesauce::CF::convert_as<unsigned int,0>(a1);
  if (!HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BAAC9E40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a4);
    double v7 = result;
    void *v4 = result;
    v4[1] = result;
    void v4[2] = &result[2 * v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      unint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BAAC9ED0(_Unwind_Exception *exception_object)
{
  CFStringRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
      operator new();
    case 2:
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t v8 = *(void *)a3;
      *(void *)a3 = v7;
      if (v8) {
        std::default_delete<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::operator()[abi:ne180100](v8);
      }
      *(void *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
LABEL_9:
      uint64_t v9 = *(void *)a2;
      *(void *)a2 = 0;
      if (v9) {
        std::default_delete<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::operator()[abi:ne180100](v9);
      }
      unint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
      unint64_t result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()) {
        return *(void *)a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
      CFTypeRef v12 = *(void (**)(uint64_t, uint64_t, void, void **))(a2 + 32);
      valuePtr[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, valuePtr);
        CFTypeRef v12 = (void (*)(uint64_t, uint64_t, void, void **))valuePtr[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, void **))v11) {
        goto LABEL_25;
      }
      BOOL v13 = *(void (**)(uint64_t, uint64_t, void, void **))(a3 + 32);
      __p[0] = 0;
      if (v13)
      {
        v13(3, a3, 0, __p);
        BOOL v13 = (void (*)(uint64_t, uint64_t, void, void **))__p[0];
      }
      if (v13 == (void (*)(uint64_t, uint64_t, void, void **))v11)
      {
        if (*(void *)(a2 + 32))
        {
          valuePtr[0] = (void *)AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a2 + 32))(4, a2, 0, valuePtr);
        }
        else
        {
          uint64_t v14 = 0;
        }
        valuePtr[0] = (void *)AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
        uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a3 + 32))(4, a3, 0, valuePtr);
        if (std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(v14, v48))
        {
          return 1;
        }
      }
      else
      {
LABEL_25:
        AMCP::Thing::convert_to<std::tuple<CA::ValueRangeList,CA::StreamDescription>>((uint64_t)valuePtr, a2);
        AMCP::Thing::convert_to<std::tuple<CA::ValueRangeList,CA::StreamDescription>>((uint64_t)__p, a3);
        BOOL v17 = std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>((uint64_t)valuePtr, (uint64_t)__p);
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (valuePtr[0]) {
          operator delete(valuePtr[0]);
        }
        if (v17) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_76;
      }
      if (*(void *)(a2 + 32))
      {
        valuePtr[0] = (void *)AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a2 + 32))(4, a2, 0, valuePtr);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>())
      {
        if (v16)
        {
          *(_OWORD *)CFNumberRef valuePtr = 0u;
          long long v74 = 0u;
          unint64_t v75 = AMCP::Implementation::Outboard_Storage<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::dispatch;
          operator new();
        }
LABEL_84:
        __assert_rtn("create_available_format_from", "Thing.h", 2115, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (!v16) {
          goto LABEL_84;
        }
        CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
        uint64_t v71 = v16;
        __p[0] = Mutable;
        double v19 = *(void ***)v16;
        CFStringRef v20 = *(void ***)(v16 + 8);
        if (v19 != v20)
        {
          CFStringRef v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
          do
          {
            BOOL v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], v21);
            uint64_t v77 = v22;
            CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
            long long v76 = (void *)v23;
            if (!v23)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int64_t v24 = Mutable;
            valuePtr[0] = *v19;
            CFNumberRef v25 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            if (!v25)
            {
              int64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v50, "Could not construct");
              __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v22, v23, v25);
            CFRelease(v25);
            CFRelease(v23);
            CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
            long long v76 = (void *)v26;
            if (!v26)
            {
              unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v51, "Could not construct");
              __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            valuePtr[0] = v19[1];
            CFNumberRef v27 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
            if (!v27)
            {
              uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v52, "Could not construct");
              __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v22, v26, v27);
            CFRelease(v27);
            CFRelease(v26);
            CFMutableArrayRef Mutable = v24;
            mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v22);
            mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(v24, valuePtr[0]);
            if (valuePtr[0]) {
              CFRelease(valuePtr[0]);
            }
            if (v22) {
              CFRelease(v22);
            }
            v19 += 2;
          }
          while (v19 != v20);
        }
        int v28 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
        uint64_t v77 = v28;
        CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
        long long v76 = (void *)v29;
        if (!v29)
        {
          uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
          __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        valuePtr[0] = *(void **)(v71 + 24);
        CFNumberRef v30 = CFNumberCreate(0, kCFNumberDoubleType, valuePtr);
        if (!v30)
        {
          unint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
          __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v29, v30);
        CFRelease(v30);
        CFRelease(v29);
        CFStringRef v31 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
        valuePtr[0] = (void *)v31;
        if (!v31)
        {
          uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v55, "Could not construct");
          __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 32);
        CFNumberRef v32 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v32)
        {
          unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v56, "Could not construct");
          __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v31, v32);
        CFRelease(v32);
        CFRelease(v31);
        CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
        valuePtr[0] = (void *)v33;
        if (!v33)
        {
          unint64_t v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v57, "Could not construct");
          __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 36);
        CFNumberRef v34 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v34)
        {
          uint64_t v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v58, "Could not construct");
          __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v33, v34);
        CFRelease(v34);
        CFRelease(v33);
        CFStringRef v35 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
        valuePtr[0] = (void *)v35;
        if (!v35)
        {
          std::string::size_type v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v59, "Could not construct");
          __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 40);
        CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v36)
        {
          std::string::size_type v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v60, "Could not construct");
          __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v35, v36);
        CFRelease(v36);
        CFRelease(v35);
        CFStringRef v37 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
        valuePtr[0] = (void *)v37;
        if (!v37)
        {
          uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v61, "Could not construct");
          __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 44);
        CFNumberRef v38 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v38)
        {
          unint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v62, "Could not construct");
          __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v37, v38);
        CFRelease(v38);
        CFRelease(v37);
        CFStringRef v39 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
        valuePtr[0] = (void *)v39;
        if (!v39)
        {
          unint64_t v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v63, "Could not construct");
          __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 48);
        CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v40)
        {
          uint64_t v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v64, "Could not construct");
          __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v39, v40);
        CFRelease(v40);
        CFRelease(v39);
        CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
        valuePtr[0] = (void *)v41;
        if (!v41)
        {
          std::string::size_type v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v65, "Could not construct");
          __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 52);
        CFNumberRef v42 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v42)
        {
          std::string::size_type v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v66, "Could not construct");
          __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v41, v42);
        CFRelease(v42);
        CFRelease(v41);
        CFStringRef v43 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
        valuePtr[0] = (void *)v43;
        if (!v43)
        {
          uint64_t v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v67, "Could not construct");
          __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v76) = *(_DWORD *)(v71 + 56);
        CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, &v76);
        if (!v44)
        {
          uint64_t v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v68, "Could not construct");
          __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v28, v43, v44);
        CFRelease(v44);
        CFRelease(v43);
        unint64_t v45 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
        long long v76 = v45;
        CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate range list", 22, 0x8000100u, 0);
        if (!v46)
        {
          unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v69, "Could not construct");
          __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)valuePtr, Mutable);
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v45, v46, valuePtr[0]);
        if (valuePtr[0]) {
          CFRelease(valuePtr[0]);
        }
        CFRelease(v46);
        CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)"format", 6, 0x8000100u, 0);
        if (!v47)
        {
          unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v70, "Could not construct");
          __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v28);
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v45, v47, valuePtr[0]);
        if (valuePtr[0]) {
          CFRelease(valuePtr[0]);
        }
        CFRelease(v47);
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)valuePtr, v45);
        valuePtr[1] = 0;
        long long v74 = 0uLL;
        unint64_t v75 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
        if (v45) {
          CFRelease(v45);
        }
        if (v28) {
          CFRelease(v28);
        }
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
LABEL_76:
        unint64_t v75 = 0;
        *(_OWORD *)CFNumberRef valuePtr = 0u;
        long long v74 = 0u;
      }
      AMCP::swap((AMCP::Thing *)valuePtr, (AMCP::Thing *)a3, v15);
      if (v75) {
        ((void (*)(void, void **, void, void))v75)(0, valuePtr, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAACAE24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p)
{
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v19 - 104));
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v19 - 96));
  mcp_applesauce::CF::Array_Builder::~Array_Builder(&a11);
  __clang_call_terminate(a1);
}

void std::default_delete<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::operator()[abi:ne180100](uint64_t a1)
{
  char v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

BOOL std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(double **)a1;
  CFIndex v5 = *(double **)(a1 + 8);
  if (*(double **)a1 == v5)
  {
    return *(double *)(a1 + 24) == *(double *)(a2 + 24)
        && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
        && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
        && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
        && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
        && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
        && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
        && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
  }
  else
  {
    for (unint64_t i = *(double **)a2; ; i += 2)
    {
      BOOL result = CA::operator==(*v4, v4[1], *i, i[1]);
      if (!result) {
        break;
      }
      v4 += 2;
      if (v4 == v5) {
        return *(double *)(a1 + 24) == *(double *)(a2 + 24)
      }
            && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
            && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36)
            && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
            && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
            && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
            && *(_DWORD *)(a1 + 52) == *(_DWORD *)(a2 + 52)
            && *(_DWORD *)(a1 + 56) == *(_DWORD *)(a2 + 56);
    }
  }
  return result;
}

void *AMCP::Thing::convert_to<std::tuple<CA::ValueRangeList,CA::StreamDescription>>(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
  CFIndex v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v22 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v22);
    CFIndex v5 = v22;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v21 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v21);
    if (v6)
    {
      uint64_t v7 = v6;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      BOOL result = std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(v7 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(v7 + 40);
      *(void *)(a1 + ++*(_DWORD *)(this + 56) = *(void *)(v7 + 56);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v12 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v18 = AMCP::Implementation::get_type_marker<std::tuple<CA::ValueRangeList,CA::StreamDescription>>();
  memset(v19, 0, sizeof(v19));
  CFStringRef v20 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v19, &v18);
  if (!v20)
  {
    BOOL v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v17 = v4;
  uint64_t v9 = v20(4, v19, 0, &v17);
  uint64_t v10 = v9;
  if (!v9)
  {
    double v15 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v16 = std::bad_cast::bad_cast(v15);
    __cxa_throw(v16, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  BOOL result = std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)a1, *(const void **)v9, *(void *)(v9 + 8), (uint64_t)(*(void *)(v9 + 8) - *(void *)v9) >> 4);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v10 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v10 + 40);
  *(void *)(a1 + ++*(_DWORD *)(this + 56) = *(void *)(v10 + 56);
  if (v20) {
    return (void *)v20(0, v19, 0, 0);
  }
  return result;
}

void sub_1BAACB3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

applesauce::CF::DictionaryRef *mcp_applesauce::CF::Dictionary_Builder::get_dictionary(applesauce::CF::DictionaryRef *this, const void *a2)
{
  char v2 = this;
  if (a2)
  {
    CFRetain(a2);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, a2);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(__CFArray *a1, const void *a2)
{
  if (a1) {
    CFArrayAppendValue(a1, a2);
  }
}

void mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

applesauce::CF::ArrayRef *mcp_applesauce::CF::Array_Builder::get_array(applesauce::CF::ArrayRef *this, const void *a2)
{
  char v2 = this;
  if (a2)
  {
    CFRetain(a2);
    return applesauce::CF::ArrayRef::ArrayRef(v2, a2);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

applesauce::CF::DictionaryRef *mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(applesauce::CF::DictionaryRef *this, const __CFDictionary *a2)
{
  char v2 = this;
  if (a2)
  {
    CFDictionaryRef Copy = CFDictionaryCreateCopy(0, a2);
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, Copy);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void mcp_applesauce::CF::Array_Builder::~Array_Builder(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAACB660(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAACB718(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

BOOL CA::operator==(double a1, double a2, double a3, double a4)
{
  if (a2 < a3) {
    return 0;
  }
  BOOL v4 = a1 >= a3 || a2 > a4;
  if (!v4 || a1 < a3 && a2 > a4) {
    return 0;
  }
  if (a2 == a4) {
    return a1 == a3;
  }
  return 0;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(unint64_t a1)
{
  if (a1 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a1);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  BOOL v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  CFIndex v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

const void *applesauce::CF::details::at_key<applesauce::CF::StringRef>(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryGetValue(theDict, a2);
    }
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  BOOL v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  CFIndex v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

std::runtime_error *applesauce::CF::not_found(std::runtime_error *this)
{
  return std::runtime_error::runtime_error(this, "Could not find item");
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  BOOL v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  CFIndex v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    char v2 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v2);
    }
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[233];
}

uint64_t AMCP::Implementation::get_type_marker<CA::StreamDescription>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[235];
}

uint64_t AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
      operator new();
    case 2:
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t v8 = *(void *)a3;
      *(void *)a3 = v7;
      if (v8) {
        MEMORY[0x1C1859840](v8, 0x1000C400A747E1ELL);
      }
      *(void *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
LABEL_9:
      uint64_t v9 = *(void *)a2;
      *(void *)a2 = 0;
      if (v9) {
        MEMORY[0x1C1859840](v9, 0x1000C400A747E1ELL);
      }
      BOOL result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
      BOOL result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::StreamDescription>()) {
        return *(void *)a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
      CFTypeRef v12 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long valuePtr = 0;
      if (v12)
      {
        v12(3, a2, 0, &valuePtr);
        CFTypeRef v12 = (void (*)(uint64_t, uint64_t, void, long long *))valuePtr;
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, long long *))v11) {
        goto LABEL_26;
      }
      BOOL v13 = *(void (**)(uint64_t, uint64_t, void, long long *))(a3 + 32);
      *(void *)&long long v53 = 0;
      if (v13)
      {
        v13(3, a3, 0, &v53);
        BOOL v13 = (void (*)(uint64_t, uint64_t, void, long long *))v53;
      }
      if (v13 == (void (*)(uint64_t, uint64_t, void, long long *))v11)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &valuePtr);
        }
        else
        {
          uint64_t v14 = 0;
        }
        if (*(void *)(a3 + 32))
        {
          *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
          uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &valuePtr);
        }
        else
        {
          uint64_t v36 = 0;
        }
        if (*(double *)v14 != *(double *)v36
          || *(_DWORD *)(v14 + 8) != *(_DWORD *)(v36 + 8)
          || *(_DWORD *)(v14 + 12) != *(_DWORD *)(v36 + 12)
          || *(_DWORD *)(v14 + 16) != *(_DWORD *)(v36 + 16)
          || *(_DWORD *)(v14 + 20) != *(_DWORD *)(v36 + 20)
          || *(_DWORD *)(v14 + 24) != *(_DWORD *)(v36 + 24)
          || *(_DWORD *)(v14 + 28) != *(_DWORD *)(v36 + 28))
        {
          return 0;
        }
        int v17 = *(_DWORD *)(v14 + 32);
        int v18 = *(_DWORD *)(v36 + 32);
      }
      else
      {
LABEL_26:
        AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&valuePtr, a2);
        AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)&v53, a3);
        if (*(double *)&valuePtr != *(double *)&v53
          || *((void *)&valuePtr + 1) != *((void *)&v53 + 1)
          || v57 != v54
          || *(void *)((char *)&v57 + 4) != *(void *)((char *)&v54 + 4)
          || HIDWORD(v57) != HIDWORD(v54))
        {
          return 0;
        }
        int v17 = v58;
        int v18 = (int)v55;
      }
      return v17 == v18;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::StreamDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_59;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &valuePtr);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
      {
        if (v16)
        {
          long long valuePtr = *(_OWORD *)v16;
          long long v57 = *(_OWORD *)(v16 + 16);
          uint64_t v58 = *(void *)(v16 + 32);
          long long v53 = 0u;
          long long v54 = 0u;
          uint64_t v55 = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
          operator new();
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::StreamDescription>())
      {
        if (v16)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
          operator new();
        }
LABEL_78:
        __assert_rtn("create_asbd_from", "Thing.h", 1718, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (!v16) {
          goto LABEL_78;
        }
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
        std::string::size_type v59 = Mutable;
        CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
        *(void *)&long long v53 = v20;
        if (!v20)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        *(void *)&long long valuePtr = *(void *)v16;
        CFNumberRef v21 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        if (!v21)
        {
          CFNumberRef v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
          __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v20, v21);
        CFRelease(v21);
        CFRelease(v20);
        CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
        *(void *)&long long valuePtr = v22;
        if (!v22)
        {
          CFStringRef v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 8);
        CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v23)
        {
          CFNumberRef v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
          __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v22, v23);
        CFRelease(v23);
        CFRelease(v22);
        CFStringRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
        *(void *)&long long valuePtr = v24;
        if (!v24)
        {
          CFStringRef v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 12);
        CFNumberRef v25 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v25)
        {
          CFNumberRef v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v24, v25);
        CFRelease(v25);
        CFRelease(v24);
        CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
        *(void *)&long long valuePtr = v26;
        if (!v26)
        {
          CFStringRef v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v43, "Could not construct");
          __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 16);
        CFNumberRef v27 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v27)
        {
          CFNumberRef v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v44, "Could not construct");
          __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v26, v27);
        CFRelease(v27);
        CFRelease(v26);
        CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
        *(void *)&long long valuePtr = v28;
        if (!v28)
        {
          unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v45, "Could not construct");
          __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 20);
        CFNumberRef v29 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v29)
        {
          CFStringRef v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v46, "Could not construct");
          __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v28, v29);
        CFRelease(v29);
        CFRelease(v28);
        CFStringRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
        *(void *)&long long valuePtr = v30;
        if (!v30)
        {
          CFStringRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v47, "Could not construct");
          __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 24);
        CFNumberRef v31 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v31)
        {
          uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v48, "Could not construct");
          __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v30, v31);
        CFRelease(v31);
        CFRelease(v30);
        CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
        *(void *)&long long valuePtr = v32;
        if (!v32)
        {
          uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
          __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 28);
        CFNumberRef v33 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v33)
        {
          int64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not construct");
          __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v32, v33);
        CFRelease(v33);
        CFRelease(v32);
        CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
        *(void *)&long long valuePtr = v34;
        if (!v34)
        {
          unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v51, "Could not construct");
          __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 32);
        CFNumberRef v35 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v35)
        {
          uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
          __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v34, v35);
        CFRelease(v35);
        CFRelease(v34);
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v53, Mutable);
        *((void *)&v53 + 1) = 0;
        long long v54 = 0uLL;
        uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
LABEL_59:
        uint64_t v55 = 0;
        long long v53 = 0u;
        long long v54 = 0u;
      }
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v15);
      if (v55) {
        v55(0, (uint64_t)&v53, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAACC6F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v7 - 56));
  __clang_call_terminate(a1);
}

uint64_t AMCP::Thing::convert_to<CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
  CFIndex v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFStringRef v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    CFIndex v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      long long v7 = *(_OWORD *)(result + 16);
      *(_OWORD *)a1 = *(_OWORD *)result;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(result + 32);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<CA::StreamDescription>();
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t result = v18(4, v17, 0, &v15);
  if (!result)
  {
    BOOL v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  long long v8 = *(_OWORD *)(result + 16);
  *(_OWORD *)a1 = *(_OWORD *)result;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = *(void *)(result + 32);
  if (v18) {
    return v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAACCA2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
      operator new();
    case 2:
      uint64_t v7 = *(void *)a2;
      *(void *)a2 = 0;
      uint64_t v8 = *(void *)a3;
      *(void *)a3 = v7;
      if (v8) {
        MEMORY[0x1C1859840](v8, 0x1000C400A747E1ELL);
      }
      *(void *)(a3 + 32) = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
LABEL_9:
      uint64_t v9 = *(void *)a2;
      *(void *)a2 = 0;
      if (v9) {
        MEMORY[0x1C1859840](v9, 0x1000C400A747E1ELL);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
      uint64_t result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()) {
        return *(void *)a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
      CFTypeRef v12 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long valuePtr = 0;
      if (v12)
      {
        v12(3, a2, 0, &valuePtr);
        CFTypeRef v12 = (void (*)(uint64_t, uint64_t, void, long long *))valuePtr;
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, long long *))v11) {
        goto LABEL_26;
      }
      BOOL v13 = *(void (**)(uint64_t, uint64_t, void, long long *))(a3 + 32);
      *(void *)&long long v53 = 0;
      if (v13)
      {
        v13(3, a3, 0, &v53);
        BOOL v13 = (void (*)(uint64_t, uint64_t, void, long long *))v53;
      }
      if (v13 == (void (*)(uint64_t, uint64_t, void, long long *))v11)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &valuePtr);
        }
        else
        {
          uint64_t v14 = 0;
        }
        if (*(void *)(a3 + 32))
        {
          *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
          uint64_t v36 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &valuePtr);
        }
        else
        {
          uint64_t v36 = 0;
        }
        if (*(double *)v14 != *(double *)v36
          || *(_DWORD *)(v14 + 8) != *(_DWORD *)(v36 + 8)
          || *(_DWORD *)(v14 + 12) != *(_DWORD *)(v36 + 12)
          || *(_DWORD *)(v14 + 16) != *(_DWORD *)(v36 + 16)
          || *(_DWORD *)(v14 + 20) != *(_DWORD *)(v36 + 20)
          || *(_DWORD *)(v14 + 24) != *(_DWORD *)(v36 + 24)
          || *(_DWORD *)(v14 + 28) != *(_DWORD *)(v36 + 28))
        {
          return 0;
        }
        int v17 = *(_DWORD *)(v14 + 32);
        int v18 = *(_DWORD *)(v36 + 32);
      }
      else
      {
LABEL_26:
        uint64_t v58 = 0;
        long long valuePtr = 0u;
        long long v57 = 0u;
        AMCP::Thing::convert_to<AudioStreamBasicDescription>((uint64_t)&valuePtr, a2);
        uint64_t v55 = 0;
        long long v53 = 0u;
        long long v54 = 0u;
        AMCP::Thing::convert_to<AudioStreamBasicDescription>((uint64_t)&v53, a3);
        if (*(double *)&valuePtr != *(double *)&v53
          || *((void *)&valuePtr + 1) != *((void *)&v53 + 1)
          || v57 != v54
          || *(void *)((char *)&v57 + 4) != *(void *)((char *)&v54 + 4)
          || HIDWORD(v57) != HIDWORD(v54))
        {
          return 0;
        }
        int v17 = v58;
        int v18 = (int)v55;
      }
      return v17 == v18;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::StreamDescription>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_59;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &valuePtr);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>())
      {
        if (v16)
        {
          long long v53 = 0u;
          long long v54 = 0u;
          uint64_t v55 = AMCP::Implementation::Outboard_Storage<AudioStreamBasicDescription>::dispatch;
          operator new();
        }
        goto LABEL_78;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::StreamDescription>())
      {
        if (v16)
        {
          long long valuePtr = *(_OWORD *)v16;
          long long v57 = *(_OWORD *)(v16 + 16);
          uint64_t v58 = *(void *)(v16 + 32);
          long long v53 = 0u;
          long long v54 = 0u;
          uint64_t v55 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
          operator new();
        }
LABEL_78:
        __assert_rtn("create_asbd_from", "Thing.h", 1718, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (!v16) {
          goto LABEL_78;
        }
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
        std::string::size_type v59 = Mutable;
        CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
        *(void *)&long long v53 = v20;
        if (!v20)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        *(void *)&long long valuePtr = *(void *)v16;
        CFNumberRef v21 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
        if (!v21)
        {
          CFNumberRef v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
          __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v20, v21);
        CFRelease(v21);
        CFRelease(v20);
        CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
        *(void *)&long long valuePtr = v22;
        if (!v22)
        {
          CFStringRef v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 8);
        CFNumberRef v23 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v23)
        {
          CFNumberRef v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
          __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v22, v23);
        CFRelease(v23);
        CFRelease(v22);
        CFStringRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
        *(void *)&long long valuePtr = v24;
        if (!v24)
        {
          CFStringRef v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 12);
        CFNumberRef v25 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v25)
        {
          CFNumberRef v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v24, v25);
        CFRelease(v25);
        CFRelease(v24);
        CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
        *(void *)&long long valuePtr = v26;
        if (!v26)
        {
          CFStringRef v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v43, "Could not construct");
          __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 16);
        CFNumberRef v27 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v27)
        {
          CFNumberRef v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v44, "Could not construct");
          __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v26, v27);
        CFRelease(v27);
        CFRelease(v26);
        CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
        *(void *)&long long valuePtr = v28;
        if (!v28)
        {
          unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v45, "Could not construct");
          __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 20);
        CFNumberRef v29 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v29)
        {
          CFStringRef v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v46, "Could not construct");
          __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v28, v29);
        CFRelease(v29);
        CFRelease(v28);
        CFStringRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
        *(void *)&long long valuePtr = v30;
        if (!v30)
        {
          CFStringRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v47, "Could not construct");
          __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 24);
        CFNumberRef v31 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v31)
        {
          uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v48, "Could not construct");
          __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v30, v31);
        CFRelease(v31);
        CFRelease(v30);
        CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
        *(void *)&long long valuePtr = v32;
        if (!v32)
        {
          uint64_t v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
          __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 28);
        CFNumberRef v33 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v33)
        {
          int64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not construct");
          __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v32, v33);
        CFRelease(v33);
        CFRelease(v32);
        CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
        *(void *)&long long valuePtr = v34;
        if (!v34)
        {
          unint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v51, "Could not construct");
          __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        LODWORD(v53) = *(_DWORD *)(v16 + 32);
        CFNumberRef v35 = CFNumberCreate(0, kCFNumberIntType, &v53);
        if (!v35)
        {
          uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
          __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v34, v35);
        CFRelease(v35);
        CFRelease(v34);
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v53, Mutable);
        *((void *)&v53 + 1) = 0;
        long long v54 = 0uLL;
        uint64_t v55 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      else
      {
LABEL_59:
        uint64_t v55 = 0;
        long long v53 = 0u;
        long long v54 = 0u;
      }
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v15);
      if (v55) {
        ((void (*)(void, long long *, void, void))v55)(0, &v53, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAACD6B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v7 - 56));
  __clang_call_terminate(a1);
}

uint64_t AMCP::Thing::convert_to<AudioStreamBasicDescription>(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
  CFIndex v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFStringRef v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    CFIndex v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v19 = type;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      long long v7 = *(_OWORD *)(result + 16);
      *(_OWORD *)a1 = *(_OWORD *)result;
      *(_OWORD *)(a1 + 16) = v7;
      *(void *)(a1 + 32) = *(void *)(result + 32);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<AudioStreamBasicDescription>();
  memset(v17, 0, sizeof(v17));
  int v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = type;
  uint64_t result = v18(4, v17, 0, &v15);
  if (!result)
  {
    BOOL v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  long long v8 = *(_OWORD *)(result + 16);
  *(_OWORD *)a1 = *(_OWORD *)result;
  *(_OWORD *)(a1 + 16) = v8;
  *(void *)(a1 + 32) = *(void *)(result + 32);
  if (v18) {
    return v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAACD9F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::size_type v5 = __n;
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    long long v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_1BAACDA74(_Unwind_Exception *exception_object)
{
  CFTypeID v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef>(void *a1, const __CFArray *a2, unint64_t a3, void *a4)
{
  applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef>(void *a1, const __CFArray *a2, unint64_t a3, void *a4)
{
  applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

float applesauce::CF::convert_to<float,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_13;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_22;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_13:
        int v9 = SLOBYTE(valuePtr);
        goto LABEL_16;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_15:
        int v9 = SLOWORD(valuePtr);
LABEL_16:
        float v10 = (float)v9;
        goto LABEL_29;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_18:
        float v10 = (float)SLODWORD(valuePtr);
        goto LABEL_29;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_26;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_26;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_22:
        uint64_t v11 = LODWORD(valuePtr);
        goto LABEL_30;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_28;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_26;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_26:
        float v10 = (float)*(uint64_t *)&valuePtr;
        goto LABEL_29;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int Value = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_28:
        float v10 = valuePtr;
LABEL_29:
        uint64_t v11 = LODWORD(v10);
LABEL_30:
        uint64_t v8 = v11 | 0x100000000;
        if (!Value) {
          uint64_t v8 = 0;
        }
        int v6 = v8 & 0xFFFFFF00;
        unint64_t v7 = v8 & 0x100000000;
        break;
      default:
        int v6 = 0;
        unint64_t v7 = 0;
        LOBYTE(v8) = 0;
        break;
    }
    if (HIDWORD(v7))
    {
      LODWORD(v5) = v7 | v6 & 0xFFFFFF00 | v8;
      return v5;
    }
LABEL_36:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1)) {
    goto LABEL_36;
  }
  return (float)CFBooleanGetValue(a1);
}

void sub_1BAACDE24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch(int a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      int v9 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v9;
        operator delete(v9);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v10 = 0uLL;
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v10 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_6:
      *(_OWORD *)a2 = v10;
      *(_OWORD *)(a2 + 16) = v10;
      return result;
    case 3:
      uint64_t v13 = AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
      uint64_t result = 0;
      *a4 = v13;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ChannelLayout>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<CA::ChannelLayout>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_53;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ChannelLayout>();
        CFTypeRef v12 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFTypeRef v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ChannelLayout>())
      {
        if (v12)
        {
          std::string::size_type v60 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v59 = 0u;
          std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(cf, *v12, (uint64_t)v12[1], (unsigned char *)v12[1] - (unsigned char *)*v12);
          std::string::size_type v60 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
          goto LABEL_54;
        }
LABEL_74:
        __assert_rtn("create_acl_from", "Thing.h", 1632, "in_value_ptr != nullptr");
      }
      if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
LABEL_53:
        std::string::size_type v60 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v59 = 0u;
        goto LABEL_54;
      }
      if (!v12) {
        goto LABEL_74;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
      unint64_t v63 = Mutable;
      unint64_t v15 = *((unsigned int *)*v12 + 2);
      if (v15 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
LABEL_52:
      }
        __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
      uint64_t v16 = 0;
      uint64_t v17 = -1;
      while (1)
      {
        unint64_t v18 = v17 + 1;
        if (v17 + 1 >= v15) {
          break;
        }
        CFMutableDictionaryRef v19 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
        cf[0] = v19;
        CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"channel label", 13, 0x8000100u, 0);
        unint64_t v62 = (void *)v20;
        if (!v20)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v21 = *((unsigned int *)*v12 + 2);
        if (v21 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v18 >= v21)
        {
          CFStringRef v43 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v43, "accessing a CA::ChannelLayout with an out-of-range index");
          v43->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v43, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 12);
        CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v22)
        {
          CFStringRef v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v19, v20, v22);
        CFRelease(v22);
        CFRelease(v20);
        CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"channel flags", 13, 0x8000100u, 0);
        unint64_t v62 = (void *)v23;
        if (!v23)
        {
          CFNumberRef v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v24 = *((unsigned int *)*v12 + 2);
        if (v24 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v18 >= v24)
        {
          CFNumberRef v44 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v44, "accessing a CA::ChannelLayout with an out-of-range index");
          v44->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v44, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 16);
        CFNumberRef v25 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
        if (!v25)
        {
          unint64_t v45 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v45, "Could not construct");
          __cxa_throw(v45, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v19, v23, v25);
        CFRelease(v25);
        CFRelease(v23);
        CFStringRef v26 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
        unint64_t v62 = v26;
        unint64_t v27 = *((unsigned int *)*v12 + 2);
        if (v27 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v18 >= v27)
        {
          CFStringRef v46 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v46, "accessing a CA::ChannelLayout with an out-of-range index");
          v46->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v46, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 20);
        CFNumberRef v28 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (!v28)
        {
          CFStringRef v47 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v47, "Could not construct");
          __cxa_throw(v47, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v26, v28);
        CFRelease(v28);
        unint64_t v29 = *((unsigned int *)*v12 + 2);
        if (v29 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (v18 >= v29)
        {
          uint64_t v49 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v49, "accessing a CA::ChannelLayout with an out-of-range index");
          v49->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v49, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 24);
        CFNumberRef v30 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (!v30)
        {
          uint64_t v48 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v48, "Could not construct");
          __cxa_throw(v48, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v26, v30);
        CFRelease(v30);
        unint64_t v31 = *((unsigned int *)*v12 + 2);
        if (v31 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
          __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
        }
        if (++v17 >= v31)
        {
          unint64_t v51 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(v51, "accessing a CA::ChannelLayout with an out-of-range index");
          v51->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
          __cxa_throw(v51, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
        }
        LODWORD(valuePtr) = *(_DWORD *)((char *)*v12 + v16 + 28);
        CFNumberRef v32 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
        if (!v32)
        {
          int64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not construct");
          __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(v26, v32);
        CFRelease(v32);
        CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"coordinates", 11, 0x8000100u, 0);
        if (!v33)
        {
          uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
          __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, v26);
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v19, v33, valuePtr);
        if (valuePtr) {
          CFRelease(valuePtr);
        }
        CFRelease(v33);
        mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&valuePtr, v19);
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, valuePtr);
        if (valuePtr) {
          CFRelease(valuePtr);
        }
        if (v26) {
          CFRelease(v26);
        }
        if (v19) {
          CFRelease(v19);
        }
        v16 += 20;
        unint64_t v15 = *((unsigned int *)*v12 + 2);
        if (v15 > ((unsigned char *)v12[1] - (unsigned char *)*v12 - 12) / 0x14uLL) {
          goto LABEL_52;
        }
      }
      CFStringRef v34 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      unint64_t v62 = v34;
      CFStringRef v35 = CFStringCreateWithBytes(0, (const UInt8 *)"channel layout tag", 18, 0x8000100u, 0);
      cf[0] = v35;
      if (!v35)
      {
        long long v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(valuePtr) = *(_DWORD *)*v12;
      CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v36)
      {
        long long v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Could not construct");
        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, v35, v36);
      CFRelease(v36);
      CFRelease(v35);
      CFStringRef v37 = CFStringCreateWithBytes(0, (const UInt8 *)"channel bitmap", 14, 0x8000100u, 0);
      cf[0] = v37;
      if (!v37)
      {
        uint64_t v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(valuePtr) = *((_DWORD *)*v12 + 1);
      CFNumberRef v38 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v38)
      {
        unint64_t v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v34, v37, v38);
      CFRelease(v38);
      CFRelease(v37);
      CFStringRef v39 = CFStringCreateWithBytes(0, (const UInt8 *)"channel descriptions", 20, 0x8000100u, 0);
      if (!v39)
      {
        long long v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v34, v39, cf[0]);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      CFRelease(v39);
      mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, v34);
      cf[1] = 0;
      long long v59 = 0uLL;
      std::string::size_type v60 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
      if (v34) {
        CFRelease(v34);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
LABEL_54:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v11);
      if (v60) {
        ((void (*)(void, CFTypeRef *, void, void))v60)(0, cf, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAACEB78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, const void *);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

void mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(__CFArray *a1, const void *a2)
{
  if (a1) {
    CFArrayAppendValue(a1, a2);
  }
}

applesauce::CF::ArrayRef *mcp_applesauce::CF::Array_Builder::copy_array(applesauce::CF::ArrayRef *this, const __CFArray *a2)
{
  int v2 = this;
  if (a2)
  {
    CFArrayRef Copy = CFArrayCreateCopy(0, a2);
    return applesauce::CF::ArrayRef::ArrayRef(v2, Copy);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void applesauce::CF::details::at_as<applesauce::CF::NumberRef>(unsigned char *a1, CFArrayRef theArray, unint64_t a3)
{
  if (!theArray) {
    goto LABEL_7;
  }
  if (CFArrayGetCount(theArray) <= a3) {
    goto LABEL_7;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  unint64_t v7 = ValueAtIndex;
  if (!ValueAtIndex) {
    goto LABEL_7;
  }
  CFRetain(ValueAtIndex);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFNumberGetTypeID())
  {
    CFRelease(v7);
LABEL_7:
    char v9 = 0;
    *a1 = 0;
    goto LABEL_8;
  }
  *(void *)a1 = v7;
  char v9 = 1;
LABEL_8:
  a1[8] = v9;
}

void applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(unsigned char *a1, CFArrayRef theArray, unint64_t a3)
{
  if (!theArray) {
    goto LABEL_7;
  }
  if (CFArrayGetCount(theArray) <= a3) {
    goto LABEL_7;
  }
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  unint64_t v7 = ValueAtIndex;
  if (!ValueAtIndex) {
    goto LABEL_7;
  }
  CFRetain(ValueAtIndex);
  CFTypeID v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_7:
    char v9 = 0;
    *a1 = 0;
    goto LABEL_8;
  }
  *(void *)a1 = v7;
  char v9 = 1;
LABEL_8:
  a1[8] = v9;
}

uint64_t AMCP::Implementation::get_type_marker<AudioValueRange>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[227];
}

uint64_t AMCP::Implementation::get_type_marker<CA::ValueRange>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[229];
}

uint64_t AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      uint64_t result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
      uint64_t result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
      long long v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        long long v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_23;
      }
      uint64_t v11 = *(__CFDictionary **)(a3 + 32);
      CFNumberRef v36 = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, void, __CFDictionary **))v11)(3, a3, 0, &v36);
        uint64_t v11 = v36;
      }
      if (v11 == (__CFDictionary *)v9)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v32 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
          CFTypeRef v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
        }
        else
        {
          CFTypeRef v12 = 0;
        }
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
        unint64_t v27 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
        if (CA::operator==(*v12, v12[1], *v27, v27[1])) {
          return 1;
        }
      }
      else
      {
LABEL_23:
        double v15 = AMCP::Thing::convert_to<CA::ValueRange>(a2);
        double v17 = v16;
        double v18 = AMCP::Thing::convert_to<CA::ValueRange>(a3);
        if (v17 >= v18 && (v15 >= v18 || v17 > v19) && (v15 >= v18 || v17 <= v19) && v17 == v19 && v15 == v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::ValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_50;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>())
      {
        if (v14)
        {
          long long v32 = *(_OWORD *)v14;
          long long v33 = 0uLL;
          unint64_t v21 = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
LABEL_41:
          CFStringRef v34 = (uint64_t (*)())v21;
          goto LABEL_51;
        }
        goto LABEL_58;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
      {
        if (v14)
        {
          long long v33 = 0uLL;
          long long v32 = *(_OWORD *)v14;
          unint64_t v21 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
          goto LABEL_41;
        }
LABEL_58:
        __assert_rtn("create_value_range_from", "Thing.h", 1563, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (v14)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
          CFNumberRef v36 = Mutable;
          CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"float minimum", 13, 0x8000100u, 0);
          CFStringRef v35 = v23;
          if (!v23)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(void *)&long long v32 = *(void *)v14;
          CFNumberRef v24 = CFNumberCreate(0, kCFNumberDoubleType, &v32);
          if (!v24)
          {
            unint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v29, "Could not construct");
            __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v23, v24);
          CFRelease(v24);
          CFRelease(v23);
          CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"float maximum", 13, 0x8000100u, 0);
          CFStringRef v35 = v25;
          if (!v25)
          {
            CFNumberRef v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v30, "Could not construct");
            __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(void *)&long long v32 = *(void *)(v14 + 8);
          CFNumberRef v26 = CFNumberCreate(0, kCFNumberDoubleType, &v32);
          if (!v26)
          {
            unint64_t v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v31, "Could not construct");
            __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v25, v26);
          CFRelease(v26);
          CFRelease(v25);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v32, Mutable);
          *((void *)&v32 + 1) = 0;
          long long v33 = 0uLL;
          CFStringRef v34 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_51;
        }
        goto LABEL_58;
      }
LABEL_50:
      CFStringRef v34 = 0;
      long long v32 = 0u;
      long long v33 = 0u;
LABEL_51:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        ((void (*)(void, long long *, void, void))v34)(0, &v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAACF574(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

double AMCP::Thing::convert_to<CA::ValueRange>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  CFTypeID v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  double v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFTypeID v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    CFTypeID v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(double *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<CA::ValueRange>();
  memset(v16, 0, sizeof(v16));
  double v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    long long v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  int v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    CFTypeRef v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  double v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAACF7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      uint64_t result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<AudioValueRange>();
      uint64_t result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AudioValueRange>();
      long long v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v37 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v37);
        long long v10 = (void (*)(uint64_t, uint64_t, void, long long *))v37;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_23;
      }
      uint64_t v11 = *(__CFDictionary **)(a3 + 32);
      CFStringRef v41 = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, void, __CFDictionary **))v11)(3, a3, 0, &v41);
        uint64_t v11 = v41;
      }
      if (v11 != (__CFDictionary *)v9)
      {
LABEL_23:
        double v15 = AMCP::Thing::convert_to<AudioValueRange>(a2);
        double v17 = v16;
        double v18 = AMCP::Thing::convert_to<AudioValueRange>(a3);
        if (v17 < v18 || v15 < v18 && v17 <= v19) {
          return 0;
        }
        if (v15 < v18 && v17 > v19) {
          return 0;
        }
        return v17 == v19 && v15 == v18;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v37 = AMCP::Implementation::get_type_marker<AudioValueRange>();
        CFTypeRef v12 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v37);
      }
      else
      {
        CFTypeRef v12 = 0;
      }
      if (*(void *)(a3 + 32))
      {
        *(void *)&long long v37 = AMCP::Implementation::get_type_marker<AudioValueRange>();
        unint64_t v27 = (double *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v37);
      }
      else
      {
        unint64_t v27 = 0;
      }
      double v28 = v12[1];
      double v29 = *v27;
      if (v28 >= *v27)
      {
        double v30 = *v12;
        double v31 = v27[1];
        if ((*v12 >= v29 || v28 > v31) && (v30 >= v29 || v28 <= v31) && v28 == v31 && v30 == v29) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AudioValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<CA::ValueRange>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_50;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v37 = AMCP::Implementation::get_type_marker<AudioValueRange>();
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v37);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AudioValueRange>())
      {
        if (v14)
        {
          long long v38 = 0uLL;
          long long v37 = *(_OWORD *)v14;
          unint64_t v21 = AMCP::Implementation::In_Place_Storage<AudioValueRange>::dispatch;
LABEL_41:
          CFStringRef v39 = v21;
          goto LABEL_51;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRange>())
      {
        if (v14)
        {
          long long v37 = *(_OWORD *)v14;
          long long v38 = 0uLL;
          unint64_t v21 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
          goto LABEL_41;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
LABEL_50:
          CFStringRef v39 = 0;
          long long v37 = 0u;
          long long v38 = 0u;
LABEL_51:
          AMCP::swap((AMCP::Thing *)&v37, (AMCP::Thing *)a3, v13);
          if (v39) {
            ((void (*)(void, long long *, void, void))v39)(0, &v37, 0, 0);
          }
          return 0;
        }
        if (v14)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
          CFStringRef v41 = Mutable;
          CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"float minimum", 13, 0x8000100u, 0);
          CFStringRef v40 = v23;
          if (!v23)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(void *)&long long v37 = *(void *)v14;
          CFNumberRef v24 = CFNumberCreate(0, kCFNumberDoubleType, &v37);
          if (!v24)
          {
            CFStringRef v34 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v34, "Could not construct");
            __cxa_throw(v34, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v23, v24);
          CFRelease(v24);
          CFRelease(v23);
          CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"float maximum", 13, 0x8000100u, 0);
          CFStringRef v40 = v25;
          if (!v25)
          {
            CFStringRef v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v35, "Could not construct");
            __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          *(void *)&long long v37 = *(void *)(v14 + 8);
          CFNumberRef v26 = CFNumberCreate(0, kCFNumberDoubleType, &v37);
          if (!v26)
          {
            CFNumberRef v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v36, "Could not construct");
            __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v25, v26);
          CFRelease(v26);
          CFRelease(v25);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v37, Mutable);
          *((void *)&v37 + 1) = 0;
          long long v38 = 0uLL;
          CFStringRef v39 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_51;
        }
      }
      __assert_rtn("create_value_range_from", "Thing.h", 1563, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAACFDB4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

double AMCP::Thing::convert_to<AudioValueRange>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<AudioValueRange>();
  CFTypeID v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  double v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFTypeID v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFTypeID v4 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(double *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AudioValueRange>();
  memset(v16, 0, sizeof(v16));
  double v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    long long v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  int v6 = (double *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    CFTypeRef v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  double v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAD0008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[225];
}

BOOL AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      uint64_t result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      uint64_t result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      long long v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v27 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v27);
        long long v10 = (void (*)(uint64_t, uint64_t, void, long long *))v27;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      uint64_t v11 = *(__CFDictionary **)(a3 + 32);
      double v30 = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, void, __CFDictionary **))v11)(3, a3, 0, &v30);
        uint64_t v11 = v30;
      }
      if (v11 != (__CFDictionary *)v9)
      {
LABEL_22:
        uint64_t v15 = AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(a2);
        return v15 == AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v27 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
        CFTypeRef v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v27);
      }
      else
      {
        CFTypeRef v12 = 0;
      }
      *(void *)&long long v27 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
      unint64_t v21 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v27);
      return v12[1] == v21[1] && *v12 == *v21;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_36;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v27 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
        uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v27);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>())
      {
        if (v14)
        {
          *((void *)&v27 + 1) = 0;
          long long v28 = 0uLL;
          *(void *)&long long v27 = *(void *)v14;
          double v29 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
          goto LABEL_37;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        {
LABEL_36:
          double v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
LABEL_37:
          AMCP::swap((AMCP::Thing *)&v27, (AMCP::Thing *)a3, v13);
          if (v29) {
            ((void (*)(void, long long *, void, void))v29)(0, &v27, 0, 0);
          }
          return 0;
        }
        if (v14)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
          double v30 = Mutable;
          CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"u32 minimum", 11, 0x8000100u, 0);
          *(void *)&long long v27 = v17;
          if (!v17)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int valuePtr = *(_DWORD *)v14;
          CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v18)
          {
            CFNumberRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v24, "Could not construct");
            __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v17, v18);
          CFRelease(v18);
          CFRelease(v17);
          CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"u32 maximum", 11, 0x8000100u, 0);
          *(void *)&long long v27 = v19;
          if (!v19)
          {
            CFStringRef v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v25, "Could not construct");
            __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int valuePtr = *(_DWORD *)(v14 + 4);
          CFNumberRef v20 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v20)
          {
            CFNumberRef v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Could not construct");
            __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v19, v20);
          CFRelease(v20);
          CFRelease(v19);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)&v27, Mutable);
          *((void *)&v27 + 1) = 0;
          long long v28 = 0uLL;
          double v29 = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_37;
        }
      }
      __assert_rtn("create_min_max_u32_from", "Thing.h", 1502, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAAD0598(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15)
{
}

uint64_t AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int>>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
  CFTypeID v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  CFStringRef v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFTypeID v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(void *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int>>();
  memset(v16, 0, sizeof(v16));
  CFStringRef v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    long long v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  int v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    CFTypeRef v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAD07E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[223];
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<applesauce::CF::StringRef>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 4);
      std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]((void *)(a3 + 8), *(CFTypeRef *)(a2 + 8));
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(_DWORD *)(a3 + 4) = *(_DWORD *)(a2 + 4);
      *(void *)(a3 + 8) = *(void *)(a2 + 8);
      *(void *)(a2 + 8) = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
      uint64_t result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      v27[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, v27);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v27[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8) {
        goto LABEL_21;
      }
      long long v10 = *(__CFDictionary **)(a3 + 32);
      long long v28 = 0;
      if (v10)
      {
        ((void (*)(uint64_t, uint64_t, void, __CFDictionary **))v10)(3, a3, 0, &v28);
        long long v10 = v28;
      }
      if (v10 == (__CFDictionary *)v8)
      {
        if (*(void *)(a2 + 32))
        {
          v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
        }
        else
        {
          uint64_t v11 = 0;
        }
        uint64_t v21 = *(void *)(a3 + 32);
        if (v21)
        {
          v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
          uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, v27);
        }
        uint64_t result = 0;
        if (*(_DWORD *)v11 != *(_DWORD *)v21 || *(_DWORD *)(v11 + 4) != *(_DWORD *)(v21 + 4)) {
          return result;
        }
        if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v11 + 8), (const __CFString **)(v21 + 8)) == kCFCompareEqualTo)return 1; {
      }
        }
      else
      {
LABEL_21:
        AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>((uint64_t)v27, a2);
        AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>((uint64_t)&v28, a3);
        BOOL v14 = 0;
        if (v27[0] == v28) {
          BOOL v14 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v27[1], (const __CFString **)&cf) == kCFCompareEqualTo;
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v27[1]) {
          CFRelease(v27[1]);
        }
        if (v14) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        goto LABEL_42;
      }
      if (*(void *)(a2 + 32))
      {
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>())
      {
        if (v13)
        {
          memset(&v27[1], 0, 32);
          v27[0] = *(CFTypeRef *)v13;
          std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100](&v27[1], *(CFTypeRef *)(v13 + 8));
          v27[4] = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::dispatch;
          goto LABEL_43;
        }
LABEL_54:
        __assert_rtn("create_selector_item_from", "Thing.h", 1366, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      {
        if (v13)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
          long long v28 = Mutable;
          CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"item id", 7, 0x8000100u, 0);
          v27[0] = v16;
          if (!v16)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int valuePtr = *(_DWORD *)v13;
          CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v17)
          {
            CFStringRef v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v23, "Could not construct");
            __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v16, v17);
          CFRelease(v17);
          CFRelease(v16);
          CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"kind", 4, 0x8000100u, 0);
          v27[0] = v18;
          if (!v18)
          {
            CFNumberRef v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v24, "Could not construct");
            __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int valuePtr = *(_DWORD *)(v13 + 4);
          CFNumberRef v19 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!v19)
          {
            CFStringRef v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v25, "Could not construct");
            __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v18, v19);
          CFRelease(v19);
          CFRelease(v18);
          CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)"name", 4, 0x8000100u, 0);
          if (!v20)
          {
            CFNumberRef v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Could not construct");
            __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v20, *(const void **)(v13 + 8));
          CFRelease(v20);
          mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)v27, Mutable);
          memset(&v27[1], 0, 24);
          v27[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_43;
        }
        goto LABEL_54;
      }
LABEL_42:
      memset(v27, 0, sizeof(v27));
LABEL_43:
      AMCP::swap((AMCP::Thing *)v27, (AMCP::Thing *)a3, v12);
      if (v27[4]) {
        ((void (*)(void, CFTypeRef *, void, void))v27[4])(0, v27, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAD0F1C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::destruct(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void *std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100](void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void *AMCP::Thing::convert_to<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFStringRef v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *(_DWORD *)a1 = *(_DWORD *)v6;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(v6 + 4);
      return std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]((void *)(a1 + 8), *(CFTypeRef *)(v6 + 8));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>();
  memset(v17, 0, sizeof(v17));
  CFStringRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    BOOL v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *(_DWORD *)a1 = *(_DWORD *)v8;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(v8 + 4);
  double result = std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]((void *)(a1 + 8), *(CFTypeRef *)(v8 + 8));
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAD1248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>::~tuple(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 8);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionarySetValue(a1, a2, a3);
  }
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  return a1;
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      goto LABEL_4;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
LABEL_4:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      double result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf1[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, cf1);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf1[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8) {
        goto LABEL_19;
      }
      long long v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      CFTypeRef cf2 = 0;
      if (v10)
      {
        v10(3, a3, 0, &cf2);
        long long v10 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf2;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8)
      {
LABEL_19:
        AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(cf1, a2);
        AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(&cf2, a3);
        CFTypeRef v13 = cf1[0];
        CFTypeRef v14 = cf2;
        BOOL v15 = ((unint64_t)cf1[0] | (unint64_t)cf2) == 0;
        if (cf1[0] && cf2)
        {
          BOOL v15 = CFEqual(cf1[0], cf2) != 0;
        }
        else if (!cf2)
        {
          goto LABEL_24;
        }
        CFRelease(v14);
LABEL_24:
        if (v13) {
          CFRelease(v13);
        }
        return v15;
      }
      if (*(void *)(a2 + 32))
      {
        cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
        uint64_t v11 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf1);
      }
      else
      {
        uint64_t v11 = 0;
      }
      cf1[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      uint64_t v16 = (const void **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf1);
      unint64_t v17 = (unint64_t)*v11;
      unint64_t v18 = (unint64_t)*v16;
      if (*v11 && v18) {
        return CFEqual((CFTypeRef)v17, (CFTypeRef)v18) != 0;
      }
      return !(v17 | v18);
    case 6:
      AMCP::Implementation::create_thing_from<applesauce::CF::ArrayRef>((uint64_t)cf1, a2, a4);
      AMCP::swap((AMCP::Thing *)cf1, (AMCP::Thing *)a3, v12);
      if (v20) {
        v20(0, cf1, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAD1590(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  return a1;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFStringRef v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    double result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        double result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
  memset(v17, 0, sizeof(v17));
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  double result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    CFTypeRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    double result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAD1814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_thing_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, void *a3)
{
  CFTypeRef v3 = a3;
  if (*a3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
    || *v3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
  {
    goto LABEL_27;
  }
  if (*(void *)(a2 + 32))
  {
    cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    uint64_t v5 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (*v3 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
  {
    if ((*v3 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
       || *v3 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
       || *v3 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
       || *v3 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
       || *v3 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
       || *v3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
       || *v3 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
      && !v5)
    {
LABEL_311:
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    }
LABEL_27:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    goto LABEL_28;
  }
  if (!v5) {
    goto LABEL_311;
  }
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&cf, *v5);
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(a1, &cf);
  if (cf.__first_) {
    CFRelease(cf.__first_);
  }
  if (*(void *)(a1 + 32)) {
    return;
  }
LABEL_28:
  if (*v3 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
    && *v3 != AMCP::Implementation::get_type_marker<std::vector<char>>()
    && *v3 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
    && *v3 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
    && *v3 != AMCP::Implementation::get_type_marker<std::vector<short>>()
    && *v3 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
    && *v3 != AMCP::Implementation::get_type_marker<std::vector<int>>()
    && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(v3))
  {
LABEL_322:
    memset(&cf, 0, sizeof(cf));
    goto LABEL_193;
  }
  if (*(void *)(a2 + 32))
  {
    cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    CFTypeRef v7 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  if (*v3 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
  {
    if (v7)
    {
      if (*v7)
      {
        CFIndex Count = CFArrayGetCount(*v7);
        memset(&v167, 0, sizeof(v167));
        std::vector<BOOL>::reserve((uint64_t)&v167, Count);
        if (Count)
        {
          for (unint64_t i = 0; i != Count; ++i)
          {
            if (!*v7)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, i);
            if (LOBYTE(cf.__begin_))
            {
              if (!cf.__first_)
              {
                uint64_t v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v132, "Could not construct");
                __cxa_throw(v132, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              BOOL v10 = applesauce::CF::convert_to<BOOL,0>((const __CFNumber *)cf.__first_);
              std::vector<std::string>::pointer end = v167.__end_;
              if (v167.__end_ == (std::vector<std::string>::pointer)((uint64_t)v167.__end_cap_.__value_ << 6))
              {
                if ((uint64_t)v167.__end_->__r_.__value_.__r.__words + 1 < 0) {
                  std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                }
                uint64_t v12 = (uint64_t)v167.__end_cap_.__value_ << 7;
                if ((uint64_t)v167.__end_cap_.__value_ << 7 <= ((unint64_t)v167.__end_ & 0xFFFFFFFFFFFFFFC0)
                                                             + 64)
                  uint64_t v12 = ((unint64_t)v167.__end_ & 0xFFFFFFFFFFFFFFC0) + 64;
                if (v167.__end_ <= (std::vector<std::string>::pointer)0x3FFFFFFFFFFFFFFELL) {
                  unint64_t v13 = v12;
                }
                else {
                  unint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
                }
                std::vector<BOOL>::reserve((uint64_t)&v167, v13);
                std::vector<std::string>::pointer end = v167.__end_;
              }
              v167.__end_ = (std::vector<std::string>::pointer)((char *)&end->__r_.__value_.__l.__data_ + 1);
              unint64_t v14 = (unint64_t)end >> 6;
              uint64_t v15 = 1 << (char)end;
              if (v10) {
                std::string::size_type v16 = v167.__begin_->__r_.__value_.__r.__words[v14] | v15;
              }
              else {
                std::string::size_type v16 = v167.__begin_->__r_.__value_.__r.__words[v14] & ~v15;
              }
              v167.__begin_->__r_.__value_.__r.__words[v14] = v16;
            }
            std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
          }
        }
        memset(&cf, 0, sizeof(cf));
        std::vector<BOOL>::vector(&cf, (uint64_t)&v167);
        cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
        std::vector<std::string>::pointer begin = v167.__begin_;
        if (!v167.__begin_) {
          goto LABEL_193;
        }
LABEL_192:
        operator delete(begin);
        goto LABEL_193;
      }
LABEL_361:
      __int16 v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v154, "Could not construct");
      __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_310:
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v155 = a1;
  __int16 v156 = v3;
  if (*v3 == AMCP::Implementation::get_type_marker<std::vector<char>>())
  {
    if (!v7) {
      goto LABEL_310;
    }
    if (!*v7) {
      goto LABEL_361;
    }
    CFIndex v18 = CFArrayGetCount(*v7);
    CFIndex v19 = v18;
    if (v18)
    {
      if (v18 < 0) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      CFStringRef v20 = (std::string *)operator new(v18);
      unint64_t v21 = 0;
      CFNumberRef v22 = (std::string *)((char *)v20 + v19);
      CFStringRef v23 = v20;
      while (1)
      {
        if (!*v7)
        {
          uint64_t v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v133, "Could not construct");
          __cxa_throw(v133, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v21);
        if (LOBYTE(cf.__begin_))
        {
          if (!cf.__first_)
          {
            uint64_t v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v134, "Could not construct");
            __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          std::string::value_type v24 = applesauce::CF::convert_to<char,0>((const __CFNumber *)cf.__first_);
          std::string::value_type v25 = v24;
          if (v20 >= v22)
          {
            int64_t v27 = (char *)v20 - (char *)v23;
            uint64_t v28 = (char *)v20 - (char *)v23 + 1;
            if (v28 < 0) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if (2 * ((char *)v22 - (char *)v23) > (unint64_t)v28) {
              uint64_t v28 = 2 * ((char *)v22 - (char *)v23);
            }
            if ((unint64_t)((char *)v22 - (char *)v23) >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v29 = v28;
            }
            if (v29) {
              double v30 = (std::string *)operator new(v29);
            }
            else {
              double v30 = 0;
            }
            double v31 = (std::string *)((char *)v30 + v27);
            long long v32 = (char *)v30 + v27;
            *long long v32 = v25;
            uint64_t v26 = (uint64_t)(v32 + 1);
            if (v20 != v23)
            {
              long long v33 = (char *)v20 + ~(unint64_t)v23;
              do
              {
                char v34 = HIBYTE(v20[-1].__r_.__value_.__r.__words[2]);
                CFStringRef v20 = (std::string *)((char *)v20 - 1);
                (v33--)[(void)v30] = v34;
              }
              while (v20 != v23);
              double v31 = v30;
            }
            CFNumberRef v22 = (std::string *)((char *)v30 + v29);
            if (v23) {
              operator delete(v23);
            }
            CFStringRef v23 = v31;
            goto LABEL_90;
          }
          v20->__r_.__value_.__s.__data_[0] = v24;
          CFStringRef v20 = (std::string *)((char *)v20 + 1);
        }
        uint64_t v26 = (uint64_t)v20;
LABEL_90:
        std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
        ++v21;
        CFStringRef v20 = (std::string *)v26;
        if (v21 == v19) {
          goto LABEL_153;
        }
      }
    }
    CFStringRef v23 = 0;
    uint64_t v26 = 0;
LABEL_153:
    memset(&cf, 0, sizeof(cf));
    std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&cf, v23, v26, v26 - (void)v23);
    uint64_t v67 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_190:
    cf.__end_cap_.__value_ = (std::allocator<std::string> *)v67;
    a1 = v155;
    CFTypeRef v3 = v156;
    if (!v23) {
      goto LABEL_193;
    }
    std::vector<std::string>::pointer begin = v23;
    goto LABEL_192;
  }
  if (*v3 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
  {
    if (!v7) {
      goto LABEL_310;
    }
    if (!*v7) {
      goto LABEL_361;
    }
    CFIndex v35 = CFArrayGetCount(*v7);
    CFIndex v36 = v35;
    if (!v35)
    {
      CFStringRef v23 = 0;
      uint64_t v42 = 0;
LABEL_185:
      memset(&cf, 0, sizeof(cf));
      std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&cf, v23, v42, v42 - (void)v23);
      uint64_t v67 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      goto LABEL_190;
    }
    if (v35 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    long long v37 = (std::string *)operator new(v35);
    unint64_t v38 = 0;
    CFStringRef v39 = (std::string *)((char *)v37 + v36);
    CFStringRef v23 = v37;
    while (1)
    {
      if (!*v7)
      {
        uint64_t v136 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v136, "Could not construct");
        __cxa_throw(v136, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v38);
      if (LOBYTE(cf.__begin_))
      {
        if (!cf.__first_)
        {
          v137 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v137, "Could not construct");
          __cxa_throw(v137, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        std::string::value_type v40 = applesauce::CF::convert_to<signed char,0>((const __CFNumber *)cf.__first_);
        std::string::value_type v41 = v40;
        if (v37 >= v39)
        {
          int64_t v43 = (char *)v37 - (char *)v23;
          uint64_t v44 = (char *)v37 - (char *)v23 + 1;
          if (v44 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (2 * ((char *)v39 - (char *)v23) > (unint64_t)v44) {
            uint64_t v44 = 2 * ((char *)v39 - (char *)v23);
          }
          if ((unint64_t)((char *)v39 - (char *)v23) >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v45 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v45 = v44;
          }
          if (v45) {
            CFStringRef v46 = (std::string *)operator new(v45);
          }
          else {
            CFStringRef v46 = 0;
          }
          CFStringRef v47 = (std::string *)((char *)v46 + v43);
          uint64_t v48 = (char *)v46 + v43;
          *uint64_t v48 = v41;
          uint64_t v42 = (uint64_t)(v48 + 1);
          if (v37 != v23)
          {
            uint64_t v49 = (char *)v37 + ~(unint64_t)v23;
            do
            {
              char v50 = HIBYTE(v37[-1].__r_.__value_.__r.__words[2]);
              long long v37 = (std::string *)((char *)v37 - 1);
              (v49--)[(void)v46] = v50;
            }
            while (v37 != v23);
            CFStringRef v47 = v46;
          }
          CFStringRef v39 = (std::string *)((char *)v46 + v45);
          if (v23) {
            operator delete(v23);
          }
          CFStringRef v23 = v47;
          goto LABEL_120;
        }
        v37->__r_.__value_.__s.__data_[0] = v40;
        long long v37 = (std::string *)((char *)v37 + 1);
      }
      uint64_t v42 = (uint64_t)v37;
LABEL_120:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      ++v38;
      long long v37 = (std::string *)v42;
      if (v38 == v36) {
        goto LABEL_185;
      }
    }
  }
  if (*v3 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
  {
    if (!v7) {
      goto LABEL_310;
    }
    if (!*v7) {
      goto LABEL_361;
    }
    CFIndex v51 = CFArrayGetCount(*v7);
    CFIndex v52 = v51;
    if (!v51)
    {
      CFStringRef v23 = 0;
      uint64_t v58 = 0;
LABEL_189:
      memset(&cf, 0, sizeof(cf));
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&cf, v23, v58, v58 - (void)v23);
      uint64_t v67 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      goto LABEL_190;
    }
    if (v51 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    long long v53 = (std::string *)operator new(v51);
    unint64_t v54 = 0;
    uint64_t v55 = (std::string *)((char *)v53 + v52);
    CFStringRef v23 = v53;
    while (1)
    {
      if (!*v7)
      {
        v138 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v138, "Could not construct");
        __cxa_throw(v138, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v54);
      if (LOBYTE(cf.__begin_))
      {
        if (!cf.__first_)
        {
          int v140 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v140, "Could not construct");
          __cxa_throw(v140, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        std::string::value_type v56 = applesauce::CF::convert_to<unsigned char,0>((const __CFNumber *)cf.__first_);
        std::string::value_type v57 = v56;
        if (v53 >= v55)
        {
          int64_t v59 = (char *)v53 - (char *)v23;
          uint64_t v60 = (char *)v53 - (char *)v23 + 1;
          if (v60 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (2 * ((char *)v55 - (char *)v23) > (unint64_t)v60) {
            uint64_t v60 = 2 * ((char *)v55 - (char *)v23);
          }
          if ((unint64_t)((char *)v55 - (char *)v23) >= 0x3FFFFFFFFFFFFFFFLL) {
            size_t v61 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            size_t v61 = v60;
          }
          if (v61) {
            unint64_t v62 = (std::string *)operator new(v61);
          }
          else {
            unint64_t v62 = 0;
          }
          unint64_t v63 = (std::string *)((char *)v62 + v59);
          uint64_t v64 = (char *)v62 + v59;
          *uint64_t v64 = v57;
          uint64_t v58 = (uint64_t)(v64 + 1);
          if (v53 != v23)
          {
            std::string::size_type v65 = (char *)v53 + ~(unint64_t)v23;
            do
            {
              char v66 = HIBYTE(v53[-1].__r_.__value_.__r.__words[2]);
              long long v53 = (std::string *)((char *)v53 - 1);
              (v65--)[(void)v62] = v66;
            }
            while (v53 != v23);
            unint64_t v63 = v62;
          }
          uint64_t v55 = (std::string *)((char *)v62 + v61);
          if (v23) {
            operator delete(v23);
          }
          CFStringRef v23 = v63;
          goto LABEL_150;
        }
        v53->__r_.__value_.__s.__data_[0] = v56;
        long long v53 = (std::string *)((char *)v53 + 1);
      }
      uint64_t v58 = (uint64_t)v53;
LABEL_150:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      ++v54;
      long long v53 = (std::string *)v58;
      if (v54 == v52) {
        goto LABEL_189;
      }
    }
  }
  if (*v3 != AMCP::Implementation::get_type_marker<std::vector<short>>())
  {
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned short>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<int>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<int>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned int>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long long>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long long>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<float>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<float>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<double>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<double>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long double>>((uint64_t)&cf, v7);
      goto LABEL_193;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef>((uint64_t)&cf, (CFTypeRef *)v7);
      goto LABEL_193;
    }
    goto LABEL_322;
  }
  if (!v7) {
    goto LABEL_310;
  }
  if (!*v7) {
    goto LABEL_361;
  }
  CFIndex v68 = CFArrayGetCount(*v7);
  CFIndex v69 = v68;
  if (v68)
  {
    if (v68 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v70 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v68);
    unint64_t v71 = 0;
    unint64_t v72 = v70;
    long long v74 = (std::string *)((char *)v70 + 2 * v73);
    while (1)
    {
      if (!*v7)
      {
        uint64_t v147 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v147, "Could not construct");
        __cxa_throw(v147, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&cf, *v7, v71);
      if (LOBYTE(cf.__begin_))
      {
        if (!cf.__first_)
        {
          v150 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v150, "Could not construct");
          __cxa_throw(v150, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        __int16 v75 = applesauce::CF::convert_to<short,0>((const __CFNumber *)cf.__first_);
        __int16 v76 = v75;
        if (v70 >= v74)
        {
          uint64_t v78 = (char *)v70 - (char *)v72;
          if ((char *)v70 - (char *)v72 <= -3) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v79 = v78 >> 1;
          if ((char *)v74 - (char *)v72 <= (unint64_t)((v78 >> 1) + 1)) {
            uint64_t v80 = v79 + 1;
          }
          else {
            uint64_t v80 = (char *)v74 - (char *)v72;
          }
          if ((unint64_t)((char *)v74 - (char *)v72) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v81 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v81 = v80;
          }
          if (v81) {
            uint64_t v81 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v81);
          }
          else {
            uint64_t v82 = 0;
          }
          int v83 = (std::string *)(v81 + 2 * v79);
          LOWORD(v83->__r_.__value_.__l.__data_) = v76;
          uint64_t v77 = (uint64_t)v83->__r_.__value_.__r.__words + 2;
          while (v70 != v72)
          {
            __int16 v84 = HIWORD(v70[-1].__r_.__value_.__r.__words[2]);
            unint64_t v70 = (std::string *)((char *)v70 - 2);
            HIWORD(v83[-1].__r_.__value_.__r.__words[2]) = v84;
            int v83 = (std::string *)((char *)v83 - 2);
          }
          long long v74 = (std::string *)(v81 + 2 * v82);
          if (v72) {
            operator delete(v72);
          }
          unint64_t v72 = v83;
          goto LABEL_182;
        }
        LOWORD(v70->__r_.__value_.__l.__data_) = v75;
        unint64_t v70 = (std::string *)((char *)v70 + 2);
      }
      uint64_t v77 = (uint64_t)v70;
LABEL_182:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
      ++v71;
      unint64_t v70 = (std::string *)v77;
      if (v71 == v69) {
        goto LABEL_298;
      }
    }
  }
  uint64_t v77 = 0;
  unint64_t v72 = 0;
LABEL_298:
  memset(&cf, 0, sizeof(cf));
  std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&cf, v72, v77, (v77 - (uint64_t)v72) >> 1);
  cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
  a1 = v155;
  CFTypeRef v3 = v156;
  if (v72)
  {
    std::vector<std::string>::pointer begin = v72;
    goto LABEL_192;
  }
LABEL_193:
  AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v6);
  if (cf.__end_cap_.__value_) {
    ((void (*)(void, std::__split_buffer<std::string> *, void, void))cf.__end_cap_.__value_)(0, &cf, 0, 0);
  }
  if (*(void *)(a1 + 32)) {
    return;
  }
  if (*v3 != AMCP::Implementation::get_type_marker<std::vector<std::string>>()
    && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_231;
  }
  if (*(void *)(a2 + 32))
  {
    cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    int v86 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
  }
  else
  {
    int v86 = 0;
  }
  if (*v3 != AMCP::Implementation::get_type_marker<std::vector<std::string>>())
  {
    if (*v3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (v86)
      {
        memset(&cf, 0, sizeof(cf));
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>((uint64_t)&cf, v86);
        goto LABEL_234;
      }
LABEL_316:
      __assert_rtn("create_vector_of_strings_from", "Thing.h", 1300, "in_value_ptr != nullptr");
    }
LABEL_231:
    memset(&cf, 0, sizeof(cf));
    goto LABEL_234;
  }
  if (!v86) {
    goto LABEL_316;
  }
  if (!*v86)
  {
    long long v152 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v152, "Could not construct");
    __cxa_throw(v152, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t v87 = CFArrayGetCount((CFArrayRef)*v86);
  unint64_t v88 = v87;
  memset(&v167, 0, sizeof(v167));
  if (v87)
  {
    if (v87 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v89 = a1;
    cf.__end_cap_.__value_ = (std::allocator<std::string> *)&v167.__end_cap_;
    cf.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v87);
    cf.__begin_ = cf.__first_;
    cf.__end_ = cf.__first_;
    cf.__end_cap_.__value_ = &cf.__first_[v90];
    std::vector<std::string>::__swap_out_circular_buffer(&v167, &cf);
    std::__split_buffer<std::string>::~__split_buffer(&cf);
    unint64_t v91 = 0;
    while (1)
    {
      CFArrayRef v92 = (const __CFArray *)*v86;
      if (!*v86)
      {
        unint64_t v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v135, "Could not construct");
        __cxa_throw(v135, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (CFArrayGetCount((CFArrayRef)*v86) > v91)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v92, v91);
        CFStringRef v94 = ValueAtIndex;
        if (ValueAtIndex)
        {
          CFRetain(ValueAtIndex);
          CFTypeID v95 = CFGetTypeID(v94);
          if (v95 == CFStringGetTypeID())
          {
            CFStringRef v165 = v94;
            char v166 = 1;
            applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v94);
            std::vector<std::string>::pointer v96 = v167.__end_;
            if (v167.__end_ >= v167.__end_cap_.__value_)
            {
              unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)v167.__end_ - (char *)v167.__begin_) >> 3);
              unint64_t v99 = v98 + 1;
              if (v98 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v167.__end_cap_.__value_ - (char *)v167.__begin_) >> 3) > v99) {
                unint64_t v99 = 0x5555555555555556 * (((char *)v167.__end_cap_.__value_ - (char *)v167.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v167.__end_cap_.__value_ - (char *)v167.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v100 = v99;
              }
              cf.__end_cap_.__value_ = (std::allocator<std::string> *)&v167.__end_cap_;
              if (v100) {
                unint64_t v100 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v100);
              }
              else {
                uint64_t v101 = 0;
              }
              uint64_t v102 = (std::string *)(v100 + 24 * v98);
              cf.__first_ = (std::__split_buffer<std::string>::pointer)v100;
              cf.__begin_ = v102;
              cf.__end_cap_.__value_ = (std::string *)(v100 + 24 * v101);
              long long v103 = *(_OWORD *)__p;
              v102->__r_.__value_.__r.__words[2] = v159;
              *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
              __p[1] = 0;
              std::string::size_type v159 = 0;
              __p[0] = 0;
              cf.__end_ = v102 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v167, &cf);
              int v104 = v167.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&cf);
              v167.__end_ = v104;
              if (SHIBYTE(v159) < 0) {
                operator delete(__p[0]);
              }
            }
            else
            {
              long long v97 = *(_OWORD *)__p;
              v167.__end_->__r_.__value_.__r.__words[2] = v159;
              *(_OWORD *)&v96->__r_.__value_.__l.__data_ = v97;
              v167.__end_ = v96 + 1;
            }
            goto LABEL_215;
          }
          CFRelease(v94);
        }
      }
      LOBYTE(v165) = 0;
      char v166 = 0;
LABEL_215:
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v165);
      if (v88 == ++v91)
      {
        unsigned int v105 = (long long *)v167.__begin_;
        unsigned int v106 = (long long *)v167.__end_;
        goto LABEL_233;
      }
    }
  }
  uint64_t v89 = a1;
  unsigned int v106 = 0;
  unsigned int v105 = 0;
LABEL_233:
  memset(&cf, 0, sizeof(cf));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&cf, v105, v106, 0xAAAAAAAAAAAAAAABLL * (((char *)v106 - (char *)v105) >> 3));
  cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
  __p[0] = &v167;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  a1 = v89;
LABEL_234:
  AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v85);
  if (cf.__end_cap_.__value_) {
    ((void (*)(void, std::__split_buffer<std::string> *, void, void))cf.__end_cap_.__value_)(0, &cf, 0, 0);
  }
  if (!*(void *)(a1 + 32))
  {
    if (*v3 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
      && *v3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      goto LABEL_254;
    }
    if (*(void *)(a2 + 32))
    {
      cf.__first_ = (std::__split_buffer<std::string>::pointer)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
      unsigned int v108 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, std::__split_buffer<std::string> *))(a2 + 32))(4, a2, 0, &cf);
    }
    else
    {
      unsigned int v108 = 0;
    }
    if (*v3 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>())
    {
      if (v108)
      {
        if (!*v108)
        {
          uint64_t v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v153, "Could not construct");
          __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v109 = CFArrayGetCount(*v108);
        unint64_t v110 = v109;
        memset(&v167, 0, sizeof(v167));
        if (v109)
        {
          if (v109 >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          cf.__end_cap_.__value_ = (std::allocator<std::string> *)&v167.__end_cap_;
          uint64_t v111 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v109);
          unsigned int value = (std::string *)((char *)v111 + 16 * v112);
          cf.__end_ = v111;
          cf.__end_cap_.__value_ = value;
          std::vector<std::string>::pointer v115 = v167.__begin_;
          std::vector<std::string>::pointer v114 = v167.__end_;
          if (v167.__end_ == v167.__begin_)
          {
            int64x2_t v118 = vdupq_n_s64((unint64_t)v167.__end_);
            long long v116 = v111;
          }
          else
          {
            long long v116 = v111;
            do
            {
              int v117 = v114[-1].__r_.__value_.__r.__words[1];
              std::vector<std::string>::pointer v114 = (std::vector<std::string>::pointer)((char *)v114 - 16);
              LODWORD(v116[-1].__r_.__value_.__r.__words[1]) = v117;
              long long v116 = (std::string *)((char *)v116 - 16);
              HIDWORD(v116->__r_.__value_.__r.__words[0]) = HIDWORD(v114->__r_.__value_.__r.__words[0]);
              v116->__r_.__value_.__l.__size_ = v114->__r_.__value_.__l.__size_;
              v114->__r_.__value_.__l.__size_ = 0;
            }
            while (v114 != v115);
            int64x2_t v118 = *(int64x2_t *)&v167.__begin_;
            unsigned int value = cf.__end_cap_.__value_;
            uint64_t v111 = cf.__end_;
          }
          v167.__begin_ = v116;
          v167.__end_ = v111;
          *(int64x2_t *)&cf.__begin_ = v118;
          uint64_t v119 = v167.__end_cap_.__value_;
          v167.__end_cap_.__value_ = value;
          cf.__end_cap_.__value_ = v119;
          cf.__first_ = (std::__split_buffer<std::string>::pointer)v118.i64[0];
          std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)&cf);
          unint64_t v120 = 0;
          do
          {
            if (!*v108)
            {
              v139 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v139, "Could not construct");
              __cxa_throw(v139, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(&cf, *v108, v120);
            if (LOBYTE(cf.__begin_))
            {
              if (!cf.__first_)
              {
                long long v146 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v146, "Could not construct");
                __cxa_throw(v146, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFStringRef v121 = CFStringCreateWithBytes(0, (const UInt8 *)"item id", 7, 0x8000100u, 0);
              if (!v121)
              {
                uint64_t v142 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v142, "Could not construct");
                __cxa_throw(v142, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(__p, (CFDictionaryRef)cf.__first_, v121);
              CFRelease(v121);
              if (!cf.__first_)
              {
                long long v143 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v143, "Could not construct");
                __cxa_throw(v143, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFStringRef v122 = CFStringCreateWithBytes(0, (const UInt8 *)"kind", 4, 0x8000100u, 0);
              if (!v122)
              {
                long long v144 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v144, "Could not construct");
                __cxa_throw(v144, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v165, (CFDictionaryRef)cf.__first_, v122);
              CFRelease(v122);
              if (!cf.__first_)
              {
                uint64_t v145 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v145, "Could not construct");
                __cxa_throw(v145, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFStringRef v123 = CFStringCreateWithBytes(0, (const UInt8 *)"name", 4, 0x8000100u, 0);
              if (!v123)
              {
                uint64_t v141 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v141, "Could not construct");
                __cxa_throw(v141, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v163, (CFDictionaryRef)cf.__first_, v123);
              CFRelease(v123);
              if (LOBYTE(__p[1]))
              {
                if (!__p[0])
                {
                  long long v149 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v149, "Could not construct");
                  __cxa_throw(v149, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                int v124 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)__p[0]);
              }
              else
              {
                int v124 = 0;
              }
              int v162 = v124;
              if (v166)
              {
                if (!v165)
                {
                  long long v148 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v148, "Could not construct");
                  __cxa_throw(v148, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                int v125 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v165);
              }
              else
              {
                int v125 = 0;
              }
              int v161 = v125;
              if (v164)
              {
                long long v126 = v163;
                if (v163) {
                  CFRetain(v163);
                }
                CFTypeRef v160 = v126;
              }
              else
              {
                long long v126 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
                CFTypeRef v160 = v126;
                if (!v126)
                {
                  v151 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v151, "Could not construct");
                  __cxa_throw(v151, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
              }
              std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>((uint64_t *)&v167, &v162, &v161, &v160);
              if (v126) {
                CFRelease(v126);
              }
              std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v163);
              std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v165);
              std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)__p);
            }
            std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
            ++v120;
          }
          while (v110 != v120);
        }
        memset(&cf, 0, sizeof(cf));
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&cf, (uint64_t)v167.__begin_, (uint64_t)v167.__end_, ((char *)v167.__end_ - (char *)v167.__begin_) >> 4);
        cf.__end_cap_.__value_ = (std::allocator<std::string> *)AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
        __p[0] = &v167;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        goto LABEL_285;
      }
LABEL_319:
      __assert_rtn("create_vector_of_selector_items_from", "Thing.h", 1426, "in_value_ptr != nullptr");
    }
    if (*v3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (!v108) {
        goto LABEL_319;
      }
      memset(&cf, 0, sizeof(cf));
      AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>((uint64_t)&cf, (CFTypeRef *)v108);
    }
    else
    {
LABEL_254:
      memset(&cf, 0, sizeof(cf));
    }
LABEL_285:
    AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v107);
    if (cf.__end_cap_.__value_) {
      ((void (*)(void, std::__split_buffer<std::string> *, void, void))cf.__end_cap_.__value_)(0, &cf, 0, 0);
    }
    if (!*(void *)(a1 + 32))
    {
      AMCP::Implementation::create_vector_of_asbds_from<applesauce::CF::ArrayRef>((uint64_t)&cf, a2, v3);
      AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v127);
      if (cf.__end_cap_.__value_) {
        ((void (*)(void, std::__split_buffer<std::string> *, void, void))cf.__end_cap_.__value_)(0, &cf, 0, 0);
      }
      if (!*(void *)(a1 + 32))
      {
        AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef>((uint64_t)&cf, a2, v3);
        AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v128);
        if (cf.__end_cap_.__value_) {
          ((void (*)(void, std::__split_buffer<std::string> *, void, void))cf.__end_cap_.__value_)(0, &cf, 0, 0);
        }
        if (!*(void *)(a1 + 32))
        {
          AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef>((uint64_t)&cf, a2, v3);
          AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v129);
          AMCP::Thing::~Thing((AMCP::Thing *)&cf);
          if (!*(void *)(a1 + 32))
          {
            AMCP::Implementation::create_value_range_list_from<applesauce::CF::ArrayRef>((uint64_t)&cf, a2, v3);
            AMCP::swap((AMCP::Thing *)&cf, (AMCP::Thing *)a1, v130);
            AMCP::Thing::~Thing((AMCP::Thing *)&cf);
          }
        }
      }
    }
  }
}

void sub_1BAAD3210(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  __cxa_free_exception(v28);
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_vector_of_asbds_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_186;
  }
  if (*(void *)(a2 + 32))
  {
    CFDictionaryRef v154 = (const __CFDictionary *)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    v137 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, const __CFDictionary **))(a2 + 32))(4, a2, 0, &v154);
  }
  else
  {
    v137 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
  {
    if (v137)
    {
      if (*v137)
      {
        unint64_t Count = CFArrayGetCount(*v137);
        unint64_t v6 = Count;
        if (Count)
        {
          if (Count > 0x666666666666666) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          std::string __p = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(Count);
          unint64_t v142 = 0;
          v138 = &__p[40 * v7];
          unint64_t v8 = (unint64_t)__p;
          unint64_t v136 = v6;
          while (1)
          {
            CFArrayRef v9 = *v137;
            if (!*v137)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFTypeRef cf = 0;
            applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v154, v9, v142, &cf);
            if (cf) {
              CFRelease(cf);
            }
            CFDictionaryRef v10 = v154;
            if (!v154)
            {
              int v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v83, "Could not construct");
              __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
            CFTypeRef v152 = v11;
            if (!v11)
            {
              __int16 v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v84, "Could not construct");
              __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(valuePtr) = 0;
            CFTypeRef v151 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v151)
            {
              int v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v85, "Could not construct");
              __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v10, v11, &v151);
            if (v151) {
              CFRelease(v151);
            }
            CFRelease(v11);
            CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
            CFTypeRef v151 = v12;
            if (!v12)
            {
              int v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v86, "Could not construct");
              __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v149) = 0;
            CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v149);
            if (!valuePtr)
            {
              unint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v87, "Could not construct");
              __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v152, v10, v12, &valuePtr);
            if (valuePtr) {
              CFRelease(valuePtr);
            }
            CFRelease(v12);
            CFNumberRef v13 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
            CFNumberRef valuePtr = v13;
            if (!v13)
            {
              unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v88, "Could not construct");
              __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v148) = 0;
            CFTypeRef v149 = CFNumberCreate(0, kCFNumberIntType, &v148);
            if (!v149)
            {
              uint64_t v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v89, "Could not construct");
              __cxa_throw(v89, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v151, v10, v13, &v149);
            if (v149) {
              CFRelease(v149);
            }
            CFRelease(v13);
            CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
            CFTypeRef v149 = v14;
            if (!v14)
            {
              uint64_t v90 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v90, "Could not construct");
              __cxa_throw(v90, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v147) = 0;
            CFTypeRef v148 = CFNumberCreate(0, kCFNumberIntType, &v147);
            if (!v148)
            {
              unint64_t v91 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v91, "Could not construct");
              __cxa_throw(v91, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v10, v14, &v148);
            if (v148) {
              CFRelease(v148);
            }
            CFRelease(v14);
            CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
            CFTypeRef v148 = v15;
            if (!v15)
            {
              CFArrayRef v92 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v92, "Could not construct");
              __cxa_throw(v92, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v146) = 0;
            CFTypeRef v147 = CFNumberCreate(0, kCFNumberIntType, &v146);
            if (!v147)
            {
              CFTypeRef v93 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v93, "Could not construct");
              __cxa_throw(v93, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v149, v10, v15, &v147);
            if (v147) {
              CFRelease(v147);
            }
            CFRelease(v15);
            CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
            CFTypeRef v147 = v16;
            if (!v16)
            {
              CFStringRef v94 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v94, "Could not construct");
              __cxa_throw(v94, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v145) = 0;
            CFTypeRef v146 = CFNumberCreate(0, kCFNumberIntType, &v145);
            if (!v146)
            {
              CFTypeID v95 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v95, "Could not construct");
              __cxa_throw(v95, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v148, v10, v16, &v146);
            if (v146) {
              CFRelease(v146);
            }
            CFRelease(v16);
            CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
            CFTypeRef v146 = v17;
            if (!v17)
            {
              std::vector<std::string>::pointer v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v96, "Could not construct");
              __cxa_throw(v96, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            LODWORD(v144) = 0;
            CFTypeRef v145 = CFNumberCreate(0, kCFNumberIntType, &v144);
            if (!v145)
            {
              long long v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v97, "Could not construct");
              __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v147, v10, v17, &v145);
            if (v145) {
              CFRelease(v145);
            }
            CFRelease(v17);
            CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
            CFTypeRef v145 = v18;
            if (!v18)
            {
              unint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v98, "Could not construct");
              __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            v155[0] = 0;
            CFTypeRef v144 = CFNumberCreate(0, kCFNumberIntType, v155);
            if (!v144)
            {
              unint64_t v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v99, "Could not construct");
              __cxa_throw(v99, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v146, v10, v18, &v144);
            if (v144) {
              CFRelease(v144);
            }
            CFRelease(v18);
            if (!cf)
            {
              unint64_t v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v100, "Could not construct");
              __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            double v19 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
            if (!v152)
            {
              uint64_t v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v101, "Could not construct");
              __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            double v20 = v19;
            int v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v152);
            if (!v151)
            {
              uint64_t v102 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v102, "Could not construct");
              __cxa_throw(v102, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v151);
            if (!valuePtr)
            {
              long long v103 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v103, "Could not construct");
              __cxa_throw(v103, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
            if (!v149)
            {
              int v104 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v104, "Could not construct");
              __cxa_throw(v104, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v149);
            if (!v148)
            {
              unsigned int v105 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v105, "Could not construct");
              __cxa_throw(v105, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v148);
            if (!v147)
            {
              unsigned int v106 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v106, "Could not construct");
              __cxa_throw(v106, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v26 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v147);
            CFTypeRef v27 = v146;
            if (!v146)
            {
              unsigned int v107 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v107, "Could not construct");
              __cxa_throw(v107, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int v28 = v26;
            unsigned int v29 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v146);
            unsigned int v30 = v29;
            if (v8 < (unint64_t)v138)
            {
              *(double *)unint64_t v8 = v20;
              *(_DWORD *)(v8 + 8) = v21;
              *(_DWORD *)(v8 + 12) = v22;
              *(_DWORD *)(v8 + 16) = v23;
              *(_DWORD *)(v8 + 20) = v24;
              *(_DWORD *)(v8 + 24) = v25;
              *(_DWORD *)(v8 + 28) = v28;
              *(void *)(v8 + 32) = v29;
              v8 += 40;
              double v31 = __p;
LABEL_74:
              CFRelease(v27);
              goto LABEL_75;
            }
            unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)__p) >> 3) + 1;
            if (v32 > 0x666666666666666) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if (0x999999999999999ALL * ((v138 - __p) >> 3) > v32) {
              unint64_t v32 = 0x999999999999999ALL * ((v138 - __p) >> 3);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v138 - __p) >> 3) >= 0x333333333333333) {
              unint64_t v33 = 0x666666666666666;
            }
            else {
              unint64_t v33 = v32;
            }
            if (v33)
            {
              CFIndex v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v33);
            }
            else
            {
              CFIndex v35 = 0;
              uint64_t v34 = 0;
            }
            CFIndex v36 = &v35[8 * ((uint64_t)(v8 - (void)__p) >> 3)];
            *(double *)CFIndex v36 = v20;
            *((_DWORD *)v36 + 2) = v21;
            *((_DWORD *)v36 + 3) = v22;
            *((_DWORD *)v36 + 4) = v23;
            *((_DWORD *)v36 + 5) = v24;
            *((_DWORD *)v36 + 6) = v25;
            *((_DWORD *)v36 + 7) = v28;
            *((_DWORD *)v36 + 8) = v30;
            *((_DWORD *)v36 + 9) = 0;
            if ((char *)v8 == __p)
            {
              double v31 = &v35[8 * ((uint64_t)(v8 - (void)__p) >> 3)];
              unint64_t v38 = __p;
              if (__p) {
                goto LABEL_72;
              }
            }
            else
            {
              long long v37 = &v35[8 * ((uint64_t)(v8 - (void)__p) >> 3)];
              unint64_t v38 = __p;
              do
              {
                long long v39 = *(_OWORD *)(v8 - 40);
                long long v40 = *(_OWORD *)(v8 - 24);
                double v31 = v37 - 40;
                *((void *)v37 - 1) = *(void *)(v8 - 8);
                *(_OWORD *)(v37 - 24) = v40;
                *(_OWORD *)(v37 - 40) = v39;
                v8 -= 40;
                v37 -= 40;
              }
              while ((char *)v8 != __p);
              if (__p)
              {
LABEL_72:
                std::string::value_type v41 = v35;
                uint64_t v42 = v34;
                operator delete(v38);
                uint64_t v34 = v42;
                CFIndex v35 = v41;
                CFTypeRef v27 = v146;
              }
            }
            v138 = &v35[40 * v34];
            unint64_t v8 = (unint64_t)(v36 + 40);
            unint64_t v6 = v136;
            if (v27) {
              goto LABEL_74;
            }
LABEL_75:
            if (v147) {
              CFRelease(v147);
            }
            if (v148) {
              CFRelease(v148);
            }
            if (v149) {
              CFRelease(v149);
            }
            if (valuePtr) {
              CFRelease(valuePtr);
            }
            if (v151) {
              CFRelease(v151);
            }
            if (v152) {
              CFRelease(v152);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v154) {
              CFRelease(v154);
            }
            std::string __p = v31;
            if (++v142 == v6) {
              goto LABEL_188;
            }
          }
        }
        double v31 = 0;
        unint64_t v8 = 0;
LABEL_188:
        *(void *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>((void *)a1, v31, v8, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)v31) >> 3));
        *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
        if (v31)
        {
          uint64_t v81 = v31;
LABEL_193:
          operator delete(v81);
          return;
        }
        return;
      }
LABEL_252:
      uint64_t v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v134, "Could not construct");
      __cxa_throw(v134, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
LABEL_195:
    __assert_rtn("create_vector_of_asbds_from", "Thing.h", 1807, "in_value_ptr != nullptr");
  }
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (v137)
      {
        *(void *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, (CFTypeRef *)v137);
        return;
      }
      goto LABEL_195;
    }
LABEL_186:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v137) {
    goto LABEL_195;
  }
  if (!*v137) {
    goto LABEL_252;
  }
  unint64_t v43 = CFArrayGetCount(*v137);
  unint64_t v44 = v43;
  if (v43)
  {
    if (v43 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    size_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v43);
    unint64_t v46 = 0;
    long long v143 = &v45[40 * v47];
    uint64_t v48 = v45;
    unint64_t v139 = v44;
    do
    {
      CFArrayRef v49 = *v137;
      if (!*v137)
      {
        unsigned int v108 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v108, "Could not construct");
        __cxa_throw(v108, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFTypeRef cf = 0;
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v154, v49, v46, &cf);
      if (cf) {
        CFRelease(cf);
      }
      CFDictionaryRef v50 = v154;
      if (!v154)
      {
        unint64_t v109 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v109, "Could not construct");
        __cxa_throw(v109, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v51 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
      CFTypeRef v152 = v51;
      if (!v51)
      {
        unint64_t v110 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v110, "Could not construct");
        __cxa_throw(v110, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(valuePtr) = 0;
      CFTypeRef v151 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v151)
      {
        uint64_t v111 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v111, "Could not construct");
        __cxa_throw(v111, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v50, v51, &v151);
      if (v151) {
        CFRelease(v151);
      }
      CFRelease(v51);
      CFStringRef v52 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
      CFTypeRef v151 = v52;
      if (!v52)
      {
        uint64_t v112 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v112, "Could not construct");
        __cxa_throw(v112, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v149) = 0;
      CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v149);
      if (!valuePtr)
      {
        uint64_t v113 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v113, "Could not construct");
        __cxa_throw(v113, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v152, v50, v52, &valuePtr);
      if (valuePtr) {
        CFRelease(valuePtr);
      }
      CFRelease(v52);
      CFNumberRef v53 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
      CFNumberRef valuePtr = v53;
      if (!v53)
      {
        std::vector<std::string>::pointer v114 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v114, "Could not construct");
        __cxa_throw(v114, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v148) = 0;
      CFTypeRef v149 = CFNumberCreate(0, kCFNumberIntType, &v148);
      if (!v149)
      {
        std::vector<std::string>::pointer v115 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v115, "Could not construct");
        __cxa_throw(v115, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v151, v50, v53, &v149);
      if (v149) {
        CFRelease(v149);
      }
      CFRelease(v53);
      CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
      CFTypeRef v149 = v54;
      if (!v54)
      {
        long long v116 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v116, "Could not construct");
        __cxa_throw(v116, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v147) = 0;
      CFTypeRef v148 = CFNumberCreate(0, kCFNumberIntType, &v147);
      if (!v148)
      {
        int v117 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v117, "Could not construct");
        __cxa_throw(v117, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v50, v54, &v148);
      if (v148) {
        CFRelease(v148);
      }
      CFRelease(v54);
      CFStringRef v55 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
      CFTypeRef v148 = v55;
      if (!v55)
      {
        int64x2_t v118 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v118, "Could not construct");
        __cxa_throw(v118, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v146) = 0;
      CFTypeRef v147 = CFNumberCreate(0, kCFNumberIntType, &v146);
      if (!v147)
      {
        uint64_t v119 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v119, "Could not construct");
        __cxa_throw(v119, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v149, v50, v55, &v147);
      if (v147) {
        CFRelease(v147);
      }
      CFRelease(v55);
      CFStringRef v56 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
      CFTypeRef v147 = v56;
      if (!v56)
      {
        unint64_t v120 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v120, "Could not construct");
        __cxa_throw(v120, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v145) = 0;
      CFTypeRef v146 = CFNumberCreate(0, kCFNumberIntType, &v145);
      if (!v146)
      {
        CFStringRef v121 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v121, "Could not construct");
        __cxa_throw(v121, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v148, v50, v56, &v146);
      if (v146) {
        CFRelease(v146);
      }
      CFRelease(v56);
      CFStringRef v57 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
      CFTypeRef v146 = v57;
      if (!v57)
      {
        CFStringRef v122 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v122, "Could not construct");
        __cxa_throw(v122, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v144) = 0;
      CFTypeRef v145 = CFNumberCreate(0, kCFNumberIntType, &v144);
      if (!v145)
      {
        CFStringRef v123 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v123, "Could not construct");
        __cxa_throw(v123, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v147, v50, v57, &v145);
      if (v145) {
        CFRelease(v145);
      }
      CFRelease(v57);
      CFStringRef v58 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
      CFTypeRef v145 = v58;
      if (!v58)
      {
        int v124 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v124, "Could not construct");
        __cxa_throw(v124, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v155[0] = 0;
      CFTypeRef v144 = CFNumberCreate(0, kCFNumberIntType, v155);
      if (!v144)
      {
        int v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v125, "Could not construct");
        __cxa_throw(v125, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v146, v50, v58, &v144);
      if (v144) {
        CFRelease(v144);
      }
      CFRelease(v58);
      if (!cf)
      {
        long long v126 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v126, "Could not construct");
        __cxa_throw(v126, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v59 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (!v152)
      {
        int v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v127, "Could not construct");
        __cxa_throw(v127, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v60 = v59;
      int v61 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v152);
      if (!v151)
      {
        uint64_t v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v128, "Could not construct");
        __cxa_throw(v128, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v62 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v151);
      if (!valuePtr)
      {
        int v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v129, "Could not construct");
        __cxa_throw(v129, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v63 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      if (!v149)
      {
        unint64_t v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v130, "Could not construct");
        __cxa_throw(v130, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v64 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v149);
      if (!v148)
      {
        v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v131, "Could not construct");
        __cxa_throw(v131, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v65 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v148);
      if (!v147)
      {
        uint64_t v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v132, "Could not construct");
        __cxa_throw(v132, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v66 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v147);
      if (!v146)
      {
        uint64_t v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v133, "Could not construct");
        __cxa_throw(v133, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      unsigned int v67 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v146);
      unsigned int v68 = v67;
      if (v45 >= v143)
      {
        unint64_t v70 = v48;
        unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * ((v45 - v48) >> 3);
        unint64_t v72 = v71 + 1;
        __pa = v70;
        if (v71 + 1 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((v143 - v70) >> 3);
        if (2 * v73 > v72) {
          unint64_t v72 = 2 * v73;
        }
        if (v73 >= 0x333333333333333) {
          unint64_t v74 = 0x666666666666666;
        }
        else {
          unint64_t v74 = v72;
        }
        if (v74) {
          unint64_t v74 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v74);
        }
        else {
          uint64_t v75 = 0;
        }
        unint64_t v76 = v74 + 40 * v71;
        *(double *)unint64_t v76 = v60;
        *(_DWORD *)(v76 + 8) = v61;
        *(_DWORD *)(v76 + 12) = v62;
        *(_DWORD *)(v76 + 16) = v63;
        *(_DWORD *)(v76 + 20) = v64;
        *(_DWORD *)(v76 + 24) = v65;
        *(_DWORD *)(v76 + 28) = v66;
        *(_DWORD *)(v76 + 32) = v68;
        *(_DWORD *)(v76 + 36) = 0;
        if (v45 == __pa)
        {
          uint64_t v48 = (char *)(v74 + 40 * v71);
          unint64_t v69 = v139;
          uint64_t v78 = __pa;
        }
        else
        {
          unint64_t v77 = v74 + 40 * v71;
          unint64_t v69 = v139;
          uint64_t v78 = __pa;
          do
          {
            long long v79 = *(_OWORD *)(v45 - 40);
            long long v80 = *(_OWORD *)(v45 - 24);
            uint64_t v48 = (char *)(v77 - 40);
            *(void *)(v77 - 8) = *((void *)v45 - 1);
            *(_OWORD *)(v77 - 24) = v80;
            *(_OWORD *)(v77 - 40) = v79;
            v45 -= 40;
            v77 -= 40;
          }
          while (v45 != __pa);
        }
        long long v143 = (char *)(v74 + 40 * v75);
        size_t v45 = (char *)(v76 + 40);
        if (v78) {
          operator delete(v78);
        }
      }
      else
      {
        *(double *)size_t v45 = v60;
        *((_DWORD *)v45 + 2) = v61;
        *((_DWORD *)v45 + 3) = v62;
        *((_DWORD *)v45 + 4) = v63;
        *((_DWORD *)v45 + 5) = v64;
        *((_DWORD *)v45 + 6) = v65;
        *((_DWORD *)v45 + 7) = v66;
        *((void *)v45 + 4) = v67;
        v45 += 40;
        unint64_t v69 = v139;
      }
      if (v146) {
        CFRelease(v146);
      }
      if (v147) {
        CFRelease(v147);
      }
      if (v148) {
        CFRelease(v148);
      }
      if (v149) {
        CFRelease(v149);
      }
      if (valuePtr) {
        CFRelease(valuePtr);
      }
      if (v151) {
        CFRelease(v151);
      }
      if (v152) {
        CFRelease(v152);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v154) {
        CFRelease(v154);
      }
      ++v46;
    }
    while (v46 != v69);
  }
  else
  {
    uint64_t v48 = 0;
    size_t v45 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>((void *)a1, v48, (uint64_t)v45, 0xCCCCCCCCCCCCCCCDLL * ((v45 - v48) >> 3));
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
  if (v48)
  {
    uint64_t v81 = v48;
    goto LABEL_193;
  }
}

void sub_1BAAD5074(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45,int a46,__int16 a47,char a48,char a49)
{
  __cxa_free_exception(v49);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_14;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    unint64_t v6 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v8);
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
  {
    AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef,std::vector<AudioStreamRangedDescription>>(a1, v6);
    return result;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
  {
    AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef,std::vector<CA::RangedStreamDescription>>(a1, v6);
    return result;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    if (!v6) {
      __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
    }
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, (CFTypeRef *)v6);
  }
  else
  {
LABEL_14:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

double AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_11;
  }
  if (*(void *)(a2 + 32))
  {
    uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    unint64_t v6 = (CFArrayRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v8);
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>())
  {
    AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(a1, v6);
    return result;
  }
  if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    if (!v6) {
      __assert_rtn("create_vector_of_available_formats_from", "Thing.h", 2208, "in_value_ptr != nullptr");
    }
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, (CFTypeRef *)v6);
  }
  else
  {
LABEL_11:
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void AMCP::Implementation::create_value_range_list_from<applesauce::CF::ArrayRef>(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
    && *a3 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
  {
    goto LABEL_33;
  }
  if (*(void *)(a2 + 32))
  {
    CFArrayRef v32 = (const __CFArray *)AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
    unint64_t v6 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, const __CFArray **))(a2 + 32))(4, a2, 0, &v32);
  }
  else
  {
    unint64_t v6 = 0;
  }
  if (*a3 != AMCP::Implementation::get_type_marker<CA::ValueRangeList>())
  {
    if (*a3 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
    {
      if (v6)
      {
        *(void *)(a1 + 32) = 0;
        *(_OWORD *)a1 = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, v6);
        return;
      }
LABEL_40:
      __assert_rtn("create_value_range_list_from", "Thing.h", 2316, "in_value_ptr != nullptr");
    }
LABEL_33:
    *(void *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    return;
  }
  if (!v6) {
    goto LABEL_40;
  }
  CFArrayRef v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  CFArrayRef v7 = (const __CFArray *)*v6;
  if (*v6)
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)*v6);
    CFIndex v9 = Count;
    CFArrayRef v10 = (const __CFArray *)*v6;
    if (v10)
    {
      CFIndex v11 = CFArrayGetCount(v10);
      if (v9) {
        goto LABEL_11;
      }
    }
    else
    {
      CFIndex v11 = 0;
      if (Count)
      {
LABEL_11:
        unint64_t v12 = 0;
        do
        {
          if (v7 == v10 && v11 == v12) {
            break;
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v31, v7, v12);
          if (!v31)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
          CFStringRef v30 = v13;
          if (!v13)
          {
            int v24 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v24, "Could not construct");
            __cxa_throw(v24, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int valuePtr = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!cf)
          {
            int v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v21, "Could not construct");
            __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v28, (const __CFDictionary *)v31, v13, &cf);
          CFNumberRef v14 = v28[0];
          if (!v28[0])
          {
            int v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v25, "Could not construct");
            __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v15 = applesauce::CF::convert_to<double,0>(v28[0]);
          CFRelease(v14);
          if (cf) {
            CFRelease(cf);
          }
          CFRelease(v13);
          if (!v31)
          {
            int v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v22, "Could not construct");
            __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
          CFStringRef v30 = v16;
          if (!v16)
          {
            int v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v26, "Could not construct");
            __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          int valuePtr = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!cf)
          {
            int v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v23, "Could not construct");
            __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(v28, (const __CFDictionary *)v31, v16, &cf);
          CFNumberRef v17 = v28[0];
          if (!v28[0])
          {
            CFTypeRef v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v27, "Could not construct");
            __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v18 = applesauce::CF::convert_to<double,0>(v28[0]);
          CFRelease(v17);
          if (cf) {
            CFRelease(cf);
          }
          CFRelease(v16);
          v28[0] = *(const __CFNumber **)&v15;
          v28[1] = *(const __CFNumber **)&v18;
          CA::ValueRangeList::AddRange((double **)&v32, (double *)v28);
          if (v31) {
            CFRelease(v31);
          }
          ++v12;
        }
        while (v9 != v12);
        CFArrayRef v7 = v32;
        uint64_t v19 = v33;
        goto LABEL_37;
      }
    }
    uint64_t v19 = 0;
    CFArrayRef v7 = 0;
  }
  else
  {
    uint64_t v19 = 0;
  }
LABEL_37:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)a1, v7, v19, (v19 - (uint64_t)v7) >> 4);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
  if (v7) {
    operator delete(v7);
  }
}

void sub_1BAAD5EDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[221];
}

BOOL AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      CFArrayRef v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      double result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
      double result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
      return result;
    case 2:
      double result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
      double result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRangeList>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
      CFIndex v11 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, cf);
        CFIndex v11 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v11 == (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v10)
      {
        unint64_t v12 = *(void (**)(uint64_t, uint64_t, void, void *))(a3 + 32);
        v48[0] = 0;
        if (v12)
        {
          v12(3, a3, 0, v48);
          unint64_t v12 = (void (*)(uint64_t, uint64_t, void, void *))v48[0];
        }
        if (v12 == (void (*)(uint64_t, uint64_t, void, void *))v10)
        {
          if (*(void *)(a2 + 32))
          {
            cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
            uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
          }
          else
          {
            uint64_t v13 = 0;
          }
          if (*(void *)(a3 + 32))
          {
            cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
            long long v37 = (double **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
          }
          else
          {
            long long v37 = 0;
          }
          unint64_t v38 = *(double **)v13;
          long long v39 = *(double **)(v13 + 8);
          if (v38 != v39)
          {
            long long v40 = *v37;
            do
            {
              if (!CA::operator==(*v38, v38[1], *v40, v40[1])) {
                return 0;
              }
              v38 += 2;
              v40 += 2;
            }
            while (v38 != v39);
          }
          return 1;
        }
      }
      AMCP::Thing::convert_to<CA::ValueRangeList>(cf, a2);
      AMCP::Thing::convert_to<CA::ValueRangeList>(v48, a3);
      CFStringRef v16 = (void *)cf[0];
      CFNumberRef v17 = (double *)cf[1];
      double v18 = (void *)v48[0];
      if (cf[0] == cf[1])
      {
        int v27 = 1;
        if (v48[0]) {
LABEL_32:
        }
          operator delete(v18);
      }
      else
      {
        uint64_t v19 = (double *)v48[0];
        double v20 = (double *)cf[0];
        do
        {
          double v21 = *v20;
          double v22 = v20[1];
          v20 += 2;
          double v23 = *v19;
          double v24 = v19[1];
          v19 += 2;
          BOOL v25 = CA::operator==(v21, v22, v23, v24);
        }
        while (v25 && v20 != v17);
        int v27 = v25;
        if (v18) {
          goto LABEL_32;
        }
      }
      if (v16) {
        operator delete(v16);
      }
      return v27 != 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<CA::ValueRangeList>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_56;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<CA::ValueRangeList>())
      {
        if (v15)
        {
          uint64_t v47 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v46 = 0u;
          std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(cf, *(const void **)v15, *(void *)(v15 + 8), (uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 4);
          uint64_t v47 = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
          goto LABEL_57;
        }
LABEL_72:
        __assert_rtn("create_value_range_list_from", "Thing.h", 2316, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v15)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
          v48[0] = Mutable;
          CFStringRef v30 = *(CFTypeRef **)v15;
          unsigned int v29 = *(CFTypeRef **)(v15 + 8);
          if (*(CFTypeRef **)v15 != v29)
          {
            CFTypeRef v31 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
            do
            {
              CFArrayRef v32 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], v31);
              CFDictionaryRef v50 = v32;
              CFStringRef v33 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
              CFStringRef v49 = v33;
              if (!v33)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = *v30;
              CFNumberRef v34 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v34)
              {
                uint64_t v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v42, "Could not construct");
                __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v32, v33, v34);
              CFRelease(v34);
              CFRelease(v33);
              CFStringRef v35 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
              CFStringRef v49 = v35;
              if (!v35)
              {
                unint64_t v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v43, "Could not construct");
                __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = v30[1];
              CFNumberRef v36 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v36)
              {
                unint64_t v44 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v44, "Could not construct");
                __cxa_throw(v44, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v32, v35, v36);
              CFRelease(v36);
              CFRelease(v35);
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)cf, v32);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf[0]);
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              if (v32) {
                CFRelease(v32);
              }
              v30 += 2;
            }
            while (v30 != v29);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
          cf[1] = 0;
          long long v46 = 0uLL;
          uint64_t v47 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_57;
        }
        goto LABEL_72;
      }
LABEL_56:
      uint64_t v47 = 0;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v46 = 0u;
LABEL_57:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
      if (v47) {
        ((void (*)(void, CFTypeRef *, void, void))v47)(0, cf, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAD6690(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAD64C4);
}

void sub_1BAAD66B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va2, a6);
  va_start(va1, a6);
  va_start(va, a6);
  CFArrayRef v7 = va_arg(va1, const void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  CFIndex v11 = va_arg(va2, const void *);
  applesauce::CF::StringRef::~StringRef((const void **)va1);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<CA::ValueRangeList>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<CA::ValueRangeList>();
  memset(v17, 0, sizeof(v17));
  double v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFIndex v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFNumberRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  double result = std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 4);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAD6924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[219];
}

void AMCP::Implementation::create_vector_of_available_formats_from<applesauce::CF::ArrayRef,std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_available_formats_from", "Thing.h", 2208, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  uint64_t v108 = 0;
  unint64_t v109 = 0;
  unint64_t v110 = 0;
  if (!Count)
  {
    uint64_t v51 = 0;
    uint64_t v50 = 0;
    goto LABEL_114;
  }
  if (Count >> 58) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  long long v116 = &v110;
  uint64_t v90 = a1;
  double v112 = COERCE_DOUBLE(std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(Count));
  uint64_t v113 = *(void ***)&v112;
  std::vector<std::string>::pointer v114 = *(void ***)&v112;
  std::vector<std::string>::pointer v115 = (void **)(*(void *)&v112 + (v6 << 6));
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer(&v108, &v112);
  std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&v112);
  unint64_t v7 = 0;
  unint64_t v91 = v5;
  do
  {
    CFArrayRef v8 = *a2;
    if (!*a2)
    {
      double v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v60, "Could not construct");
      __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    double v112 = 0.0;
    unint64_t v92 = v7;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v107, v8, v7, &v112);
    if (v112 != 0.0) {
      CFRelease(*(CFTypeRef *)&v112);
    }
    std::string __p = 0;
    uint64_t v105 = 0;
    uint64_t v106 = 0;
    CFDictionaryRef v9 = (const __CFDictionary *)v107;
    if (!v107)
    {
      int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v61, "Could not construct");
      __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate range list", 22, 0x8000100u, 0);
    if (!v10)
    {
      int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v62, "Could not construct");
      __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    double v112 = 0.0;
    applesauce::CF::at_or<applesauce::CF::ArrayRef,applesauce::CF::StringRef>(&theArray, v9, v10, &v112);
    if (v112 != 0.0) {
      CFRelease(*(CFTypeRef *)&v112);
    }
    CFRelease(v10);
    CFArrayRef v11 = theArray;
    if (theArray)
    {
      CFIndex v12 = CFArrayGetCount(theArray);
      CFIndex v13 = CFArrayGetCount(v11);
      if (v12)
      {
        CFIndex v14 = v13;
        for (unint64_t i = 0; i != v12; ++i)
        {
          if (v14 == i) {
            break;
          }
          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v102, v11, i);
          if (!v102)
          {
            CFNumberRef v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v53, "Could not construct");
            __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
          CFTypeRef v101 = v16;
          if (!v16)
          {
            CFStringRef v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v56, "Could not construct");
            __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          LODWORD(valuePtr) = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!cf)
          {
            CFStringRef v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v55, "Could not construct");
            __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v112, (const __CFDictionary *)v102, v16, &cf);
          CFNumberRef v17 = *(void ***)&v112;
          if (v112 == 0.0)
          {
            CFStringRef v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v58, "Could not construct");
            __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v18 = applesauce::CF::convert_to<double,0>(*(const __CFNumber **)&v112);
          CFRelease(v17);
          if (cf) {
            CFRelease(cf);
          }
          CFRelease(v16);
          if (!v102)
          {
            CFStringRef v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v54, "Could not construct");
            __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFStringRef v19 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
          CFTypeRef v101 = v19;
          if (!v19)
          {
            CFStringRef v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v57, "Could not construct");
            __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          LODWORD(valuePtr) = 0;
          CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
          if (!cf)
          {
            CFStringRef v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v52, "Could not construct");
            __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v112, (const __CFDictionary *)v102, v19, &cf);
          double v20 = *(void ***)&v112;
          if (v112 == 0.0)
          {
            double v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v59, "Could not construct");
            __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          double v21 = applesauce::CF::convert_to<double,0>(*(const __CFNumber **)&v112);
          CFRelease(v20);
          if (cf) {
            CFRelease(cf);
          }
          CFRelease(v19);
          double v112 = v18;
          uint64_t v113 = *(void ***)&v21;
          CA::ValueRangeList::AddRange((double **)&__p, &v112);
          if (v102) {
            CFRelease(v102);
          }
        }
      }
    }
    CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)"format", 6, 0x8000100u, 0);
    if (!v22)
    {
      int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v63, "Could not construct");
      __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    double v112 = 0.0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,applesauce::CF::StringRef>(&v102, v9, v22, &v112);
    if (v112 != 0.0) {
      CFRelease(*(CFTypeRef *)&v112);
    }
    CFRelease(v22);
    CFDictionaryRef v23 = (const __CFDictionary *)v102;
    if (!v102)
    {
      unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v68, "Could not construct");
      __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
    double v112 = *(double *)&v24;
    if (!v24)
    {
      unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v69, "Could not construct");
      __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(valuePtr) = 0;
    CFTypeRef cf = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!cf)
    {
      unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v70, "Could not construct");
      __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v101, v23, v24, &cf);
    if (cf) {
      CFRelease(cf);
    }
    CFRelease(v24);
    CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
    double v112 = *(double *)&v25;
    if (!v25)
    {
      unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v73, "Could not construct");
      __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(v98) = 0;
    CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v98);
    if (!valuePtr)
    {
      int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v64, "Could not construct");
      __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v23, v25, &valuePtr);
    if (valuePtr) {
      CFRelease(valuePtr);
    }
    CFRelease(v25);
    CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
    double v112 = *(double *)&v26;
    if (!v26)
    {
      unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v71, "Could not construct");
      __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(v97) = 0;
    CFTypeRef v98 = CFNumberCreate(0, kCFNumberIntType, &v97);
    if (!v98)
    {
      unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v74, "Could not construct");
      __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v23, v26, &v98);
    if (v98) {
      CFRelease(v98);
    }
    CFRelease(v26);
    CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
    double v112 = *(double *)&v27;
    if (!v27)
    {
      unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v72, "Could not construct");
      __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(v96) = 0;
    CFTypeRef v97 = CFNumberCreate(0, kCFNumberIntType, &v96);
    if (!v97)
    {
      int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v65, "Could not construct");
      __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v98, v23, v27, &v97);
    if (v97) {
      CFRelease(v97);
    }
    CFRelease(v27);
    CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
    double v112 = *(double *)&v28;
    if (!v28)
    {
      int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v66, "Could not construct");
      __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(v95) = 0;
    CFTypeRef v96 = CFNumberCreate(0, kCFNumberIntType, &v95);
    if (!v96)
    {
      unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v67, "Could not construct");
      __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v97, v23, v28, &v96);
    if (v96) {
      CFRelease(v96);
    }
    CFRelease(v28);
    CFStringRef v29 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
    double v112 = *(double *)&v29;
    if (!v29)
    {
      uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v75, "Could not construct");
      __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(v94) = 0;
    CFTypeRef v95 = CFNumberCreate(0, kCFNumberIntType, &v94);
    if (!v95)
    {
      uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v82, "Could not construct");
      __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v96, v23, v29, &v95);
    if (v95) {
      CFRelease(v95);
    }
    CFRelease(v29);
    CFStringRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
    double v112 = *(double *)&v30;
    if (!v30)
    {
      unint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v77, "Could not construct");
      __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    LODWORD(v93) = 0;
    CFTypeRef v94 = CFNumberCreate(0, kCFNumberIntType, &v93);
    if (!v94)
    {
      int v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v83, "Could not construct");
      __cxa_throw(v83, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v95, v23, v30, &v94);
    if (v94) {
      CFRelease(v94);
    }
    CFRelease(v30);
    CFStringRef v31 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
    double v112 = *(double *)&v31;
    if (!v31)
    {
      uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v78, "Could not construct");
      __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v111 = 0;
    CFTypeRef v93 = CFNumberCreate(0, kCFNumberIntType, &v111);
    if (!v93)
    {
      long long v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v79, "Could not construct");
      __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v94, v23, v31, &v93);
    if (v93) {
      CFRelease(v93);
    }
    CFRelease(v31);
    if (!v101)
    {
      unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v76, "Could not construct");
      __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    double v32 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v101);
    if (!cf)
    {
      int v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v85, "Could not construct");
      __cxa_throw(v85, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    double v33 = v32;
    int v34 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
    if (!valuePtr)
    {
      long long v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v80, "Could not construct");
      __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v35 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
    if (!v98)
    {
      uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v81, "Could not construct");
      __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v36 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v98);
    if (!v97)
    {
      __int16 v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v84, "Could not construct");
      __cxa_throw(v84, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v37 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v97);
    if (!v96)
    {
      int v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v86, "Could not construct");
      __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v38 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v96);
    if (!v95)
    {
      unint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v87, "Could not construct");
      __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v39 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v95);
    CFTypeRef v40 = v94;
    if (!v94)
    {
      unint64_t v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v88, "Could not construct");
      __cxa_throw(v88, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v41 = v39;
    int v42 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v94);
    unint64_t v43 = v109;
    if ((unint64_t)v109 < v110)
    {
      *unint64_t v109 = 0;
      v43[1] = 0;
      v43[2] = 0;
      std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v43, __p, v105, (v105 - (uint64_t)__p) >> 4);
      *((double *)v43 + 3) = v33;
      *((_DWORD *)v43 + 8) = v34;
      *((_DWORD *)v43 + 9) = v35;
      *((_DWORD *)v43 + 10) = v36;
      *((_DWORD *)v43 + 11) = v37;
      *((_DWORD *)v43 + 12) = v38;
      *((_DWORD *)v43 + 13) = v41;
      *((_DWORD *)v43 + 14) = v42;
      *((_DWORD *)v43 + 15) = 0;
      unint64_t v109 = v43 + 8;
LABEL_88:
      CFRelease(v40);
      goto LABEL_89;
    }
    uint64_t v44 = ((uint64_t)v109 - v108) >> 6;
    if ((unint64_t)(v44 + 1) >> 58) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v45 = (uint64_t)(v110 - v108) >> 5;
    if (v45 <= v44 + 1) {
      unint64_t v45 = v44 + 1;
    }
    if (v110 - v108 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v46 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v45;
    }
    long long v116 = &v110;
    if (v46) {
      unint64_t v46 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v46);
    }
    else {
      uint64_t v47 = 0;
    }
    unint64_t v48 = v46 + (v44 << 6);
    double v112 = *(double *)&v46;
    uint64_t v113 = (void **)v48;
    std::vector<std::string>::pointer v114 = (void **)v48;
    std::vector<std::string>::pointer v115 = (void **)(v46 + (v47 << 6));
    *(void *)unint64_t v48 = 0;
    *(void *)(v48 + 8) = 0;
    *(void *)(v48 + 16) = 0;
    std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)v48, __p, v105, (v105 - (uint64_t)__p) >> 4);
    *(double *)(v48 + 24) = v33;
    *(_DWORD *)(v48 + 32) = v34;
    *(_DWORD *)(v48 + 36) = v35;
    *(_DWORD *)(v48 + 40) = v36;
    *(_DWORD *)(v48 + 44) = v37;
    *(_DWORD *)(v48 + 48) = v38;
    *(_DWORD *)(v48 + 52) = v41;
    *(_DWORD *)(v48 + ++*(_DWORD *)(this + 56) = v42;
    *(_DWORD *)(v48 + 60) = 0;
    v114 += 8;
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer(&v108, &v112);
    CFStringRef v49 = v109;
    std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer((uint64_t)&v112);
    CFTypeRef v40 = v94;
    unint64_t v109 = v49;
    if (v94) {
      goto LABEL_88;
    }
LABEL_89:
    if (v95) {
      CFRelease(v95);
    }
    if (v96) {
      CFRelease(v96);
    }
    if (v97) {
      CFRelease(v97);
    }
    if (v98) {
      CFRelease(v98);
    }
    if (valuePtr) {
      CFRelease(valuePtr);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v101) {
      CFRelease(v101);
    }
    if (v102) {
      CFRelease(v102);
    }
    if (theArray) {
      CFRelease(theArray);
    }
    if (__p) {
      operator delete(__p);
    }
    if (v107) {
      CFRelease(v107);
    }
    unint64_t v7 = v92 + 1;
  }
  while (v92 + 1 != v91);
  uint64_t v50 = v108;
  uint64_t v51 = (uint64_t)v109;
  a1 = v90;
LABEL_114:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a1, v50, v51, (v51 - v50) >> 6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
  double v112 = COERCE_DOUBLE(&v108);
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v112);
}

void sub_1BAAD7BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35,int a36,__int16 a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,void *__p,uint64_t a53,uint64_t a54,char a55,int a56,__int16 a57,char a58,char a59,uint64_t a60)
{
  __cxa_free_exception(v60);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 58) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (void *)result;
    unint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(a4);
    CFArrayRef v8 = v7;
    void *v6 = v7;
    v6[1] = v7;
    _OWORD v6[2] = &v7[64 * v9];
    uint64_t v15 = v7;
    CFStringRef v16 = v7;
    v13[0] = v6 + 2;
    v13[1] = &v15;
    _OWORD v13[2] = &v16;
    char v14 = 0;
    if (a2 != a3)
    {
      CFStringRef v10 = v7;
      do
      {
        *(void *)CFStringRef v10 = 0;
        *((void *)v10 + 1) = 0;
        *((void *)v10 + 2) = 0;
        std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>(v10, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
        long long v11 = *(_OWORD *)(a2 + 24);
        long long v12 = *(_OWORD *)(a2 + 40);
        *((void *)v10 + 7) = *(void *)(a2 + 56);
        *(_OWORD *)(v10 + 40) = v12;
        *(_OWORD *)(v10 + 24) = v11;
        CFStringRef v10 = v16 + 64;
        v16 += 64;
        a2 += 64;
      }
      while (a2 != a3);
      CFArrayRef v8 = v10;
    }
    char v14 = 1;
    double result = std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
    v6[1] = v8;
  }
  return result;
}

void sub_1BAAD81A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__clear[abi:ne180100]((uint64_t *)v2);
    CFTypeRef v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 64);
      v4 -= 64;
      unint64_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - ++*(_DWORD *)(this + 56) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch(int a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = (AMCP::Thing *)a3;
  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>(a3, *a2, a2[1], (a2[1] - *a2) >> 6);
      uint64_t v4 = 0;
      *((void *)v6 + 4) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
      return v4;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = a2[2];
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
LABEL_7:
      *(void *)&long long valuePtr = a2;
      std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&valuePtr);
      uint64_t v4 = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return v4;
    case 3:
      uint64_t v4 = 0;
      *a4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
      return v4;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()) {
        return (uint64_t)a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
      uint64_t v9 = (void (*)(uint64_t, uint64_t *, void, long long *))a2[4];
      *(void *)&long long valuePtr = 0;
      if (v9)
      {
        v9(3, a2, 0, &valuePtr);
        uint64_t v9 = (void (*)(uint64_t, uint64_t *, void, long long *))valuePtr;
      }
      if (v9 != (void (*)(uint64_t, uint64_t *, void, long long *))v8) {
        goto LABEL_21;
      }
      CFStringRef v10 = (void **)*((void *)v6 + 4);
      v81[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, AMCP::Thing *, void, void ***))v10)(3, v6, 0, v81);
        CFStringRef v10 = v81[0];
      }
      if (v10 != (void **)v8)
      {
LABEL_21:
        AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(&valuePtr, (uint64_t)a2);
        AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(v81, (uint64_t)v6);
        uint64_t v15 = *((void *)&valuePtr + 1);
        uint64_t v14 = valuePtr;
        CFStringRef v16 = v81[0];
        if ((void **)(*((void *)&valuePtr + 1) - valuePtr) != (void **)((char *)v81[1] - (char *)v81[0]))
        {
LABEL_25:
          __int16 v84 = v81;
          std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
          v81[0] = (void **)&valuePtr;
          std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](v81);
          return 0;
        }
        while (v14 != v15)
        {
          if (!std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(v14, (uint64_t)v16))goto LABEL_25; {
          v14 += 64;
          }
          v16 += 8;
        }
        __int16 v84 = v81;
        std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v84);
        v81[0] = (void **)&valuePtr;
        std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](v81);
        return 1;
      }
      if (a2[4])
      {
        *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
        long long v11 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t *, void, long long *))a2[4])(4, a2, 0, &valuePtr);
      }
      else
      {
        long long v11 = 0;
      }
      *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
      uint64_t v50 = (uint64_t *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, long long *))v6 + 4))(4, v6, 0, &valuePtr);
      uint64_t v51 = *v11;
      uint64_t v52 = v11[1];
      uint64_t v53 = v52 - *v11;
      uint64_t v54 = *v50;
      if (v53 == v50[1] - *v50)
      {
        if (v51 != v52)
        {
          uint64_t v4 = 1;
          while (std::__tuple_equal<2ul>::operator()[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>,std::tuple<CA::ValueRangeList,CA::StreamDescription>>(v51, v54))
          {
            v51 += 64;
            v54 += 64;
            if (v51 == v52) {
              return v4;
            }
          }
          return 0;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_78;
      }
      if (a2[4])
      {
        *(void *)&long long valuePtr = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
        CFIndex v13 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t *, void, long long *))a2[4])(4, a2, 0, &valuePtr);
      }
      else
      {
        CFIndex v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>())
      {
        if (v13)
        {
          long long v80 = 0;
          long long valuePtr = 0u;
          long long v79 = 0u;
          std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)&valuePtr, *v13, v13[1], (v13[1] - *v13) >> 6);
          long long v80 = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>::dispatch;
          goto LABEL_79;
        }
LABEL_92:
        __assert_rtn("create_vector_of_available_formats_from", "Thing.h", 2208, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v13)
        {
          CFMutableArrayRef Mutable = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
          v81[0] = Mutable;
          uint64_t v18 = *v13;
          uint64_t v77 = v13[1];
          if (*v13 != v77)
          {
            CFStringRef v19 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
            do
            {
              double v20 = v6;
              double v21 = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
              __int16 v84 = (void ***)v21;
              CFStringRef v22 = *(void **)v18;
              CFDictionaryRef v23 = *(void **)(v18 + 8);
              while (v22 != v23)
              {
                CFStringRef v24 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], v19);
                int v83 = v24;
                CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
                CFTypeRef cf = v25;
                if (!v25)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                *(void *)&long long valuePtr = *v22;
                CFNumberRef v26 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                if (!v26)
                {
                  CFStringRef v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v56, "Could not construct");
                  __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v24, v25, v26);
                CFRelease(v26);
                CFRelease(v25);
                CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
                CFTypeRef cf = v27;
                if (!v27)
                {
                  CFStringRef v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v57, "Could not construct");
                  __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                *(void *)&long long valuePtr = v22[1];
                CFNumberRef v28 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                if (!v28)
                {
                  CFStringRef v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v58, "Could not construct");
                  __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v24, v27, v28);
                CFRelease(v28);
                CFRelease(v27);
                mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&valuePtr, v24);
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)v21, (const void *)valuePtr);
                if ((void)valuePtr) {
                  CFRelease((CFTypeRef)valuePtr);
                }
                if (v24) {
                  CFRelease(v24);
                }
                v22 += 2;
              }
              CFStringRef v29 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], v19);
              int v83 = v29;
              CFStringRef v30 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
              CFTypeRef cf = v30;
              if (!v30)
              {
                double v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v59, "Could not construct");
                __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              uint64_t v6 = v20;
              *(void *)&long long valuePtr = *(void *)(v18 + 24);
              CFNumberRef v31 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
              if (!v31)
              {
                double v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Could not construct");
                __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v30, v31);
              CFRelease(v31);
              CFRelease(v30);
              CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
              *(void *)&long long valuePtr = v32;
              if (!v32)
              {
                int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v61, "Could not construct");
                __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 32);
              CFNumberRef v33 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v33)
              {
                int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v62, "Could not construct");
                __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v32, v33);
              CFRelease(v33);
              CFRelease(v32);
              CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
              *(void *)&long long valuePtr = v34;
              if (!v34)
              {
                int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v63, "Could not construct");
                __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 36);
              CFNumberRef v35 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v35)
              {
                int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v64, "Could not construct");
                __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v34, v35);
              CFRelease(v35);
              CFRelease(v34);
              CFStringRef v36 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
              *(void *)&long long valuePtr = v36;
              if (!v36)
              {
                int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
                __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 40);
              CFNumberRef v37 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v37)
              {
                int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v66, "Could not construct");
                __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v36, v37);
              CFRelease(v37);
              CFRelease(v36);
              CFStringRef v38 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
              *(void *)&long long valuePtr = v38;
              if (!v38)
              {
                unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v67, "Could not construct");
                __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 44);
              CFNumberRef v39 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v39)
              {
                unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v68, "Could not construct");
                __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v38, v39);
              CFRelease(v39);
              CFRelease(v38);
              CFStringRef v40 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
              *(void *)&long long valuePtr = v40;
              if (!v40)
              {
                unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v69, "Could not construct");
                __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 48);
              CFNumberRef v41 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v41)
              {
                unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v70, "Could not construct");
                __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v40, v41);
              CFRelease(v41);
              CFRelease(v40);
              CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
              *(void *)&long long valuePtr = v42;
              if (!v42)
              {
                unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v71, "Could not construct");
                __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 52);
              CFNumberRef v43 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v43)
              {
                unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v72, "Could not construct");
                __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v42, v43);
              CFRelease(v43);
              CFRelease(v42);
              CFStringRef v44 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
              *(void *)&long long valuePtr = v44;
              if (!v44)
              {
                unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v73, "Could not construct");
                __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(cf) = *(_DWORD *)(v18 + 56);
              CFNumberRef v45 = CFNumberCreate(0, kCFNumberIntType, &cf);
              if (!v45)
              {
                unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v74, "Could not construct");
                __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v29, v44, v45);
              CFRelease(v45);
              CFRelease(v44);
              unint64_t v46 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], v19);
              *(void *)&long long valuePtr = v46;
              CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate range list", 22, 0x8000100u, 0);
              if (!v47)
              {
                uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v75, "Could not construct");
                __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&cf, v21);
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(v46, v47, cf);
              if (cf) {
                CFRelease(cf);
              }
              CFRelease(v47);
              CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)"format", 6, 0x8000100u, 0);
              if (!v48)
              {
                unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v76, "Could not construct");
                __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v29);
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(v46, v48, cf);
              if (cf) {
                CFRelease(cf);
              }
              CFRelease(v48);
              mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v46);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)Mutable, cf);
              if (cf) {
                CFRelease(cf);
              }
              if (v46) {
                CFRelease(v46);
              }
              if (v29) {
                CFRelease(v29);
              }
              if (v21) {
                CFRelease(v21);
              }
              v18 += 64;
            }
            while (v18 != v77);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, (const __CFArray *)Mutable);
          *((void *)&valuePtr + 1) = 0;
          long long v79 = 0uLL;
          long long v80 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_79;
        }
        goto LABEL_92;
      }
LABEL_78:
      long long v80 = 0;
      long long valuePtr = 0u;
      long long v79 = 0u;
LABEL_79:
      AMCP::swap((AMCP::Thing *)&valuePtr, v6, v12);
      if (v80) {
        ((void (*)(void, long long *, void, void))v80)(0, &valuePtr, 0, 0);
      }
      return 0;
    default:
      return v4;
  }
}

void sub_1BAAD9200(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a11;
  std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__destroy_vector::operator()[abi:ne180100](&a17);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAD8BDCLL);
}

void sub_1BAAD922C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  unint64_t v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v12 = va_arg(va2, const void *);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)(v3 - 88));
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va1);
  __clang_call_terminate(a1);
}

uint64_t AMCP::Thing::convert_to<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    unint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a1, *v6, v6[1], (v6[1] - *v6) >> 6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = (uint64_t *)v18(4, v17, 0, &v15);
  if (!v8)
  {
    CFIndex v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__init_with_size[abi:ne180100]<std::tuple<CA::ValueRangeList,CA::StreamDescription>*,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>((uint64_t)a1, *v8, v8[1], (v8[1] - *v8) >> 6);
  if (v18) {
    return v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAD9614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<CA::ValueRangeList,CA::StreamDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    uint64_t v4 = *(void **)(v2 - 64);
    *(void *)(a1 + 16) = v2 - 64;
    if (v4)
    {
      *(void *)(v2 - ++*(_DWORD *)(this + 56) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 64;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>,std::reverse_iterator<std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = a7;
  if (a3 != a5)
  {
    uint64_t v8 = 0;
    do
    {
      uint64_t v9 = a7 + v8;
      uint64_t v10 = a3 + v8;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - ++*(_DWORD *)(this + 56) = 0;
      *(void *)(v9 - 48) = 0;
      *(_OWORD *)(v9 - 64) = *(_OWORD *)(a3 + v8 - 64);
      *(void *)(v9 - 48) = *(void *)(a3 + v8 - 48);
      *(void *)(v10 - 64) = 0;
      *(void *)(v10 - ++*(_DWORD *)(this + 56) = 0;
      *(void *)(v10 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 + v8 - 40);
      long long v12 = *(_OWORD *)(a3 + v8 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 + v8 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      *(_OWORD *)(v9 - 40) = v11;
      v8 -= 64;
    }
    while (a3 + v8 != a5);
    return a7 + v8;
  }
  return result;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<CA::ValueRangeList,CA::StreamDescription>>,std::tuple<CA::ValueRangeList,CA::StreamDescription>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      uint64_t v4 = **(void **)(a1 + 16);
      do
      {
        uint64_t v6 = *(void **)(v4 - 64);
        v4 -= 64;
        uint64_t v5 = v6;
        if (v6)
        {
          *(void *)(v2 - ++*(_DWORD *)(this + 56) = v5;
          operator delete(v5);
        }
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[215];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[217];
}

void AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef,std::vector<AudioStreamRangedDescription>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  if (Count)
  {
    if (Count > 0x492492492492492) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v83 = Count;
    __int16 v84 = a2;
    uint64_t v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(Count);
    int v86 = &v4[56 * v5];
    unint64_t v87 = 0;
    unint64_t v6 = (unint64_t)v4;
    while (1)
    {
      CFArrayRef v7 = *v84;
      if (!*v84)
      {
        uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
        __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFTypeRef cf = 0;
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v100, v7, v87, &cf);
      if (cf) {
        CFRelease(cf);
      }
      CFDictionaryRef v8 = v100;
      if (!v100)
      {
        CFStringRef v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
        __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
      CFTypeRef v98 = v9;
      if (!v9)
      {
        uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v50, "Could not construct");
        __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(valuePtr) = 0;
      CFTypeRef v97 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v97)
      {
        uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v52, "Could not construct");
        __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v8, v9, &v97);
      if (v97) {
        CFRelease(v97);
      }
      CFRelease(v9);
      CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
      CFTypeRef v97 = v10;
      if (!v10)
      {
        uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v95) = 0;
      CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v95);
      if (!valuePtr)
      {
        uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Could not construct");
        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v98, v8, v10, &valuePtr);
      if (valuePtr) {
        CFRelease(valuePtr);
      }
      CFRelease(v10);
      CFNumberRef v11 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
      CFNumberRef valuePtr = v11;
      if (!v11)
      {
        CFStringRef v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v94) = 0;
      CFTypeRef v95 = CFNumberCreate(0, kCFNumberIntType, &v94);
      if (!v95)
      {
        CFStringRef v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v97, v8, v11, &v95);
      if (v95) {
        CFRelease(v95);
      }
      CFRelease(v11);
      CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
      CFTypeRef v95 = v12;
      if (!v12)
      {
        CFStringRef v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v93) = 0;
      CFTypeRef v94 = CFNumberCreate(0, kCFNumberIntType, &v93);
      if (!v94)
      {
        CFStringRef v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Could not construct");
        __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v8, v12, &v94);
      if (v94) {
        CFRelease(v94);
      }
      CFRelease(v12);
      CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
      CFTypeRef v94 = v13;
      if (!v13)
      {
        double v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v59, "Could not construct");
        __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v92) = 0;
      CFTypeRef v93 = CFNumberCreate(0, kCFNumberIntType, &v92);
      if (!v93)
      {
        double v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v60, "Could not construct");
        __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v95, v8, v13, &v93);
      if (v93) {
        CFRelease(v93);
      }
      CFRelease(v13);
      CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
      CFTypeRef v93 = v14;
      if (!v14)
      {
        int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v61, "Could not construct");
        __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v91) = 0;
      CFTypeRef v92 = CFNumberCreate(0, kCFNumberIntType, &v91);
      if (!v92)
      {
        int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v62, "Could not construct");
        __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v94, v8, v14, &v92);
      if (v92) {
        CFRelease(v92);
      }
      CFRelease(v14);
      CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
      CFTypeRef v92 = v15;
      if (!v15)
      {
        int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Could not construct");
        __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v90) = 0;
      CFTypeRef v91 = CFNumberCreate(0, kCFNumberIntType, &v90);
      if (!v91)
      {
        int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v64, "Could not construct");
        __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v93, v8, v15, &v91);
      if (v91) {
        CFRelease(v91);
      }
      CFRelease(v15);
      CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
      CFTypeRef v91 = v16;
      if (!v16)
      {
        int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v65, "Could not construct");
        __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v89) = 0;
      CFTypeRef v90 = CFNumberCreate(0, kCFNumberIntType, &v89);
      if (!v90)
      {
        int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v66, "Could not construct");
        __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v92, v8, v16, &v90);
      if (v90) {
        CFRelease(v90);
      }
      CFRelease(v16);
      CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
      CFTypeRef v90 = v17;
      if (!v17)
      {
        unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v67, "Could not construct");
        __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v88) = 0;
      CFTypeRef v89 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v89)
      {
        unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v68, "Could not construct");
        __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v91, v8, v17, &v89);
      if (v89) {
        CFRelease(v89);
      }
      CFRelease(v17);
      CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
      CFTypeRef v89 = v18;
      if (!v18)
      {
        unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v69, "Could not construct");
        __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v101[0] = 0;
      CFTypeRef v88 = CFNumberCreate(0, kCFNumberIntType, v101);
      if (!v88)
      {
        unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v70, "Could not construct");
        __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v90, v8, v18, &v88);
      if (v88) {
        CFRelease(v88);
      }
      CFRelease(v18);
      if (!cf)
      {
        unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v71, "Could not construct");
        __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v19 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (!v98)
      {
        unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v72, "Could not construct");
        __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v20 = v19;
      int v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v98);
      if (!v97)
      {
        unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v73, "Could not construct");
        __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v97);
      if (!valuePtr)
      {
        unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v74, "Could not construct");
        __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      if (!v95)
      {
        uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v75, "Could not construct");
        __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v95);
      if (!v94)
      {
        unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v76, "Could not construct");
        __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v94);
      if (!v93)
      {
        uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v77, "Could not construct");
        __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v26 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v93);
      if (!v92)
      {
        uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v78, "Could not construct");
        __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v92);
      if (!v91)
      {
        long long v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v79, "Could not construct");
        __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v28 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v91);
      CFTypeRef v29 = v90;
      if (!v90)
      {
        long long v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v80, "Could not construct");
        __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v30 = v28;
      double v31 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v90);
      double v32 = v31;
      if (v6 < (unint64_t)v86)
      {
        *(double *)unint64_t v6 = v20;
        *(_DWORD *)(v6 + 8) = v21;
        *(_DWORD *)(v6 + 12) = v22;
        *(_DWORD *)(v6 + 16) = v23;
        *(_DWORD *)(v6 + 20) = v24;
        *(_DWORD *)(v6 + 24) = v25;
        *(_DWORD *)(v6 + 28) = v26;
        *(_DWORD *)(v6 + 32) = v27;
        *(_DWORD *)(v6 + 36) = 0;
        *(double *)(v6 + 40) = v30;
        *(double *)(v6 + 48) = v31;
        v6 += 56;
        CFNumberRef v33 = v4;
LABEL_77:
        CFRelease(v29);
        goto LABEL_78;
      }
      CFStringRef v34 = v4;
      uint64_t v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v4) >> 3);
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) > 0x492492492492492) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      std::string __p = v34;
      unint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((v86 - v34) >> 3);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x249249249249249) {
        unint64_t v38 = 0x492492492492492;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        CFStringRef v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v38);
      }
      else
      {
        CFStringRef v40 = 0;
        uint64_t v39 = 0;
      }
      CFNumberRef v41 = &v40[56 * v35];
      *(double *)CFNumberRef v41 = v20;
      *((_DWORD *)v41 + 2) = v21;
      *((_DWORD *)v41 + 3) = v22;
      *((_DWORD *)v41 + 4) = v23;
      *((_DWORD *)v41 + 5) = v24;
      *((_DWORD *)v41 + 6) = v25;
      *((_DWORD *)v41 + 7) = v26;
      *((_DWORD *)v41 + 8) = v27;
      *((_DWORD *)v41 + 9) = 0;
      *((double *)v41 + 5) = v30;
      *((double *)v41 + 6) = v32;
      if ((void *)v6 == __p)
      {
        CFNumberRef v33 = v41;
        CFNumberRef v43 = __p;
        if (__p) {
          goto LABEL_75;
        }
      }
      else
      {
        CFStringRef v42 = v41;
        CFNumberRef v43 = __p;
        do
        {
          long long v44 = *(_OWORD *)(v6 - 56);
          long long v45 = *(_OWORD *)(v6 - 40);
          long long v46 = *(_OWORD *)(v6 - 24);
          CFNumberRef v33 = v42 - 56;
          *((void *)v42 - 1) = *(void *)(v6 - 8);
          *(_OWORD *)(v42 - 24) = v46;
          *(_OWORD *)(v42 - 40) = v45;
          *(_OWORD *)(v42 - ++*(_DWORD *)(this + 56) = v44;
          v6 -= 56;
          v42 -= 56;
        }
        while ((void *)v6 != __p);
        if (__p)
        {
LABEL_75:
          CFStringRef v47 = v40;
          uint64_t v48 = v39;
          operator delete(v43);
          uint64_t v39 = v48;
          CFStringRef v40 = v47;
          CFTypeRef v29 = v90;
        }
      }
      int v86 = &v40[56 * v39];
      unint64_t v6 = (unint64_t)(v41 + 56);
      if (v29) {
        goto LABEL_77;
      }
LABEL_78:
      if (v91) {
        CFRelease(v91);
      }
      if (v92) {
        CFRelease(v92);
      }
      if (v93) {
        CFRelease(v93);
      }
      if (v94) {
        CFRelease(v94);
      }
      if (v95) {
        CFRelease(v95);
      }
      if (valuePtr) {
        CFRelease(valuePtr);
      }
      if (v97) {
        CFRelease(v97);
      }
      if (v98) {
        CFRelease(v98);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v100) {
        CFRelease(v100);
      }
      uint64_t v4 = v33;
      if (++v87 == v83) {
        goto LABEL_103;
      }
    }
  }
  CFNumberRef v33 = 0;
  unint64_t v6 = 0;
LABEL_103:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>((void *)a1, v33, v6, 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - (void)v33) >> 3));
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
  if (v33) {
    operator delete(v33);
  }
}

void sub_1BAADA8E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45,int a46,__int16 a47,char a48,char a49,int a50,__int16 a51,char a52,char a53,int a54,__int16 a55,char a56,char a57)
{
  __cxa_free_exception(v57);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_asrds_from<applesauce::CF::ArrayRef,std::vector<CA::RangedStreamDescription>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  if (Count)
  {
    if (Count > 0x492492492492492) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v83 = Count;
    __int16 v84 = a2;
    uint64_t v4 = (long long *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(Count);
    int v86 = (char *)v4 + 56 * v5;
    unint64_t v87 = 0;
    unint64_t v6 = v4;
    while (1)
    {
      CFArrayRef v7 = *v84;
      if (!*v84)
      {
        uint64_t v51 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v51, "Could not construct");
        __cxa_throw(v51, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFTypeRef cf = 0;
      applesauce::CF::at_or<applesauce::CF::DictionaryRef>(&v100, v7, v87, &cf);
      if (cf) {
        CFRelease(cf);
      }
      CFDictionaryRef v8 = v100;
      if (!v100)
      {
        CFStringRef v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v49, "Could not construct");
        __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
      CFTypeRef v98 = v9;
      if (!v9)
      {
        uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v50, "Could not construct");
        __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(valuePtr) = 0;
      CFTypeRef v97 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (!v97)
      {
        uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v52, "Could not construct");
        __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&cf, v8, v9, &v97);
      if (v97) {
        CFRelease(v97);
      }
      CFRelease(v9);
      CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
      CFTypeRef v97 = v10;
      if (!v10)
      {
        uint64_t v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v53, "Could not construct");
        __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v95) = 0;
      CFNumberRef valuePtr = CFNumberCreate(0, kCFNumberIntType, &v95);
      if (!valuePtr)
      {
        uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v54, "Could not construct");
        __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v98, v8, v10, &valuePtr);
      if (valuePtr) {
        CFRelease(valuePtr);
      }
      CFRelease(v10);
      CFNumberRef v11 = (const __CFNumber *)CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
      CFNumberRef valuePtr = v11;
      if (!v11)
      {
        CFStringRef v55 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v55, "Could not construct");
        __cxa_throw(v55, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v94) = 0;
      CFTypeRef v95 = CFNumberCreate(0, kCFNumberIntType, &v94);
      if (!v95)
      {
        CFStringRef v56 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v56, "Could not construct");
        __cxa_throw(v56, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v97, v8, v11, &v95);
      if (v95) {
        CFRelease(v95);
      }
      CFRelease(v11);
      CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
      CFTypeRef v95 = v12;
      if (!v12)
      {
        CFStringRef v57 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v57, "Could not construct");
        __cxa_throw(v57, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v93) = 0;
      CFTypeRef v94 = CFNumberCreate(0, kCFNumberIntType, &v93);
      if (!v94)
      {
        CFStringRef v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Could not construct");
        __cxa_throw(v58, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&valuePtr, v8, v12, &v94);
      if (v94) {
        CFRelease(v94);
      }
      CFRelease(v12);
      CFStringRef v13 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
      CFTypeRef v94 = v13;
      if (!v13)
      {
        double v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v59, "Could not construct");
        __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v92) = 0;
      CFTypeRef v93 = CFNumberCreate(0, kCFNumberIntType, &v92);
      if (!v93)
      {
        double v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v60, "Could not construct");
        __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v95, v8, v13, &v93);
      if (v93) {
        CFRelease(v93);
      }
      CFRelease(v13);
      CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
      CFTypeRef v93 = v14;
      if (!v14)
      {
        int v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v61, "Could not construct");
        __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v91) = 0;
      CFTypeRef v92 = CFNumberCreate(0, kCFNumberIntType, &v91);
      if (!v92)
      {
        int v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v62, "Could not construct");
        __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v94, v8, v14, &v92);
      if (v92) {
        CFRelease(v92);
      }
      CFRelease(v14);
      CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
      CFTypeRef v92 = v15;
      if (!v15)
      {
        int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v63, "Could not construct");
        __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v90) = 0;
      CFTypeRef v91 = CFNumberCreate(0, kCFNumberIntType, &v90);
      if (!v91)
      {
        int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v64, "Could not construct");
        __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v93, v8, v15, &v91);
      if (v91) {
        CFRelease(v91);
      }
      CFRelease(v15);
      CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
      CFTypeRef v91 = v16;
      if (!v16)
      {
        int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v65, "Could not construct");
        __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v89) = 0;
      CFTypeRef v90 = CFNumberCreate(0, kCFNumberIntType, &v89);
      if (!v90)
      {
        int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v66, "Could not construct");
        __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v92, v8, v16, &v90);
      if (v90) {
        CFRelease(v90);
      }
      CFRelease(v16);
      CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
      CFTypeRef v90 = v17;
      if (!v17)
      {
        unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v67, "Could not construct");
        __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      LODWORD(v88) = 0;
      CFTypeRef v89 = CFNumberCreate(0, kCFNumberIntType, &v88);
      if (!v89)
      {
        unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v68, "Could not construct");
        __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v91, v8, v17, &v89);
      if (v89) {
        CFRelease(v89);
      }
      CFRelease(v17);
      CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
      CFTypeRef v89 = v18;
      if (!v18)
      {
        unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v69, "Could not construct");
        __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v101[0] = 0;
      CFTypeRef v88 = CFNumberCreate(0, kCFNumberIntType, v101);
      if (!v88)
      {
        unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v70, "Could not construct");
        __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::at_or<applesauce::CF::NumberRef,applesauce::CF::StringRef>(&v90, v8, v18, &v88);
      if (v88) {
        CFRelease(v88);
      }
      CFRelease(v18);
      if (!cf)
      {
        unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v71, "Could not construct");
        __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v19 = applesauce::CF::convert_to<double,0>((const __CFNumber *)cf);
      if (!v98)
      {
        unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v72, "Could not construct");
        __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v20 = v19;
      int v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v98);
      if (!v97)
      {
        unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v73, "Could not construct");
        __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v22 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v97);
      if (!valuePtr)
      {
        unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v74, "Could not construct");
        __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v23 = applesauce::CF::convert_to<unsigned int,0>(valuePtr);
      if (!v95)
      {
        uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v75, "Could not construct");
        __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v24 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v95);
      if (!v94)
      {
        unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v76, "Could not construct");
        __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v25 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v94);
      if (!v93)
      {
        uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v77, "Could not construct");
        __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v26 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v93);
      if (!v92)
      {
        uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v78, "Could not construct");
        __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      int v27 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v92);
      if (!v91)
      {
        long long v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v79, "Could not construct");
        __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v28 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v91);
      CFTypeRef v29 = v90;
      if (!v90)
      {
        long long v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v80, "Could not construct");
        __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      double v30 = v28;
      double v31 = applesauce::CF::convert_to<double,0>((const __CFNumber *)v90);
      double v32 = v31;
      if (v6 < (long long *)v86)
      {
        *(double *)unint64_t v6 = v20;
        *((_DWORD *)v6 + 2) = v21;
        *((_DWORD *)v6 + 3) = v22;
        *((_DWORD *)v6 + 4) = v23;
        *((_DWORD *)v6 + 5) = v24;
        *((_DWORD *)v6 + 6) = v25;
        *((_DWORD *)v6 + 7) = v26;
        *((_DWORD *)v6 + 8) = v27;
        *((_DWORD *)v6 + 9) = 0;
        *((double *)v6 + 5) = v30;
        *((double *)v6 + 6) = v31;
        unint64_t v6 = (long long *)((char *)v6 + 56);
        CFNumberRef v33 = v4;
LABEL_77:
        CFRelease(v29);
        goto LABEL_78;
      }
      CFStringRef v34 = v4;
      uint64_t v35 = 0x6DB6DB6DB6DB6DB7 * (((char *)v6 - (char *)v4) >> 3);
      unint64_t v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) > 0x492492492492492) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      std::string __p = v34;
      unint64_t v37 = 0x6DB6DB6DB6DB6DB7 * ((v86 - (char *)v34) >> 3);
      if (2 * v37 > v36) {
        unint64_t v36 = 2 * v37;
      }
      if (v37 >= 0x249249249249249) {
        unint64_t v38 = 0x492492492492492;
      }
      else {
        unint64_t v38 = v36;
      }
      if (v38)
      {
        CFStringRef v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v38);
      }
      else
      {
        CFStringRef v40 = 0;
        uint64_t v39 = 0;
      }
      CFNumberRef v41 = &v40[56 * v35];
      *(double *)CFNumberRef v41 = v20;
      *((_DWORD *)v41 + 2) = v21;
      *((_DWORD *)v41 + 3) = v22;
      *((_DWORD *)v41 + 4) = v23;
      *((_DWORD *)v41 + 5) = v24;
      *((_DWORD *)v41 + 6) = v25;
      *((_DWORD *)v41 + 7) = v26;
      *((_DWORD *)v41 + 8) = v27;
      *((_DWORD *)v41 + 9) = 0;
      *((double *)v41 + 5) = v30;
      *((double *)v41 + 6) = v32;
      if (v6 == __p)
      {
        CFNumberRef v33 = (long long *)v41;
        CFNumberRef v43 = __p;
        if (__p) {
          goto LABEL_75;
        }
      }
      else
      {
        CFStringRef v42 = v41;
        CFNumberRef v43 = __p;
        do
        {
          CFNumberRef v33 = (long long *)(v42 - 56);
          long long v44 = *(long long *)((char *)v6 - 56);
          long long v45 = *(long long *)((char *)v6 - 40);
          long long v46 = *(long long *)((char *)v6 - 24);
          *((void *)v42 - 1) = *((void *)v6 - 1);
          *(_OWORD *)(v42 - 24) = v46;
          *(_OWORD *)(v42 - 40) = v45;
          *(_OWORD *)(v42 - ++*(_DWORD *)(this + 56) = v44;
          unint64_t v6 = (long long *)((char *)v6 - 56);
          v42 -= 56;
        }
        while (v6 != __p);
        if (__p)
        {
LABEL_75:
          CFStringRef v47 = v40;
          uint64_t v48 = v39;
          operator delete(v43);
          uint64_t v39 = v48;
          CFStringRef v40 = v47;
          CFTypeRef v29 = v90;
        }
      }
      int v86 = &v40[56 * v39];
      unint64_t v6 = (long long *)(v41 + 56);
      if (v29) {
        goto LABEL_77;
      }
LABEL_78:
      if (v91) {
        CFRelease(v91);
      }
      if (v92) {
        CFRelease(v92);
      }
      if (v93) {
        CFRelease(v93);
      }
      if (v94) {
        CFRelease(v94);
      }
      if (v95) {
        CFRelease(v95);
      }
      if (valuePtr) {
        CFRelease(valuePtr);
      }
      if (v97) {
        CFRelease(v97);
      }
      if (v98) {
        CFRelease(v98);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v100) {
        CFRelease(v100);
      }
      uint64_t v4 = v33;
      if (++v87 == v83) {
        goto LABEL_103;
      }
    }
  }
  CFNumberRef v33 = 0;
  unint64_t v6 = 0;
LABEL_103:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a1, v33, v6, 0x6DB6DB6DB6DB6DB7 * (((char *)v6 - (char *)v33) >> 3));
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
  if (v33) {
    operator delete(v33);
  }
}

void sub_1BAADBD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45,int a46,__int16 a47,char a48,char a49,int a50,__int16 a51,char a52,char a53,int a54,__int16 a55,char a56,char a57)
{
  __cxa_free_exception(v57);
  _Unwind_Resume(a1);
}

char *std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      long long v9 = a2[1];
      long long v10 = a2[2];
      *(void *)(v7 + 48) = *((void *)a2 + 6);
      *(_OWORD *)(v7 + 16) = v9;
      *(_OWORD *)(v7 + 32) = v10;
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 56;
      a2 = (long long *)((char *)a2 + 56);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BAADC1FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(long long **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a3, *(long long **)a2, *(long long **)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
      CFNumberRef v11 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, cf);
        CFNumberRef v11 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v10) {
        goto LABEL_25;
      }
      CFStringRef v12 = *(void (**)(uint64_t, uint64_t, void, void *))(a3 + 32);
      v86[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v86);
        CFStringRef v12 = (void (*)(uint64_t, uint64_t, void, void *))v86[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, void *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<CA::RangedStreamDescription>>((uint64_t)cf, a2);
        AMCP::Thing::convert_to<std::vector<CA::RangedStreamDescription>>((uint64_t)v86, a3);
        CFStringRef v16 = (void *)cf[0];
        CFStringRef v17 = (char *)cf[1];
        CFStringRef v18 = (void *)v86[0];
        if ((char *)cf[1] - (char *)cf[0] == v86[1] - v86[0])
        {
          if (cf[0] == cf[1])
          {
            char v22 = 1;
            if (!v86[0])
            {
LABEL_34:
              if (v16) {
                operator delete(v16);
              }
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          uint64_t v19 = v86[0];
          double v20 = (char *)cf[0];
          do
          {
            BOOL v21 = std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>((uint64_t)v20, v19);
            char v22 = v21;
            if (!v21) {
              break;
            }
            v20 += 56;
            v19 += 56;
          }
          while (v20 != v17);
        }
        else
        {
          char v22 = 0;
        }
        if (!v18) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
        CFStringRef v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFStringRef v13 = 0;
      }
      cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
      CFStringRef v58 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
      uint64_t v59 = *v13;
      uint64_t v60 = v13[1];
      uint64_t v61 = v60 - *v13;
      uint64_t v62 = *v58;
      if (v61 == v58[1] - *v58)
      {
        while (v59 != v60)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>(v59, v62))return 0; {
          v59 += 56;
          }
          v62 += 56;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_79;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
        CFStringRef v15 = (long long **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFStringRef v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
      {
        if (v15)
        {
          int v23 = *v15;
          int v24 = v15[1];
          uint64_t v25 = (char *)v24 - (char *)*v15;
          if (v24 == *v15)
          {
            long long v28 = 0uLL;
          }
          else
          {
            unint64_t v26 = 0x6DB6DB6DB6DB6DB7 * (v25 >> 3);
            if (v26 >= 0x492492492492493) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            int v27 = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v26);
            *(void *)&long long v28 = v27;
            uint64_t v25 = (uint64_t)&v27[7 * v29];
            do
            {
              long long v30 = *v23;
              long long v31 = v23[1];
              long long v32 = v23[2];
              v27[6] = *((void *)v23 + 6);
              *((_OWORD *)v27 + 1) = v31;
              *((_OWORD *)v27 + 2) = v32;
              *(_OWORD *)int v27 = v30;
              v27 += 7;
              int v23 = (long long *)((char *)v23 + 56);
            }
            while (v23 != v24);
            *((void *)&v28 + 1) = v27;
          }
          *(_OWORD *)CFTypeRef cf = v28;
          long long v84 = (unint64_t)v25;
          CFNumberRef v33 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
          goto LABEL_82;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
      {
        if (v15)
        {
          int v85 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v84 = 0u;
          std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)cf, *v15, v15[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v15[1] - (char *)*v15) >> 3));
          CFNumberRef v33 = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
LABEL_82:
          int v85 = v33;
LABEL_83:
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
          if (v85) {
            ((void (*)(void, CFTypeRef *, void, void))v85)(0, cf, 0, 0);
          }
          return 0;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
LABEL_79:
          int v85 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v84 = 0u;
          goto LABEL_83;
        }
        if (v15)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
          v86[0] = Mutable;
          unint64_t v36 = *v15;
          uint64_t v35 = v15[1];
          if (*v15 != v35)
          {
            do
            {
              unint64_t v37 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
              valuePtr[1] = v37;
              CFStringRef v38 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
              valuePtr[0] = v38;
              if (!v38)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = *(CFTypeRef *)v36;
              CFNumberRef v39 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v39)
              {
                int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v64, "Could not construct");
                __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v38, v39);
              CFRelease(v39);
              CFRelease(v38);
              CFStringRef v40 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
              cf[0] = v40;
              if (!v40)
              {
                int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
                __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 2);
              CFNumberRef v41 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v41)
              {
                int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v66, "Could not construct");
                __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v40, v41);
              CFRelease(v41);
              CFRelease(v40);
              CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
              cf[0] = v42;
              if (!v42)
              {
                unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v67, "Could not construct");
                __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 3);
              CFNumberRef v43 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v43)
              {
                unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v68, "Could not construct");
                __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v42, v43);
              CFRelease(v43);
              CFRelease(v42);
              CFStringRef v44 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
              cf[0] = v44;
              if (!v44)
              {
                unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v69, "Could not construct");
                __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 4);
              CFNumberRef v45 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v45)
              {
                unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v70, "Could not construct");
                __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v44, v45);
              CFRelease(v45);
              CFRelease(v44);
              CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
              cf[0] = v46;
              if (!v46)
              {
                unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v71, "Could not construct");
                __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 5);
              CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v47)
              {
                unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v72, "Could not construct");
                __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v46, v47);
              CFRelease(v47);
              CFRelease(v46);
              CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
              cf[0] = v48;
              if (!v48)
              {
                unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v73, "Could not construct");
                __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 6);
              CFNumberRef v49 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v49)
              {
                unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v74, "Could not construct");
                __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v48, v49);
              CFRelease(v49);
              CFRelease(v48);
              CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
              cf[0] = v50;
              if (!v50)
              {
                uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v75, "Could not construct");
                __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 7);
              CFNumberRef v51 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v51)
              {
                unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v76, "Could not construct");
                __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v50, v51);
              CFRelease(v51);
              CFRelease(v50);
              CFStringRef v52 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
              cf[0] = v52;
              if (!v52)
              {
                uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v77, "Could not construct");
                __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 8);
              CFNumberRef v53 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v53)
              {
                uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v78, "Could not construct");
                __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v52, v53);
              CFRelease(v53);
              CFRelease(v52);
              CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
              valuePtr[0] = v54;
              if (!v54)
              {
                long long v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v79, "Could not construct");
                __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = *((CFTypeRef *)v36 + 5);
              CFNumberRef v55 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v55)
              {
                long long v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v80, "Could not construct");
                __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v54, v55);
              CFRelease(v55);
              CFRelease(v54);
              CFStringRef v56 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
              valuePtr[0] = v56;
              if (!v56)
              {
                uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v81, "Could not construct");
                __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = *((CFTypeRef *)v36 + 6);
              CFNumberRef v57 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v57)
              {
                uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v82, "Could not construct");
                __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v56, v57);
              CFRelease(v57);
              CFRelease(v56);
              mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, v37);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf[0]);
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              if (v37) {
                CFRelease(v37);
              }
              unint64_t v36 = (long long *)((char *)v36 + 56);
            }
            while (v36 != v35);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
          cf[1] = 0;
          long long v84 = 0uLL;
          int v85 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_83;
        }
      }
      __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAADD088(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
}

BOOL std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 48);
  double v3 = *(double *)(a2 + 40);
  if (v2 >= v3
    && ((v4 = *(double *)(a1 + 40), v5 = *(double *)(a2 + 48), v4 < v3) ? (BOOL v6 = v2 > v5) : (BOOL v6 = 1),
        v6
     && (v4 < v3 ? (BOOL v7 = v2 <= v5) : (BOOL v7 = 1),
         v7
      && (v4 == v3 ? (BOOL v8 = v2 == v5) : (BOOL v8 = 0),
          v8
       && *(double *)a1 == *(double *)a2
       && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
       && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
       && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
       && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
       && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
       && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)))))
  {
    return *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  else
  {
    return 0;
  }
}

char *AMCP::Thing::convert_to<std::vector<CA::RangedStreamDescription>>(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
  double v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    double v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    BOOL v6 = (long long **)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      return std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a1, *v6, v6[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v6[1] - (char *)*v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>();
  memset(v17, 0, sizeof(v17));
  CFStringRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFNumberRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  BOOL v8 = (long long **)v18(4, v17, 0, &v15);
  if (!v8)
  {
    CFStringRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t result = std::vector<CA::RangedStreamDescription>::__init_with_size[abi:ne180100]<CA::RangedStreamDescription*,CA::RangedStreamDescription*>((char *)a1, *v8, v8[1], 0x6DB6DB6DB6DB6DB7 * (((char *)v8[1] - (char *)*v8) >> 3));
  if (v18) {
    return (char *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAADD534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      BOOL v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
      CFNumberRef v11 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, cf);
        CFNumberRef v11 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v10) {
        goto LABEL_25;
      }
      CFStringRef v12 = *(void (**)(uint64_t, uint64_t, void, void *))(a3 + 32);
      v86[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v86);
        CFStringRef v12 = (void (*)(uint64_t, uint64_t, void, void *))v86[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, void *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<AudioStreamRangedDescription>>(cf, a2);
        AMCP::Thing::convert_to<std::vector<AudioStreamRangedDescription>>(v86, a3);
        uint64_t v16 = (void *)cf[0];
        CFStringRef v17 = (char *)cf[1];
        CFStringRef v18 = (void *)v86[0];
        if ((char *)cf[1] - (char *)cf[0] == v86[1] - v86[0])
        {
          if (cf[0] == cf[1])
          {
            char v22 = 1;
            if (!v86[0])
            {
LABEL_34:
              if (v16) {
                operator delete(v16);
              }
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          uint64_t v19 = v86[0];
          double v20 = (char *)cf[0];
          do
          {
            BOOL v21 = std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>((uint64_t)v20, v19);
            char v22 = v21;
            if (!v21) {
              break;
            }
            v20 += 56;
            v19 += 56;
          }
          while (v20 != v17);
        }
        else
        {
          char v22 = 0;
        }
        if (!v18) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
        CFStringRef v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFStringRef v13 = 0;
      }
      cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
      CFStringRef v58 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
      uint64_t v59 = *v13;
      uint64_t v60 = v13[1];
      uint64_t v61 = v60 - *v13;
      uint64_t v62 = *v58;
      if (v61 == v58[1] - *v58)
      {
        while (v59 != v60)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::RangedStreamDescription,CA::RangedStreamDescription>(v59, v62))return 0; {
          v59 += 56;
          }
          v62 += 56;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_79;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>())
      {
        if (v15)
        {
          int v85 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v84 = 0u;
          std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(cf, *(const void **)v15, *(void *)(v15 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3));
          int v23 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamRangedDescription>>::dispatch;
LABEL_89:
          int v85 = (uint64_t (*)())v23;
LABEL_90:
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
          if (v85) {
            ((void (*)(void, CFTypeRef *, void, void))v85)(0, cf, 0, 0);
          }
          return 0;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::RangedStreamDescription>>())
      {
        if (v15)
        {
          int v24 = *(_OWORD **)v15;
          uint64_t v25 = *(_OWORD **)(v15 + 8);
          uint64_t v26 = (uint64_t)v25 - *(void *)v15;
          if (v25 == *(_OWORD **)v15)
          {
            long long v29 = 0uLL;
          }
          else
          {
            unint64_t v27 = 0x6DB6DB6DB6DB6DB7 * (v26 >> 3);
            if (v27 >= 0x492492492492493) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            long long v28 = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v27);
            *(void *)&long long v29 = v28;
            uint64_t v26 = (uint64_t)&v28[7 * v30];
            do
            {
              long long v31 = *v24;
              long long v32 = v24[1];
              long long v33 = v24[2];
              v28[6] = *((void *)v24 + 6);
              *((_OWORD *)v28 + 1) = v32;
              *((_OWORD *)v28 + 2) = v33;
              *(_OWORD *)long long v28 = v31;
              v28 += 7;
              int v24 = (_OWORD *)((char *)v24 + 56);
            }
            while (v24 != v25);
            *((void *)&v29 + 1) = v28;
          }
          *(_OWORD *)CFTypeRef cf = v29;
          long long v84 = (unint64_t)v26;
          int v23 = AMCP::Implementation::In_Place_Storage<std::vector<CA::RangedStreamDescription>>::dispatch;
          goto LABEL_89;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
LABEL_79:
          int v85 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v84 = 0u;
          goto LABEL_90;
        }
        if (v15)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
          v86[0] = Mutable;
          unint64_t v36 = *(CFTypeRef **)v15;
          uint64_t v35 = *(CFTypeRef **)(v15 + 8);
          if (*(CFTypeRef **)v15 != v35)
          {
            do
            {
              unint64_t v37 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
              valuePtr[1] = v37;
              CFStringRef v38 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
              valuePtr[0] = v38;
              if (!v38)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = *v36;
              CFNumberRef v39 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v39)
              {
                int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v64, "Could not construct");
                __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v38, v39);
              CFRelease(v39);
              CFRelease(v38);
              CFStringRef v40 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
              cf[0] = v40;
              if (!v40)
              {
                int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
                __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 2);
              CFNumberRef v41 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v41)
              {
                int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v66, "Could not construct");
                __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v40, v41);
              CFRelease(v41);
              CFRelease(v40);
              CFStringRef v42 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
              cf[0] = v42;
              if (!v42)
              {
                unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v67, "Could not construct");
                __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 3);
              CFNumberRef v43 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v43)
              {
                unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v68, "Could not construct");
                __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v42, v43);
              CFRelease(v43);
              CFRelease(v42);
              CFStringRef v44 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
              cf[0] = v44;
              if (!v44)
              {
                unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v69, "Could not construct");
                __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 4);
              CFNumberRef v45 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v45)
              {
                unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v70, "Could not construct");
                __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v44, v45);
              CFRelease(v45);
              CFRelease(v44);
              CFStringRef v46 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
              cf[0] = v46;
              if (!v46)
              {
                unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v71, "Could not construct");
                __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 5);
              CFNumberRef v47 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v47)
              {
                unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v72, "Could not construct");
                __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v46, v47);
              CFRelease(v47);
              CFRelease(v46);
              CFStringRef v48 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
              cf[0] = v48;
              if (!v48)
              {
                unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v73, "Could not construct");
                __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 6);
              CFNumberRef v49 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v49)
              {
                unint64_t v74 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v74, "Could not construct");
                __cxa_throw(v74, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v48, v49);
              CFRelease(v49);
              CFRelease(v48);
              CFStringRef v50 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
              cf[0] = v50;
              if (!v50)
              {
                uint64_t v75 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v75, "Could not construct");
                __cxa_throw(v75, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 7);
              CFNumberRef v51 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v51)
              {
                unint64_t v76 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v76, "Could not construct");
                __cxa_throw(v76, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v50, v51);
              CFRelease(v51);
              CFRelease(v50);
              CFStringRef v52 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
              cf[0] = v52;
              if (!v52)
              {
                uint64_t v77 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v77, "Could not construct");
                __cxa_throw(v77, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v36 + 8);
              CFNumberRef v53 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v53)
              {
                uint64_t v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v78, "Could not construct");
                __cxa_throw(v78, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v52, v53);
              CFRelease(v53);
              CFRelease(v52);
              CFStringRef v54 = CFStringCreateWithBytes(0, (const UInt8 *)"minimum", 7, 0x8000100u, 0);
              valuePtr[0] = v54;
              if (!v54)
              {
                long long v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v79, "Could not construct");
                __cxa_throw(v79, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = v36[5];
              CFNumberRef v55 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v55)
              {
                long long v80 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v80, "Could not construct");
                __cxa_throw(v80, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v54, v55);
              CFRelease(v55);
              CFRelease(v54);
              CFStringRef v56 = CFStringCreateWithBytes(0, (const UInt8 *)"maximum", 7, 0x8000100u, 0);
              valuePtr[0] = v56;
              if (!v56)
              {
                uint64_t v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v81, "Could not construct");
                __cxa_throw(v81, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = v36[6];
              CFNumberRef v57 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v57)
              {
                uint64_t v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v82, "Could not construct");
                __cxa_throw(v82, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v37, v56, v57);
              CFRelease(v57);
              CFRelease(v56);
              mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, v37);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf[0]);
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              if (v37) {
                CFRelease(v37);
              }
              v36 += 7;
            }
            while (v36 != v35);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
          cf[1] = 0;
          long long v84 = 0uLL;
          int v85 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_90;
        }
      }
      __assert_rtn("create_vector_of_asrds_from", "Thing.h", 2005, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAADE3C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
}

void *std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v6 = result;
    uint64_t result = std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAADE620(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Thing::convert_to<std::vector<AudioStreamRangedDescription>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
  double v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    double v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(a1, *(const void **)v6, *(void *)(v6 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamRangedDescription>>();
  memset(v17, 0, sizeof(v17));
  CFStringRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFNumberRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    CFStringRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<AudioStreamRangedDescription>::__init_with_size[abi:ne180100]<AudioStreamRangedDescription*,AudioStreamRangedDescription*>(a1, *(const void **)v8, *(void *)(v8 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3));
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAADE820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

char *std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[211];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[213];
}

void *std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAADE9C4(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(unint64_t a1)
{
  if (a1 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a1);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
      CFNumberRef v11 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, cf);
        CFNumberRef v11 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v10) {
        goto LABEL_25;
      }
      CFStringRef v12 = *(void (**)(uint64_t, uint64_t, void, void *))(a3 + 32);
      v77[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v77);
        CFStringRef v12 = (void (*)(uint64_t, uint64_t, void, void *))v77[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, void *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<CA::StreamDescription>>(cf, a2);
        AMCP::Thing::convert_to<std::vector<CA::StreamDescription>>(v77, a3);
        uint64_t v16 = (void *)cf[0];
        CFStringRef v17 = (char *)cf[1];
        CFStringRef v18 = (void *)v77[0];
        if ((char *)cf[1] - (char *)cf[0] == v77[1] - v77[0])
        {
          if (cf[0] == cf[1])
          {
            char v22 = 1;
            if (!v77[0])
            {
LABEL_34:
              if (v16) {
                operator delete(v16);
              }
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          uint64_t v19 = v77[0];
          double v20 = (char *)cf[0];
          do
          {
            BOOL v21 = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>((uint64_t)v20, v19);
            char v22 = v21;
            if (!v21) {
              break;
            }
            v20 += 40;
            v19 += 40;
          }
          while (v20 != v17);
        }
        else
        {
          char v22 = 0;
        }
        if (!v18) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
        CFStringRef v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFStringRef v13 = 0;
      }
      cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
      CFNumberRef v53 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
      uint64_t v54 = *v13;
      uint64_t v55 = v13[1];
      uint64_t v56 = v55 - *v13;
      uint64_t v57 = *v53;
      if (v56 == v53[1] - *v53)
      {
        while (v54 != v55)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v54, v57)) {
            return 0;
          }
          v54 += 40;
          v57 += 40;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_75;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
      {
        if (v15)
        {
          int v24 = *(char **)v15;
          int v23 = *(char **)(v15 + 8);
          if (v23 == v24)
          {
            unint64_t v27 = 0;
            uint64_t v32 = 0;
          }
          else
          {
            unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 3);
            if (v25 >= 0x666666666666667) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v25);
            unint64_t v27 = v26;
            uint64_t v28 = 0;
            do
            {
              long long v29 = &v26[v28];
              long long v30 = *(_OWORD *)&v24[v28];
              long long v31 = *(_OWORD *)&v24[v28 + 16];
              *((void *)v29 + 4) = *(void *)&v24[v28 + 32];
              *(_OWORD *)long long v29 = v30;
              *((_OWORD *)v29 + 1) = v31;
              v28 += 40;
            }
            while (&v24[v28] != v23);
            uint64_t v32 = (uint64_t)&v26[v28];
          }
          unint64_t v76 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v75 = 0u;
          std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(cf, v27, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v27) >> 3));
          unint64_t v76 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
          if (v27) {
            operator delete(v27);
          }
          goto LABEL_79;
        }
LABEL_90:
        __assert_rtn("create_vector_of_asbds_from", "Thing.h", 1807, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
      {
        if (!v15) {
          goto LABEL_90;
        }
        unint64_t v76 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v75 = 0u;
        std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(cf, *(const void **)v15, *(void *)(v15 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3));
        unint64_t v76 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
      }
      else
      {
        if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
          if (v15)
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
            v77[0] = Mutable;
            CFStringRef v34 = *(CFTypeRef **)v15;
            uint64_t v35 = *(CFTypeRef **)(v15 + 8);
            if (*(CFTypeRef **)v15 != v35)
            {
              do
              {
                unint64_t v36 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
                valuePtr[1] = v36;
                CFStringRef v37 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
                valuePtr[0] = v37;
                if (!v37)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                cf[0] = *v34;
                CFNumberRef v38 = CFNumberCreate(0, kCFNumberDoubleType, cf);
                if (!v38)
                {
                  uint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v59, "Could not construct");
                  __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v37, v38);
                CFRelease(v38);
                CFRelease(v37);
                CFStringRef v39 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
                cf[0] = v39;
                if (!v39)
                {
                  uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v60, "Could not construct");
                  __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 2);
                CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v40)
                {
                  uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v61, "Could not construct");
                  __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v39, v40);
                CFRelease(v40);
                CFRelease(v39);
                CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
                cf[0] = v41;
                if (!v41)
                {
                  uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v62, "Could not construct");
                  __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 3);
                CFNumberRef v42 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v42)
                {
                  int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v63, "Could not construct");
                  __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v41, v42);
                CFRelease(v42);
                CFRelease(v41);
                CFStringRef v43 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
                cf[0] = v43;
                if (!v43)
                {
                  int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v64, "Could not construct");
                  __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 4);
                CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v44)
                {
                  int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v65, "Could not construct");
                  __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v43, v44);
                CFRelease(v44);
                CFRelease(v43);
                CFStringRef v45 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
                cf[0] = v45;
                if (!v45)
                {
                  int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v66, "Could not construct");
                  __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 5);
                CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v46)
                {
                  unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v67, "Could not construct");
                  __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v45, v46);
                CFRelease(v46);
                CFRelease(v45);
                CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
                cf[0] = v47;
                if (!v47)
                {
                  unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v68, "Could not construct");
                  __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 6);
                CFNumberRef v48 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v48)
                {
                  unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v69, "Could not construct");
                  __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v47, v48);
                CFRelease(v48);
                CFRelease(v47);
                CFStringRef v49 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
                cf[0] = v49;
                if (!v49)
                {
                  unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v70, "Could not construct");
                  __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 7);
                CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v50)
                {
                  unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v71, "Could not construct");
                  __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v49, v50);
                CFRelease(v50);
                CFRelease(v49);
                CFStringRef v51 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
                cf[0] = v51;
                if (!v51)
                {
                  unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v72, "Could not construct");
                  __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 8);
                CFNumberRef v52 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
                if (!v52)
                {
                  unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v73, "Could not construct");
                  __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v51, v52);
                CFRelease(v52);
                CFRelease(v51);
                mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, v36);
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf[0]);
                if (cf[0]) {
                  CFRelease(cf[0]);
                }
                if (v36) {
                  CFRelease(v36);
                }
                v34 += 5;
              }
              while (v34 != v35);
            }
            mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
            cf[1] = 0;
            long long v75 = 0uLL;
            unint64_t v76 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
            if (Mutable) {
              CFRelease(Mutable);
            }
            goto LABEL_79;
          }
          goto LABEL_90;
        }
LABEL_75:
        unint64_t v76 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v75 = 0u;
      }
LABEL_79:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
      if (v76) {
        v76(0, (uint64_t)cf, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAADF6E4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    operator delete(v21);
  }
  __clang_call_terminate(a1);
}

BOOL std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)
      && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
      && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
      && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
      && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
}

void *AMCP::Thing::convert_to<std::vector<CA::StreamDescription>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
  double v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    double v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(a1, *(const void **)v6, *(void *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>();
  memset(v17, 0, sizeof(v17));
  CFStringRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFNumberRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    CFStringRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(a1, *(const void **)v8, *(void *)(v8 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3));
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAADFB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAADFB94(_Unwind_Exception *exception_object)
{
  double v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
      CFNumberRef v11 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      cf[0] = 0;
      if (v11)
      {
        v11(3, a2, 0, cf);
        CFNumberRef v11 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v10) {
        goto LABEL_25;
      }
      CFStringRef v12 = *(void (**)(uint64_t, uint64_t, void, void *))(a3 + 32);
      v77[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, v77);
        CFStringRef v12 = (void (*)(uint64_t, uint64_t, void, void *))v77[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, void *))v10)
      {
LABEL_25:
        AMCP::Thing::convert_to<std::vector<AudioStreamBasicDescription>>(cf, a2);
        AMCP::Thing::convert_to<std::vector<AudioStreamBasicDescription>>(v77, a3);
        uint64_t v16 = (void *)cf[0];
        CFStringRef v17 = (char *)cf[1];
        CFStringRef v18 = (void *)v77[0];
        if ((char *)cf[1] - (char *)cf[0] == v77[1] - v77[0])
        {
          if (cf[0] == cf[1])
          {
            char v22 = 1;
            if (!v77[0])
            {
LABEL_34:
              if (v16) {
                operator delete(v16);
              }
              return (v22 & 1) != 0;
            }
LABEL_33:
            operator delete(v18);
            goto LABEL_34;
          }
          uint64_t v19 = v77[0];
          double v20 = (char *)cf[0];
          do
          {
            BOOL v21 = std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>((uint64_t)v20, v19);
            char v22 = v21;
            if (!v21) {
              break;
            }
            v20 += 40;
            v19 += 40;
          }
          while (v20 != v17);
        }
        else
        {
          char v22 = 0;
        }
        if (!v18) {
          goto LABEL_34;
        }
        goto LABEL_33;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
        CFStringRef v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        CFStringRef v13 = 0;
      }
      cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
      CFNumberRef v53 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, cf);
      uint64_t v54 = *v13;
      uint64_t v55 = v13[1];
      uint64_t v56 = v55 - *v13;
      uint64_t v57 = *v53;
      if (v56 == v53[1] - *v53)
      {
        while (v54 != v55)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<CA::StreamDescription,CA::StreamDescription>(v54, v57)) {
            return 0;
          }
          v54 += 40;
          v57 += 40;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_75;
      }
      if (*(void *)(a2 + 32))
      {
        cf[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, cf);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>())
      {
        if (v15)
        {
          unint64_t v76 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v75 = 0u;
          std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(cf, *(const void **)v15, *(void *)(v15 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v15 + 8) - *(void *)v15) >> 3));
          unint64_t v76 = AMCP::Implementation::In_Place_Storage<std::vector<AudioStreamBasicDescription>>::dispatch;
          goto LABEL_86;
        }
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<CA::StreamDescription>>())
      {
        if (v15)
        {
          int v24 = *(char **)v15;
          int v23 = *(char **)(v15 + 8);
          if (v23 == v24)
          {
            unint64_t v27 = 0;
            uint64_t v32 = 0;
          }
          else
          {
            unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v24) >> 3);
            if (v25 >= 0x666666666666667) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v25);
            unint64_t v27 = v26;
            uint64_t v28 = 0;
            do
            {
              long long v29 = &v26[v28];
              long long v30 = *(_OWORD *)&v24[v28];
              long long v31 = *(_OWORD *)&v24[v28 + 16];
              *((void *)v29 + 4) = *(void *)&v24[v28 + 32];
              *(_OWORD *)long long v29 = v30;
              *((_OWORD *)v29 + 1) = v31;
              v28 += 40;
            }
            while (&v24[v28] != v23);
            uint64_t v32 = (uint64_t)&v26[v28];
          }
          unint64_t v76 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v75 = 0u;
          std::vector<CA::StreamDescription>::__init_with_size[abi:ne180100]<CA::StreamDescription*,CA::StreamDescription*>(cf, v27, v32, 0xCCCCCCCCCCCCCCCDLL * ((v32 - (uint64_t)v27) >> 3));
          unint64_t v76 = AMCP::Implementation::In_Place_Storage<std::vector<CA::StreamDescription>>::dispatch;
          if (v27) {
            operator delete(v27);
          }
          goto LABEL_86;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
        {
LABEL_75:
          unint64_t v76 = 0;
          *(_OWORD *)CFTypeRef cf = 0u;
          long long v75 = 0u;
LABEL_86:
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
          if (v76) {
            ((void (*)(void, CFTypeRef *, void, void))v76)(0, cf, 0, 0);
          }
          return 0;
        }
        if (v15)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
          v77[0] = Mutable;
          CFStringRef v34 = *(CFTypeRef **)v15;
          uint64_t v35 = *(CFTypeRef **)(v15 + 8);
          if (*(CFTypeRef **)v15 != v35)
          {
            do
            {
              unint64_t v36 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
              valuePtr[1] = v36;
              CFStringRef v37 = CFStringCreateWithBytes(0, (const UInt8 *)"sample rate", 11, 0x8000100u, 0);
              valuePtr[0] = v37;
              if (!v37)
              {
                exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              cf[0] = *v34;
              CFNumberRef v38 = CFNumberCreate(0, kCFNumberDoubleType, cf);
              if (!v38)
              {
                uint64_t v59 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v59, "Could not construct");
                __cxa_throw(v59, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v37, v38);
              CFRelease(v38);
              CFRelease(v37);
              CFStringRef v39 = CFStringCreateWithBytes(0, (const UInt8 *)"format id", 9, 0x8000100u, 0);
              cf[0] = v39;
              if (!v39)
              {
                uint64_t v60 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v60, "Could not construct");
                __cxa_throw(v60, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 2);
              CFNumberRef v40 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v40)
              {
                uint64_t v61 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v61, "Could not construct");
                __cxa_throw(v61, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v39, v40);
              CFRelease(v40);
              CFRelease(v39);
              CFStringRef v41 = CFStringCreateWithBytes(0, (const UInt8 *)"format flags", 12, 0x8000100u, 0);
              cf[0] = v41;
              if (!v41)
              {
                uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v62, "Could not construct");
                __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 3);
              CFNumberRef v42 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v42)
              {
                int v63 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v63, "Could not construct");
                __cxa_throw(v63, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v41, v42);
              CFRelease(v42);
              CFRelease(v41);
              CFStringRef v43 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per packet", 16, 0x8000100u, 0);
              cf[0] = v43;
              if (!v43)
              {
                int v64 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v64, "Could not construct");
                __cxa_throw(v64, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 4);
              CFNumberRef v44 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v44)
              {
                int v65 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v65, "Could not construct");
                __cxa_throw(v65, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v43, v44);
              CFRelease(v44);
              CFRelease(v43);
              CFStringRef v45 = CFStringCreateWithBytes(0, (const UInt8 *)"frames per packet", 17, 0x8000100u, 0);
              cf[0] = v45;
              if (!v45)
              {
                int v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v66, "Could not construct");
                __cxa_throw(v66, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 5);
              CFNumberRef v46 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v46)
              {
                unsigned int v67 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v67, "Could not construct");
                __cxa_throw(v67, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v45, v46);
              CFRelease(v46);
              CFRelease(v45);
              CFStringRef v47 = CFStringCreateWithBytes(0, (const UInt8 *)"bytes per frame", 15, 0x8000100u, 0);
              cf[0] = v47;
              if (!v47)
              {
                unsigned int v68 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v68, "Could not construct");
                __cxa_throw(v68, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 6);
              CFNumberRef v48 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v48)
              {
                unint64_t v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v69, "Could not construct");
                __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v47, v48);
              CFRelease(v48);
              CFRelease(v47);
              CFStringRef v49 = CFStringCreateWithBytes(0, (const UInt8 *)"channels per frame", 18, 0x8000100u, 0);
              cf[0] = v49;
              if (!v49)
              {
                unint64_t v70 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v70, "Could not construct");
                __cxa_throw(v70, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 7);
              CFNumberRef v50 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v50)
              {
                unint64_t v71 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v71, "Could not construct");
                __cxa_throw(v71, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v49, v50);
              CFRelease(v50);
              CFRelease(v49);
              CFStringRef v51 = CFStringCreateWithBytes(0, (const UInt8 *)"bits per channel", 16, 0x8000100u, 0);
              cf[0] = v51;
              if (!v51)
              {
                unint64_t v72 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v72, "Could not construct");
                __cxa_throw(v72, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              LODWORD(valuePtr[0]) = *((_DWORD *)v34 + 8);
              CFNumberRef v52 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
              if (!v52)
              {
                unint64_t v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v73, "Could not construct");
                __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v36, v51, v52);
              CFRelease(v52);
              CFRelease(v51);
              mcp_applesauce::CF::Dictionary_Builder::copy_dictionary((applesauce::CF::DictionaryRef *)cf, v36);
              mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf[0]);
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              if (v36) {
                CFRelease(v36);
              }
              v34 += 5;
            }
            while (v34 != v35);
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)cf, Mutable);
          cf[1] = 0;
          long long v75 = 0uLL;
          unint64_t v76 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_86;
        }
      }
      __assert_rtn("create_vector_of_asbds_from", "Thing.h", 1807, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAAE0864(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21)
{
  if (v21) {
    operator delete(v21);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<AudioStreamBasicDescription>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
  double v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    double v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(a1, *(const void **)v6, *(void *)(v6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<AudioStreamBasicDescription>>();
  memset(v17, 0, sizeof(v17));
  CFStringRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFNumberRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    CFStringRef v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFStringRef v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<AudioStreamBasicDescription>::__init_with_size[abi:ne180100]<AudioStreamBasicDescription*,AudioStreamBasicDescription*>(a1, *(const void **)v8, *(void *)(v8 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3));
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE0C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

char *std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[209];
}

void *std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a4);
    uint64_t v7 = result;
    void *v6 = result;
    v6[1] = result;
    _OWORD v6[2] = &result[2 * v8];
    while (a2 != a3)
    {
      *(_DWORD *)uint64_t v7 = *(_DWORD *)a2;
      *((_DWORD *)v7 + 1) = *(_DWORD *)(a2 + 4);
      uint64_t result = std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100](v7 + 1, *(CFTypeRef *)(a2 + 8));
      v7 += 2;
      a2 += 16;
    }
    v6[1] = v7;
  }
  return result;
}

void sub_1BAAE0D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::emplace_back<unsigned int &,unsigned int &,applesauce::CF::StringRef&>(uint64_t *a1, _DWORD *a2, _DWORD *a3, CFTypeRef *a4)
{
  uint64_t v8 = a1 + 2;
  unint64_t v9 = a1[2];
  unint64_t v10 = a1[1];
  if (v10 >= v9)
  {
    uint64_t v13 = (uint64_t)(v10 - *a1) >> 4;
    if ((unint64_t)(v13 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = v9 - *a1;
    uint64_t v15 = v14 >> 3;
    if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
      uint64_t v15 = v13 + 1;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    v19[4] = v8;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    unint64_t v18 = v16 + 16 * v13;
    v19[0] = v16;
    v19[1] = v18;
    void v19[3] = v16 + 16 * v17;
    *(_DWORD *)unint64_t v18 = *a2;
    *(_DWORD *)(v18 + 4) = *a3;
    std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((void *)(v18 + 8), *a4);
    _OWORD v19[2] = v18 + 16;
    std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__swap_out_circular_buffer(a1, v19);
    uint64_t v12 = a1[1];
    uint64_t result = std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer((uint64_t)v19);
  }
  else
  {
    *(_DWORD *)unint64_t v10 = *a2;
    *(_DWORD *)(v10 + 4) = *a3;
    uint64_t result = (uint64_t)std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>((void *)(v10 + 8), *a4);
    uint64_t v12 = v10 + 16;
  }
  a1[1] = v12;
  return result;
}

void std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (const void **)**a1;
  if (v2)
  {
    uint64_t v4 = (const void **)v1[1];
    double v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;
        std::__destroy_at[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>,0>(*(v4 - 1));
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      double v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch(int a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  switch(a1)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>((void *)a3, *a2, a2[1], (a2[1] - *a2) >> 4);
      uint64_t v4 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
      return v4;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = a2[2];
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
LABEL_7:
      *(void *)&long long v41 = a2;
      std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      uint64_t v4 = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return v4;
    case 3:
      uint64_t v4 = 0;
      *a4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
      return v4;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()) {
        return (uint64_t)a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
      unint64_t v9 = (void (*)(uint64_t, uint64_t *, void, long long *))a2[4];
      *(void *)&long long v41 = 0;
      if (v9)
      {
        v9(3, a2, 0, &v41);
        unint64_t v9 = (void (*)(uint64_t, uint64_t *, void, long long *))v41;
      }
      if (v9 != (void (*)(uint64_t, uint64_t *, void, long long *))v8) {
        goto LABEL_21;
      }
      unint64_t v10 = *(void ***)(a3 + 32);
      v44[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, uint64_t, void, void ***))v10)(3, a3, 0, v44);
        unint64_t v10 = v44[0];
      }
      if (v10 != (void **)v8)
      {
LABEL_21:
        AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(&v41, (uint64_t)a2);
        AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(v44, a3);
        uint64_t v14 = *((void *)&v41 + 1);
        uint64_t v15 = v41;
        unint64_t v16 = v44[0];
        if ((void **)(*((void *)&v41 + 1) - v41) != (void **)((char *)v44[1] - (char *)v44[0]))
        {
LABEL_30:
          CFTypeRef cf = v44;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
          v44[0] = (void **)&v41;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](v44);
          return 0;
        }
        while (v15 != v14)
        {
          if (*(_DWORD *)v15 != *(_DWORD *)v16 || *(_DWORD *)(v15 + 4) != *((_DWORD *)v16 + 1)) {
            goto LABEL_30;
          }
          unint64_t v18 = v16 + 1;
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v15 + 8), (const __CFString **)v16 + 1))
          {
            goto LABEL_30;
          }
          v15 += 16;
          unint64_t v16 = v18 + 1;
        }
        CFTypeRef cf = v44;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
        v44[0] = (void **)&v41;
        std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](v44);
        return 1;
      }
      if (a2[4])
      {
        *(void *)&long long v41 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
        CFNumberRef v11 = (void *)((uint64_t (*)(uint64_t, uint64_t *, void, long long *))a2[4])(4, a2, 0, &v41);
      }
      else
      {
        CFNumberRef v11 = 0;
      }
      *(void *)&long long v41 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
      long long v29 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v41);
      uint64_t v32 = v11;
      uint64_t v30 = *v11;
      uint64_t v31 = v32[1];
      uint64_t v33 = *v29;
      if (v31 - v30 == v29[1] - *v29)
      {
        if (v30 != v31)
        {
          uint64_t v4 = 1;
          while (*(_DWORD *)v30 == *(_DWORD *)v33 && *(_DWORD *)(v30 + 4) == *(_DWORD *)(v33 + 4))
          {
            uint64_t v35 = v33 + 8;
            if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v30 + 8), (const __CFString **)(v33 + 8)))
            {
              break;
            }
            v30 += 16;
            uint64_t v33 = v35 + 8;
            if (v30 == v31) {
              return v4;
            }
          }
          return 0;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_50;
      }
      if (a2[4])
      {
        *(void *)&long long v41 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
        uint64_t v13 = (uint64_t *)((uint64_t (*)(uint64_t, uint64_t *, void, long long *))a2[4])(4, a2, 0, &v41);
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>())
      {
        if (v13)
        {
          CFStringRef v43 = 0;
          long long v41 = 0u;
          long long v42 = 0u;
          std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(&v41, *v13, v13[1], (v13[1] - *v13) >> 4);
          CFStringRef v43 = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
          goto LABEL_51;
        }
LABEL_69:
        __assert_rtn("create_vector_of_selector_items_from", "Thing.h", 1426, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        if (v13)
        {
          CFMutableArrayRef Mutable = (void **)CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
          v44[0] = Mutable;
          uint64_t v21 = *v13;
          for (uint64_t i = v13[1]; v21 != i; v21 += 16)
          {
            char v22 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
            *(void *)&long long v41 = v22;
            CFStringRef v23 = CFStringCreateWithBytes(0, (const UInt8 *)"item id", 7, 0x8000100u, 0);
            CFTypeRef cf = v23;
            if (!v23)
            {
              exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int valuePtr = *(_DWORD *)v21;
            CFNumberRef v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v24)
            {
              CFStringRef v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v37, "Could not construct");
              __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v22, v23, v24);
            CFRelease(v24);
            CFRelease(v23);
            CFStringRef v25 = CFStringCreateWithBytes(0, (const UInt8 *)"kind", 4, 0x8000100u, 0);
            CFTypeRef cf = v25;
            if (!v25)
            {
              CFNumberRef v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v38, "Could not construct");
              __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            int valuePtr = *(_DWORD *)(v21 + 4);
            CFNumberRef v26 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
            if (!v26)
            {
              CFStringRef v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v39, "Could not construct");
              __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(v22, v25, v26);
            CFRelease(v26);
            CFRelease(v25);
            CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)"name", 4, 0x8000100u, 0);
            if (!v27)
            {
              CFNumberRef v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v40, "Could not construct");
              __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(v22, v27, *(const void **)(v21 + 8));
            CFRelease(v27);
            mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&cf, v22);
            mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>((__CFArray *)Mutable, cf);
            if (cf) {
              CFRelease(cf);
            }
            if (v22) {
              CFRelease(v22);
            }
          }
          mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v41, (const __CFArray *)Mutable);
          *((void *)&v41 + 1) = 0;
          long long v42 = 0uLL;
          CFStringRef v43 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
          if (Mutable) {
            CFRelease(Mutable);
          }
          goto LABEL_51;
        }
        goto LABEL_69;
      }
LABEL_50:
      CFStringRef v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
LABEL_51:
      AMCP::swap((AMCP::Thing *)&v41, (AMCP::Thing *)a3, v12);
      if (v43) {
        ((void (*)(void, long long *, void, void))v43)(0, &v41, 0, 0);
      }
      return 0;
    default:
      return v4;
  }
}

void sub_1BAAE1688(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a9;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__destroy_vector::operator()[abi:ne180100](&a14);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAE1448);
}

void sub_1BAAE16B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14)
{
}

void *AMCP::Thing::convert_to<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
  double v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    double v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a1, *v6, v6[1], (v6[1] - *v6) >> 4);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    unint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>();
  memset(v17, 0, sizeof(v17));
  unint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFNumberRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = (uint64_t *)v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(a1, *v8, v8[1], (v8[1] - *v8) >> 4);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE1930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *std::__tuple_leaf<2ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef&,void>(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

uint64_t *std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 16);
    v2 -= 16;
    *(_DWORD *)(v4 - 16) = v5;
    v4 -= 16;
    *(_DWORD *)(v4 + 4) = *(_DWORD *)(v2 + 4);
    *(void *)(v4 + 8) = *(void *)(v2 + 8);
    *(void *)(v2 + 8) = 0;
  }
  a2[1] = v4;
  uint64_t v6 = *result;
  void *result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
    std::__destroy_at[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>,0>(*(const void **)(i - 8));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<std::string>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[207];
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::string>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1BAAE1B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *applesauce::CF::convert_to<std::string,0>(uint64_t a1, const __CFString *a2)
{
  if (!a2 || (CFTypeID TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_1BAAE1BCC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a1);
}

void std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v)
{
  uint64_t v4 = (std::string *)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  std::vector<std::string>::pointer begin = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<std::string>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  unsigned int value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

void std::__split_buffer<std::string>::~__split_buffer(std::__split_buffer<std::string> *this)
{
  std::__split_buffer<std::string>::pointer begin = this->__begin_;
  std::__split_buffer<std::string>::pointer end = this->__end_;
  if (end != begin)
  {
    do
    {
      std::__split_buffer<std::string>::pointer v4 = end - 1;
      this->__end_ = end - 1;
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v4->__r_.__value_.__l.__data_);
        std::__split_buffer<std::string>::pointer v4 = this->__end_;
      }
      std::__split_buffer<std::string>::pointer end = v4;
    }
    while (v4 != begin);
  }
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v2 = *a1;
  if (*v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::string>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)a3, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)a2 = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
LABEL_7:
      *(void *)&long long v31 = a2;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
      uint64_t result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::string>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v31 = 0;
      if (v9)
      {
        v9(3, a2, 0, &v31);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, long long *))v31;
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, long long *))v8) {
        goto LABEL_21;
      }
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, std::string *))(a3 + 32);
      cf.__r_.__value_.__r.__words[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, &cf);
        uint64_t v10 = (void (*)(uint64_t, uint64_t, void, std::string *))cf.__r_.__value_.__r.__words[0];
      }
      if (v10 == (void (*)(uint64_t, uint64_t, void, std::string *))v8)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v31 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
        }
        else
        {
          uint64_t v11 = 0;
        }
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
        uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v31);
        CFNumberRef v26 = *(unsigned __int8 **)v11;
        CFStringRef v27 = *(unsigned __int8 **)(v11 + 8);
        uint64_t v28 = &v27[-*(void *)v11];
        long long v29 = *(unsigned __int8 **)v25;
        if (v28 != (unsigned __int8 *)(*(void *)(v25 + 8) - *(void *)v25)) {
          return 0;
        }
        while (v26 != v27)
        {
          if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v26, v29)) {
            return 0;
          }
          v26 += 24;
          v29 += 24;
        }
      }
      else
      {
LABEL_21:
        AMCP::Thing::convert_to<std::vector<std::string>>((std::string *)&v31, a2);
        AMCP::Thing::convert_to<std::vector<std::string>>(&cf, a3);
        uint64_t v15 = (unsigned __int8 *)*((void *)&v31 + 1);
        uint64_t v14 = (unsigned __int8 *)v31;
        uint64_t v16 = (unsigned __int8 *)cf.__r_.__value_.__r.__words[0];
        if (*((void *)&v31 + 1) - (void)v31 != cf.__r_.__value_.__l.__size_ - cf.__r_.__value_.__r.__words[0])
        {
          p_std::string cf = &cf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cf);
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
          return 0;
        }
        if ((void)v31 == *((void *)&v31 + 1))
        {
          p_std::string cf = &cf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cf);
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
        }
        else
        {
          do
          {
            BOOL v17 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v14, v16);
            BOOL v18 = v17;
            if (!v17) {
              break;
            }
            v14 += 24;
            v16 += 24;
          }
          while (v14 != v15);
          p_std::string cf = &cf;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_cf);
          cf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
          if (!v18) {
            return 0;
          }
        }
      }
      return 1;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<std::string>>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
        goto LABEL_44;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v31 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
        uint64_t v13 = (long long **)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v31);
      }
      else
      {
        uint64_t v13 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<std::string>>())
      {
        if (v13)
        {
          uint64_t v33 = 0;
          long long v31 = 0u;
          long long v32 = 0u;
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v31, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
          uint64_t v33 = AMCP::Implementation::In_Place_Storage<std::vector<std::string>>::dispatch;
          goto LABEL_47;
        }
LABEL_58:
        __assert_rtn("create_vector_of_strings_from", "Thing.h", 1300, "in_value_ptr != nullptr");
      }
      if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
      {
LABEL_44:
        uint64_t v33 = 0;
        long long v31 = 0u;
        long long v32 = 0u;
        goto LABEL_47;
      }
      if (!v13) {
        goto LABEL_58;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
      cf.__r_.__value_.__r.__words[0] = (std::string::size_type)Mutable;
      uint64_t v21 = *v13;
      double v20 = v13[1];
      break;
    default:
      return result;
  }
  while (v21 != v20)
  {
    if (*((char *)v21 + 23) < 0)
    {
      CFStringRef v23 = *(const UInt8 **)v21;
      if (!*(void *)v21)
      {
        mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, 0);
        goto LABEL_42;
      }
      CFIndex v22 = *((void *)v21 + 1);
    }
    else
    {
      CFIndex v22 = *((unsigned __int8 *)v21 + 23);
      CFStringRef v23 = (const UInt8 *)v21;
    }
    CFStringRef v24 = CFStringCreateWithBytes(0, v23, v22, 0x8000100u, 0);
    if (!v24)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFMutableArrayRef Mutable = (__CFArray *)cf.__r_.__value_.__r.__words[0];
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>((__CFArray *)cf.__r_.__value_.__l.__data_, v24);
    CFRelease(v24);
LABEL_42:
    uint64_t v21 = (long long *)((char *)v21 + 24);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v31, Mutable);
  *((void *)&v31 + 1) = 0;
  long long v32 = 0uLL;
  uint64_t v33 = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (cf.__r_.__value_.__r.__words[0]) {
    CFRelease(cf.__r_.__value_.__l.__data_);
  }
LABEL_47:
  AMCP::swap((AMCP::Thing *)&v31, (AMCP::Thing *)a3, v12);
  if (v33) {
    ((void (*)(void, long long *, void, void))v33)(0, &v31, 0, 0);
  }
  return 0;
}

void sub_1BAAE22C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  a15 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAE21A0);
}

void sub_1BAAE22EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  __clang_call_terminate(a1);
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

std::string *AMCP::Thing::convert_to<std::vector<std::string>>(std::string *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
  int v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  double v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    int v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (long long **)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      a1->__r_.__value_.__r.__words[0] = 0;
      a1->__r_.__value_.__l.__size_ = 0;
      a1->__r_.__value_.__r.__words[2] = 0;
      return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<std::string>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    uint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    BOOL v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  int v8 = (long long **)v18(4, v17, 0, &v15);
  if (!v8)
  {
    BOOL v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    BOOL v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  uint64_t result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a1, *v8, v8[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v8[1] - (char *)*v8) >> 3));
  if (v18) {
    return (std::string *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(__CFArray *a1, const void *a2)
{
  if (a1) {
    CFArrayAppendValue(a1, a2);
  }
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t result = a7; a3 != a5; a3 -= 24)
  {
    long long v8 = *(_OWORD *)(a3 - 24);
    *(void *)(result - 8) = *(void *)(a3 - 8);
    *(_OWORD *)(result - 24) = v8;
    result -= 24;
    *(void *)(a3 - 16) = 0;
    *(void *)(a3 - 8) = 0;
    *(void *)(a3 - 24) = 0;
  }
  return result;
}

void *applesauce::CF::details::CFString_get_value<true>(uint64_t a1, CFStringRef theString)
{
  CStringPtr = (char *)CFStringGetCStringPtr(theString, 0x8000100u);
  if (CStringPtr)
  {
    return std::string::basic_string[abi:ne180100]<0>((void *)a1, CStringPtr);
  }
  else
  {
    CFIndex Length = CFStringGetLength(theString);
    CFIndex maxBufLen = 0;
    v10.location = 0;
    v10.length = Length;
    CFStringGetBytes(theString, v10, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
    std::string::basic_string[abi:ne180100]((void *)a1, maxBufLen, 0);
    if (*(char *)(a1 + 23) >= 0) {
      int v7 = (UInt8 *)a1;
    }
    else {
      int v7 = *(UInt8 **)a1;
    }
    v11.location = 0;
    v11.length = Length;
    return (void *)CFStringGetBytes(theString, v11, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
  }
}

void sub_1BAAE2728(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::string>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  CFRange v11 = this;
  BOOL v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      BOOL v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BAAE2840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 - 1) < 0) {
        operator delete(*(void **)(v3 - 24));
      }
      v3 -= 24;
    }
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[177];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<char>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[179];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<signed char>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[181];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[183];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<short>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[185];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[187];
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<int>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[189];
}

BOOL AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<long long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<float>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<double>>()
      || *a1 == AMCP::Implementation::get_type_marker<std::vector<long double>>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>();
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned short>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFIndex Count = CFArrayGetCount(*a2);
  CFIndex v5 = Count;
  if (Count)
  {
    if (Count < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(Count);
    unint64_t v7 = 0;
    long long v8 = v6;
    char v10 = &v6[2 * v9];
    while (1)
    {
      if (!*a2)
      {
        uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v21, "Could not construct");
        __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v24, *a2, v7);
      if (v25)
      {
        if (!v24)
        {
          CFIndex v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v22, "Could not construct");
          __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        __int16 v11 = applesauce::CF::convert_to<unsigned short,0>(v24);
        __int16 v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          if (v6 - v8 <= -3) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v15 = v14 >> 1;
          if (v10 - v8 <= (unint64_t)((v14 >> 1) + 1)) {
            uint64_t v16 = v15 + 1;
          }
          else {
            uint64_t v16 = v10 - v8;
          }
          if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v17 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v17 = v16;
          }
          if (v17) {
            uint64_t v17 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v17);
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = (char *)(v17 + 2 * v15);
          *(_WORD *)uint64_t v19 = v12;
          uint64_t v13 = (uint64_t)(v19 + 2);
          while (v6 != v8)
          {
            __int16 v20 = *((_WORD *)v6 - 1);
            v6 -= 2;
            *((_WORD *)v19 - 1) = v20;
            v19 -= 2;
          }
          char v10 = (char *)(v17 + 2 * v18);
          if (v8) {
            operator delete(v8);
          }
          long long v8 = v19;
          goto LABEL_28;
        }
        *(_WORD *)uint64_t v6 = v11;
        v6 += 2;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_28:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v24);
      ++v7;
      uint64_t v6 = (char *)v13;
      if (v7 == v5) {
        goto LABEL_31;
      }
    }
  }
  long long v8 = 0;
  uint64_t v13 = 0;
LABEL_31:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE2EBC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<int>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(Count);
    unint64_t v7 = 0;
    long long v8 = v6;
    char v10 = &v6[4 * v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          uint64_t v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v11 = applesauce::CF::convert_to<int,0>(v23);
        int v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = (v6 - v8) >> 2;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((v10 - v8) >> 1 > v15) {
            unint64_t v15 = (v10 - v8) >> 1;
          }
          if ((unint64_t)(v10 - v8) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (char *)(v16 + 4 * v14);
          *(_DWORD *)uint64_t v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 4);
          while (v6 != v8)
          {
            int v19 = *((_DWORD *)v6 - 1);
            v6 -= 4;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          char v10 = (char *)(v16 + 4 * v17);
          if (v8) {
            operator delete(v8);
          }
          long long v8 = v18;
          goto LABEL_27;
        }
        *(_DWORD *)uint64_t v6 = v11;
        v6 += 4;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      uint64_t v6 = (char *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  long long v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE31A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned int>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::vector<unsigned int>::size_type Count = CFArrayGetCount(*a2);
  memset(&v23, 0, sizeof(v23));
  std::vector<unsigned int>::reserve(&v23, Count);
  std::__split_buffer<std::string>::pointer begin = v23.__begin_;
  if (Count)
  {
    unint64_t v6 = 0;
    unsigned int value = v23.__end_cap_.__value_;
    do
    {
      if (!*a2)
      {
        v23.__end_cap_.__value_ = value;
        v23.__begin_ = begin;
        uint64_t v18 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v18, "Could not construct");
        __cxa_throw(v18, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v21, *a2, v6);
      if (v22)
      {
        if (!v21)
        {
          v23.__end_cap_.__value_ = value;
          v23.__begin_ = begin;
          int v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v19, "Could not construct");
          __cxa_throw(v19, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unsigned int v8 = applesauce::CF::convert_to<unsigned int,0>(v21);
        unsigned int v9 = v8;
        std::vector<unsigned int>::pointer end = v23.__end_;
        if (v23.__end_ >= value)
        {
          uint64_t v12 = v23.__end_ - begin;
          unint64_t v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
          {
            v23.__end_cap_.__value_ = value;
            v23.__begin_ = begin;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)value - (char *)begin) >> 1 > v13) {
            unint64_t v13 = ((char *)value - (char *)begin) >> 1;
          }
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14) {
            unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v14);
          }
          else {
            uint64_t v15 = 0;
          }
          unint64_t v16 = (unsigned int *)(v14 + 4 * v12);
          unsigned int *v16 = v9;
          int v11 = v16 + 1;
          while (end != begin)
          {
            unsigned int v17 = *--end;
            *--unint64_t v16 = v17;
          }
          unsigned int value = (unsigned int *)(v14 + 4 * v15);
          v23.__end_ = v11;
          if (begin) {
            operator delete(begin);
          }
          std::__split_buffer<std::string>::pointer begin = v16;
        }
        else
        {
          *v23.__end_ = v8;
          int v11 = end + 1;
        }
        v23.__end_ = v11;
      }
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v21);
      ++v6;
    }
    while (v6 != Count);
    v23.__end_cap_.__value_ = value;
    v23.__begin_ = begin;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, begin, (uint64_t)v23.__end_, v23.__end_ - begin);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v23.__begin_) {
    operator delete(v23.__begin_);
  }
}

void sub_1BAAE3490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  __cxa_free_exception(v14);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<long>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[193];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v11 = applesauce::CF::convert_to<long,0>(v23);
        unint64_t v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 2 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (unint64_t *)(v16 + 8 * v14);
          unint64_t *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            unint64_t v19 = *--v6;
            *--uint64_t v18 = v19;
          }
          char v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (unint64_t *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE37F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned long>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[195];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v11 = applesauce::CF::convert_to<unsigned long,0>(v23);
        unint64_t v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 2 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (unint64_t *)(v16 + 8 * v14);
          unint64_t *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            unint64_t v19 = *--v6;
            *--uint64_t v18 = v19;
          }
          char v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (unint64_t *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE3B40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<long long>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[197];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long long>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v11 = applesauce::CF::convert_to<long long,0>(v23);
        unint64_t v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 2 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (unint64_t *)(v16 + 8 * v14);
          unint64_t *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            unint64_t v19 = *--v6;
            *--uint64_t v18 = v19;
          }
          char v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (unint64_t *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE3E8C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[199];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<unsigned long long>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (unint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        unint64_t v11 = applesauce::CF::convert_to<unsigned long long,0>(v23);
        unint64_t v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 2 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (unint64_t *)(v16 + 8 * v14);
          unint64_t *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            unint64_t v19 = *--v6;
            *--uint64_t v18 = v19;
          }
          char v10 = (unint64_t *)(v16 + 8 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (unint64_t *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE41D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<float>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[201];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<float>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        float v11 = applesauce::CF::convert_to<float,0>(v23);
        float v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 1 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 1;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (float *)(v16 + 4 * v14);
          float *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            int v19 = *((_DWORD *)v6-- - 1);
            *((_DWORD *)v18-- - 1) = v19;
          }
          char v10 = (float *)(v16 + 4 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (float *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE452C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<double>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[203];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<double>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        double v11 = applesauce::CF::convert_to<double,0>(v23);
        double v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 2 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)(v16 + 8 * v14);
          double *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            uint64_t v19 = *((void *)v6-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          char v10 = (double *)(v16 + 8 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (double *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE4880(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::vector<long double>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[205];
}

void AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,std::vector<long double>>(uint64_t a1, CFArrayRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  unint64_t Count = CFArrayGetCount(*a2);
  unint64_t v5 = Count;
  if (Count)
  {
    if (Count >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(Count);
    unint64_t v7 = 0;
    unsigned int v8 = v6;
    char v10 = &v6[v9];
    while (1)
    {
      if (!*a2)
      {
        __int16 v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v20, "Could not construct");
        __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::details::at_as<applesauce::CF::NumberRef>(&v23, *a2, v7);
      if (v24)
      {
        if (!v23)
        {
          CFNumberRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v21, "Could not construct");
          __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        double v11 = applesauce::CF::convert_to<double,0>(v23);
        double v12 = v11;
        if (v6 >= v10)
        {
          uint64_t v14 = v6 - v8;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v10 - (char *)v8) >> 2 > v15) {
            unint64_t v15 = ((char *)v10 - (char *)v8) >> 2;
          }
          if ((unint64_t)((char *)v10 - (char *)v8) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v16 = v15;
          }
          if (v16) {
            unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v16);
          }
          else {
            uint64_t v17 = 0;
          }
          uint64_t v18 = (double *)(v16 + 8 * v14);
          double *v18 = v12;
          uint64_t v13 = (uint64_t)(v18 + 1);
          while (v6 != v8)
          {
            uint64_t v19 = *((void *)v6-- - 1);
            *((void *)v18-- - 1) = v19;
          }
          char v10 = (double *)(v16 + 8 * v17);
          if (v8) {
            operator delete(v8);
          }
          unsigned int v8 = v18;
          goto LABEL_27;
        }
        *v6++ = v11;
      }
      uint64_t v13 = (uint64_t)v6;
LABEL_27:
      std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v23);
      ++v7;
      unint64_t v6 = (double *)v13;
      if (v7 == v5) {
        goto LABEL_30;
      }
    }
  }
  unsigned int v8 = 0;
  uint64_t v13 = 0;
LABEL_30:
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v8, v13, (v13 - (uint64_t)v8) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAAE4BD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::create_vector_of_numbers_from<applesauce::CF::ArrayRef,applesauce::CF::ArrayRef>(uint64_t a1, CFTypeRef *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;

  return AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef const&>(a1, a2);
}

void *std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAE4CEC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
      double v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v62 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v62);
        double v11 = (void (*)(uint64_t, uint64_t, void, long long *))v62;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      double v12 = *(char **)(a3 + 32);
      int v65 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v65);
        double v12 = v65;
      }
      if (v12 != (char *)v10)
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<long double>>(&v62, a2);
        AMCP::Thing::convert_to<std::vector<long double>>(&v65, a3);
        unint64_t v16 = (void *)v62;
        if (*((void *)&v62 + 1) - (void)v62 == v66 - (void)v65)
        {
          if ((void)v62 == *((void *)&v62 + 1))
          {
            BOOL v20 = 1;
            if (!v65)
            {
LABEL_42:
              if (v16) {
                operator delete(v16);
              }
              return v20;
            }
LABEL_41:
            operator delete(v65);
            goto LABEL_42;
          }
          uint64_t v17 = v62 + 8;
          uint64_t v18 = (double *)v65;
          do
          {
            double v19 = *v18++;
            BOOL v20 = *(double *)(v17 - 8) == v19;
            BOOL v21 = *(double *)(v17 - 8) != v19 || v17 == *((void *)&v62 + 1);
            v17 += 8;
          }
          while (!v21);
        }
        else
        {
          BOOL v20 = 0;
        }
        if (!v65) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        uint64_t v13 = 0;
      }
      *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
      uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v62);
      uint64_t v54 = *(double **)v13;
      CFNumberRef v53 = *(double **)(v13 + 8);
      uint64_t v55 = *(double **)v52;
      if ((double *)((char *)v53 - *(void *)v13) == (double *)(*(void *)(v52 + 8) - *(void *)v52))
      {
        while (v54 != v53)
        {
          if (*v54 != *v55) {
            return 0;
          }
          ++v54;
          ++v55;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_141;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (v15)
        {
          CFNumberRef v23 = *(double **)v15;
          char v22 = *(double **)(v15 + 8);
          unint64_t v66 = 0;
          uint64_t v67 = 0;
          int v65 = 0;
          uint64_t v24 = (char *)v22 - (char *)v23;
          if (v22 == v23) {
            goto LABEL_89;
          }
          uint64_t v25 = v24 >> 3;
          std::vector<BOOL>::__vallocate[abi:ne180100](&v65, v24 >> 3);
          unint64_t v26 = v66;
          unint64_t v27 = v66 + v25;
          v66 += v25;
          if (v26)
          {
            unint64_t v28 = v27 - 1;
            if (((v27 - 1) ^ (v26 - 1)) < 0x40) {
              goto LABEL_81;
            }
          }
          else
          {
            unint64_t v28 = v27 - 1;
          }
          unint64_t v45 = v28 >> 6;
          if (v27 >= 0x41) {
            unint64_t v46 = v45;
          }
          else {
            unint64_t v46 = 0;
          }
          *(void *)&v65[8 * v46] = 0;
LABEL_81:
          int v47 = v26 & 0x3F;
          CFNumberRef v48 = &v65[8 * (v26 >> 6)];
          do
          {
            uint64_t v49 = 1 << v47;
            if (*v23 == 0.0) {
              uint64_t v50 = *(void *)v48 & ~v49;
            }
            else {
              uint64_t v50 = *(void *)v48 | v49;
            }
            *(void *)CFNumberRef v48 = v50;
            ++v23;
            v48 += 8 * (v47 == 63);
            if (v47 == 63) {
              int v47 = 0;
            }
            else {
              ++v47;
            }
          }
          while (v23 != v22);
LABEL_89:
          int v64 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          std::vector<BOOL>::vector(&v62, (uint64_t)&v65);
          int v64 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
          CFStringRef v51 = v65;
          if (!v65)
          {
LABEL_118:
            AMCP::swap((AMCP::Thing *)&v62, (AMCP::Thing *)a3, v14);
            if (v64) {
              v64(0, (uint64_t)&v62, 0, 0);
            }
            return 0;
          }
LABEL_117:
          operator delete(v51);
          goto LABEL_118;
        }
LABEL_132:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        uint64_t v30 = *(double **)v15;
        long long v29 = *(double **)(v15 + 8);
        uint64_t v31 = (char *)v29 - (char *)v30;
        if (v29 == v30)
        {
          long long v32 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          if (v31 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v31 >> 3);
          uint64_t v33 = v32;
          do
          {
            double v34 = *v30++;
            *v33++ = (int)v34;
          }
          while (v30 != v29);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v62, v32, (uint64_t)v33, v33 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        unint64_t v36 = *(double **)v15;
        uint64_t v35 = *(double **)(v15 + 8);
        uint64_t v37 = (char *)v35 - (char *)v36;
        if (v35 == v36)
        {
          long long v32 = 0;
          CFNumberRef v38 = 0;
        }
        else
        {
          if (v37 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v37 >> 3);
          CFNumberRef v38 = v32;
          do
          {
            double v39 = *v36++;
            *v38++ = (int)v39;
          }
          while (v36 != v35);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v62, v32, (uint64_t)v38, v38 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        long long v41 = *(double **)v15;
        CFNumberRef v40 = *(double **)(v15 + 8);
        uint64_t v42 = (char *)v40 - (char *)v41;
        if (v40 == v41)
        {
          long long v32 = 0;
          CFStringRef v43 = 0;
        }
        else
        {
          if (v42 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v42 >> 3);
          CFStringRef v43 = v32;
          do
          {
            double v44 = *v41++;
            *v43++ = (int)v44;
          }
          while (v41 != v40);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v62, v32, (uint64_t)v43, v43 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned short>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<float>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<double>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long double>>((uint64_t)&v62, v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,applesauce::CF::ArrayRef>(&v62, (uint64_t **)v15);
          }
          else
          {
LABEL_141:
            int v64 = 0;
            long long v62 = 0u;
            long long v63 = 0u;
          }
          goto LABEL_118;
        }
        if (!v15) {
          goto LABEL_132;
        }
        CFStringRef v58 = *(double **)v15;
        uint64_t v57 = *(double **)(v15 + 8);
        uint64_t v59 = (char *)v57 - (char *)v58;
        if (v57 == v58)
        {
          long long v32 = 0;
          uint64_t v60 = 0;
        }
        else
        {
          if (v59 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59 >> 3);
          uint64_t v60 = v32;
          do
          {
            double v61 = *v58++;
            *(_WORD *)uint64_t v60 = (int)v61;
            v60 += 2;
          }
          while (v58 != v57);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v62, v32, (uint64_t)v60, (v60 - v32) >> 1);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      }
      int v64 = v56;
      if (!v32) {
        goto LABEL_118;
      }
      CFStringRef v51 = v32;
      goto LABEL_117;
    default:
      return result;
  }
}

void sub_1BAAE5548(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<long double>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    unint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<long double>>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    double v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    double v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE57B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *std::vector<BOOL>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4) {
    return a1;
  }
  std::vector<BOOL>::__vallocate[abi:ne180100](a1, v4);
  unint64_t v5 = *(void **)a2;
  unint64_t v6 = *(void *)(a2 + 8);
  unint64_t v7 = a1[1];
  unint64_t v8 = v7 + v6;
  a1[1] = v7 + v6;
  if (v7)
  {
    unint64_t v9 = v8 - 1;
    if (((v8 - 1) ^ (v7 - 1)) < 0x40) {
      goto LABEL_10;
    }
  }
  else
  {
    unint64_t v9 = v8 - 1;
  }
  unint64_t v10 = v9 >> 6;
  if (v8 >= 0x41) {
    unint64_t v11 = v10;
  }
  else {
    unint64_t v11 = 0;
  }
  *(void *)(*a1 + 8 * v11) = 0;
LABEL_10:
  int v12 = v6 & 0x3F;
  if (v6 > 0x3F || (v6 & 0x3F) != 0)
  {
    int v13 = 0;
    int v14 = 0;
    uint64_t v15 = &v5[v6 >> 6];
    int v16 = v7 & 0x3F;
    uint64_t v17 = (uint64_t *)(*a1 + 8 * (v7 >> 6));
    do
    {
      uint64_t v18 = 1 << v16;
      if ((*v5 >> v14)) {
        uint64_t v19 = *v17 | v18;
      }
      else {
        uint64_t v19 = *v17 & ~v18;
      }
      *uint64_t v17 = v19;
      ++v14;
      v5 += v13 == 63;
      if (v13 == 63) {
        int v14 = 0;
      }
      v17 += v16 == 63;
      if (v16 == 63) {
        int v16 = 0;
      }
      else {
        ++v16;
      }
      int v13 = v14;
    }
    while (v5 != v15 || v12 != v14);
  }
  return a1;
}

void *std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAE5948(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAE59C4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned short>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      *(_WORD *)uint64_t v7 = (int)v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE5AC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<int>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      *(_DWORD *)uint64_t v7 = (int)v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE5BC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned int>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE5CC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE5DD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE5EE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE5FEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE60F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<float>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      float v9 = v8;
      *v7++ = v9;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE61F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE6300(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,std::vector<long double>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long double>,applesauce::CF::ArrayRef>(void *a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t valuePtr = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAE64C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAE6550(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<double>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<double>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v62 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v62);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v62;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      int v65 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v65);
        int v12 = v65;
      }
      if (v12 != (char *)v10)
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<double>>(&v62, a2);
        AMCP::Thing::convert_to<std::vector<double>>(&v65, a3);
        int v16 = (void *)v62;
        if (*((void *)&v62 + 1) - (void)v62 == v66 - (void)v65)
        {
          if ((void)v62 == *((void *)&v62 + 1))
          {
            BOOL v20 = 1;
            if (!v65)
            {
LABEL_42:
              if (v16) {
                operator delete(v16);
              }
              return v20;
            }
LABEL_41:
            operator delete(v65);
            goto LABEL_42;
          }
          uint64_t v17 = v62 + 8;
          uint64_t v18 = (double *)v65;
          do
          {
            double v19 = *v18++;
            BOOL v20 = *(double *)(v17 - 8) == v19;
            BOOL v21 = *(double *)(v17 - 8) != v19 || v17 == *((void *)&v62 + 1);
            v17 += 8;
          }
          while (!v21);
        }
        else
        {
          BOOL v20 = 0;
        }
        if (!v65) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<double>>();
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        uint64_t v13 = 0;
      }
      *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<double>>();
      uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v62);
      uint64_t v54 = *(double **)v13;
      CFNumberRef v53 = *(double **)(v13 + 8);
      uint64_t v55 = *(double **)v52;
      if ((double *)((char *)v53 - *(void *)v13) == (double *)(*(void *)(v52 + 8) - *(void *)v52))
      {
        while (v54 != v53)
        {
          if (*v54 != *v55) {
            return 0;
          }
          ++v54;
          ++v55;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_141;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<double>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (v15)
        {
          CFNumberRef v23 = *(double **)v15;
          char v22 = *(double **)(v15 + 8);
          unint64_t v66 = 0;
          uint64_t v67 = 0;
          int v65 = 0;
          uint64_t v24 = (char *)v22 - (char *)v23;
          if (v22 == v23) {
            goto LABEL_89;
          }
          uint64_t v25 = v24 >> 3;
          std::vector<BOOL>::__vallocate[abi:ne180100](&v65, v24 >> 3);
          unint64_t v26 = v66;
          unint64_t v27 = v66 + v25;
          v66 += v25;
          if (v26)
          {
            unint64_t v28 = v27 - 1;
            if (((v27 - 1) ^ (v26 - 1)) < 0x40) {
              goto LABEL_81;
            }
          }
          else
          {
            unint64_t v28 = v27 - 1;
          }
          unint64_t v45 = v28 >> 6;
          if (v27 >= 0x41) {
            unint64_t v46 = v45;
          }
          else {
            unint64_t v46 = 0;
          }
          *(void *)&v65[8 * v46] = 0;
LABEL_81:
          int v47 = v26 & 0x3F;
          CFNumberRef v48 = &v65[8 * (v26 >> 6)];
          do
          {
            uint64_t v49 = 1 << v47;
            if (*v23 == 0.0) {
              uint64_t v50 = *(void *)v48 & ~v49;
            }
            else {
              uint64_t v50 = *(void *)v48 | v49;
            }
            *(void *)CFNumberRef v48 = v50;
            ++v23;
            v48 += 8 * (v47 == 63);
            if (v47 == 63) {
              int v47 = 0;
            }
            else {
              ++v47;
            }
          }
          while (v23 != v22);
LABEL_89:
          int v64 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          std::vector<BOOL>::vector(&v62, (uint64_t)&v65);
          int v64 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
          CFStringRef v51 = v65;
          if (!v65)
          {
LABEL_118:
            AMCP::swap((AMCP::Thing *)&v62, (AMCP::Thing *)a3, v14);
            if (v64) {
              v64(0, (uint64_t)&v62, 0, 0);
            }
            return 0;
          }
LABEL_117:
          operator delete(v51);
          goto LABEL_118;
        }
LABEL_132:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        uint64_t v30 = *(double **)v15;
        long long v29 = *(double **)(v15 + 8);
        uint64_t v31 = (char *)v29 - (char *)v30;
        if (v29 == v30)
        {
          long long v32 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          if (v31 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v31 >> 3);
          uint64_t v33 = v32;
          do
          {
            double v34 = *v30++;
            *v33++ = (int)v34;
          }
          while (v30 != v29);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v62, v32, (uint64_t)v33, v33 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        unint64_t v36 = *(double **)v15;
        uint64_t v35 = *(double **)(v15 + 8);
        uint64_t v37 = (char *)v35 - (char *)v36;
        if (v35 == v36)
        {
          long long v32 = 0;
          CFNumberRef v38 = 0;
        }
        else
        {
          if (v37 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v37 >> 3);
          CFNumberRef v38 = v32;
          do
          {
            double v39 = *v36++;
            *v38++ = (int)v39;
          }
          while (v36 != v35);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v62, v32, (uint64_t)v38, v38 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        long long v41 = *(double **)v15;
        CFNumberRef v40 = *(double **)(v15 + 8);
        uint64_t v42 = (char *)v40 - (char *)v41;
        if (v40 == v41)
        {
          long long v32 = 0;
          CFStringRef v43 = 0;
        }
        else
        {
          if (v42 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v42 >> 3);
          CFStringRef v43 = v32;
          do
          {
            double v44 = *v41++;
            *v43++ = (int)v44;
          }
          while (v41 != v40);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v62, v32, (uint64_t)v43, v43 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned short>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned int>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long long>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<float>>((uint64_t)&v62, (double **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<double>>((uint64_t)&v62, v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long double>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,applesauce::CF::ArrayRef>(&v62, (uint64_t **)v15);
          }
          else
          {
LABEL_141:
            int v64 = 0;
            long long v62 = 0u;
            long long v63 = 0u;
          }
          goto LABEL_118;
        }
        if (!v15) {
          goto LABEL_132;
        }
        CFStringRef v58 = *(double **)v15;
        uint64_t v57 = *(double **)(v15 + 8);
        uint64_t v59 = (char *)v57 - (char *)v58;
        if (v57 == v58)
        {
          long long v32 = 0;
          uint64_t v60 = 0;
        }
        else
        {
          if (v59 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59 >> 3);
          uint64_t v60 = v32;
          do
          {
            double v61 = *v58++;
            *(_WORD *)uint64_t v60 = (int)v61;
            v60 += 2;
          }
          while (v58 != v57);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v62, v32, (uint64_t)v60, (v60 - v32) >> 1);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      }
      int v64 = v56;
      if (!v32) {
        goto LABEL_118;
      }
      CFStringRef v51 = v32;
      goto LABEL_117;
    default:
      return result;
  }
}

void sub_1BAAE6DAC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<double>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<double>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<double>>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE7014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned short>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      *(_WORD *)uint64_t v7 = (int)v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE711C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<int>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      *(_DWORD *)uint64_t v7 = (int)v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE721C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned int>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE731C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE7428(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE7534(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (uint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE7640(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = (unint64_t)*(double *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE774C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<float>>(uint64_t a1, double **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      double v8 = *v3++;
      float v9 = v8;
      *v7++ = v9;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE784C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<double>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE79C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<double>,applesauce::CF::ArrayRef>(void *a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t valuePtr = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAE7B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAE7BA4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<float>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<float>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v62 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v62);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v62;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      int v65 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v65);
        int v12 = v65;
      }
      if (v12 != (char *)v10)
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<float>>(&v62, a2);
        AMCP::Thing::convert_to<std::vector<float>>(&v65, a3);
        uint64_t v16 = (void *)v62;
        if (*((void *)&v62 + 1) - (void)v62 == v66 - (void)v65)
        {
          if ((void)v62 == *((void *)&v62 + 1))
          {
            BOOL v20 = 1;
            if (!v65)
            {
LABEL_42:
              if (v16) {
                operator delete(v16);
              }
              return v20;
            }
LABEL_41:
            operator delete(v65);
            goto LABEL_42;
          }
          uint64_t v17 = v62 + 4;
          uint64_t v18 = (float *)v65;
          do
          {
            float v19 = *v18++;
            BOOL v20 = *(float *)(v17 - 4) == v19;
            BOOL v21 = *(float *)(v17 - 4) != v19 || v17 == *((void *)&v62 + 1);
            v17 += 4;
          }
          while (!v21);
        }
        else
        {
          BOOL v20 = 0;
        }
        if (!v65) {
          goto LABEL_42;
        }
        goto LABEL_41;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<float>>();
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        uint64_t v13 = 0;
      }
      *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<float>>();
      uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v62);
      uint64_t v54 = *(float **)v13;
      CFNumberRef v53 = *(float **)(v13 + 8);
      uint64_t v55 = *(float **)v52;
      if ((float *)((char *)v53 - *(void *)v13) == (float *)(*(void *)(v52 + 8) - *(void *)v52))
      {
        while (v54 != v53)
        {
          if (*v54 != *v55) {
            return 0;
          }
          ++v54;
          ++v55;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_141;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v62 = AMCP::Implementation::get_type_marker<std::vector<float>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v62);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (v15)
        {
          CFNumberRef v23 = *(float **)v15;
          char v22 = *(float **)(v15 + 8);
          unint64_t v66 = 0;
          uint64_t v67 = 0;
          int v65 = 0;
          uint64_t v24 = (char *)v22 - (char *)v23;
          if (v22 == v23) {
            goto LABEL_89;
          }
          uint64_t v25 = v24 >> 2;
          std::vector<BOOL>::__vallocate[abi:ne180100](&v65, v24 >> 2);
          unint64_t v26 = v66;
          unint64_t v27 = v66 + v25;
          v66 += v25;
          if (v26)
          {
            unint64_t v28 = v27 - 1;
            if (((v27 - 1) ^ (v26 - 1)) < 0x40) {
              goto LABEL_81;
            }
          }
          else
          {
            unint64_t v28 = v27 - 1;
          }
          unint64_t v45 = v28 >> 6;
          if (v27 >= 0x41) {
            unint64_t v46 = v45;
          }
          else {
            unint64_t v46 = 0;
          }
          *(void *)&v65[8 * v46] = 0;
LABEL_81:
          int v47 = v26 & 0x3F;
          CFNumberRef v48 = &v65[8 * (v26 >> 6)];
          do
          {
            uint64_t v49 = 1 << v47;
            if (*v23 == 0.0) {
              uint64_t v50 = *(void *)v48 & ~v49;
            }
            else {
              uint64_t v50 = *(void *)v48 | v49;
            }
            *(void *)CFNumberRef v48 = v50;
            ++v23;
            v48 += 8 * (v47 == 63);
            if (v47 == 63) {
              int v47 = 0;
            }
            else {
              ++v47;
            }
          }
          while (v23 != v22);
LABEL_89:
          int v64 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          std::vector<BOOL>::vector(&v62, (uint64_t)&v65);
          int v64 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
          CFStringRef v51 = v65;
          if (!v65)
          {
LABEL_118:
            AMCP::swap((AMCP::Thing *)&v62, (AMCP::Thing *)a3, v14);
            if (v64) {
              v64(0, (uint64_t)&v62, 0, 0);
            }
            return 0;
          }
LABEL_117:
          operator delete(v51);
          goto LABEL_118;
        }
LABEL_132:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        uint64_t v30 = *(float **)v15;
        long long v29 = *(float **)(v15 + 8);
        uint64_t v31 = (char *)v29 - (char *)v30;
        if (v29 == v30)
        {
          long long v32 = 0;
          uint64_t v33 = 0;
        }
        else
        {
          if (v31 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v31 >> 2);
          uint64_t v33 = v32;
          do
          {
            float v34 = *v30++;
            *v33++ = (int)v34;
          }
          while (v30 != v29);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v62, v32, (uint64_t)v33, v33 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        unint64_t v36 = *(float **)v15;
        uint64_t v35 = *(float **)(v15 + 8);
        uint64_t v37 = (char *)v35 - (char *)v36;
        if (v35 == v36)
        {
          long long v32 = 0;
          CFNumberRef v38 = 0;
        }
        else
        {
          if (v37 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v37 >> 2);
          CFNumberRef v38 = v32;
          do
          {
            float v39 = *v36++;
            *v38++ = (int)v39;
          }
          while (v36 != v35);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v62, v32, (uint64_t)v38, v38 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      }
      else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
      {
        if (!v15) {
          goto LABEL_132;
        }
        long long v41 = *(float **)v15;
        CFNumberRef v40 = *(float **)(v15 + 8);
        uint64_t v42 = (char *)v40 - (char *)v41;
        if (v40 == v41)
        {
          long long v32 = 0;
          CFStringRef v43 = 0;
        }
        else
        {
          if (v42 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = operator new(v42 >> 2);
          CFStringRef v43 = v32;
          do
          {
            float v44 = *v41++;
            *v43++ = (int)v44;
          }
          while (v41 != v40);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v62, v32, (uint64_t)v43, v43 - v32);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
        {
          if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned short>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<int>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned int>>((uint64_t)&v62, (uint64_t *)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long long>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<float>>((uint64_t)&v62, v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<double>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long double>>((uint64_t)&v62, (float **)v15);
          }
          else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
          {
            AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,applesauce::CF::ArrayRef>(&v62, v15);
          }
          else
          {
LABEL_141:
            int v64 = 0;
            long long v62 = 0u;
            long long v63 = 0u;
          }
          goto LABEL_118;
        }
        if (!v15) {
          goto LABEL_132;
        }
        CFStringRef v58 = *(float **)v15;
        uint64_t v57 = *(float **)(v15 + 8);
        uint64_t v59 = (char *)v57 - (char *)v58;
        if (v57 == v58)
        {
          long long v32 = 0;
          uint64_t v60 = 0;
        }
        else
        {
          if (v59 < 0) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          long long v32 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v59 >> 2);
          uint64_t v60 = v32;
          do
          {
            float v61 = *v58++;
            *(_WORD *)uint64_t v60 = (int)v61;
            v60 += 2;
          }
          while (v58 != v57);
        }
        int v64 = 0;
        long long v62 = 0u;
        long long v63 = 0u;
        std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v62, v32, (uint64_t)v60, (v60 - v32) >> 1);
        uint64_t v56 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      }
      int v64 = v56;
      if (!v32) {
        goto LABEL_118;
      }
      CFStringRef v51 = v32;
      goto LABEL_117;
    default:
      return result;
  }
}

void sub_1BAAE8400(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<float>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<float>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<float>>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE8668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned short>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *(_WORD *)uint64_t v7 = (int)v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE8770(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<int>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = (int)*(float *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE887C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned int>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = *(float *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAE8988(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *(void *)uint64_t v7 = (uint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE8A94(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *(void *)uint64_t v7 = (unint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE8BA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long long>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *(void *)uint64_t v7 = (uint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE8CAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<unsigned long long>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *(void *)uint64_t v7 = (unint64_t)v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE8DB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<float>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<double>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *v7++ = v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE8F38(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,std::vector<long double>>(uint64_t a1, float **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      float v8 = *v3++;
      *v7++ = v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE9044(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<float>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v6 = *(_DWORD **)(a2 + 8);
  while (v5 != v6)
  {
    LODWORD(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberFloatType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAE9194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAE9220(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v60);
        int v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v57);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned long long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<unsigned long long>>(&v60, a3);
        uint64_t v16 = (void *)v57;
        uint64_t v17 = v60;
        BOOL v18 = *((void *)&v57 + 1) - (void)v57 == v61 - (void)v60
           && memcmp((const void *)v57, v60, *((void *)&v57 + 1) - v57) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(uint64_t **)v15;
            unint64_t v26 = *(uint64_t **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 3);
              uint64_t v30 = v29;
              do
              {
                uint64_t v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v59 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(uint64_t **)v15;
            long long v32 = *(uint64_t **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 3);
              uint64_t v35 = v29;
              do
              {
                uint64_t v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(uint64_t **)v15;
            uint64_t v37 = *(uint64_t **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 3);
              CFNumberRef v40 = v29;
              do
              {
                uint64_t v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<float>>((uint64_t)&v57, (unint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              uint64_t v59 = 0;
              long long v57 = 0u;
              long long v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(uint64_t **)v15;
            uint64_t v52 = *(uint64_t **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              uint64_t v55 = v29;
              do
              {
                uint64_t v56 = *v53++;
                *(_WORD *)uint64_t v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(uint64_t **)v15;
      uint64_t v19 = *(uint64_t **)(v15 + 8);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      unint64_t v23 = v61;
      unint64_t v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v60[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v60[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      uint64_t v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v60;
      if (v60) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59) {
        v59(0, (uint64_t)&v57, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAE9A34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<unsigned long long>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAE9C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_WORD *)uint64_t v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE9DA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE9E9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAE9F98(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEA0A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEA1A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEA2B0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<float>>(uint64_t a1, unint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      unint64_t v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEA424(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEA530(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEA63C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long long>,applesauce::CF::ArrayRef>(void *a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t valuePtr = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAEA78C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAEA818(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v60);
        int v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v57);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<long long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<long long>>(&v60, a3);
        uint64_t v16 = (void *)v57;
        uint64_t v17 = v60;
        BOOL v18 = *((void *)&v57 + 1) - (void)v57 == v61 - (void)v60
           && memcmp((const void *)v57, v60, *((void *)&v57 + 1) - v57) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(uint64_t **)v15;
            unint64_t v26 = *(uint64_t **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 3);
              uint64_t v30 = v29;
              do
              {
                uint64_t v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v59 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(uint64_t **)v15;
            long long v32 = *(uint64_t **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 3);
              uint64_t v35 = v29;
              do
              {
                uint64_t v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(uint64_t **)v15;
            uint64_t v37 = *(uint64_t **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 3);
              CFNumberRef v40 = v29;
              do
              {
                uint64_t v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<float>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              uint64_t v59 = 0;
              long long v57 = 0u;
              long long v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(uint64_t **)v15;
            uint64_t v52 = *(uint64_t **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              uint64_t v55 = v29;
              do
              {
                uint64_t v56 = *v53++;
                *(_WORD *)uint64_t v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(uint64_t **)v15;
      uint64_t v19 = *(uint64_t **)(v15 + 8);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      unint64_t v23 = v61;
      unint64_t v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v60[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v60[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      uint64_t v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v60;
      if (v60) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59) {
        v59(0, (uint64_t)&v57, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAEB02C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<long long>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<long long>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAEB294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_WORD *)uint64_t v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEB398(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEB494(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEB590(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEB698(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEB7A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEB91C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<float>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEBA1C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEBB28(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEBC34(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long long>,applesauce::CF::ArrayRef>(void *a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t valuePtr = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAEBD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAEBE10(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v60);
        int v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v57);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<unsigned long>>(&v60, a3);
        uint64_t v16 = (void *)v57;
        uint64_t v17 = v60;
        BOOL v18 = *((void *)&v57 + 1) - (void)v57 == v61 - (void)v60
           && memcmp((const void *)v57, v60, *((void *)&v57 + 1) - v57) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(uint64_t **)v15;
            unint64_t v26 = *(uint64_t **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 3);
              uint64_t v30 = v29;
              do
              {
                uint64_t v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v59 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(uint64_t **)v15;
            long long v32 = *(uint64_t **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 3);
              uint64_t v35 = v29;
              do
              {
                uint64_t v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(uint64_t **)v15;
            uint64_t v37 = *(uint64_t **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 3);
              CFNumberRef v40 = v29;
              do
              {
                uint64_t v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<float>>((uint64_t)&v57, (unint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              uint64_t v59 = 0;
              long long v57 = 0u;
              long long v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(uint64_t **)v15;
            uint64_t v52 = *(uint64_t **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              uint64_t v55 = v29;
              do
              {
                uint64_t v56 = *v53++;
                *(_WORD *)uint64_t v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(uint64_t **)v15;
      uint64_t v19 = *(uint64_t **)(v15 + 8);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      unint64_t v23 = v61;
      unint64_t v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v60[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v60[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      uint64_t v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v60;
      if (v60) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59) {
        v59(0, (uint64_t)&v57, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAEC624(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<unsigned long>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned long>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAEC88C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_WORD *)uint64_t v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEC990(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAECA8C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAECB88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAECC90(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAECE0C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAECF14(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<float>>(uint64_t a1, unint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      unint64_t v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAED014(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAED120(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(unint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAED22C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned long>,applesauce::CF::ArrayRef>(void *a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t valuePtr = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAED37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<void const*>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAED408(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<long>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<long>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v60);
        int v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<long>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<long>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v57);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<long>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<long>>(&v60, a3);
        uint64_t v16 = (void *)v57;
        uint64_t v17 = v60;
        BOOL v18 = *((void *)&v57 + 1) - (void)v57 == v61 - (void)v60
           && memcmp((const void *)v57, v60, *((void *)&v57 + 1) - v57) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<long>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(uint64_t **)v15;
            unint64_t v26 = *(uint64_t **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 3);
              uint64_t v30 = v29;
              do
              {
                uint64_t v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v59 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(uint64_t **)v15;
            long long v32 = *(uint64_t **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 3);
              uint64_t v35 = v29;
              do
              {
                uint64_t v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(uint64_t **)v15;
            uint64_t v37 = *(uint64_t **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 3);
              CFNumberRef v40 = v29;
              do
              {
                uint64_t v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned short>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long long>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<float>>((uint64_t)&v57, (uint64_t **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long double>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,applesauce::CF::ArrayRef>(&v57, (uint64_t **)v15);
            }
            else
            {
LABEL_131:
              uint64_t v59 = 0;
              long long v57 = 0u;
              long long v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(uint64_t **)v15;
            uint64_t v52 = *(uint64_t **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 3);
              uint64_t v55 = v29;
              do
              {
                uint64_t v56 = *v53++;
                *(_WORD *)uint64_t v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(uint64_t **)v15;
      uint64_t v19 = *(uint64_t **)(v15 + 8);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 3;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 3);
      unint64_t v23 = v61;
      unint64_t v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v60[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v60[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      uint64_t v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v60;
      if (v60) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59) {
        v59(0, (uint64_t)&v57, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAEDC1C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<long>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<long>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 3);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<long>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAEDE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned short>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_WORD *)uint64_t v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEDF88(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEE084(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned int>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEE180(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEE2FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEE404(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<unsigned long long>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(void *)&v6[v8] = *(void *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEE50C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<float>>(uint64_t a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 3);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEE60C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEE718(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,std::vector<long double>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 3);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(double *)&v6[v8] = (double)*(uint64_t *)(v3 + v8);
      v8 += 8;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEE824(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<long>,applesauce::CF::ArrayRef>(void *a1, uint64_t **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  while (v5 != v6)
  {
    uint64_t valuePtr = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&valuePtr, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = valuePtr;
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAEE974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      CFNumberRef v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v60);
        int v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v57);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned int>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<unsigned int>>(&v60, a3);
        uint64_t v16 = (void *)v57;
        uint64_t v17 = v60;
        BOOL v18 = *((void *)&v57 + 1) - (void)v57 == v61 - (void)v60
           && memcmp((const void *)v57, v60, *((void *)&v57 + 1) - v57) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(int **)v15;
            unint64_t v26 = *(int **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 2);
              uint64_t v30 = v29;
              do
              {
                int v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v59 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(int **)v15;
            long long v32 = *(int **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 2);
              uint64_t v35 = v29;
              do
              {
                int v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(int **)v15;
            uint64_t v37 = *(int **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 2);
              CFNumberRef v40 = v29;
              do
              {
                int v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned short>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<int>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned int>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long long>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<float>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<double>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long double>>((uint64_t)&v57, (unsigned int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,applesauce::CF::ArrayRef>(&v57, v15);
            }
            else
            {
LABEL_131:
              uint64_t v59 = 0;
              long long v57 = 0u;
              long long v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(int **)v15;
            uint64_t v52 = *(int **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 2);
              uint64_t v55 = v29;
              do
              {
                int v56 = *v53++;
                *(_WORD *)uint64_t v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(int **)v15;
      uint64_t v19 = *(int **)(v15 + 8);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 2;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 2);
      unint64_t v23 = v61;
      unint64_t v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v60[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v60[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      uint64_t v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v60;
      if (v60) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59) {
        v59(0, (uint64_t)&v57, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAEF198(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned short>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_WORD *)CFNumberRef v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEF328(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<int>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    CFNumberRef v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    CFNumberRef v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = *(_DWORD *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEF430(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned int>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long>>(uint64_t a1, unsigned int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEF5AC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long>>(uint64_t a1, unsigned int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEF6B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long long>>(uint64_t a1, unsigned int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEF7BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<unsigned long long>>(uint64_t a1, unsigned int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEF8C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<float>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    CFNumberRef v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    CFNumberRef v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(float *)&v6[v8] = (float)*(unsigned int *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAEF9D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<double>>(uint64_t a1, unsigned int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEFADC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,std::vector<long double>>(uint64_t a1, unsigned int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAEFBE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned int>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v6 = *(_DWORD **)(a2 + 8);
  while (v5 != v6)
  {
    LODWORD(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAEFD38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAEFDC4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<int>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<int>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v57 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v57);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v57;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v60 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v60);
        int v12 = v60;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<int>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<int>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v57);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<int>>(&v57, a2);
        AMCP::Thing::convert_to<std::vector<int>>(&v60, a3);
        uint64_t v16 = (void *)v57;
        uint64_t v17 = v60;
        BOOL v18 = *((void *)&v57 + 1) - (void)v57 == v61 - (void)v60
           && memcmp((const void *)v57, v60, *((void *)&v57 + 1) - v57) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v57 = AMCP::Implementation::get_type_marker<std::vector<int>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v57);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(int **)v15;
            unint64_t v26 = *(int **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 2);
              uint64_t v30 = v29;
              do
              {
                int v31 = *v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v57, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v59 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(int **)v15;
            long long v32 = *(int **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 2);
              uint64_t v35 = v29;
              do
              {
                int v36 = *v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v57, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(int **)v15;
            uint64_t v37 = *(int **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 2);
              CFNumberRef v40 = v29;
              do
              {
                int v41 = *v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v57, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned short>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<int>>((uint64_t)&v57, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned int>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long long>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<float>>((uint64_t)&v57, (uint64_t *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<double>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long double>>((uint64_t)&v57, (int **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,applesauce::CF::ArrayRef>(&v57, v15);
            }
            else
            {
LABEL_131:
              uint64_t v59 = 0;
              long long v57 = 0u;
              long long v58 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(int **)v15;
            uint64_t v52 = *(int **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v55 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 2);
              uint64_t v55 = v29;
              do
              {
                int v56 = *v53++;
                *(_WORD *)uint64_t v55 = v56;
                v55 += 2;
              }
              while (v53 != v52);
            }
            uint64_t v59 = 0;
            long long v57 = 0u;
            long long v58 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v57, v29, (uint64_t)v55, (v55 - v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(int **)v15;
      uint64_t v19 = *(int **)(v15 + 8);
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v60 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 2;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v60, v21 >> 2);
      unint64_t v23 = v61;
      unint64_t v24 = v61 + v22;
      v61 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v60[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v60[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v59 = 0;
      long long v57 = 0u;
      long long v58 = 0u;
      std::vector<BOOL>::vector(&v57, (uint64_t)&v60);
      uint64_t v59 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v60;
      if (v60) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v57, (AMCP::Thing *)a3, v14);
      if (v59) {
        v59(0, (uint64_t)&v57, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF05D8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<int>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<int>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<int>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 2);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF0840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned short>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_WORD *)uint64_t v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF0944(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<int>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned int>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(_DWORD *)&v6[v8] = *(_DWORD *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAF0AC0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF0BC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF0CD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long long>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF0DD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<unsigned long long>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF0EE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<float>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 2);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(float *)&v6[v8] = (float)*(int *)(v3 + v8);
      v8 += 4;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAF0FEC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<double>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF10F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,std::vector<long double>>(uint64_t a1, int **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 2);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF1204(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<int>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  uint64_t v5 = *(_DWORD **)a2;
  uint64_t v6 = *(_DWORD **)(a2 + 8);
  while (v5 != v6)
  {
    LODWORD(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberIntType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF1354(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAF13E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v58 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v58);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v58;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      unint64_t v61 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v61);
        int v12 = v61;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v58 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v58);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v58 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v58);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned short>>(&v58, a2);
        AMCP::Thing::convert_to<std::vector<unsigned short>>(&v61, a3);
        uint64_t v16 = (void *)v58;
        uint64_t v17 = v61;
        BOOL v18 = *((void *)&v58 + 1) - (void)v58 == v62 - (void)v61
           && memcmp((const void *)v58, v61, *((void *)&v58 + 1) - v58) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_131;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v58 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v58);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = *(unsigned __int16 **)v15;
            unint64_t v26 = *(unsigned __int16 **)(v15 + 8);
            uint64_t v28 = (char *)v26 - (char *)v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 1);
              uint64_t v30 = v29;
              do
              {
                char v31 = *(unsigned char *)v27++;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v60 = 0;
            long long v58 = 0u;
            long long v59 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v58, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_105:
            uint64_t v60 = v51;
            if (!v29) {
              goto LABEL_108;
            }
            CFNumberRef v48 = v29;
            goto LABEL_107;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(unsigned __int16 **)v15;
            long long v32 = *(unsigned __int16 **)(v15 + 8);
            uint64_t v34 = (char *)v32 - (char *)v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 1);
              uint64_t v35 = v29;
              do
              {
                char v36 = *(unsigned char *)v33++;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v60 = 0;
            long long v58 = 0u;
            long long v59 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v58, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_105;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = *(unsigned __int16 **)v15;
            uint64_t v37 = *(unsigned __int16 **)(v15 + 8);
            uint64_t v39 = (char *)v37 - (char *)v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 1);
              CFNumberRef v40 = v29;
              do
              {
                char v41 = *(unsigned char *)v38++;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v60 = 0;
            long long v58 = 0u;
            long long v59 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v58, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_105;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned short>>((uint64_t)&v58, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<int>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned int>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long long>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<float>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<double>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long double>>((uint64_t)&v58, (unsigned __int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,applesauce::CF::ArrayRef>(&v58, v15);
            }
            else
            {
LABEL_131:
              uint64_t v60 = 0;
              long long v58 = 0u;
              long long v59 = 0u;
            }
            goto LABEL_108;
          }
          if (v15)
          {
            CFNumberRef v53 = *(unsigned __int16 **)v15;
            uint64_t v52 = *(unsigned __int16 **)(v15 + 8);
            uint64_t v54 = (char *)v52 - (char *)v53;
            if (v52 == v53)
            {
              long long v29 = 0;
              uint64_t v57 = 0;
            }
            else
            {
              if (v54 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v54 >> 1);
              long long v29 = v55;
              uint64_t v56 = 0;
              do
              {
                *(_WORD *)&v55[v56 * 2] = v53[v56];
                ++v56;
              }
              while (&v53[v56] != v52);
              uint64_t v57 = (uint64_t)&v55[v56 * 2];
            }
            uint64_t v60 = 0;
            long long v58 = 0u;
            long long v59 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v58, v29, v57, (v57 - (uint64_t)v29) >> 1);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_105;
          }
        }
LABEL_122:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_122;
      }
      BOOL v20 = *(unsigned __int16 **)v15;
      uint64_t v19 = *(unsigned __int16 **)(v15 + 8);
      unint64_t v62 = 0;
      uint64_t v63 = 0;
      unint64_t v61 = 0;
      uint64_t v21 = (char *)v19 - (char *)v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 1;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v61, v21 >> 1);
      unint64_t v23 = v62;
      unint64_t v24 = v62 + v22;
      v62 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v61[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v61[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        ++v20;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v60 = 0;
      long long v58 = 0u;
      long long v59 = 0u;
      std::vector<BOOL>::vector(&v58, (uint64_t)&v61);
      uint64_t v60 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v61;
      if (v61) {
LABEL_107:
      }
        operator delete(v48);
LABEL_108:
      AMCP::swap((AMCP::Thing *)&v58, (AMCP::Thing *)a3, v14);
      if (v60) {
        v60(0, (uint64_t)&v58, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF1C00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<unsigned short>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned short>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 1);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF1E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t result = std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  return result;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<int>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF1FE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned int>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF20EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF21F0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF22F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long long>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF23F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<unsigned long long>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF24FC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<float>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF2604(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<double>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF270C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,std::vector<long double>>(uint64_t a1, unsigned __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF2814(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned short>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  uint64_t v5 = *(_WORD **)a2;
  uint64_t v6 = *(_WORD **)(a2 + 8);
  while (v5 != v6)
  {
    LOWORD(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberShortType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF2964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

void *std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAF29F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<short>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<short>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<short>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v52 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v52);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v52;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      uint64_t v55 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v55);
        int v12 = v55;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v52 = AMCP::Implementation::get_type_marker<std::vector<short>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v52);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v52 = AMCP::Implementation::get_type_marker<std::vector<short>>();
        uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v52);
        size_t v50 = *(void *)(v13 + 8) - *(void *)v13;
        if (v50 == *(void *)(v49 + 8) - *(void *)v49 && !memcmp(*(const void **)v13, *(const void **)v49, v50)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<short>>(&v52, a2);
        AMCP::Thing::convert_to<std::vector<short>>(&v55, a3);
        uint64_t v16 = (void *)v52;
        uint64_t v17 = v55;
        BOOL v18 = *((void *)&v52 + 1) - (void)v52 == v56 - (void)v55
           && memcmp((const void *)v52, v55, *((void *)&v52 + 1) - v52) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v52 = AMCP::Implementation::get_type_marker<std::vector<short>>();
        uint64_t v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v52);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v27 = (char *)*v15;
            unint64_t v26 = (char *)v15[1];
            uint64_t v28 = v26 - v27;
            if (v26 == v27)
            {
              long long v29 = 0;
              uint64_t v30 = 0;
            }
            else
            {
              if (v28 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v28 >> 1);
              uint64_t v30 = v29;
              do
              {
                char v31 = *v27;
                v27 += 2;
                *v30++ = v31;
              }
              while (v27 != v26);
            }
            uint64_t v54 = 0;
            long long v52 = 0u;
            long long v53 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v52, v29, (uint64_t)v30, v30 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_97:
            uint64_t v54 = v51;
            if (!v29) {
              goto LABEL_100;
            }
            CFNumberRef v48 = v29;
            goto LABEL_99;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = (char *)*v15;
            long long v32 = (char *)v15[1];
            uint64_t v34 = v32 - v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v35 = 0;
            }
            else
            {
              if (v34 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v34 >> 1);
              uint64_t v35 = v29;
              do
              {
                char v36 = *v33;
                v33 += 2;
                *v35++ = v36;
              }
              while (v33 != v32);
            }
            uint64_t v54 = 0;
            long long v52 = 0u;
            long long v53 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v52, v29, (uint64_t)v35, v35 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_97;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            CFNumberRef v38 = (char *)*v15;
            uint64_t v37 = (char *)v15[1];
            uint64_t v39 = v37 - v38;
            if (v37 == v38)
            {
              long long v29 = 0;
              CFNumberRef v40 = 0;
            }
            else
            {
              if (v39 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = operator new(v39 >> 1);
              CFNumberRef v40 = v29;
              do
              {
                char v41 = *v38;
                v38 += 2;
                *v40++ = v41;
              }
              while (v38 != v37);
            }
            uint64_t v54 = 0;
            long long v52 = 0u;
            long long v53 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v52, v29, (uint64_t)v40, v40 - v29);
            CFStringRef v51 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_97;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned short>>((uint64_t)&v52, v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<int>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned int>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long long>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<float>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<double>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long double>>((uint64_t)&v52, (__int16 **)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,applesauce::CF::ArrayRef>(&v52, (uint64_t)v15);
            }
            else
            {
LABEL_125:
              uint64_t v54 = 0;
              long long v52 = 0u;
              long long v53 = 0u;
            }
            goto LABEL_100;
          }
          if (v15)
          {
            uint64_t v54 = 0;
            long long v52 = 0u;
            long long v53 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v52, (const void *)*v15, v15[1], (v15[1] - *v15) >> 1);
            uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_100;
          }
        }
LABEL_116:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_116;
      }
      BOOL v20 = (char *)*v15;
      uint64_t v19 = (char *)v15[1];
      unint64_t v56 = 0;
      uint64_t v57 = 0;
      uint64_t v55 = 0;
      uint64_t v21 = v19 - v20;
      if (v19 == v20) {
        goto LABEL_80;
      }
      uint64_t v22 = v21 >> 1;
      std::vector<BOOL>::__vallocate[abi:ne180100](&v55, v21 >> 1);
      unint64_t v23 = v56;
      unint64_t v24 = v56 + v22;
      v56 += v22;
      if (v23)
      {
        unint64_t v25 = v24 - 1;
        if (((v24 - 1) ^ (v23 - 1)) < 0x40) {
          goto LABEL_72;
        }
      }
      else
      {
        unint64_t v25 = v24 - 1;
      }
      unint64_t v42 = v25 >> 6;
      if (v24 >= 0x41) {
        unint64_t v43 = v42;
      }
      else {
        unint64_t v43 = 0;
      }
      *(void *)&v55[8 * v43] = 0;
LABEL_72:
      int v44 = v23 & 0x3F;
      unint64_t v45 = &v55[8 * (v23 >> 6)];
      do
      {
        uint64_t v46 = 1 << v44;
        if (*(_WORD *)v20) {
          uint64_t v47 = *(void *)v45 | v46;
        }
        else {
          uint64_t v47 = *(void *)v45 & ~v46;
        }
        *(void *)unint64_t v45 = v47;
        v20 += 2;
        v45 += 8 * (v44 == 63);
        if (v44 == 63) {
          int v44 = 0;
        }
        else {
          ++v44;
        }
      }
      while (v20 != v19);
LABEL_80:
      uint64_t v54 = 0;
      long long v52 = 0u;
      long long v53 = 0u;
      std::vector<BOOL>::vector(&v52, (uint64_t)&v55);
      uint64_t v54 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      CFNumberRef v48 = v55;
      if (v55) {
LABEL_99:
      }
        operator delete(v48);
LABEL_100:
      AMCP::swap((AMCP::Thing *)&v52, (AMCP::Thing *)a3, v14);
      if (v54) {
        v54(0, (uint64_t)&v52, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF31C4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<short>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<short>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(a1, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 1);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<short>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(a1, *(const void **)v8, *(void *)(v8 + 8), (uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 1);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF3424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned short>>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 == *a2)
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5 >> 1);
    uint64_t v7 = v6;
    uint64_t v8 = 0;
    do
    {
      *(_WORD *)&v6[v8] = *(_WORD *)(v3 + v8);
      v8 += 2;
    }
    while (v3 + v8 != v4);
    uint64_t v9 = (uint64_t)&v6[v8];
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v7, v9, (v9 - (uint64_t)v7) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v7)
  {
    operator delete(v7);
  }
}

void sub_1BAAF3534(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<int>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3638(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned int>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)uint64_t v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF373C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3840(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3944(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long long>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3A48(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<unsigned long long>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)uint64_t v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3B4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<float>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x7FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3C54(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<double>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3D5C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,std::vector<long double>>(uint64_t a1, __int16 **a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (char *)v4 - (char *)*a2;
  if (v4 == *a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if ((unint64_t)v5 >= 0x3FFFFFFFFFFFFFFFLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5 >> 1);
    uint64_t v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF3E64(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<short>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  uint64_t v5 = *(_WORD **)a2;
  uint64_t v6 = *(_WORD **)(a2 + 8);
  while (v5 != v6)
  {
    LOWORD(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberShortType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF3FB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(uint64_t a1)
{
  if (a1 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a1);
}

void *std::vector<BOOL>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      CFNumberRef v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v53 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v53);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v53;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      unint64_t v56 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v56);
        int v12 = v56;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v53);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
        uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v53);
        size_t v46 = *(void *)(v13 + 8) - *(void *)v13;
        if (v46 == *(void *)(v45 + 8) - *(void *)v45 && !memcmp(*(const void **)v13, *(const void **)v45, v46)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<unsigned char>>(&v53, a2);
        AMCP::Thing::convert_to<std::vector<unsigned char>>(&v56, a3);
        uint64_t v16 = (void *)v53;
        uint64_t v17 = v56;
        BOOL v18 = *((void *)&v53 + 1) - (void)v53 == v57 - (void)v56
           && memcmp((const void *)v53, v56, *((void *)&v53 + 1) - v53) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v53);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v26 = *(unsigned char **)v15;
            unint64_t v25 = *(unsigned char **)(v15 + 8);
            size_t v27 = v25 - v26;
            if (v25 == v26)
            {
              long long v29 = 0;
              uint64_t v31 = 0;
            }
            else
            {
              if ((v27 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = operator new(v27);
              long long v29 = v28;
              uint64_t v30 = 0;
              do
              {
                *((unsigned char *)v28 + v30) = v26[v30];
                ++v30;
              }
              while (&v26[v30] != v25);
              uint64_t v31 = (uint64_t)v28 + v30;
            }
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v53, v29, v31, v31 - (void)v29);
            uint64_t v47 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_93:
            uint64_t v55 = v47;
            if (!v29) {
              goto LABEL_96;
            }
            int v44 = (char *)v29;
            goto LABEL_95;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(unsigned char **)v15;
            long long v32 = *(unsigned char **)(v15 + 8);
            size_t v34 = v32 - v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v37 = 0;
            }
            else
            {
              if ((v34 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v35 = operator new(v34);
              long long v29 = v35;
              uint64_t v36 = 0;
              do
              {
                *((unsigned char *)v35 + v36) = v33[v36];
                ++v36;
              }
              while (&v33[v36] != v32);
              uint64_t v37 = (uint64_t)v35 + v36;
            }
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v53, v29, v37, v37 - (void)v29);
            uint64_t v47 = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_93;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v53, *(const void **)v15, *(void *)(v15 + 8), *(void *)(v15 + 8) - *(void *)v15);
            uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_96;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned short>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<int>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned int>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<float>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<double>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long double>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,applesauce::CF::ArrayRef>(&v53, v15);
            }
            else
            {
LABEL_125:
              uint64_t v55 = 0;
              long long v53 = 0u;
              long long v54 = 0u;
            }
            goto LABEL_96;
          }
          if (v15)
          {
            uint64_t v49 = *(unsigned __int8 **)v15;
            CFNumberRef v48 = *(unsigned __int8 **)(v15 + 8);
            uint64_t v50 = v48 - v49;
            if (v48 == v49)
            {
              long long v29 = 0;
              CFStringRef v51 = 0;
            }
            else
            {
              if (v50 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v50);
              CFStringRef v51 = (char *)v29;
              do
              {
                __int16 v52 = *v49++;
                *(_WORD *)CFStringRef v51 = v52;
                v51 += 2;
              }
              while (v49 != v48);
            }
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v53, v29, (uint64_t)v51, (v51 - (unsigned char *)v29) >> 1);
            uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_93;
          }
        }
LABEL_116:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_116;
      }
      BOOL v20 = *(unsigned char **)v15;
      uint64_t v19 = *(unsigned char **)(v15 + 8);
      unint64_t v57 = 0;
      uint64_t v58 = 0;
      unint64_t v56 = 0;
      uint64_t v21 = v19 - v20;
      if (v19 == v20) {
        goto LABEL_76;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](&v56, v19 - v20);
      unint64_t v22 = v57;
      unint64_t v23 = v57 + v21;
      v57 += v21;
      if (v22)
      {
        unint64_t v24 = v23 - 1;
        if (((v23 - 1) ^ (v22 - 1)) < 0x40) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v24 = v23 - 1;
      }
      unint64_t v38 = v24 >> 6;
      if (v23 >= 0x41) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = 0;
      }
      *(void *)&v56[8 * v39] = 0;
LABEL_68:
      int v40 = v22 & 0x3F;
      char v41 = &v56[8 * (v22 >> 6)];
      do
      {
        uint64_t v42 = 1 << v40;
        if (*v20) {
          uint64_t v43 = *(void *)v41 | v42;
        }
        else {
          uint64_t v43 = *(void *)v41 & ~v42;
        }
        *(void *)char v41 = v43;
        ++v20;
        v41 += 8 * (v40 == 63);
        if (v40 == 63) {
          int v40 = 0;
        }
        else {
          ++v40;
        }
      }
      while (v20 != v19);
LABEL_76:
      uint64_t v55 = 0;
      long long v53 = 0u;
      long long v54 = 0u;
      std::vector<BOOL>::vector(&v53, (uint64_t)&v56);
      uint64_t v55 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      int v44 = v56;
      if (v56) {
LABEL_95:
      }
        operator delete(v44);
LABEL_96:
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v14);
      if (v55) {
        v55(0, (uint64_t)&v53, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF484C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<unsigned char>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<unsigned char>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(a1, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF4AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned short>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  uint64_t v5 = (uint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      __int16 v8 = *v3++;
      *(_WORD *)CFNumberRef v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF4BA4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<int>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)CFNumberRef v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF4CA0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned int>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)CFNumberRef v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF4D9C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF4E98(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF4F94(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF5090(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<unsigned long long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF518C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<float>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF528C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<double>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF538C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,std::vector<long double>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (unsigned __int8 *)*a2;
  uint64_t v4 = (unsigned __int8 *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (unsigned __int8 *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      unsigned int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF548C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<unsigned char>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  unint64_t v5 = *(unsigned char **)a2;
  uint64_t v6 = *(unsigned char **)(a2 + 8);
  while (v5 != v6)
  {
    LOBYTE(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberCharType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF55DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      CFNumberRef v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v53 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v53);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v53;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      unint64_t v56 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v56);
        int v12 = v56;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v53);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
        uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v53);
        size_t v46 = *(void *)(v13 + 8) - *(void *)v13;
        if (v46 == *(void *)(v45 + 8) - *(void *)v45 && !memcmp(*(const void **)v13, *(const void **)v45, v46)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<signed char>>(&v53, a2);
        AMCP::Thing::convert_to<std::vector<signed char>>(&v56, a3);
        uint64_t v16 = (void *)v53;
        uint64_t v17 = v56;
        BOOL v18 = *((void *)&v53 + 1) - (void)v53 == v57 - (void)v56
           && memcmp((const void *)v53, v56, *((void *)&v53 + 1) - v53) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v53);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            unint64_t v26 = *(unsigned char **)v15;
            unint64_t v25 = *(unsigned char **)(v15 + 8);
            size_t v27 = v25 - v26;
            if (v25 == v26)
            {
              long long v29 = 0;
              uint64_t v31 = 0;
            }
            else
            {
              if ((v27 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v28 = operator new(v27);
              long long v29 = v28;
              uint64_t v30 = 0;
              do
              {
                *((unsigned char *)v28 + v30) = v26[v30];
                ++v30;
              }
              while (&v26[v30] != v25);
              uint64_t v31 = (uint64_t)v28 + v30;
            }
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v53, v29, v31, v31 - (void)v29);
            uint64_t v47 = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_84:
            uint64_t v55 = v47;
            if (!v29) {
              goto LABEL_87;
            }
            int v44 = (char *)v29;
            goto LABEL_86;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v15)
          {
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v53, *(const void **)v15, *(void *)(v15 + 8), *(void *)(v15 + 8) - *(void *)v15);
            uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_87;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v15)
          {
            uint64_t v33 = *(unsigned char **)v15;
            long long v32 = *(unsigned char **)(v15 + 8);
            size_t v34 = v32 - v33;
            if (v32 == v33)
            {
              long long v29 = 0;
              uint64_t v37 = 0;
            }
            else
            {
              if ((v34 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v35 = operator new(v34);
              long long v29 = v35;
              uint64_t v36 = 0;
              do
              {
                *((unsigned char *)v35 + v36) = v33[v36];
                ++v36;
              }
              while (&v33[v36] != v32);
              uint64_t v37 = (uint64_t)v35 + v36;
            }
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v53, v29, v37, v37 - (void)v29);
            uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_84;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned short>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<int>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned int>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<float>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<double>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long double>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,applesauce::CF::ArrayRef>(&v53, v15);
            }
            else
            {
LABEL_125:
              uint64_t v55 = 0;
              long long v53 = 0u;
              long long v54 = 0u;
            }
            goto LABEL_87;
          }
          if (v15)
          {
            uint64_t v49 = *(char **)v15;
            CFNumberRef v48 = *(char **)(v15 + 8);
            uint64_t v50 = v48 - v49;
            if (v48 == v49)
            {
              long long v29 = 0;
              CFStringRef v51 = 0;
            }
            else
            {
              if (v50 < 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v50);
              CFStringRef v51 = (char *)v29;
              do
              {
                __int16 v52 = *v49++;
                *(_WORD *)CFStringRef v51 = v52;
                v51 += 2;
              }
              while (v49 != v48);
            }
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v53, v29, (uint64_t)v51, (v51 - (unsigned char *)v29) >> 1);
            uint64_t v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_84;
          }
        }
LABEL_116:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v15) {
        goto LABEL_116;
      }
      BOOL v20 = *(unsigned char **)v15;
      uint64_t v19 = *(unsigned char **)(v15 + 8);
      unint64_t v57 = 0;
      uint64_t v58 = 0;
      unint64_t v56 = 0;
      uint64_t v21 = v19 - v20;
      if (v19 == v20) {
        goto LABEL_76;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](&v56, v19 - v20);
      unint64_t v22 = v57;
      unint64_t v23 = v57 + v21;
      v57 += v21;
      if (v22)
      {
        unint64_t v24 = v23 - 1;
        if (((v23 - 1) ^ (v22 - 1)) < 0x40) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v24 = v23 - 1;
      }
      unint64_t v38 = v24 >> 6;
      if (v23 >= 0x41) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = 0;
      }
      *(void *)&v56[8 * v39] = 0;
LABEL_68:
      int v40 = v22 & 0x3F;
      char v41 = &v56[8 * (v22 >> 6)];
      do
      {
        uint64_t v42 = 1 << v40;
        if (*v20) {
          uint64_t v43 = *(void *)v41 | v42;
        }
        else {
          uint64_t v43 = *(void *)v41 & ~v42;
        }
        *(void *)char v41 = v43;
        ++v20;
        v41 += 8 * (v40 == 63);
        if (v40 == 63) {
          int v40 = 0;
        }
        else {
          ++v40;
        }
      }
      while (v20 != v19);
LABEL_76:
      uint64_t v55 = 0;
      long long v53 = 0u;
      long long v54 = 0u;
      std::vector<BOOL>::vector(&v53, (uint64_t)&v56);
      uint64_t v55 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      int v44 = v56;
      if (v56) {
LABEL_86:
      }
        operator delete(v44);
LABEL_87:
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v14);
      if (v55) {
        v55(0, (uint64_t)&v53, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF5DC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<signed char>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    unint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(a1, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<signed char>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(a1, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF601C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned short>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  uint64_t v5 = (uint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      __int16 v8 = *v3++;
      *(_WORD *)CFNumberRef v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF611C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<int>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)CFNumberRef v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6218(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned int>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)CFNumberRef v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6314(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6410(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF650C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6608(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<unsigned long long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6704(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<float>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6804(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<double>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6904(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,std::vector<long double>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF6A04(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<signed char>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  unint64_t v5 = *(unsigned char **)a2;
  uint64_t v6 = *(unsigned char **)(a2 + 8);
  while (v5 != v6)
  {
    LOBYTE(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberCharType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF6B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      CFNumberRef v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<char>>();
      uint64_t result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::vector<char>>();
      unint64_t v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v53 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v53);
        unint64_t v11 = (void (*)(uint64_t, uint64_t, void, long long *))v53;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_30;
      }
      int v12 = *(char **)(a3 + 32);
      unint64_t v56 = 0;
      if (v12)
      {
        ((void (*)(uint64_t, uint64_t, void, char **))v12)(3, a3, 0, &v56);
        int v12 = v56;
      }
      if (v12 == (char *)v10)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<char>>();
          uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v53);
        }
        else
        {
          uint64_t v13 = 0;
        }
        *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<char>>();
        uint64_t v45 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v53);
        size_t v46 = *(void *)(v13 + 8) - *(void *)v13;
        if (v46 == *(void *)(v45 + 8) - *(void *)v45 && !memcmp(*(const void **)v13, *(const void **)v45, v46)) {
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<char>>(&v53, a2);
        AMCP::Thing::convert_to<std::vector<char>>(&v56, a3);
        uint64_t v16 = (void *)v53;
        uint64_t v17 = v56;
        BOOL v18 = *((void *)&v53 + 1) - (void)v53 == v57 - (void)v56
           && memcmp((const void *)v53, v56, *((void *)&v53 + 1) - v53) == 0;
        if (v17) {
          operator delete(v17);
        }
        if (v16) {
          operator delete(v16);
        }
        if (v18) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_125;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v53 = AMCP::Implementation::get_type_marker<std::vector<char>>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v53);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v15)
          {
            uint64_t v55 = 0;
            long long v53 = 0u;
            long long v54 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(&v53, *(const void **)v15, *(void *)(v15 + 8), *(void *)(v15 + 8) - *(void *)v15);
            uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
            goto LABEL_102;
          }
LABEL_116:
          __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
        }
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (!v15) {
            goto LABEL_116;
          }
          unint64_t v26 = *(unsigned char **)v15;
          unint64_t v25 = *(unsigned char **)(v15 + 8);
          size_t v27 = v25 - v26;
          if (v25 == v26)
          {
            long long v29 = 0;
            uint64_t v31 = 0;
          }
          else
          {
            if ((v27 & 0x8000000000000000) != 0) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v28 = operator new(v27);
            long long v29 = v28;
            uint64_t v30 = 0;
            do
            {
              *((unsigned char *)v28 + v30) = v26[v30];
              ++v30;
            }
            while (&v26[v30] != v25);
            uint64_t v31 = (uint64_t)v28 + v30;
          }
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(&v53, v29, v31, v31 - (void)v29);
          __int16 v52 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (!v15) {
            goto LABEL_116;
          }
          uint64_t v33 = *(unsigned char **)v15;
          long long v32 = *(unsigned char **)(v15 + 8);
          size_t v34 = v32 - v33;
          if (v32 == v33)
          {
            long long v29 = 0;
            uint64_t v37 = 0;
          }
          else
          {
            if ((v34 & 0x8000000000000000) != 0) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v35 = operator new(v34);
            long long v29 = v35;
            uint64_t v36 = 0;
            do
            {
              *((unsigned char *)v35 + v36) = v33[v36];
              ++v36;
            }
            while (&v33[v36] != v32);
            uint64_t v37 = (uint64_t)v35 + v36;
          }
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v53, v29, v37, v37 - (void)v29);
          __int16 v52 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned short>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<int>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned int>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long long>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<float>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<double>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long double>>((uint64_t)&v53, (void *)v15);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,applesauce::CF::ArrayRef>(&v53, v15);
            }
            else
            {
LABEL_125:
              uint64_t v55 = 0;
              long long v53 = 0u;
              long long v54 = 0u;
            }
            goto LABEL_102;
          }
          if (!v15) {
            goto LABEL_116;
          }
          CFNumberRef v48 = *(char **)v15;
          uint64_t v47 = *(char **)(v15 + 8);
          uint64_t v49 = v47 - v48;
          if (v47 == v48)
          {
            long long v29 = 0;
            uint64_t v50 = 0;
          }
          else
          {
            if (v49 < 0) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            long long v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v49);
            uint64_t v50 = (char *)v29;
            do
            {
              __int16 v51 = *v48++;
              *(_WORD *)uint64_t v50 = v51;
              v50 += 2;
            }
            while (v48 != v47);
          }
          uint64_t v55 = 0;
          long long v53 = 0u;
          long long v54 = 0u;
          std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(&v53, v29, (uint64_t)v50, (v50 - (unsigned char *)v29) >> 1);
          __int16 v52 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
        }
        uint64_t v55 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t *))v52;
        if (!v29) {
          goto LABEL_102;
        }
        int v44 = (char *)v29;
        goto LABEL_101;
      }
      if (!v15) {
        goto LABEL_116;
      }
      BOOL v20 = *(unsigned char **)v15;
      uint64_t v19 = *(unsigned char **)(v15 + 8);
      unint64_t v57 = 0;
      uint64_t v58 = 0;
      unint64_t v56 = 0;
      uint64_t v21 = v19 - v20;
      if (v19 == v20) {
        goto LABEL_76;
      }
      std::vector<BOOL>::__vallocate[abi:ne180100](&v56, v19 - v20);
      unint64_t v22 = v57;
      unint64_t v23 = v57 + v21;
      v57 += v21;
      if (v22)
      {
        unint64_t v24 = v23 - 1;
        if (((v23 - 1) ^ (v22 - 1)) < 0x40) {
          goto LABEL_68;
        }
      }
      else
      {
        unint64_t v24 = v23 - 1;
      }
      unint64_t v38 = v24 >> 6;
      if (v23 >= 0x41) {
        unint64_t v39 = v38;
      }
      else {
        unint64_t v39 = 0;
      }
      *(void *)&v56[8 * v39] = 0;
LABEL_68:
      int v40 = v22 & 0x3F;
      char v41 = &v56[8 * (v22 >> 6)];
      do
      {
        uint64_t v42 = 1 << v40;
        if (*v20) {
          uint64_t v43 = *(void *)v41 | v42;
        }
        else {
          uint64_t v43 = *(void *)v41 & ~v42;
        }
        *(void *)char v41 = v43;
        ++v20;
        v41 += 8 * (v40 == 63);
        if (v40 == 63) {
          int v40 = 0;
        }
        else {
          ++v40;
        }
      }
      while (v20 != v19);
LABEL_76:
      uint64_t v55 = 0;
      long long v53 = 0u;
      long long v54 = 0u;
      std::vector<BOOL>::vector(&v53, (uint64_t)&v56);
      uint64_t v55 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      int v44 = v56;
      if (v56) {
LABEL_101:
      }
        operator delete(v44);
LABEL_102:
      AMCP::swap((AMCP::Thing *)&v53, (AMCP::Thing *)a3, v14);
      if (v55) {
        v55(0, (uint64_t)&v53, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF733C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p)
{
  if (v14) {
    operator delete(v14);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<char>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<char>>();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    unint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<char>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(a1, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF7594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned short>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  uint64_t v5 = (uint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      __int16 v8 = *v3++;
      *(_WORD *)CFNumberRef v7 = v8;
      v7 += 2;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7694(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<int>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)CFNumberRef v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7790(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned int>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *(_DWORD *)CFNumberRef v7 = v8;
      v7 += 4;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF788C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7988(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7A84(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7B80(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<unsigned long long>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      uint64_t v8 = *v3++;
      *(void *)CFNumberRef v7 = v8;
      v7 += 8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, (v7 - v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7C7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<float>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (float)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7D7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<double>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7E7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,std::vector<long double>>(uint64_t a1, void *a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  uint64_t v3 = (char *)*a2;
  uint64_t v4 = (char *)a2[1];
  unint64_t v5 = (unint64_t)&v4[-*a2];
  if (v4 == (char *)*a2)
  {
    uint64_t v6 = 0;
    CFNumberRef v7 = 0;
  }
  else
  {
    if (v5 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (double *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v5);
    CFNumberRef v7 = v6;
    do
    {
      int v8 = *v3++;
      *v7++ = (double)v8;
    }
    while (v3 != v4);
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, v7 - v6);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF7F7C(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<char>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v9[1] = Mutable;
  unint64_t v5 = *(unsigned char **)a2;
  uint64_t v6 = *(unsigned char **)(a2 + 8);
  while (v5 != v6)
  {
    LOBYTE(v9[0]) = *v5;
    CFNumberRef v7 = CFNumberCreate(0, kCFNumberCharType, v9);
    if (!v7)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v7);
    CFRelease(v7);
    ++v5;
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v9, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v9[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF80CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      if (*(void *)a2) {
        operator delete(*(void **)a2);
      }
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<BOOL>::vector((void *)a3, a2);
      uint64_t result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      return result;
    case 2:
      uint64_t result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 8) = *(void *)(a2 + 8);
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
      uint64_t result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::vector<BOOL>>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, void **))(a2 + 32);
      __p[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, __p);
        uint64_t v10 = (void (*)(uint64_t, uint64_t, void, void **))__p[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, void **))v9) {
        goto LABEL_30;
      }
      unint64_t v11 = *(void **)(a3 + 32);
      v53[0] = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, void, void **))v11)(3, a3, 0, v53);
        unint64_t v11 = v53[0];
      }
      if (v11 == (void *)v9)
      {
        if (*(void *)(a2 + 32))
        {
          __p[0] = (void *)AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
          uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a2 + 32))(4, a2, 0, __p);
        }
        else
        {
          uint64_t v12 = 0;
        }
        if (*(void *)(a3 + 32))
        {
          __p[0] = (void *)AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
          uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a3 + 32))(4, a3, 0, __p);
        }
        else
        {
          uint64_t v39 = 0;
        }
        unint64_t v40 = *(void *)(v12 + 8);
        if (v40 == *(void *)(v39 + 8))
        {
          int v41 = std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(*(void **)v12, 0, *(void *)v12 + 8 * (v40 >> 6), v40 & 0x3F, *(void **)v39);
          uint64_t result = 0;
          if (!v41) {
            return result;
          }
          return 1;
        }
      }
      else
      {
LABEL_30:
        AMCP::Thing::convert_to<std::vector<BOOL>>(__p, a2);
        AMCP::Thing::convert_to<std::vector<BOOL>>(v53, a3);
        uint64_t v15 = v53[0];
        if (__p[1] == v53[1]) {
          char v16 = std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>((void *)__p[0], 0, (uint64_t)__p[0] + 8 * ((unint64_t)__p[1] >> 6), (uint64_t)__p[1] & 0x3F, v53[0]);
        }
        else {
          char v16 = 0;
        }
        if (v15) {
          operator delete(v15);
        }
        if (__p[0]) {
          operator delete(__p[0]);
        }
        if (v16) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<signed char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned char>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<unsigned short>>()
        && *a4 != AMCP::Implementation::get_type_marker<std::vector<int>>()
        && !AMCP::is_one_of<std::vector<unsigned int>,std::vector<long>,std::vector<unsigned long>,std::vector<long long>,std::vector<unsigned long long>,std::vector<float>,std::vector<double>,std::vector<long double>,applesauce::CF::ArrayRef>(a4))
      {
        goto LABEL_151;
      }
      if (*(void *)(a2 + 32))
      {
        __p[0] = (void *)AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
        int v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a2 + 32))(4, a2, 0, __p);
      }
      else
      {
        int v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<std::vector<BOOL>>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<std::vector<char>>())
        {
          if (v14)
          {
            unint64_t v17 = v14[1];
            if (v17)
            {
              if ((v17 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              BOOL v18 = (void *)*v14;
              uint64_t v19 = operator new(v14[1]);
              BOOL v20 = v19;
              if (v17 > 0x3F || (uint64_t v21 = v19, (v17 & 0x3F) != 0))
              {
                int v22 = 0;
                unint64_t v23 = &v18[v17 >> 6];
                uint64_t v21 = v19;
                do
                {
                  *v21++ = (*v18 >> v22) & 1;
                  v18 += v22 == 63;
                  if (v22 == 63) {
                    int v22 = 0;
                  }
                  else {
                    ++v22;
                  }
                }
                while (v18 != v23 || v22 != (v17 & 0x3F));
              }
            }
            else
            {
              BOOL v20 = 0;
              uint64_t v21 = 0;
            }
            __int16 v52 = 0;
            *(_OWORD *)std::string __p = 0u;
            long long v51 = 0u;
            std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(__p, v20, (uint64_t)v21, v21 - (unsigned char *)v20);
            uint64_t v42 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<char>>::dispatch;
LABEL_126:
            __int16 v52 = v42;
            if (v20) {
              operator delete(v20);
            }
            goto LABEL_128;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<signed char>>())
        {
          if (v14)
          {
            unint64_t v25 = v14[1];
            if (v25)
            {
              if ((v25 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v26 = (void *)*v14;
              size_t v27 = operator new(v14[1]);
              BOOL v20 = v27;
              if (v25 > 0x3F || (uint64_t v28 = v27, (v25 & 0x3F) != 0))
              {
                int v29 = 0;
                uint64_t v30 = &v26[v25 >> 6];
                uint64_t v28 = v27;
                do
                {
                  *v28++ = (*v26 >> v29) & 1;
                  v26 += v29 == 63;
                  if (v29 == 63) {
                    int v29 = 0;
                  }
                  else {
                    ++v29;
                  }
                }
                while (v26 != v30 || v29 != (v25 & 0x3F));
              }
            }
            else
            {
              BOOL v20 = 0;
              uint64_t v28 = 0;
            }
            __int16 v52 = 0;
            *(_OWORD *)std::string __p = 0u;
            long long v51 = 0u;
            std::vector<signed char>::__init_with_size[abi:ne180100]<signed char *,signed char *>(__p, v20, (uint64_t)v28, v28 - (unsigned char *)v20);
            uint64_t v42 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<signed char>>::dispatch;
            goto LABEL_126;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned char>>())
        {
          if (v14)
          {
            unint64_t v32 = v14[1];
            if (v32)
            {
              if ((v32 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v33 = (void *)*v14;
              size_t v34 = operator new(v14[1]);
              BOOL v20 = v34;
              if (v32 > 0x3F || (uint64_t v35 = v34, (v32 & 0x3F) != 0))
              {
                int v36 = 0;
                uint64_t v37 = &v33[v32 >> 6];
                uint64_t v35 = v34;
                do
                {
                  *v35++ = (*v33 >> v36) & 1;
                  v33 += v36 == 63;
                  if (v36 == 63) {
                    int v36 = 0;
                  }
                  else {
                    ++v36;
                  }
                }
                while (v33 != v37 || v36 != (v32 & 0x3F));
              }
            }
            else
            {
              BOOL v20 = 0;
              uint64_t v35 = 0;
            }
            __int16 v52 = 0;
            *(_OWORD *)std::string __p = 0u;
            long long v51 = 0u;
            std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__p, v20, (uint64_t)v35, v35 - (unsigned char *)v20);
            uint64_t v42 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::vector<unsigned char>>::dispatch;
            goto LABEL_126;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<std::vector<short>>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned short>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned short>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<int>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned int>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned int>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<unsigned long long>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long long>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<float>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<float>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<double>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<std::vector<long double>>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long double>>((uint64_t)__p, (uint64_t)v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>())
            {
              AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,applesauce::CF::ArrayRef>(__p, (uint64_t)v14);
            }
            else
            {
LABEL_151:
              __int16 v52 = 0;
              *(_OWORD *)std::string __p = 0u;
              long long v51 = 0u;
            }
            goto LABEL_128;
          }
          if (v14)
          {
            unint64_t v43 = v14[1];
            if (v43)
            {
              if ((v43 & 0x8000000000000000) != 0) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              int v44 = (void *)*v14;
              uint64_t v45 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v14[1]);
              BOOL v20 = v45;
              if (v43 > 0x3F || (size_t v46 = (char *)v45, (v43 & 0x3F) != 0))
              {
                int v47 = 0;
                CFNumberRef v48 = &v44[v43 >> 6];
                size_t v46 = (char *)v45;
                do
                {
                  *(_WORD *)size_t v46 = (*v44 >> v47) & 1;
                  v46 += 2;
                  v44 += v47 == 63;
                  if (v47 == 63) {
                    int v47 = 0;
                  }
                  else {
                    ++v47;
                  }
                }
                while (v44 != v48 || v47 != (v43 & 0x3F));
              }
            }
            else
            {
              BOOL v20 = 0;
              size_t v46 = 0;
            }
            __int16 v52 = 0;
            *(_OWORD *)std::string __p = 0u;
            long long v51 = 0u;
            std::vector<short>::__init_with_size[abi:ne180100]<short *,short *>(__p, v20, (uint64_t)v46, (v46 - (unsigned char *)v20) >> 1);
            uint64_t v42 = AMCP::Implementation::In_Place_Storage<std::vector<short>>::dispatch;
            goto LABEL_126;
          }
        }
LABEL_142:
        __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_142;
      }
      __int16 v52 = 0;
      *(_OWORD *)std::string __p = 0u;
      long long v51 = 0u;
      std::vector<BOOL>::vector(__p, (uint64_t)v14);
      __int16 v52 = AMCP::Implementation::In_Place_Storage<std::vector<BOOL>>::dispatch;
LABEL_128:
      AMCP::swap((AMCP::Thing *)__p, (AMCP::Thing *)a3, v13);
      if (v52) {
        ((void (*)(void, void **, void, void))v52)(0, __p, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAF8950(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (v9) {
    operator delete(v9);
  }
  __clang_call_terminate(a1);
}

void *AMCP::Thing::convert_to<std::vector<BOOL>>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    unint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6) {
      return std::vector<BOOL>::vector(a1, v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<std::vector<BOOL>>();
  memset(v17, 0, sizeof(v17));
  BOOL v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    unint64_t v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t result = std::vector<BOOL>::vector(a1, v8);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAF8B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::vector<BOOL>,true,true>(void *a1, unsigned int a2, uint64_t a3, unsigned int a4, void *a5)
{
  int64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2)) {
        unint64_t v6 = 64 - a2;
      }
      else {
        unint64_t v6 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
      }
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0) {
        return 0;
      }
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        uint64_t v7 = v5 - 64;
        ++a1;
        ++a5;
        BOOL v8 = v5 <= 127;
        v5 -= 64;
        if (v8) {
          goto LABEL_14;
        }
      }
      return 0;
    }
    uint64_t v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7) {
      return 0;
    }
  }
  return 1;
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if ((v3 & 0x8000000000000000) != 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (char *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (char *)v5;
      do
      {
        *(_WORD *)uint64_t v7 = (*v4 >> v8) & 1;
        v7 += 2;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>((void *)a1, v6, (uint64_t)v7, (v7 - (unsigned char *)v6) >> 1);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned short>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF8D90(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<int>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (char *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (char *)v5;
      do
      {
        *(_DWORD *)uint64_t v7 = (*v4 >> v8) & 1;
        v7 += 4;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((void *)a1, v6, (uint64_t)v7, (v7 - (unsigned char *)v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF8ECC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned int>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (char *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (char *)v5;
      do
      {
        *(_DWORD *)uint64_t v7 = (*v4 >> v8) & 1;
        v7 += 4;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a1, v6, (uint64_t)v7, (v7 - (unsigned char *)v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF9008(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long>::__init_with_size[abi:ne180100]<long *,long *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF9144(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF9280(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF93BC(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<unsigned long long>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (uint64_t *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (uint64_t *)v5;
      do
      {
        *v7++ = (*v4 >> v8) & 1;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<unsigned long long>::__init_with_size[abi:ne180100]<unsigned long long *,unsigned long long *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned long long>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF94F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<float>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (float *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (float *)v5;
      do
      {
        if ((*v4 >> v8)) {
          float v10 = 1.0;
        }
        else {
          float v10 = 0.0;
        }
        *v7++ = v10;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 2);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<float>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF9640(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<double>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (double *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (double *)v5;
      do
      {
        if ((*v4 >> v8)) {
          double v10 = 1.0;
        }
        else {
          double v10 = 0.0;
        }
        *v7++ = v10;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF9788(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,std::vector<long double>>(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    if (v3 >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v4 = *(void **)a2;
    int64_t v5 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(*(void *)(a2 + 8));
    unint64_t v6 = v5;
    if (v3 > 0x3F || (uint64_t v7 = (double *)v5, (v3 & 0x3F) != 0))
    {
      int v8 = 0;
      uint64_t v9 = &v4[v3 >> 6];
      uint64_t v7 = (double *)v5;
      do
      {
        if ((*v4 >> v8)) {
          double v10 = 1.0;
        }
        else {
          double v10 = 0.0;
        }
        *v7++ = v10;
        v4 += v8 == 63;
        if (v8 == 63) {
          int v8 = 0;
        }
        else {
          ++v8;
        }
      }
      while (v4 != v9 || v8 != (v3 & 0x3F));
    }
  }
  else
  {
    unint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::vector<long double>::__init_with_size[abi:ne180100]<long double *,long double *>((void *)a1, v6, (uint64_t)v7, ((char *)v7 - (unsigned char *)v6) >> 3);
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<long double>>::dispatch;
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAAF98D0(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Implementation::create_vector_of_numbers_from<std::vector<BOOL>,applesauce::CF::ArrayRef>(void *a1, uint64_t a2)
{
  if (!a2) {
    __assert_rtn("create_vector_of_numbers_from", "Thing.h", 1155, "in_value_ptr != nullptr");
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  v14[1] = Mutable;
  unint64_t v5 = *(void *)(a2 + 8);
  int v6 = v5 & 0x3F;
  if (v5 > 0x3F || v6 != 0)
  {
    int v8 = 0;
    int v9 = 0;
    double v10 = *(void **)a2;
    uint64_t v11 = *(void *)a2 + 8 * (v5 >> 6);
    do
    {
      LOBYTE(v14[0]) = (*v10 >> v9) & 1;
      CFNumberRef v12 = CFNumberCreate(0, kCFNumberCharType, v14);
      if (!v12)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::NumberRef>(Mutable, v12);
      CFRelease(v12);
      v10 += v8 == 63;
      if (v8 == 63) {
        int v9 = 0;
      }
      else {
        ++v9;
      }
      int v8 = v9;
    }
    while (v10 != (void *)v11 || v6 != v9);
  }
  mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)v14, Mutable);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = v14[0];
  a1[1] = 0;
  a1[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::dispatch;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAAF9A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  mcp_applesauce::CF::Array_Builder::~Array_Builder((const void **)va);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<unsigned long long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        int v11 = Value;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        if (SLOBYTE(valuePtr) >= 0 || Value == 0) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = -256;
        }
        if (!v11) {
          goto LABEL_31;
        }
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        int v15 = v6;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        int v15 = v7;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLODWORD(valuePtr);
LABEL_27:
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15) {
          unint64_t result = v18;
        }
        else {
          unint64_t result = 0;
        }
        if (!v15) {
          goto LABEL_31;
        }
        return result;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        int v20 = v9;
        unint64_t v21 = (unint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        int v20 = v8;
        unint64_t v21 = *(void *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        int v20 = v10;
        unint64_t v21 = (unint64_t)valuePtr;
LABEL_42:
        if (v20) {
          unint64_t result = v21;
        }
        else {
          unint64_t result = 0;
        }
        if (v20) {
          return result;
        }
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1BAAF9D58(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<long long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        int v11 = Value;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        if (SLOBYTE(valuePtr) >= 0 || Value == 0) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = -256;
        }
        if (!v11) {
          goto LABEL_31;
        }
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        int v15 = v6;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        int v15 = v7;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLODWORD(valuePtr);
LABEL_27:
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15) {
          unint64_t result = v18;
        }
        else {
          unint64_t result = 0;
        }
        if (!v15) {
          goto LABEL_31;
        }
        return result;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        int v20 = v9;
        uint64_t v21 = (uint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        int v20 = v8;
        uint64_t v21 = *(void *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        int v20 = v10;
        uint64_t v21 = (uint64_t)valuePtr;
LABEL_42:
        if (v20) {
          unint64_t result = v21;
        }
        else {
          unint64_t result = 0;
        }
        if (v20) {
          return result;
        }
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1BAAFA074(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<unsigned long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        int v11 = Value;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        if (SLOBYTE(valuePtr) >= 0 || Value == 0) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = -256;
        }
        if (!v11) {
          goto LABEL_31;
        }
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        int v15 = v6;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        int v15 = v7;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLODWORD(valuePtr);
LABEL_27:
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15) {
          unint64_t result = v18;
        }
        else {
          unint64_t result = 0;
        }
        if (!v15) {
          goto LABEL_31;
        }
        return result;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        int v20 = v9;
        unint64_t v21 = (unint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        int v20 = v8;
        unint64_t v21 = *(void *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        int v20 = v10;
        unint64_t v21 = (unint64_t)valuePtr;
LABEL_42:
        if (v20) {
          unint64_t result = v21;
        }
        else {
          unint64_t result = 0;
        }
        if (v20) {
          return result;
        }
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1BAAFA390(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t applesauce::CF::convert_to<long,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_12;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_24;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_26;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_35;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_41;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_12:
        int v11 = Value;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        if (SLOBYTE(valuePtr) >= 0 || Value == 0) {
          uint64_t v14 = 0;
        }
        else {
          uint64_t v14 = -256;
        }
        if (!v11) {
          goto LABEL_31;
        }
        return v14 & 0xFFFFFFFFFFFFFF00 | v12;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v6 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_24:
        int v15 = v6;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLOWORD(valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v7 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
LABEL_26:
        int v15 = v7;
        unsigned __int8 v16 = LOBYTE(valuePtr);
        uint64_t v17 = SLODWORD(valuePtr);
LABEL_27:
        unint64_t v18 = v17 & 0xFFFFFFFFFFFFFF00 | v16;
        if (v15) {
          unint64_t result = v18;
        }
        else {
          unint64_t result = 0;
        }
        if (!v15) {
          goto LABEL_31;
        }
        return result;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_39;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_35:
        int v20 = v9;
        uint64_t v21 = (uint64_t)*(float *)&valuePtr;
        goto LABEL_42;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_41;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_39;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v8 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_39:
        int v20 = v8;
        uint64_t v21 = *(void *)&valuePtr;
        goto LABEL_42;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_41:
        int v20 = v10;
        uint64_t v21 = (uint64_t)valuePtr;
LABEL_42:
        if (v20) {
          unint64_t result = v21;
        }
        else {
          unint64_t result = 0;
        }
        if (v20) {
          return result;
        }
        goto LABEL_31;
      default:
        goto LABEL_31;
    }
  }
  CFTypeID v4 = CFBooleanGetTypeID();
  if (v4 != CFGetTypeID(a1))
  {
LABEL_31:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return CFBooleanGetValue(a1);
}

void sub_1BAAFA6AC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  if (__n > this->__end_cap_.__value_ - this->__begin_)
  {
    if (__n >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    int64_t v3 = (char *)this->__end_ - (char *)this->__begin_;
    CFTypeID v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(__n);
    unint64_t v5 = (unsigned int *)&v4[v3 & 0xFFFFFFFFFFFFFFFCLL];
    int v7 = (unsigned int *)&v4[4 * v6];
    std::vector<unsigned int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    int v10 = v5;
    if (end != this->__begin_)
    {
      int v10 = v5;
      do
      {
        unsigned int v11 = *--end;
        *--int v10 = v11;
      }
      while (end != begin);
    }
    this->__begin_ = v10;
    this->__end_ = v5;
    this->__end_cap_.__value_ = v7;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t applesauce::CF::convert_to<int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        uint64_t v11 = Value != 0;
        if (Value) {
          unsigned __int8 v12 = LOBYTE(valuePtr);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        int v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0) {
          int v13 = 0;
        }
        uint64_t v8 = v11 << 32;
        LODWORD(v5) = v13 & 0xFFFFFF00 | v12;
        int v7 = v5 & 0xFFFFFF00;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9) {
          uint64_t v5 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        }
        else {
          uint64_t v5 = 0;
        }
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        uint64_t v14 = (int)*(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        uint64_t v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        uint64_t v14 = (int)valuePtr;
LABEL_35:
        uint64_t v5 = v14 | 0x100000000;
        if (!v10) {
          uint64_t v5 = 0;
        }
LABEL_37:
        int v7 = v5 & 0xFFFFFF00;
        uint64_t v8 = v5 & 0x100000000;
        break;
      default:
        int v7 = 0;
        uint64_t v8 = 0;
        LOBYTE(v5) = 0;
        break;
    }
    uint64_t v6 = v8 | v7 & 0xFFFFFF00;
    uint64_t v5 = v5;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      uint64_t v5 = CFBooleanGetValue(a1);
      uint64_t v6 = 0x100000000;
    }
    else
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
    }
  }
  uint64_t result = v6 | v5;
  if (!((v6 | (unint64_t)v5) >> 32))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BAAFAAA0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<unsigned short,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_23;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_29;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_15:
        LOBYTE(v10) = LOBYTE(valuePtr);
        if (!Value) {
          LOBYTE(v10) = 0;
        }
        int v9 = (Value != 0) << 16;
        __int16 v8 = (SLOBYTE(valuePtr) >> 7) << 8;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_23:
        int v12 = (int)*(float *)&valuePtr;
        goto LABEL_30;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_29;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_27;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_27:
        int v12 = LOWORD(valuePtr);
        goto LABEL_30;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_29:
        int v12 = (int)valuePtr;
LABEL_30:
        int v10 = v12 | 0x10000;
        if (!v11) {
          int v10 = 0;
        }
        __int16 v8 = v10 & 0xFF00;
        int v9 = v10 & 0x10000;
        break;
      default:
        __int16 v8 = 0;
        int v9 = 0;
        LOBYTE(v10) = 0;
        break;
    }
    unsigned int v7 = v9 | v8 & 0xFF00 | v10;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      int v5 = CFBooleanGetValue(a1);
      int v6 = 0x10000;
    }
    else
    {
      int v5 = 0;
      int v6 = 0;
    }
    unsigned int v7 = v6 | v5;
  }
  if (!HIWORD(v7))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return (unsigned __int16)v7;
}

void sub_1BAAFADD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::convert_to<short,0>(const __CFNumber *a1)
{
  CFTypeID TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_15;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberSInt64Type:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        int v12 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_23;
      case kCFNumberFloat64Type:
        double valuePtr = 0.0;
        int v12 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_31;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        int Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_15:
        LOBYTE(v10) = LOBYTE(valuePtr);
        if (!Value) {
          LOBYTE(v10) = 0;
        }
        int v9 = (Value != 0) << 16;
        __int16 v8 = (SLOBYTE(valuePtr) >> 7) << 8;
        break;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
        goto LABEL_27;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        int v11 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberLongLongType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_27;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        int v12 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_23:
        int v13 = (int)*(float *)&valuePtr;
        goto LABEL_32;
      case kCFNumberDoubleType:
        double valuePtr = 0.0;
        int v12 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_31;
      case kCFNumberCFIndexType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_27;
      case kCFNumberNSIntegerType:
        double valuePtr = 0.0;
        int v11 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_27:
        int v10 = LOWORD(valuePtr) | 0x10000;
        if (!v11) {
          int v10 = 0;
        }
        goto LABEL_35;
      case kCFNumberCGFloatType:
        double valuePtr = 0.0;
        int v12 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_31:
        int v13 = (int)valuePtr;
LABEL_32:
        if (v12) {
          int v10 = (unsigned __int16)v13 | 0x10000;
        }
        else {
          int v10 = 0;
        }
LABEL_35:
        __int16 v8 = v10 & 0xFF00;
        int v9 = v10 & 0x10000;
        break;
      default:
        __int16 v8 = 0;
        int v9 = 0;
        LOBYTE(v10) = 0;
        break;
    }
    unsigned int v7 = v9 | v8 & 0xFF00 | v10;
  }
  else
  {
    CFTypeID v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
    {
      int v5 = CFBooleanGetValue(a1);
      int v6 = 0x10000;
    }
    else
    {
      int v5 = 0;
      int v6 = 0;
    }
    unsigned int v7 = v6 | v5;
  }
  if (!HIWORD(v7))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return (__int16)v7;
}

void sub_1BAAFB118(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 <= *(void *)(a1 + 16) << 6) {
    return;
  }
  if ((a2 & 0x8000000000000000) != 0) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v19 = 0;
  long long v20 = 0uLL;
  std::vector<BOOL>::__vallocate[abi:ne180100](&v19, a2);
  int64_t v3 = *(void **)a1;
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = v20;
  unint64_t v6 = v20 + v4;
  *(void *)&long long v20 = v20 + v4;
  if (!v5)
  {
    unint64_t v7 = v6 - 1;
    goto LABEL_7;
  }
  unint64_t v7 = v6 - 1;
  if (((v6 - 1) ^ (v5 - 1)) > 0x3F)
  {
LABEL_7:
    uint64_t v8 = v19;
    unint64_t v9 = v7 >> 6;
    if (v6 >= 0x41) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = 0;
    }
    *(void *)(v19 + 8 * v10) = 0;
    goto LABEL_11;
  }
  uint64_t v8 = v19;
LABEL_11:
  int v11 = v4 & 0x3F;
  if (v4 > 0x3F || (v4 & 0x3F) != 0)
  {
    int v12 = 0;
    int v13 = &v3[v4 >> 6];
    int v14 = v5 & 0x3F;
    int v15 = (uint64_t *)(v8 + 8 * (v5 >> 6));
    do
    {
      uint64_t v16 = 1 << v14;
      if ((*v3 >> v12)) {
        uint64_t v17 = *v15 | v16;
      }
      else {
        uint64_t v17 = *v15 & ~v16;
      }
      uint64_t *v15 = v17;
      v3 += v12 == 63;
      if (v12 == 63) {
        int v12 = 0;
      }
      else {
        ++v12;
      }
      v15 += v14 == 63;
      if (v14 == 63) {
        int v14 = 0;
      }
      else {
        ++v14;
      }
    }
    while (v3 != v13 || v12 != v11);
  }
  unint64_t v18 = *(void **)a1;
  *(void *)a1 = v8;
  *(_OWORD *)(a1 + 8) = v20;
  if (v18) {
    operator delete(v18);
  }
}

void sub_1BAAFB2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch(BOOL result, const void **a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      unint64_t v7 = *a2;
      if (*a2) {
        CFRetain(v7);
      }
      uint64_t result = 0;
      *(void *)a3 = v7;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
      return result;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *a2;
      *a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::dispatch;
LABEL_9:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::destruct((uint64_t)a2);
      return 0;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
      uint64_t result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()) {
        return (BOOL)a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
      CFDateRef v10 = (CFDateRef)a2[4];
      theDate[0] = 0;
      if (v10)
      {
        ((void (*)(uint64_t, const void **, void, CFDateRef *))v10)(3, a2, 0, theDate);
        CFDateRef v10 = theDate[0];
      }
      if (v10 != (CFDateRef)v9) {
        goto LABEL_30;
      }
      CFDateRef v11 = *(CFDateRef *)(a3 + 32);
      CFDateRef otherDate = 0;
      if (v11)
      {
        ((void (*)(uint64_t, uint64_t, void, CFDateRef *))v11)(3, a3, 0, &otherDate);
        CFDateRef v11 = otherDate;
      }
      if (v11 != (CFDateRef)v9)
      {
LABEL_30:
        AMCP::Thing::convert_to<applesauce::CF::DateRef>(theDate, (uint64_t)a2);
        AMCP::Thing::convert_to<applesauce::CF::DateRef>(&otherDate, a3);
        CFDateRef v15 = theDate[0];
        CFDateRef v16 = otherDate;
        if (theDate[0])
        {
          if (!otherDate)
          {
            BOOL v17 = 0;
            goto LABEL_56;
          }
          BOOL v17 = CFDateCompare(theDate[0], otherDate, 0) == kCFCompareEqualTo;
        }
        else
        {
          if (otherDate) {
            uint64_t v18 = -1;
          }
          else {
            uint64_t v18 = 0;
          }
          BOOL v17 = otherDate == 0;
          if (!otherDate) {
            return !v18;
          }
        }
        CFRelease(v16);
        if (!v15) {
          return v17;
        }
LABEL_56:
        CFRelease(v15);
        return v17;
      }
      if (a2[4])
      {
        theDate[0] = (CFDateRef)AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
        int v12 = (CFDateRef *)((uint64_t (*)(uint64_t, const void **, void, CFDateRef *))a2[4])(4, a2, 0, theDate);
      }
      else
      {
        int v12 = 0;
      }
      theDate[0] = (CFDateRef)AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
      CFDateRef v19 = *(const __CFDate **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFDateRef *))(a3 + 32))(4, a3, 0, theDate);
      if (!*v12)
      {
        if (v19) {
          CFComparisonResult v20 = kCFCompareLessThan;
        }
        else {
          CFComparisonResult v20 = kCFCompareEqualTo;
        }
        return v20 == kCFCompareEqualTo;
      }
      if (v19)
      {
        CFComparisonResult v20 = CFDateCompare(*v12, v19, 0);
        return v20 == kCFCompareEqualTo;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_52;
      }
      if (a2[4])
      {
        theDate[0] = (CFDateRef)AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
        int v14 = (CFTypeRef *)((uint64_t (*)(uint64_t, const void **, void, CFDateRef *))a2[4])(4, a2, 0, theDate);
      }
      else
      {
        int v14 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v14)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&otherDate, *v14);
          unint64_t v23 = 0;
          *(_OWORD *)theDate = 0u;
          long long v22 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(theDate, &otherDate);
          if (otherDate) {
            CFRelease(otherDate);
          }
          goto LABEL_53;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>() {
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
      }
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v14)
      {
LABEL_52:
        unint64_t v23 = 0;
        *(_OWORD *)theDate = 0u;
        long long v22 = 0u;
LABEL_53:
        AMCP::swap((AMCP::Thing *)theDate, (AMCP::Thing *)a3, v13);
        if (v23) {
          v23(0, theDate, 0, 0);
        }
        return 0;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAAFB724(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::DateRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::DateRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
  unint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFComparisonResult v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    unint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    double result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        double result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFDateRef v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFDateRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  double result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    int v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    double result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAFB958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DateRef::~DateRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

applesauce::CF::BooleanRef *applesauce::CF::BooleanRef::BooleanRef(applesauce::CF::BooleanRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFBooleanGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAAFBA34(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

applesauce::CF::NumberRef *applesauce::CF::NumberRef::NumberRef(applesauce::CF::NumberRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFNumberGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAAFBAEC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
      double result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      v27[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, v27);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v27[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8) {
        goto LABEL_28;
      }
      CFDateRef v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf);
        CFDateRef v10 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v10 == (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8)
      {
        if (*(void *)(a2 + 32))
        {
          v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
          CFDateRef v11 = (CFDataRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
        }
        else
        {
          CFDateRef v11 = 0;
        }
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
        uint64_t v21 = (CFDataRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, v27);
        if (applesauce::CF::operator==(v11, v21)) {
          return 1;
        }
      }
      else
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::DataRef>(v27, a2);
        AMCP::Thing::convert_to<applesauce::CF::DataRef>(cf, a3);
        BOOL v13 = applesauce::CF::operator==((CFDataRef *)v27, (CFDataRef *)cf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v27[0]) {
          CFRelease(v27[0]);
        }
        if (v13) {
          return 1;
        }
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_49;
      }
      if (*(void *)(a2 + 32))
      {
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
        int v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
      }
      else
      {
        int v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)v27, *v12);
          unint64_t v26 = 0;
          *(_OWORD *)std::string cf = 0u;
          long long v25 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(cf, v27);
          if (v27[0]) {
            CFRelease(v27[0]);
          }
          if (v26) {
            goto LABEL_67;
          }
          goto LABEL_50;
        }
LABEL_74:
        __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
      }
      if ((*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
         || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>())
        && !v12)
      {
        goto LABEL_74;
      }
LABEL_49:
      unint64_t v26 = 0;
      *(_OWORD *)std::string cf = 0u;
      long long v25 = 0u;
      if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
      {
        goto LABEL_64;
      }
LABEL_50:
      if (*(void *)(a2 + 32))
      {
        v27[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
        uint64_t v16 = (CFDataRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v27);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>())
      {
        if (v16)
        {
          if (!*v16)
          {
            exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "Could not construct");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          CFIndex Length = CFDataGetLength(*v16);
          LOBYTE(v27[0]) = 0;
          std::vector<std::byte>::vector(&v30, Length, v27);
          CFDataRef v18 = *v16;
          if (!*v16)
          {
            unint64_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v23, "Could not construct");
            __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          uint64_t v19 = v30;
          BytePtr = CFDataGetBytePtr(v18);
          memcpy(v19, BytePtr, v31 - (unsigned char *)v30);
          *(_OWORD *)size_t v27 = 0u;
          long long v28 = 0u;
          int v29 = 0;
          std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(v27, v30, (uint64_t)v31, v31 - (unsigned char *)v30);
          int v29 = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
          if (v30)
          {
            uint64_t v31 = v30;
            operator delete(v30);
          }
          goto LABEL_65;
        }
LABEL_75:
        __assert_rtn("create_data_bag_from", "Thing.h", 2381, "in_value_ptr != nullptr");
      }
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
      {
        if (!v16) {
          goto LABEL_75;
        }
        int v29 = 0;
        *(_OWORD *)size_t v27 = 0u;
        long long v28 = 0u;
        AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef const&>((uint64_t)v27, (CFTypeRef *)v16);
      }
      else
      {
LABEL_64:
        int v29 = 0;
        *(_OWORD *)size_t v27 = 0u;
        long long v28 = 0u;
      }
LABEL_65:
      AMCP::swap((AMCP::Thing *)v27, (AMCP::Thing *)cf, v15);
      if (v29) {
        v29(0, (uint64_t)v27, 0, 0);
      }
LABEL_67:
      AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v14);
      if (v26) {
        v26(0, cf, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAFC0D8(void *a1)
{
  CFTypeID v3 = *(void **)(v1 - 56);
  if (v3)
  {
    *(void *)(v1 - 48) = v3;
    operator delete(v3);
  }
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::dispatch;
  return a1;
}

BOOL applesauce::CF::operator==(CFDataRef *a1, CFDataRef *a2)
{
  CFDataRef v3 = *a1;
  BOOL result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v3) {
    BOOL v5 = *a2 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    BytePtr = CFDataGetBytePtr(v3);
    if (*a2) {
      uint64_t v8 = CFDataGetBytePtr(*a2);
    }
    else {
      uint64_t v8 = 0;
    }
    if (*a1) {
      CFIndex Length = CFDataGetLength(*a1);
    }
    else {
      CFIndex Length = 0;
    }
    CFDataRef v10 = *a2;
    if (*a2) {
      CFDataRef v10 = (const __CFData *)CFDataGetLength(v10);
    }
    return (const __CFData *)Length == v10 && memcmp(BytePtr, v8, Length) == 0;
  }
  return result;
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::DataRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  BOOL v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  CFComparisonResult v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    BOOL v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    BOOL result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        BOOL result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFDataRef v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>();
  memset(v17, 0, sizeof(v17));
  CFDataRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFDateRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  BOOL result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    BOOL v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    BOOL result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAFC4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[175];
}

void *std::vector<std::byte>::vector(void *a1, size_t a2, unsigned char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    size_t v5 = a2;
    std::vector<char>::__vallocate[abi:ne180100](a1, a2);
    unint64_t v6 = (unsigned char *)a1[1];
    CFTypeRef v7 = &v6[v5];
    do
    {
      *v6++ = *a3;
      --v5;
    }
    while (v5);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BAAFC5C0(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    unint64_t v6 = result;
    BOOL result = std::vector<char>::__vallocate[abi:ne180100](result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BAAFC63C(_Unwind_Exception *exception_object)
{
  CFDataRef v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

BOOL AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      uint64_t v7 = *(void **)a2;
      if (*(void *)a2)
      {
        *(void *)(a2 + 8) = v7;
        operator delete(v7);
      }
      BOOL result = 0;
      *(void *)(a2 + 32) = 0;
      long long v8 = 0uLL;
      goto LABEL_9;
    case 1:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>((void *)a3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
      BOOL result = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
      return result;
    case 2:
      BOOL result = 0;
      long long v8 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(void *)(a3 + 16) = *(void *)(a2 + 16);
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_9:
      *(_OWORD *)a2 = v8;
      *(_OWORD *)(a2 + 16) = v8;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      BOOL result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v10 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      CFDateRef v11 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v27 = 0;
      if (v11)
      {
        v11(3, a2, 0, &v27);
        CFDateRef v11 = (void (*)(uint64_t, uint64_t, void, long long *))v27;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, long long *))v10) {
        goto LABEL_24;
      }
      int v12 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v12)
      {
        v12(3, a3, 0, cf);
        int v12 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v10)
      {
LABEL_24:
        AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(&v27, a2);
        AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(cf, a3);
        uint64_t v16 = (void *)v27;
        if ((CFTypeRef)(*((void *)&v27 + 1) - v27) == (CFTypeRef)((char *)cf[1] - (char *)cf[0]))
        {
          if ((void)v27 == *((void *)&v27 + 1))
          {
            BOOL v20 = 1;
            if (!cf[0])
            {
LABEL_36:
              if (v16) {
                operator delete(v16);
              }
              return v20;
            }
LABEL_35:
            operator delete((void *)cf[0]);
            goto LABEL_36;
          }
          uint64_t v17 = v27 + 1;
          CFDataRef v18 = (unsigned __int8 *)cf[0];
          do
          {
            int v19 = *v18++;
            BOOL v20 = *(unsigned __int8 *)(v17 - 1) == v19;
            BOOL v21 = *(unsigned __int8 *)(v17 - 1) != v19 || v17 == *((void *)&v27 + 1);
            ++v17;
          }
          while (!v21);
        }
        else
        {
          BOOL v20 = 0;
        }
        if (!cf[0]) {
          goto LABEL_36;
        }
        goto LABEL_35;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v27 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
        uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v27);
      }
      else
      {
        uint64_t v13 = 0;
      }
      *(void *)&long long v27 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
      uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v27);
      long long v25 = *(unsigned __int8 **)v13;
      unint64_t v24 = *(unsigned __int8 **)(v13 + 8);
      unint64_t v26 = *(unsigned __int8 **)v23;
      if (&v24[-*(void *)v13] == (unsigned __int8 *)(*(void *)(v23 + 8) - *(void *)v23))
      {
        while (v25 != v24)
        {
          if (*v25 != *v26) {
            return 0;
          }
          ++v25;
          ++v26;
        }
        return 1;
      }
      return 0;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
      {
        goto LABEL_48;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v27 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
        uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v27);
      }
      else
      {
        uint64_t v15 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>())
      {
        if (v15)
        {
          int v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
          std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(&v27, *(const void **)v15, *(void *)(v15 + 8), *(void *)(v15 + 8) - *(void *)v15);
          int v29 = AMCP::Implementation::In_Place_Storage<AMCP::Bag_O_Bytes>::dispatch;
          goto LABEL_49;
        }
      }
      else
      {
        if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>())
        {
LABEL_48:
          int v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
LABEL_49:
          AMCP::swap((AMCP::Thing *)&v27, (AMCP::Thing *)a3, v14);
          if (v29) {
            ((void (*)(void, long long *, void, void))v29)(0, &v27, 0, 0);
          }
          return 0;
        }
        if (v15)
        {
          CFDataRef v22 = CFDataCreate(0, *(const UInt8 **)v15, *(void *)(v15 + 8) - *(void *)v15);
          applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)cf, v22);
          int v29 = 0;
          long long v27 = 0u;
          long long v28 = 0u;
          AMCP::Implementation::In_Place_Storage<applesauce::CF::DataRef>::construct<applesauce::CF::DataRef&>(&v27, cf);
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          goto LABEL_49;
        }
      }
      __assert_rtn("create_data_bag_from", "Thing.h", 2381, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAAFCA58(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAFC994);
}

void *AMCP::Thing::convert_to<AMCP::Bag_O_Bytes>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
  size_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  BOOL v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    size_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (v6)
    {
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
      return std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(a1, *(const void **)v6, *(void *)(v6 + 8), *(void *)(v6 + 8) - *(void *)v6);
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<AMCP::Bag_O_Bytes>();
  memset(v17, 0, sizeof(v17));
  CFDataRef v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    CFDateRef v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  uint64_t v8 = v18(4, v17, 0, &v15);
  if (!v8)
  {
    uint64_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  BOOL result = std::vector<std::byte>::__init_with_size[abi:ne180100]<std::byte*,std::byte*>(a1, *(const void **)v8, *(void *)(v8 + 8), *(void *)(v8 + 8) - *(void *)v8);
  if (v18) {
    return (void *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAAFCC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  *(void *)this = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return this;
}

void sub_1BAAFCCFC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      goto LABEL_7;
    case 1:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>(a3, (CFTypeRef *)a2);
      return 0;
    case 2:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)a2 = 0;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
LABEL_7:
      AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::destruct(a2);
      return 0;
    case 3:
      uint64_t v7 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
      BOOL result = 0;
      *a4 = v7;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v8 = AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
      uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32);
      v25[0] = 0;
      if (v9)
      {
        v9(3, a2, 0, v25);
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v25[0];
      }
      if (v9 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8) {
        goto LABEL_28;
      }
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32);
      cf[0] = 0;
      if (v10)
      {
        v10(3, a3, 0, cf);
        uint64_t v10 = (void (*)(uint64_t, uint64_t, void, CFTypeRef *))cf[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, CFTypeRef *))v8)
      {
LABEL_28:
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(v25, a2);
        AMCP::Thing::convert_to<applesauce::CF::StringRef>(cf, a3);
        CFTypeRef v13 = v25[0];
        CFComparisonResult v14 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)v25[0], (const __CFString **)cf);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        if (v13) {
          CFRelease(v13);
        }
        return v14 == kCFCompareEqualTo;
      }
      if (*(void *)(a2 + 32))
      {
        v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
        CFDateRef v11 = (const __CFString **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v25);
      }
      else
      {
        CFDateRef v11 = 0;
      }
      v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
      BOOL v20 = (const __CFString **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a3 + 32))(4, a3, 0, v25);
      return applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v11, v20) == kCFCompareEqualTo;
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
        || *a4 != AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        goto LABEL_49;
      }
      if (*(void *)(a2 + 32))
      {
        v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
        int v12 = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v25);
      }
      else
      {
        int v12 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<mcp_applesauce::CF::PropertyListRef>())
      {
        if (v12)
        {
          mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)v25, *v12);
          unint64_t v24 = 0;
          *(_OWORD *)std::string cf = 0u;
          long long v23 = 0u;
          AMCP::Implementation::In_Place_Storage<mcp_applesauce::CF::PropertyListRef>::construct<mcp_applesauce::CF::PropertyListRef&>(cf, v25);
          if (v25[0]) {
            CFRelease(v25[0]);
          }
          if (v24) {
            goto LABEL_68;
          }
LABEL_50:
          if (*a4 == AMCP::Implementation::get_type_marker<std::string>()
            || *a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
          {
            if (*(void *)(a2 + 32))
            {
              v25[0] = (CFTypeRef)AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>();
              uint64_t v17 = (const __CFString **)(*(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(a2 + 32))(4, a2, 0, v25);
            }
            else
            {
              uint64_t v17 = 0;
            }
            if (*a4 == AMCP::Implementation::get_type_marker<std::string>())
            {
              if (v17)
              {
                if (!*v17)
                {
                  exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                applesauce::CF::convert_to<std::string,0>((uint64_t)&v28, *v17);
                *(_OWORD *)long long v25 = v28;
                long long v26 = v29;
                CFDataRef v18 = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
LABEL_64:
                long long v27 = v18;
                goto LABEL_66;
              }
              goto LABEL_76;
            }
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
            {
              if (v17)
              {
                CFStringRef v19 = *v17;
                if (v19) {
                  CFRetain(v19);
                }
                long long v26 = 0uLL;
                v25[0] = v19;
                v25[1] = 0;
                CFDataRef v18 = (BOOL (*)(BOOL, uint64_t, std::string *, uint64_t *))AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
                goto LABEL_64;
              }
LABEL_76:
              __assert_rtn("create_string_from", "Thing.h", 1254, "in_value_ptr != nullptr");
            }
          }
          long long v27 = 0;
          *(_OWORD *)long long v25 = 0u;
          long long v26 = 0u;
LABEL_66:
          AMCP::swap((AMCP::Thing *)v25, (AMCP::Thing *)cf, v16);
          if (v27) {
            v27(0, (uint64_t)v25, 0, 0);
          }
LABEL_68:
          AMCP::swap((AMCP::Thing *)cf, (AMCP::Thing *)a3, v15);
          if (v24) {
            v24(0, cf, 0, 0);
          }
          return 0;
        }
      }
      else if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>() {
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DataRef>()
      }
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DateRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::ArrayRef>()
             && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::DictionaryRef>()
             || v12)
      {
LABEL_49:
        unint64_t v24 = 0;
        *(_OWORD *)std::string cf = 0u;
        long long v23 = 0u;
        goto LABEL_50;
      }
      __assert_rtn("create_cf_plist_from", "Thing.h", 2434, "in_value_ptr != nullptr");
    default:
      return result;
  }
}

void sub_1BAAFD274(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  __cxa_free_exception(v15);
  __clang_call_terminate(a1);
}

double AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::destruct(uint64_t a1)
{
  int v2 = *(const void **)a1;
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef const&>(uint64_t a1, CFTypeRef *a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *(void *)a1 = v3;
  *(void *)(a1 + 32) = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::string>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[281];
}

BOOL AMCP::Implementation::In_Place_Storage<std::string>::dispatch(BOOL result, uint64_t a2, std::string *this, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      if (*(char *)(a2 + 23) < 0) {
        operator delete(*(void **)a2);
      }
      double result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    case 1:
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
      *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
      if (*(char *)(a2 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
      }
      else
      {
        long long v10 = *(_OWORD *)a2;
        this->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
        *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
      }
      double result = 0;
      this[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      return result;
    case 2:
      long long v7 = 0uLL;
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0u;
      *(_OWORD *)&this->__r_.__value_.__r.__words[2] = 0u;
      long long v8 = *(_OWORD *)a2;
      this->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v8;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = 0;
      this[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
      if (*(char *)(a2 + 23) < 0)
      {
        operator delete(*(void **)a2);
        long long v7 = 0uLL;
      }
      double result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::string>();
      double result = 0;
      *a4 = v9;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::string>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<std::string>();
      int v12 = *(void (**)(uint64_t, uint64_t, void, void **))(a2 + 32);
      __s1[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, __s1);
        int v12 = (void (*)(uint64_t, uint64_t, void, void **))__s1[0];
      }
      if (v12 != (void (*)(uint64_t, uint64_t, void, void **))v11) {
        goto LABEL_26;
      }
      std::string::size_type size = (void (*)(uint64_t, std::string *, void, std::string *))this[1].__r_.__value_.__l.__size_;
      v44.__r_.__value_.__r.__words[0] = 0;
      if (size)
      {
        size(3, this, 0, &v44);
        std::string::size_type size = (void (*)(uint64_t, std::string *, void, std::string *))v44.__r_.__value_.__r.__words[0];
      }
      if (size != (void (*)(uint64_t, std::string *, void, std::string *))v11)
      {
LABEL_26:
        AMCP::Thing::convert_to<std::string>((std::string *)__s1, a2);
        AMCP::Thing::convert_to<std::string>(&v44, (uint64_t)this);
        char v17 = BYTE7(v42);
        if ((SBYTE7(v42) & 0x80u) == 0) {
          CFDataRef v18 = (void *)BYTE7(v42);
        }
        else {
          CFDataRef v18 = __s1[1];
        }
        std::string::size_type v19 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
        int v20 = SHIBYTE(v44.__r_.__value_.__r.__words[2]);
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v19 = v44.__r_.__value_.__l.__size_;
        }
        if (v18 == (void *)v19)
        {
          if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            BOOL v21 = &v44;
          }
          else {
            BOOL v21 = (std::string *)v44.__r_.__value_.__r.__words[0];
          }
          if ((BYTE7(v42) & 0x80) != 0)
          {
            BOOL v30 = memcmp(__s1[0], v21, (size_t)__s1[1]) == 0;
          }
          else if (BYTE7(v42))
          {
            uint64_t v22 = BYTE7(v42) - 1;
            long long v23 = __s1;
            do
            {
              int v25 = *(unsigned __int8 *)v23;
              long long v23 = (void **)((char *)v23 + 1);
              int v24 = v25;
              int v27 = v21->__r_.__value_.__s.__data_[0];
              BOOL v21 = (std::string *)((char *)v21 + 1);
              int v26 = v27;
              BOOL v29 = v22-- != 0;
              BOOL v30 = v24 == v26;
            }
            while (v24 == v26 && v29);
          }
          else
          {
            BOOL v30 = 1;
          }
        }
        else
        {
          BOOL v30 = 0;
        }
        if (v20 < 0) {
          operator delete(v44.__r_.__value_.__l.__data_);
        }
        if (v17 < 0)
        {
          operator delete(__s1[0]);
          if (!v30) {
            return 0;
          }
        }
        else if (!v30)
        {
          return 0;
        }
        return 1;
      }
      if (*(void *)(a2 + 32))
      {
        __s1[0] = (void *)AMCP::Implementation::get_type_marker<std::string>();
        CFComparisonResult v14 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a2 + 32))(4, a2, 0, __s1);
      }
      else
      {
        CFComparisonResult v14 = 0;
      }
      if (this[1].__r_.__value_.__l.__size_)
      {
        __s1[0] = (void *)AMCP::Implementation::get_type_marker<std::string>();
        uint64_t v33 = ((uint64_t (*)(uint64_t, std::string *, void, void **))this[1].__r_.__value_.__l.__size_)(4, this, 0, __s1);
      }
      else
      {
        uint64_t v33 = 0;
      }
      uint64_t v34 = v14[23];
      if ((v34 & 0x80u) == 0) {
        uint64_t v35 = v14[23];
      }
      else {
        uint64_t v35 = *((void *)v14 + 1);
      }
      uint64_t v36 = *(unsigned __int8 *)(v33 + 23);
      int v37 = (char)v36;
      if ((v36 & 0x80u) != 0) {
        uint64_t v36 = *(void *)(v33 + 8);
      }
      if (v35 != v36) {
        return 0;
      }
      if (v37 >= 0) {
        unint64_t v38 = (unsigned __int8 *)v33;
      }
      else {
        unint64_t v38 = *(unsigned __int8 **)v33;
      }
      if ((v34 & 0x80) == 0)
      {
        if (v14[23])
        {
          do
          {
            if (*v14 != *v38) {
              return 0;
            }
            ++v14;
            ++v38;
            --v34;
          }
          while (v34);
        }
        return 1;
      }
      return !memcmp(*(const void **)v14, v38, *((void *)v14 + 1));
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<std::string>()
        && *a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
      {
        goto LABEL_56;
      }
      if (*(void *)(a2 + 32))
      {
        __s1[0] = (void *)AMCP::Implementation::get_type_marker<std::string>();
        uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t, void, void **))(a2 + 32))(4, a2, 0, __s1);
      }
      else
      {
        uint64_t v16 = 0;
      }
      if (*a4 == AMCP::Implementation::get_type_marker<std::string>())
      {
        if (v16)
        {
          if (*(char *)(v16 + 23) < 0) {
            std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)v16, *(void *)(v16 + 8));
          }
          else {
            std::string v44 = *(std::string *)v16;
          }
          *(_OWORD *)__s1 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
          long long v42 = v44.__r_.__value_.__r.__words[2];
          unint64_t v32 = (uint64_t (*)())AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
          goto LABEL_90;
        }
LABEL_98:
        __assert_rtn("create_string_from", "Thing.h", 1254, "in_value_ptr != nullptr");
      }
      if (*a4 != AMCP::Implementation::get_type_marker<applesauce::CF::StringRef>())
      {
LABEL_56:
        unint64_t v43 = 0;
        *(_OWORD *)__s1 = 0u;
        long long v42 = 0u;
        goto LABEL_91;
      }
      if (!v16) {
        goto LABEL_98;
      }
      if (*(char *)(v16 + 23) < 0)
      {
        if (!*(void *)v16)
        {
          CFStringRef v39 = 0;
          goto LABEL_89;
        }
        CFIndex v31 = *(void *)(v16 + 8);
        uint64_t v16 = *(void *)v16;
      }
      else
      {
        CFIndex v31 = *(unsigned __int8 *)(v16 + 23);
      }
      CFStringRef v39 = CFStringCreateWithBytes(0, (const UInt8 *)v16, v31, 0x8000100u, 0);
      if (!v39)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
LABEL_89:
      long long v42 = 0uLL;
      __s1[0] = (void *)v39;
      __s1[1] = 0;
      unint64_t v32 = AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::dispatch;
LABEL_90:
      unint64_t v43 = v32;
LABEL_91:
      AMCP::swap((AMCP::Thing *)__s1, (AMCP::Thing *)this, v15);
      if (v43) {
        ((void (*)(void, void **, void, void))v43)(0, __s1, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAFD910(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_free_exception(v14);
  __clang_call_terminate(a1);
}

void AMCP::Thing::convert_to<std::string>(std::string *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_17;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<std::string>();
  size_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::string::size_type v19 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v19);
    size_t v5 = v19;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v18 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v18);
    if (v6)
    {
      if (*(char *)(v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v6, *(void *)(v6 + 8));
      }
      else
      {
        *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v6;
        a1->__r_.__value_.__r.__words[2] = *(void *)(v6 + 16);
      }
      return;
    }
LABEL_17:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<std::string>();
  memset(v16, 0, sizeof(v16));
  char v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v16, &v15);
  if (!v17)
  {
    long long v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v4;
  uint64_t v7 = v17(4, v16, 0, &v14);
  if (!v7)
  {
    int v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  if (*(char *)(v7 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)v7, *(void *)(v7 + 8));
  }
  else
  {
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)v7;
    a1->__r_.__value_.__r.__words[2] = *(void *)(v7 + 16);
  }
  if (v17) {
    v17(0, v16, 0, 0);
  }
}

void sub_1BAAFDB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::handle_case<float,unsigned char>(const __CFNumber *a1, CFNumberType a2)
{
  float valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    int v3 = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t applesauce::CF::details::handle_case<double,unsigned char>(const __CFNumber *a1, CFNumberType a2)
{
  double valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    int v3 = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t applesauce::CF::details::handle_case<float,signed char>(const __CFNumber *a1, CFNumberType a2)
{
  float valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    LOBYTE(v3) = 0;
  }
  return v3 | ((Value != 0) << 8);
}

uint64_t applesauce::CF::details::handle_case<double,signed char>(const __CFNumber *a1, CFNumberType a2)
{
  double valuePtr = 0.0;
  int Value = CFNumberGetValue(a1, a2, &valuePtr);
  int v3 = (int)valuePtr;
  if (!Value) {
    LOBYTE(v3) = 0;
  }
  return v3 | ((Value != 0) << 8);
}

BOOL AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      double result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      double result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
      return result;
    case 2:
      double result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
      double result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Direction>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
      long long v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        long long v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      uint64_t v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        uint64_t v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<AMCP::Direction>(a2);
        return v15 == AMCP::Thing::convert_to<AMCP::Direction>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
        int v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        int v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
      return *v12 == *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
        uint64_t v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            unsigned int v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            char v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            unsigned int v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            char v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            unsigned int v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            unsigned int v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            char v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            unsigned int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            unsigned int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            unsigned int v24 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v24;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            char v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            char v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v28 = *v14;
            long long v33 = 0uLL;
            long long v32 = v28;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v29 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v29;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            LODWORD(v30) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v30);
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            LODWORD(v31) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v31);
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::NumberRef>((CFNumberRef *)&v32, v14);
            }
            else
            {
LABEL_82:
              uint64_t v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = *v14;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      uint64_t v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAFE2B8(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<AMCP::Direction>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  unsigned int v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    int v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AMCP::Direction>();
  memset(v16, 0, sizeof(v16));
  char v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    long long v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  uint64_t v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    int v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    CFTypeRef v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAFE46C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(void *result, _DWORD *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (*a2) {
    uint64_t v2 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  }
  else {
    uint64_t v2 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  void *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

CFNumberRef AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::NumberRef>(CFNumberRef *a1, _DWORD *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  BOOL valuePtr = *a2 != 0;
  CFNumberRef result = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  a1[2] = 0;
  a1[3] = 0;
  *a1 = result;
  a1[1] = 0;
  a1[4] = (CFNumberRef)AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::dispatch;
  return result;
}

void sub_1BAAFE5BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      CFNumberRef result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      CFNumberRef result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
      return result;
    case 2:
      CFNumberRef result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<unsigned long long>();
      CFNumberRef result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<unsigned long long>();
      long long v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        long long v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      uint64_t v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      uint64_t v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        uint64_t v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        uint64_t v15 = AMCP::Thing::convert_to<unsigned long long>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned long long>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned long long>();
        int v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        int v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned long long>();
      return *v12 == *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned long long>();
        uint64_t v14 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            unint64_t v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            char v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            unint64_t v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            char v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            unint64_t v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            unint64_t v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            char v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            unint64_t v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            unint64_t v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v24;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            char v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            char v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            char v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            *((void *)&v32 + 1) = 0;
            long long v33 = 0uLL;
            *(void *)&long long v32 = *v14;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v29 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v29;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v30 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v30;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::NumberRef>((uint64_t)&v32, (uint64_t *)v14);
            }
            else
            {
LABEL_82:
              uint64_t v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      char v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      uint64_t v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}