void sub_1BAAFEC0C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAAFEBDCLL);
}

uint64_t AMCP::Thing::convert_to<unsigned long long>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<unsigned long long>();
  v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(void *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<unsigned long long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAFEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(void *result, void *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (*a2) {
    v2 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  }
  else {
    v2 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  uint64_t valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAAFEF18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<long long>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<long long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<long long>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<long long>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        uint64_t v15 = AMCP::Thing::convert_to<long long>(a2);
        return v15 == AMCP::Thing::convert_to<long long>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<long long>();
        v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<long long>();
      return *v12 == *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<long long>();
        uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            uint64_t v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            uint64_t v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            uint64_t v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            uint64_t v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            uint64_t v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            uint64_t v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            uint64_t v24 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v24;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            uint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = (unint64_t)v25;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            uint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = (unint64_t)v26;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            *((void *)&v32 + 1) = 0;
            long long v33 = 0uLL;
            *(void *)&long long v32 = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            uint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = (unint64_t)v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v29 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v29;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v30 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v30;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<long long,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAFF56C(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<long long>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<long long>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  uint64_t v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(void *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<long long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAAFF720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<long long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  uint64_t valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAAFF808(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<unsigned long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<unsigned long>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        uint64_t v15 = AMCP::Thing::convert_to<unsigned long>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned long>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned long>();
        v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned long>();
      return *v12 == *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned long>();
        uint64_t v14 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            unint64_t v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            unint64_t v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            unint64_t v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            unint64_t v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            unint64_t v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            unint64_t v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v24;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            *((void *)&v32 + 1) = 0;
            long long v33 = 0uLL;
            *(void *)&long long v32 = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v29 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v29;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v30 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v30;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<unsigned long,applesauce::CF::NumberRef>((uint64_t)&v32, (uint64_t *)v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAAFFE5C(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<unsigned long>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<unsigned long>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  unint64_t v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(void *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<unsigned long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB00010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<unsigned long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  uint64_t valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB000F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<long>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(void *)a3 = *(void *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<long>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<long>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<long>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<long>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        uint64_t v15 = AMCP::Thing::convert_to<long>(a2);
        return v15 == AMCP::Thing::convert_to<long>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<long>();
        v12 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<long>();
      return *v12 == *(void *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<long>();
        uint64_t v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            uint64_t v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            uint64_t v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            uint64_t v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            uint64_t v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            uint64_t v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            uint64_t v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            uint64_t v24 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v24;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            *((void *)&v32 + 1) = 0;
            long long v33 = 0uLL;
            *(void *)&long long v32 = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            uint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = (unint64_t)v25;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            uint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = (unint64_t)v26;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            uint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = (unint64_t)v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v29 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v29;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            *(double *)&unint64_t v30 = (double)*v14;
            long long v33 = 0uLL;
            long long v32 = v30;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<unsigned long long,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<long,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB0074C(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<long>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<long>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  uint64_t v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *(void *)v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<long>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (uint64_t *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB00900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<long,applesauce::CF::NumberRef>(uint64_t a1, uint64_t *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  uint64_t valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB009E8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<unsigned int>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<unsigned int>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<unsigned int>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned int>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned int>();
        v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned int>();
      return *v12 == *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned int>();
        uint64_t v14 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            unsigned int v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            unsigned int v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            unsigned int v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            unsigned int v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            unsigned int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            unsigned int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            LODWORD(v29) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v29);
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            LODWORD(v30) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v30);
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<unsigned int,applesauce::CF::NumberRef>((uint64_t)&v32, (int *)v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB01038(void *a1)
{
}

void AMCP::Implementation::create_number_from<unsigned int,applesauce::CF::NumberRef>(uint64_t a1, int *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB01130(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<int>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<int>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<int>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<int>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<int>(a2);
        return v15 == AMCP::Thing::convert_to<int>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<int>();
        v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<int>();
      return *v12 == *(_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<int>();
        uint64_t v14 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            int v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            int v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            int v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            int v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            double v29 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v29;
            v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            double v30 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v30;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<AMCP::Direction,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<int,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB01780(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<int>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<int>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  int v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<int>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB01934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<int,applesauce::CF::NumberRef>(uint64_t a1, int *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  int valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB01A1C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<unsigned short>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<unsigned short>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<unsigned short>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned short>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned short>();
        v12 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned short>();
      return *v12 == *(unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned short>();
        uint64_t v14 = (__int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            char v18 = *(unsigned char *)v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            char v19 = *(unsigned char *)v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            char v20 = *(unsigned char *)v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            __int16 v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = (unsigned __int16)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = (unsigned __int16)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = (unsigned __int16)*v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = (unsigned __int16)*v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = (unsigned __int16)*v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = (unsigned __int16)*v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            LOWORD(v28) = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = (float)v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            LOWORD(v29) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v29);
            v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            LOWORD(v30) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v30);
            v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB0206C(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<unsigned short>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<unsigned short>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  char v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<unsigned short>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (unsigned __int16 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB02220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void *AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::BooleanRef>(void *result, _WORD *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  if (*a2) {
    v2 = (uint64_t *)MEMORY[0x1E4F1CFD8];
  }
  else {
    v2 = (uint64_t *)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v3 = *v2;
  result[2] = 0;
  result[3] = 0;
  *result = v3;
  result[1] = 0;
  result[4] = AMCP::Implementation::In_Place_Storage<applesauce::CF::BooleanRef>::dispatch;
  return result;
}

void AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::NumberRef>(uint64_t a1, __int16 *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  __int16 valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB02378(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<short>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<short>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_WORD *)a3 = *(_WORD *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<short>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<short>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<short>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<short>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<short>(a2);
        return v15 == AMCP::Thing::convert_to<short>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<short>();
        v12 = (unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<short>();
      return *v12 == *(unsigned __int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<short>();
        uint64_t v14 = (__int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            char v18 = *(unsigned char *)v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            char v19 = *(unsigned char *)v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            char v20 = *(unsigned char *)v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            __int16 v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            double v29 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v29;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            double v30 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v30;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<unsigned short,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<short,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB029C8(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<short>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<short>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  char v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (__int16 *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<short>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (__int16 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  __int16 v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB02B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<short,applesauce::CF::NumberRef>(uint64_t a1, __int16 *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  __int16 valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberShortType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB02C64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<unsigned char>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<unsigned char>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<unsigned char>(a2);
        return v15 == AMCP::Thing::convert_to<unsigned char>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned char>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned char>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<unsigned char>();
        uint64_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            char v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            char v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            __int16 v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v20;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            __int16 v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            LOBYTE(v28) = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = (float)v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            LOBYTE(v29) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v29);
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            LOBYTE(v30) = *v14;
            long long v33 = 0uLL;
            long long v32 = COERCE_UNSIGNED_INT64((double)v30);
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<unsigned char,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB032B4(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<unsigned char>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<unsigned char>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  char v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<unsigned char>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (unsigned __int8 *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB03468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<unsigned char,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  char valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB03550(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<signed char>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<signed char>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<signed char>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<signed char>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<signed char>(a2);
        return v15 == AMCP::Thing::convert_to<signed char>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<signed char>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<signed char>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<signed char>();
        uint64_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            char v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = *v14;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            char v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            __int16 v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v20;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            __int16 v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v22;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            double v29 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v29;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            double v30 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v30;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<signed char,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = (BOOL (*)(BOOL, uint64_t, uint64_t, uint64_t *))AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        v34(0, (uint64_t)&v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB03BA0(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<signed char>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<signed char>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  char v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<signed char>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (char *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  char v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB03D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<signed char,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  char valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB03E3C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::Implementation::In_Place_Storage<char>::dispatch(BOOL result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  switch(result)
  {
    case 0:
      result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_7;
    case 1:
      result = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<char>::dispatch;
      return result;
    case 2:
      result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(unsigned char *)a3 = *(unsigned char *)a2;
      *(void *)(a3 + 32) = AMCP::Implementation::In_Place_Storage<char>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_7:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t type = AMCP::Implementation::get_type_marker<char>();
      result = 0;
      *a4 = type;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<char>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<char>();
      v10 = *(void (**)(uint64_t, uint64_t, void, long long *))(a2 + 32);
      *(void *)&long long v32 = 0;
      if (v10)
      {
        v10(3, a2, 0, &v32);
        v10 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, long long *))v9) {
        goto LABEL_22;
      }
      v11 = *(void (**)(uint64_t, uint64_t, void, void))(a3 + 32);
      v35 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v35);
        v11 = v35;
      }
      if (v11 != (void (*)(uint64_t, uint64_t, void, void))v9)
      {
LABEL_22:
        int v15 = AMCP::Thing::convert_to<char>(a2);
        return v15 == AMCP::Thing::convert_to<char>(a3);
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<char>();
        v12 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        v12 = 0;
      }
      *(void *)&long long v32 = AMCP::Implementation::get_type_marker<char>();
      return *v12 == *(unsigned __int8 *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
    case 6:
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>()
        && !AMCP::is_one_of<char,signed char,unsigned char,short,unsigned short,int,unsigned int,long,unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(a4))
      {
        goto LABEL_82;
      }
      if (*(void *)(a2 + 32))
      {
        *(void *)&long long v32 = AMCP::Implementation::get_type_marker<char>();
        uint64_t v14 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a2 + 32))(4, a2, 0, &v32);
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (*a4 != AMCP::Implementation::get_type_marker<BOOL>())
      {
        if (*a4 == AMCP::Implementation::get_type_marker<char>())
        {
          if (v14)
          {
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = *v14;
            v17 = AMCP::Implementation::In_Place_Storage<char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<signed char>())
        {
          if (v14)
          {
            char v18 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v18;
            v17 = AMCP::Implementation::In_Place_Storage<signed char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned char>())
        {
          if (v14)
          {
            char v19 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOBYTE(v32) = v19;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned char>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<short>())
        {
          if (v14)
          {
            __int16 v20 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v20;
            v17 = AMCP::Implementation::In_Place_Storage<short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned short>())
        {
          if (v14)
          {
            __int16 v21 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LOWORD(v32) = v21;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned short>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<int>())
        {
          if (v14)
          {
            int v22 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v22;
            v17 = AMCP::Implementation::In_Place_Storage<int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned int>())
        {
          if (v14)
          {
            int v23 = *v14;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v23;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long>())
        {
          if (v14)
          {
            unint64_t v24 = *v14;
            long long v33 = 0uLL;
            long long v32 = v24;
            v17 = AMCP::Implementation::In_Place_Storage<long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long>())
        {
          if (v14)
          {
            unint64_t v25 = *v14;
            long long v33 = 0uLL;
            long long v32 = v25;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long long>())
        {
          if (v14)
          {
            unint64_t v26 = *v14;
            long long v33 = 0uLL;
            long long v32 = v26;
            v17 = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<unsigned long long>())
        {
          if (v14)
          {
            unint64_t v27 = *v14;
            long long v33 = 0uLL;
            long long v32 = v27;
            v17 = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<float>())
        {
          if (v14)
          {
            float v28 = (float)*v14;
            long long v32 = 0u;
            long long v33 = 0u;
            *(float *)&long long v32 = v28;
            v17 = AMCP::Implementation::In_Place_Storage<float>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<double>())
        {
          if (v14)
          {
            double v29 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v29;
            v17 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
            goto LABEL_76;
          }
        }
        else if (*a4 == AMCP::Implementation::get_type_marker<long double>())
        {
          if (v14)
          {
            double v30 = (double)*v14;
            long long v33 = 0uLL;
            *((void *)&v32 + 1) = 0;
            *(double *)&long long v32 = v30;
            v17 = AMCP::Implementation::In_Place_Storage<long double>::dispatch;
            goto LABEL_76;
          }
        }
        else
        {
          if (*a4 != AMCP::Implementation::get_type_marker<AMCP::Direction>())
          {
            if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>())
            {
              AMCP::Implementation::create_number_from<BOOL,applesauce::CF::BooleanRef>(&v32, v14);
            }
            else if (*a4 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>())
            {
              AMCP::Implementation::create_number_from<char,applesauce::CF::NumberRef>((uint64_t)&v32, v14);
            }
            else
            {
LABEL_82:
              v34 = 0;
              long long v32 = 0u;
              long long v33 = 0u;
            }
            goto LABEL_83;
          }
          if (v14)
          {
            BOOL v31 = *v14 != 0;
            long long v32 = 0u;
            long long v33 = 0u;
            LODWORD(v32) = v31;
            v17 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
            goto LABEL_76;
          }
        }
LABEL_77:
        __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
      }
      if (!v14) {
        goto LABEL_77;
      }
      BOOL v16 = *v14 != 0;
      long long v32 = 0u;
      long long v33 = 0u;
      LOBYTE(v32) = v16;
      v17 = AMCP::Implementation::In_Place_Storage<BOOL>::dispatch;
LABEL_76:
      v34 = v17;
LABEL_83:
      AMCP::swap((AMCP::Thing *)&v32, (AMCP::Thing *)a3, v13);
      if (v34) {
        ((void (*)(void, long long *, void, void))v34)(0, &v32, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void sub_1BAB0448C(void *a1)
{
}

uint64_t AMCP::Thing::convert_to<char>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t type = AMCP::Implementation::get_type_marker<char>();
  CFNumberRef v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  char v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    CFNumberRef v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))type)
  {
    uint64_t v18 = type;
    CFNumberRef v4 = (char *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<char>();
  memset(v16, 0, sizeof(v16));
  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = type;
  CFNumberRef v6 = (char *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  char v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB04640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void AMCP::Implementation::create_number_from<char,applesauce::CF::NumberRef>(uint64_t a1, char *a2)
{
  if (!a2) {
    __assert_rtn("create_number_from", "Thing.h", 978, "in_value_ptr != nullptr");
  }
  char valuePtr = *a2;
  CFNumberRef v3 = CFNumberCreate(0, kCFNumberCharType, &valuePtr);
  CFNumberRef v6 = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFNumberRef v4 = v3;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::NumberRef>::construct<applesauce::CF::NumberRef&>(a1, (CFTypeRef *)&v6);
  CFRelease(v4);
}

void sub_1BAB04728(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::is_one_of<unsigned long,long long,unsigned long long,float,double,long double,AMCP::Direction,applesauce::CF::BooleanRef,applesauce::CF::NumberRef>(void *a1)
{
  return *a1 == AMCP::Implementation::get_type_marker<unsigned long>()
      || *a1 == AMCP::Implementation::get_type_marker<long long>()
      || *a1 == AMCP::Implementation::get_type_marker<unsigned long long>()
      || *a1 == AMCP::Implementation::get_type_marker<float>()
      || *a1 == AMCP::Implementation::get_type_marker<double>()
      || *a1 == AMCP::Implementation::get_type_marker<long double>()
      || *a1 == AMCP::Implementation::get_type_marker<AMCP::Direction>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::BooleanRef>()
      || *a1 == AMCP::Implementation::get_type_marker<applesauce::CF::NumberRef>();
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1482B58;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  CFNumberRef v3 = operator new(0x40uLL);
  *CFNumberRef v3 = &unk_1F1482B58;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB04908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482B58;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482B58;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_21"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 604);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D460;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F145D460;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_21>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN5caulk4mach29os_workgroup_interval_managedEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)v3, a2);
  AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>((void *)(a1 + 8), (uint64_t)v3);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v3);
}

void sub_1BAB04B5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_12;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
  char v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  float v28 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v28);
    char v5 = v28;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v27 = v4;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v27);
    if (v6)
    {
      uint64_t v8 = v6;
      *(void *)a1 = MEMORY[0x1E4FB7EA0] + 16;
      uint64_t result = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v6 + 8), v7);
      *(void *)(a1 + 8) = result;
      long long v10 = *(_OWORD *)(v8 + 41);
      long long v11 = *(_OWORD *)(v8 + 32);
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v8 + 16);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 41) = v10;
      *(void *)a1 = MEMORY[0x1E4FB7EA8] + 16;
      *(unsigned char *)(a1 + 57) = *(unsigned char *)(v8 + 57);
      return result;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v18 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v18, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v24 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
  memset(v25, 0, sizeof(v25));
  unint64_t v26 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v25, &v24);
  if (!v26)
  {
    char v19 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    __int16 v20 = std::bad_cast::bad_cast(v19);
    __cxa_throw(v20, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v23 = v4;
  uint64_t v12 = v26(4, v25, 0, &v23);
  uint64_t v14 = v12;
  if (!v12)
  {
    __int16 v21 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v22 = std::bad_cast::bad_cast(v21);
    __cxa_throw(v22, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  *(void *)a1 = MEMORY[0x1E4FB7EA0] + 16;
  uint64_t result = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v12 + 8), v13);
  *(void *)(a1 + 8) = result;
  long long v15 = *(_OWORD *)(v14 + 41);
  long long v16 = *(_OWORD *)(v14 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(v14 + 16);
  *(_OWORD *)(a1 + 32) = v16;
  *(_OWORD *)(a1 + 41) = v15;
  *(void *)a1 = MEMORY[0x1E4FB7EA8] + 16;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(v14 + 57);
  if (v26) {
    return v26(0, v25, 0, 0);
  }
  return result;
}

void sub_1BAB04DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<void,caulk::mach::os_workgroup_interval_managed const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
  char v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)double v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    long long v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const caulk::mach::os_workgroup_interval_managed &>]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>(),
        (char v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      long long v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)double v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    long long v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const caulk::mach::os_workgroup_interval_managed &>]";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAB05270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>(void)::s_type_marker = AMCP::Implementation::generate_type_marker(MEMORY[0x1E4FB7E98], v3);
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[366];
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145D3E0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F145D3E0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB05490(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F145D3E0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F145D3E0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(caulk::mach::os_workgroup_interval_managed const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(caulk::mach::os_workgroup_interval_managed const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_20"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  v10[0] = MEMORY[0x1E4FB7EA0] + 16;
  unint64_t v4 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*(caulk::mach::details **)(a2 + 8), (void *)a2);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v12 = v5;
  *(_OWORD *)&v12[9] = *(_OWORD *)(a2 + 41);
  v10[0] = MEMORY[0x1E4FB7EA8] + 16;
  v10[1] = v4;
  char v13 = *(unsigned char *)(a2 + 57);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = (caulk::mach::details *)caulk::mach::details::retain_os_object(v4, v7);
  long long v16 = v11;
  *(_OWORD *)v17 = *(_OWORD *)v12;
  *(_OWORD *)&v17[9] = *(_OWORD *)&v12[9];
  uint64_t v14 = MEMORY[0x1E4FB7EA8] + 16;
  long long v15 = v8;
  char v18 = v13;
  if ((uint64_t *)(v6 + 64) != &v14)
  {
    caulk::mach::details::holder::operator=((caulk::mach::details **)(v6 + 72), &v15);
    long long v9 = *(_OWORD *)v17;
    *(_OWORD *)(v6 + 80) = v16;
    *(_OWORD *)(v6 + 96) = v9;
    *(_OWORD *)(v6 + 105) = *(_OWORD *)&v17[9];
    *(unsigned char *)(v6 + 121) = v18;
  }
  AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context((AMCP::IO_Core::IOContext_Core *)v6);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&v14);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v10);
}

void sub_1BAB058B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
  {
    caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)&a18);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAB05880);
  }
  _Unwind_Resume(exception_object);
}

caulk::mach::details **caulk::mach::details::holder::operator=(caulk::mach::details **a1, caulk::mach::details **a2)
{
  if (a1 != a2)
  {
    caulk::mach::details::release_os_object(*a1, a2);
    *a1 = (caulk::mach::details *)caulk::mach::details::retain_os_object(*a2, v4);
  }
  return a1;
}

void AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context(AMCP::IO_Core::IOContext_Core *this)
{
  v39[9] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  if (*((void *)this + 16))
  {
    uint64_t v3 = *((void *)this + 20);
    if (v3)
    {
      if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(v3 + 32)))
      {
        AMCP::IO_Core::IOContext_Core::create_execution_context((AMCP::IO_Core::IOContext_Core *)v37, (uint64_t)this, v4, v5);
        unsigned int v6 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*((void *)this + 20) + 32));
        uint64_t v7 = (int *)*((void *)this + 18);
        v22.__vftable = 0;
        v22.__imp_.__imp_ = 0;
        AMCP::IO_Core::Play_State_Manager::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)&__p, (unint64_t *)(*((void *)this + 20) + 16));
        *(void *)&long long v14 = 0;
        *((void *)&v14 + 1) = 1;
        int v9 = AMCP::Graph::Manifest_Queue::enqueue_manifest(v7, (uint64_t *)&v22, v6, v6, &__p, v37, 2, v8, v14);
        uint64_t v10 = (AMCP::Log::Scope_Registry *)__p;
        if (__p) {
          operator delete(__p);
        }
        if (v9 == 1)
        {
          AMCP::Log::Scope_Registry::get(v10);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          long long v11 = *(NSObject **)__p;
          if (*(void *)v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
          }
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            uint64_t v12 = pthread_self();
            mach_port_t v13 = pthread_mach_thread_np(v12);
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v13;
            *(_WORD *)double v30 = 2080;
            *(void *)&v30[2] = "IOContext_Core.cpp";
            __int16 v31 = 1024;
            int v32 = 622;
            __int16 v33 = 2080;
            *(void *)v34 = "not (start_succeeded != Start_Stop_Result::failure)";
            _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s enqueue should always succeed when only the execution context is queued", (uint8_t *)&__p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"enqueue should always succeed when only the execution context is queued", (uint64_t)&v20);
          std::logic_error::logic_error(&v21, &v20);
          v21.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v22, &v21);
          uint64_t v24 = 0;
          uint64_t v25 = 0;
          uint64_t v26 = 0;
          int v27 = -1;
          v22.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          uint64_t v23 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&__p, (uint64_t)&v22);
          *(void *)&v34[6] = "void AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context()";
          int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
          int v36 = 622;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
          long long v18 = v15;
          uint64_t v19 = v16;
          long long v15 = 0uLL;
          uint64_t v16 = 0;
          v17 = &unk_1F148AA90;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v39);
        if (v38) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v38);
        }
      }
    }
  }
  std::mutex::unlock(v2);
}

void sub_1BAB05C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p)
{
  AMCP::Graph::Manifest_Execution_Context::~Manifest_Execution_Context((AMCP::Graph::Manifest_Execution_Context *)(v38 - 176));
  std::mutex::unlock(v37);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::create_execution_context(AMCP::IO_Core::IOContext_Core *this, uint64_t a2, double a3, double a4)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a2 + 128);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    v17 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      long long v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v19;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&v38[2] = "IOContext_Core.cpp";
      __int16 v39 = 1024;
      int v40 = 593;
      __int16 v41 = 2080;
      *(void *)v42 = "not (m_inventory)";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(void *)&v42[6] = "Graph::Manifest_Execution_Context AMCP::IO_Core::IOContext_Core::create_execution_context()";
    v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    int v44 = 593;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    uint64_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v8 = *(void *)(v4 + 96);
  uint64_t v7 = *(std::__shared_weak_count **)(v4 + 104);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v20 = **(NSObject ***)buf;
    if (*(void *)v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v38);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)uint64_t v38 = 2080;
      *(void *)&v38[2] = "IOContext_Core.cpp";
      __int16 v39 = 1024;
      int v40 = 594;
      __int16 v41 = 2080;
      *(void *)v42 = "not (m_inventory->get_master_timebase())";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v36);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v28);
    std::logic_error::logic_error(&v29, &v28);
    v29.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v30, &v29);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    int v35 = -1;
    v30.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    __int16 v31 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v30);
    *(void *)&v42[6] = "Graph::Manifest_Execution_Context AMCP::IO_Core::IOContext_Core::create_execution_context()";
    v43 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    int v44 = 594;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    long long v26 = v23;
    uint64_t v27 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    uint64_t v25 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  uint64_t v9 = MEMORY[0x1E4FB7EA8] + 16;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 6) = v9;
  *((_WORD *)this + 56) = 0;
  double v10 = *(double *)(a2 + 592);
  LODWORD(a4) = *(_DWORD *)(a2 + 608);
  double v11 = (double)*(unint64_t *)&a4;
  double v12 = round(v10);
  if (v12 < v11 || (LODWORD(v11) = *(_DWORD *)(a2 + 612), double v11 = (double)*(unint64_t *)&v11, v12 > v11)) {
    double v10 = v11;
  }
  long long v13 = *(_OWORD *)(*(void *)(a2 + 128) + 96);
  uint64_t v14 = *(void *)(*(void *)(a2 + 128) + 104);
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    long long v15 = (std::__shared_weak_count *)*((void *)this + 4);
    *(_DWORD *)this = 2;
    *((double *)this + 1) = v10;
    *((void *)this + 2) = 0;
    *(_OWORD *)((char *)this + 24) = v13;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
    *(_DWORD *)this = 2;
    *((double *)this + 1) = v10;
    *((void *)this + 2) = 0;
    *(_OWORD *)((char *)this + 24) = v13;
  }
  *((_DWORD *)this + 10) = *(_DWORD *)(a2 + 600);
  if ((AMCP::IO_Core::IOContext_Core *)((char *)this + 48) != (AMCP::IO_Core::IOContext_Core *)(a2 + 64))
  {
    caulk::mach::details::holder::operator=((caulk::mach::details **)this + 7, (caulk::mach::details **)(a2 + 72));
    long long v16 = *(_OWORD *)(a2 + 96);
    *((_OWORD *)this + 4) = *(_OWORD *)(a2 + 80);
    *((_OWORD *)this + 5) = v16;
    *(_OWORD *)((char *)this + 89) = *(_OWORD *)(a2 + 105);
    *((unsigned char *)this + 105) = *(unsigned char *)(a2 + 121);
  }
  *((unsigned char *)this + 113) = *(unsigned char *)(a2 + 604);
}

void sub_1BAB062C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Execution_Context::~Manifest_Execution_Context(AMCP::Graph::Manifest_Execution_Context *this)
{
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((AMCP::Graph::Manifest_Execution_Context *)((char *)this + 48));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D350;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145D350;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_20>,void ()(caulk::mach::os_workgroup_interval_managed const&)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN5caulk4mach29os_workgroup_interval_managedEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  AMCP::Core::Operation::call_function<caulk::mach::os_workgroup_interval_managed>((uint64_t)v3, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::construct<caulk::mach::os_workgroup_interval_managed&>(a2);
}

void sub_1BAB064EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Core::Operation::call_function<caulk::mach::os_workgroup_interval_managed>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      double v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v13;
      *(_WORD *)std::logic_error v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    uint64_t v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = caulk::mach::os_workg"
          "roup_interval_managed, Argument_Types = <>]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    long long v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  double v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      *(_WORD *)std::logic_error v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    uint64_t v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = caulk::mach::os_workg"
          "roup_interval_managed, Argument_Types = <>]";
    uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    long long v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAB0699C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::construct<caulk::mach::os_workgroup_interval_managed&>(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
  operator new();
}

uint64_t AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch(uint64_t result, void *a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  switch((int)result)
  {
    case 0:
      goto LABEL_9;
    case 1:
      AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::construct<caulk::mach::os_workgroup_interval_managed&>(a3, *a2);
      return 0;
    case 2:
      uint64_t v7 = *a2;
      *a2 = 0;
      uint64_t v8 = *(void *)a3;
      *(void *)a3 = v7;
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      *((void *)a3 + 4) = AMCP::Implementation::Outboard_Storage<caulk::mach::os_workgroup_interval_managed>::dispatch;
LABEL_9:
      uint64_t v9 = *a2;
      *a2 = 0;
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      uint64_t result = 0;
      a2[4] = 0;
      *(_OWORD *)a2 = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      return result;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
      uint64_t result = 0;
      *a4 = v10;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>()) {
        return *a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v11 = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
      double v12 = (void (*)(uint64_t, void *, void, _OWORD *))a2[4];
      *(void *)&v21[0] = 0;
      if (v12)
      {
        v12(3, a2, 0, v21);
        double v12 = *(void (**)(uint64_t, void *, void, _OWORD *))&v21[0];
      }
      if (v12 != (void (*)(uint64_t, void *, void, _OWORD *))v11) {
        goto LABEL_23;
      }
      mach_port_t v13 = (void (*)(uint64_t, AMCP::Thing *, void, void *))*((void *)a3 + 4);
      v18[0] = 0;
      if (v13)
      {
        v13(3, a3, 0, v18);
        mach_port_t v13 = (void (*)(uint64_t, AMCP::Thing *, void, void *))v18[0];
      }
      if (v13 == (void (*)(uint64_t, AMCP::Thing *, void, void *))v11)
      {
        if (a2[4])
        {
          *(void *)&v21[0] = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
          uint64_t v14 = ((uint64_t (*)(uint64_t, void *, void, _OWORD *))a2[4])(4, a2, 0, v21);
        }
        else
        {
          uint64_t v14 = 0;
        }
        if (*((void *)a3 + 4))
        {
          *(void *)&v21[0] = AMCP::Implementation::get_type_marker<caulk::mach::os_workgroup_interval_managed>();
          uint64_t v17 = (*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v21);
        }
        else
        {
          uint64_t v17 = 0;
        }
        if (*(void *)(v14 + 8) == *(void *)(v17 + 8)
          && *(unsigned __int8 *)(v14 + 56) == *(unsigned __int8 *)(v17 + 56)
          && *(unsigned __int8 *)(v14 + 57) == *(unsigned __int8 *)(v17 + 57))
        {
          return 1;
        }
      }
      else
      {
LABEL_23:
        AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)v21, (uint64_t)a2);
        AMCP::Thing::convert_to<caulk::mach::os_workgroup_interval_managed>((uint64_t)v18, (uint64_t)a3);
        if (*((void *)&v21[0] + 1) == v18[1] && v23 == v19)
        {
          int v15 = v24;
          int v16 = v20;
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v18);
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v21);
          if (v15 == v16) {
            return 1;
          }
        }
        else
        {
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v18);
          caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v21);
        }
      }
      return 0;
    case 6:
      mach_port_t v22 = 0;
      memset(v21, 0, sizeof(v21));
      AMCP::swap((AMCP::Thing *)v21, a3, a3);
      if (v22) {
        v22(0, v21, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145D2D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  *unint64_t v3 = &unk_1F145D2D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB06F88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145D2D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<caulk::mach::os_workgroup_interval_managed>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145D2D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<caulk::mach::os_workgroup_interval_managed ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<caulk::mach::os_workgroup_interval_managed ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      double v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_19"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

__n128 std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::operator()@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a3 = MEMORY[0x1E4FB7EA0] + 16;
  *(void *)(a3 + 8) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v4 + 72), a2);
  __n128 result = *(__n128 *)(v4 + 105);
  long long v6 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 32) = v6;
  *(__n128 *)(a3 + 41) = result;
  *(void *)a3 = MEMORY[0x1E4FB7EA8] + 16;
  *(unsigned char *)(a3 + 57) = *(unsigned char *)(v4 + 121);
  return result;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D240;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F145D240;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_19>,caulk::mach::os_workgroup_interval_managed ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_18"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::__shared_weak_count *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v4)
    {
      if (v3) {
        uint64_t v2 = (std::__shared_weak_count *)*(unsigned int *)(v3 + 168);
      }
      else {
        uint64_t v2 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D1C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F145D1C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_18>,unsigned int ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_17"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::__shared_weak_count *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 16);
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (v4)
    {
      if (v3) {
        uint64_t v2 = (std::__shared_weak_count *)*(unsigned int *)(v3 + 164);
      }
      else {
        uint64_t v2 = 0;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D140;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F145D140;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_17>,unsigned int ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIdEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = AMCP::Core::Operation::call_function<double>((void *)(a1 + 8));
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  *a2 = v4;
  a2[4] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  return result;
}

uint64_t AMCP::Core::Operation::call_function<double>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  uint64_t v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)std::string v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = double, Argument_Types = <>]";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>(),
        (uint64_t v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)std::string v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = double, Argument_Types = <>]";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB07B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1478A28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1478A28;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB07CC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1478A28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<double>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1478A28;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<double ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_16"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::operator()(uint64_t a1)
{
  return AMCP::IO_Core::IOContext_Core::get_actual_sample_rate(*(AMCP::IO_Core::IOContext_Core **)(a1 + 8));
}

double AMCP::IO_Core::IOContext_Core::get_actual_sample_rate(AMCP::IO_Core::IOContext_Core *this)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 16);
  if (!v1) {
    return 0.0;
  }
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v3 = *(atomic_ullong **)(v1 + 104);
  if (!v3)
  {
    if (v4)
    {
      long long v6 = 0;
      goto LABEL_9;
    }
LABEL_13:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)std::string v28 = 2080;
      *(void *)&v28[2] = "IOContext_Core.cpp";
      __int16 v29 = 1024;
      int v30 = 874;
      __int16 v31 = 2080;
      *(void *)uint64_t v32 = "not (m_inventory->get_master_timebase())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::runtime_error v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v32[6] = "Sample_Rate AMCP::IO_Core::IOContext_Core::get_actual_sample_rate() const";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    int v34 = 874;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  atomic_fetch_add_explicit(v3 + 1, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  if (!v4) {
    goto LABEL_13;
  }
  uint64_t v5 = *((void *)this + 16);
  uint64_t v4 = *(void *)(v5 + 96);
  long long v6 = *(std::__shared_weak_count **)(v5 + 104);
  if (v6)
  {
    char v7 = 0;
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    goto LABEL_10;
  }
LABEL_9:
  char v7 = 1;
LABEL_10:
  double v8 = (*(double (**)(uint64_t))(*(void *)v4 + 152))(v4);
  if ((v7 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v8;
}

void sub_1BAB08288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  char v28 = v26;
  if ((v28 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D0C0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145D0C0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_16>,double ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIfEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  float v4 = AMCP::Thing::convert_to<float>(a2);
  return AMCP::Core::Operation::call_function<void,float const&>(v2, (uint64_t)&v4);
}

uint64_t AMCP::Core::Operation::call_function<void,float const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
  uint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const float &>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  long long v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>(),
        (uint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const float &>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAB088D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483048;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1483048;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB08A8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1483048;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<float>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1483048;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(float const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(float const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(float const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(float const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_15"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::operator()(AMCP::Log::Scope_Registry *a1, float *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  float v2 = *a2;
  if (*a2 < 0.0 || v2 > 1.0)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v24);
    }
    double v6 = v2;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67110146;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)int v24 = 2080;
      *(void *)&v24[2] = "IOContext_Core.cpp";
      __int16 v25 = 1024;
      int v26 = 831;
      __int16 v27 = 2080;
      *(void *)char v28 = "not (cycle_usage >= 0 and cycle_usage <= 1.0)";
      *(_WORD *)&v28[8] = 2048;
      *(double *)&unsigned char v28[10] = v6;
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid cycle usage: %f", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cycle usage: %f", (uint64_t)&v14, *(void *)&v6);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v28[6] = "void AMCP::IO_Core::IOContext_Core::set_cycle_usage(float)";
    *(void *)&v28[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    int v29 = 831;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v9);
    *(_OWORD *)__p = *(_OWORD *)v9;
    uint64_t v13 = v10;
    v9[0] = 0;
    v9[1] = 0;
    uint64_t v10 = 0;
    mach_port_t v11 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v4 = (float *)*((void *)a1 + 1);
  v4[150] = v2;
  AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context((AMCP::IO_Core::IOContext_Core *)v4);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145D040;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145D040;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_15>,void ()(float const&)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIfEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = AMCP::Core::Operation::call_function<float>((void *)(a1 + 8));
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v4;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<float>::dispatch;
  return result;
}

uint64_t AMCP::Core::Operation::call_function<float>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
  uint64_t v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    __int16 v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float, Argument_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    std::logic_error v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>(),
        (uint64_t v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    __int16 v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = float, Argument_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    std::logic_error v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB0967C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1482EC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1482EC8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB09834(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482EC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<float>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482EC8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<float ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<float ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<float ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<float ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<float ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_14"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::operator()(uint64_t a1)
{
  return *(float *)(*(void *)(a1 + 8) + 600);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CFC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CFC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_14>,float ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__15tupleIJjjEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = AMCP::Core::Operation::call_function<std::tuple<unsigned int,unsigned int>>((void *)(a1 + 8));
  a2[2] = 0;
  a2[3] = 0;
  *a2 = result;
  a2[1] = 0;
  a2[4] = (uint64_t)AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  return result;
}

uint64_t AMCP::Core::Operation::call_function<std::tuple<unsigned int,unsigned int>>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
  uint64_t v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    __int16 v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::tuple<unsigned i"
          "nt, unsigned int>, Argument_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    std::logic_error v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>(),
        (uint64_t v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    __int16 v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::tuple<unsigned i"
          "nt, unsigned int>, Argument_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    std::logic_error v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB0A09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1482CC0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1482CC0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB0A254(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482CC0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::tuple<unsigned int,unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482CC0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::tuple<unsigned int,unsigned int> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::tuple<unsigned int,unsigned int> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::operator()(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 608);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CF40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CF40;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_13>,std::tuple<unsigned int,unsigned int> ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIjEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  int v4 = AMCP::Thing::convert_to<unsigned int>(a2);
  return AMCP::Core::Operation::call_function<void,unsigned int const&>(v2, (uint64_t)&v4);
}

uint64_t AMCP::Core::Operation::call_function<void,unsigned int const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
  uint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      long long v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v14;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const unsigned int &>]";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  double v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>(),
        (uint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)int v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const unsigned int &>]";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAB0AAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1482A38;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1482A38;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB0AC7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1482A38;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<unsigned int>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1482A38;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(unsigned int const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(unsigned int const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(unsigned int const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(unsigned int const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  unsigned int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *(_DWORD *)(v3 + 612);
  uint64_t v5 = (AMCP::Log::Scope_Registry *)*(unsigned int *)(v3 + 608);
  double v6 = v5;
  if (*a2 < v5 || (double v6 = (AMCP::Log::Scope_Registry *)*(unsigned int *)(v3 + 612), v2 > v4)) {
    unsigned int v2 = v6;
  }
  if (v2 < v5)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      int v12 = *(_DWORD *)(v3 + 608);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v11;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IOContext_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 847;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "not (buffer_frame_size.get() >= std::get<AMCP::Min_Max_Index::min>(m_cached_min_max_buffer_frame_size))";
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v2;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v12;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid buffer size: %lld - too small (min %u)", buf, 0x32u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid buffer size: %lld - too small (min %u)", (uint64_t)&v22, v2, *(unsigned int *)(v3 + 608));
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(void *)&buf[32] = "void AMCP::IO_Core::IOContext_Core::set_buffer_frame_size(const Sample_Time &)";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&buf[48] = 847;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v17);
    *(_OWORD *)__p = *(_OWORD *)v17;
    uint64_t v21 = v18;
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v2 > v4)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v13 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      int v16 = *(_DWORD *)(v3 + 612);
      *(_DWORD *)buf = 67110402;
      *(_DWORD *)&buf[4] = v15;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "IOContext_Core.cpp";
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = 848;
      *(_WORD *)&buf[24] = 2080;
      *(void *)&buf[26] = "not (buffer_frame_size.get() <= std::get<AMCP::Min_Max_Index::max>(m_cached_min_max_buffer_frame_size))";
      *(_WORD *)&buf[34] = 2048;
      *(void *)&buf[36] = v2;
      *(_WORD *)&buf[44] = 1024;
      *(_DWORD *)&buf[46] = v16;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid buffer size: %lld - too large (max %u)", buf, 0x32u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v30);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid buffer size: %lld - too large (max %u)", (uint64_t)&v22, v2, *(unsigned int *)(v3 + 612));
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    int v29 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *(void *)&buf[32] = "void AMCP::IO_Core::IOContext_Core::set_buffer_frame_size(const Sample_Time &)";
    *(void *)&buf[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&buf[48] = 848;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v17);
    *(_OWORD *)__p = *(_OWORD *)v17;
    uint64_t v21 = v18;
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (round(*(double *)(v3 + 592)) != (double)v2)
  {
    *(double *)(v3 + 592) = (double)v2;
    AMCP::IO_Core::IOContext_Core::maybe_enqueue_execution_context((AMCP::IO_Core::IOContext_Core *)v3);
    v24.__vftable = (std::logic_error_vtbl *)0x676C6F626673697ALL;
    LODWORD(v24.__imp_.__imp_) = 0;
    memset(buf, 0, 32);
    *(_DWORD *)buf = v2;
    *(void *)&buf[32] = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
    uint64_t v7 = *(void *)(v3 + 32);
    mach_port_t v8 = *(std::__shared_weak_count **)(v3 + 40);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, std::logic_error *, uint8_t *))(*(void *)v7 + 48))(v7, *(unsigned int *)(v3 + 8), &v24, buf);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
    if (*(void *)&buf[32]) {
      (*(void (**)(void, uint8_t *, void, void))&buf[32])(0, buf, 0, 0);
    }
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CEC0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CEC0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_12>,void ()(unsigned int const&)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIjEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = AMCP::Core::Operation::call_function<unsigned int>((void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<unsigned int>::dispatch;
  return result;
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14888D8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  int v3 = operator new(0x40uLL);
  *int v3 = &unk_1F14888D8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB0B810(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14888D8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14888D8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

unint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return vcvtmd_s64_f64(*(double *)(*(void *)(a1 + 8) + 592));
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CE40;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CE40;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_11>,unsigned int ()(void)>::~__func()
{
}

uint64_t AMCP::Core::Operation::Operation(uint64_t result, int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)uint64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)(result + 32) = 1065353216;
  int v2 = *a2;
  *(_DWORD *)(result + 40) = *a2;
  int v3 = a2[1];
  *(_DWORD *)(result + 44) = v3;
  int v4 = a2[2];
  *(_DWORD *)(result + 48) = v4;
  if (v2 == 707406378 || v3 == 707406378 || v4 == -1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)mach_port_t v11 = 2080;
      *(void *)&_OWORD v11[2] = "Operation.h";
      __int16 v12 = 1024;
      int v13 = 127;
      __int16 v14 = 2080;
      mach_port_t v15 = "!m_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return result;
}

void sub_1BAB0BCB4(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::Core::Operation>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 24);
}

void std::__shared_ptr_emplace<AMCP::Core::Operation>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488548;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Operation>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488548;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Resume_Behavior)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Resume_Behavior)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Resume_Behavior)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      __int16 v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  BOOL v4 = AMCP::IO_Core::IOContext_Core::resume(v3, v2);
  std::mutex::unlock((std::mutex *)(v3 + 200));
  if (v4)
  {
    uint64_t v5 = *(AMCP::IO_Core::IO_Thread **)(*(void *)(v3 + 160) + 32);
    AMCP::IO_Core::IO_Thread::wait_for_start(v5);
  }
}

void sub_1BAB0BFC8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL AMCP::IO_Core::IOContext_Core::resume(uint64_t a1, int a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
    }
    BOOL v4 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if (v4)
    {
      double v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      int v8 = *(_DWORD *)(a1 + 8);
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        mach_port_t v11 = std::__shared_weak_count::lock(v9);
        if (v11) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 0;
        mach_port_t v11 = 0;
      }
      int v13 = &v32;
      if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v13 = (std::string *)v32.__r_.__value_.__r.__words[0];
      }
      int v14 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*(void *)(a1 + 160) + 32));
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E6235910[v14]);
      if (v28 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      unsigned int v16 = atomic_load((unsigned int *)(a1 + 168));
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)__int16 v39 = 2080;
      *(void *)&v39[2] = "IOContext_Core.cpp";
      __int16 v40 = 1024;
      int v41 = 925;
      __int16 v42 = 1024;
      *(_DWORD *)v43 = v8;
      *(_WORD *)&v43[4] = 2080;
      *(void *)&v43[6] = v13;
      *(_WORD *)int v44 = 2080;
      *(void *)&v44[2] = p_p;
      *(_WORD *)&v44[10] = 1024;
      unsigned int v45 = v16;
      _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::resume: current(%s)  pause_count(%d)", buf, 0x38u);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  int v17 = atomic_load((unsigned int *)(a1 + 168));
  if (v17 <= 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v22 = **(NSObject ***)buf;
    if (*(void *)v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v24;
      *(_WORD *)__int16 v39 = 2080;
      *(void *)&v39[2] = "IOContext_Core.cpp";
      __int16 v40 = 1024;
      int v41 = 928;
      __int16 v42 = 2080;
      *(void *)v43 = "not (m_pause_count >= 1)";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid pause count", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid pause count", (uint64_t)&v30);
    std::logic_error::logic_error(&v31, &v30);
    v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v32, &v31);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    int v36 = -1;
    v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v32.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v43[6] = "BOOL AMCP::IO_Core::IOContext_Core::resume(Resume_Behavior)";
    *(void *)int v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&v44[8] = 928;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    __p = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (atomic_fetch_add((atomic_uint *volatile)(a1 + 168), 0xFFFFFFFF) != 1) {
    return 0;
  }
  if (a2 || (std::string v20 = *(unsigned int **)(a1 + 176), v21 = *(unsigned int **)(a1 + 184), v20 == v21))
  {
    char started = 0;
  }
  else
  {
    do
      char started = AMCP::IO_Core::IOContext_Core::start_internal((void *)a1, *v20++, 0);
    while (v20 != v21);
  }
  *(void *)(a1 + 184) = *(void *)(a1 + 176);
  return started != 0;
}

void sub_1BAB0C470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint8_t buf,uint64_t a39,__int16 a40,__int16 a41,int a42)
{
  if (v43)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    if (!v42) {
      goto LABEL_6;
    }
  }
  else if (!v42)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v42);
  goto LABEL_6;
}

void AMCP::IO_Core::anonymous namespace'::get_node_uid(std::string *a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(a1, *(const std::string::value_type **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      *(_OWORD *)&a1->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 24);
      a1->__r_.__value_.__r.__words[2] = *(void *)(a2 + 40);
    }
  }
  else
  {
    a1->__r_.__value_.__r.__words[0] = 0;
    a1->__r_.__value_.__l.__size_ = 0;
    a1->__r_.__value_.__r.__words[2] = 0;
  }
}

uint64_t AMCP::IO_Core::IOContext_Core::start_internal(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  kdebug_trace();
  if (!a2)
  {
    int v17 = (std::__shared_weak_count *)a1[3];
    if (v17)
    {
      uint64_t v18 = a1[2];
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v19 = std::__shared_weak_count::lock(v17);
      std::__shared_weak_count::__release_weak(v17);
      if (v19)
      {
        if (v18)
        {
          if (*(char *)(v18 + 47) < 0) {
            std::string::__init_copy_ctor_external(&v52, *(const std::string::value_type **)(v18 + 24), *(void *)(v18 + 32));
          }
          else {
            std::string v52 = *(std::string *)(v18 + 24);
          }
          uint64_t v26 = a1[4];
          uint64_t v27 = (std::__shared_weak_count *)a1[5];
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 24))(v26);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
          uint64_t v29 = (AMCP::Log::Scope_Registry *)(*(void *(**)(void **__return_ptr, uint64_t, std::string *))(*(void *)v28 + 16))(&v41, v28, &v52);
          if (!v41[31])
          {
            AMCP::Log::Scope_Registry::get(v29);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            std::string v30 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
            {
              std::logic_error v31 = pthread_self();
              mach_port_t v32 = pthread_mach_thread_np(v31);
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&buf[4] = v32;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "IOContext_Core.cpp";
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = 522;
              _os_log_debug_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Attempt to start an IO Context that has no IO Proc assigned", buf, 0x18u);
            }
            if ((void)v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42);
            }
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v52.__r_.__value_.__l.__data_);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            return 0;
          }
          if ((void)v42) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42);
          }
          if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v52.__r_.__value_.__l.__data_);
          }
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
    }
  }
  if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(a1[20] + 32)) != 2)
  {
    AMCP::IO_Core::IOContext_Core::create_manifest((AMCP::IO_Core::IOContext_Core *)&v41, (uint64_t)a1);
    *(_OWORD *)buf = *(_OWORD *)(a1[20] + 16);
    std::string::basic_string[abi:ne180100]<0>(&v52, "");
    int v6 = AMCP::IO_Core::Play_State_Manager::start((uint64_t *)buf, a2, (uint64_t *)&v52);
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v52.__r_.__value_.__l.__data_);
    }
    int v7 = AMCP::IO_Core::IOContext_Core::enqueue_manifest_sync((uint64_t)a1, (uint64_t)&v41, v6, a2 | 0x100000000, a3);
    if (v7 == 1)
    {
      AMCP::IO_Core::IOContext_Core::pause((uint64_t)a1, 0);
      uint64_t v8 = v41[9];
      uint64_t v9 = (std::__shared_weak_count *)v41[10];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::Graph::Manifest_Inventory::report_thread_error(*(void *)(v8 + 192));
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    if ((void)v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v42);
    }
    if (v7 == 1) {
      return 0;
    }
  }
  mach_port_t v11 = (uint64_t *)a1[20];
  std::string::basic_string[abi:ne180100]<0>(&v52, "IO_Thread");
  uint64_t v12 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::Play_State_Manager::start(v11 + 2, a2, (uint64_t *)&v52);
  int v13 = (int)v12;
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if (!v13)
  {
    AMCP::Log::Scope_Registry::get(v12);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v52, "com.apple.coreaudio", "AMCP");
    uint64_t v33 = *(NSObject **)v52.__r_.__value_.__l.__data_;
    if (v52.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = pthread_self();
      mach_port_t v35 = pthread_mach_thread_np(v34);
      LODWORD(v52.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v52.__r_.__value_.__r.__words[0]) = v35;
      LOWORD(v52.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Thread.cpp";
      WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v52.__r_.__value_.__r.__words[2]) = 59;
      LOWORD(v53) = 2080;
      *(void *)((char *)&v53 + 2) = "not (new_state == Transport_State::on or new_state == Transport_State::prewarm)";
      _os_log_error_impl(&dword_1BAA78000, v33, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint8_t *)&v52, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"IO_Thread::start: Start failed to change the prewarming state in a reasonable way", (uint64_t)&v44);
    std::logic_error::logic_error(&v45, &v44);
    v45.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v45);
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    int v51 = -1;
    *(void *)buf = &unk_1F1489CC8;
    *(void *)&buf[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v52, (uint64_t)buf);
    *((void *)&v53 + 1) = "void AMCP::IO_Core::IO_Thread::start(Play_State_Manager::Play_Request)";
    v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread.cpp";
    int v55 = 59;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
    int v41 = &unk_1F148AA90;
    long long v42 = v39;
    uint64_t v43 = v40;
    long long v39 = 0uLL;
    uint64_t v40 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v14 = (pthread_cond_t **)(v11 + 4);
  int v15 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v11[4]);
  if (v11[3])
  {
    BOOL v16 = 1;
    if (v15) {
      goto LABEL_34;
    }
LABEL_26:
    if (v16)
    {
      uint64_t v21 = (std::thread **)(v11 + 6);
      std::string v20 = (pthread_t *)v11[6];
      if (v20)
      {
        std::string v22 = (AMCP::Log::Scope_Registry *)pthread_kill(*v20, 0);
        if (v22 != 3)
        {
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v52, "com.apple.coreaudio", "AMCP");
          int v36 = *(NSObject **)v52.__r_.__value_.__l.__data_;
          if (v52.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52.__r_.__value_.__l.__size_);
          }
          if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
          {
            char v37 = pthread_self();
            mach_port_t v38 = pthread_mach_thread_np(v37);
            LODWORD(v52.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(v52.__r_.__value_.__r.__words[0]) = v38;
            LOWORD(v52.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&v52.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IO_Thread.cpp";
            WORD1(v52.__r_.__value_.__r.__words[2]) = 1024;
            HIDWORD(v52.__r_.__value_.__r.__words[2]) = 66;
            LOWORD(v53) = 2080;
            *(void *)((char *)&v53 + 2) = "not (m_thread.operator BOOL() ? thread_has_finished(*m_thread) : true)";
            _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Trying to start an IO thread whose thread already exists", (uint8_t *)&v52, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v46);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Trying to start an IO thread whose thread already exists", (uint64_t)&v44);
          std::logic_error::logic_error(&v45, &v44);
          v45.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)buf, &v45);
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          uint64_t v50 = 0;
          int v51 = -1;
          *(void *)buf = &unk_1F1489CC8;
          *(void *)&buf[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v52, (uint64_t)buf);
          *((void *)&v53 + 1) = "void AMCP::IO_Core::IO_Thread::start(Play_State_Manager::Play_Request)";
          v54 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IO_Thread.cpp";
          int v55 = 66;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v39);
          int v41 = &unk_1F148AA90;
          long long v42 = v39;
          uint64_t v43 = v40;
          long long v39 = 0uLL;
          uint64_t v40 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (*v21) {
          std::thread::join(*v21);
        }
      }
      uint64_t v23 = *v11;
      std::string::size_type v25 = v11[4];
      std::string::size_type v24 = v11[5];
      if (v24) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
      }
      v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F147F6C8;
      v52.__r_.__value_.__l.__size_ = v25;
      v52.__r_.__value_.__r.__words[2] = v24;
      *(void *)&long long v53 = &v52;
      std::function<void ()(void)>::operator=((void *)(v23 + 608), (uint64_t)&v52);
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v52);
      AMCP::IO_Core::Thread_Control_State::set_state((pthread_cond_t *)v11[4], v13);
      LOWORD(v41) = *((_WORD *)v11 + 30);
      BYTE2(v41) = *((unsigned char *)v11 + 62);
      operator new();
    }
    goto LABEL_34;
  }
  BOOL v16 = v11[2] != 0;
  if (!v15) {
    goto LABEL_26;
  }
LABEL_34:
  if (v13 != caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load((uint64_t)*v14)) {
    AMCP::IO_Core::Thread_Control_State::set_state(*v14, v13);
  }
  return 1;
}

void sub_1BAB0CF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::create_manifest(AMCP::IO_Core::IOContext_Core *this, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 24);
  if (v3
    && (uint64_t v5 = *(void *)(a2 + 16),
        atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed),
        int v6 = std::__shared_weak_count::lock(v3),
        std::__shared_weak_count::__release_weak(v3),
        v6))
  {
    if (v5)
    {
      if (*(char *)(v5 + 47) < 0) {
        std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)(v5 + 24), *(void *)(v5 + 32));
      }
      else {
        std::string v16 = *(std::string *)(v5 + 24);
      }
      if (atomic_load((unsigned int *)(a2 + 168)))
      {
        uint64_t v14 = 0;
        int v15 = 0;
      }
      else
      {
        uint64_t v8 = *(std::__shared_weak_count **)(a2 + 136);
        uint64_t v14 = *(void *)(a2 + 128);
        int v15 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      uint64_t v9 = *(void *)(a2 + 32);
      uint64_t v10 = *(std::__shared_weak_count **)(a2 + 40);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::string *, uint64_t *))(*(void *)v9 + 40))(v9, &v16, &v14);
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      uint64_t v12 = *(void *)(*(void *)this + 72);
      uint64_t v11 = *(void *)(*(void *)this + 80);
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      int v13 = *(std::__shared_weak_count **)(a2 + 136);
      *(void *)(a2 + 128) = v12;
      *(void *)(a2 + 136) = v11;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v16.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      *(void *)this = 0;
      *((void *)this + 1) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
}

void sub_1BAB0D2C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::IOContext_Core::enqueue_manifest_sync(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a4;
  int v19 = a3;
  uint64_t v18 = a5;
  unsigned int v17 = 0;
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v10, *(void *)(a1 + 48), *(std::__shared_weak_count **)(a1 + 56));
  uint64_t v12 = &v17;
  uint64_t v13 = a2;
  uint64_t v14 = &v19;
  int v15 = &v20;
  std::string v16 = &v18;
  unsigned __int8 v7 = atomic_load((unsigned __int8 *)(a1 + 304));
  if (v7) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 305));
  }
  uint64_t v8 = *(NSObject **)(a1 + 272);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP7IO_Core14IOContext_Core21enqueue_manifest_syncERKNSt3__110shared_ptrINS3_5Graph8ManifestEEENS3_15Transport_StateENS6_8optionalINS4_18Play_State_Manager12Play_RequestEEEyE3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_335;
  block[4] = &v10;
  dispatch_sync(v8, block);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  return v17;
}

void AMCP::IO_Core::IOContext_Core::pause(uint64_t a1, int a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if ((void)v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
    }
    BOOL v4 = os_log_type_enabled(v5, OS_LOG_TYPE_INFO);
    if (v4)
    {
      int v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      int v8 = *(_DWORD *)(a1 + 8);
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = std::__shared_weak_count::lock(v9);
        if (v11) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
      }
      uint64_t v13 = &v48;
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v13 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      int v14 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*(void *)(a1 + 160) + 32));
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E6235910[v14]);
      if (v44 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      unsigned int v16 = atomic_load((unsigned int *)(a1 + 168));
      *(_DWORD *)buf = 67110658;
      *(_DWORD *)&buf[4] = v7;
      LOWORD(v55) = 2080;
      *(void *)((char *)&v55 + 2) = "IOContext_Core.cpp";
      WORD5(v55) = 1024;
      HIDWORD(v55) = 886;
      __int16 v56 = 1024;
      *(_DWORD *)v57 = v8;
      *(_WORD *)&v57[4] = 2080;
      *(void *)&v57[6] = v13;
      *(_WORD *)v58 = 2080;
      *(void *)&v58[2] = p_p;
      *(_WORD *)&v58[10] = 1024;
      unsigned int v59 = v16;
      _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::pause: current(%s)  pause_count(%d)", buf, 0x38u);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  unsigned int v17 = atomic_load((unsigned int *)(a1 + 168));
  if ((v17 & 0x80000000) != 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v29 = **(NSObject ***)buf;
    if ((void)v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      std::string v30 = pthread_self();
      mach_port_t v31 = pthread_mach_thread_np(v30);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v31;
      LOWORD(v55) = 2080;
      *(void *)((char *)&v55 + 2) = "IOContext_Core.cpp";
      WORD5(v55) = 1024;
      HIDWORD(v55) = 888;
      __int16 v56 = 2080;
      *(void *)v57 = "not (m_pause_count >= 0)";
      _os_log_error_impl(&dword_1BAA78000, v29, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid pause count", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid pause count", (uint64_t)&v46);
    std::logic_error::logic_error(&v47, &v46);
    v47.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v48, &v47);
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    int v52 = -1;
    v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
    *(void *)&v57[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
    *(void *)v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    *(_DWORD *)&v58[8] = 888;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
    long long v44 = v41;
    uint64_t v45 = v42;
    long long v41 = 0uLL;
    uint64_t v42 = 0;
    __p = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!atomic_fetch_add((atomic_uint *volatile)(a1 + 168), 1u))
  {
    uint64_t v18 = *(void *)(a1 + 128);
    if (v18)
    {
      uint64_t v20 = *(void *)(v18 + 96);
      int v19 = *(std::__shared_weak_count **)(v18 + 104);
      if (v19)
      {
        atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (!v20)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        mach_port_t v35 = **(NSObject ***)buf;
        if ((void)v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          int v36 = pthread_self();
          mach_port_t v37 = pthread_mach_thread_np(v36);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v37;
          LOWORD(v55) = 2080;
          *(void *)((char *)&v55 + 2) = "IOContext_Core.cpp";
          WORD5(v55) = 1024;
          HIDWORD(v55) = 894;
          __int16 v56 = 2080;
          *(void *)v57 = "not (m_inventory->get_master_timebase())";
          _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v46);
        std::logic_error::logic_error(&v47, &v46);
        v47.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v48, &v47);
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        int v52 = -1;
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
        *(void *)&v57[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
        *(void *)v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
        *(_DWORD *)&v58[8] = 894;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
        long long v44 = v41;
        uint64_t v45 = v42;
        long long v41 = 0uLL;
        uint64_t v42 = 0;
        __p = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*(void *)(a1 + 176) != *(void *)(a1 + 184))
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        mach_port_t v38 = **(NSObject ***)buf;
        if ((void)v55) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
        }
        if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
        {
          long long v39 = pthread_self();
          mach_port_t v40 = pthread_mach_thread_np(v39);
          *(_DWORD *)buf = 67109890;
          *(_DWORD *)&buf[4] = v40;
          LOWORD(v55) = 2080;
          *(void *)((char *)&v55 + 2) = "IOContext_Core.cpp";
          WORD5(v55) = 1024;
          HIDWORD(v55) = 895;
          __int16 v56 = 2080;
          *(void *)v57 = "not (m_paused_state.empty())";
          _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v46);
        std::logic_error::logic_error(&v47, &v46);
        v47.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)&v48, &v47);
        uint64_t v49 = 0;
        uint64_t v50 = 0;
        uint64_t v51 = 0;
        int v52 = -1;
        v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
        v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
        *(void *)&v57[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
        *(void *)v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
        *(_DWORD *)&v58[8] = 895;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
        long long v44 = v41;
        uint64_t v45 = v42;
        long long v41 = 0uLL;
        uint64_t v42 = 0;
        __p = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (a2)
      {
        if (a2 == 1)
        {
          AMCP::IO_Core::Play_State_Manager::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)buf, (unint64_t *)(*(void *)(a1 + 160) + 16));
          uint64_t v21 = *(NSObject ***)buf;
          std::string v22 = (int *)v55;
          if (*(void *)buf != (void)v55)
          {
            uint64_t v23 = *(int **)buf;
            do
              AMCP::IO_Core::IOContext_Core::stop_internal(a1, *v23++);
            while (v23 != v22);
          }
          if (v21) {
            operator delete(v21);
          }
          *(void *)(a1 + 184) = *(void *)(a1 + 176);
        }
      }
      else
      {
        AMCP::IO_Core::Play_State_Manager::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)buf, (unint64_t *)(*(void *)(a1 + 160) + 16));
        std::string::size_type v25 = *(void **)(a1 + 176);
        if (v25)
        {
          *(void *)(a1 + 184) = v25;
          operator delete(v25);
          *(void *)(a1 + 176) = 0;
          *(void *)(a1 + 184) = 0;
          *(void *)(a1 + 192) = 0;
        }
        uint64_t v26 = *(int **)buf;
        *(void *)(a1 + 176) = *(void *)buf;
        uint64_t v27 = (int *)v55;
        *(_OWORD *)(a1 + 184) = v55;
        uint64_t v28 = v27;
        while (v26 != v28)
          AMCP::IO_Core::IOContext_Core::stop_internal(a1, *v26++);
      }
    }
    std::string::size_type v24 = (AMCP::Log::Scope_Registry *)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*(void *)(a1 + 160) + 32));
    if (v24)
    {
      AMCP::Log::Scope_Registry::get(v24);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v32 = **(NSObject ***)buf;
      if ((void)v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55);
      }
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = pthread_self();
        mach_port_t v34 = pthread_mach_thread_np(v33);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v34;
        LOWORD(v55) = 2080;
        *(void *)((char *)&v55 + 2) = "IOContext_Core.cpp";
        WORD5(v55) = 1024;
        HIDWORD(v55) = 913;
        __int16 v56 = 2080;
        *(void *)v57 = "not (m_io_thread->get_transport_state() == Transport_State::off)";
        _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v46);
      std::logic_error::logic_error(&v47, &v46);
      v47.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v48, &v47);
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      int v52 = -1;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
      *(void *)&v57[6] = "void AMCP::IO_Core::IOContext_Core::pause(Pause_Behavior)";
      *(void *)v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      *(_DWORD *)&v58[8] = 913;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
      long long v44 = v41;
      uint64_t v45 = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      __p = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
}

void sub_1BAB0DF30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (v39)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    if (!v38) {
      goto LABEL_6;
    }
  }
  else if (!v38)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v38);
  goto LABEL_6;
}

uint64_t AMCP::IO_Core::IOContext_Core::stop_internal(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(uint64_t **)(a1 + 160);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v19, *(void *)(a1 + 48), *(std::__shared_weak_count **)(a1 + 56));
  int v20 = a2;
  std::string::size_type v24 = 0;
  BOOL v4 = (char *)operator new(0x20uLL);
  *(void *)BOOL v4 = &unk_1F145DC58;
  *(_OWORD *)(v4 + 8) = v19;
  long long v19 = 0uLL;
  *((_DWORD *)v4 + 6) = a2;
  std::string::size_type v24 = v4;
  uint64_t v5 = v3 + 2;
  if (v3[3]) {
    int v6 = 2;
  }
  else {
    int v6 = *v5 != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "IO_Thread");
  int v7 = AMCP::IO_Core::Play_State_Manager::stop(v3 + 2, a2, (uint64_t *)__p);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  int v8 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v3[4]);
  if (v3[3] || !v8 || *v5)
  {
    int v9 = 1;
    if (v6 != 1 && v7 == 1)
    {
      uint64_t v10 = *v3;
      atomic_fetch_add((atomic_uint *volatile)(*v3 + 704), 0xFFFFFFFF);
      if (!v24) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(char *))(*(void *)v24 + 48))(v24);
      uint64_t v11 = (atomic_uint *)(v10 + 704);
      int v9 = 1;
      atomic_fetch_add(v11, 1u);
    }
  }
  else
  {
    uint64_t v12 = v3[4];
    LODWORD(__p[0]) = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v12);
    BYTE4(__p[0]) = ((unint64_t)caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v12) >> 32) & 1;
    BYTE5(__p[0]) = (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v12) & 0x100000000) == 0;
    LODWORD(__p[1]) = 4;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(v12);
    BYTE4(__p[1]) = v13 & 1;
    caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::store(v12, __p);
    int v9 = 0;
  }
  AMCP::IO_Core::Thread_Control_State::set_state((pthread_cond_t *)v3[4], v7);
  unsigned int v16 = (pthread_t *)v3[6];
  int v15 = (std::thread **)(v3 + 6);
  int v14 = v16;
  if (v16)
  {
    pthread_t v17 = *v14;
    LODWORD(v14) = v17 == pthread_self();
  }
  if (((v9 | v14) & 1) == 0)
  {
    std::thread::join(*v15);
    std::unique_ptr<std::thread>::reset[abi:ne180100](v15, 0);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v23);
  if (*((void *)&v19 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v19 + 1));
  }
  return kdebug_trace();
}

void sub_1BAB0E298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  atomic_fetch_add((atomic_uint *volatile)(v19 + 704), 1u);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a19);
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

void *std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(void *a1, uint64_t a2, std::__shared_weak_count *this)
{
  *a1 = a2;
  if (!this)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v4 = std::__shared_weak_count::lock(this);
  a1[1] = v4;
  if (!v4) {
    goto LABEL_5;
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core13stop_internalENS0_18Play_State_Manager12Play_RequestEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(_DWORD *)(a1 + 24);
  AMCP::IO_Core::IOContext_Core::create_manifest((AMCP::IO_Core::IOContext_Core *)&v8, v1);
  long long v10 = *(_OWORD *)(*(void *)(v1 + 160) + 16);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  int v3 = AMCP::IO_Core::Play_State_Manager::stop((uint64_t *)&v10, v2, (uint64_t *)&__p);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  BOOL v4 = (AMCP::Log::Scope_Registry *)AMCP::IO_Core::IOContext_Core::enqueue_manifest_sync(v1, (uint64_t)&v8, v3, 0, 0);
  if (v4 == 1)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = *(NSObject **)__p;
    if (*(void *)v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v12);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v7;
      *(_WORD *)uint64_t v12 = 2080;
      *(void *)&v12[2] = "IOContext_Core.cpp";
      __int16 v13 = 1024;
      int v14 = 585;
      _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d enqueue_manifest failed during stop when transitioning to prewarming", (uint8_t *)&__p, 0x18u);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1BAB0E4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy_deallocate(void *__p)
{
  int v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F145DC58;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F145DC58;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145DC58;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::stop_internal(AMCP::IO_Core::Play_State_Manager::Play_Request)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145DC58;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t ___ZN10applesauce8dispatch2v19sync_implIRZN4AMCP7IO_Core14IOContext_Core21enqueue_manifest_syncERKNSt3__110shared_ptrINS3_5Graph8ManifestEEENS3_15Transport_StateENS6_8optionalINS4_18Play_State_Manager12Play_RequestEEEyE3__0EEvP16dispatch_queue_sOT_NS6_17integral_constantIbLb1EEE_block_invoke(uint64_t a1, double a2, double a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(*(void *)v3, *(uint64_t **)(v3 + 24), **(_DWORD **)(v3 + 32), **(void **)(v3 + 40), **(void **)(v3 + 48), a2, a3);
  **(_DWORD **)(v3 + 16) = result;
  return result;
}

uint64_t AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(uint64_t a1, uint64_t *a2, unsigned int a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (!*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v48, "com.apple.coreaudio", "AMCP");
    int v36 = *(NSObject **)v48.__r_.__value_.__l.__data_;
    if (v48.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v48.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v37 = pthread_self();
      mach_port_t v38 = pthread_mach_thread_np(v37);
      LODWORD(v48.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v48.__r_.__value_.__r.__words[0]) = v38;
      LOWORD(v48.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v48.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"IOContext_Core.cpp";
      WORD1(v48.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v48.__r_.__value_.__r.__words[2]) = 655;
      __int16 v49 = 2080;
      *(void *)uint64_t v50 = "not (manifest)";
      _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error creating manifest", (uint8_t *)&v48, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v47);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Error creating manifest", (uint64_t)&v45);
    std::logic_error::logic_error(&v46, &v45);
    v46.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v54, &v46);
    __int16 v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    int v59 = -1;
    v54.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v55 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v48, (uint64_t)&v54);
    *(void *)&v50[6] = "Start_Stop_Result AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(const std::shared_pt"
                         "r<Manifest> &, Transport_State, std::optional<Play_State_Manager::Play_Request>, uint64_t)";
    uint64_t v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    v52[0] = 655;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
    uint64_t v42 = &unk_1F148AA90;
    long long v43 = v40;
    uint64_t v44 = v41;
    long long v40 = 0uLL;
    uint64_t v41 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 24);
  if (v12)
  {
    uint64_t v13 = *(void *)(a1 + 16);
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int v14 = std::__shared_weak_count::lock(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v14)
    {
      if (v13)
      {
        if (*(char *)(v13 + 47) < 0) {
          std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v13 + 24), *(void *)(v13 + 32));
        }
        else {
          std::string v48 = *(std::string *)(v13 + 24);
        }
        uint64_t v15 = *(void *)(a1 + 32);
        unsigned int v16 = *(std::__shared_weak_count **)(a1 + 40);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 24))(v15);
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        (*(void (**)(std::logic_error *__return_ptr, uint64_t, std::string *))(*(void *)v17 + 16))(&v54, v17, &v48);
        if (v54.__vftable[22].~logic_error_0)
        {
          uint64_t v18 = &v54.__vftable[21].~logic_error_0;
          uint64_t v19 = *(void *)(*a2 + 72);
          int v20 = *(std::__shared_weak_count **)(*a2 + 80);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::function<void ()>::operator=((void *)(v19 + 136), (uint64_t)v18);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
        }
        if (v54.__vftable[23].what)
        {
          p_what = &v54.__vftable[22].what;
          uint64_t v22 = *(void *)(*a2 + 72);
          uint64_t v23 = *(std::__shared_weak_count **)(*a2 + 80);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::function<void ()(void)>::operator=((void *)(v22 + 168), (uint64_t)p_what);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
        }
        if (v54.__imp_.__imp_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v54.__imp_.__imp_);
        }
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v48.__r_.__value_.__l.__data_);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  AMCP::IO_Core::IOContext_Core::create_execution_context((AMCP::IO_Core::IOContext_Core *)&v48, a1, a6, a7);
  if (a5)
  {
    uint64_t v24 = *(void *)(*a2 + 72);
    uint64_t v25 = *(std::__shared_weak_count **)(*a2 + 80);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = *(void *)(v24 + 80);
    uint64_t v27 = *(std::__shared_weak_count **)(v24 + 88);
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    LOBYTE(v42) = 0;
    v54.__vftable = (std::logic_error_vtbl *)&unk_1F145DD68;
    v54.__imp_.__imp_ = (const char *)&v42;
    __int16 v56 = &v54;
    AMCP::Graph::Timebase_Set::for_each(*(void **)(v26 + 16), (uint64_t)&v54);
    std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100](&v54);
    int v28 = v42;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    if (v28)
    {
      uint64_t v29 = 1;
      char v53 = 1;
      int v30 = 1;
      goto LABEL_40;
    }
    a5 = 0;
  }
  uint64_t v29 = 0;
  int v30 = 2;
LABEL_40:
  unsigned int v31 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*(void *)(a1 + 160) + 32));
  AMCP::IO_Core::IO_Thread::get_state_snapshot((AMCP::IO_Core::Play_State_Manager *)&v54, *(void *)(a1 + 160), a4);
  uint64_t v33 = v54.__vftable;
  if (v54.__vftable != (std::logic_error_vtbl *)v54.__imp_.__imp_)
  {
    *(void *)&long long v39 = a5;
    *((void *)&v39 + 1) = v29;
    uint64_t v34 = AMCP::Graph::Manifest_Queue::enqueue_manifest(*(int **)(a1 + 144), a2, v31, a3, &v54, (long long *)&v48, v30, v32, v39);
    if (!v33) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  uint64_t v34 = 0;
  if (v54.__vftable) {
LABEL_42:
  }
    operator delete(v33);
LABEL_43:
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)v52);
  if (*(void *)&v50[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v50[6]);
  }
  return v34;
}

void sub_1BAB0EC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core31can_run_catchup_mode_on_devicesERKNSt3__110shared_ptrINS_5Graph12Timebase_SetEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  uint64_t v5 = *(char **)(a1 + 8);
  if (*v5)
  {
    char v6 = 1;
  }
  else
  {
    char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 176))(v3);
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *uint64_t v5 = v6;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145DD68;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145DD68;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::can_run_catchup_mode_on_devices(std::shared_ptr<AMCP::Graph::Timebase_Set> const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func()
{
}

void *std::function<void ()(unsigned int)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BAB0F2D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(unsigned int)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1BAB0F5D8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CDB0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CDB0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_10>,void ()(AMCP::Resume_Behavior)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Pause_Behavior)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Pause_Behavior)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Pause_Behavior)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  AMCP::IO_Core::IOContext_Core::pause(v3, v2);

  std::mutex::unlock((std::mutex *)(v3 + 200));
}

void sub_1BAB0F94C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CD20;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CD20;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_9>,void ()(AMCP::Pause_Behavior)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINS_15Transport_StateEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = AMCP::Core::Operation::call_function<AMCP::Transport_State>((void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch;
  return result;
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Transport_State>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
  int v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v12;
      *(_WORD *)int v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    unsigned int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Transport_State"
          ", Argument_Types = <>]";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>(),
        (int v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)int v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    unsigned int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Transport_State"
          ", Argument_Types = <>]";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB0FF04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch(uint64_t result, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  switch((int)result)
  {
    case 0:
      double result = 0;
      *(void *)(a2 + 32) = 0;
      long long v7 = 0uLL;
      goto LABEL_5;
    case 1:
      double result = 0;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch;
      return result;
    case 2:
      double result = 0;
      long long v7 = 0uLL;
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      *(_DWORD *)a3 = *(_DWORD *)a2;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<AMCP::Transport_State>::dispatch;
      *(void *)(a2 + 32) = 0;
LABEL_5:
      *(_OWORD *)a2 = v7;
      *(_OWORD *)(a2 + 16) = v7;
      return result;
    case 3:
      uint64_t v8 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
      double result = 0;
      *a4 = v8;
      return result;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<AMCP::Transport_State>()) {
        return a2;
      }
      else {
        return 0;
      }
    case 5:
      uint64_t v9 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32);
      *(void *)&v14[0] = 0;
      if (v10)
      {
        v10(3, a2, 0, v14);
        uint64_t v10 = *(void (**)(uint64_t, uint64_t, void, _OWORD *))&v14[0];
      }
      if (v10 != (void (*)(uint64_t, uint64_t, void, _OWORD *))v9) {
        goto LABEL_20;
      }
      uint64_t v11 = (void (*)(uint64_t, AMCP::Thing *, void, void))*((void *)a3 + 4);
      long long v16 = 0;
      if (v11)
      {
        v11(3, a3, 0, &v16);
        uint64_t v11 = v16;
      }
      if (v11 == (void (*)(uint64_t, AMCP::Thing *, void, void))v9)
      {
        if (*(void *)(a2 + 32))
        {
          *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
          mach_port_t v12 = (_DWORD *)(*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *))(a2 + 32))(4, a2, 0, v14);
        }
        else
        {
          mach_port_t v12 = 0;
        }
        *(void *)&v14[0] = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
        if (*v12 == *(_DWORD *)(*((uint64_t (**)(uint64_t, AMCP::Thing *, void, _OWORD *))a3 + 4))(4, a3, 0, v14))return 1; {
      }
        }
      else
      {
LABEL_20:
        int v13 = AMCP::Thing::convert_to<AMCP::Transport_State>(a2);
        if (v13 == AMCP::Thing::convert_to<AMCP::Transport_State>((uint64_t)a3)) {
          return 1;
        }
      }
      return 0;
    case 6:
      uint64_t v15 = 0;
      memset(v14, 0, sizeof(v14));
      AMCP::swap((AMCP::Thing *)v14, a3, a3);
      if (v15) {
        v15(0, v14, 0, 0);
      }
      return 0;
    default:
      return result;
  }
}

uint64_t AMCP::Implementation::get_type_marker<AMCP::Transport_State>()
{
  v0 = &unk_1E9F79000;
  {
    v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[356];
}

uint64_t AMCP::Thing::convert_to<AMCP::Transport_State>(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_12;
  }
  uint64_t v2 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
  int v3 = *(void (**)(uint64_t, uint64_t, void, void))(a1 + 32);
  std::runtime_error v19 = 0;
  if (v3)
  {
    v3(3, a1, 0, &v19);
    int v3 = v19;
  }
  if (v3 == (void (*)(uint64_t, uint64_t, void, void))v2)
  {
    uint64_t v18 = v2;
    uint64_t v4 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a1 + 32))(4, a1, 0, &v18);
    if (v4) {
      return *v4;
    }
LABEL_12:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v9 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v9, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = AMCP::Implementation::get_type_marker<AMCP::Transport_State>();
  memset(v16, 0, sizeof(v16));
  uint64_t v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a1 + 32))(6, a1, v16, &v15);
  if (!v17)
  {
    uint64_t v10 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    uint64_t v11 = std::bad_cast::bad_cast(v10);
    __cxa_throw(v11, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v14 = v2;
  char v6 = (unsigned int *)v17(4, v16, 0, &v14);
  if (!v6)
  {
    mach_port_t v12 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    int v13 = std::bad_cast::bad_cast(v12);
    __cxa_throw(v13, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v5 = *v6;
  if (v17) {
    v17(0, v16, 0, 0);
  }
  return v5;
}

void sub_1BAB103F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145CCA0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  int v3 = operator new(0x40uLL);
  *int v3 = &unk_1F145CCA0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB10524(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145CCA0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<AMCP::Transport_State>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145CCA0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<AMCP::Transport_State ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Transport_State ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<AMCP::Transport_State ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<AMCP::Transport_State ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 8);
  if (v1) {
    return caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(v1 + 32));
  }
  else {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CC10;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CC10;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_8>,AMCP::Transport_State ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v3 + 200));
  uint64_t v4 = *(void *)(v3 + 128);
  if (!v4) {
    goto LABEL_25;
  }
  char v6 = *(void **)(v4 + 80);
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 88);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = *(void **)a2;
  uint64_t v8 = *(void **)(a2 + 8);
  if (*(void **)a2 != v8)
  {
    int8x8_t v9 = (int8x8_t)v6[1];
    uint8x8_t v10 = (uint8x8_t)vcnt_s8(v9);
    v10.i16[0] = vaddlv_u8(v10);
    uint64_t v11 = *(void *)&v9 - 1;
    do
    {
      if (v9)
      {
        unint64_t v12 = 0x9DDFEA08EB382D69 * ((8 * *v7 + 8) ^ HIDWORD(*v7));
        unint64_t v13 = 0x9DDFEA08EB382D69 * (HIDWORD(*v7) ^ (v12 >> 47) ^ v12);
        unint64_t v14 = 0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47));
        if (v10.u32[0] > 1uLL)
        {
          unint64_t v15 = v14;
          if (v14 >= *(void *)&v9) {
            unint64_t v15 = v14 % *(void *)&v9;
          }
        }
        else
        {
          unint64_t v15 = v14 & v11;
        }
        long long v16 = *(void **)(*v6 + 8 * v15);
        if (v16)
        {
          while (1)
          {
            long long v16 = (void *)*v16;
            if (!v16) {
              break;
            }
            unint64_t v17 = v16[1];
            if (v14 == v17)
            {
              if (v16[2] == *v7)
              {
                BOOL v20 = v16 == 0;
                if (v5) {
                  goto LABEL_23;
                }
                goto LABEL_24;
              }
            }
            else
            {
              if (v10.u32[0] > 1uLL)
              {
                if (v17 >= *(void *)&v9) {
                  v17 %= *(void *)&v9;
                }
              }
              else
              {
                v17 &= v11;
              }
              if (v17 != v15) {
                break;
              }
            }
          }
        }
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  BOOL v20 = 1;
  if (v5) {
LABEL_23:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_24:
  if (!v20) {
    uint64_t v18 = 1;
  }
  else {
LABEL_25:
  }
    uint64_t v18 = 0;
  std::mutex::unlock((std::mutex *)(v3 + 200));
  return v18;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CB80;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CB80;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_7>,BOOL ()(std::vector<std::shared_ptr<AMCP::Graph::Timebase>> const&)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return 1;
}

void AMCP::IO_Core::IOContext_Core::stop(uint64_t a1, int a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance(v4), BYTE2(AMCP::Logging_Settings::instance(void)::s_instance)))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v5 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      char v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      int v8 = *(_DWORD *)(a1 + 8);
      int8x8_t v9 = *(std::__shared_weak_count **)(a1 + 24);
      if (v9)
      {
        uint64_t v10 = *(void *)(a1 + 16);
        atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v11 = std::__shared_weak_count::lock(v9);
        if (v11) {
          uint64_t v12 = v10;
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v11 = 0;
      }
      unint64_t v13 = &v24;
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        unint64_t v13 = (std::string *)v24.__r_.__value_.__r.__words[0];
      }
      if (a2) {
        unint64_t v14 = "Prewarm";
      }
      else {
        unint64_t v14 = "Play";
      }
      int v15 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*(void *)(a1 + 160) + 32));
      std::string::basic_string[abi:ne180100]<0>(__p, off_1E6235910[v15]);
      if (v23 >= 0) {
        long long v16 = __p;
      }
      else {
        long long v16 = (void **)__p[0];
      }
      unsigned int v17 = atomic_load((unsigned int *)(a1 + 168));
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = v7;
      *(_WORD *)char v26 = 2080;
      *(void *)&v26[2] = "IOContext_Core.cpp";
      __int16 v27 = 1024;
      int v28 = 548;
      __int16 v29 = 1024;
      int v30 = v8;
      __int16 v31 = 2080;
      uint64_t v32 = v13;
      __int16 v33 = 2080;
      uint64_t v34 = v14;
      __int16 v35 = 2080;
      int v36 = v16;
      __int16 v37 = 1024;
      unsigned int v38 = v17;
      _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::stop: request(%s)  current(%s)  pause_count(%d)", buf, 0x42u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      if (v9) {
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  int v18 = atomic_load((unsigned int *)(a1 + 168));
  if (v18 < 1)
  {
    AMCP::IO_Core::IOContext_Core::stop_internal(a1, a2);
  }
  else
  {
    BOOL v20 = *(char **)(a1 + 176);
    std::runtime_error v19 = *(char **)(a1 + 184);
    if (v20 != v19)
    {
      while (*(_DWORD *)v20 != a2)
      {
        v20 += 4;
        if (v20 == v19)
        {
          BOOL v20 = *(char **)(a1 + 184);
          break;
        }
      }
    }
    if (v20 != v19)
    {
      int64_t v21 = v19 - (v20 + 4);
      if (v19 != v20 + 4) {
        memmove(v20, v20 + 4, v19 - (v20 + 4));
      }
      *(void *)(a1 + 184) = &v20[v21];
    }
  }
}

void sub_1BAB10FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CB00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CB00;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_6>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = (std::mutex *)(v1 + 200);
  std::mutex::lock((std::mutex *)(v1 + 200));
  BOOL v3 = AMCP::IO_Core::IOContext_Core::start((AMCP::Log::Scope_Registry *)v1, 1u, 0) != 2;
  std::mutex::unlock(v2);
  return v3;
}

void sub_1BAB1113C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::IO_Core::IOContext_Core::start(AMCP::Log::Scope_Registry *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    a1 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
    if ((unint64_t)a1 <= a3)
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v34 = **(NSObject ***)buf;
      if (*(void *)v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v55);
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        __int16 v35 = pthread_self();
        mach_port_t v36 = pthread_mach_thread_np(v35);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v36;
        *(_WORD *)long long v55 = 2080;
        *(void *)&v55[2] = "IOContext_Core.cpp";
        __int16 v56 = 1024;
        int v57 = 482;
        __int16 v58 = 2080;
        *(void *)int v59 = "not (in_start_host_time == 0 or in_start_host_time < caulk::host_time::current())";
        _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s start host time must be before the current time", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"start host time must be before the current time", (uint64_t)&v46);
      std::logic_error::logic_error(&v47, &v46);
      v47.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v48, &v47);
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      int v52 = -1;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
      *(void *)&v59[6] = "IOContext_Core::IOC_Start_Result AMCP::IO_Core::IOContext_Core::start(Play_State_Manager::Pla"
                           "y_Request, uint64_t)";
      *(void *)uint64_t v60 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      *(_DWORD *)&v60[8] = 482;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
      long long v44 = v41;
      uint64_t v45 = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      __p = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  AMCP::Logging_Settings::instance(a1);
  if (HIBYTE(AMCP::Logging_Settings::instance(void)::s_instance)
    || (AMCP::Logging_Settings::instance((AMCP::Logging_Settings *)v6),
        BYTE2(AMCP::Logging_Settings::instance(void)::s_instance)))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v7 = **(NSObject ***)buf;
    if (*(void *)v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v55);
    }
    BOOL v6 = os_log_type_enabled(v7, OS_LOG_TYPE_INFO);
    if (v6)
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      int v40 = *((_DWORD *)v5 + 2);
      uint64_t v10 = (std::__shared_weak_count *)*((void *)v5 + 3);
      if (v10)
      {
        uint64_t v11 = *((void *)v5 + 2);
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v12 = std::__shared_weak_count::lock(v10);
        if (v12) {
          uint64_t v13 = v11;
        }
        else {
          uint64_t v13 = 0;
        }
      }
      else
      {
        uint64_t v13 = 0;
        uint64_t v12 = 0;
      }
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v14 = &v48;
      }
      else {
        unint64_t v14 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if (a2) {
        int v15 = "Prewarm";
      }
      else {
        int v15 = "Play";
      }
      int v16 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*((void *)v5 + 20) + 32));
      std::string::basic_string[abi:ne180100]<0>(&__p, off_1E6235910[v16]);
      if (v44 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      unsigned int v18 = atomic_load((unsigned int *)v5 + 42);
      *(_DWORD *)buf = 67110914;
      *(_DWORD *)&buf[4] = v9;
      *(_WORD *)long long v55 = 2080;
      *(void *)&v55[2] = "IOContext_Core.cpp";
      __int16 v56 = 1024;
      int v57 = 485;
      __int16 v58 = 1024;
      *(_DWORD *)int v59 = v40;
      *(_WORD *)&v59[4] = 2080;
      *(void *)&v59[6] = v14;
      *(_WORD *)uint64_t v60 = 2080;
      *(void *)&v60[2] = v15;
      *(_WORD *)&v60[10] = 2080;
      v61 = p_p;
      __int16 v62 = 1024;
      unsigned int v63 = v18;
      _os_log_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_INFO, "%6u %32s:%-5d IOContext_Core(%d|\"%s\")::start: request(%s)  current(%s)  pause_count(%d)", buf, 0x42u);
      if (SHIBYTE(v44) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v48.__r_.__value_.__l.__data_);
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      if (v10) {
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  if (atomic_load((unsigned int *)v5 + 42))
  {
    int64_t v21 = (unsigned int *)*((void *)v5 + 23);
    unint64_t v20 = *((void *)v5 + 24);
    if ((unint64_t)v21 >= v20)
    {
      std::string v24 = (unsigned int *)*((void *)v5 + 22);
      uint64_t v25 = v21 - v24;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v20 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v28) {
        unint64_t v29 = v26;
      }
      if (v29)
      {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
        std::string v24 = (unsigned int *)*((void *)v5 + 22);
        int64_t v21 = (unsigned int *)*((void *)v5 + 23);
      }
      else
      {
        uint64_t v30 = 0;
      }
      __int16 v31 = (unsigned int *)(v29 + 4 * v25);
      unint64_t v32 = v29 + 4 * v30;
      *__int16 v31 = a2;
      uint64_t v22 = v31 + 1;
      while (v21 != v24)
      {
        unsigned int v33 = *--v21;
        *--__int16 v31 = v33;
      }
      *((void *)v5 + 22) = v31;
      *((void *)v5 + 23) = v22;
      *((void *)v5 + 24) = v32;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *int64_t v21 = a2;
      uint64_t v22 = v21 + 1;
    }
    *((void *)v5 + 23) = v22;
    return 1;
  }
  else
  {
    if (*((void *)v5 + 22) != *((void *)v5 + 23))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      __int16 v37 = **(NSObject ***)buf;
      if (*(void *)v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v55);
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        unsigned int v38 = pthread_self();
        mach_port_t v39 = pthread_mach_thread_np(v38);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v39;
        *(_WORD *)long long v55 = 2080;
        *(void *)&v55[2] = "IOContext_Core.cpp";
        __int16 v56 = 1024;
        int v57 = 490;
        __int16 v58 = 2080;
        *(void *)int v59 = "not (m_paused_state.empty())";
        _os_log_error_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v53);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v46);
      std::logic_error::logic_error(&v47, &v46);
      v47.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v48, &v47);
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v51 = 0;
      int v52 = -1;
      v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
      v48.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v48);
      *(void *)&v59[6] = "IOContext_Core::IOC_Start_Result AMCP::IO_Core::IOContext_Core::start(Play_State_Manager::Pla"
                           "y_Request, uint64_t)";
      *(void *)uint64_t v60 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      *(_DWORD *)&v60[8] = 490;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
      long long v44 = v41;
      uint64_t v45 = v42;
      long long v41 = 0uLL;
      uint64_t v42 = 0;
      __p = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (AMCP::IO_Core::IOContext_Core::start_internal(v5, a2, a3)) {
      return 0;
    }
    else {
      return 2;
    }
  }
}

void sub_1BAB118AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  if (v41)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    if (!v40) {
      goto LABEL_6;
    }
  }
  else if (!v40)
  {
LABEL_6:
    _Unwind_Resume(exception_object);
  }
  std::__shared_weak_count::__release_weak(v40);
  goto LABEL_6;
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CA80;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CA80;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_5>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  std::mutex::lock((std::mutex *)(v1 + 200));
  int v2 = AMCP::IO_Core::IOContext_Core::start((AMCP::Log::Scope_Registry *)v1, 1u, 0);
  std::mutex::unlock((std::mutex *)(v1 + 200));
  if (v2) {
    return v2 != 2;
  }
  if (AMCP::IO_Core::IO_Thread::wait_for_start(*(AMCP::IO_Core::IO_Thread **)(*(void *)(v1 + 160) + 32))) {
    return 1;
  }
  std::mutex::lock((std::mutex *)(v1 + 200));
  AMCP::IO_Core::IOContext_Core::stop(v1, 1);
  std::mutex::unlock((std::mutex *)(v1 + 200));
  return 0;
}

void sub_1BAB11AF8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145CA00;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145CA00;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_4>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(v1 + 160);
  if (v2 && (uint64_t v3 = *(_opaque_pthread_t ***)(v2 + 48)) != 0)
  {
    uint64_t v4 = *v3;
    pthread_t v5 = pthread_self();
    uint64_t v6 = v1 + 144;
    atomic_fetch_add((atomic_uint *volatile)(*(void *)(v1 + 144) + 704), 1u);
    if (v4 == v5)
    {
      AMCP::IO_Core::IOContext_Core::stop(v1, 0);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = v1 + 144;
    atomic_fetch_add((atomic_uint *volatile)(*(void *)(v1 + 144) + 704), 1u);
  }
  if (std::mutex::try_lock((std::mutex *)(v1 + 200))) {
    std::mutex::unlock((std::mutex *)(v1 + 200));
  }
  std::mutex::lock((std::mutex *)(v1 + 200));
  AMCP::IO_Core::IOContext_Core::stop(v1, 0);
  std::mutex::unlock((std::mutex *)(v1 + 200));
LABEL_9:
  atomic_fetch_add((atomic_uint *volatile)(*(void *)v6 + 704), 0xFFFFFFFF);
  return 1;
}

void sub_1BAB11CAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145C980;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145C980;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_3>,BOOL ()(void)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(AMCP::IO_Core::IOContext_Core **)(a1 + 8);
  unint64_t v3 = AMCP::Thing::convert_to<unsigned long long>(a2);

  return AMCP::IO_Core::IOContext_Core::start_property_helper(v2, v3);
}

BOOL AMCP::IO_Core::IOContext_Core::start_property_helper(AMCP::IO_Core::IOContext_Core *this, unint64_t a2)
{
  uint64_t v4 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  if (caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*((void *)this + 20) + 32)) == 2)
  {
    std::mutex::unlock(v4);
  }
  else
  {
    int v5 = AMCP::IO_Core::IOContext_Core::start(this, 0, a2);
    std::mutex::unlock(v4);
    if (v5) {
      return v5 != 2;
    }
  }
  if (AMCP::IO_Core::IO_Thread::wait_for_start(*(AMCP::IO_Core::IO_Thread **)(*((void *)this + 20) + 32))) {
    return 1;
  }
  std::mutex::lock(v4);
  AMCP::IO_Core::IOContext_Core::stop((uint64_t)this, 0);
  std::mutex::unlock(v4);
  return 0;
}

void sub_1BAB12048(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145C900;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145C900;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_2>,void ()(AMCP::Thing const&)>::~__func()
{
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(unsigned long long)>>::dispatch;
LABEL_6:
      std::__function::__value_func<BOOL ()(unsigned long long)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(unsigned long long)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::operator()(uint64_t a1, unint64_t *a2)
{
  return AMCP::IO_Core::IOContext_Core::start_property_helper(*(AMCP::IO_Core::IOContext_Core **)(a1 + 8), *a2);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145C870;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145C870;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_1>,BOOL ()(unsigned long long)>::~__func()
{
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,void *>>>::operator()[abi:ne180100](char a1, void *__p)
{
  if (a1)
  {
    uint64_t v3 = (std::__shared_weak_count *)__p[5];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }

  operator delete(__p);
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
LABEL_4:
      std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
      uint64_t result = 0;
      *a4 = v9;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v11 = 0;
      memset(v10, 0, sizeof(v10));
      AMCP::swap((AMCP::Thing *)v10, a3, a3);
      if (v11) {
        v11(0, v10, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core11update_coreERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return AMCP::IO_Core::IOContext_Core::start_property_helper(*(AMCP::IO_Core::IOContext_Core **)(a1 + 8), 0);
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145C7F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145C7F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::update_core(AMCP::Core::Operation_Set &)::$_0>,BOOL ()(void)>::~__func()
{
}

void AMCP::IO_Core::IOContext_Core::pause_io_context_within_work_queue(AMCP::IO_Core::IOContext_Core *this)
{
  uint64_t v2 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  AMCP::IO_Core::IOContext_Core::pause((uint64_t)this, 0);

  std::mutex::unlock(v2);
}

void sub_1BAB126E8(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(AMCP::IO_Core::IOContext_Core *this)
{
  uint64_t v1 = this;
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::mutex *)((char *)this + 200);
  std::mutex::lock((std::mutex *)((char *)this + 200));
  uint64_t v3 = *((void *)v1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 96);
    int v5 = *(std::__shared_weak_count **)(v3 + 104);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    int v5 = 0;
    uint64_t v4 = 0;
  }
  AMCP::IO_Core::IOContext_Core::create_manifest((AMCP::IO_Core::IOContext_Core *)&v61, (uint64_t)v1);
  if (v61)
  {
    mach_port_t v7 = *(__n128 **)(v61 + 72);
    int v8 = *(std::__shared_weak_count **)(v61 + 80);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v7)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v43 = **(NSObject ***)buf;
      if ((void)v83) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v83);
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        long long v44 = pthread_self();
        mach_port_t v45 = pthread_mach_thread_np(v44);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&buf[4] = v45;
        LOWORD(v83) = 2080;
        *(void *)((char *)&v83 + 2) = "IOContext_Core.cpp";
        WORD5(v83) = 1024;
        HIDWORD(v83) = 761;
        LOWORD(v84) = 2080;
        *(void *)((char *)&v84 + 2) = "not (inventory)";
        _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v65);
      std::logic_error::logic_error(&v63, &v65);
      v63.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v76, &v63);
      unint64_t v78 = 0;
      v79 = 0;
      uint64_t v80 = 0;
      int v81 = -1;
      v76.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v77 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v76);
      *((void *)&v84 + 1) = "void AMCP::IO_Core::IOContext_Core::cache_min_max_buffer_frame_size(const std::shared_ptr<Manifest> &)";
      v85 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
      int v86 = 761;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v72.__r_.__value_.__l.__data_);
      long long v70 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
      v69 = &unk_1F148AA90;
      v71.n128_u64[0] = v72.__r_.__value_.__r.__words[2];
      memset(&v72, 0, sizeof(v72));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    unint64_t v10 = v7[6].n128_u64[0];
    uint64_t v9 = (std::__shared_weak_count *)v7[6].n128_u64[1];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      if (v10)
      {
        __n128 v11 = v7[6];
LABEL_14:
        unint64_t v12 = v7[5].n128_u64[0];
        *(__n128 *)&v65.__r_.__value_.__l.__data_ = v11;
        unint64_t v13 = v11.n128_u64[1];
        if (v11.n128_u64[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v11.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
        }
        __n128 v56 = v11;
        __int16 v58 = v8;
        int v59 = (std::__shared_weak_count *)v11.n128_u64[1];
        double v14 = (*(double (**)(unint64_t, __n128))(*(void *)v11.n128_u64[0] + 224))(v11.n128_u64[0], v11);
        double v15 = v14;
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v54 = v4;
        long long v55 = v7;
        LODWORD(v69) = 2;
        long long v70 = *(unint64_t *)&v14;
        __n128 v71 = v56;
        unint64_t v16 = v56.n128_u64[0];
        unsigned int v17 = *(uint64_t **)(v12 + 16);
        if (v17)
        {
          int v52 = v1;
          char v53 = v5;
          int v57 = v2;
          unsigned int v18 = 0;
          imp = *(const char **)&v14;
          unint64_t v20 = v59;
          int v21 = 2;
          do
          {
            (*(void (**)(uint64_t))(*(void *)v17[2] + 224))(v17[2]);
            long long v23 = *((_OWORD *)v17 + 1);
            uint64_t v24 = v17[3];
            if (v24) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)buf = 2;
            long long v83 = v22;
            long long v84 = v23;
            AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v76, (AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t *)&v65);
            if (((uint64_t)v76.__vftable & 2) == 0) {
              AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v76);
            }
            BOOL v25 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)&v76, (uint64_t)&v69);
            if (v25) {
              int v21 = (int)v76.__vftable;
            }
            LODWORD(v69) = v21;
            if (v25)
            {
              imp = v76.__imp_.__imp_;
              unsigned int v18 = v77;
            }
            *(void *)&long long v70 = imp;
            *((void *)&v70 + 1) = v18;
            unint64_t v26 = v79;
            if (v25)
            {
              unint64_t v16 = v78;
              uint64_t v27 = v79;
            }
            else
            {
              uint64_t v27 = v20;
            }
            if (v27) {
              atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v71.n128_u64[0] = v16;
            v71.n128_u64[1] = (unint64_t)v27;
            if (v20) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            }
            if (v26) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v26);
            }
            if (*((void *)&v84 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v84 + 1));
            }
            unsigned int v17 = (uint64_t *)*v17;
            unint64_t v20 = v27;
          }
          while (v17);
          double v15 = *(double *)&imp;
          uint64_t v2 = v57;
          uint64_t v1 = v52;
          int v5 = v53;
          BOOL v28 = v59;
        }
        else
        {
          LOBYTE(v21) = 2;
          BOOL v28 = v59;
          uint64_t v27 = v59;
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        if (v27) {
          atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unint64_t v30 = v55[6].n128_u64[0];
        unint64_t v29 = (std::__shared_weak_count *)v55[6].n128_u64[1];
        if (v29)
        {
          atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        if (v27) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
        }
        if (v16 != v30)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v29);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v49 = **(NSObject ***)buf;
          if ((void)v83) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v83);
          }
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            uint64_t v50 = pthread_self();
            mach_port_t v51 = pthread_mach_thread_np(v50);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&buf[4] = v51;
            LOWORD(v83) = 2080;
            *(void *)((char *)&v83 + 2) = "IOContext_Core.cpp";
            WORD5(v83) = 1024;
            HIDWORD(v83) = 764;
            LOWORD(v84) = 2080;
            *(void *)((char *)&v84 + 2) = "not (max_timebase_size.get_clock() == inventory->get_master_timebase())";
            _os_log_error_impl(&dword_1BAA78000, v49, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v68);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v72);
          std::logic_error::logic_error(&v67, &v72);
          v67.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v76, &v67);
          unint64_t v78 = 0;
          v79 = 0;
          uint64_t v80 = 0;
          int v81 = -1;
          v76.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          v77 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v76);
          *((void *)&v84 + 1) = "void AMCP::IO_Core::IOContext_Core::cache_min_max_buffer_frame_size(const std::shared_"
                                  "ptr<Manifest> &)";
          v85 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
          int v86 = 764;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v63);
          v65.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          *(std::logic_error *)&v65.__r_.__value_.__r.__words[1] = v63;
          uint64_t v66 = v64;
          v63.__vftable = 0;
          v63.__imp_.__imp_ = 0;
          uint64_t v64 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if ((v21 & 2) == 0)
        {
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v69);
          double v15 = *(double *)&v70;
        }
        uint64_t v31 = vcvtmd_s64_f64(v15);
        if (v31 <= 4096)
        {
          uint64_t v32 = v54;
          if ((v69 & 2) == 0)
          {
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v69);
            LODWORD(v31) = vcvtmd_s64_f64(*(double *)&v70);
          }
        }
        else
        {
          LODWORD(v31) = 4096;
          uint64_t v32 = v54;
        }
        double actual_sample_rate = AMCP::IO_Core::IOContext_Core::get_actual_sample_rate(v1);
        unsigned int v34 = vcvtpd_s64_f64(actual_sample_rate * 0.0003);
        if (actual_sample_rate == 0.0) {
          unsigned int v34 = 16;
        }
        *((_DWORD *)v1 + 152) = v34;
        *((_DWORD *)v1 + 153) = v31;
        double v35 = (double)v34;
        double v36 = round(*((double *)v1 + 74));
        if (v36 < (double)v34 || (double v35 = (double)v31, v36 > (double)v31)) {
          *((double *)v1 + 74) = v35;
        }
        if (v71.n128_u64[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71.n128_u64[1]);
        }
        if (v58) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v58);
        }
        int v37 = caulk::concurrent::atomic_value<AMCP::IO_Core::Thread_Control_State::State,2,6>::load(*(void *)(*((void *)v1 + 20) + 32));
        if (v37)
        {
          if (!v32) {
            goto LABEL_76;
          }
          uint64_t v38 = *(void *)(v61 + 72);
          mach_port_t v39 = *(std::__shared_weak_count **)(v61 + 80);
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v41 = *(void *)(v38 + 96);
          int v40 = *(std::__shared_weak_count **)(v38 + 104);
          if (v40)
          {
            atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
            std::__shared_weak_count::__release_shared[abi:ne180100](v40);
          }
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          if (v32 == v41)
          {
LABEL_76:
            std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v60, *((void *)v1 + 6), *((std::__shared_weak_count **)v1 + 7));
            long long v74 = v60;
            long long v60 = 0uLL;
            v73 = &unk_1F145DCD8;
            v75 = &v73;
            std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(buf, *((void *)v1 + 6), *((std::__shared_weak_count **)v1 + 7));
            *((void *)&v83 + 1) = v61;
            *(void *)&long long v84 = v62;
            if (v62) {
              atomic_fetch_add_explicit(&v62->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            DWORD2(v84) = v37;
            std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::__value_func[abi:ne180100]((uint64_t)&v85, (uint64_t)&v73);
            unsigned __int8 v42 = atomic_load((unsigned __int8 *)v1 + 304);
            if (v42) {
              atomic_store(1u, (unsigned __int8 *)v1 + 305);
            }
            operator new();
          }
          AMCP::IO_Core::IOContext_Core::pause((uint64_t)v1, 0);
          AMCP::IO_Core::IOContext_Core::resume((uint64_t)v1, 0);
        }
        goto LABEL_81;
      }
    }
    else if (v10)
    {
      __n128 v11 = (__n128)v7[6].n128_u64[0];
      goto LABEL_14;
    }
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string v46 = **(NSObject ***)buf;
    if ((void)v83) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v83);
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      std::logic_error v47 = pthread_self();
      mach_port_t v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&buf[4] = v48;
      LOWORD(v83) = 2080;
      *(void *)((char *)&v83 + 2) = "IOContext_Core.cpp";
      WORD5(v83) = 1024;
      HIDWORD(v83) = 762;
      LOWORD(v84) = 2080;
      *(void *)((char *)&v84 + 2) = "not (inventory->get_master_timebase())";
      _os_log_error_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v65);
    std::logic_error::logic_error(&v63, &v65);
    v63.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v76, &v63);
    unint64_t v78 = 0;
    v79 = 0;
    uint64_t v80 = 0;
    int v81 = -1;
    v76.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v77 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v76);
    *((void *)&v84 + 1) = "void AMCP::IO_Core::IOContext_Core::cache_min_max_buffer_frame_size(const std::shared_ptr<Manifest> &)";
    v85 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/IOContext_Core.cpp";
    int v86 = 762;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v72.__r_.__value_.__l.__data_);
    long long v70 = *(_OWORD *)&v72.__r_.__value_.__l.__data_;
    v69 = &unk_1F148AA90;
    v71.n128_u64[0] = v72.__r_.__value_.__r.__words[2];
    memset(&v72, 0, sizeof(v72));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
LABEL_81:
  if (v62) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v62);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::mutex::unlock(v2);
}

void sub_1BAB132EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,uint64_t a27,uint64_t a28,char a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,char a47)
{
  if (a2)
  {
    if (a39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a39);
    }
    if (a15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a15);
    }
    if (a20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a20);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
    mach_port_t v51 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    uint64_t v52 = *(void *)(v47 + 128);
    if (v52) {
      mach_port_t v51 = (AMCP::Log::Scope_Registry *)AMCP::Graph::Manifest_Inventory::report_thread_error(*(void *)(v52 + 192));
    }
    AMCP::Log::Scope_Registry::get(v51);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v49 - 256), "com.apple.coreaudio", "AMCP");
    char v53 = *(std::__shared_weak_count **)(v49 - 248);
    uint64_t v54 = **(NSObject ***)(v49 - 256);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      long long v55 = pthread_self();
      mach_port_t v56 = pthread_mach_thread_np(v55);
      *(_DWORD *)(v49 - 256) = 67109634;
      *(_DWORD *)(v49 - 252) = v56;
      *(_WORD *)(v49 - 248) = 2080;
      *(_WORD *)(v49 - 238) = 1024;
      *(_DWORD *)(v49 - 236) = 751;
      _os_log_error_impl(&dword_1BAA78000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Exception thrown during Node::maybe_update_running_iocontext()", (uint8_t *)(v49 - 256), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAB12C54);
  }
  _Unwind_Resume(a1);
}

void sub_1BAB13668()
{
  __cxa_end_catch();
  std::mutex::unlock(v0);
  JUMPOUT(0x1BAB13328);
}

void *std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::~__value_func[abi:ne180100](v2 + 5);
    uint64_t v3 = (std::__shared_weak_count *)v2[3];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[1];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x1C1859840](v2, 0x1020C40DADCD8D6);
  }
  return a1;
}

void *applesauce::dispatch::v1::async<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0 &>(dispatch_queue_s *,AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0 &)::{lambda(void *)#1}::__invoke(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = a1;
  if (AMCP::IO_Core::IOContext_Core::enqueue_manifest_internal(*(void *)a1, (uint64_t *)(a1 + 16), *(_DWORD *)(a1 + 32), 0, 0, a2, a3) == 1)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
    uint64_t v8 = *(void *)(a1 + 16);
    uint64_t v9 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *(void *)(a1 + 64);
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  return std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100](&v7);
}

void sub_1BAB138C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  std::unique_ptr<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0,std::default_delete<AMCP::IO_Core::IOContext_Core::enqueue_manifest_async(std::shared_ptr<AMCP::Graph::Manifest> const&,AMCP::Transport_State,std::function<void ()(std::shared_ptr<AMCP::Graph::Manifest>)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core14IOContext_Core30maybe_update_running_iocontextEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  *a2 = 0;
  a2[1] = 0;
  AMCP::IO_Core::IOContext_Core::pause(*(void *)(a1 + 8), 0);
  uint64_t v4 = *(void *)(v3 + 72);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 80);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::Graph::Manifest_Inventory::report_thread_error(*(void *)(v4 + 192));
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void sub_1BAB139B8(_Unwind_Exception *exception_object)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F145DCD8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F145DCD8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::~__func(void *a1)
{
  *a1 = &unk_1F145DCD8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0,std::allocator<AMCP::IO_Core::IOContext_Core::maybe_update_running_iocontext(void)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Manifest>)>::~__func(void *a1)
{
  *a1 = &unk_1F145DCD8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::IO_Core::IOContext_Core::~IOContext_Core(AMCP::IO_Core::IOContext_Core *this)
{
  AMCP::IO_Core::IOContext_Core::~IOContext_Core(this);

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Utility::Dispatch_Queue *v2;
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t vars8;

  uint64_t v2 = (AMCP::IO_Core::IOContext_Core *)((char *)this + 272);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::IO_Core::IOContext_Core *)((char *)this + 272));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v2);
  std::mutex::~mutex((std::mutex *)((char *)this + 200));
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  std::unique_ptr<AMCP::IO_Core::IO_Thread>::reset[abi:ne180100]((uint64_t *)this + 20);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 19);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((AMCP::IO_Core::IOContext_Core *)((char *)this + 64));
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }

  AMCP::IO_Core::Node::~Node(this);
}

uint64_t *std::unique_ptr<AMCP::IO_Core::IO_Thread>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    if (*(void *)(v1 + 48))
    {
      AMCP::IO_Core::Thread_Control_State::set_state(*(pthread_cond_t **)(v1 + 32), 0);
      std::thread::join(*(std::thread **)(v1 + 48));
    }
    std::unique_ptr<std::thread>::reset[abi:ne180100]((std::thread **)(v1 + 48), 0);
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    JUMPOUT(0x1C1859840);
  }
  return result;
}

NSObject **AMCP::Utility::Dispatch_Queue::operator=(NSObject **a1, dispatch_object_t object)
{
  if (object) {
    dispatch_retain(object);
  }
  uint64_t v4 = *a1;
  *a1 = object;
  if (v4) {
    dispatch_release(v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Queue>::__on_zero_shared(uint64_t a1)
{
  AMCP::Graph::Manifest_Queue::flush((AMCP::Graph::Manifest_Queue *)(a1 + 32));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 640));
  std::__function::__value_func<void ()(unsigned long long)>::~__value_func[abi:ne180100]((void *)(a1 + 608));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 600);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__optional_destruct_base<AMCP::Graph::Manifest_Execution_Context,false>::~__optional_destruct_base[abi:ne180100](a1 + 464);
  caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed((caulk::mach::os_workgroup_interval_managed *)(a1 + 392));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 376);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 296));
  std::mutex::~mutex((std::mutex *)(a1 + 232));
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a1 + 224), 0);
  std::mutex::lock((std::mutex *)(a1 + 144));
  uint64_t v4 = *(void **)(a1 + 112);
  if (v4) {
    goto LABEL_10;
  }
  unint64_t v5 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 48), 0, memory_order_acquire);
  if (v5)
  {
    unint64_t v6 = 0;
    do
    {
      uint64_t v4 = (void *)v5;
      uint64_t v7 = (unint64_t *)(v5 + 200);
      unint64_t v5 = atomic_load((unint64_t *)(v5 + 200));
      atomic_store(v6, v7);
      unint64_t v6 = (unint64_t)v4;
    }
    while (v5);
    while (1)
    {
      *(void *)(a1 + 112) = v4;
      do
      {
LABEL_10:
        unint64_t v8 = atomic_load(v4 + 25);
        *(void *)(a1 + 112) = v8;
        uint64_t v9 = AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::~Message(v4);
        MEMORY[0x1C1859840](v9, 0x10A0C4075219A73);
        uint64_t v4 = *(void **)(a1 + 112);
      }
      while (v4);
      unint64_t v10 = atomic_exchange_explicit((atomic_ullong *volatile)(a1 + 48), 0, memory_order_acquire);
      if (!v10) {
        break;
      }
      uint64_t v4 = 0;
      do
      {
        unint64_t v11 = (unint64_t)v4;
        uint64_t v4 = (void *)v10;
        unint64_t v12 = (unint64_t *)(v10 + 200);
        unint64_t v10 = atomic_load((unint64_t *)(v10 + 200));
        atomic_store(v11, v12);
      }
      while (v10);
    }
  }
  while (1)
  {
    unint64_t v13 = (void *)caulk::concurrent::stack<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,caulk::concurrent::intrusive_single_link_member<AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message,&AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::m_next_free_message>>::pop();
    if (!v13) {
      break;
    }
    double v14 = AMCP::Utility::Realtime_Message_Queue<AMCP::Graph::Manifest_Queue::Incoming_Payload>::Message::~Message(v13);
    MEMORY[0x1C1859840](v14, 0x10A0C4075219A73);
  }
  std::mutex::unlock((std::mutex *)(a1 + 144));

  std::mutex::~mutex((std::mutex *)(a1 + 144));
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C7A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Graph::Manifest_Queue>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145C7A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'HALS_IOUAStream::~HALS_IOUAStream(HALS_IOUAStream *this)
{
  HALS_IOUAStream::~HALS_IOUAStream((HALS_IOUAStream *)((char *)this - 64));

  JUMPOUT(0x1C1859840);
}

{
  HALS_IOUAStream::~HALS_IOUAStream((HALS_IOUAStream *)((char *)this - 64));
}

void HALS_IOUAStream::~HALS_IOUAStream(HALS_IOUAStream *this)
{
  *(void *)this = &unk_1F145DDE8;
  uint64_t v2 = (HALS_IOUAStream *)((char *)this + 64);
  *((void *)this + 8) = &unk_1F145DEE0;
  HALS_IOUAStream::unmap_memory(this);
  HALB_FormatList::~HALB_FormatList((HALS_IOUAStream *)((char *)this + 120));
  HALS_IOUAObject::~HALS_IOUAObject(v2, v3);

  HALS_Object::~HALS_Object(this);
}

{
  uint64_t vars8;

  HALS_IOUAStream::~HALS_IOUAStream(this);

  JUMPOUT(0x1C1859840);
}

void HALS_IOUAStream::unmap_memory(HALS_IOUAStream *this)
{
  uint64_t v2 = (void *)((char *)this + 180);
  unsigned int v1 = *((_DWORD *)this + 45);
  if (v1)
  {
    uint64_t v3 = *((void *)this + 23);
    if (v3)
    {
      uint64_t v4 = *((void *)this + 9);
      uint64_t v5 = *(void *)(v4 + 792);
      unint64_t v6 = *(std::__shared_weak_count **)(v4 + 800);
      if (v6)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        unsigned int v1 = *((_DWORD *)this + 45);
        uint64_t v3 = *((void *)this + 23);
      }
      HALS_IOUAUCDriver::unmap_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v5 + 4), v1, v3);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      void *v2 = 0;
      v2[1] = 0;
    }
  }
}

void sub_1BAB14084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, long long a10)
{
  if (a2)
  {
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    unint64_t v13 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v13);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    double v14 = *a9;
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      double v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v16;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "HALS_IOUAStream.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 75;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception unmapping io buffers", (uint8_t *)&a9, 0x18u);
    }
    void *v11 = 0;
    v11[1] = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAB14054);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAStream::GetIOBufferByteSize(HALS_IOUAStream *this)
{
  return *((unsigned int *)this + 48);
}

uint64_t HALS_IOUAStream::GetIOBuffer(HALS_IOUAStream *this)
{
  return *((void *)this + 23);
}

uint64_t HALS_Stream::IsMetaStream(HALS_Stream *this)
{
  return 0;
}

uint64_t HALS_Stream::GetStartingChannel(HALS_Stream *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F627363686ELL;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_Object::WantsOwnedObjectPropertiesChanged(HALS_Object *this)
{
  return 0;
}

void HALS_IOUAStream::SetPropertyData(HALS_IOUAStream *this, uint64_t a2, const AudioObjectPropertyAddress *a3, unsigned int a4, const AudioStreamBasicDescription *a5, unsigned int a6, CFTypeRef *a7, HALS_Client *a8)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_IOUAStream *, uint64_t, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 96))(this, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  double v15 = (int *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  if (!v15)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 493;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAStream::SetPropertyData: owning device is missing", (uint8_t *)&buf, 0x12u);
    }
    long long v43 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v43 = off_1F148A5D8;
    v43[2] = 560947818;
  }
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (a3->mSelector == 1885762592)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 537;
      long long v44 = MEMORY[0x1E4F14500];
      mach_port_t v45 = "%25s:%-5d  HALS_IOUAStream::SetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
      goto LABEL_54;
    }
    *(void *)&buf.mSampleRate = 40;
    uint64_t v31 = *((void *)this + 9);
    uint64_t v32 = *(void *)(v31 + 792);
    unsigned int v33 = *(std::__shared_weak_count **)(v31 + 800);
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), a3, *((_DWORD *)this + 20), 0, 0, outputStruct, (unint64_t *)&buf);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    HALB_FormatList::BestMatchForPhysicalFormat((HALS_IOUAStream *)((char *)this + 120), a5, &v51, v34, outputStruct[0]);
    if (a8 && (v51.mFormatID != 1819304813 || (v51.mFormatFlags & 0x40) != 0)) {
      HALS_Client::SetNonMixableFormat(a8, v15[4]);
    }
    uint64_t v35 = *((void *)this + 9);
    double v36 = *(HALS_IOUAUCDriver **)(v35 + 792);
    unint64_t v30 = *(std::__shared_weak_count **)(v35 + 800);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::SetPropertyData(v36, a3, *((_DWORD *)this + 20), 0, 0, &v51, 0x28uLL);
LABEL_39:
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    goto LABEL_43;
  }
  if (mSelector == 1936092532)
  {
    if (a4 <= 0x27)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_55;
      }
      LODWORD(buf.mSampleRate) = 136315394;
      *(void *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
      LOWORD(buf.mFormatFlags) = 1024;
      *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 514;
      long long v44 = MEMORY[0x1E4F14500];
      mach_port_t v45 = "%25s:%-5d  HALS_IOUAStream::SetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
      goto LABEL_54;
    }
    *(void *)&v48.AudioObjectPropertySelector mSelector = *(void *)&a3->mSelector;
    AudioObjectPropertyElement mElement = a3->mElement;
    v48.mScope = 1885762592;
    v48.AudioObjectPropertyElement mElement = mElement;
    unint64_t v47 = 40;
    uint64_t v23 = *((void *)this + 9);
    uint64_t v24 = *(void *)(v23 + 792);
    BOOL v25 = *(std::__shared_weak_count **)(v23 + 800);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v24 + 4), &v48, *((_DWORD *)this + 20), 0, 0, outputStruct, &v47);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    long long v27 = *(_OWORD *)&a5->mBytesPerPacket;
    *(_OWORD *)&buf.mSampleRate = *(_OWORD *)&a5->mSampleRate;
    *(_OWORD *)&buf.mBytesPerPacket = v27;
    *(void *)&buf.mBitsPerChannel = *(void *)&a5->mBitsPerChannel;
    if (buf.mFormatID == 1819304813)
    {
      buf.mBitsPerChannel = 0;
      *(void *)&buf.mFramesPerPacket = 0;
      *(void *)&buf.mFormatFlags = 0;
    }
    HALB_FormatList::BestMatchForPhysicalFormat((HALS_IOUAStream *)((char *)this + 120), &buf, &v51, v26, outputStruct[0]);
    if (a8 && (v51.mFormatID != 1819304813 || (v51.mFormatFlags & 0x40) != 0)) {
      HALS_Client::SetNonMixableFormat(a8, v15[4]);
    }
    uint64_t v28 = *((void *)this + 9);
    unint64_t v29 = *(HALS_IOUAUCDriver **)(v28 + 792);
    unint64_t v30 = *(std::__shared_weak_count **)(v28 + 800);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::SetPropertyData(v29, &v48, *((_DWORD *)this + 20), 0, 0, &v51, 0x28uLL);
    goto LABEL_39;
  }
  if (mSelector == 1935762292)
  {
    if (a4 > 3)
    {
      if (!*((_DWORD *)this + 14))
      {
        uint64_t v17 = *((void *)this + 9);
        unsigned int v18 = *(HALS_IOUAUCDriver **)(v17 + 792);
        std::runtime_error v19 = *(std::__shared_weak_count **)(v17 + 800);
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HALS_IOUAUCDriver::SetPropertyData(v18, a3, *((_DWORD *)this + 20), 0, 0, a5, a4);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
      }
      v49[0] = MEMORY[0x1E4F143A8];
      v49[1] = 0x40000000;
      v49[2] = ___ZN15HALS_IOUAStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
      v49[3] = &__block_descriptor_tmp_25;
      v49[4] = this;
      v49[5] = a5;
      unint64_t v20 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v20, (uint64_t)v49);
      goto LABEL_43;
    }
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
LABEL_55:
      std::string v46 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v46 = off_1F148A5D8;
      v46[2] = 561211770;
    }
    LODWORD(buf.mSampleRate) = 136315394;
    *(void *)((char *)&buf.mSampleRate + 4) = "HALS_IOUAStream.cpp";
    LOWORD(buf.mFormatFlags) = 1024;
    *(AudioFormatFlags *)((char *)&buf.mFormatFlags + 2) = 501;
    long long v44 = MEMORY[0x1E4F14500];
    mach_port_t v45 = "%25s:%-5d  HALS_IOUAStream::SetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
LABEL_54:
    _os_log_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, v45, (uint8_t *)&buf, 0x12u);
    goto LABEL_55;
  }
  if (HALS_Stream::HasProperty(this, a2, a3, a8)) {
    HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v37, (uint64_t)v38, v39, (uint64_t)v40, (uint64_t)a8);
  }
  HALS_IOUAObject::SetPropertyData((HALS_IOUAStream *)((char *)this + 64), &a3->mSelector, (const AudioObjectPropertyAddress *)a5, a7, v38, v39, v40, v41);
LABEL_43:
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v15, v21);
}

void sub_1BAB1488C(_Unwind_Exception *a1, HALS_Object *a2)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN15HALS_IOUAStream15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 112) = **(_DWORD **)(result + 40) != 0;
  return result;
}

void HALS_IOUAStream::GetPropertyData(HALS_IOUAStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, AudioObjectPropertyAddress *a5, AMCP::Log::Scope_Registry **a6, uint64_t a7, void *a8, HALS_Client *a9)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  if (a9) {
    BOOL v16 = *((unsigned char *)a9 + 258) == 0;
  }
  else {
    BOOL v16 = 1;
  }
  uint64_t v119 = 0;
  v120 = (AudioStreamBasicDescription *)&v119;
  uint64_t v121 = 0x5002000000;
  v122 = __Block_byref_object_copy__377;
  v123 = __Block_byref_object_dispose__378;
  uint64_t v17 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 12));
  v94 = (HALS_ObjectMap *)v17;
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v128 = 136315394;
      *(void *)&v128[4] = "HALS_IOUAStream.cpp";
      *(_WORD *)&v128[12] = 1024;
      *(_DWORD *)&v128[14] = 211;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Stream::GetPropertyData: owning device is missing", v128, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, HALS_Client *))(*(void *)v17 + 696))(v17, a9);
  v92 = v19;
  unint64_t v21 = v18;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935762291)
  {
    if (mSelector <= 1936092512)
    {
      if (mSelector > 1935960433)
      {
        if (mSelector != 1935960434)
        {
          if (mSelector != 1936092451)
          {
            if (mSelector == 1936092479)
            {
              if (a4 > 0x27)
              {
                a5->signed int mSelector = 40;
                *(void *)v128 = 0;
                *(void *)&v128[8] = v128;
                *(void *)&v128[16] = 0x2000000000;
                LOBYTE(v129) = 0;
                v100[0] = MEMORY[0x1E4F143A8];
                v100[1] = 0x40000000;
                v100[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17;
                v100[3] = &unk_1E62308E0;
                v100[6] = v18;
                v100[7] = v19;
                v100[4] = v128;
                v100[5] = this;
                v100[8] = a6;
                uint64_t v23 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
                HALB_CommandGate::ExecuteCommand(v23, (uint64_t)v100);
                if (!*(unsigned char *)(*(void *)&v128[8] + 24))
                {
                  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                    v125 = "HALS_IOUAStream.cpp";
                    __int16 v126 = 1024;
                    int v127 = 421;
                    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: kAudioDevicePropertyStreamFormatSupported: the format is not supported", buf, 0x12u);
                  }
                  uint64_t v24 = __cxa_allocate_exception(0x10uLL);
                  *(void *)uint64_t v24 = off_1F148A5D8;
                  v24[2] = 560226676;
                }
                goto LABEL_145;
              }
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)v128 = 136315394;
                *(void *)&v128[4] = "HALS_IOUAStream.cpp";
                *(_WORD *)&v128[12] = 1024;
                *(_DWORD *)&v128[14] = 404;
                v88 = MEMORY[0x1E4F14500];
                v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStrea"
                      "mFormatSupported";
                goto LABEL_189;
              }
              goto LABEL_190;
            }
            goto LABEL_146;
          }
          *(void *)v128 = 0;
          *(void *)&v128[8] = v128;
          *(void *)&v128[16] = 0x2000000000;
          uint64_t v129 = 0;
          v101[0] = MEMORY[0x1E4F143A8];
          v101[1] = 0x40000000;
          v101[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3;
          v101[3] = &unk_1E62308B8;
          BOOL v103 = v16;
          int v102 = a4;
          v101[4] = v128;
          v101[5] = this;
          v101[6] = a6;
          v69 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v69, (uint64_t)v101);
          uint64_t v40 = *(void *)(*(void *)&v128[8] + 24);
          if ((_BYTE)v92) {
            BOOL v70 = v40 == 0;
          }
          else {
            BOOL v70 = 1;
          }
          if (!v70)
          {
            uint64_t v71 = *(void *)(*(void *)&v128[8] + 24);
            do
            {
              *a6 = (AMCP::Log::Scope_Registry *)v21;
              a6 += 5;
              --v71;
            }
            while (v71);
          }
          goto LABEL_117;
        }
        if (a4 <= 3)
        {
          if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
            goto LABEL_190;
          }
          *(_DWORD *)v128 = 136315394;
          *(void *)&v128[4] = "HALS_IOUAStream.cpp";
          *(_WORD *)&v128[12] = 1024;
          *(_DWORD *)&v128[14] = 377;
          v88 = MEMORY[0x1E4F14500];
          v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyDirection";
          goto LABEL_189;
        }
        v107[0] = MEMORY[0x1E4F143A8];
        v107[1] = 0x40000000;
        v107[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13;
        v107[3] = &__block_descriptor_tmp_14_391;
        v107[4] = this;
        v107[5] = a6;
        v73 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v73, (uint64_t)v107);
        goto LABEL_156;
      }
      if (mSelector != 1935762292)
      {
        if (mSelector == 1935894638)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_190;
            }
            *(_DWORD *)v128 = 136315394;
            *(void *)&v128[4] = "HALS_IOUAStream.cpp";
            *(_WORD *)&v128[12] = 1024;
            *(_DWORD *)&v128[14] = 249;
            v88 = MEMORY[0x1E4F14500];
            v89 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyStartingChannel";
            goto LABEL_189;
          }
          if (*((_DWORD *)this + 14) == 1)
          {
            int NeighborStartingChannel = HALS_Device::GetNeighborStartingChannel(this, v94, v20);
          }
          else
          {
            *(void *)v128 = 4;
            uint64_t v84 = *((void *)this + 9);
            uint64_t v85 = *(void *)(v84 + 792);
            int v86 = *(std::__shared_weak_count **)(v84 + 800);
            if (v86) {
              atomic_fetch_add_explicit(&v86->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_DWORD *)AudioStreamBasicDescription buf = 0;
            HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v85 + 4), (const AudioObjectPropertyAddress *)"nhcsbolg", *((_DWORD *)this + 20), 0, 0, buf, (unint64_t *)v128);
            if (v86) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            }
            if (*(_DWORD *)buf <= 1u) {
              int NeighborStartingChannel = 1;
            }
            else {
              int NeighborStartingChannel = *(_DWORD *)buf;
            }
          }
          *(_DWORD *)a6 = NeighborStartingChannel;
          goto LABEL_156;
        }
LABEL_146:
        if (HALS_Stream::HasProperty(this, a2, a3, a9)) {
          HALS_Stream::GetPropertyData(this, a2, a3, a4, &a5->mSelector, a6, a7, a8, a9);
        }
        else {
          HALS_IOUAObject::GetPropertyData((HALS_IOUAStream *)((char *)this + 64), &a3->mSelector, a5, a6, (unsigned int *)a8, v81, v82, v83, v91);
        }
        goto LABEL_158;
      }
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_190;
        }
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 368;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsActive";
        goto LABEL_189;
      }
      v108[0] = MEMORY[0x1E4F143A8];
      v108[1] = 0x40000000;
      v108[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11;
      v108[3] = &__block_descriptor_tmp_12;
      v108[4] = this;
      v108[5] = a6;
      std::logic_error v76 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v76, (uint64_t)v108);
LABEL_156:
      unsigned int v58 = 4;
LABEL_157:
      a5->signed int mSelector = v58;
      goto LABEL_158;
    }
    if (mSelector > 1936092531)
    {
      if (mSelector != 1936092532)
      {
        if (mSelector == 1952542835)
        {
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_190;
            }
            *(_DWORD *)v128 = 136315394;
            *(void *)&v128[4] = "HALS_IOUAStream.cpp";
            *(_WORD *)&v128[12] = 1024;
            *(_DWORD *)&v128[14] = 469;
            v88 = MEMORY[0x1E4F14500];
            v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyIsReferenceStream";
            goto LABEL_189;
          }
          int v34 = *((_DWORD *)this + 14) == 1;
        }
        else
        {
          if (mSelector != 1952805485) {
            goto LABEL_146;
          }
          if (a4 <= 3)
          {
            if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
              goto LABEL_190;
            }
            *(_DWORD *)v128 = 136315394;
            *(void *)&v128[4] = "HALS_IOUAStream.cpp";
            *(_WORD *)&v128[12] = 1024;
            *(_DWORD *)&v128[14] = 241;
            v88 = MEMORY[0x1E4F14500];
            v89 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyTerminalType";
            goto LABEL_189;
          }
          *(void *)v128 = 4;
          uint64_t v31 = *((void *)this + 9);
          uint64_t v32 = *(void *)(v31 + 792);
          unsigned int v33 = *(std::__shared_weak_count **)(v31 + 800);
          if (v33) {
            atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(_DWORD *)AudioStreamBasicDescription buf = 0;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v32 + 4), (const AudioObjectPropertyAddress *)"mretbolg", *((_DWORD *)this + 20), 0, 0, buf, (unint64_t *)v128);
          if (v33) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v33);
          }
          int v34 = *(_DWORD *)buf;
        }
        *(_DWORD *)a6 = v34;
        goto LABEL_156;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_190;
        }
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 284;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyVirtualFormat";
        goto LABEL_189;
      }
      HALS_IOUAStream::get_current_format(this, (AudioStreamBasicDescription *)a6);
      if (*((_DWORD *)a6 + 2) == 1819304813 && (*((unsigned char *)a6 + 12) & 0x40) == 0)
      {
        if (v16) {
          int v74 = 9;
        }
        else {
          int v74 = 11;
        }
        int v75 = 4 * *((_DWORD *)a6 + 7);
        *((_DWORD *)a6 + 3) = v74;
        *((_DWORD *)a6 + 4) = v75;
        *((_DWORD *)a6 + 5) = 1;
        *((_DWORD *)a6 + 6) = v75;
        *((_DWORD *)a6 + 8) = 32;
      }
LABEL_132:
      if ((_BYTE)v92) {
        *a6 = (AMCP::Log::Scope_Registry *)v21;
      }
      unsigned int v58 = 40;
      goto LABEL_157;
    }
    if (mSelector != 1936092513)
    {
      if (mSelector != 1936092525) {
        goto LABEL_146;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_190;
        }
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 294;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamFormatMatch";
        goto LABEL_189;
      }
      a5->signed int mSelector = 40;
      HALS_IOUAStream::get_current_format(this, v120 + 1);
      long long v44 = v120;
      if (v120[1].mFormatID == 1819304813 && (v120[1].mFormatFlags & 0x40) == 0)
      {
        if (v16) {
          int v45 = 9;
        }
        else {
          int v45 = 11;
        }
        int v46 = 4 * v120[1].mChannelsPerFrame;
        v120[1].mFormatFlags = v45;
        v44[1].mBytesPerPacket = v46;
        v44[1].mFramesPerPacket = 1;
        v44[1].mBytesPerFrame = v46;
        v44[1].mBitsPerChannel = 32;
      }
      if (a8) {
        BOOL v47 = a7 == 40;
      }
      else {
        BOOL v47 = 0;
      }
      if (v47) {
        AudioObjectPropertyAddress v48 = (AMCP::Log::Scope_Registry **)a8;
      }
      else {
        AudioObjectPropertyAddress v48 = a6;
      }
      long long v27 = v114;
      v114[0] = MEMORY[0x1E4F143A8];
      v114[1] = 0x40000000;
      v114[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
      v114[3] = &unk_1E6230800;
      v114[6] = v21;
      v114[7] = v92;
      long long v49 = *((_OWORD *)v48 + 1);
      long long v115 = *(_OWORD *)v48;
      long long v116 = v49;
      uint64_t v50 = v48[4];
      v114[5] = this;
      v114[4] = &v119;
      v117 = v50;
      v118 = a6;
      unint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
LABEL_82:
      HALB_CommandGate::ExecuteCommand(v30, (uint64_t)v27);
      goto LABEL_158;
    }
    *(void *)v128 = 0;
    *(void *)&v128[8] = v128;
    *(void *)&v128[16] = 0x2000000000;
    uint64_t v129 = 0;
    v104[0] = MEMORY[0x1E4F143A8];
    v104[1] = 0x40000000;
    v104[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2;
    v104[3] = &unk_1E6230890;
    BOOL v106 = v16;
    int v105 = a4;
    v104[4] = v128;
    v104[5] = this;
    v104[6] = a6;
    v77 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v77, (uint64_t)v104);
    uint64_t v63 = *(void *)(*(void *)&v128[8] + 24);
    if ((_BYTE)v92) {
      BOOL v78 = v63 == 0;
    }
    else {
      BOOL v78 = 1;
    }
    if (!v78)
    {
      int64x2_t v79 = vdupq_n_s64(v21);
      uint64_t v80 = *(void *)(*(void *)&v128[8] + 24);
      do
      {
        *a6 = (AMCP::Log::Scope_Registry *)v21;
        *(int64x2_t *)(a6 + 5) = v79;
        a6 += 7;
        --v80;
      }
      while (v80);
    }
    goto LABEL_143;
  }
  if (mSelector > 1885762591)
  {
    if (mSelector <= 1885762622)
    {
      if (mSelector != 1885762592)
      {
        if (mSelector == 1885762595)
        {
          *(void *)v128 = 0;
          *(void *)&v128[8] = v128;
          *(void *)&v128[16] = 0x2000000000;
          uint64_t v129 = 0;
          v96[0] = MEMORY[0x1E4F143A8];
          v96[1] = 0x40000000;
          v96[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_21;
          v96[3] = &unk_1E6230930;
          int v97 = a4;
          v96[4] = v128;
          v96[5] = this;
          v96[6] = a6;
          uint64_t v39 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v39, (uint64_t)v96);
          uint64_t v40 = *(void *)(*(void *)&v128[8] + 24);
          if ((_BYTE)v92) {
            BOOL v41 = v40 == 0;
          }
          else {
            BOOL v41 = 1;
          }
          if (!v41)
          {
            uint64_t v42 = *(void *)(*(void *)&v128[8] + 24);
            do
            {
              *a6 = (AMCP::Log::Scope_Registry *)v21;
              a6 += 5;
              --v42;
            }
            while (v42);
          }
LABEL_117:
          unsigned int v72 = 40 * v40;
LABEL_144:
          a5->signed int mSelector = v72;
LABEL_145:
          _Block_object_dispose(v128, 8);
          goto LABEL_158;
        }
        goto LABEL_146;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_190;
        }
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 326;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormat";
        goto LABEL_189;
      }
      HALS_IOUAStream::get_current_format(this, (AudioStreamBasicDescription *)a6);
      goto LABEL_132;
    }
    if (mSelector == 1885762623)
    {
      if (a4 > 0x27)
      {
        a5->signed int mSelector = 40;
        *(void *)v128 = 0;
        *(void *)&v128[8] = v128;
        *(void *)&v128[16] = 0x2000000000;
        LOBYTE(v129) = 0;
        v95[0] = MEMORY[0x1E4F143A8];
        v95[1] = 0x40000000;
        v95[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_23;
        v95[3] = &unk_1E6230958;
        v95[6] = v18;
        v95[7] = v19;
        v95[4] = v128;
        v95[5] = this;
        v95[8] = a6;
        std::logic_error v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v95);
        if (!*(unsigned char *)(*(void *)&v128[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            v125 = "HALS_IOUAStream.cpp";
            __int16 v126 = 1024;
            int v127 = 463;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: kAudioStreamPropertyPhysicalFormatSupported: the format is not supported", buf, 0x12u);
          }
          char v68 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v68 = off_1F148A5D8;
          v68[2] = 560226676;
        }
        goto LABEL_145;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 446;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatSupported";
LABEL_189:
        _os_log_impl(&dword_1BAA78000, v88, OS_LOG_TYPE_ERROR, v89, v128, 0x12u);
      }
LABEL_190:
      v90 = __cxa_allocate_exception(0x10uLL);
      *(void *)v90 = off_1F148A5D8;
      v90[2] = 561211770;
    }
    if (mSelector != 1885762657)
    {
      if (mSelector != 1885762669) {
        goto LABEL_146;
      }
      if (a4 <= 0x27)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_190;
        }
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 335;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::_GetPropertyData: bad property data size for kAudioStreamPropertyPhysicalFormatMatch";
        goto LABEL_189;
      }
      a5->signed int mSelector = 40;
      HALS_IOUAStream::get_current_format(this, v120 + 1);
      if (a8) {
        BOOL v25 = a7 == 40;
      }
      else {
        BOOL v25 = 0;
      }
      if (v25) {
        unint64_t v26 = (AMCP::Log::Scope_Registry **)a8;
      }
      else {
        unint64_t v26 = a6;
      }
      long long v27 = v109;
      v109[0] = MEMORY[0x1E4F143A8];
      v109[1] = 0x40000000;
      v109[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9;
      v109[3] = &unk_1E6230828;
      v109[6] = v21;
      v109[7] = v92;
      long long v28 = *((_OWORD *)v26 + 1);
      long long v110 = *(_OWORD *)v26;
      long long v111 = v28;
      unint64_t v29 = v26[4];
      v109[5] = this;
      v109[4] = &v119;
      v112 = v29;
      v113 = a6;
      unint64_t v30 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
      goto LABEL_82;
    }
    *(void *)v128 = 0;
    *(void *)&v128[8] = v128;
    *(void *)&v128[16] = 0x2000000000;
    uint64_t v129 = 0;
    v98[0] = MEMORY[0x1E4F143A8];
    v98[1] = 0x40000000;
    v98[2] = ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_19;
    v98[3] = &unk_1E6230908;
    int v99 = a4;
    v98[4] = v128;
    v98[5] = this;
    v98[6] = a6;
    __int16 v62 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v62, (uint64_t)v98);
    uint64_t v63 = *(void *)(*(void *)&v128[8] + 24);
    if ((_BYTE)v92) {
      BOOL v64 = v63 == 0;
    }
    else {
      BOOL v64 = 1;
    }
    if (!v64)
    {
      int64x2_t v65 = vdupq_n_s64(v21);
      uint64_t v66 = *(void *)(*(void *)&v128[8] + 24);
      do
      {
        *a6 = (AMCP::Log::Scope_Registry *)v21;
        *(int64x2_t *)(a6 + 5) = v65;
        a6 += 7;
        --v66;
      }
      while (v66);
    }
LABEL_143:
    unsigned int v72 = 56 * v63;
    goto LABEL_144;
  }
  if (mSelector > 1819569762)
  {
    if (mSelector == 1819569763)
    {
      if (a4 <= 3)
      {
        if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
          goto LABEL_190;
        }
        *(_DWORD *)v128 = 136315394;
        *(void *)&v128[4] = "HALS_IOUAStream.cpp";
        *(_WORD *)&v128[12] = 1024;
        *(_DWORD *)&v128[14] = 272;
        v88 = MEMORY[0x1E4F14500];
        v89 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioStreamPropertyLatency";
        goto LABEL_189;
      }
      *(void *)v128 = 4;
      uint64_t v59 = *((void *)this + 9);
      uint64_t v60 = *(void *)(v59 + 792);
      uint64_t v61 = *(std::__shared_weak_count **)(v59 + 800);
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_DWORD *)AudioStreamBasicDescription buf = 0;
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v60 + 4), (const AudioObjectPropertyAddress *)"cntlbolg", *((_DWORD *)this + 20), 0, 0, buf, (unint64_t *)v128);
      if (v61) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v61);
      }
      if ((_BYTE)v92) {
        (*(void (**)(HALS_ObjectMap *))(*(void *)v94 + 264))(v94);
      }
      goto LABEL_156;
    }
    int v35 = 1851878764;
  }
  else
  {
    if (mSelector == 1668641652)
    {
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 2) >= a4 / 0xCuLL) {
        unint64_t v51 = a4 / 0xCuLL;
      }
      else {
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 2);
      }
      if (v51)
      {
        uint64_t v52 = 0;
        unint64_t v53 = 0;
        do
        {
          uint64_t v54 = *((void *)this + 11);
          if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 12) - v54) >> 2) > v53)
          {
            long long v55 = (char *)a6 + v52;
            mach_port_t v56 = (uint64_t *)(v54 + v52);
            uint64_t v57 = *v56;
            *((_DWORD *)v55 + 2) = *((_DWORD *)v56 + 2);
            *(void *)long long v55 = v57;
          }
          ++v53;
          v52 += 12;
        }
        while (12 * v51 != v52);
      }
      unsigned int v58 = 12 * v51;
      goto LABEL_157;
    }
    int v35 = 1819173229;
  }
  if (mSelector != v35) {
    goto LABEL_146;
  }
  if (a4 <= 7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_190;
    }
    *(_DWORD *)v128 = 136315394;
    *(void *)&v128[4] = "HALS_IOUAStream.cpp";
    *(_WORD *)&v128[12] = 1024;
    *(_DWORD *)&v128[14] = 219;
    v88 = MEMORY[0x1E4F14500];
    v89 = "%25s:%-5d  HALS_IOUAStream::GetPropertyData: bad property data size for kAudioObjectPropertyName";
    goto LABEL_189;
  }
  uint64_t v36 = *((void *)this + 9);
  uint64_t v37 = *(void *)(v36 + 792);
  uint64_t v38 = *(std::__shared_weak_count **)(v36 + 800);
  if (v38) {
    atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v131 = *((unsigned int *)this + 20);
  *((void *)&v131 + 1) = *(void *)&a3->mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)v128, v37, v131, (void *)a3->mElement, a8, a7);
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  *a6 = (AMCP::Log::Scope_Registry *)CFRetain(*(CFTypeRef *)v128);
  a5->signed int mSelector = 8;
  if (*(void *)v128) {
    CFRelease(*(CFTypeRef *)v128);
  }
LABEL_158:
  HALS_ObjectMap::ReleaseObject(v94, v19);
  _Block_object_dispose(&v119, 8);
}

void sub_1BAB15EB8(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, HALS_ObjectMap *a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  HALS_ObjectMap::ReleaseObject(a12, a2);
  _Block_object_dispose((const void *)(v13 - 256), 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__377(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  long long v3 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v3;
  *(__n128 *)(a1 + 40) = result;
  return result;
}

void HALS_IOUAStream::get_current_format(HALS_IOUAStream *this, AudioStreamBasicDescription *a2)
{
  unint64_t v5 = 40;
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(void *)(v2 + 792);
  int v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)" tfpbolg", *((_DWORD *)this + 20), 0, 0, a2, &v5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_1BAB15FF4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  unint64_t v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = &unk_1F1464420;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[19], v5[20], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForVirtualFormat((HALB_FormatList *)(v5 + 15), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
}

void sub_1BAB160C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_9(uint64_t a1, uint64_t a2, uint64_t a3, AudioStreamBasicDescription *a4)
{
  unint64_t v5 = *(HALB_FormatList ***)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v7 = &unk_1F1464420;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(v5[19], v5[20], (HALB_FormatList *)&v7, *(Float64 *)(a1 + 48));
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)&v7, (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), v6, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v7);
  }
  else
  {
    HALB_FormatList::BestMatchForPhysicalFormat((HALB_FormatList *)(v5 + 15), (const AudioStreamBasicDescription *)(a1 + 64), *(const AudioStreamBasicDescription **)(a1 + 104), a4, *(double *)(*(void *)(*(void *)(a1 + 32) + 8) + 40));
  }
}

void sub_1BAB16198(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_11(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 112);
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_13(uint64_t result)
{
  **(_DWORD **)(result + 40) = *(unsigned __int8 *)(*(void *)(result + 32) + 52);
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 120, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamRangedDescription **)(a1 + 48));
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_3(uint64_t a1)
{
  return HALB_FormatList::GetVirtualFormats(*(void *)(a1 + 40) + 120, *(unsigned char *)(a1 + 60), *(unsigned int *)(a1 + 56) / 0x28uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BAB1625C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_17(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = &unk_1F1464420;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 152), *(const HALB_FormatList **)(v2 + 160), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported((const AudioStreamBasicDescription *)v4, *((AudioStreamBasicDescription **)&v4 + 1), *(void *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 128), *(AudioStreamBasicDescription **)(v2 + 136), *(void *)(a1 + 64));
  }
}

void sub_1BAB16324(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB16314);
}

__n128 ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_19(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(v3 + 24) = 0;
  if (v1 >= 0x38)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    unint64_t v7 = v1 / 0x38uLL;
    uint64_t v8 = -1;
    do
    {
      uint64_t v9 = *(void *)(v2 + 152);
      if (++v8 >= (unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(v2 + 160) - v9) >> 3))) {
        break;
      }
      uint64_t v10 = v9 + v5;
      v5 += 56;
      uint64_t v11 = v4 + 56 * v6;
      __n128 result = *(__n128 *)v10;
      long long v13 = *(_OWORD *)(v10 + 16);
      long long v14 = *(_OWORD *)(v10 + 32);
      *(void *)(v11 + 48) = *(void *)(v10 + 48);
      *(_OWORD *)(v11 + 16) = v13;
      *(_OWORD *)(v11 + 32) = v14;
      *(__n128 *)uint64_t v11 = result;
      unint64_t v6 = *(void *)(v3 + 24) + 1;
      *(void *)(v3 + 24) = v6;
    }
    while (v6 < v7);
  }
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_2_21(uint64_t a1)
{
  return HALB_FormatList::GetPhysicalFormats(*(void *)(a1 + 40) + 120, *(unsigned int *)(a1 + 56) / 0x38uLL, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(AudioStreamBasicDescription **)(a1 + 48));
}

void sub_1BAB16430(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK15HALS_IOUAStream15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_23(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v3 = &unk_1F1464420;
    long long v4 = 0u;
    long long v5 = 0u;
    long long v6 = 0u;
    HALB_FormatList::GetFormatListWithUpdatedSampleRate(*(HALB_FormatList **)(v2 + 152), *(const HALB_FormatList **)(v2 + 160), (HALB_FormatList *)&v3, *(Float64 *)(a1 + 48));
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*((const AudioStreamBasicDescription **)&v5 + 1), (AudioStreamBasicDescription *)v6, *(void *)(a1 + 64));
    HALB_FormatList::~HALB_FormatList((HALB_FormatList *)&v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALB_FormatList::IsVirtualFormatSupported(*(const AudioStreamBasicDescription **)(v2 + 152), *(AudioStreamBasicDescription **)(v2 + 160), *(void *)(a1 + 64));
  }
}

void sub_1BAB164F8(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  HALB_FormatList::~HALB_FormatList((HALB_FormatList *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB164E8);
}

uint64_t HALS_IOUAStream::GetPropertyDataSize(HALS_IOUAStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  uint64_t v23 = 0;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2000000000;
  int v26 = 0;
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1936092450)
  {
    if (mSelector != 1668641652)
    {
      if (mSelector == 1885762595)
      {
        uint64_t v10 = v19;
        v19[0] = MEMORY[0x1E4F143A8];
        v19[1] = 0x40000000;
        v19[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4;
        v19[3] = &unk_1E62307D8;
        v19[4] = &v23;
        v19[5] = this;
        uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
        goto LABEL_15;
      }
      if (mSelector == 1885762657)
      {
        uint64_t v10 = v20;
        v20[0] = MEMORY[0x1E4F143A8];
        v20[1] = 0x40000000;
        v20[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3;
        v20[3] = &unk_1E62307B0;
        v20[4] = &v23;
        v20[5] = this;
        uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
LABEL_15:
        HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v10);
        uint64_t v12 = *((unsigned int *)v24 + 6);
        goto LABEL_20;
      }
      goto LABEL_16;
    }
    uint64_t v12 = (*((_DWORD *)this + 24) - *((_DWORD *)this + 22)) & 0xFFFFFFFC;
LABEL_11:
    int v26 = v12;
    goto LABEL_20;
  }
  switch(mSelector)
  {
    case 0x73666D23u:
      uint64_t v10 = v21;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      _OWORD v21[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2;
      v21[3] = &unk_1E6230788;
      v21[4] = &v23;
      v21[5] = this;
      uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
      goto LABEL_15;
    case 0x73666D61u:
      uint64_t v10 = v22;
      v22[0] = MEMORY[0x1E4F143A8];
      v22[1] = 0x40000000;
      v22[2] = ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
      v22[3] = &unk_1E6230760;
      v22[4] = &v23;
      v22[5] = this;
      uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
      goto LABEL_15;
    case 0x74617073u:
      uint64_t v12 = 4;
      goto LABEL_11;
  }
LABEL_16:
  if (HALS_Stream::HasProperty(this, a2, a3, a6)) {
    uint64_t PropertyDataSize = HALS_Stream::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  }
  else {
    uint64_t PropertyDataSize = HALS_IOUAObject::GetPropertyDataSize((HALS_IOUAStream *)((char *)this + 64), a3, v13, v14, v15, v16);
  }
  uint64_t v12 = PropertyDataSize;
  *((_DWORD *)v24 + 6) = PropertyDataSize;
LABEL_20:
  _Block_object_dispose(&v23, 8);
  return v12;
}

void sub_1BAB16864(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 136)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 128)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_2(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -1840700264
                                                                  * ((*(void *)(*(void *)(result + 40) + 136)
                                                                    - *(void *)(*(void *)(result + 40) + 128)) >> 3);
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_3(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 160)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 152)) & 0xFFFFFFF8;
  return result;
}

uint64_t ___ZNK15HALS_IOUAStream19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_4(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = (*(_DWORD *)(*(void *)(result + 40) + 160)
                                                                   - *(_DWORD *)(*(void *)(result + 40) + 152)) & 0xFFFFFFF8;
  return result;
}

uint64_t HALS_IOUAStream::IsPropertySettable(HALS_IOUAStream *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if (a3->mSelector == 1952542835) {
    return 0;
  }
  if (mSelector == 1935762292) {
    return 1;
  }
  if (mSelector == 1668641652) {
    return 0;
  }
  if (HALS_Stream::HasProperty(this, a2, a3, a4))
  {
    return HALS_Stream::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUAStream *)((char *)this + 64), a3, v9, v10);
  }
}

uint64_t HALS_IOUAStream::HasProperty(HALS_IOUAStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1851878763)
  {
    if (mSelector != 1668641652)
    {
      int v7 = 1819173229;
      goto LABEL_6;
    }
    BOOL v12 = *((void *)this + 12) == *((void *)this + 11);
    return !v12;
  }
  if (mSelector == 1952542835)
  {
    BOOL v12 = *((unsigned char *)this + 52) == 0;
    return !v12;
  }
  int v7 = 1851878764;
LABEL_6:
  if (mSelector == v7)
  {
    uint64_t v8 = *((void *)this + 9);
    uint64_t v9 = *(void *)(v8 + 792);
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 800);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v9 + 4), a3, *((_DWORD *)this + 20));
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    return HasProperty;
  }
  if (HALS_Stream::HasProperty(this, a2, a3, a4)) {
    return 1;
  }
  uint64_t v14 = a3->mSelector;
  double v15 = *(uint64_t (**)(char *, uint64_t))(*((void *)this + 8) + 16);

  return v15((char *)this + 64, v14);
}

void sub_1BAB16B10(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAStream::Activate(HALS_IOUAStream *this)
{
  HALS_IOUAStream::SynchronizeWithHardware(this);
  (*(void (**)(void))(*((void *)this + 8) + 24))();

  HALS_Object::Activate(this, v2);
}

void HALS_IOUAStream::SynchronizeWithHardware(HALS_IOUAStream *this)
{
  input[2] = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 14))
  {
    uint64_t v2 = *((void *)this + 9);
    uint64_t v3 = *(void *)(v2 + 792);
    long long v4 = *(std::__shared_weak_count **)(v2 + 800);
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = *((unsigned int *)this + 20);
    input[0] = *((unsigned int *)this + 44);
    input[1] = v5;
    uint64_t output = 0;
    uint32_t outputCnt = 1;
    long long v6 = (AMCP::Log::Scope_Registry *)IOConnectCallMethod(*(_DWORD *)(v3 + 4), 8u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (v6)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      BOOL v12 = **(NSObject ***)buf;
      if (*(void *)v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        long long v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)uint64_t v31 = 2080;
        *(void *)&v31[2] = "HALS_IOUAUCDriver.cpp";
        __int16 v32 = 1024;
        int v33 = 350;
        __int16 v34 = 2080;
        *(void *)int v35 = "ret != kIOReturnSuccess";
        _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to get buffer id", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v20, "Failed to get buffer id");
      std::runtime_error::runtime_error(&v21, &v20);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v26 = -1;
      v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      unint64_t v22 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
      *(void *)&v35[6] = "uint64_t HALS_IOUAUCDriver::get_stream_io_buffer_id(AudioObjectID, AudioObjectID)";
      uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAUCDriver.cpp";
      int v37 = 350;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
      long long v18 = v15;
      uint64_t v19 = v16;
      long long v15 = 0uLL;
      uint64_t v16 = 0;
      uint64_t v17 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    unsigned int v7 = output;
    if (*((_DWORD *)this + 45) != output)
    {
      HALS_IOUAStream::unmap_memory(this);
      *(void *)AudioStreamBasicDescription buf = 0;
      uint64_t v9 = *((void *)this + 9);
      uint64_t v10 = *(void *)(v9 + 792);
      uint64_t v11 = *(std::__shared_weak_count **)(v9 + 800);
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)this + 23) = HALS_IOUAUCDriver::map_memory((HALS_IOUAUCDriver *)*(unsigned int *)(v10 + 4), v7, buf, v8);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      *((_DWORD *)this + 48) = *(_DWORD *)buf;
      *((_DWORD *)this + 45) = v7;
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  HALS_IOUAStream::build_format_list(this);
}

void sub_1BAB16EEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, std::runtime_error a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 a26,char a27,char a28,uint64_t a29,NSObject **buf,long long a31)
{
  if (a2)
  {
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    int v35 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v36 = *buf;
    if ((void)a31) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a31);
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      int v37 = pthread_self();
      mach_port_t v38 = pthread_mach_thread_np(v37);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v38;
      LOWORD(a31) = 2080;
      *(void *)((char *)&a31 + 2) = "HALS_IOUAStream.cpp";
      WORD5(a31) = 1024;
      HIDWORD(a31) = 600;
      _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception remapping io buffers", (uint8_t *)&buf, 0x18u);
    }
    *(void *)(v31 + 188) = 0;
    *(void *)(v31 + 180) = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAB16CD4);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAStream::build_format_list(HALS_IOUAStream *this)
{
  uint64_t v2 = *((void *)this + 9);
  uint64_t v3 = *(void *)(v2 + 792);
  long long v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"amfsbolg", *((_DWORD *)this + 20), 0, 0);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v6 = 0;
  unint64_t v18 = PropertySize;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  __p = 0;
  if (PropertySize >= 0x28)
  {
    unint64_t v7 = PropertySize / 0x28;
    long long v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v7);
    __p = v6;
    uint64_t v17 = &v6[40 * v8];
    size_t v9 = 40 * ((40 * v7 - 40) / 0x28) + 40;
    bzero(v6, v9);
    uint64_t v16 = &v6[v9];
  }
  uint64_t v10 = *((void *)this + 9);
  uint64_t v11 = *(void *)(v10 + 792);
  BOOL v12 = *(std::__shared_weak_count **)(v10 + 800);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), (const AudioObjectPropertyAddress *)"amfsbolg", *((_DWORD *)this + 20), 0, 0, v6, &v18);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  _OWORD v14[2] = ___ZN15HALS_IOUAStream17build_format_listEv_block_invoke;
  v14[3] = &__block_descriptor_tmp_26;
  v14[4] = this;
  v14[5] = &__p;
  long long v13 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAStream *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v13, (uint64_t)v14);
  if (__p)
  {
    uint64_t v16 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1BAB17230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v16) {
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN15HALS_IOUAStream17build_format_listEv_block_invoke(uint64_t a1, uint64_t a2, const AudioStreamRangedDescription *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v3[17] = v3[16];
  v3[20] = v3[19];
  long long v4 = *(uint64_t **)(a1 + 40);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    unint64_t v7 = (HALB_FormatList *)(v3 + 15);
    do
    {
      long long v8 = *(_OWORD *)(v5 + 16);
      *(_OWORD *)&v10.mFormat.mSampleRate = *(_OWORD *)v5;
      *(_OWORD *)&v10.mFormat.mBytesPerPacket = v8;
      *(void *)&v10.mFormat.mBitsPerChannel = *(void *)(v5 + 32);
      Float64 v9 = *(double *)v5;
      v5 += 40;
      v10.mSampleRateRange.mMinimum = v9;
      v10.mSampleRateRange.mMaximum = v9;
      HALB_FormatList::AddPhysicalFormat(v7, &v10, a3);
    }
    while (v5 != v6);
  }
}

void HALS_IOUAStream::HandlePropertiesChanged(HALS_IOUAStream *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
  if (a2)
  {
    char v6 = 0;
    unint64_t v7 = a3;
    uint64_t v8 = a2;
    do
    {
      AudioObjectPropertySelector mSelector = v7->mSelector;
      ++v7;
      v6 |= mSelector == 1885762657;
      --v8;
    }
    while (v8);
    if (v6) {
      HALS_IOUAStream::build_format_list(this);
    }
  }
  AudioStreamRangedDescription v10 = (HALS_NotificationManager *)*((unsigned int *)this + 4);

  HALS_Object::PropertiesChanged(this, v10, 0, a2, a3);
}

uint64_t HALS_PDPObject::SetPropertyData(void *a1, uint64_t a2, const AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6, const void *a7, uint64_t a8)
{
  if (((*(uint64_t (**)(void *, uint64_t, const AudioObjectPropertyAddress *, uint64_t))(*a1 + 96))(a1, a2, a3, a8) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v21 = mSelector == 1937007734;
    int v22 = 1869638759;
  }
  else
  {
    BOOL v21 = mSelector == 1650682995;
    int v22 = 1668047219;
  }
  if (v21 || mSelector == v22) {
    HALS_Object::SetPropertyData((uint64_t)a1, a2, (uint64_t)a3, v16, v17, v18, v19, a8);
  }
  uint64_t v24 = *(HALS_PDPUCPlugIn **)(a1[6] + 80);

  return HALS_PDPUCPlugIn::ObjectSetPropertyData(v24, a2, a3, a6, a7, a4, a5);
}

uint64_t HALS_PDPObject::GetPropertyData(void *a1, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, int *a5, uint64_t *a6, uint64_t a7, const void *a8, uint64_t a9)
{
  if (((*(uint64_t (**)(void *, uint64_t, AudioObjectPropertyAddress *, uint64_t))(*a1 + 88))(a1, a2, a3, a9) & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v19 = mSelector == 1937007734;
    int v20 = 1869638759;
  }
  else
  {
    BOOL v19 = mSelector == 1650682995;
    int v20 = 1668047219;
  }
  if (v19 || mSelector == v20)
  {
    return HALS_Object::GetPropertyData((uint64_t)a1, v17, (int *)a3, a4, a5, a6);
  }
  else
  {
    *a5 = a4;
    uint64_t v23 = *(HALS_PDPUCPlugIn **)(a1[6] + 72);
    return HALS_PDPUCPlugIn::ObjectGetPropertyData(v23, a2, a3, a7, a8, (unsigned int *)a5, a6);
  }
}

uint64_t HALS_PDPObject::GetPropertyDataSize(void *a1, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const void *a5, uint64_t a6)
{
  uint64_t v11 = (*(uint64_t (**)(void *, uint64_t, AudioObjectPropertyAddress *, uint64_t))(*a1 + 88))(a1, a2, a3, a6);
  if ((v11 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v14 = mSelector == 1937007734;
    int v15 = 1869638759;
  }
  else
  {
    BOOL v14 = mSelector == 1650682995;
    int v15 = 1668047219;
  }
  if (v14 || mSelector == v15)
  {
    return HALS_Object::GetPropertyDataSize(v11, v12, (int *)a3);
  }
  else
  {
    uint64_t v18 = *(HALS_PDPUCPlugIn **)(a1[6] + 64);
    return HALS_PDPUCPlugIn::ObjectGetPropertyDataSize(v18, a2, a3, a4, a5);
  }
}

uint64_t HALS_PDPObject::IsPropertySettable(void *a1, uint64_t a2, AudioObjectPropertyAddress *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void *))(*a1 + 88))(a1);
  if ((v6 & 1) == 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003332927;
  }
  int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1869638758)
  {
    BOOL v9 = mSelector == 1937007734;
    int v10 = 1869638759;
  }
  else
  {
    BOOL v9 = mSelector == 1650682995;
    int v10 = 1668047219;
  }
  if (v9 || mSelector == v10)
  {
    return HALS_Object::IsPropertySettable(v6, v7, (int *)a3);
  }
  else
  {
    long long v13 = *(HALS_PDPUCPlugIn **)(a1[6] + 56);
    return HALS_PDPUCPlugIn::ObjectIsPropertySettable(v13, a2, a3);
  }
}

BOOL HALS_PDPObject::HasProperty(uint64_t a1, uint64_t a2, int *a3)
{
  int v4 = *a3;
  BOOL result = 1;
  if (*a3 > 1869638758)
  {
    BOOL v6 = v4 == 1869638759;
    int v7 = 1937007734;
  }
  else
  {
    BOOL v6 = v4 == 1650682995;
    int v7 = 1668047219;
  }
  if (!v6 && v4 != v7) {
    return (*(unsigned int (**)(uint64_t, int *))(*(void *)(a1 + 48) + 48))(a2, a3) != 0;
  }
  return result;
}

void HALS_PDPObject::~HALS_PDPObject(HALS_PDPObject *this)
{
  HALS_Object::~HALS_Object(this);

  JUMPOUT(0x1C1859840);
}

void AudioHardwareReloadServerSettings()
{
  v14[0] = 0;
  v14[1] = 0;
  HALS_System::GetInstance(&v15, 0, v14);
  uint64_t v0 = v15;
  uint64_t v1 = *(void *)(v15 + 1408);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t block_8 = 0x40000000;
  BOOL v19 = ___ZN20HALS_SettingsManager12ForceRefreshEv_block_invoke;
  int v20 = &__block_descriptor_tmp_3124;
  uint64_t v21 = v1;
  LOBYTE(v1) = atomic_load((unsigned __int8 *)(v2 + 32));
  if (v1) {
    atomic_store(1u, (unsigned __int8 *)(v2 + 33));
  }
  dispatch_sync(*(dispatch_queue_t *)v2, &block);
  int ServerBooleanSetting = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"DefaultDeviceLogging", 1);
  HALS_DefaultDeviceManager::SetLoggingIsEnabled(*(HALS_DefaultDeviceManager **)(v0 + 1264), ServerBooleanSetting);
  int v4 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"VerboseDefaultDeviceLogging", 1);
  HALS_DefaultDeviceManager::SetVerboseLoggingIsEnabled(*(HALS_DefaultDeviceManager **)(v0 + 1264), v4);
  if (HALS_SettingsManager::HasServerSetting(*(HALS_SettingsManager **)(v0 + 1408), v5))
  {
    int v6 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"AirPlayIsAlwaysTransient", 0);
    HALS_DefaultDeviceManager::SetAirPlayIsAlwaysTransient(*(HALS_DefaultDeviceManager **)(v0 + 1264), v6);
  }
  *(unsigned char *)(v0 + 1424) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"PowerManagementLogging", 0);
  if (HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"CaptureFilesEnabled", 0))char v7 = 1; {
  else
  }
    char v7 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"DataTapsEnabled", 0);
  *(unsigned char *)(v0 + 1464) = v7;
  *(unsigned char *)(v0 + 1465) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"DSPCaptureEnabled", 0);
  *(_DWORD *)(v0 + 1468) = HALS_SettingsManager::ReadServerIntSetting(*(HALS_SettingsManager **)(v0 + 1408), v8);
  if (g_static_start_options == 1) {
    char v9 = 1;
  }
  else {
    char v9 = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"AdaptableDriverSimulatorEnabled", 0);
  }
  *(unsigned char *)(v0 + 1280) = v9;
  *(unsigned char *)(v0 + 1472) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"Trace_SchedulingLatency", 0);
  *(unsigned char *)(v0 + 1496) = HALS_SettingsManager::ReadServerBooleanSetting(*(HALS_SettingsManager **)(v0 + 1408), @"TailspinDumpWhenOverload", 0);
  if (*(void *)(v0 + 1480)) {
    _ZNSt3__115allocate_sharedB8ne180100I13HALB_TailspinNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_();
  }
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t block_8 = 0x40000000;
  BOOL v19 = ___ZN11HALS_System20ReloadServerSettingsEv_block_invoke;
  int v20 = &__block_descriptor_tmp_164;
  uint64_t v21 = v0;
  int v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v0 + 56))(v0);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)&block);
  if (AMCP::Feature_Flags::run_hybrid_hal(v11, v12)) {
    load_mcp_server_settings();
  }
  long long v13 = (HALS_ObjectMap *)v16;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  HALS_ObjectMap::Dump(v13);
}

void sub_1BAB17C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL AudioObjectExists(HALS_ObjectMap *a1)
{
  if (!AllowHALClientsInThisProcess()) {
    return 0;
  }
  HALS_System::StartServer(&v6, 0);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a1);
  BOOL v3 = v2 != 0;
  HALS_ObjectMap::ReleaseObject(v2, v4);
  return v3;
}

BOOL AudioObjectIsOnListenerThread()
{
  if (atomic_load_explicit((atomic_ullong *volatile)&HALS_NotificationManager::sInitialized, memory_order_acquire) != -1)
  {
    uint64_t v1 = &v2;
    uint64_t v2 = HALS_NotificationManager::Initialize;
    std::__call_once(&HALS_NotificationManager::sInitialized, &v1, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<void (&)(void)>>);
  }
  return pthread_getspecific(HALS_NotificationManager::sThreadMarkerKey) != 0;
}

uint64_t AudioObjectAddPropertyListenerInternal(HALS_ObjectMap *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  HALS_System::StartServer(&v22, 0);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (!a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    uint64_t v25 = "HALS_Framework-ios-imp.cpp";
    __int16 v26 = 1024;
    int v27 = 1502;
    uint64_t v12 = MEMORY[0x1E4F14500];
    long long v13 = "%25s:%-5d  AudioObjectAddPropertyListenerInternal: can't add a listener proc without an address";
    goto LABEL_16;
  }
  if (!a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    uint64_t v25 = "HALS_Framework-ios-imp.cpp";
    __int16 v26 = 1024;
    int v27 = 1503;
    uint64_t v12 = MEMORY[0x1E4F14500];
    long long v13 = "%25s:%-5d  AudioObjectAddPropertyListenerInternal: can't add a NULL listener proc";
LABEL_16:
    _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, v13, buf, 0x12u);
LABEL_17:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  CFStringRef v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a1);
  if (!v8)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      uint64_t v25 = "HALS_Framework-ios-imp.cpp";
      __int16 v26 = 1024;
      int v27 = 1507;
      __int16 v28 = 1024;
      int v29 = (int)a1;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectAddPropertyListenerInternal: no object with given ID %u", buf, 0x18u);
    }
    uint64_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v15 = off_1F148A5D8;
    v15[2] = 560947818;
  }
  int v16 = 3;
  uint64_t v18 = 0;
  uint64_t v17 = 0;
  int v19 = 0;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  buf[0] = 0;
  char v30 = 0;
  HALS_NotificationManager::AddPropertyListener((uint64_t)&v16, a1, a2, (uint64_t)buf);
  if (v30) {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)buf);
  }
  HALS_Listener::~HALS_Listener((HALS_Listener *)&v16);
  HALS_ObjectMap::ReleaseObject(v8, v9);
  return 0;
}

void sub_1BAB18040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AudioHardwareBeMaster()
{
  if (AllowHALClientsInThisProcess())
  {
    HALS_System::StartServer(&v1, 0);
    uint64_t v0 = v2;
    if (v2)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v0);
    }
  }
}

uint64_t AudioDeviceCreateIOProcIDWithClockedProc(HALS_ObjectMap *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (a2)
    {
      if (a4)
      {
        char v7 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a1);
        if (v7)
        {
          int v10 = *((_DWORD *)v7 + 5);
          int v9 = *((_DWORD *)v7 + 6);
          if (v10 <= 1701078389)
          {
            if (v10 == 1633773415)
            {
LABEL_13:
              HALS_ObjectMap::ReleaseObject(v7, v8);
              return 1970171760;
            }
            int v11 = 1633969526;
          }
          else
          {
            if (v10 == 1701078390 || v10 == 1701733488) {
              goto LABEL_13;
            }
            int v11 = 1919182198;
          }
          if (v10 == v11) {
            goto LABEL_13;
          }
          if (v10 != v9)
          {
            if (v9 <= 1701078389)
            {
              if (v9 == 1633773415) {
                goto LABEL_13;
              }
              int v14 = 1633969526;
            }
            else
            {
              if (v9 == 1701078390 || v9 == 1701733488) {
                goto LABEL_13;
              }
              int v14 = 1919182198;
            }
            if (v9 == v14) {
              goto LABEL_13;
            }
          }
          HALS_ObjectMap::ReleaseObject(v7, v8);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315394;
          uint64_t v20 = "HALS_Framework-ios-imp.cpp";
          __int16 v21 = 1024;
          int v22 = 1853;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedProc: no device with given ID", (uint8_t *)&v19, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        uint64_t v18 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v18 = off_1F148A5D8;
        v18[2] = 1852797029;
      }
      int v19 = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 1849;
      int v16 = MEMORY[0x1E4F14500];
      uint64_t v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedProc: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      int v19 = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 1848;
      int v16 = MEMORY[0x1E4F14500];
      uint64_t v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedProc: can't create an AudioDeviceIOProcID for a NULL IOProc";
    }
    _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1BAB1845C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAB18474(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAB18464);
  }
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAB18200);
  }
  void *v2 = 0;
  goto LABEL_7;
}

void sub_1BAB184F4()
{
}

uint64_t AudioDeviceCreateIOProcIDWithClockedBlock(uint64_t a1, HALS_ObjectMap *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (AllowHALClientsInThisProcess())
  {
    if (a4)
    {
      if (a1)
      {
        char v7 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(a2);
        if (v7)
        {
          int v10 = *((_DWORD *)v7 + 5);
          int v9 = *((_DWORD *)v7 + 6);
          if (v10 <= 1701078389)
          {
            if (v10 == 1633773415)
            {
LABEL_13:
              HALS_ObjectMap::ReleaseObject(v7, v8);
              return 1970171760;
            }
            int v11 = 1633969526;
          }
          else
          {
            if (v10 == 1701078390 || v10 == 1701733488) {
              goto LABEL_13;
            }
            int v11 = 1919182198;
          }
          if (v10 == v11) {
            goto LABEL_13;
          }
          if (v10 != v9)
          {
            if (v9 <= 1701078389)
            {
              if (v9 == 1633773415) {
                goto LABEL_13;
              }
              int v14 = 1633969526;
            }
            else
            {
              if (v9 == 1701078390 || v9 == 1701733488) {
                goto LABEL_13;
              }
              int v14 = 1919182198;
            }
            if (v9 == v14) {
              goto LABEL_13;
            }
          }
          HALS_ObjectMap::ReleaseObject(v7, v8);
        }
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v19 = 136315394;
          uint64_t v20 = "HALS_Framework-ios-imp.cpp";
          __int16 v21 = 1024;
          int v22 = 1915;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedBlock: no device with given ID", (uint8_t *)&v19, 0x12u);
        }
        exception = __cxa_allocate_exception(0x10uLL);
        *(void *)exception = off_1F148A5D8;
        exception[2] = 560947818;
      }
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
LABEL_32:
        uint64_t v18 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v18 = off_1F148A5D8;
        v18[2] = 1852797029;
      }
      int v19 = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 1911;
      int v16 = MEMORY[0x1E4F14500];
      uint64_t v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedBlock: nowhere to put the return value";
    }
    else
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        goto LABEL_32;
      }
      int v19 = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 1910;
      int v16 = MEMORY[0x1E4F14500];
      uint64_t v17 = "%25s:%-5d  AudioDeviceCreateIOProcIDWithClockedBlock: can't create an AudioDeviceIOProcID for a NULL IOBlock";
    }
    _os_log_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, v17, (uint8_t *)&v19, 0x12u);
    goto LABEL_32;
  }
  return 560033144;
}

void sub_1BAB18820(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAB18838(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAB18828);
  }
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (!v2) {
      goto LABEL_7;
    }
  }
  else if (!v2)
  {
LABEL_7:
    __cxa_end_catch();
    JUMPOUT(0x1BAB185C4);
  }
  void *v2 = 0;
  goto LABEL_7;
}

void sub_1BAB188B8()
{
}

uint64_t AudioDeviceRun()
{
  return 0;
}

uint64_t AudioDeviceWrite()
{
  return 0;
}

uint64_t AudioDeviceDuck(AMCP::Log::Scope_Registry *a1, uint64_t *a2, float a3, float a4)
{
  unsigned int v7 = a1;
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  CFStringRef v8 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v15 = pthread_self();
    mach_port_t v16 = pthread_mach_thread_np(v15);
    if (a2)
    {
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
    }
    else
    {
      uint64_t v17 = 0;
      uint64_t v18 = 0;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 67110914;
    *(_DWORD *)&uint8_t buf[4] = v16;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = "AudioHardwarePriv.mm";
    __int16 v25 = 1024;
    *(_DWORD *)__int16 v26 = 247;
    *(_WORD *)&v26[4] = 2048;
    *(void *)&v26[6] = v7;
    *(_WORD *)&v26[14] = 2048;
    *(double *)&v26[16] = a3;
    *(_WORD *)&v26[24] = 2048;
    *(void *)&v26[26] = v17;
    *(_WORD *)&v26[34] = 2048;
    *(void *)&v26[36] = v18;
    *(_WORD *)&v26[44] = 2048;
    *(double *)&v26[46] = a4;
    _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d AudioDeviceDuck %lu, %f, [%.0f, %lld], %f", buf, 0x4Au);
  }

  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    if (a2)
    {
      uint64_t v9 = *a2;
      uint64_t v10 = a2[1];
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
    *(_DWORD *)AudioStreamBasicDescription buf = 136316674;
    *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3765;
    __int16 v25 = 2048;
    *(void *)__int16 v26 = v7;
    *(_WORD *)&v26[8] = 2048;
    *(double *)&unsigned char v26[10] = a3;
    *(_WORD *)&v26[18] = 2048;
    *(void *)&v26[20] = v9;
    *(_WORD *)&v26[28] = 2048;
    *(void *)&v26[30] = v10;
    *(_WORD *)&v26[38] = 2048;
    *(double *)&v26[40] = a4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  AudioDeviceDuck(%lu, %f, [%.0f, %lld], %f)", buf, 0x44u);
  }
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  v21[0] = 0;
  v21[1] = 0;
  HALS_System::GetInstance(&v22, 0, v21);
  if (!v22)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3776;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioDeviceDuck: no system object", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  int v11 = HALS_System::CopyDeviceByObjectID(v22, v7, 0);
  if (!v11)
  {
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = off_1F148A5D8;
    v20[2] = 560227702;
  }
  HALS_ObjectMap::ReleaseObject(v11, v12);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  return 0;
}

void sub_1BAB18C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioDeviceEnterMode()
{
  return 1970171760;
}

uint64_t AudioDeviceExitMode()
{
  return 1970171760;
}

void AudioHardwareInitializeForTesting(int a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  v16[0] = 0;
  v16[1] = 0;
  HALS_System::GetInstance(buf, 0, v16);
  uint64_t v2 = *(void *)buf;
  if (*(void *)&buf[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
  }
  if (v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3907;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Local AudioHAL System initialized before initializing for testing", buf, 0x12u);
    }
    abort();
  }
  SecTaskRef v14 = SecTaskCreateFromSelf((CFAllocatorRef)*MEMORY[0x1E4F1CF88]);
  if (!v14)
  {
    AMCP::Utility::SecTask::release((const void **)&v14);
    goto LABEL_35;
  }
  AMCP::Utility::SecTask_Proxy::SecTask_Proxy((AMCP::Log::Scope_Registry *)buf, (const AMCP::Utility::SecTask *)&v14);
  CFTypeRef v3 = SecTaskCopyValueForEntitlement(**(SecTaskRef **)buf, @"com.apple.private.audio.direct-hal-testing", 0);
  int v4 = v3;
  CFTypeRef v5 = (CFTypeRef)*MEMORY[0x1E4F1CFC0];
  if (v3)
  {
    CFTypeID v6 = CFGetTypeID(v3);
    if (v6 == CFBooleanGetTypeID())
    {
      CFRetain(v4);
      applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)cf, v4);
    }
    else
    {
      cf[0] = v5;
      CFTypeRef v5 = 0;
    }
    CFRelease(v4);
    if (v5) {
      CFRelease(v5);
    }
    CFTypeRef v5 = cf[0];
  }
  else
  {
    cf[0] = *(CFTypeRef *)MEMORY[0x1E4F1CFC0];
  }
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v7 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v5);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  AMCP::Utility::SecTask::release((const void **)&v14);
  if (!v7)
  {
LABEL_35:
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 3913;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HAL Testing entitlement is missing", buf, 0x12u);
    }
    abort();
  }
  if (a1 == 2 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_Framework-ios-imp.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 3922;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  WARNING: Do not run with kAudioHardwareTestConfiguration_LoadVirtualAudioWithFakeDevices in CI: Virtual Audio with the HAL does not shut down cleanly and will cause tests that run afterward to fail.", buf, 0x12u);
  }
  Testing_PlatformBehaviors::s_test_configuration = a1;
  HALS_System::StartServer(buf, 1);
  cf[0] = 0;
  cf[1] = 0;
  HALS_System::GetInstance(&v14, 0, (uint64_t *)cf);
  SecTaskRef v8 = v14;
  uint64_t v9 = *(void *)buf;
  uint64_t v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v11 = (std::__shared_weak_count *)*((void *)v8 + 17);
  *((void *)v8 + 16) = v9;
  *((void *)v8 + 17) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void sub_1BAB19064(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AudioHardwareDisposeForTesting()
{
  atomic_store(0, StaticContainerBase::s_statics_initializable);
  v5[0] = 0;
  v5[1] = 0;
  HALS_System::GetInstance(&v6, 0, v5);
  uint64_t v0 = v6;
  uint64_t v1 = *(std::__shared_weak_count **)(v6 + 136);
  *(void *)(v6 + 128) = 0;
  *(void *)(v0 + 136) = 0;
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  uint64_t v2 = (HALS_PlatformBehaviors *)v7;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  Testing_PlatformBehaviors::s_test_configuration = 0;
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v2);
  uint64_t result = (*(uint64_t (**)(uint64_t *))(*platform_behaviors + 72))(platform_behaviors);
  atomic_store(1u, StaticContainerBase::s_statics_initializable);
  return result;
}

BOOL HALS_ClientEntitlements::HasEntitlementWithBooleanValue(HALS_ClientEntitlements *this, const __CFString *a2)
{
  if (g_static_start_options == 1 || a2 == 0) {
    return 1;
  }
  if (!*(void *)this) {
    return 0;
  }
  AMCP::Utility::SecTask_Proxy::SecTask_Proxy((AMCP::Log::Scope_Registry *)&v11, this);
  CFTypeRef v5 = SecTaskCopyValueForEntitlement(*v11, a2, 0);
  uint64_t v6 = v5;
  CFTypeRef v7 = (CFTypeRef)*MEMORY[0x1E4F1CFC0];
  if (v5)
  {
    CFTypeID v8 = CFGetTypeID(v5);
    if (v8 == CFBooleanGetTypeID())
    {
      CFRetain(v6);
      applesauce::CF::BooleanRef::BooleanRef((applesauce::CF::BooleanRef *)&cf, v6);
    }
    else
    {
      CFTypeRef cf = v7;
      CFTypeRef v7 = 0;
    }
    CFRelease(v6);
    if (v7) {
      CFRelease(v7);
    }
    CFTypeRef v7 = cf;
  }
  else
  {
    CFTypeRef cf = (CFTypeRef)*MEMORY[0x1E4F1CFC0];
  }
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v4 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v7);
  if (cf) {
    CFRelease(cf);
  }
  return v4;
}

void sub_1BAB192D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  __cxa_free_exception(v10);
  applesauce::CF::BooleanRef::~BooleanRef(&a10);
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *AMCP::Utility::SecTask_Proxy::SecTask_Proxy(AMCP::Log::Scope_Registry *this, const AMCP::Utility::SecTask *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  *(void *)this = a2;
  if (!*(void *)a2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      CFTypeRef v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)uint64_t v20 = 2080;
      *(void *)&v20[2] = "Security_Utilities.h";
      __int16 v21 = 1024;
      int v22 = 177;
      __int16 v23 = 2080;
      *(void *)uint64_t v24 = "(m_proxy.is_valid()) == false";
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Cannot dereference a nullptr SecTask", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Cannot dereference a nullptr SecTask", (uint64_t)&v10);
    std::runtime_error::runtime_error(&v11, &v10);
    std::runtime_error::runtime_error(&v12, &v11);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = -1;
    v12.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v13 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(void *)&v24[6] = "AMCP::Utility::SecTask_Proxy::SecTask_Proxy(const SecTask &)";
    __int16 v25 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Security_Utilities.h";
    int v26 = 177;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    long long v8 = v5;
    uint64_t v9 = v6;
    long long v5 = 0uLL;
    uint64_t v6 = 0;
    CFTypeRef v7 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return this;
}

void sub_1BAB19564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

void boost::detail::variant::forced_return<BOOL>()
{
  __assert_rtn("forced_return", "forced_return.hpp", 38, "false");
}

void ca::concurrent::details::shared_instance_mgr<ca::concurrent::details::service_thread>::~shared_instance_mgr(std::mutex *this)
{
  sig = (void *)this[1].__m_.__sig;
  if (sig)
  {
    *(void *)this[1].__m_.__opaque = sig;
    operator delete(sig);
  }

  std::mutex::~mutex(this);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *this, long long *a2)
{
  this->__r_.__value_.__s.__data_[0] = 0;
  this[1].__r_.__value_.__s.__data_[0] = 0;
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

void sub_1BAB196CC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *std::__optional_copy_base<boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>,false>::__optional_copy_base[abi:ne180100](unsigned char *result, uint64_t a2)
{
  *uint64_t result = 0;
  result[20] = 0;
  if (*(unsigned char *)(a2 + 20))
  {
    uint64_t v2 = result + 4;
    long long v3 = (_OWORD *)(a2 + 4);
    int v4 = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    if (v4 != 2)
    {
      if (v4 == 1)
      {
        _OWORD *v2 = *v3;
        goto LABEL_7;
      }
      if (v4) {
        boost::detail::variant::forced_return<BOOL>();
      }
    }
    *(void *)uint64_t v2 = *(void *)v3;
LABEL_7:
    *(_DWORD *)uint64_t result = *(_DWORD *)a2 ^ (*(int *)a2 >> 31);
    result[20] = 1;
  }
  return result;
}

void sub_1BAB19778(_Unwind_Exception *exception_object)
{
  if (*((unsigned char *)v1 + 20)) {
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(uint64_t result)
{
  if ((result ^ ((int)result >> 31)) >= 3) {
    boost::detail::variant::forced_return<BOOL>();
  }
  return result;
}

uint64_t std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (*(unsigned char *)(result + 84)) {
      boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*(unsigned int *)(result + 64));
    }
    if (*(unsigned char *)(v1 + 56) && *(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x1C1859400]();
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = std::__thread_local_data();
  long long v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = *(void *)(a1 + 16);
  long long v5 = *(void (**)(void *, void **))(a1 + 8);
  uint64_t v6 = (void *)(*(void *)(a1 + 24) + (v4 >> 1));
  if (v4) {
    long long v5 = *(void (**)(void *, void **))(*v6 + v5);
  }
  LOBYTE(__p[0]) = 0;
  char v12 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 48);
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 32) = 0;
    char v12 = 1;
  }
  LOBYTE(v13) = 0;
  char v15 = 0;
  if (*(unsigned char *)(a1 + 84))
  {
    int v7 = *(_DWORD *)(a1 + 64) ^ (*(int *)(a1 + 64) >> 31);
    long long v8 = (long long *)(a1 + 68);
    if (v7 != 2)
    {
      if (v7 == 1)
      {
        long long v14 = *v8;
        goto LABEL_11;
      }
      if (v7) {
        boost::detail::variant::forced_return<BOOL>();
      }
    }
    *(void *)&long long v14 = *(void *)v8;
LABEL_11:
    unsigned int v13 = v7;
    char v15 = 1;
  }
  v5(v6, __p);
  if (v15) {
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(v13);
  }
  if (v12 && SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  std::default_delete<std::tuple<std::unique_ptr<std::__thread_struct>,void (ca::concurrent::details::worker_thread::*)(ca::thread::attributes),ca::concurrent::details::worker_thread*,ca::thread::attributes>>::operator()[abi:ne180100](a1);
  return 0;
}

void sub_1BAB199E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, int a17, uint64_t a18, int a19, char a20)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ca::concurrent::details::worker_thread::run(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v4 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v4 = *(const char **)a2;
    }
    int v5 = pthread_setname_np(v4);
    check_posix_error((uint64_t)"pthread_setname_np failed", v5);
  }
  if (*(unsigned char *)(a2 + 52))
  {
    int v6 = *(_DWORD *)(a2 + 32) ^ (*(int *)(a2 + 32) >> 31);
    switch(v6)
    {
      case 2:
        uint64_t v11 = pthread_self();
        thread_act_t v12 = pthread_mach_thread_np(v11);
        if (v12)
        {
          thread_act_t v13 = v12;
          integer_t policy_info = *(unsigned char *)(a2 + 40) == 0;
          long long v14 = (const char *)thread_policy_set(v12, 1u, &policy_info, 1u);
          ca::mach::throw_if_mach_error((uint64_t)"thread_policy_set extended failed", v14);
          pid_t v15 = getpid();
          int v16 = proc_pidinfo(v15, 2, 0, buffer, 232);
          int v17 = v24;
          if (v16 <= 0) {
            int v17 = 0;
          }
          integer_t v21 = *(_DWORD *)(a2 + 36) - v17;
          char v18 = (const char *)thread_policy_set(v13, 3u, &v21, 1u);
          ca::mach::throw_if_mach_error((uint64_t)"thread_policy_set precedence failed", v18);
        }
        break;
      case 1:
        long long v8 = pthread_self();
        thread_act_t v9 = pthread_mach_thread_np(v8);
        std::string v10 = (const char *)thread_policy_set(v9, 2u, (thread_policy_t)(a2 + 36), 4u);
        ca::mach::throw_if_mach_error((uint64_t)"thread_policy_set realtime failed", v10);
        break;
      case 0:
        int v7 = pthread_set_qos_class_self_np(*(qos_class_t *)(a2 + 36), *(_DWORD *)(a2 + 40));
        check_posix_error((uint64_t)"pthread_set_qos_class_self_np failed", v7);
        break;
    }
  }
  do
  {
    if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 16), 0xFFFFFFFF, memory_order_acquire) <= 0) {
      ca::mach::semaphore::wait((ca::mach::semaphore *)(a1 + 8));
    }
    uint64_t v19 = *(void *)(a1 + 48);
    if (!v19) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 48))(v19);
  }
  while (!*(unsigned char *)(a1 + 57));
  return result;
}

void *std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN2ca10concurrent7details14service_threadC1EbRKNS_6thread10attributesEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

unint64_t *std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(atomic_ullong **)(a1 + 8);
  while (1)
  {
    uint64_t result = (unint64_t *)v1[8];
    if (!result) {
      break;
    }
LABEL_8:
    unint64_t v7 = atomic_load(result + 1);
    v1[8] = v7;
    (*(void (**)(unint64_t *))(*result + 16))(result);
  }
  while (1)
  {
    unint64_t v3 = *v1;
    if (!*v1) {
      return result;
    }
    atomic_ullong v4 = *v1;
    atomic_compare_exchange_strong(v1, (unint64_t *)&v4, 0);
    if (v4 == v3)
    {
      unint64_t v5 = 0;
      do
      {
        uint64_t result = (unint64_t *)v3;
        int v6 = (unint64_t *)(v3 + 8);
        unint64_t v3 = atomic_load((unint64_t *)(v3 + 8));
        atomic_store(v5, v6);
        unint64_t v5 = (unint64_t)result;
      }
      while (v3);
      v1[8] = (atomic_ullong)result;
      goto LABEL_8;
    }
  }
}

void sub_1BAB19D68(void *a1)
{
  __cxa_begin_catch(a1);
  *(unsigned char *)(v1 + 200) = 1;
  __cxa_end_catch();
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145E038;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145E038;
  result[1] = v3;
  return result;
}

void std::__function::__func<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::service_thread(BOOL,ca::thread::attributes const&)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void ca::concurrent::messenger::messenger()
{
  uint64_t v0 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAB1A02C(_Unwind_Exception *a1, void **a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v11 = va_arg(va1, void);
  if (*(unsigned char *)(v9 + 56) && *(char *)(v9 + 55) < 0) {
    operator delete(*v4);
  }
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)v9);
  MEMORY[0x1C1859840](v9, 0x10B2C406C1533D7);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v8);
  ca::sync::semaphore::~semaphore(v7);
  std::thread::~thread(v6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  if (v3[132]) {
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*v5);
  }
  if (v3[104])
  {
    if (v3[103] < 0) {
      operator delete(*a2);
    }
  }
  MEMORY[0x1C1859840](v3, 0x10B2C406E065C64);
  _Unwind_Resume(a1);
}

void ca::concurrent::details::service_thread::drain(ca::concurrent::details::service_thread *this)
{
  v13[4] = *MEMORY[0x1E4F143B8];
  ca::sync::semaphore::semaphore(&semaphore);
  v10[0] = &unk_1F145E0B8;
  v10[1] = &semaphore;
  unint64_t v12 = 0;
  v10[3] = v10;
  uint64_t v11 = &unk_1F145E138;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v10);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v10);
  do
  {
    unint64_t v2 = *(void *)this;
    atomic_store(*(void *)this, &v12);
    unint64_t v3 = v2;
    atomic_compare_exchange_strong((atomic_ullong *volatile)this, &v3, (unint64_t)&v11);
  }
  while (v3 != v2);
  ca::sync::semaphore::signal((atomic_uint *)this + 36);
  while (!*((unsigned char *)this + 200)
       && (int)atomic_fetch_add_explicit((atomic_uint *volatile)&v9, 0xFFFFFFFF, memory_order_acquire) <= 0)
  {
    do
    {
      mach_timespec_t v4 = (mach_timespec_t)0x1DCD650000000000;
      unint64_t v5 = (const char *)semaphore_timedwait(semaphore, v4);
    }
    while (v5 == 14);
    if (v5 != 49)
    {
      ca::mach::throw_if_mach_error((uint64_t)"semaphore_timedwait failed", v5);
      break;
    }
    unsigned int v6 = atomic_load(&v9);
    if ((v6 & 0x80000000) == 0)
    {
LABEL_12:
      ca::mach::semaphore::wait((ca::mach::semaphore *)&semaphore);
      break;
    }
    unsigned int v7 = v6;
    while (1)
    {
      atomic_compare_exchange_strong_explicit((atomic_uint *volatile)&v9, &v7, v6 + 1, memory_order_relaxed, memory_order_relaxed);
      if (v7 == v6) {
        break;
      }
      unsigned int v6 = v7;
      if ((v7 & 0x80000000) == 0) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v11 = &unk_1F145E138;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v13);
  ca::sync::semaphore::~semaphore((ca::sync::semaphore *)&semaphore);
}

void sub_1BAB1A2EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
  ca::sync::semaphore::~semaphore((ca::sync::semaphore *)va);
  _Unwind_Resume(a1);
}

void ca::concurrent::details::service_thread::~service_thread(ca::concurrent::details::service_thread *this)
{
  if (!*((unsigned char *)this + 192))
  {
    *((unsigned char *)this + 193) = 1;
    ca::sync::semaphore::signal((atomic_uint *)this + 36);
  }
  if (*((void *)this + 17)) {
    std::thread::join((std::thread *)this + 17);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 20);
  ca::sync::semaphore::~semaphore((ca::concurrent::details::service_thread *)((char *)this + 144));
  std::thread::~thread((std::thread *)this + 17);
  if (*((unsigned char *)this + 132)) {
    boost::variant<ca::mach::thread::priority_qos,ca::mach::thread::priority_realtime,ca::mach::thread::priority_absolute>::destroy_content(*((unsigned int *)this + 28));
  }
  if (*((unsigned char *)this + 104))
  {
    if (*((char *)this + 103) < 0) {
      operator delete(*((void **)this + 10));
    }
  }
}

uint64_t ca::concurrent::details::internal_message::perform(ca::concurrent::details::internal_message *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void ca::concurrent::details::internal_message::~internal_message(ca::concurrent::details::internal_message *this)
{
  *(void *)this = &unk_1F145E138;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 2);

  JUMPOUT(0x1C1859840);
}

{
  *(void *)this = &unk_1F145E138;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 2);
}

void *std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN2ca10concurrent7details14service_thread5drainEvEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

atomic_uint *std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  return ca::sync::semaphore::signal(*(atomic_uint **)(a1 + 8));
}

uint64_t std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F145E0B8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_1F145E0B8;
  result[1] = v3;
  return result;
}

void std::__function::__func<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1},std::allocator<ca::concurrent::details::service_thread::drain(void)::{lambda(void)#1}>,void ()(void)>::~__func()
{
}

void ca::concurrent::messenger::~messenger(ca::concurrent::details::service_thread **this)
{
  ca::concurrent::details::service_thread::drain(*this);
  uint64_t v2 = *this;
  if (*((unsigned char *)*this + 72))
  {
    {
      __cxa_atexit((void (*)(void *))ca::concurrent::details::shared_instance_mgr<ca::concurrent::details::service_thread>::~shared_instance_mgr, &ca::concurrent::details::service_thread::sharedMgr(void)::x, &dword_1BAA78000);
    }
    std::mutex::lock(&ca::concurrent::details::service_thread::sharedMgr(void)::x);
    for (uint64_t i = qword_1EBFF9480; ; i += 16)
    {
      if (i == qword_1EBFF9488)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "shared_instance_mgr: releasing unknown instance");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (*(ca::concurrent::details::service_thread **)i == v2) {
        break;
      }
    }
    int v4 = *(_DWORD *)(i + 8) - 1;
    *(_DWORD *)(i + 8) = v4;
    if (!v4)
    {
      ca::concurrent::details::service_thread::~service_thread(v2);
      MEMORY[0x1C1859840]();
      uint64_t v5 = qword_1EBFF9488;
      uint64_t v6 = i + 16;
      if (i + 16 != qword_1EBFF9488)
      {
        do
        {
          *(void *)(v6 - 16) = *(void *)v6;
          *(_DWORD *)(v6 - 8) = *(_DWORD *)(v6 + 8);
          v6 += 16;
        }
        while (v6 != v5);
        uint64_t i = v6 - 16;
      }
      qword_1EBFF9488 = i;
    }
    std::mutex::unlock(&ca::concurrent::details::service_thread::sharedMgr(void)::x);
  }
  else
  {
    ca::concurrent::details::service_thread::~service_thread(*this);
    MEMORY[0x1C1859840]();
  }
}

void sub_1BAB1A7A0(void *a1)
{
}

void *std::__function::__value_func<DSP_HAL_Mock_TestHooks ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1BAB1AB3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<DSP_HAL_Mock_TestHooks ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1BAB1BB14(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

DSP_Host_Types::ConfigurationChangeRequest *DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest(DSP_Host_Types::ConfigurationChangeRequest *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F14867D0;
  std::string::basic_string[abi:ne180100]<0>(__p, "is activation");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 3, (uint64_t)__p);
  *((void *)this + 3) = &unk_1F1486878;
  *((_WORD *)this + 20) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "INTERNAL_is_simulated");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 6, (uint64_t)__p);
  *((void *)this + 6) = &unk_1F1486878;
  *((_WORD *)this + 32) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  DSP_Host_Types::IOContextDescription::IOContextDescription((DSP_Host_Types::ConfigurationChangeRequest *)((char *)this + 72), "io context description");
  *((void *)this + 84) = 0;
  *((_OWORD *)this + 41) = 0u;
  return this;
}

void sub_1BAB1BE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v19 = v18;
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *pid_t v15 = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<unsigned int ()(AudioObjectPropertyAddress const&,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void DSP_HAL_Mock_TestHooks::~DSP_HAL_Mock_TestHooks(DSP_HAL_Mock_TestHooks *this)
{
  std::__function::__value_func<unsigned int ()(AudioObjectPropertyAddress const&,unsigned int)>::~__value_func[abi:ne180100]((void *)this + 16);
  std::__function::__value_func<void ()(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)this + 12);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 8);
  std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)this + 4);

  std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](this);
}

void *std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

DSP_Host_Types::AdaptResponse *DSP_Host_Types::AdaptResponse::AdaptResponse(DSP_Host_Types::AdaptResponse *this)
{
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1F14874D8;
  std::string::basic_string[abi:ne180100]<0>(__p, "dsp processing latency samples");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 3, (uint64_t)__p);
  *((void *)this + 3) = &unk_1F1487570;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 44) = 0;
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = -1;
  DSP_Dictionariable::DictionarySet::add_kvp((DSP_Host_Types::AdaptResponse *)((char *)this + 48), (DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  return this;
}

void sub_1BAB1C280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v19 = v18;
  integer_t v21 = *v19;
  if (*v19)
  {
    v15[7] = v21;
    operator delete(v21);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *pid_t v15 = &unk_1F1487518;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::AdaptResponse::~AdaptResponse(DSP_Host_Types::AdaptResponse *this)
{
  *(void *)this = &unk_1F14874D8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  *(void *)this = &unk_1F1487518;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14874D8;
  uint64_t v2 = (void *)*((void *)this + 6);
  if (v2)
  {
    *((void *)this + 7) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptResponse *)((char *)this + 24));
  *(void *)this = &unk_1F1487518;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void DSP_Host_Types::IOContextDescription::~IOContextDescription(DSP_Host_Types::IOContextDescription *this)
{
  *(void *)this = &unk_1F14868D0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 544));
  uint64_t v5 = (void **)((char *)this + 520);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((void *)this + 50) = &unk_1F1486A58;
  uint64_t v5 = (void **)((char *)this + 496);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v5);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 472));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 448));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 424));
  *((void *)this + 50) = &unk_1F1486A98;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 408);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 376));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 352));
  *((void *)this + 25) = &unk_1F1486968;
  uint64_t v3 = (void *)*((void *)this + 41);
  if (v3)
  {
    *((void *)this + 42) = v3;
    operator delete(v3);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 304));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 280));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 256));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 224));
  *((void *)this + 25) = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 208);
  *((void *)this + 6) = &unk_1F1486968;
  char v4 = (void *)*((void *)this + 22);
  if (v4)
  {
    *((void *)this + 23) = v4;
    operator delete(v4);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 152));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 128));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::IOContextDescription *)((char *)this + 72));
  *((void *)this + 6) = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 56);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 4));
  *(void *)this = &unk_1F1486910;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  uint64_t vars8;

  DSP_Host_Types::IOContextDescription::~IOContextDescription(this);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::AdaptRequest::~AdaptRequest(DSP_Host_Types::AdaptRequest *this)
{
  *(void *)this = &unk_1F14867D0;
  uint64_t v2 = (DSP_Host_Types::AdaptRequest *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::AdaptRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14867D0;
  uint64_t v2 = (DSP_Host_Types::AdaptRequest *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::AdaptRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AdaptRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB1C700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB1C870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*a1);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a1[1]);
    operator delete(a1);
  }
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::IOContextDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB1C9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::IOContextDescription>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB1CB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::FormatDescription>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB1CC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::FormatDescription>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB1CD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB1CE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AudioChannelConfiguration>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB1CFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    CFStringRef v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AdaptResponse>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB1D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::AdaptResponse>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB1D298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *DSP_Dictionariable::DictionariableKvp::DictionariableKvp(void *a1, uint64_t a2)
{
  *a1 = &unk_1F14875D8;
  char v3 = *(unsigned char *)(a2 + 23);
  if (v3 >= 0) {
    CFStringRef v4 = (const UInt8 *)a2;
  }
  else {
    CFStringRef v4 = *(const UInt8 **)a2;
  }
  if (v4)
  {
    if (v3 >= 0) {
      CFIndex v5 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      CFIndex v5 = *(void *)(a2 + 8);
    }
    CFStringRef v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
    a1[1] = v6;
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    a1[1] = 0;
  }
  return a1;
}

void sub_1BAB1D3AC(_Unwind_Exception *exception_object)
{
  char v3 = *(const void **)(v1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::clear_value(uint64_t result)
{
  if (*(unsigned char *)(result + 20)) {
    *(unsigned char *)(result + 20) = 0;
  }
  return result;
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 20);
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  v7[0] = &unk_1F1487618;
  v7[1] = 0;
  CFTypeRef v8 = a2;
  if (*(unsigned char *)(a1 + 20)) {
    *(unsigned char *)(a1 + 20) = 0;
  }
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    CFNumberRef v3 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(*v8, *(const void **)(a1 + 8));
    if (!v3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(_DWORD *)(a1 + 16) = applesauce::CF::convert_to<unsigned int,0>(v3);
    uint64_t v4 = 1;
    *(unsigned char *)(a1 + 20) = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v7);
  return v4;
}

BOOL applesauce::CF::details::has_key<__CFString const*&>(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryContainsKey(theDict, a2) != 0;
    }
  }
  return result;
}

const void *applesauce::CF::details::at_key<__CFString const*&>(CFDictionaryRef theDict, const void *a2)
{
  BOOL result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryGetValue(theDict, a2);
    }
  }
  return result;
}

void DSP_Dictionariable::SingleKvp<unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (*(unsigned char *)(a1 + 20))
  {
    CFNumberRef v3 = *(const void **)(a1 + 8);
    int valuePtr = *(_DWORD *)(a1 + 16);
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFNumberRef v5 = v4;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::NumberRef>(*a2, v3, v4);
    CFRelease(v5);
  }
}

void sub_1BAB1D630(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::NumberRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void DSP_Dictionariable::SingleKvp<unsigned int>::~SingleKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);

  JUMPOUT(0x1C1859840);
}

void sub_1BAB1D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BAB1D960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &,applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

DSP_Host_Types::IOContextDescription *DSP_Host_Types::IOContextDescription::IOContextDescription(DSP_Host_Types::IOContextDescription *this, const char *__s)
{
  if (__s)
  {
    CFIndex v4 = strlen(__s);
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v5 = 0;
  }
  *(void *)this = &unk_1F1486910;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)this + 8, v5);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)this = &unk_1F14868D0;
  *((void *)this + 5) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = (char *)this + 32;
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::IOContextDescription *)((char *)this + 48), "io context input format");
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::IOContextDescription *)((char *)this + 200), "io context output format");
  std::string::basic_string[abi:ne180100]<0>(__p, "io context buffer size");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 44, (uint64_t)__p);
  *((void *)this + 44) = &unk_1F1487570;
  *((unsigned char *)this + 368) = 0;
  *((unsigned char *)this + 372) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "io context maximum buffer size");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 47, (uint64_t)__p);
  *((void *)this + 47) = &unk_1F1487570;
  *((unsigned char *)this + 392) = 0;
  *((unsigned char *)this + 396) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration((DSP_Host_Types::IOContextDescription *)((char *)this + 400), "io context output client virtual layout");
  *((void *)this + 67) = 0;
  *(_OWORD *)((char *)this + 520) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "isolated audio use case id");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 68, (uint64_t)__p);
  *((void *)this + 68) = &unk_1F1487570;
  *((unsigned char *)this + 560) = 0;
  *((unsigned char *)this + 564) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *(_OWORD *)((char *)this + 568) = 0u;
  return this;
}

void sub_1BAB1DE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_1BAB1DF08(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAB1DEDCLL);
}

void sub_1BAB1DF20()
{
}

void sub_1BAB1DF28()
{
}

void sub_1BAB1DF30()
{
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>(uint64_t a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *(void *)a1 = cf;
  *(unsigned char *)(a1 + 8) = 1;
  return a1;
}

DSP_Host_Types::FormatDescription *DSP_Host_Types::FormatDescription::FormatDescription(DSP_Host_Types::FormatDescription *this, const char *__s)
{
  if (__s)
  {
    CFIndex v4 = strlen(__s);
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v5 = 0;
  }
  *(void *)this = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)this + 8, v5);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)this = &unk_1F1486968;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample rate");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 3, (uint64_t)__p);
  *((void *)this + 3) = &unk_1F1486A00;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 48) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "channels");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 7, (uint64_t)__p);
  *((void *)this + 7) = &unk_1F1487570;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 76) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "is interleaved");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 10, (uint64_t)__p);
  *((void *)this + 10) = &unk_1F1486878;
  *((_WORD *)this + 48) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "common pcm format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 13, (uint64_t)__p);
  *((void *)this + 13) = &unk_1F1487570;
  *((unsigned char *)this + 120) = 0;
  *((unsigned char *)this + 124) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  DSP_Host_Types::FormatDescription::init_set(this);
  return this;
}

void sub_1BAB1E1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_1BAB1E288(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAB1E26CLL);
}

void sub_1BAB1E2A0()
{
}

void sub_1BAB1E2A8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAB1E274);
}

void sub_1BAB1E2C0()
{
}

DSP_Host_Types::AudioChannelConfiguration *DSP_Host_Types::AudioChannelConfiguration::AudioChannelConfiguration(DSP_Host_Types::AudioChannelConfiguration *this, const char *__s)
{
  if (__s)
  {
    CFIndex v4 = strlen(__s);
    CFStringRef v5 = CFStringCreateWithBytes(0, (const UInt8 *)__s, v4, 0x8000100u, 0);
    if (!v5)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v5 = 0;
  }
  *(void *)this = &unk_1F1486A98;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)this + 8, v5);
  if (v5) {
    CFRelease(v5);
  }
  *(void *)this = &unk_1F1486A58;
  std::string::basic_string[abi:ne180100]<0>(__p, "channel layout tag");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 3, (uint64_t)__p);
  *((void *)this + 3) = &unk_1F1487570;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 44) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "channel bitmap");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 6, (uint64_t)__p);
  *((void *)this + 6) = &unk_1F1487570;
  *((unsigned char *)this + 64) = 0;
  *((unsigned char *)this + 68) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "channel description count");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 9, (uint64_t)__p);
  *((void *)this + 9) = &unk_1F1487570;
  *((unsigned char *)this + 88) = 0;
  *((unsigned char *)this + 92) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  return this;
}

void sub_1BAB1E4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  _Unwind_Resume(a1);
}

void sub_1BAB1E540(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAB1E52CLL);
}

void sub_1BAB1E558()
{
}

void DSP_Host_Types::AudioChannelConfiguration::~AudioChannelConfiguration(DSP_Host_Types::AudioChannelConfiguration *this)
{
  *(void *)this = &unk_1F1486A58;
  uint64_t v2 = (DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 96);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486A98;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1486A58;
  uint64_t v2 = (DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 96);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::AudioChannelConfiguration *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486A98;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::FormatDescription::~FormatDescription(DSP_Host_Types::FormatDescription *this)
{
  *(void *)this = &unk_1F1486968;
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 80));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 56));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 24));
  *(void *)this = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1486968;
  uint64_t v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 104));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 80));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 56));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::FormatDescription *)((char *)this + 24));
  *(void *)this = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_Dictionariable::SingleKvp<double>::clear_value(uint64_t result)
{
  if (*(unsigned char *)(result + 24)) {
    *(unsigned char *)(result + 24) = 0;
  }
  return result;
}

uint64_t DSP_Dictionariable::SingleKvp<double>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t DSP_Dictionariable::SingleKvp<double>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  v7[0] = &unk_1F1487618;
  v7[1] = 0;
  CFTypeRef v8 = a2;
  if (*(unsigned char *)(a1 + 24)) {
    *(unsigned char *)(a1 + 24) = 0;
  }
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    CFNumberRef v3 = (const __CFNumber *)applesauce::CF::details::at_key<__CFString const*&>(*v8, *(const void **)(a1 + 8));
    if (!v3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(double *)(a1 + 16) = applesauce::CF::convert_to<double,0>(v3);
    uint64_t v4 = 1;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v7);
  return v4;
}

void DSP_Dictionariable::SingleKvp<double>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    CFNumberRef v3 = *(const void **)(a1 + 8);
    uint64_t valuePtr = *(void *)(a1 + 16);
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
    if (!v4)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFNumberRef v5 = v4;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::NumberRef>(*a2, v3, v4);
    CFRelease(v5);
  }
}

void sub_1BAB1E87C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void DSP_Dictionariable::SingleKvp<double>::~SingleKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_Dictionariable::SingleKvp<BOOL>::clear_value(uint64_t result)
{
  if (*(unsigned char *)(result + 17)) {
    *(unsigned char *)(result + 17) = 0;
  }
  return result;
}

uint64_t DSP_Dictionariable::SingleKvp<BOOL>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 17);
}

uint64_t DSP_Dictionariable::SingleKvp<BOOL>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  v7[0] = &unk_1F1487618;
  v7[1] = 0;
  CFTypeRef v8 = a2;
  if (*(unsigned char *)(a1 + 17)) {
    *(unsigned char *)(a1 + 17) = 0;
  }
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    CFBooleanRef v3 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const*&>(*v8, *(const void **)(a1 + 8));
    if (!v3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    *(_WORD *)(a1 + 16) = applesauce::CF::convert_to<BOOL,0>(v3) | 0x100;
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v7);
  return v4;
}

void DSP_Dictionariable::SingleKvp<BOOL>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (*(unsigned char *)(a1 + 17))
  {
    if (*(unsigned char *)(a1 + 16)) {
      uint64_t v2 = (const void **)MEMORY[0x1E4F1CFD8];
    }
    else {
      uint64_t v2 = (const void **)MEMORY[0x1E4F1CFC0];
    }
    CFBooleanRef v3 = *v2;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(*a2, *(const void **)(a1 + 8), *v2);
    if (v3) {
      CFRelease(v3);
    }
  }
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::BooleanRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void DSP_Dictionariable::SingleKvp<BOOL>::~SingleKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);

  JUMPOUT(0x1C1859840);
}

void std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    CFNumberRef v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = *--v4;
        uint64_t v6 = v7;
        *uint64_t v4 = 0;
        if (v7) {
          std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](v6);
        }
      }
      while (v4 != v2);
      CFNumberRef v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__swap_out_circular_buffer(void *result, void *a2)
{
  CFBooleanRef v3 = (void *)*result;
  uint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *--v2;
    void *v2 = 0;
    *(void *)(v4 - 8) = v5;
    v4 -= 8;
  }
  a2[1] = v4;
  uint64_t v6 = (void *)*result;
  *BOOL result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::DSP_HAL_Mock_Callbacks(HAL_DSP_IOCallbacks &,DSP_HAL_Mock_FeatureFlag)::{lambda(std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag> &)#1},std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag>>::perform(int *a1)
{
  return (*(uint64_t (**)(void, int *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void DSP_HAL_Mock_Callbacks::DSP_HAL_Mock_Callbacks(HAL_DSP_IOCallbacks &,DSP_HAL_Mock_FeatureFlag)::{lambda(std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag> &)#1}::operator()(AMCP::Log::Scope_Registry *a1, int *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v4 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v5 = *(unsigned char *)a1;
  if (os_log_type_enabled(v4, v5))
  {
    int v6 = *a2;
    uint64_t v7 = *((void *)a2 + 1);
    int v8 = a2[4];
    int v9 = a2[5];
    LODWORD(v10) = 67109890;
    HIDWORD(v10) = v6;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v7;
    __int16 v12 = 1024;
    int v13 = v8;
    __int16 v14 = 1024;
    int v15 = v9;
    _os_log_impl(&dword_1BAA78000, v4, v5, "%6u %32s:%-5d DSP_HAL_MockCallbacks - configured Mock DSP IO with feature %d", (uint8_t *)&v10, 0x1Eu);
  }
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::DSP_HAL_Mock_Callbacks(HAL_DSP_IOCallbacks &,DSP_HAL_Mock_FeatureFlag)::{lambda(std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag> &)#1},std::tuple<unsigned int,char const*,int,DSP_HAL_Mock_FeatureFlag>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_HAL_Mock_Callbacks::onEndProcessing(DSP_HAL_Mock_Callbacks *this)
{
  uint64_t result = *((void *)this + 60);
  if (result) {
    return std::function<void ()(BOOL)>::operator()(result, 0);
  }
  return result;
}

uint64_t std::function<void ()(BOOL)>::operator()(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

void DSP_HAL_Mock_Callbacks::onClientIO(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  uint64_t v8 = a6;
  uint64_t v9 = a5;
  unint64_t v10 = a4;
  uint64_t v11 = a1;
  uint64_t v126 = *MEMORY[0x1E4F143B8];
  uint64_t v105 = a3;
  unint64_t v106 = a4;
  uint64_t v107 = a5;
  uint64_t v108 = a6;
  uint64_t v109 = a7;
  if ((*((unsigned char *)a1 + 353) & 0x20) != 0)
  {
    ++DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::heart;
    HIDWORD(v12) = -1030792151
                 * DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::heart
                 + 85899344;
    LODWORD(v12) = HIDWORD(v12);
    if ((v12 >> 3) <= 0x147AE14)
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
      int v13 = (caulk::concurrent::messenger *)*((void *)v121 + 1);
      __int16 v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      unint64_t v16 = 0;
      int v17 = 0;
      int v18 = 47;
      do
      {
        uint64_t v19 = &aLibraryCachesC_10[v16];
        if (v18 == 47) {
          int v17 = &aLibraryCachesC_10[v16];
        }
        int v18 = v19[1];
        if (!v19[1]) {
          break;
        }
        BOOL v20 = v16++ >= 0xFFF;
      }
      while (!v20);
      if (v17) {
        integer_t v21 = v17 + 1;
      }
      else {
        integer_t v21 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
      }
      int v22 = (void *)((char *)v11 + 392);
      if (*((char *)v11 + 415) < 0) {
        int v22 = (void *)*v22;
      }
      uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v23 + 16) = 0;
      *(unsigned char *)(v23 + 20) = 2;
      *(_DWORD *)(v23 + 24) = v15;
      *(void *)(v23 + 32) = v21;
      *(_DWORD *)(v23 + 40) = 38;
      *(void *)(v23 + 48) = v22;
      *(void *)uint64_t v23 = &unk_1F145E288;
      *(void *)(v23 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v13, (caulk::concurrent::message *)v23);
      a1 = (AMCP::Log::Scope_Registry *)v122;
      if ((void)v122) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
      }
    }
  }
  if (*((unsigned char *)v11 + 317))
  {
    if ((*((unsigned char *)v11 + 353) & 0x20) != 0)
    {
      unsigned __int8 v24 = atomic_load((unsigned __int8 *)v11 + 316);
      if ((v24 & 1) == 0 && !*((unsigned char *)v11 + 416))
      {
        *((unsigned char *)v11 + 416) = 1;
        AMCP::Log::Scope_Registry::get(a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
        uint64_t v25 = (caulk::concurrent::messenger *)*((void *)v121 + 1);
        int v26 = pthread_self();
        mach_port_t v27 = pthread_mach_thread_np(v26);
        unint64_t v28 = 0;
        int v29 = 0;
        int v30 = 47;
        do
        {
          uint64_t v31 = &aLibraryCachesC_10[v28];
          if (v30 == 47) {
            int v29 = &aLibraryCachesC_10[v28];
          }
          int v30 = v31[1];
          if (!v31[1]) {
            break;
          }
          BOOL v20 = v28++ >= 0xFFF;
        }
        while (!v20);
        uint64_t v32 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
        if (v29) {
          int v33 = v29 + 1;
        }
        else {
          int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
        }
        *(_DWORD *)(v32 + 16) = 0;
        *(unsigned char *)(v32 + 20) = 2;
        *(_DWORD *)(v32 + 24) = v27;
        *(void *)(v32 + 32) = v33;
        *(_DWORD *)(v32 + 40) = 51;
        *(void *)uint64_t v32 = &unk_1F145E2E0;
        *(void *)(v32 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v25, (caulk::concurrent::message *)v32);
        a1 = (AMCP::Log::Scope_Registry *)v122;
        if ((void)v122) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
        }
      }
      unint64_t v10 = v106;
      uint64_t v9 = v107;
      uint64_t v8 = v108;
      uint64_t v7 = v109;
      if (!v107 || !v106 || !v109 || !v108)
      {
        AMCP::Log::Scope_Registry::get(a1);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
        __int16 v34 = (caulk::concurrent::messenger *)*((void *)v121 + 1);
        int v35 = pthread_self();
        mach_port_t v36 = pthread_mach_thread_np(v35);
        unint64_t v37 = 0;
        mach_port_t v38 = 0;
        int v39 = 47;
        do
        {
          uint64_t v40 = &aLibraryCachesC_10[v37];
          if (v39 == 47) {
            mach_port_t v38 = &aLibraryCachesC_10[v37];
          }
          int v39 = v40[1];
          if (!v40[1]) {
            break;
          }
          BOOL v20 = v37++ >= 0xFFF;
        }
        while (!v20);
        uint64_t v41 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
        if (v38) {
          uint64_t v42 = v38 + 1;
        }
        else {
          uint64_t v42 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
        }
        *(_DWORD *)(v41 + 16) = 0;
        *(unsigned char *)(v41 + 20) = 2;
        *(_DWORD *)(v41 + 24) = v36;
        *(void *)(v41 + 32) = v42;
        *(_DWORD *)(v41 + 40) = 55;
        *(void *)uint64_t v41 = &unk_1F145E338;
        *(void *)(v41 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v34, (caulk::concurrent::message *)v41);
        a1 = (AMCP::Log::Scope_Registry *)v122;
        if ((void)v122) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
        }
      }
    }
    if (v9 && v10 && v7 && v8)
    {
      if ((*((_DWORD *)v11 + 124) & 0xFFFFFFFE) != 4)
      {
        int v43 = *((_DWORD *)v11 + 88);
        if ((~v43 & 0x21) == 0)
        {
          if ((v43 & 0x2000) != 0)
          {
            unint64_t v57 = v10 - 1;
            if (v10 <= 1)
            {
              AMCP::Log::Scope_Registry::get(a1);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
              unsigned int v58 = (caulk::concurrent::messenger *)*((void *)v121 + 1);
              uint64_t v59 = pthread_self();
              mach_port_t v60 = pthread_mach_thread_np(v59);
              unint64_t v61 = 0;
              __int16 v62 = 0;
              int v63 = 47;
              do
              {
                BOOL v64 = &aLibraryCachesC_10[v61];
                if (v63 == 47) {
                  __int16 v62 = &aLibraryCachesC_10[v61];
                }
                int v63 = v64[1];
                if (!v64[1]) {
                  break;
                }
                BOOL v20 = v61++ >= 0xFFF;
              }
              while (!v20);
              uint64_t v65 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
              if (v62) {
                uint64_t v66 = v62 + 1;
              }
              else {
                uint64_t v66 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
              }
              *(_DWORD *)(v65 + 16) = 0;
              *(unsigned char *)(v65 + 20) = 2;
              *(_DWORD *)(v65 + 24) = v60;
              *(void *)(v65 + 32) = v66;
              *(_DWORD *)(v65 + 40) = 93;
              *(_DWORD *)(v65 + 44) = v10;
              *(void *)uint64_t v65 = &unk_1F145E490;
              *(void *)(v65 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v58, (caulk::concurrent::message *)v65);
              a1 = (AMCP::Log::Scope_Registry *)v122;
              if ((void)v122) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
              }
            }
            if (v8 != 1)
            {
              AMCP::Log::Scope_Registry::get(a1);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
              std::logic_error v67 = (caulk::concurrent::messenger *)*((void *)v121 + 1);
              char v68 = pthread_self();
              mach_port_t v69 = pthread_mach_thread_np(v68);
              unint64_t v70 = 0;
              uint64_t v71 = 0;
              int v72 = 47;
              do
              {
                v73 = &aLibraryCachesC_10[v70];
                if (v72 == 47) {
                  uint64_t v71 = &aLibraryCachesC_10[v70];
                }
                int v72 = v73[1];
                if (!v73[1]) {
                  break;
                }
                BOOL v20 = v70++ >= 0xFFF;
              }
              while (!v20);
              uint64_t v74 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
              if (v71) {
                int v75 = v71 + 1;
              }
              else {
                int v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
              }
              *(_DWORD *)(v74 + 16) = 0;
              *(unsigned char *)(v74 + 20) = 2;
              *(_DWORD *)(v74 + 24) = v69;
              *(void *)(v74 + 32) = v75;
              *(_DWORD *)(v74 + 40) = 97;
              *(_DWORD *)(v74 + 44) = v8;
              *(void *)uint64_t v74 = &unk_1F145E4E8;
              *(void *)(v74 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v67, (caulk::concurrent::message *)v74);
              a1 = (AMCP::Log::Scope_Registry *)v122;
              if ((void)v122) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
              }
            }
            if (v8 == 1 && v10 >= 2)
            {
              std::logic_error v76 = (int *)(v9 + 144);
              char v77 = 1;
              do
              {
                int v78 = *v76;
                v76 += 20;
                v77 &= *(_DWORD *)(v9 + 64) == v78;
                --v57;
              }
              while (v57);
              if ((v77 & 1) == 0)
              {
                AMCP::Log::Scope_Registry::get(a1);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v121, "com.apple.coreaudio", "AMCP");
                int64x2_t v79 = (caulk::concurrent::messenger *)*((void *)v121 + 1);
                uint64_t v80 = pthread_self();
                mach_port_t v81 = pthread_mach_thread_np(v80);
                unint64_t v82 = 0;
                long long v83 = 0;
                int v84 = 47;
                do
                {
                  uint64_t v85 = &aLibraryCachesC_10[v82];
                  if (v84 == 47) {
                    long long v83 = &aLibraryCachesC_10[v82];
                  }
                  int v84 = v85[1];
                  if (!v85[1]) {
                    break;
                  }
                  BOOL v20 = v82++ >= 0xFFF;
                }
                while (!v20);
                uint64_t v86 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
                if (v83) {
                  uint64_t v87 = v83 + 1;
                }
                else {
                  uint64_t v87 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
                }
                *(_DWORD *)(v86 + 16) = 0;
                *(unsigned char *)(v86 + 20) = 2;
                *(_DWORD *)(v86 + 24) = v81;
                *(void *)(v86 + 32) = v87;
                *(_DWORD *)(v86 + 40) = 114;
                *(void *)uint64_t v86 = &unk_1F145E540;
                *(void *)(v86 + 8) = 0;
                caulk::concurrent::messenger::enqueue(v79, (caulk::concurrent::message *)v86);
                if ((void)v122) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122);
                }
              }
            }
          }
          if (v10 >= 2)
          {
            int v44 = *(_DWORD *)(v9 + 64);
            if (v44 == *(_DWORD *)(v9 + 144))
            {
              int v45 = *(_DWORD **)(v9 + 72);
              long long v122 = 0u;
              long long v123 = 0u;
              long long v124 = 0u;
              uint64_t v121 = &unk_1F145E598;
              v125 = v45;
              int v46 = *(_DWORD **)(v9 + 152);
              long long v117 = 0u;
              long long v118 = 0u;
              long long v119 = 0u;
              __ns.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)&unk_1F145E598;
              v120 = v46;
              if ((*((unsigned char *)v11 + 353) & 0x20) != 0)
              {
                BOOL is_every_sample = DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample((uint64_t)&__ns, 0.0);
                if (is_every_sample)
                {
                  ++DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent;
                  HIDWORD(v48) = -1030792151
                               * DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent
                               + 85899344;
                  LODWORD(v48) = HIDWORD(v48);
                  if ((v48 >> 3) <= 0x147AE14)
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_every_sample);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v114, "com.apple.coreaudio", "AMCP");
                    long long v49 = *(caulk::concurrent::messenger **)(v114 + 8);
                    char v113 = 2;
                    uint64_t v50 = pthread_self();
                    mach_port_t v51 = pthread_mach_thread_np(v50);
                    unint64_t v52 = 0;
                    unint64_t v53 = 0;
                    int v54 = 47;
                    do
                    {
                      long long v55 = &aLibraryCachesC_10[v52];
                      if (v54 == 47) {
                        unint64_t v53 = &aLibraryCachesC_10[v52];
                      }
                      int v54 = v55[1];
                      if (!v55[1]) {
                        break;
                      }
                      BOOL v20 = v52++ >= 0xFFF;
                    }
                    while (!v20);
                    if (v53) {
                      mach_port_t v56 = v53 + 1;
                    }
                    else {
                      mach_port_t v56 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
                    }
                    LODWORD(v110) = v51;
                    *((void *)&v110 + 1) = v56;
                    int v111 = 154;
                    int v112 = DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent;
                    caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>(v49, &v113, &v110);
                    if (v115) {
                      std::__shared_weak_count::__release_shared[abi:ne180100](v115);
                    }
                  }
                }
                else
                {
                  DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::referenceSilent = 0;
                }
              }
              v88 = v120;
              v89 = v125;
              LODWORD(v90) = *v125;
              if (*v125 >= *v120) {
                uint64_t v90 = *v120;
              }
              else {
                uint64_t v90 = v90;
              }
              if (v90)
              {
                for (uint64_t i = 0; i != v90; ++i)
                {
                  if (v44)
                  {
                    int v92 = 0;
                    v93 = &v89[4 * i];
                    v94 = &v88[4 * i];
                    uint64_t v95 = v93[2];
                    uint64_t v96 = v94[2];
                    if (v95 >= v96) {
                      unsigned int v97 = v94[2];
                    }
                    else {
                      unsigned int v97 = v93[2];
                    }
                    uint64_t v98 = *((void *)v93 + 2);
                    uint64_t v99 = *((void *)v94 + 2);
                    uint64_t v100 = 4 * v95;
                    uint64_t v101 = 4 * v96;
                    do
                    {
                      if (v97)
                      {
                        uint64_t v102 = 0;
                        do
                        {
                          *(float *)(v98 + v102) = *(float *)(v99 + v102) + *(float *)(v98 + v102);
                          v102 += 4;
                        }
                        while (4 * v97 != v102);
                      }
                      ++v92;
                      v98 += v100;
                      v99 += v101;
                    }
                    while (v92 != v44);
                  }
                }
              }
              DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&__ns);
              DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&v121);
            }
          }
        }
      }
      DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(&v105);
      if (*((void *)v11 + 48))
      {
        __ns.__rep_ = 0;
        uint64_t v121 = &unk_1F145E390;
        *(void *)&long long v122 = &__ns;
        *((void *)&v122 + 1) = (char *)v11 + 360;
        *(void *)&long long v123 = &v121;
        DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer((uint64_t)&v105, (uint64_t)&v121);
        std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](&v121);
      }
      if ((~*((_DWORD *)v11 + 88) & 0x801) == 0)
      {
        __ns.__rep_ = 100000000;
        std::this_thread::sleep_for (&__ns);
      }
      uint64_t v103 = *((void *)v11 + 56);
      if (v103) {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v103 + 48))(v103, &v105, (uint64_t)v11 + 488);
      }
      uint64_t v104 = *((void *)v11 + 43);
      if (v104) {
        (*(void (**)(uint64_t))(*(void *)v104 + 48))(v104);
      }
    }
  }
  else
  {
    DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>((uint64_t)&v105);
  }
}

void sub_1BAB1F91C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, char a18, std::__shared_weak_count *a19, long long a20,int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&a20);
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(&a27);
  if (a2 == 1)
  {
    int v29 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a14, "com.apple.coreaudio", "AMCP");
    int v30 = *(caulk::concurrent::messenger **)(a14 + 8);
    a18 = 2;
    uint64_t v31 = pthread_self();
    mach_port_t v32 = pthread_mach_thread_np(v31);
    unint64_t v33 = 0;
    __int16 v34 = 0;
    int v35 = 47;
    while (1)
    {
      mach_port_t v36 = &aLibraryCachesC_10[v33];
      if (v35 == 47) {
        __int16 v34 = &aLibraryCachesC_10[v33];
      }
      int v35 = v36[1];
      if (v36[1])
      {
        if (v33++ < 0xFFF) {
          continue;
        }
      }
      if (v34) {
        mach_port_t v38 = v34 + 1;
      }
      else {
        mach_port_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/DSP/Factories/DSP_HAL_MockFeature_Processors.mm";
      }
      uint64_t v39 = (*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)v29 + 16))(v29);
      LODWORD(a20) = v32;
      *((void *)&a20 + 1) = v38;
      a21 = 68;
      a22 = v39;
      caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>(v30, &a18, &a20);
      if (a15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a15);
      }
      __cxa_end_catch();
      JUMPOUT(0x1BAB1F85CLL);
    }
  }
  _Unwind_Resume(a1);
}

void *DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = &unk_1F1483F50;
  char v3 = 0;
  uint64_t v4 = &v2;
  DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(a1, (uint64_t)&v2);
  return std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](&v2);
}

void sub_1BAB1FB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F145E468;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F145E410;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v8) = 67109890;
    HIDWORD(v8) = v4;
    *(_WORD *)uint64_t v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    __int16 v12 = 2080;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d DSP_HAL_MockCallbacks::onClientIO - something went terribly wrong while mocking processing: %s", (uint8_t *)&v8, 0x22u);
  }
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_3,std::tuple<unsigned int,char const*,int,char const*>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  mach_port_t v15 = &unk_1F1483FE0;
  int v16 = 0;
  int v17 = &v15;
  DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer((uint64_t)a1, (uint64_t)&v15);
  uint64_t result = std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](&v15);
  char v11 = 1;
  if (a1[2] != a1[4])
  {
    v13[0] = &unk_1F1484060;
    v13[2] = &v11;
    uint64_t v14 = v13;
    unint64_t v3 = a1[1];
    unint64_t v4 = a1[3];
    if (v3 <= v4) {
      uint64_t v5 = a1[3];
    }
    else {
      uint64_t v5 = a1[1];
    }
    if (v4 >= v3) {
      unint64_t v6 = a1[1];
    }
    else {
      unint64_t v6 = a1[3];
    }
    if (v5)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      while (v8 >= v6)
      {
        if (v8 < a1[1])
        {
          uint64_t v10 = 0;
          uint64_t v9 = a1[2] + 80 * v8;
          goto LABEL_16;
        }
        if (v8 < a1[3])
        {
          uint64_t v9 = 0;
          uint64_t v10 = a1[4] + 80 * v8;
          goto LABEL_16;
        }
LABEL_18:
        ++v8;
        v7 += 80;
        if (v5 == v8) {
          return std::__function::__value_func<void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v13);
        }
      }
      uint64_t v9 = a1[2] + v7;
      uint64_t v10 = a1[4] + v7;
LABEL_16:
      mach_port_t v15 = (void *)v9;
      uint64_t v12 = v10;
      if (!v14) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, void **, uint64_t *))(*v14 + 48))(v14, &v15, &v12);
      goto LABEL_18;
    }
    return std::__function::__value_func<void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v13);
  }
  return result;
}

void sub_1BAB1FFFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(uint64_t a1, uint64_t a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v11, a2);
  uint64_t v13 = 0;
  unint64_t v3 = operator new(0x28uLL);
  *(void *)unint64_t v3 = &unk_1F1483EC0;
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v3 + 8, (uint64_t)v11);
  uint64_t v13 = v3;
  uint64_t v6 = a1 + 24;
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v6 + 8);
  uint64_t v7 = (void *)(*(uint64_t (**)(void *))(*(void *)v3 + 16))(v3);
  mach_port_t v15 = v7;
  if (v5)
  {
    uint64_t v8 = 80 * v5;
    do
    {
      if (!v7) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, uint64_t))(*v7 + 48))(v7, v4);
      v4 += 80;
      uint64_t v7 = v15;
      v8 -= 80;
    }
    while (v8);
  }
  if (v7)
  {
    if (v7 == v14)
    {
      v17[0] = v16;
      (*(void (**)(void *, void *))(*v15 + 24))(v15, v16);
      goto LABEL_11;
    }
    uint64_t v9 = &v15;
    v17[0] = v7;
  }
  else
  {
    uint64_t v9 = v17;
  }
  void *v9 = 0;
LABEL_11:
  std::__function::__value_func<void ()(AMCP::Proc_Stream &)>::~__value_func[abi:ne180100](v16);
  std::__function::__value_func<void ()(AMCP::Proc_Stream &)>::~__value_func[abi:ne180100](v14);
  std::__function::__value_func<void ()(AMCP::Proc_Stream &)>::~__value_func[abi:ne180100](v12);
  return std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](v11);
}

void sub_1BAB201C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(AMCP::Proc_Stream &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::target_type()
{
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE15for_each_bufferENS2_10StreamSideENSt3__18functionIFvRN4AMCP11Proc_StreamER11AudioBufferEEEEUlS8_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::operator()(void *result, uint64_t a2)
{
  v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int **)(a2 + 72);
  if (v2)
  {
    unsigned int v5 = *v2;
    uint64_t v3 = v2 + 2;
    uint64_t v4 = v5;
    std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(result + 1));
    if (v5)
    {
      uint64_t v6 = 16 * v4;
      do
      {
        if (!v10) {
          std::__throw_bad_function_call[abi:ne180100]();
        }
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v10 + 48))(v10, a2, v3);
        v3 += 4;
        v6 -= 16;
      }
      while (v6);
    }
    uint64_t v11 = a2;
    uint64_t v7 = (void *)std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v9);
    std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](v7);
    return std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_1BAB20570(_Unwind_Exception *exception_object)
{
}

void std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1483EC0;
  return std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F1483EC0;
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAB20654(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::~__func(void *a1)
{
  *a1 = &unk_1F1483EC0;
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1},std::allocator<DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::for_each_buffer(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::StreamSide,std::function<void ()(AMCP::Proc_Stream &,AudioBuffer &)>)::{lambda(AMCP::Proc_Stream &)#1}>,void ()(AMCP::Proc_Stream &)>::~__func(void *a1)
{
  *a1 = &unk_1F1483EC0;
  std::__function::__value_func<void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target_type()
{
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils16SimulatedLatencyIfLNS_16InterleavePolicyE0EE15copy_with_delayERNS_18AMCP_IOData_HelperILS1_0EEEEUlRN4AMCP11Proc_StreamER11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void **)(a1 + 16);
  unint64_t v5 = **(void **)(a1 + 8);
  if (v5 <= (uint64_t)(v4[1] - *v4) >> 3) {
    operator new();
  }
  uint64_t v6 = *(void *)(*v4 + 8 * v5);
  uint64_t v7 = *a3;
  unint64_t v8 = *(void *)(v6 + 72);
  if (v8 != v7)
  {
    DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine::init(v6, ((uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 2) / v8, v7);
    uint64_t v6 = *(void *)(*v4 + 8 * **(void **)(a1 + 8));
  }
  uint64_t v9 = (char *)*((void *)a3 + 1);
  int64_t v10 = (unint64_t)a3[1] >> 2;
  unint64_t v11 = v10;
  uint64_t v12 = v9;
  do
  {
    if (!(v11 | v10)) {
      break;
    }
    unint64_t v13 = DSP_HAL_Bypass_Utils::SimpleRing<float>::write_advance((void *)v6, v9, v11);
    v9 += 4 * v13;
    uint64_t v14 = v10 >= (v9 - v12) >> 2 ? (v9 - v12) >> 2 : v10;
    int64_t v15 = *(void *)(v6 + 64);
    if (v15)
    {
      int v17 = *(uint64_t **)(v6 + 48);
      int v16 = *(const void **)(v6 + 56);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1] - (void)v16;
      int64_t v20 = v15 - (v19 >> 2);
      if (v15 < v20) {
        int64_t v20 = *(void *)(v6 + 64);
      }
      BOOL v21 = v15 <= v19 >> 2;
      if (v15 >= v19 >> 2) {
        int64_t v15 = v19 >> 2;
      }
      int v22 = v21 ? 0 : (const void *)v18;
      unint64_t v23 = v21 ? 0 : v20;
    }
    else
    {
      int v22 = 0;
      unint64_t v23 = 0;
      int v16 = 0;
    }
    unint64_t v24 = v14 & ~(v14 >> 63);
    if (v15 >= v24) {
      uint64_t v25 = v14 & ~(v14 >> 63);
    }
    else {
      uint64_t v25 = v15;
    }
    memcpy(v12, v16, 4 * v25);
    if (v23 >= v24 - v25) {
      unint64_t v23 = v24 - v25;
    }
    int v26 = (AMCP::Log::Scope_Registry *)memcpy(&v12[4 * v25], v22, 4 * v23);
    unint64_t v27 = v23 + v25;
    uint64_t v28 = *(void *)(v6 + 56);
    *(void *)(v6 + 64) -= v27;
    uint64_t v29 = *(void *)(v6 + 40);
    *(void *)(v6 + 56) = **(void **)(v6 + 48)
                         + 4
                         * ((uint64_t)(v27 + ((v28 - **(void **)(v6 + 48)) >> 2))
                          % ((uint64_t)(*(void *)(*(void *)(v6 + 48) + 8) - **(void **)(v6 + 48)) >> 2));
    *(void *)(v6 + 40) = v29 + v27;
    *(void *)(v6 + 32) = **(void **)(v6 + 24)
                         + 4
                         * (((uint64_t)(*(void *)(v6 + 32) - **(void **)(v6 + 24)) >> 2)
                          % ((uint64_t)(*(void *)(*(void *)(v6 + 24) + 8) - **(void **)(v6 + 24)) >> 2));
    v12 += 4 * v27;
    if (v9 < v12)
    {
      AMCP::Log::Scope_Registry::get(v26);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v30 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      if (*(void *)v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v31 = pthread_self();
        mach_port_t v32 = pthread_mach_thread_np(v31);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v32;
        *(_WORD *)int v35 = 2080;
        *(void *)&v35[2] = "DSP_HAL_Bypass_Utilities.h";
        __int16 v36 = 1024;
        int v37 = 695;
        _os_log_debug_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d SimulatedLatency::delay_samples - delay line corruption, read overwriting unwritten write data\n", buf, 0x18u);
      }
    }
    v11 -= v13;
    v10 -= v27;
  }
  while (v27 + v13);
  ++**(void **)(a1 + 8);
}

void sub_1BAB20B44(_Unwind_Exception *a1)
{
  std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine::init(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(a1 + 72) = a3;
  unint64_t v4 = a3 * a2;
  unint64_t v5 = 2 * a3 * a2;
  LODWORD(__p) = 0;
  std::vector<float>::resize((char **)a1, v5, &__p);
  *(void *)(a1 + 32) = **(void **)(a1 + 24);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = **(void **)(a1 + 48);
  *(void *)(a1 + 64) = 0;
  int v6 = 0;
  std::vector<float>::vector(&__p, v4, &v6);
  DSP_HAL_Bypass_Utils::SimpleRing<float>::write_advance((void *)a1, (char *)__p, (v8 - (unsigned char *)__p) >> 2);
  if (__p)
  {
    unint64_t v8 = __p;
    operator delete(__p);
  }
}

unint64_t DSP_HAL_Bypass_Utils::SimpleRing<float>::write_advance(void *a1, char *__src, unint64_t a3)
{
  uint64_t v6 = a1[5];
  if (v6)
  {
    uint64_t v8 = a1[3];
    uint64_t v7 = (void *)a1[4];
    uint64_t v9 = *(void *)(v8 + 8) - (void)v7;
    uint64_t v10 = v9 >> 2;
    BOOL v11 = v6 <= v9 >> 2;
    if (v6 >= v9 >> 2) {
      unint64_t v12 = v9 >> 2;
    }
    else {
      unint64_t v12 = v6;
    }
    if (v11)
    {
      unint64_t v13 = 0;
      unint64_t v14 = 0;
    }
    else
    {
      unint64_t v13 = *(void **)v8;
      if (v6 >= v6 - v10) {
        unint64_t v14 = v6 - v10;
      }
      else {
        unint64_t v14 = v6;
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v7 = 0;
  }
  if (v12 >= a3) {
    unint64_t v15 = a3;
  }
  else {
    unint64_t v15 = v12;
  }
  memcpy(v7, __src, 4 * v15);
  if (v14 >= a3 - v15) {
    unint64_t v16 = a3 - v15;
  }
  else {
    unint64_t v16 = v14;
  }
  memcpy(v13, &__src[4 * v15], 4 * v16);
  unint64_t result = v16 + v15;
  uint64_t v18 = (uint64_t *)a1[6];
  uint64_t v19 = a1[8];
  uint64_t v20 = *v18;
  uint64_t v21 = (a1[7] - *v18) >> 2;
  uint64_t v22 = (v18[1] - *v18) >> 2;
  unint64_t v23 = a1[5] - (v16 + v15);
  a1[4] = *(void *)a1[3]
        + 4
        * ((uint64_t)(v16 + v15 + ((uint64_t)(a1[4] - *(void *)a1[3]) >> 2))
         % ((uint64_t)(*(void *)(a1[3] + 8) - *(void *)a1[3]) >> 2));
  a1[5] = v23;
  a1[7] = v20 + 4 * (v21 % v22);
  a1[8] = v19 + v16 + v15;
  return result;
}

void std::vector<float>::resize(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6 = *a1;
  unint64_t v5 = a1[1];
  unint64_t v7 = (v5 - *a1) >> 2;
  if (a2 <= v7)
  {
    if (a2 < v7) {
      a1[1] = &v6[4 * a2];
    }
  }
  else
  {
    uint64_t v9 = a1[2];
    if (a2 - v7 <= (v9 - v5) >> 2)
    {
      unint64_t v23 = &v5[4 * (a2 - v7)];
      uint64_t v24 = 4 * a2 - 4 * v7;
      do
      {
        *(_DWORD *)unint64_t v5 = *a3;
        v5 += 4;
        v24 -= 4;
      }
      while (v24);
      a1[1] = v23;
    }
    else
    {
      if (a2 >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = v9 - v6;
      unint64_t v11 = (v9 - v6) >> 1;
      if (v11 <= a2) {
        unint64_t v11 = a2;
      }
      if (v10 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v12);
      unint64_t v15 = &v13[4 * v7];
      unint64_t v16 = &v13[4 * a2];
      uint64_t v17 = 4 * a2 - 4 * v7;
      uint64_t v18 = v15;
      do
      {
        *(_DWORD *)uint64_t v18 = *a3;
        v18 += 4;
        v17 -= 4;
      }
      while (v17);
      uint64_t v19 = &v13[4 * v14];
      uint64_t v20 = *a1;
      for (uint64_t i = a1[1]; i != v20; i -= 4)
      {
        int v22 = *((_DWORD *)i - 1);
        *((_DWORD *)v15 - 1) = v22;
        v15 -= 4;
      }
      *a1 = v15;
      a1[1] = v16;
      a1[2] = v19;
      if (v20)
      {
        operator delete(v20);
      }
    }
  }
}

void *std::vector<float>::vector(void *a1, unint64_t a2, _DWORD *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](a1, a2);
    uint64_t v6 = (_DWORD *)a1[1];
    unint64_t v7 = &v6[a2];
    uint64_t v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1BAB20EB8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145E390;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F145E390;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_with_delay(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__func()
{
}

void *std::__function::__value_func<void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::target_type()
{
}

uint64_t std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE20copy_input_to_outputIfLNS2_12CopyStrategyE0EEEbbEUlPN4AMCP11Proc_StreamES7_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::operator()(void *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  if (*(void *)a2) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    unint64_t v5 = *(unsigned int **)(*(void *)a2 + 72);
    uint64_t v6 = *(unsigned int **)(v3 + 72);
    if (v5) {
      BOOL v7 = v6 == 0;
    }
    else {
      BOOL v7 = 1;
    }
    __int16 v34 = result;
    if (!v7)
    {
      unsigned int v8 = *v5;
      if (*v5)
      {
        unsigned int v9 = *v6;
        if (*v6)
        {
          uint64_t v10 = 0;
          if (v9 >= v8) {
            uint64_t v11 = v8;
          }
          else {
            uint64_t v11 = v9;
          }
          char v12 = v8 == v9;
          unint64_t v13 = v5 + 2;
          uint64_t v14 = v6 + 2;
          uint64_t v33 = v11;
          while (1)
          {
            unint64_t v15 = &v13[4 * v10];
            unint64_t v16 = &v14[4 * v10];
            uint64_t v17 = *v15;
            uint64_t v18 = *v16;
            if (v17 != v18) {
              break;
            }
            unsigned int v19 = v16[1];
            unsigned int v20 = v15[1];
            if (v19 >= v20) {
              size_t v21 = v20;
            }
            else {
              size_t v21 = v19;
            }
            __n128 result = memcpy(*((void **)v16 + 1), *((const void **)v15 + 1), v21);
            BOOL v22 = v15[1] == v16[1];
LABEL_42:
            v12 &= v22;
            if (++v10 == v11) {
              goto LABEL_45;
            }
          }
          if (v17)
          {
            unint64_t v23 = v13[4 * v10 + 1] / (unint64_t)(4 * v17);
            if (v18)
            {
LABEL_22:
              unint64_t v24 = v14[4 * v10 + 1] / (unint64_t)(4 * v18);
              goto LABEL_25;
            }
          }
          else
          {
            unint64_t v23 = 0;
            if (v18) {
              goto LABEL_22;
            }
          }
          unint64_t v24 = 0;
LABEL_25:
          if (v24 >= v23) {
            unint64_t v25 = v23;
          }
          else {
            unint64_t v25 = v24;
          }
          int v26 = *(char **)&v13[4 * v10 + 2];
          unint64_t v27 = *(char **)&v14[4 * v10 + 2];
          if (v26) {
            BOOL v28 = v27 == 0;
          }
          else {
            BOOL v28 = 1;
          }
          if (v28 || v25 == 0)
          {
            BOOL v22 = 0;
          }
          else
          {
            if (v18 < v17) {
              LODWORD(v17) = *v16;
            }
            size_t v30 = 4 * v17;
            do
            {
              __n128 result = memcpy(v27, v26, v30);
              v26 += 4 * *v15;
              v27 += 4 * *v16;
              --v25;
            }
            while (v25);
            BOOL v22 = 0;
            uint64_t v11 = v33;
          }
          goto LABEL_42;
        }
      }
    }
    char v12 = 0;
LABEL_45:
    uint64_t v31 = (unsigned char *)v34[2];
    if (*v31) {
      char v32 = v12;
    }
    else {
      char v32 = 0;
    }
    *uint64_t v31 = v32;
  }
  return result;
}

__n128 std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1484060;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1484060;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1},std::allocator<BOOL DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(BOOL)::{lambda(AMCP::Proc_Stream *,AMCP::Proc_Stream *)#1}>,void ()(AMCP::Proc_Stream *,AMCP::Proc_Stream *)>::~__func()
{
}

void *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target_type()
{
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE10set_outputIfEEvT_mEUlRN4AMCP11Proc_StreamER11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v4 = *(_DWORD **)(a3 + 8);
  if (v4)
  {
    size_t v5 = *(unsigned int *)(a3 + 4);
    if (*(float *)(a1 + 8) == 0.0)
    {
      bzero(v4, v5);
    }
    else if (v5 >= 4)
    {
      unint64_t v6 = (v5 >> 2) + 1;
      do
      {
        *v4++ = *(_DWORD *)(a1 + 8);
        --v6;
      }
      while (v6 > 1);
    }
  }
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483FE0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  *(void *)__n128 result = &unk_1F1483FE0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<float>(float,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__func()
{
}

BOOL DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(uint64_t a1, float a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  float v10 = a2;
  uint64_t v2 = *(unsigned int **)(a1 + 56);
  int v3 = *v2;
  BOOL v9 = *v2 != 0;
  v11[0] = &unk_1F145E680;
  v11[1] = &v9;
  _OWORD v11[2] = &v10;
  v11[3] = v11;
  if (v3)
  {
    std::__function::__value_func<void ()(AudioBuffer const&)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v11);
    uint64_t v4 = *v2;
    if (!v4)
    {
LABEL_13:
      std::__function::__value_func<void ()(AudioBuffer const&)>::~__value_func[abi:ne180100](v12);
      goto LABEL_14;
    }
    std::__function::__value_func<void ()(AudioBuffer const&)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v12);
    size_t v5 = v2 + 2;
    unint64_t v6 = &v14;
    uint64_t v7 = 16 * v4;
    do
    {
      if (!v14) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, unsigned int *))(*v14 + 48))(v14, v5);
      v5 += 4;
      v7 -= 16;
    }
    while (v7);
    if (v14)
    {
      if (v14 == v13)
      {
        v16[0] = v15;
        (*(void (**)(void *, void *))(v13[0] + 24))(v13, v15);
        goto LABEL_12;
      }
      v16[0] = v14;
    }
    else
    {
      unint64_t v6 = v16;
    }
    void *v6 = 0;
LABEL_12:
    std::__function::__value_func<void ()(AudioBuffer const&)>::~__value_func[abi:ne180100](v15);
    std::__function::__value_func<void ()(AudioBuffer const&)>::~__value_func[abi:ne180100](v13);
    goto LABEL_13;
  }
LABEL_14:
  std::__function::__value_func<void ()(AudioBuffer const&)>::~__value_func[abi:ne180100](v11);
  return v9;
}

void sub_1BAB21544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t caulk::concurrent::messenger::enqueue_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F145E768;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(void *)(v6 + 40) = *((void *)a3 + 2);
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F145E710;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

void *DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(void *a1)
{
  *a1 = &unk_1F145E1E0;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[1];
  if (v3)
  {
    a1[2] = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::rawSamples(uint64_t a1)
{
  return a1 + 8;
}

{
  return a1 + 8;
}

BOOL DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(uint64_t a1, float a2)
{
  uint64_t v4 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (*v4 == v4[1] || **(float **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) != a2) {
    return 0;
  }
  uint64_t v6 = *(float **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  long long v7 = *(float **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
  if (v6 == v7)
  {
    long long v7 = v6;
  }
  else
  {
    unsigned int v8 = v6 + 1;
    while (v8 != v7)
    {
      float v9 = *(v8 - 1);
      float v10 = *v8++;
      if (v9 != v10)
      {
        long long v7 = v8 - 2;
        return v7 == *(float **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
      }
    }
  }
  return v7 == *(float **)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) + 8);
}

uint64_t DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(uint64_t a1, float a2)
{
  uint64_t v4 = *(float **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  uint64_t v6 = *(void *)(result + 8) - (void)v4;
  if (v6 >= 1)
  {
    unint64_t v7 = ((unint64_t)v6 >> 2) + 1;
    do
    {
      *v4++ = a2;
      --v7;
    }
    while (v7 > 1);
  }
  return result;
}

void DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(void *a1)
{
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v8) = 67109890;
    HIDWORD(v8) = v4;
    *(_WORD *)float v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    __int16 v12 = 1024;
    int v13 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Mix reference mic mock reference has been silent for %d IO calls.", (uint8_t *)&v8, 0x1Eu);
  }
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_4,std::tuple<unsigned int,char const*,int,int>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__value_func<void ()(AudioBuffer const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(AudioBuffer const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::target_type()
{
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK20DSP_HAL_Bypass_Utils17ABL_EncapsulationIfLNS_16InterleavePolicyE0EE15is_every_sampleEfEUlRK11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(BOOL **)(result + 8);
  if (*v2)
  {
    unint64_t v3 = *(unsigned int *)(a2 + 4);
    if (v3 && (int v4 = *(float **)(a2 + 8), v5 = *v4, *v4 == **(float **)(result + 16)))
    {
      int v7 = &v4[v3 >> 2];
      if (v3 >= 4)
      {
        --v4;
        uint64_t v8 = 4 * (v3 >> 2) - 4;
        while (v8)
        {
          float v9 = v4[2];
          ++v4;
          v8 -= 4;
          BOOL v10 = v5 == v9;
          float v5 = v9;
          if (!v10) {
            goto LABEL_11;
          }
        }
        int v4 = v7;
      }
LABEL_11:
      BOOL v6 = v4 == v7;
    }
    else
    {
      BOOL v6 = 0;
    }
    BOOL *v2 = v6;
  }
  return result;
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145E680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F145E680;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::is_every_sample(float)::{lambda(AudioBuffer const&)#1}>,void ()(AudioBuffer const&)>::~__func()
{
}

void DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::rawSamples(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  AMCP::Log::Scope::get_os_log_t(*v4);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    uint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109890;
    HIDWORD(v4) = v3;
    *(_WORD *)float v5 = 2080;
    *(void *)&uint64_t v5[2] = "DSP_HAL_Bypass_Utilities.h";
    __int16 v6 = 1024;
    int v7 = 259;
    __int16 v8 = 2080;
    float v9 = "false";
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ABL_Encapsulation doesn't hold any samples on its own.", (uint8_t *)&v4, 0x22u);
  }

  abort();
}

void sub_1BAB21E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(uint64_t a1, float a2)
{
  v15[1] = *MEMORY[0x1E4F143B8];
  __int16 v8 = &unk_1F145E5F0;
  float v9 = a2;
  uint64_t v10 = &v8;
  uint64_t v2 = *(_DWORD **)(a1 + 56);
  if (v2 && *v2)
  {
    std::__function::__value_func<void ()(AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)&v8);
    uint64_t v3 = *v2;
    if (!v3)
    {
LABEL_14:
      std::__function::__value_func<void ()(AudioBuffer &)>::~__value_func[abi:ne180100](v11);
      return std::__function::__value_func<void ()(AudioBuffer &)>::~__value_func[abi:ne180100](&v8);
    }
    std::__function::__value_func<void ()(AudioBuffer &)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v11);
    int v4 = v2 + 2;
    float v5 = &v13;
    uint64_t v6 = 16 * v3;
    do
    {
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *, _DWORD *))(*v13 + 48))(v13, v4);
      v4 += 4;
      v6 -= 16;
    }
    while (v6);
    if (v13)
    {
      if (v13 == v12)
      {
        v15[0] = v14;
        (*(void (**)(void *, void *))(v12[0] + 24))(v12, v14);
        goto LABEL_13;
      }
      v15[0] = v13;
    }
    else
    {
      float v5 = v15;
    }
    *float v5 = 0;
LABEL_13:
    std::__function::__value_func<void ()(AudioBuffer &)>::~__value_func[abi:ne180100](v14);
    std::__function::__value_func<void ()(AudioBuffer &)>::~__value_func[abi:ne180100](v12);
    goto LABEL_14;
  }
  return std::__function::__value_func<void ()(AudioBuffer &)>::~__value_func[abi:ne180100](&v8);
}

void sub_1BAB22004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<void ()(AudioBuffer &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(AudioBuffer &)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::target_type()
{
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils17ABL_EncapsulationIfLNS_16InterleavePolicyE0EE9fill_withEfEUlR11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(unsigned int *)(a2 + 4);
  if (v2 >= 4)
  {
    uint64_t v3 = *(float **)(a2 + 8);
    unint64_t v4 = (v2 >> 2) + 1;
    do
    {
      float result = *(float *)(a1 + 8);
      *v3++ = result;
      --v4;
    }
    while (v4 > 1);
  }
  return result;
}

uint64_t std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F145E5F0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  *(void *)float result = &unk_1F145E5F0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1},std::allocator<DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::fill_with(float)::{lambda(AudioBuffer &)#1}>,void ()(AudioBuffer &)>::~__func()
{
}

void DSP_HAL_Bypass_Utils::ABL_Encapsulation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Encapsulation(void *a1)
{
  DSP_HAL_Bypass_Utils::ABL_Allocation<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::~ABL_Allocation(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_2,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  unint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)float v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Mix reference mic mock is expecting that all stream frame counts are equal", (uint8_t *)&v8, 0x18u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB223FC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_2,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_1,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  unint64_t v2 = *v9;
  AMCP::Log::Scope::get_os_log_t(*v9);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Mix reference mic mock is expecting 1 IO output stream, not %d", (uint8_t *)&v9, 0x1Eu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB22598(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_1,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_0,std::tuple<unsigned int,char const*,int,int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  unint64_t v2 = *v9;
  AMCP::Log::Scope::get_os_log_t(*v9);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Mix reference mic mock is expecting at least 2 IO input streams, not %d", (uint8_t *)&v9, 0x1Eu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB22734(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::mixReferenceWithMic(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &)::$_0,std::tuple<unsigned int,char const*,int,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_2,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  unint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)float v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d DSP_HAL_MockCallbacks::onClientIO - buffer data is invalid, nothing to process", (uint8_t *)&v8, 0x18u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB228C8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_2,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_1,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  unint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)float v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d DSP_HAL_MockCallbacks::onClientIO - ClientIO called without prior registration.", (uint8_t *)&v8, 0x18u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB22A5C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_1,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target_type()
{
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN20DSP_HAL_Bypass_Utils18AMCP_IOData_HelperILNS_16InterleavePolicyE0EE10set_outputIcEEvT_mEUlRN4AMCP11Proc_StreamER11AudioBufferE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  os_log_type_t v3 = *(void **)(a3 + 8);
  if (v3) {
    bzero(v3, *(unsigned int *)(a3 + 4));
  }
}

uint64_t std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483F50;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::__clone(uint64_t a1)
{
  float result = operator new(0x10uLL);
  *(void *)float result = &unk_1F1483F50;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void std::__function::__func<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1},std::allocator<void DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>(char,unsigned long)::{lambda(AMCP::Proc_Stream &,AudioBuffer &)#1}>,void ()(AMCP::Proc_Stream &,AudioBuffer &)>::~__func()
{
}

uint64_t caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  unint64_t v2 = *v9;
  AMCP::Log::Scope::get_os_log_t(*v9);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2080;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d [hal_dsp] Mock IO is being called for %s", (uint8_t *)&v9, 0x22u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB22CEC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<DSP_HAL_Mock_Callbacks::onClientIO(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)::$_0,std::tuple<unsigned int,char const*,int,char const*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_HAL_Mock_Callbacks::onBeginProcessing(DSP_HAL_Mock_Callbacks *this)
{
  uint64_t result = *((void *)this + 60);
  if (result) {
    return std::function<void ()(BOOL)>::operator()(result, 1);
  }
  return result;
}

void DSP_HAL_Mock_Callbacks::~DSP_HAL_Mock_Callbacks(DSP_HAL_Mock_Callbacks *this)
{
  DSP_HAL_Mock_Callbacks::~DSP_HAL_Mock_Callbacks(this);

  JUMPOUT(0x1C1859840);
}

{
  const void *v2;
  void **v3;

  *(void *)this = &unk_1F145E178;
  unint64_t v2 = (const void *)*((void *)this + 61);
  if (v2) {
    CFRelease(v2);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)this + 57);
  std::__function::__value_func<void ()(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0> &,applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)this + 53);
  if (*((char *)this + 415) < 0) {
    operator delete(*((void **)this + 49));
  }
  os_log_type_t v3 = (void **)((char *)this + 360);
  std::vector<std::unique_ptr<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine,std::default_delete<DSP_HAL_Bypass_Utils::SimulatedLatency<float,(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::InterleavedDelayLine>>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 40);
  *(void *)this = &unk_1F1483C38;
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((void *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((void *)this + 1);
}

void sub_1BAB23038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  DSP_Host_Types::NegotiateRequest::~NegotiateRequest((DSP_Host_Types::NegotiateRequest *)va);

  _Unwind_Resume(a1);
}

void DSP_Host_Types::NegotiateRequest::~NegotiateRequest(DSP_Host_Types::NegotiateRequest *this)
{
  *(void *)this = &unk_1F14867D0;
  unint64_t v2 = (DSP_Host_Types::NegotiateRequest *)((char *)this + 24);
  os_log_type_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::NegotiateRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::NegotiateRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  DSP_Dictionariable::DictionariableKvp *v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F14867D0;
  unint64_t v2 = (DSP_Host_Types::NegotiateRequest *)((char *)this + 24);
  os_log_type_t v3 = (void **)((char *)this + 656);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::NegotiateRequest *)((char *)this + 72));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Host_Types::NegotiateRequest *)((char *)this + 48));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v2);
  *(void *)this = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void sub_1BAB23558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  DSP_Host_Types::FormatDescription::~FormatDescription((DSP_Host_Types::FormatDescription *)&a12);
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse((DSP_Host_Types::NegotiateResponse *)&a31);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::ConfigurationChangeRequest>::operator applesauce::CF::DictionaryRef(applesauce::CF::DictionaryRef *a1, uint64_t a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary(a1, cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB23658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DSP_Host_Types::FormatDescription::FormatDescription(DSP_Host_Types::FormatDescription *this, const DSP_Host_Types::FormatDescription *a2)
{
  *((unsigned char *)this + 8) = 0;
  *((unsigned char *)this + 16) = 0;
  *(void *)this = &unk_1F1486968;
  std::string::basic_string[abi:ne180100]<0>(__p, "sample rate");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 3, (uint64_t)__p);
  *((void *)this + 3) = &unk_1F1486A00;
  *((unsigned char *)this + 40) = 0;
  *((unsigned char *)this + 48) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "channels");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 7, (uint64_t)__p);
  *((void *)this + 7) = &unk_1F1487570;
  *((unsigned char *)this + 72) = 0;
  *((unsigned char *)this + 76) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "is interleaved");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 10, (uint64_t)__p);
  *((void *)this + 10) = &unk_1F1486878;
  *((_WORD *)this + 48) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "common pcm format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)this + 13, (uint64_t)__p);
  *((void *)this + 13) = &unk_1F1487570;
  *((unsigned char *)this + 120) = 0;
  *((unsigned char *)this + 124) = 0;
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  return DSP_Host_Types::FormatDescription::operator=((uint64_t)this, (uint64_t)a2);
}

void sub_1BAB23834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v19);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v18);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(v17);
  *uint64_t v15 = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void sub_1BAB238D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1BAB238A8);
}

void sub_1BAB238EC()
{
}

uint64_t std::allocate_shared[abi:ne180100]<DSP_Host_Types::FormatDescription,std::allocator<DSP_Host_Types::FormatDescription>,DSP_Host_Types::FormatDescription&,void>(uint64_t *a1, const DSP_Host_Types::FormatDescription *a2)
{
  int v4 = operator new(0xB0uLL);
  v4[1] = 0;
  v4[2] = 0;
  *int v4 = &unk_1F147F468;
  uint64_t result = DSP_Host_Types::FormatDescription::FormatDescription((DSP_Host_Types::FormatDescription *)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1BAB23958(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(void *result, void *a2)
{
  os_log_type_t v3 = (void *)*result;
  unint64_t v2 = (void *)result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    long long v5 = *((_OWORD *)v2 - 1);
    v2 -= 2;
    *(_OWORD *)(v4 - 16) = v5;
    v4 -= 16;
    void *v2 = 0;
    v2[1] = 0;
  }
  a2[1] = v4;
  char v6 = (void *)*result;
  *uint64_t result = v4;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void DSP_Host_Types::NegotiateResponse::~NegotiateResponse(DSP_Host_Types::NegotiateResponse *this)
{
  *(void *)this = &unk_1F1487440;
  uint64_t v2 = (void **)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1F1487480;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void **v2;
  void **v3;
  uint64_t vars8;

  *(void *)this = &unk_1F1487440;
  uint64_t v2 = (void **)((char *)this + 24);
  uint64_t v3 = (void **)((char *)this + 72);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = (void **)((char *)this + 48);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  uint64_t v3 = v2;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  *(void *)this = &unk_1F1487480;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::NegotiateResponse>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB23B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::NegotiateResponse>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB23CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::FormatDescription>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host_Types::FormatDescription>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_Types::FormatDescription>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t DSP_Host_Types::FormatDescription::operator=(uint64_t a1, uint64_t a2)
{
  DSP_Dictionariable::SingleKvp<double>::operator=(a1 + 24, a2 + 24);
  DSP_Dictionariable::SingleKvp<unsigned int>::operator=(a1 + 56, a2 + 56);
  CFStringRef v4 = *(const void **)(a1 + 88);
  CFStringRef v5 = *(const void **)(a2 + 88);
  *(void *)(a1 + 88) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  DSP_Dictionariable::SingleKvp<unsigned int>::operator=(a1 + 104, a2 + 104);
  return a1;
}

uint64_t DSP_Dictionariable::SingleKvp<double>::operator=(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = *(const void **)(a1 + 8);
  CFStringRef v5 = *(const void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v6 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v6;
  return a1;
}

uint64_t DSP_Dictionariable::SingleKvp<unsigned int>::operator=(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = *(const void **)(a1 + 8);
  CFStringRef v5 = *(const void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  int v6 = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v6;
  return a1;
}

void sub_1BAB24A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::allocate_shared[abi:ne180100]<DSP_Host_Types::DeviceConfiguration,std::allocator<DSP_Host_Types::DeviceConfiguration>,char const(&)[1],void>(void *a1, const char *a2)
{
  CFStringRef v4 = operator new(0x148uLL);
  v4[1] = 0;
  v4[2] = 0;
  *CFStringRef v4 = &unk_1F147F4B8;
  CFIndex v5 = strlen(a2);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)a2, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v4[3] = &unk_1F147F340;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)(v4 + 4), v6);
  CFRelease(v6);
  v4[3] = &unk_1F147EF38;
  std::string::basic_string[abi:ne180100]<0>(__p, "device uid");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 6, (uint64_t)__p);
  v4[6] = &unk_1F147F0A0;
  *((unsigned char *)v4 + 64) = 0;
  *((unsigned char *)v4 + 88) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sample rate");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 12, (uint64_t)__p);
  v4[12] = &unk_1F1486A00;
  *((unsigned char *)v4 + 112) = 0;
  *((unsigned char *)v4 + 120) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reference stream enablement");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 16, (uint64_t)__p);
  v4[16] = &unk_1F1486878;
  *((_WORD *)v4 + 72) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "tap stream enablement");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 19, (uint64_t)__p);
  v4[19] = &unk_1F1486878;
  *((_WORD *)v4 + 84) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "reference stream channel count");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 22, (uint64_t)__p);
  v4[22] = &unk_1F1487570;
  *((unsigned char *)v4 + 192) = 0;
  *((unsigned char *)v4 + 196) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  *((unsigned char *)v4 + 200) = 0;
  *((unsigned char *)v4 + 204) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "mic processing mode");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 26, (uint64_t)__p);
  v4[26] = &unk_1F1487570;
  *((unsigned char *)v4 + 224) = 0;
  *((unsigned char *)v4 + 228) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "mic processing kind");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 29, (uint64_t)__p);
  v4[29] = &unk_1F1487570;
  *((unsigned char *)v4 + 248) = 0;
  *((unsigned char *)v4 + 252) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  v4[32] = 0;
  v4[33] = 0;
  v4[34] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "bluetooth format");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 35, (uint64_t)__p);
  v4[35] = &unk_1F147F0A0;
  *((unsigned char *)v4 + 296) = 0;
  *((unsigned char *)v4 + 320) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  DSP_Host_Types::DeviceConfiguration::init_set((DSP_Host_Types::DeviceConfiguration *)(v4 + 3));
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1BAB24F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, DSP_Dictionariable::DictionariableKvp *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::operator=(uint64_t a1, uint64_t a2)
{
  CFStringRef v4 = *(const void **)(a1 + 8);
  CFIndex v5 = *(const void **)(a2 + 8);
  *(void *)(a1 + 8) = v5;
  if (v5) {
    CFRetain(v5);
  }
  if (v4) {
    CFRelease(v4);
  }
  std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>((std::string *)(a1 + 16), (const std::string *)(a2 + 16));
  return a1;
}

void std::__optional_storage_base<std::string,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::string,false> const&>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0] == a2[1].__r_.__value_.__s.__data_[0])
  {
    if (this[1].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(this, a2);
    }
  }
  else if (this[1].__r_.__value_.__s.__data_[0])
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(this->__r_.__value_.__l.__data_);
    }
    this[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void DSP_Dictionariable::SingleKvp<std::string>::~SingleKvp(void **this)
{
  *this = &unk_1F147F0A0;
  if (*((unsigned char *)this + 40) && *((char *)this + 39) < 0) {
    operator delete(this[2]);
  }

  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)this);
}

{
  uint64_t vars8;

  *this = &unk_1F147F0A0;
  if (*((unsigned char *)this + 40) && *((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)this);

  JUMPOUT(0x1C1859840);
}

void DSP_Dictionariable::SingleKvp<std::string>::clear_value(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*(void **)(a1 + 16));
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::has_value(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t DSP_Dictionariable::SingleKvp<std::string>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  v8[0] = &unk_1F1487618;
  v8[1] = 0;
  char v9 = a2;
  uint64_t v3 = a1 + 16;
  if (*(unsigned char *)(a1 + 40))
  {
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)v3);
      a2 = v9;
    }
    *(unsigned char *)(a1 + 40) = 0;
  }
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)&v6, *v9, *(const void **)(a1 + 8));
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(char *)(a1 + 39) < 0) {
        operator delete(*(void **)v3);
      }
      *(_OWORD *)uint64_t v3 = v6;
      *(void *)(v3 + 16) = v7;
      HIBYTE(v7) = 0;
      LOBYTE(v6) = 0;
    }
    else
    {
      *(_OWORD *)uint64_t v3 = v6;
      *(void *)(v3 + 16) = v7;
      uint64_t v7 = 0;
      long long v6 = 0uLL;
      *(unsigned char *)(a1 + 40) = 1;
    }
    uint64_t v4 = 1;
  }
  else
  {
    uint64_t v4 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v8);
  return v4;
}

void *applesauce::CF::details::find_at_key<std::string,__CFString const*&>(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  CFStringRef v4 = (const __CFString *)applesauce::CF::details::at_key<__CFString const*&>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }

  return applesauce::CF::convert_to<std::string,0>(a1, v4);
}

void sub_1BAB253F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void DSP_Dictionariable::SingleKvp<std::string>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (!*(unsigned char *)(a1 + 40)) {
    return;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    CFStringRef v4 = (const UInt8 *)(a1 + 16);
    CFIndex v5 = *(unsigned __int8 *)(a1 + 39);
LABEL_6:
    CFStringRef v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
    if (!v6)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v7 = v6;
    mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(*a2, v3, v6);
    CFRelease(v7);
    return;
  }
  CFStringRef v4 = *(const UInt8 **)(a1 + 16);
  if (v4)
  {
    CFIndex v5 = *(void *)(a1 + 24);
    goto LABEL_6;
  }
  CFTypeRef v8 = *a2;

  mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(v8, v3, 0);
}

void sub_1BAB254F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<__CFString const*,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceConfiguration>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB2565C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DeviceConfiguration>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB257CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::DeviceConfiguration>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F4B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DeviceConfiguration>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F4B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAB25F30(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  uint64_t v19 = va_arg(va1, void);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  DSP_Host_Types::FormatDescription::~FormatDescription((DSP_Host_Types::FormatDescription *)va1);
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse((DSP_Host_Types::NegotiateResponse *)va);
  std::__function::__value_func<BOOL ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)(v4 - 128));
  _Unwind_Resume(a1);
}

void sub_1BAB26230(_Unwind_Exception *a1)
{
  std::__function::__value_func<DSP_HAL_Mock_TestHooks ()(void)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1BAB262FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1BAB264D8(_Unwind_Exception *a1)
{
  std::__function::__value_func<DSP_HAL_Mock_TestHooks ()(void)>::~__value_func[abi:ne180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void sub_1BAB266FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  uint64_t v6 = v5;
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((uint64_t *)va);

  _Unwind_Resume(a1);
}

void non-virtual thunk to'AMCP::IOAudio2::Driver::~Driver(AMCP::IOAudio2::Driver *this)
{
  AMCP::IOAudio2::Driver::~Driver((AMCP::IOAudio2::Driver *)((char *)this - 24));

  JUMPOUT(0x1C1859840);
}

{
  AMCP::IOAudio2::Driver::~Driver((AMCP::IOAudio2::Driver *)((char *)this - 24));
}

void AMCP::IOAudio2::Driver::~Driver(AMCP::IOAudio2::Driver *this)
{
  *(void *)this = &unk_1F145E8A0;
  *((void *)this + 3) = &unk_1F145E8C8;
  uint64_t v2 = (AMCP::IOAudio2::Device **)*((void *)this + 8);
  if (v2)
  {
    uint64_t v3 = (AMCP::IOAudio2::Device **)*((void *)this + 9);
    uint64_t v4 = (void *)*((void *)this + 8);
    if (v3 != v2)
    {
      do
        std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](--v3, 0);
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 8);
    }
    *((void *)this + 9) = v2;
    operator delete(v4);
  }
  uint64_t v5 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v5) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v5);
  }
  *((void *)this + 3) = &unk_1F146D188;
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  CFIndex v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
}

{
  uint64_t vars8;

  AMCP::IOAudio2::Driver::~Driver(this);

  JUMPOUT(0x1C1859840);
}

void std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](uint64_t a1)
{
  io_object_t v2 = *(_DWORD *)(a1 + 48);
  if (v2) {
    IOObjectRelease(v2);
  }
  std::__function::__value_func<void ()(applesauce::iokit::io_object_holder)>::~__value_func[abi:ne180100]((void *)(a1 + 16));
  uint64_t v3 = *(NSObject **)(a1 + 8);
  if (v3) {
    dispatch_release(v3);
  }
  IONotificationPortDestroy(*(IONotificationPortRef *)a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__value_func<void ()(applesauce::iokit::io_object_holder)>::~__value_func[abi:ne180100](void *a1)
{
  io_object_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

AMCP::IOAudio2::Device *std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](AMCP::IOAudio2::Device **a1, AMCP::IOAudio2::Device *a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    AMCP::IOAudio2::Device::~Device(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

std::__shared_mutex_base *AMCP::IOAudio2::Driver::shutdown(AMCP::IOAudio2::Driver *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v19, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v19 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)BOOL v22 = 2080;
        *(void *)&v22[2] = "IOAudio2_Driver.cpp";
        __int16 v23 = 1024;
        int v24 = 50;
        CFIndex v7 = v9;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)BOOL v22 = 2080;
        *(void *)&v22[2] = "IOAudio2_Driver.cpp";
        __int16 v23 = 1024;
        int v24 = 50;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down IOAudio2 Driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)BOOL v22 = 2080;
        *(void *)&v22[2] = "IOAudio2_Driver.cpp";
        __int16 v23 = 1024;
        int v24 = 50;
        CFIndex v7 = v4;
        os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v7, v8, "%6u %32s:%-5d Tearing down IOAudio2 Driver", buf, 0x18u);
      }
      break;
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  uint64_t v13 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v13) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v13);
  }
  uint64_t v15 = (AMCP::IOAudio2::Device **)*((void *)this + 8);
  for (uint64_t i = (AMCP::IOAudio2::Device **)*((void *)this + 9);
        i != v15;
        std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](i, 0))
  {
    --i;
  }
  *((void *)this + 9) = v15;
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1BAB26C70(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

AMCP::Utility::Dispatch_Queue *AMCP::Utility::Dispatch_Queue::Dispatch_Queue(AMCP::Utility::Dispatch_Queue *this, dispatch_object_t object)
{
  *(void *)this = object;
  if (object) {
    dispatch_retain(object);
  }
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  *((_WORD *)this + 16) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 850045863;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((void *)this + 19) = 850045863;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((void *)this + 30) = 850045863;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((void *)this + 39) = dispatch_semaphore_create(0);
  return this;
}

void *std::dynamic_pointer_cast[abi:ne180100]<AMCP::IOAudio2::Driver,AMCP::Core::Driver>(void **a1, void **a2)
{
  uint64_t result = *a2;
  if (*a2 {
    && (uint64_t v4 = a2,
  }
  {
    uint64_t v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    uint64_t v4 = a1;
  }
  *uint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t applesauce::iokit::io_service_factory::io_service_factory(uint64_t a1, NSObject **a2, const __CFDictionary **a3, const char *a4, uint64_t a5)
{
  applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder((applesauce::iokit::details::io_notificationport_holder *)a1);
  uint64_t v10 = *a2;
  *(void *)(a1 + 8) = *a2;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *(void *)(a5 + 24);
  if (!v11) {
    goto LABEL_6;
  }
  if (v11 != a5)
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
LABEL_6:
    *(void *)(a1 + 40) = v11;
    goto LABEL_8;
  }
  *(void *)(a1 + 40) = a1 + 16;
  (*(void (**)(void, uint64_t))(**(void **)(a5 + 24) + 24))(*(void *)(a5 + 24), a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 48) = 0;
  uint64_t v12 = (io_object_t *)(a1 + 48);
  IONotificationPortSetDispatchQueue(*(IONotificationPortRef *)a1, *(dispatch_queue_t *)(a1 + 8));
  io_iterator_t notification = 0;
  uint64_t v13 = *(IONotificationPort **)a1;
  CFDictionaryRef v14 = *a3;
  *a3 = 0;
  uint64_t v15 = IOServiceAddMatchingNotification(v13, a4, v14, (IOServiceMatchingCallback)applesauce::iokit::io_service_factory::matching_callback_, (void *)a1, &notification);
  if (v15)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    size_t v21 = std::system_category();
    MEMORY[0x1C1859250](exception, v15, v21, "Error on IOServiceAddMatchingNotification");
    goto LABEL_18;
  }
  io_object_t v16 = notification;
  io_object_t v17 = *v12;
  io_object_t *v12 = notification;
  if (v17)
  {
    IOObjectRelease(v17);
    io_object_t v16 = *v12;
  }
  if (v16)
  {
    uint64_t v18 = IOObjectRetain(v16);
    if (v18)
    {
      uint64_t v22 = v18;
      exception = __cxa_allocate_exception(0x20uLL);
      __int16 v23 = std::system_category();
      MEMORY[0x1C1859250](exception, v22, v23, "Error on Retain");
LABEL_18:
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  applesauce::iokit::io_service_factory::matching_callback(a1, v16);
  if (v16) {
    IOObjectRelease(v16);
  }
  return a1;
}

void sub_1BAB26FB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_free_exception(v13);
  applesauce::iokit::io_object_holder::~io_object_holder(v12);
  std::__function::__value_func<void ()(applesauce::iokit::io_object_holder)>::~__value_func[abi:ne180100](v11);
  uint64_t v15 = *(NSObject **)(v10 + 8);
  if (v15) {
    dispatch_release(v15);
  }
  applesauce::iokit::details::io_notificationport_holder::~io_notificationport_holder((IONotificationPortRef *)v10);
  _Unwind_Resume(a1);
}

applesauce::iokit::details::io_notificationport_holder *applesauce::iokit::details::io_notificationport_holder::io_notificationport_holder(applesauce::iokit::details::io_notificationport_holder *this)
{
  mach_port_t mainPort = 0;
  uint64_t v2 = MEMORY[0x1C18588D0](*MEMORY[0x1E4F14638], &mainPort);
  if (v2)
  {
    uint64_t v5 = v2;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    CFIndex v7 = std::system_category();
    MEMORY[0x1C1859250](exception, v5, v7, "IOMainPort failed");
    os_log_type_t v8 = (struct type_info *)MEMORY[0x1E4FBA2F0];
    uint64_t v9 = (void (*)(void *))MEMORY[0x1E4FBA220];
    goto LABEL_6;
  }
  IONotificationPortRef v3 = IONotificationPortCreate(mainPort);
  *(void *)this = v3;
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "IONotificationPortCreate failed");
    os_log_type_t v8 = (struct type_info *)MEMORY[0x1E4FBA338];
    uint64_t v9 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
LABEL_6:
    __cxa_throw(exception, v8, v9);
  }
  return this;
}

void sub_1BAB270EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t applesauce::iokit::io_service_factory::matching_callback(uint64_t a1, io_object_t a2)
{
  io_object_t v30 = a2;
  if (a2)
  {
    uint64_t v4 = IOObjectRetain(a2);
    if (v4)
    {
      uint64_t v23 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v25 = std::system_category();
      MEMORY[0x1C1859250](exception, v23, v25, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  applesauce::iokit::details::io_services_iterator::io_services_iterator(&v31, a2);
  if (a2) {
    IOObjectRelease(a2);
  }
  uint64_t v29 = 0;
  while (1)
  {
    io_object_t v5 = v32;
    if (!v32) {
      break;
    }
    io_iterator_t v26 = v31;
    if (v31)
    {
      uint64_t v6 = IOObjectRetain(v31);
      if (v6)
      {
        uint64_t v17 = v6;
        uint64_t v18 = __cxa_allocate_exception(0x20uLL);
        uint64_t v19 = std::system_category();
        MEMORY[0x1C1859250](v18, v17, v19, "Error on Retain");
        __cxa_throw(v18, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
      io_object_t v5 = v32;
      io_object_t object = v32;
      if (!v32)
      {
LABEL_28:
        uint64_t v13 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(v13, "io_services_iterator exceeding size");
        v13->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4D8] + 16);
        __cxa_throw(v13, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
    }
    else
    {
      io_object_t object = v32;
    }
    uint64_t v7 = IOObjectRetain(v5);
    if (v7)
    {
      uint64_t v14 = v7;
      uint64_t v15 = __cxa_allocate_exception(0x20uLL);
      io_object_t v16 = std::system_category();
      MEMORY[0x1C1859250](v15, v14, v16, "Error on Retain");
      __cxa_throw(v15, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    if (!v32) {
      goto LABEL_28;
    }
    io_object_t v8 = IOIteratorNext(v31);
    io_object_t v9 = v32;
    io_object_t v32 = v8;
    if (v9) {
      IOObjectRelease(v9);
    }
    io_object_t v28 = object;
    if (object)
    {
      uint64_t v10 = IOObjectRetain(object);
      if (v10)
      {
        uint64_t v20 = v10;
        size_t v21 = __cxa_allocate_exception(0x20uLL);
        uint64_t v22 = std::system_category();
        MEMORY[0x1C1859250](v21, v20, v22, "Error on Retain");
        __cxa_throw(v21, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
    }
    uint64_t v11 = *(void *)(a1 + 40);
    if (!v11) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, io_object_t *))(*(void *)v11 + 48))(v11, &v28);
    if (v28) {
      IOObjectRelease(v28);
    }
    if (object) {
      IOObjectRelease(object);
    }
    if (v26) {
      IOObjectRelease(v26);
    }
  }
  uint64_t result = v31;
  if (v31) {
    return IOObjectRelease(v31);
  }
  return result;
}

void sub_1BAB273D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, int a12, char a13, __int16 a14, char a15, char a16)
{
  __cxa_free_exception(v16);
  _Unwind_Resume(a1);
}

void applesauce::iokit::io_object_holder::~io_object_holder(io_object_t *this)
{
  io_object_t v1 = *this;
  if (v1) {
    IOObjectRelease(v1);
  }
}

void applesauce::iokit::details::io_notificationport_holder::~io_notificationport_holder(IONotificationPortRef *this)
{
}

io_iterator_t *applesauce::iokit::details::io_services_iterator::io_services_iterator(io_iterator_t *a1, io_object_t a2)
{
  *a1 = a2;
  if (a2)
  {
    uint64_t v3 = IOObjectRetain(a2);
    if (v3)
    {
      uint64_t v6 = v3;
      exception = __cxa_allocate_exception(0x20uLL);
      io_object_t v8 = std::system_category();
      MEMORY[0x1C1859250](exception, v6, v8, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    io_iterator_t v4 = *a1;
  }
  else
  {
    io_iterator_t v4 = 0;
  }
  a1[1] = IOIteratorNext(v4);
  return a1;
}

void sub_1BAB275A0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::iokit::details::io_services_iterator::~io_services_iterator(applesauce::iokit::details::io_services_iterator *this)
{
  io_object_t v2 = *((_DWORD *)this + 1);
  if (v2) {
    IOObjectRelease(v2);
  }
  if (*(_DWORD *)this) {
    IOObjectRelease(*(_DWORD *)this);
  }
}

uint64_t applesauce::iokit::io_service_factory::matching_callback_(uint64_t this, io_object_t object)
{
  if (this && object)
  {
    uint64_t v3 = this;
    uint64_t v4 = IOObjectRetain(object);
    if (v4)
    {
      uint64_t v5 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v7 = std::system_category();
      MEMORY[0x1C1859250](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    applesauce::iokit::io_service_factory::matching_callback(v3, object);
    return IOObjectRelease(object);
  }
  return this;
}

void sub_1BAB276B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11)
{
  __cxa_free_exception(v11);
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Driver5startEvE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  io_object_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  io_registry_entry_t v8 = v2;
  if (v2)
  {
    uint64_t v4 = IOObjectRetain(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v7 = std::system_category();
      MEMORY[0x1C1859250](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    AMCP::IOAudio2::Driver::handle_device_arrival(v3, &v8);
    IOObjectRelease(v2);
    IOObjectRelease(v2);
  }
  else
  {
    AMCP::IOAudio2::Driver::handle_device_arrival(v3, &v8);
  }
}

void sub_1BAB277EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  IOObjectRelease(v1);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio2::Driver::handle_device_arrival(uint64_t a1, io_registry_entry_t *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  io_registry_entry_t v3 = *a2;
  if (!*a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v22 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    uint64_t v23 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_33;
  }
  properties[0] = 0;
  uint64_t CFProperties = IORegistryEntryCreateCFProperties(v3, properties, 0, 0);
  if (CFProperties)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    uint64_t v22 = (void (*)(void *))MEMORY[0x1E4FBA220];
    int v24 = std::system_category();
    MEMORY[0x1C1859250](exception, CFProperties, v24, "Error on get_properties");
    uint64_t v23 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_33:
    __cxa_throw(exception, v23, v22);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties[0]);
  if (!cf)
  {
    uint64_t v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not construct");
    __cxa_throw(v25, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>((applesauce::CF::StringRef *)&v35, (CFDictionaryRef)cf, @"device UID");
  if (!cf)
  {
    io_iterator_t v26 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v26, "Could not construct");
    __cxa_throw(v26, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFBooleanRef v6 = (const __CFBoolean *)applesauce::CF::details::at_key<__CFString const*>((CFDictionaryRef)cf, @"is private");
  if (v6)
  {
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v6))
    {
      LOBYTE(v6) = CFBooleanGetValue(v6) != 0;
      int v8 = 1;
    }
    else
    {
      CFTypeID v9 = CFNumberGetTypeID();
      if (v9 == CFGetTypeID(v6))
      {
        __int16 v10 = applesauce::CF::details::number_convert_as<BOOL>(v6);
        LOBYTE(v6) = v10;
        int v8 = HIBYTE(v10);
      }
      else
      {
        int v8 = 0;
        LOBYTE(v6) = 0;
      }
    }
  }
  else
  {
    int v8 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = *(void *)(a1 + 72);
  if (v11 != v12)
  {
    while (1)
    {
      AMCP::IOAudio2::Device::get_uid(properties, *(const void **)(*(void *)v11 + 8));
      CFMutableDictionaryRef v13 = properties[0];
      CFComparisonResult v14 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)properties[0], (const __CFString **)&v35);
      if (v13) {
        CFRelease(v13);
      }
      if (v14 == kCFCompareEqualTo) {
        break;
      }
      v11 += 8;
      if (v11 == v12)
      {
        uint64_t v11 = v12;
        break;
      }
    }
  }
  if ((v6 | (v8 << 8)) <= 0x100 && v11 == *(void *)(a1 + 72))
  {
    uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 32);
    unsigned int v16 = *(_DWORD *)(a1 + 48);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v30, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    std::dynamic_pointer_cast[abi:ne180100]<AMCP::IOAudio2::Driver,AMCP::Core::Driver>((void **)&v32, &v30);
    io_object_t v17 = *a2;
    io_object_t v33 = v17;
    if (v17)
    {
      uint64_t v18 = IOObjectRetain(v17);
      if (v18)
      {
        uint64_t v27 = v18;
        io_object_t v28 = __cxa_allocate_exception(0x20uLL);
        uint64_t v29 = std::system_category();
        MEMORY[0x1C1859250](v28, v27, v29, "Error on Retain");
        __cxa_throw(v28, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
    }
    CFTypeRef v19 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v34 = v19;
    uint64_t v38 = 0;
    uint64_t v20 = (char *)operator new(0x28uLL);
    *(void *)uint64_t v20 = &unk_1F145E9B0;
    *(_OWORD *)(v20 + 8) = v32;
    long long v32 = 0uLL;
    *((_DWORD *)v20 + 6) = v17;
    io_object_t v33 = 0;
    *((void *)v20 + 4) = v19;
    CFTypeRef v34 = 0;
    uint64_t v38 = v20;
    AMCP::Core::Conductor::enqueue_config_change(v15, v16, v16, 1, (uint64_t)properties);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](properties);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
  if (v35) {
    CFRelease(v35);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB27BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    __cxa_free_exception(v20);
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    applesauce::CF::StringRef::~StringRef(&a16);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAB27A6CLL);
  }
  _Unwind_Resume(exception_object);
}

applesauce::CF::StringRef *applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>(applesauce::CF::StringRef *a1, CFDictionaryRef theDict, const void *a3)
{
  uint64_t v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v5 = v4;
  CFRetain(v4);

  return applesauce::CF::StringRef::StringRef(a1, v5);
}

void sub_1BAB27D84(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *AMCP::IOAudio2::Device::get_uid(void *this, const void *a2)
{
  io_registry_entry_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  *io_registry_entry_t v3 = a2;
  return this;
}

uint64_t AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1::~$_1(uint64_t a1)
{
  io_object_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 16);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Driver21handle_device_arrivalEN10applesauce5iokit16io_object_holderEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::operator()()
{
}

void sub_1BAB27FF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v20) {
    CFRelease(v20);
  }
  MEMORY[0x1C1859840](v18, 0x1060C40B23E0A7FLL);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  io_object_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 16);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F145E9B0;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_object_t v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    uint64_t v6 = IOObjectRetain(v5);
    if (v6)
    {
      uint64_t v9 = v6;
      exception = __cxa_allocate_exception(0x20uLL);
      uint64_t v11 = std::system_category();
      MEMORY[0x1C1859250](exception, v9, v11, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  uint64_t v7 = *(const void **)(a2 + 24);
  if (v7) {
    CFRetain(v7);
  }
  *(void *)(a1 + 24) = v7;
  return a1;
}

void sub_1BAB281FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  io_object_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F145E9B0;
  std::__compressed_pair_elem<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAB2827C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F145E9B0;
  io_object_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 24);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F145E9B0;
  io_object_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 24);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

const void *applesauce::CF::details::at_key<__CFString const*>(CFDictionaryRef theDict, const void *a2)
{
  uint64_t result = 0;
  if (theDict)
  {
    if (a2) {
      return CFDictionaryGetValue(theDict, a2);
    }
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy_deallocate(void *__p)
{
  io_object_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F145E930;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F145E930;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(void *a1)
{
  *a1 = &unk_1F145E930;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio2::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(void *a1)
{
  *a1 = &unk_1F145E930;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  int v8 = *a3;
  uint64_t v11 = 0;
  uint64_t v12 = &unk_1F1488848;
  int v13 = v8;
  CFComparisonResult v14 = &v12;
  memset(v10, 0, sizeof(v10));
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)&v12);
  uint64_t v11 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11) {
    v11(0, (uint64_t)v10, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](&v12);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v6);
}

void sub_1BAB28650(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(uint64_t *a1, uint64_t a2, CFTypeRef cf)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (cf) {
    CFRetain(cf);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, *(_DWORD *)(a2 + 8), *(double *)a2);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  if (cf)
  {
    CFRetain(cf);
    uint64_t v11 = 0;
    v10[0] = &unk_1F1488958;
    CFRetain(cf);
  }
  else
  {
    uint64_t v11 = 0;
    v10[0] = &unk_1F1488958;
  }
  v10[1] = cf;
  uint64_t v11 = v10;
  memset(v8, 0, sizeof(v8));
  uint64_t v9 = 0;
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v10);
  uint64_t v9 = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v8);
  if (v9) {
    v9(0, (uint64_t)v8, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](v10);
  if (cf) {
    CFRelease(cf);
  }
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(v6);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB287F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>(uint64_t *a1, int a2, long long *a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  __int16 v10 = 0;
  uint64_t v11 = &unk_1F1488598;
  long long v12 = *a3;
  int v13 = &v11;
  memset(v9, 0, sizeof(v9));
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)&v11);
  __int16 v10 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v9);
  if (v10) {
    v10(0, (uint64_t)v9, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v11);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1BAB28944(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(uint64_t *a1, int a2, long long *a3, double a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  __int16 v10 = 0;
  uint64_t v11 = &unk_1F14886B8;
  long long v12 = *a3;
  int v13 = &v11;
  memset(v9, 0, sizeof(v9));
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)&v11);
  __int16 v10 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v9);
  if (v10) {
    v10(0, (uint64_t)v9, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v11);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1BAB28A70(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(void *__p)
{
  if (__p)
  {
    uint64_t v1 = __p;
    do
    {
      uint64_t v2 = (void *)*v1;
      uint64_t v3 = (std::__shared_weak_count *)v1[5];
      if (v3) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v3);
      }
      operator delete(v1);
      uint64_t v1 = v2;
    }
    while (v2);
  }
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1488628;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB28CC8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterINSt3__16vectorIjNS3_9allocatorIjEEEEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)&__p, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)a2, __p, (uint64_t)v4, (v4 - (unsigned char *)__p) >> 2);
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  if (__p)
  {
    unint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1BAB28D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1488628;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1488628;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB28EC8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1488628;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1488628;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities40make_owned_object_of_class_list_propertyERNS0_6BrokerEjRKNS_7AddressEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  v7[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(std::__shared_mutex_base **)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v5 = 0x676C6F6262636C73;
  int v6 = 0;
  v7[0] = &unk_1F1488728;
  v7[1] = &v5;
  void v7[2] = a1 + 20;
  v7[3] = v7;
  AMCP::Core::Broker::fetch_owned_object_ids_if (a2, v2, v3, (uint64_t)v7);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v7);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerEjRKNS_7AddressERKT_DpOT0_EUlSH_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENSt3__19enable_ifILb1EvEEEENS3_6vectorIjNS3_9allocatorIjEEEERNS0_6BrokerEjRKNS_7AddressERKT_DpOT0_EUlSH_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclEST_(uint64_t a1, AMCP::Core::Core **a2)
{
  return _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(*a2, *(const AMCP::Address **)(a1 + 8), *(_DWORD **)(a1 + 16));
}

BOOL _ZN4AMCP4Core4Core26has_properties_with_valuesIjJENSt3__19enable_ifILb1EvEEEEbRKNS_7AddressERKT_DpOT0_(AMCP::Core::Core *a1, const AMCP::Address *a2, _DWORD *a3)
{
  unint64_t v5 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, a2);
  if (!HIDWORD(v5)) {
    return 0;
  }
  if (*(_DWORD *)a2 != 1668047219 && *(_DWORD *)a2 != 1650682995) {
    return *a3 == v5;
  }
  return (AMCP::is_base_of((AMCP *)*a3, v5) & 1) != 0;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1488728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1488728;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjRKNS2_7AddressERKT_DpOT0_EUlSJ_E_NS9_ISN_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14886B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14886B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities31make_owned_object_list_propertyERNS0_6BrokerEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()(uint64_t a1@<X0>, char **a2@<X8>)
{
  int v3 = *(std::__shared_mutex_base **)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  unint64_t v5 = (char *)operator new(4uLL);
  *(_DWORD *)unint64_t v5 = v4;
  uint64_t v20 = (std::__shared_weak_count *)(v5 + 4);
  uint64_t v21 = v5 + 4;
  int v19 = (unsigned int *)v5;
  AMCP::Core::Broker::gather_directly_owned_objects(&v22, v3, &v19);
  operator delete(v5);
  begin = v22.__begin_;
  std::vector<unsigned int>::pointer end = v22.__end_;
  if (v22.__begin_ != v22.__end_)
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v19, v3, *begin);
      if (v19)
      {
        int v11 = *v19;
        if ((unint64_t)v10 >= v9)
        {
          uint64_t v13 = (v10 - v8) >> 2;
          unint64_t v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v9 - (void)v8) >> 1 > v14) {
            unint64_t v14 = (uint64_t)(v9 - (void)v8) >> 1;
          }
          if (v9 - (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v15 = v14;
          }
          if (v15) {
            unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
          }
          else {
            uint64_t v16 = 0;
          }
          int v17 = (char *)(v15 + 4 * v13);
          *(_DWORD *)int v17 = v11;
          int v12 = v17 + 4;
          while (v10 != v8)
          {
            int v18 = *((_DWORD *)v10 - 1);
            v10 -= 4;
            *((_DWORD *)v17 - 1) = v18;
            v17 -= 4;
          }
          unint64_t v9 = v15 + 4 * v16;
          *a2 = v17;
          a2[2] = (char *)v9;
          if (v8) {
            operator delete(v8);
          }
          uint64_t v8 = v17;
        }
        else
        {
          *(_DWORD *)uint64_t v10 = v11;
          int v12 = v10 + 4;
        }
        a2[1] = v12;
        uint64_t v10 = v12;
      }
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      ++begin;
    }
    while (begin != end);
    begin = v22.__begin_;
  }
  if (begin)
  {
    v22.__end_ = begin;
    operator delete(begin);
  }
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1488598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1488598;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1},std::allocator<AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
}

const void **AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}::~Address(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  int v6 = operator new(0x40uLL);
  void *v6 = &unk_1F14889E8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  uint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  uint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB29978(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)&cf, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::StringRef>::construct<applesauce::CF::StringRef&>(a2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14889E8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F14889E8;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB29B44(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14889E8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14889E8;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIN10applesauce2CF9StringRefEEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

CFTypeRef std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(CFTypeRef result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *((void *)result + 1);
  if (v3) {
    uint64_t result = CFRetain(*((CFTypeRef *)result + 1));
  }
  *a2 = v3;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy[abi:ne180100](a1[1]);

  operator delete(a1);
}

void std::__function::__alloc_func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1488958;
  return std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1} const&,0ul>(a2 + 1, (CFTypeRef *)(a1 + 8));
}

void *std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1} const&,0ul>(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  *a1 = v3;
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (CFTypeRef *)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = &unk_1F1488958;
  std::__compressed_pair_elem<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1} const&,0ul>(v2 + 1, v1);
  return v2;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1488958;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>(AMCP::Address const&,applesauce::CF::StringRef const&)::{lambda(void)#1}>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1488958;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIjEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1488848;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F1488848;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>,unsigned int ()(void)>::~__func()
{
}

uint64_t AMCP::Utility::Expiration_Check::Expiration_Check(uint64_t a1, uint64_t *a2)
{
  int v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 6))
  {
    if (v3 == 1) {
      goto LABEL_3;
    }
LABEL_6:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v3) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v5 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(_DWORD *)(a1 + 16) = 1;
    std::__shared_weak_count::__release_weak(v4);
  }
  else
  {
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
  }
  *(_DWORD *)(a1 + 24) = 1;
  return a1;
}

uint64_t std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 16);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_1F145E910[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm1EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrISt4byteEENS_8weak_ptrIS9_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void _ZNSt3__116__variant_detail12__visitation6__base12__dispatcherIJLm0EEE10__dispatchB8ne180100IOZNS0_6__dtorINS0_8__traitsIJNS_10shared_ptrISt4byteEENS_8weak_ptrIS9_EEEEELNS0_6_TraitE1EE9__destroyB8ne180100EvEUlRT_E_JRNS0_6__baseILSE_1EJSA_SC_EEEEEEDcSG_DpT0_(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio26Driver23handle_device_departureEPNS0_6DeviceEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

AMCP::Log::Scope_Registry *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t result = (AMCP::Log::Scope_Registry *)AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if ((result & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = *v12;
    if (*(void *)v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      LODWORD(v12) = 67109890;
      HIDWORD(v12) = v11;
      *(_WORD *)uint64_t v13 = 2080;
      *(void *)&v13[2] = "IOAudio2_Driver.cpp";
      __int16 v14 = 1024;
      int v15 = 151;
      __int16 v16 = 2080;
      int v17 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v12, 0x22u);
    }
    abort();
  }
  char v4 = **(AMCP::IOAudio2::Device ****)(a1 + 48);
  uint64_t v5 = v4 + 1;
  int v6 = *(AMCP::IOAudio2::Device ***)(v2 + 72);
  if (v4 + 1 != v6)
  {
    do
    {
      char v4 = v5;
      unint64_t v7 = v5 - 1;
      uint64_t v8 = *v5;
      *v5++ = 0;
      uint64_t result = std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](v7, v8);
    }
    while (v5 != v6);
    uint64_t v5 = *(AMCP::IOAudio2::Device ***)(v2 + 72);
  }
  while (v5 != v4)
    uint64_t result = std::unique_ptr<AMCP::IOAudio2::Device>::reset[abi:ne180100](--v5, 0);
  *(void *)(v2 + 72) = v4;
  return result;
}

BOOL AMCP::Utility::Expiration_Check::is_valid(AMCP::Utility::Expiration_Check *this)
{
  int v1 = *((_DWORD *)this + 4);
  if (!*((_DWORD *)this + 6))
  {
    if (!v1)
    {
      BOOL v3 = *(void *)this == 0;
      return !v3;
    }
LABEL_12:
    std::__throw_bad_variant_access[abi:ne180100]();
  }
  if (v1 != 1) {
    goto LABEL_12;
  }
  uint64_t v2 = *((void *)this + 1);
  if (!v2) {
    return 0;
  }
  BOOL v3 = *(void *)(v2 + 8) == -1;
  return !v3;
}

void std::__throw_bad_variant_access[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x1E4FBA4F0] + 16;
  __cxa_throw(exception, MEMORY[0x1E4FBA340], (void (*)(void *))std::bad_variant_access::~bad_variant_access);
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F145EA30;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  BOOL v3 = (char *)operator new(0x38uLL);
  *(void *)BOOL v3 = &unk_1F145EA30;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAB2A66C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145EA30;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1,std::allocator<AMCP::IOAudio2::Driver::handle_device_departure(AMCP::IOAudio2::Device *)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F145EA30;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__shared_ptr_emplace<std::byte>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488C30;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<std::byte>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void non-virtual thunk to'HALS_IOUAClockDevice::~HALS_IOUAClockDevice(HALS_IOUAClockDevice *this)
{
  HALS_IOUAClockDevice::~HALS_IOUAClockDevice((HALS_IOUAClockDevice *)((char *)this - 368));

  JUMPOUT(0x1C1859840);
}

{
  HALS_IOUAClockDevice::~HALS_IOUAClockDevice((HALS_IOUAClockDevice *)((char *)this - 368));
}

void HALS_IOUAClockDevice::~HALS_IOUAClockDevice(HALS_IOUAClockDevice *this)
{
  *(void *)this = &unk_1F145EAB0;
  uint64_t v2 = (HALS_IOUAClockDevice *)((char *)this + 368);
  *((void *)this + 46) = &unk_1F145ECB0;
  uint64_t v3 = *((void *)this + 55);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 55), v4);
    *((void *)this + 55) = 0;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOUAClockDevice *)((char *)this + 448));
  int v6 = (void *)*((void *)this + 52);
  if (v6)
  {
    *((void *)this + 53) = v6;
    operator delete(v6);
  }
  HALS_IOUAObject::~HALS_IOUAObject(v2, v5);

  HALS_ClockDevice::~HALS_ClockDevice(this);
}

{
  uint64_t vars8;

  HALS_IOUAClockDevice::~HALS_IOUAClockDevice(this);

  JUMPOUT(0x1C1859840);
}

HALS_ObjectMap *HALS_IOUAClockDevice::_CopyControlByDescription(HALS_IOUAClockDevice *this, HALS_Object *a2, int a3, int a4)
{
  char v4 = (HALS_ObjectMap **)*((void *)this + 52);
  uint64_t v5 = (HALS_ObjectMap **)*((void *)this + 53);
  if (v4 != v5)
  {
    while (1)
    {
      int v6 = *v4;
      if (*v4)
      {
        if (*((_DWORD *)v6 + 5) == a2 && *((_DWORD *)v6 + 12) == a3 && *((_DWORD *)v6 + 13) == a4) {
          break;
        }
      }
      if (++v4 == v5) {
        return 0;
      }
    }
  }
  if (v4 == v5) {
    return 0;
  }
  unint64_t v7 = *v4;
  HALS_ObjectMap::RetainObject(*v4, a2);
  return v7;
}

HALS_ObjectMap *HALS_IOUAClockDevice::_CopyControlByIndex(HALS_IOUAClockDevice *this, HALS_Object *a2)
{
  uint64_t v2 = *((void *)this + 52);
  if (a2 >= (unint64_t)((*((void *)this + 53) - v2) >> 3)) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_IOUAClockDevice::_GetNumberControls(HALS_IOUAClockDevice *this)
{
  return (*((void *)this + 53) - *((void *)this + 52)) >> 3;
}

void HALS_IOUAClockDevice::_CopyControls(uint64_t a1, void **a2)
{
  uint64_t v2 = *(HALS_ObjectMap ***)(a1 + 416);
  uint64_t v3 = *(HALS_ObjectMap ***)(a1 + 424);
  if (v2 != v3)
  {
    char v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, (HALS_Object *)a2);
      int v6 = (HALS_ObjectMap **)v4[1];
      unint64_t v5 = (unint64_t)v4[2];
      if ((unint64_t)v6 >= v5)
      {
        uint64_t v8 = ((char *)v6 - (unsigned char *)*v4) >> 3;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = v5 - (void)*v4;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
        }
        else {
          a2 = 0;
        }
        int v12 = (HALS_ObjectMap **)(v11 + 8 * v8);
        char *v12 = *v2;
        unint64_t v7 = v12 + 1;
        __int16 v14 = (char *)*v4;
        uint64_t v13 = (char *)v4[1];
        if (v13 != *v4)
        {
          do
          {
            int v15 = (HALS_ObjectMap *)*((void *)v13 - 1);
            v13 -= 8;
            *--int v12 = v15;
          }
          while (v13 != v14);
          uint64_t v13 = (char *)*v4;
        }
        *char v4 = v12;
        v4[1] = v7;
        v4[2] = (void *)(v11 + 8 * (void)a2);
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        HALS_ObjectMap *v6 = *v2;
        unint64_t v7 = v6 + 1;
      }
      v4[1] = v7;
      ++v2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOUAClockDevice::PerformNonDriverConfigChange(HALS_IOUAClockDevice *this, BOOL a2, int a3)
{
  long long v4 = 0uLL;
  char v5 = 0;
  return HALS_IOUAClockDevice::HandleConfigurationChangeRequest((uint64_t)this, &v4, a3);
}

uint64_t HALS_IOUAClockDevice::HandleConfigurationChangeRequest(uint64_t a1, long long *a2, int a3)
{
  uint64_t v10 = 0;
  unint64_t v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN20HALS_IOUAClockDevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke;
  v6[3] = &unk_1E62309C0;
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  void v6[4] = &v10;
  v6[5] = a1;
  int v9 = a3;
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(a1 + 480));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 481));
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 448), v6);
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v4;
}

uint64_t ___ZN20HALS_IOUAClockDevice32HandleConfigurationChangeRequestENS_19ConfigChangePayloadEbj_block_invoke(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    buf[0].int mSelector = 136315650;
    *(void *)&buf[0].mScope = "HALS_IOUAClockDevice.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 735;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].AudioObjectPropertyElement mElement = v2 + 112;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --->", (uint8_t *)buf, 0x1Cu);
  }
  memset(buf, 0, 32);
  uint64_t v4 = (HALS_NotificationManager *)*(unsigned int *)(v2 + 16);
  strcpy(v52, "bgfcbolg");
  v52[9] = 0;
  *(_WORD *)&v52[10] = 0;
  HALS_NotificationManager::PropertiesChanged_Sync(v4, 0, 1u, (const AudioObjectPropertyAddress *)v52, v3);
  int v43 = 0;
  int v44 = 0;
  uint64_t v45 = 0;
  v42[0] = 0;
  v42[1] = 0;
  HALS_System::GetInstance(v52, 0, v42);
  uint64_t v5 = *(void *)v52;
  int v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 200))(v2);
  long long v7 = v6;
  if (v6) {
    CFRetain(v6);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v7);
  HALS_System::GetRawDeviceListUsingClockDevice(v5, (uint64_t)&v43, &cf);
  if (cf) {
    CFRelease(cf);
  }
  if (*(void *)&v52[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v52[8]);
  }
  uint64_t v8 = *(void *)(v2 + 440);
  __p = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  if (v8) {
    (*(void (**)(uint64_t, void **))(*(void *)v8 + 216))(v8, &__p);
  }
  HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)v52);
  HALS_ClockDeviceState::Capture(v9, (HALS_ClockDevice *)v2, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
  int v10 = *(unsigned __int8 *)(a1 + 64);
  BOOL v11 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (!v10)
  {
    if (!v11) {
      goto LABEL_28;
    }
    *(_DWORD *)mach_port_t v51 = 136315650;
    *(void *)&v51[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = 785;
    *(_WORD *)&v51[18] = 2080;
    *(void *)&v51[20] = v2 + 112;
    int v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- skipping driver config change";
    goto LABEL_27;
  }
  if (v11)
  {
    *(_DWORD *)mach_port_t v51 = 136315650;
    *(void *)&v51[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = 766;
    *(_WORD *)&v51[18] = 2080;
    *(void *)&v51[20] = v2 + 112;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- calling driver", v51, 0x1Cu);
  }
  kdebug_trace();
  uint64_t v12 = *(void *)(v2 + 376);
  uint64_t v13 = *(void *)(v12 + 792);
  __int16 v14 = *(std::__shared_weak_count **)(v12 + 800);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v15 = (AMCP::Log::Scope_Registry *)HALS_IOUAUCDriver::perform_config_change((HALS_IOUAUCDriver *)*(unsigned int *)(v13 + 4), *(_DWORD *)(v2 + 384), *(void *)(a1 + 48), *(void *)(a1 + 56));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v15;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    AMCP::Log::Scope_Registry::get(v15);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v51, "com.apple.coreaudio", "AMCP");
    __int16 v16 = **(NSObject ***)v51;
    if (*(void *)&v51[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v51[8]);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      io_object_t v33 = pthread_self();
      mach_port_t v34 = pthread_mach_thread_np(v33);
      int v35 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      *(_DWORD *)mach_port_t v51 = 67109890;
      *(_DWORD *)&v51[4] = v34;
      *(_WORD *)&v51[8] = 2080;
      *(void *)&v51[10] = "HALS_IOUAClockDevice.cpp";
      *(_WORD *)&v51[18] = 1024;
      *(_DWORD *)&v51[20] = 774;
      *(_WORD *)&v51[24] = 1024;
      *(_DWORD *)&v51[26] = v35;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception performing config change %u", v51, 0x1Eu);
    }
  }
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)mach_port_t v51 = 136315650;
    *(void *)&v51[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v51[12] = 1024;
    *(_DWORD *)&v51[14] = 779;
    *(_WORD *)&v51[18] = 2080;
    *(void *)&v51[20] = v2 + 112;
    int v17 = MEMORY[0x1E4F14500];
    uint64_t v18 = "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- driver returned";
LABEL_27:
    _os_log_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_DEFAULT, v18, v51, 0x1Cu);
  }
LABEL_28:
  BOOL updated = HALS_IOUAClockDevice::UpdateControls((HALS_IOUAClockDevice *)v2);
  HALS_ClockDeviceState::HALS_ClockDeviceState((HALS_ClockDeviceState *)v51);
  HALS_ClockDeviceState::Capture((HALS_ClockDeviceState *)v51, (HALS_ClockDevice *)v2, (const CAPropertyAddressList *)HALS_ClockDeviceState::sStandardDevicePropertiesToCapture);
  HALS_ClockDeviceState::Compare((HALS_ClockDeviceState *)v52, (const HALS_ClockDeviceState *)v51, buf, v20);
  *(void *)&v37.int mSelector = 0x676C6F6200000000;
  if (updated)
  {
    v37.int mSelector = 1668575852;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, &v37, v21);
  }
  if (*(void *)&buf[0].mSelector == *(void *)&buf[0].mElement)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      v46.int mSelector = 136315650;
      *(void *)&v46.mScope = "HALS_IOUAClockDevice.cpp";
      __int16 v47 = 1024;
      int v48 = 823;
      __int16 v49 = 2080;
      uint64_t v50 = v2 + 112;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  but nothing changed", (uint8_t *)&v46, 0x1Cu);
    }
  }
  else
  {
    *(void *)&v37.int mSelector = 0x676C6F6264696666;
    v37.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, &v37, v21);
  }
  strcpy((char *)&v46, "egfcbolg");
  BYTE1(v46.mElement) = 0;
  HIWORD(v46.mElement) = 0;
  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, &v46, v22);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&v51[16]);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&v52[16]);
  uint64_t v23 = *(void *)(v2 + 440);
  if (v23) {
    (*(void (**)(uint64_t))(*(void *)v23 + 936))(v23);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)unint64_t v52 = 136315650;
    *(void *)&v52[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v52[12] = 1024;
    *(_DWORD *)&v52[14] = 843;
    *(_WORD *)&v52[18] = 2080;
    *(void *)&v52[20] = v2 + 112;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- sending notifications", v52, 0x1Cu);
  }
  kdebug_trace();
  unsigned int v24 = *(_DWORD *)(v2 + 16);
  unsigned int v25 = *(_DWORD *)(a1 + 72);
  memset(v52, 0, 24);
  HALS_NotificationManager::GroupPropertiesChanged(1, v24, v25, (uint64_t)buf, (uint64_t *)v52, (uint64_t)&__p);
  *(void *)mach_port_t v51 = v52;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  io_iterator_t v26 = v43;
  uint64_t v27 = v44;
  if (v43 != v44)
  {
    io_object_t v28 = v43;
    do
    {
      unsigned int v29 = *v28;
      unsigned int v30 = *(_DWORD *)(a1 + 72);
      memset(v52, 0, 24);
      HALS_NotificationManager::GroupPropertiesChanged(1, v29, v30, (uint64_t)buf, (uint64_t *)v52, (uint64_t)&__p);
      *(void *)mach_port_t v51 = v52;
      std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
      ++v28;
    }
    while (v28 != v27);
  }
  kdebug_trace();
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)unint64_t v52 = 136315650;
    *(void *)&v52[4] = "HALS_IOUAClockDevice.cpp";
    *(_WORD *)&v52[12] = 1024;
    *(_DWORD *)&v52[14] = 857;
    *(_WORD *)&v52[18] = 2080;
    *(void *)&v52[20] = v2 + 112;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  --- restarting IO", v52, 0x1Cu);
  }
  uint64_t v31 = *(void *)(v2 + 440);
  if (v31)
  {
    (*(void (**)(uint64_t, AudioObjectPropertyAddress *))(*(void *)v31 + 232))(v31, buf);
    (*(void (**)(void, void **))(**(void **)(v2 + 440) + 224))(*(void *)(v2 + 440), &__p);
  }
  v36[0] = 0;
  v36[1] = 0;
  HALS_System::GetInstance(v52, 0, v36);
  HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)v52);
  if (*(void *)&v52[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v52[8]);
  }
  if (__p)
  {
    uint64_t v39 = __p;
    operator delete(__p);
  }
  if (v26) {
    operator delete(v26);
  }
  if (*(void *)&buf[0].mSelector)
  {
    *(void *)&buf[0].AudioObjectPropertyElement mElement = *(void *)&buf[0].mSelector;
    operator delete(*(void **)&buf[0].mSelector);
  }
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    buf[0].int mSelector = 136315650;
    *(void *)&buf[0].mScope = "HALS_IOUAClockDevice.cpp";
    LOWORD(buf[1].mSelector) = 1024;
    *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 877;
    HIWORD(buf[1].mScope) = 2080;
    *(void *)&buf[1].AudioObjectPropertyElement mElement = v2 + 112;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOUAClockDevice::HandleConfigurationChangeRequest: %s  <---", (uint8_t *)buf, 0x1Cu);
  }
  return kdebug_trace();
}

void sub_1BAB2B474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_IOUAClockDevice::UpdateControls(HALS_IOUAClockDevice *this)
{
  uint64_t v46 = 0;
  __int16 v47 = &v46;
  uint64_t v48 = 0x2000000000;
  char v49 = 0;
  uint64_t v2 = *((void *)this + 47);
  uint64_t v3 = *(void *)(v2 + 792);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 96), 0, 0);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (PropertySize >= 4)
  {
    std::vector<unsigned int>::vector(&v45, PropertySize >> 2);
    std::vector<unsigned int>::pointer begin = v45.__begin_;
    unint64_t v37 = (char *)v45.__end_ - (char *)v45.__begin_;
    uint64_t v9 = *((void *)this + 47);
    uint64_t v10 = *(void *)(v9 + 792);
    BOOL v11 = *(std::__shared_weak_count **)(v9 + 800);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v10 + 4), (const AudioObjectPropertyAddress *)"lrtcbolg", *((_DWORD *)this + 96), 0, 0, begin, &v37);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    std::vector<unsigned int>::pointer v7 = v45.__begin_;
    std::vector<unsigned int>::pointer end = v45.__end_;
  }
  else
  {
    std::vector<unsigned int>::pointer end = 0;
    std::vector<unsigned int>::pointer v7 = 0;
    memset(&v45, 0, sizeof(v45));
  }
  unint64_t v37 = 0;
  uint64_t v38 = &v37;
  uint64_t v39 = 0x4002000000;
  uint64_t v40 = __Block_byref_object_copy__608;
  uint64_t v41 = __Block_byref_object_dispose__609;
  uint64_t v42 = 0;
  int v43 = 0;
  uint64_t v44 = 0;
  uint64_t v29 = 0;
  unsigned int v30 = &v29;
  uint64_t v31 = 0x4002000000;
  long long v32 = __Block_byref_object_copy__608;
  io_object_t v33 = __Block_byref_object_dispose__609;
  mach_port_t v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 1174405120;
  _OWORD v25[2] = ___ZN20HALS_IOUAClockDevice14UpdateControlsEv_block_invoke;
  v25[3] = &unk_1F145ECD8;
  v25[7] = this;
  __p = 0;
  v25[4] = &v46;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v7, (uint64_t)end, end - v7);
  v25[5] = &v37;
  v25[6] = &v29;
  uint64_t v12 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAClockDevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v12, (uint64_t)v25);
  int v17 = (void *)v38[5];
  uint64_t v18 = (void *)v38[6];
  while (v17 != v18)
  {
    (**(void (***)(void, uint64_t, uint64_t, uint64_t, uint64_t))*v17)(*v17, v13, v14, v15, v16);
    ++v17;
  }
  int v19 = (HALS_IOUAControl **)v30[5];
  for (uint64_t i = (HALS_IOUAControl **)v30[6]; v19 != i; ++v19)
  {
    uint64_t v21 = *v19;
    if (HALS_IOUAControl::RefreshCache(*v19)) {
      *((unsigned char *)v47 + 24) = 1;
    }
    HALS_ObjectMap::ReleaseObject(v21, v22);
  }
  int v23 = *((unsigned __int8 *)v47 + 24);
  if (__p)
  {
    uint64_t v27 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(&v29, 8);
  if (v34)
  {
    int v35 = v34;
    operator delete(v34);
  }
  _Block_object_dispose(&v37, 8);
  if (v42)
  {
    int v43 = v42;
    operator delete(v42);
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  _Block_object_dispose(&v46, 8);
  return v23 != 0;
}

void sub_1BAB2B97C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  unint64_t v37 = *(void **)(v35 - 104);
  if (v37)
  {
    *(void *)(v35 - 96) = v37;
    operator delete(v37);
  }
  _Block_object_dispose((const void *)(v35 - 80), 8);
  _Unwind_Resume(a1);
}

void std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = (char *)v1[1];
      do
      {
        uint64_t v8 = (void *)*((void *)v6 - 4);
        v6 -= 32;
        std::vector<unsigned int>::pointer v7 = v8;
        if (v8)
        {
          *((void *)v4 - 3) = v7;
          operator delete(v7);
        }
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

__n128 __Block_byref_object_copy__608(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__609(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN20HALS_IOUAClockDevice14UpdateControlsEv_block_invoke(void *a1, HALS_Object *a2)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[8];
  uint64_t v3 = (void *)a1[7];
  unint64_t v4 = a1[9] - v2;
  uint64_t v5 = *(void *)(a1[5] + 8);
  int v6 = (HALS_ObjectMap **)v3[52];
  std::vector<unsigned int>::pointer v7 = (char *)v3[53];
  if (v6 != (HALS_ObjectMap **)v7)
  {
    uint64_t v8 = (char *)v3[52];
    do
    {
      uint64_t v9 = *(void *)v8;
      v8 += 8;
      *(unsigned char *)(v9 + 13) = 0;
    }
    while (v8 != v7);
  }
  if ((v4 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (v4 >> 2);
    while (1)
    {
      uint64_t v12 = v3[52];
      uint64_t v13 = v3[53];
      if (v12 != v13)
      {
        while (!*(void *)v12 || *(_DWORD *)(*(void *)v12 + 88) != *(_DWORD *)(v2 + 4 * v10))
        {
          v12 += 8;
          if (v12 == v13) {
            goto LABEL_13;
          }
        }
      }
      if (v12 == v13)
      {
LABEL_13:
        unsigned int v14 = *(_DWORD *)(v2 + 4 * v10);
        if (v14)
        {
          uint64_t v15 = v3[47];
          uint64_t v16 = *(void *)(v15 + 792);
          int v17 = *(std::__shared_weak_count **)(v15 + 800);
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int outputStruct = 0;
          unint64_t v52 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v16 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v14, 0, 0, &outputStruct, &v52);
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          uint64_t v18 = v3[47];
          uint64_t v19 = *(void *)(v18 + 792);
          uint64_t v20 = *(std::__shared_weak_count **)(v18 + 800);
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v55 = 0;
          unint64_t v54 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v19 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v14, 0, 0, &v55, &v54);
          if (v20) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          }
          uint64_t v21 = v3[47];
          uint64_t v22 = *(void *)(v21 + 792);
          int v23 = *(std::__shared_weak_count **)(v21 + 800);
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v57 = 0;
          unint64_t v56 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v22 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v14, 0, 0, &v57, &v56);
          if (v23) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v23);
          }
          uint64_t v24 = v3[47];
          uint64_t v25 = *(void *)(v24 + 792);
          io_iterator_t v26 = *(std::__shared_weak_count **)(v24 + 800);
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v59 = 0;
          unint64_t v58 = 4;
          HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v25 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v14, 0, 0, &v59, &v58);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          operator new();
        }
      }
      else
      {
        *(unsigned char *)(*(void *)v12 + 13) = 1;
      }
      if (++v10 == v11)
      {
        int v6 = (HALS_ObjectMap **)v3[52];
        std::vector<unsigned int>::pointer v7 = (char *)v3[53];
        goto LABEL_36;
      }
    }
  }
  while (1)
  {
LABEL_36:
    if (v6 == (HALS_ObjectMap **)v7)
    {
      char v28 = 0;
      goto LABEL_47;
    }
    uint64_t v27 = *v6;
    if (*v6)
    {
      if (!*((unsigned char *)v27 + 13)) {
        break;
      }
    }
    ++v6;
  }
  (*(void (**)(HALS_ObjectMap *))(*(void *)v27 + 8))(v27);
  HALS_ObjectMap::ObjectIsDead(*v6, v29);
  char v28 = 1;
  if (v6 != (HALS_ObjectMap **)v7)
  {
    unsigned int v30 = v6 + 1;
    if (v6 + 1 != (HALS_ObjectMap **)v7)
    {
      do
      {
        uint64_t v31 = *v30;
        if (*v30 && !*((unsigned char *)v31 + 13))
        {
          (*(void (**)(HALS_ObjectMap *))(*(void *)v31 + 8))(v31);
          HALS_ObjectMap::ObjectIsDead(*v30, v32);
        }
        else
        {
          *v6++ = v31;
        }
        ++v30;
      }
      while (v30 != (HALS_ObjectMap **)v7);
      char v28 = 1;
    }
  }
  std::vector<unsigned int>::pointer v7 = (char *)v6;
LABEL_47:
  io_object_t v33 = (char **)(v3 + 52);
  if (v7 != (char *)v3[53])
  {
    a2 = (HALS_Object *)v3[53];
    v3[53] = v7;
  }
  uint64_t v36 = v5 + 40;
  uint64_t v35 = *(uint64_t **)(v5 + 40);
  mach_port_t v34 = *(uint64_t **)(v36 + 8);
  if (v34 != v35)
  {
    do
    {
      uint64_t v37 = *v35;
      unint64_t v38 = v3[54];
      if ((unint64_t)v7 >= v38)
      {
        uint64_t v39 = (v7 - *v33) >> 3;
        if ((unint64_t)(v39 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v40 = v38 - (void)*v33;
        uint64_t v41 = v40 >> 2;
        if (v40 >> 2 <= (unint64_t)(v39 + 1)) {
          uint64_t v41 = v39 + 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v42 = v41;
        }
        if (v42) {
          unint64_t v42 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v42);
        }
        else {
          a2 = 0;
        }
        int v43 = (void *)(v42 + 8 * v39);
        void *v43 = v37;
        std::vector<unsigned int>::pointer v7 = (char *)(v43 + 1);
        std::vector<unsigned int> v45 = (char *)v3[52];
        uint64_t v44 = (char *)v3[53];
        if (v44 != v45)
        {
          do
          {
            uint64_t v46 = *((void *)v44 - 1);
            v44 -= 8;
            *--int v43 = v46;
          }
          while (v44 != v45);
          uint64_t v44 = *v33;
        }
        v3[52] = v43;
        v3[53] = v7;
        v3[54] = v42 + 8 * (void)a2;
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(void *)std::vector<unsigned int>::pointer v7 = v37;
        v7 += 8;
      }
      v3[53] = v7;
      ++v35;
    }
    while (v35 != v34);
    char v28 = 1;
  }
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = v28;
  uint64_t v47 = *(void *)(a1[6] + 8);
  if (v33 != (char **)(v47 + 40)) {
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((void *)(v47 + 40), *v33, v7, (v7 - *v33) >> 3);
  }
  uint64_t v48 = *(HALS_ObjectMap ***)(v47 + 40);
  char v49 = *(HALS_ObjectMap ***)(v47 + 48);
  while (v48 != v49)
  {
    uint64_t v50 = *v48++;
    HALS_ObjectMap::RetainObject(v50, a2);
  }
}

void sub_1BAB2C1AC(_Unwind_Exception *a1)
{
}

void sub_1BAB2C1B8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_64c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_64c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = (void *)(a1 + 64);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 64), *(void *)(a2 + 72), (uint64_t)(*(void *)(a2 + 72) - *(void *)(a2 + 64)) >> 2);
}

void *std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>(void *result, char *__src, char *a3, unint64_t a4)
{
  int v6 = __src;
  std::vector<unsigned int>::pointer v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *std::vector<unsigned int>::pointer v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 61) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 61) {
LABEL_23:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    __n128 result = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v11);
    uint64_t v9 = (char *)result;
    *std::vector<unsigned int>::pointer v7 = result;
    v7[1] = result;
    void v7[2] = &result[v12];
    size_t v13 = a3 - v6;
    if (v13) {
      __n128 result = memmove(result, v6, v13);
    }
    unsigned int v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  unsigned int v14 = (void **)(result + 1);
  uint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 3;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    __n128 result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  int v17 = &__src[8 * v16];
  if (v15 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v15 - v9);
    uint64_t v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *unsigned int v14 = &v9[v13];
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned int>::__vallocate[abi:ne180100](this, __n);
    std::vector<unsigned int>::pointer end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_1BAB2C3A0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IODevice::GetDSPScope(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::HasValidDSP(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::ReapplyDSP(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::MaximumPastData(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::AvailablePastData(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::SupportsPastData(HALS_ClockDevice *this)
{
  return 0;
}

HALS_ObjectMap *HALS_IOUAClockDevice::_CopyIOEngine(HALS_ObjectMap **this, HALS_Object *a2)
{
  return this[55];
}

uint64_t HALS_ClockDevice::_CopyStreamByIndex(HALS_ClockDevice *this)
{
  return 0;
}

uint64_t HALS_ClockDevice::_GetNumberStreams(HALS_ClockDevice *this)
{
  return 0;
}

BOOL HALS_IODevice::GetIsRunningSomewhere(HALS_IODevice *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F62676F6E65;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5) != 0;
}

BOOL HALS_IOUAClockDevice::IsClockStable(HALS_IOUAClockDevice *this)
{
  int v5 = 0;
  uint64_t v4 = *(void *)"btscbolg";
  int v2 = 4;
  int v3 = 0;
  (*(void (**)(HALS_IOUAClockDevice *, void, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)this + 112))(this, *((unsigned int *)this + 96), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3 != 0;
}

uint64_t HALS_IOUAClockDevice::GetClockAlgorithm(HALS_IOUAClockDevice *this)
{
  int v5 = 0;
  uint64_t v4 = *(void *)"kolcbolg";
  int v2 = 4;
  unsigned int v3 = 0;
  (*(void (**)(HALS_IOUAClockDevice *, void, uint64_t *, uint64_t, int *, unsigned int *, void, void, void))(*(void *)this + 112))(this, *((unsigned int *)this + 96), &v4, 4, &v2, &v3, 0, 0, 0);
  return v3;
}

uint64_t HALS_IODevice::GetClockDomain(HALS_IODevice *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F62636C6B64;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_IODevice::GetSafetyOffset(HALS_IODevice *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if (a2) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  v5[0] = 1935763060;
  v5[1] = v3;
  uint64_t v5[2] = 0;
  uint64_t v6 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, _DWORD *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v2, v5, 4, &v6, (char *)&v6 + 4, 0, 0, 0);
  return HIDWORD(v6);
}

uint64_t HALS_IODevice::GetLatency(HALS_IODevice *this, int a2)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  if (a2) {
    int v3 = 1768845428;
  }
  else {
    int v3 = 1869968496;
  }
  v5[0] = 1819569763;
  v5[1] = v3;
  uint64_t v5[2] = 0;
  uint64_t v6 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, _DWORD *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v2, v5, 4, &v6, (char *)&v6 + 4, 0, 0, 0);
  return HIDWORD(v6);
}

uint64_t HALS_IODevice::GetRingBufferFrameSize(HALS_IODevice *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F6272696E67;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_IODevice::GetNominalSampleRateRanges(HALS_IODevice *this, int a2, unsigned int *a3, AudioValueRange *a4)
{
  uint64_t v5 = *((unsigned int *)this + 4);
  uint64_t v7 = 0x676C6F626E737223;
  int v8 = 0;
  unsigned int v9 = 0;
  uint64_t result = (*(uint64_t (**)(HALS_IODevice *, uint64_t, uint64_t *, void, unsigned int *, AudioValueRange *, void, void, void))(*(void *)this + 112))(this, v5, &v7, (16 * a2), &v9, a4, 0, 0, 0);
  *a3 = v9 >> 4;
  return result;
}

uint64_t HALS_IODevice::GetNumberNominalSampleRateRanges(HALS_IODevice *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F626E737223;
  int v4 = 0;
  return (*(unsigned int (**)(HALS_IODevice *, uint64_t, uint64_t *, void, void, void))(*(void *)this + 104))(this, v1, &v3, 0, 0, 0) >> 4;
}

uint64_t HALS_IODevice::SetNominalSampleRate(unsigned int *a1, uint64_t a2, double a3)
{
  uint64_t v4 = a1[4];
  uint64_t v6 = 0x676C6F626E737274;
  int v7 = 0;
  double v8 = a3;
  return (*(uint64_t (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, double *, void, void, uint64_t))(*(void *)a1 + 120))(a1, v4, &v6, 8, &v8, 0, 0, a2);
}

double HALS_IODevice::GetNominalSampleRate(HALS_IODevice *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F626E737274;
  int v4 = 0;
  double v6 = 0.0;
  int v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, int *, double *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 8, &v5, &v6, 0, 0, 0);
  return v6;
}

void HALS_IOUAClockDevice::create_mcp_engine(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

double HALS_ClockDevice::GetCombinedVolumeScalarForClient(HALS_ClockDevice *this)
{
  return 0.0;
}

uint64_t HALS_IODevice::DoAnyQueuesHaveWorkAfterFlush(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::CanBeAggregated(HALS_IODevice *this)
{
  return 1;
}

uint64_t HALS_ClockDevice::GetDebugDeviceUID(HALS_ClockDevice *this)
{
  return (uint64_t)this + 112;
}

const void *HALS_ClockDevice::CopyDeviceUID(HALS_ClockDevice *this)
{
  uint64_t result = (const void *)*((void *)this + 12);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((void *)this + 12);
  }
  return result;
}

uint64_t HALS_ClockDevice::GetDeviceUID(HALS_ClockDevice *this)
{
  return *((void *)this + 12);
}

void HALS_IOUAClockDevice::SetPropertyData(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const AudioObjectPropertyAddress *a5, unsigned int a6, void *a7, HALS_Client *a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (a3->mSelector == 1853059700)
  {
    if (a4 <= 7)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v22 = **(NSObject ***)buf;
      if (*(void *)v39) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v39);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        int v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)uint64_t v39 = 2080;
        *(void *)&v39[2] = "HALS_IOUAClockDevice.cpp";
        __int16 v40 = 1024;
        int v41 = 477;
        __int16 v42 = 2080;
        *(void *)int v43 = "inDataSize < SizeOf32(Float64)";
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v37);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v30, "kAudioHardwareBadPropertySizeError");
      std::runtime_error::runtime_error(&v31, &v30);
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      int v36 = -1;
      v31.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      long long v32 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v31);
      *(void *)&v43[6] = "virtual void HALS_IOUAClockDevice::SetPropertyData(AudioObjectID, const AudioObjectPropertyAd"
                           "dress &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
      uint64_t v44 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAClockDevice.cpp";
      int v45 = 477;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
      uint64_t v27 = &unk_1F148AA90;
      long long v28 = v25;
      uint64_t v29 = v26;
      long long v25 = 0uLL;
      uint64_t v26 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v12 = *((void *)this + 47);
    size_t v13 = *(HALS_IOUAUCDriver **)(v12 + 792);
    unsigned int v14 = *(std::__shared_weak_count **)(v12 + 800);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::SetPropertyData(v13, a3, *((_DWORD *)this + 96), a7, a6, a5, a4);
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  else
  {
    if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3)) {
      HALS_Object::SetPropertyData((uint64_t)this, a2, (uint64_t)a3, v17, (uint64_t)v18, v19, (uint64_t)v20, (uint64_t)a8);
    }
    HALS_IOUAObject::SetPropertyData((HALS_IOUAClockDevice *)((char *)this + 368), &a3->mSelector, a5, (CFTypeRef *)a7, v18, v19, v20, v21);
  }
}

void sub_1BAB2CD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAClockDevice::GetPropertyData(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, uint64_t *a6, unsigned int a7, void *a8, HALS_Client *a9)
{
  unint64_t v11 = a6;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector <= 1768124269)
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector == 1735354734 || mSelector == 1735356005)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_IOUAClockDevice.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 400;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAClockDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(void *)exception = off_1F148A5D8;
              exception[2] = 561211770;
            }
            *(_DWORD *)a6 = (*(uint64_t (**)(void))(**((void **)this + 55) + 672))(*((void *)this + 55));
            unsigned int v18 = 4;
LABEL_85:
            a5->signed int mSelector = v18;
            return;
          }
          goto LABEL_87;
        }
        if (mSelector == 1751412337) {
          goto LABEL_62;
        }
        int v19 = 1751737454;
        goto LABEL_61;
      }
      if (mSelector > 1818850144)
      {
        if (mSelector != 1818850145)
        {
          int v19 = 1818850162;
          goto LABEL_61;
        }
      }
      else if (mSelector != 1768124270)
      {
        int v19 = 1768777573;
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (mSelector <= 1668510817)
    {
      if (mSelector == 1634429294 || mSelector == 1668049764) {
        goto LABEL_62;
      }
      int v19 = 1668050795;
LABEL_61:
      if (mSelector == v19) {
        goto LABEL_62;
      }
LABEL_87:
      if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        HALS_ClockDevice::GetPropertyData(this, a2, a3, a4, &a5->mSelector, v11, a7, a8, a9);
      }
      else
      {
        HALS_IOUAObject::GetPropertyData((HALS_IOUAClockDevice *)((char *)this + 368), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)v11, (unsigned int *)a8, v48, v49, v50, a9);
      }
      return;
    }
    if (mSelector > 1668641651)
    {
      if (mSelector == 1668641652)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 50) - *((void *)this + 49)) >> 2) >= a4 / 0xCuLL) {
          unint64_t v41 = a4 / 0xCuLL;
        }
        else {
          unint64_t v41 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 50) - *((void *)this + 49)) >> 2);
        }
        if (v41)
        {
          uint64_t v42 = 0;
          unint64_t v43 = 0;
          do
          {
            uint64_t v44 = *((void *)this + 49);
            if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 50) - v44) >> 2) > v43)
            {
              int v45 = (char *)a6 + v42;
              uint64_t v46 = (uint64_t *)(v44 + v42);
              uint64_t v47 = *v46;
              *((_DWORD *)v45 + 2) = *((_DWORD *)v46 + 2);
              *(void *)int v45 = v47;
            }
            ++v43;
            v42 += 12;
          }
          while (12 * v41 != v42);
        }
        unsigned int v18 = 12 * v41;
        goto LABEL_85;
      }
      int v19 = 1684434036;
      goto LABEL_61;
    }
    if (mSelector == 1668510818)
    {
LABEL_62:
      *(void *)AudioStreamBasicDescription buf = a4;
      uint64_t v35 = *((void *)this + 47);
      uint64_t v36 = *(void *)(v35 + 792);
      char v37 = *(std::__shared_weak_count **)(v35 + 800);
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v36 + 4), a3, *((_DWORD *)this + 96), a8, a7, a6, (unint64_t *)buf);
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      a5->signed int mSelector = *(_DWORD *)buf;
      return;
    }
    int v20 = 1668639076;
    goto LABEL_69;
  }
  if (mSelector > 1853059699)
  {
    if (mSelector <= 1936092275)
    {
      if (mSelector <= 1920168546)
      {
        if (mSelector != 1853059700)
        {
          int v19 = 1919512167;
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (mSelector == 1920168547) {
        goto LABEL_62;
      }
      if (mSelector != 1935763060) {
        goto LABEL_87;
      }
      goto LABEL_57;
    }
    if (mSelector <= 1953653101)
    {
      if (mSelector != 1936092276)
      {
        int v19 = 1936876644;
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (mSelector == 1953653102) {
      goto LABEL_62;
    }
    int v20 = 1969841184;
    goto LABEL_69;
  }
  if (mSelector <= 1819569762)
  {
    if (mSelector != 1819107691 && mSelector != 1819111268)
    {
      int v20 = 1819173229;
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if (mSelector <= 1851878763)
  {
    if (mSelector == 1819569763)
    {
LABEL_57:
      if (a4 <= 3)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v55 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          unint64_t v56 = pthread_self();
          mach_port_t v57 = pthread_mach_thread_np(v56);
          *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v57;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_IOUAClockDevice.cpp";
          __int16 v73 = 1024;
          int v74 = 337;
          __int16 v75 = 2080;
          *(void *)std::logic_error v76 = "inDataSize < SizeOf32(UInt32)";
          _os_log_error_impl(&dword_1BAA78000, v55, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s bad property data size", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v71);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v64, "kAudioHardwareBadPropertySizeError");
        std::runtime_error::runtime_error(&v65, &v64);
        uint64_t v67 = 0;
        uint64_t v68 = 0;
        uint64_t v69 = 0;
        int v70 = -1;
        v65.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v66 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v65);
        *(void *)&v76[6] = "virtual void HALS_IOUAClockDevice::GetPropertyData(AudioObjectID, const AudioObjectProperty"
                             "Address &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        char v77 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IOUserAudio/HALS_IOUAClockDevice.cpp";
        int v78 = 337;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&outputStruct);
        unint64_t v61 = (unint64_t)&unk_1F148AA90;
        long long v62 = outputStruct;
        uint64_t v63 = v60;
        long long outputStruct = 0uLL;
        uint64_t v60 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      a5->signed int mSelector = 4;
      *(_DWORD *)a6 = 0;
      return;
    }
    int v20 = 1836411236;
LABEL_69:
    if (mSelector != v20) {
      goto LABEL_87;
    }
    goto LABEL_70;
  }
  if (mSelector == 1851878764)
  {
LABEL_70:
    uint64_t v38 = *((void *)this + 47);
    uint64_t v39 = *(void *)(v38 + 792);
    __int16 v40 = *(std::__shared_weak_count **)(v38 + 800);
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v81 = *((unsigned int *)this + 96);
    *((void *)&v81 + 1) = *(void *)&a3->mSelector;
    HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)buf, v39, v81, (void *)a3->mElement, a8, a7);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    uint64_t *v11 = (uint64_t)CFRetain(*(CFTypeRef *)buf);
    a5->signed int mSelector = 8;
    if (*(void *)buf) {
      CFRelease(*(CFTypeRef *)buf);
    }
    return;
  }
  if (mSelector != 1853059619) {
    goto LABEL_87;
  }
  strcpy(buf, "#rsnbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  uint64_t v21 = *((void *)this + 47);
  uint64_t v22 = *(void *)(v21 + 792);
  int v23 = *(std::__shared_weak_count **)(v21 + 800);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v22 + 4), (const AudioObjectPropertyAddress *)buf, *((_DWORD *)this + 96));
  BOOL v25 = HasProperty;
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (!v25)
  {
    unint64_t v61 = 8;
    *(void *)&long long outputStruct = 0;
    v65.__vftable = (std::runtime_error_vtbl *)0x676C6F626E737274;
    LODWORD(v65.__imp_.__imp_) = 0;
    uint64_t v51 = *((void *)this + 47);
    uint64_t v52 = *(void *)(v51 + 792);
    unint64_t v53 = *(std::__shared_weak_count **)(v51 + 800);
    if (v53) {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v52 + 4), (const AudioObjectPropertyAddress *)&v65, *((_DWORD *)this + 96), 0, 0, &outputStruct, &v61);
    if (v53) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v53);
    }
    if (a4 < 0x10)
    {
      unsigned int v18 = 0;
    }
    else
    {
      uint64_t v54 = outputStruct;
      uint64_t *v11 = outputStruct;
      v11[1] = v54;
      unsigned int v18 = 16;
    }
    goto LABEL_85;
  }
  MEMORY[0x1F4188790](HasProperty);
  uint64_t v27 = (const double *)((char *)&outputStruct - v26);
  v65.__vftable = v28;
  uint64_t v29 = *((void *)this + 47);
  uint64_t v30 = *(void *)(v29 + 792);
  std::runtime_error v31 = *(std::__shared_weak_count **)(v29 + 800);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v30 + 4), (const AudioObjectPropertyAddress *)buf, *((_DWORD *)this + 96), a8, a7, (char *)&outputStruct - v26, (unint64_t *)&v65);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  unint64_t v32 = (unint64_t)v65.__vftable >> 3;
  if (v65.__vftable >= (std::runtime_error_vtbl *)8)
  {
    if (v32 <= 1) {
      unint64_t v33 = 1;
    }
    else {
      unint64_t v33 = (unint64_t)v65.__vftable >> 3;
    }
    do
    {
      float64x2_t v34 = vld1q_dup_f64(v27++);
      *(float64x2_t *)unint64_t v11 = v34;
      v11 += 2;
      --v33;
    }
    while (v33);
  }
  a5->signed int mSelector = 16 * v32;
}

void sub_1BAB2D818(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAClockDevice::GetPropertyDataSize(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  signed int mSelector = a3->mSelector;
  uint64_t PropertySize = 4;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector > 1768124269)
      {
        if (mSelector > 1818850144)
        {
          if (mSelector != 1818850145)
          {
            int v14 = 1818850162;
LABEL_54:
            if (mSelector != v14) {
              goto LABEL_65;
            }
          }
        }
        else if (mSelector != 1768124270)
        {
          int v14 = 1768777573;
          goto LABEL_54;
        }
      }
      else
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector != 1735354734)
          {
            int v13 = 1735356005;
            goto LABEL_36;
          }
          return PropertySize;
        }
        if (mSelector != 1751412337)
        {
          int v14 = 1751737454;
          goto LABEL_54;
        }
      }
LABEL_55:
      uint64_t v24 = *((void *)this + 47);
      uint64_t v25 = *(void *)(v24 + 792);
      uint64_t v26 = *(std::__shared_weak_count **)(v24 + 800);
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v25 + 4), a3, *((_DWORD *)this + 96), a5, a4);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      return PropertySize;
    }
    if (mSelector <= 1668510817)
    {
      if (mSelector != 1634429294 && mSelector != 1668049764)
      {
        int v14 = 1668050795;
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (mSelector > 1668641651)
    {
      if (mSelector == 1668641652) {
        return (*((_DWORD *)this + 100) - *((_DWORD *)this + 98)) & 0xFFFFFFFC;
      }
      int v14 = 1684434036;
      goto LABEL_54;
    }
    if (mSelector == 1668510818) {
      goto LABEL_55;
    }
    int v15 = 1668639076;
    goto LABEL_61;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector <= 1819569762)
    {
      if (mSelector != 1819107691 && mSelector != 1819111268)
      {
        int v15 = 1819173229;
LABEL_61:
        if (mSelector != v15) {
          goto LABEL_65;
        }
      }
    }
    else
    {
      if (mSelector <= 1851878763)
      {
        if (mSelector == 1819569763) {
          return PropertySize;
        }
        int v15 = 1836411236;
        goto LABEL_61;
      }
      if (mSelector != 1851878764)
      {
        if (mSelector != 1853059619) {
          goto LABEL_65;
        }
        *(void *)&v32.signed int mSelector = 0x676C6F626E737223;
        v32.AudioObjectPropertyElement mElement = 0;
        uint64_t v16 = *((void *)this + 47);
        uint64_t v17 = *(void *)(v16 + 792);
        unsigned int v18 = *(std::__shared_weak_count **)(v16 + 800);
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), &v32, *((_DWORD *)this + 96));
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        if (!HasProperty) {
          return 16;
        }
        uint64_t v20 = *((void *)this + 47);
        uint64_t v21 = *(void *)(v20 + 792);
        uint64_t v22 = *(std::__shared_weak_count **)(v20 + 800);
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v23 = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v21 + 4), &v32, *((_DWORD *)this + 96), a5, a4);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        return (2 * v23) & 0xFFFFFFF0;
      }
    }
    return 8;
  }
  if (mSelector > 1936092275)
  {
    if (mSelector <= 1953653101)
    {
      if (mSelector != 1936092276)
      {
        int v14 = 1937009955;
        goto LABEL_54;
      }
      goto LABEL_55;
    }
    if (mSelector == 1953653102) {
      goto LABEL_55;
    }
    int v15 = 1969841184;
    goto LABEL_61;
  }
  if (mSelector <= 1920168546)
  {
    if (mSelector != 1853059700)
    {
      int v14 = 1919512167;
      goto LABEL_54;
    }
    goto LABEL_55;
  }
  if (mSelector == 1920168547) {
    goto LABEL_55;
  }
  int v13 = 1935763060;
LABEL_36:
  if (mSelector == v13) {
    return PropertySize;
  }
LABEL_65:
  if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    return HALS_ClockDevice::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUAClockDevice *)((char *)this + 368), a3, v28, v29, v30, v31);
  }
}

void sub_1BAB2DD80(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAClockDevice::IsPropertySettable(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  BOOL IsPropertySettable = 0;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1819107690)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector <= 1936092275)
      {
        if (mSelector > 1920168546)
        {
          if (mSelector != 1920168547)
          {
            int v9 = 1935763060;
            goto LABEL_43;
          }
        }
        else if (mSelector != 1853059700)
        {
          int v10 = 1919512167;
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (mSelector <= 1953653101)
      {
        if (mSelector != 1936092276)
        {
          int v10 = 1937009955;
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (mSelector == 1969841184) {
        goto LABEL_54;
      }
      int v10 = 1953653102;
LABEL_53:
      if (mSelector != v10) {
        goto LABEL_59;
      }
      goto LABEL_54;
    }
    if (mSelector > 1819569762)
    {
      if (mSelector <= 1851878763)
      {
        if (mSelector == 1819569763) {
          return IsPropertySettable;
        }
        int v10 = 1836411236;
        goto LABEL_53;
      }
      if (mSelector == 1851878764) {
        goto LABEL_54;
      }
      int v10 = 1853059619;
      goto LABEL_53;
    }
    BOOL v11 = mSelector == 1819107691 || mSelector == 1819111268;
    int v12 = 1819173229;
  }
  else
  {
    if (mSelector > 1735354733)
    {
      if (mSelector <= 1768124269)
      {
        if (mSelector <= 1751412336)
        {
          if (mSelector == 1735354734) {
            return IsPropertySettable;
          }
          int v9 = 1735356005;
LABEL_43:
          if (mSelector != v9) {
            goto LABEL_59;
          }
          return IsPropertySettable;
        }
        if (mSelector != 1751412337)
        {
          int v10 = 1751737454;
          goto LABEL_53;
        }
LABEL_54:
        uint64_t v14 = *((void *)this + 47);
        uint64_t v15 = *(void *)(v14 + 792);
        uint64_t v16 = *(std::__shared_weak_count **)(v14 + 800);
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL IsPropertySettable = HALS_IOUAUCDriver::GetIsPropertySettable((HALS_IOUAUCDriver *)*(unsigned int *)(v15 + 4), a3, *((_DWORD *)this + 96));
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        return IsPropertySettable;
      }
      if (mSelector <= 1818850144)
      {
        if (mSelector != 1768124270)
        {
          int v10 = 1768777573;
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (mSelector == 1818850145) {
        goto LABEL_54;
      }
      int v10 = 1818850162;
      goto LABEL_53;
    }
    if (mSelector > 1668510817)
    {
      if (mSelector > 1668641651)
      {
        if (mSelector == 1668641652) {
          return IsPropertySettable;
        }
        int v10 = 1684434036;
        goto LABEL_53;
      }
      if (mSelector != 1668510818)
      {
        int v10 = 1668639076;
        goto LABEL_53;
      }
      goto LABEL_54;
    }
    BOOL v11 = mSelector == 1634429294 || mSelector == 1668049764;
    int v12 = 1668050795;
  }
  if (v11 || mSelector == v12) {
    goto LABEL_54;
  }
LABEL_59:
  if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    return HALS_ClockDevice::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUAClockDevice *)((char *)this + 368), a3, v18, v19);
  }
}

void sub_1BAB2E124(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAClockDevice::HasProperty(HALS_IOUAClockDevice *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  signed int mSelector = a3->mSelector;
  BOOL HasProperty = 1;
  if ((int)a3->mSelector <= 1819107690)
  {
    if (mSelector <= 1735354733)
    {
      if (mSelector <= 1668510817)
      {
        if (mSelector == 1634429294 || mSelector == 1668049764) {
          goto LABEL_47;
        }
        int v8 = 1668050795;
      }
      else if (mSelector > 1668641651)
      {
        if (mSelector == 1668641652) {
          return *((void *)this + 50) != *((void *)this + 49);
        }
        int v8 = 1684434036;
      }
      else
      {
        if (mSelector == 1668510818) {
          goto LABEL_47;
        }
        int v8 = 1668639076;
      }
    }
    else if (mSelector > 1768124269)
    {
      if (mSelector > 1818850144)
      {
        if (mSelector == 1818850145) {
          goto LABEL_47;
        }
        int v8 = 1818850162;
      }
      else
      {
        if (mSelector == 1768124270) {
          goto LABEL_47;
        }
        int v8 = 1768777573;
      }
    }
    else
    {
      if (mSelector <= 1751412336)
      {
        if (mSelector != 1735354734)
        {
          int v7 = 1735356005;
          goto LABEL_36;
        }
        return HasProperty;
      }
      if (mSelector == 1751412337)
      {
LABEL_47:
        uint64_t v9 = *((void *)this + 47);
        uint64_t v10 = *(void *)(v9 + 792);
        BOOL v11 = *(std::__shared_weak_count **)(v9 + 800);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v10 + 4), a3, *((_DWORD *)this + 96));
        if (v11) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
        return HasProperty;
      }
      int v8 = 1751737454;
    }
LABEL_46:
    if (mSelector != v8) {
      goto LABEL_53;
    }
    goto LABEL_47;
  }
  if (mSelector <= 1853059699)
  {
    if (mSelector <= 1819569762)
    {
      if (mSelector == 1819107691 || mSelector == 1819111268) {
        goto LABEL_47;
      }
      int v8 = 1819173229;
    }
    else if (mSelector > 1851878763)
    {
      if (mSelector == 1851878764) {
        goto LABEL_47;
      }
      int v8 = 1853059619;
    }
    else
    {
      if (mSelector == 1819569763) {
        return HasProperty;
      }
      int v8 = 1836411236;
    }
    goto LABEL_46;
  }
  if (mSelector > 1936092275)
  {
    if (mSelector > 1953653101)
    {
      if (mSelector == 1969841184) {
        goto LABEL_47;
      }
      int v8 = 1953653102;
    }
    else
    {
      if (mSelector == 1936092276) {
        goto LABEL_47;
      }
      int v8 = 1937009955;
    }
    goto LABEL_46;
  }
  if (mSelector <= 1920168546)
  {
    if (mSelector == 1853059700) {
      goto LABEL_47;
    }
    int v8 = 1919512167;
    goto LABEL_46;
  }
  if (mSelector == 1920168547) {
    goto LABEL_47;
  }
  int v7 = 1935763060;
LABEL_36:
  if (mSelector == v7) {
    return HasProperty;
  }
LABEL_53:
  if (HALS_ClockDevice::HasProperty((uint64_t)this, a2, (int *)a3)) {
    return HasProperty;
  }
  int v13 = *(uint64_t (**)(void))(*((void *)this + 46) + 16);

  return v13();
}

void sub_1BAB2E498(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAClockDevice::_Deactivate(HALS_IOUAClockDevice *this)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 52);
  uint64_t v3 = (HALS_ObjectMap **)*((void *)this + 53);
  if (v2 != v3)
  {
    do
    {
      (*(void (**)(void))(*(void *)*v2 + 8))();
      int v4 = *v2++;
      HALS_ObjectMap::ObjectIsDead(v4, v5);
    }
    while (v2 != v3);
    uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 52);
  }
  *((void *)this + 53) = v2;
  *((_DWORD *)this + 2) = 0;
}

void HALS_IOUAClockDevice::Activate(HALS_IOUAClockDevice *this)
{
}

void sub_1BAB2E720(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<HALS_IOUAEngine::io_ipc_info_t>>>>::destroy(*(void **)(v1 + 1200));
  int v4 = *(std::__shared_weak_count **)(v1 + 1136);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  HALS_IOEngine2::~HALS_IOEngine2((HALS_IOEngine2 *)v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  MEMORY[0x1C1859840](v1, 0x10E1C4032EB3ED5);
  _Unwind_Resume(a1);
}

void HALB_SharedBuffer::~HALB_SharedBuffer(HALB_SharedBuffer *this)
{
  HALB_SharedBuffer::~HALB_SharedBuffer(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  *(void *)this = &unk_1F145ED50;
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    if (*((unsigned char *)this + 56))
    {
      munlock(v2, *((void *)this + 2));
      uint64_t v2 = (void *)*((void *)this + 1);
    }
    HALB_IOBufferManager_Server::FreeBuffer((HALB_IOBufferManager_Server *)v2, *((_DWORD *)this + 4));
  }
  caulk::mach::mach_port::~mach_port((mach_port_name_t *)this + 15);
}

void caulk::mach::mach_port::~mach_port(mach_port_name_t *this)
{
  if (*this) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], *this);
  }
}

vm_address_t HALB_SharedBuffer::Allocate_Server(HALB_SharedBuffer *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!*((unsigned char *)this + 55))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "HALB_SharedBuffer.cpp";
      __int16 v8 = 1024;
      int v9 = 281;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Allocate_Server: this process does not own the shared memory object", (uint8_t *)&v6, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  vm_size_t v2 = *((void *)this + 2);
  if (!v2)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v6 = 136315394;
      int v7 = "HALB_SharedBuffer.cpp";
      __int16 v8 = 1024;
      int v9 = 282;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_SharedBuffer::Allocate_Server: allocating a size of 0 is not supported", (uint8_t *)&v6, 0x12u);
    }
    int v5 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v5 = off_1F148A5D8;
    uint64_t v5[2] = 1852797029;
  }
  vm_address_t result = HALB_IOBufferManager_Server::AllocateBuffer(v2);
  *((void *)this + 1) = result;
  return result;
}

void caulk::mach::error_category::message(caulk::mach::error_category *this@<X0>, mach_error_t a2@<W1>, std::string *a3@<X8>)
{
  int v5 = (char *)(*(uint64_t (**)(caulk::mach::error_category *))(*(void *)this + 16))(this);
  std::string::basic_string[abi:ne180100]<0>(&v11, v5);
  int v6 = std::string::append(&v11, ": ", 2uLL);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  __int16 v8 = mach_error_string(a2);
  size_t v9 = strlen(v8);
  uint64_t v10 = std::string::append(&v12, v8, v9);
  *a3 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_1BAB2EB24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const char *caulk::mach::error_category::name(caulk::mach::error_category *this)
{
  return "Mach";
}

void caulk::mach::error_category::~error_category(std::error_category *this)
{
  std::error_category::~error_category(this);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOA2UCDevice::SupportsPreWarming(HALS_IOA2UCDevice *this)
{
  return *((unsigned __int8 *)this + 35);
}

void HALS_IOA2UCDevice::~HALS_IOA2UCDevice(HALS_IOA2UCDevice *this)
{
  HALB_UCObject::~HALB_UCObject(this);

  JUMPOUT(0x1C1859840);
}

double HALS_IOA2UCDevice::GetNominalSampleRate(const __CFDictionary **this)
{
  CFTypeRef cf = 0;
  double v1 = 0.0;
  if (HALB_UCObject::CopyProperty_CFType(this, @"sample rate", &cf))
  {
    CFNumberRef v2 = (const __CFNumber *)cf;
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 == CFNumberGetTypeID())
    {
      CFNumberRef v7 = v2;
      char v8 = 0;
      uint64_t valuePtr = 0;
      if (v2)
      {
        CFNumberGetValue(v2, kCFNumberSInt64Type, &valuePtr);
        uint64_t v4 = valuePtr;
        double v5 = 1.0;
        if (valuePtr < 0) {
          double v5 = -1.0;
        }
      }
      else
      {
        uint64_t v4 = 0;
        double v5 = 1.0;
      }
      double v1 = v5
         * ((double)(v4 * (uint64_t)v5) * 2.32830644e-10
          + (double)(((unint64_t)(v4 * (uint64_t)v5) >> 32) & 0x7FFFFFFF));
      CACFNumber::~CACFNumber((CACFNumber *)&v7);
    }
    CFRelease(v2);
  }
  return v1;
}

void sub_1BAB2ECC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

const void *HALS_IOA2UCDevice::CopyDeviceUID(HALS_IOA2UCDevice *this)
{
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty((io_registry_entry_t)this, @"device UID", 0, 0);
  CFNumberRef v2 = CFProperty;
  if (CFProperty)
  {
    CFTypeID v3 = CFGetTypeID(CFProperty);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(v2);
      return 0;
    }
  }
  return v2;
}

void CACFArray::~CACFArray(CACFArray *this)
{
  if (*((unsigned char *)this + 8))
  {
    CFNumberRef v2 = *(const void **)this;
    if (*(void *)this) {
      CFRelease(v2);
    }
  }
}

CFArrayRef HALS_IOA2UCDevice::CopyStreamDictionaryByID(const __CFDictionary **this, int a2)
{
  char v4 = 1;
  do
  {
    CFArrayRef theArray = 0;
    if (v4) {
      CFStringRef v5 = @"output streams";
    }
    else {
      CFStringRef v5 = @"input streams";
    }
    HALB_UCObject::CopyProperty_CFArray(this, v5, &theArray);
    CFArrayRef v17 = theArray;
    __int16 v18 = 1;
    if (theArray && (unsigned int Count = CFArrayGetCount(theArray)) != 0)
    {
      unsigned int v7 = 1;
      do
      {
        CFArrayRef theArray = 0;
        __int16 v16 = 0;
        CACFArray::GetCACFDictionary(&v17, v7 - 1, (CACFDictionary *)&theArray);
        if (theArray
          && ((unsigned int v14 = 0, UInt32 = CACFDictionary::GetUInt32((uint64_t)theArray, @"stream ID", &v14), v14 == a2)
            ? (int v9 = UInt32)
            : (int v9 = 0),
              v9 == 1 && theArray))
        {
          CFRetain(theArray);
          CFArrayRef v10 = theArray;
        }
        else
        {
          CFArrayRef v10 = 0;
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&theArray);
        if (v10) {
          break;
        }
      }
      while (v7++ < Count);
    }
    else
    {
      CFArrayRef v10 = 0;
    }
    CACFArray::~CACFArray((CACFArray *)&v17);
    char v12 = (v10 == 0) & v4;
    char v4 = 0;
  }
  while ((v12 & 1) != 0);
  return v10;
}

void sub_1BAB2EEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

BOOL CA::Implementation::EquivalentFormatFlags(CA::Implementation *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3, char a4)
{
  if (a4)
  {
    int v4 = *((_DWORD *)this + 3);
    int32x4_t v5 = *(int32x4_t *)&a2->mFormatID;
    v5.i64[1] = *((void *)this + 1);
    if (vmaxv_u16((uint16x4_t)vmovn_s32(vceqzq_s32(v5)))) {
      return 1;
    }
  }
  else
  {
    int v4 = *((_DWORD *)this + 3);
  }
  if (*((_DWORD *)this + 2) != 1819304813) {
    return v4 == a2->mFormatFlags;
  }
  int v7 = v4 & 0x7FFFFFFF;
  if ((v4 & 0x7FFFFFFF) == 0) {
    int v7 = v4;
  }
  if (a3) {
    unsigned int v8 = v7;
  }
  else {
    unsigned int v8 = v7 & 0xFFFFFFBF;
  }
  unsigned int v9 = *((_DWORD *)this + 6);
  if (v9)
  {
    int v10 = *((_DWORD *)this + 7);
    if ((v4 & 0x20) != 0) {
      unsigned int v11 = 1;
    }
    else {
      unsigned int v11 = *((_DWORD *)this + 7);
    }
    if (v11)
    {
      unsigned int v9 = 8 * (v9 / v11);
      unsigned int v12 = *((_DWORD *)this + 8);
      int v13 = v8 | 8;
      BOOL v14 = v9 == v12;
      goto LABEL_21;
    }
    unsigned int v9 = 0;
    unsigned int v12 = *((_DWORD *)this + 8);
    int v13 = v8 | 8;
  }
  else
  {
    int v13 = v8 | 8;
    int v10 = *((_DWORD *)this + 7);
    unsigned int v12 = *((_DWORD *)this + 8);
  }
  BOOL v14 = v12 == 0;
LABEL_21:
  if (v14) {
    unsigned int v8 = v13;
  }
  BOOL v16 = (v12 & 7) == 0 && v9 == v12;
  unsigned int v17 = v8 & 0xFFFFFFEF;
  if (!v16) {
    unsigned int v17 = v8;
  }
  if (v17) {
    v17 &= ~4u;
  }
  BOOL v18 = (v17 & 8) == 0 || v12 > 8;
  int v19 = v17 & 2;
  if (v18) {
    int v19 = v17;
  }
  if (v10 == 1) {
    unsigned int v20 = v19 & 0xFFFFFFDF;
  }
  else {
    unsigned int v20 = v19;
  }
  if (!v20) {
    unsigned int v20 = 0x80000000;
  }
  AudioFormatFlags mFormatFlags = a2->mFormatFlags;
  if (a2->mFormatID != 1819304813) {
    return v20 == mFormatFlags;
  }
  AudioFormatFlags v22 = mFormatFlags & 0x7FFFFFFF;
  if ((mFormatFlags & 0x7FFFFFFF) == 0) {
    AudioFormatFlags v22 = a2->mFormatFlags;
  }
  if (a3) {
    unsigned int v23 = v22;
  }
  else {
    unsigned int v23 = v22 & 0xFFFFFFBF;
  }
  UInt32 mBytesPerFrame = a2->mBytesPerFrame;
  if (!mBytesPerFrame)
  {
    int v28 = v23 | 8;
    UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
LABEL_54:
    BOOL v29 = mBitsPerChannel == 0;
    goto LABEL_55;
  }
  UInt32 mChannelsPerFrame = a2->mChannelsPerFrame;
  if ((mFormatFlags & 0x20) != 0) {
    UInt32 v26 = 1;
  }
  else {
    UInt32 v26 = a2->mChannelsPerFrame;
  }
  if (!v26)
  {
    UInt32 mBytesPerFrame = 0;
    UInt32 mBitsPerChannel = a2->mBitsPerChannel;
    int v28 = v23 | 8;
    goto LABEL_54;
  }
  UInt32 mBytesPerFrame = 8 * (mBytesPerFrame / v26);
  UInt32 mBitsPerChannel = a2->mBitsPerChannel;
  int v28 = v23 | 8;
  BOOL v29 = mBytesPerFrame == mBitsPerChannel;
LABEL_55:
  if (v29) {
    unsigned int v23 = v28;
  }
  BOOL v30 = (mBitsPerChannel & 7) == 0 && mBytesPerFrame == mBitsPerChannel;
  unsigned int v31 = v23 & 0xFFFFFFEF;
  if (!v30) {
    unsigned int v31 = v23;
  }
  if (v31) {
    v31 &= ~4u;
  }
  BOOL v32 = (v31 & 8) == 0 || mBitsPerChannel > 8;
  int v33 = v31 & 2;
  if (v32) {
    int v33 = v31;
  }
  if (mChannelsPerFrame == 1) {
    unsigned int v34 = v33 & 0xFFFFFFDF;
  }
  else {
    unsigned int v34 = v33;
  }
  if (v34) {
    AudioFormatFlags mFormatFlags = v34;
  }
  else {
    AudioFormatFlags mFormatFlags = 0x80000000;
  }
  return v20 == mFormatFlags;
}

void HALS_IOA2UCDevice::SetStreamActive(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3)
{
  kern_return_t v4;
  mach_port_t v5;
  uint8_t buf[4];
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  kern_return_t v11;
  uint64_t input[3];

  input[2] = *MEMORY[0x1E4F143B8];
  int v4 = 1937010544;
  input[0] = a2;
  input[1] = a3;
  int32x4_t v5 = *((_DWORD *)this + 3);
  if ((!v5 || !*((unsigned char *)this + 34)
            || (int v4 = IOConnectCallMethod(v5, 6u, input, 2u, 0, 0, 0, 0, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    int v7 = "HALS_IOA2UCDevice.cpp";
    unsigned int v8 = 1024;
    unsigned int v9 = 735;
    int v10 = 1024;
    unsigned int v11 = v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetStreamActive: got an error when telling the hardware to turn a stream on or off, Error: 0x%X", buf, 0x18u);
  }
}

CFTypeRef HALS_IOA2UCDevice::CopyControlDictionaryByID(const __CFDictionary **this, int a2)
{
  CFArrayRef theArray = 0;
  HALB_UCObject::CopyProperty_CFArray(this, @"controls", &theArray);
  CFArrayRef v9 = theArray;
  __int16 v10 = 1;
  __int16 v15 = 0;
  if (theArray && (unsigned int Count = CFArrayGetCount(theArray)) != 0)
  {
    for (unsigned int i = 0; i < Count; ++i)
    {
      CFTypeRef cf = 0;
      __int16 v13 = 0;
      CACFArray::GetCACFDictionary(&theArray, i, (CACFDictionary *)&cf);
      if (cf
        && ((unsigned int v11 = 0, UInt32 = CACFDictionary::GetUInt32((uint64_t)cf, @"control ID", &v11), v11 == a2)
          ? (int v6 = UInt32)
          : (int v6 = 0),
            v6 == 1 && cf))
      {
        CFRetain(cf);
        CFTypeRef v7 = cf;
      }
      else
      {
        CFTypeRef v7 = 0;
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
      if (v7) {
        break;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  CACFArray::~CACFArray((CACFArray *)&theArray);
  CACFArray::~CACFArray((CACFArray *)&v9);
  return v7;
}

void sub_1BAB2F2C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  CACFArray::~CACFArray((CACFArray *)va1);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetControlInfo_Value(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  uint64_t v5 = this;
  __int16 v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, @"value", &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 921;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetControlInfoByIndex_Value: there is no control value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    uint64_t v2 = v7;
  }
  else
  {
    uint64_t v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1BAB2F430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v5 = this;
  __int16 v6 = 0;
  if (this)
  {
    if ((CACFDictionary::GetArray((uint64_t)this, @"value", (const __CFArray **)&cf) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 1034;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopySelectorControlInfo_MultiSelectorValue: there is no selector value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    CFTypeRef v2 = cf;
    CFRetain(cf);
  }
  else
  {
    CFTypeRef v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1BAB2F58C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_IOA2UCDevice::CopySelectorControlInfo_SelectorMap(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v5 = this;
  __int16 v6 = 0;
  if (this)
  {
    if ((CACFDictionary::GetArray((uint64_t)this, @"selectors", (const __CFArray **)&cf) & 1) == 0)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 1047;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::CopySelectorControlInfoByIndex_SelectorMap: there is no selector map", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    CFTypeRef v2 = cf;
    CFRetain(cf);
  }
  else
  {
    CFTypeRef v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1BAB2F6E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetStereoPanControlInfo_LeftValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  uint64_t v5 = this;
  __int16 v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, @"left value", &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 1060;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_LeftValue: there is no left value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    uint64_t v2 = v7;
  }
  else
  {
    uint64_t v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1BAB2F83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetStereoPanControlInfo_CenterValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  uint64_t v5 = this;
  __int16 v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, @"center value", &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 1072;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_CenterValue: there is no center value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    uint64_t v2 = v7;
  }
  else
  {
    uint64_t v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1BAB2F990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_IOA2UCDevice::GetStereoPanControlInfo_RightValue(HALS_IOA2UCDevice *this, const __CFDictionary *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = 0;
  uint64_t v5 = this;
  __int16 v6 = 0;
  if (this)
  {
    if (!CACFDictionary::GetUInt32((uint64_t)this, @"right value", &v7))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
        __int16 v10 = 1024;
        int v11 = 1084;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::GetStereoPanControlInfoByIndex_RightValue: there is no right value", buf, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    uint64_t v2 = v7;
  }
  else
  {
    uint64_t v2 = 0;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  return v2;
}

void sub_1BAB2FAE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void HALS_IOA2UCDevice::MoveBlockControlData(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  kern_return_t v5;
  mach_port_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  kern_return_t v12;
  uint64_t input[4];

  uint64_t input[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 1937010544;
  input[0] = a2;
  input[1] = a3;
  input[2] = a4;
  __int16 v6 = *((_DWORD *)this + 3);
  if ((!v6 || !*((unsigned char *)this + 34)
            || (uint64_t v5 = IOConnectCallMethod(v6, 9u, input, 3u, 0, 0, 0, 0, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    uint64_t v8 = "HALS_IOA2UCDevice.cpp";
    CFArrayRef v9 = 1024;
    __int16 v10 = 1157;
    int v11 = 1024;
    uint64_t v12 = v5;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MoveBlockControlData: got an error when telling the hardware to move the block control data, Error: 0x%X", buf, 0x18u);
  }
}

uint64_t HALS_IOA2UCDevice::MoveDataExchangeBlockData(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t input[3] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 1937010544;
  input[0] = a2;
  input[1] = a4;
  input[2] = a3;
  mach_port_t v6 = *((_DWORD *)this + 3);
  if (!v6
    || !*((unsigned char *)this + 34)
    || (uint64_t v5 = IOConnectCallMethod(v6, 7u, input, 3u, 0, 0, 0, 0, 0, 0), v5))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
      __int16 v10 = 1024;
      int v11 = 1251;
      __int16 v12 = 1024;
      int v13 = v5;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MoveDataExchangeBlockData: got an error when telling the hardware to move the block control data, Error: 0x%X", buf, 0x18u);
    }
  }
  return v5;
}

uint64_t HALS_IOA2UCDevice::StartIOWithFlags(HALS_IOA2UCDevice *this, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 1937010544;
  uint64_t output = 0;
  uint64_t input = a2;
  uint32_t outputCnt = 1;
  mach_port_t v4 = *((_DWORD *)this + 3);
  if (!v4
    || !*((unsigned char *)this + 34)
    || (uint64_t v3 = IOConnectCallMethod(v4, 0xAu, &input, 1u, 0, 0, &output, &outputCnt, 0, 0), v3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      __int16 v10 = "HALS_IOA2UCDevice.cpp";
      __int16 v11 = 1024;
      int v12 = 1271;
      __int16 v13 = 1024;
      int v14 = v3;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StartIOWithFlags: got an error when telling the hardware to start, Error: 0x%X", buf, 0x18u);
    }
  }
  return v3;
}

void HALS_IOA2UCDevice::StopIOWithFlags(HALS_IOA2UCDevice *this, uint64_t a2)
{
  kern_return_t v3;
  mach_port_t v4;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  kern_return_t v13;
  uint64_t v14;

  int v14 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 1937010544;
  uint64_t output = 0;
  uint64_t input = a2;
  uint32_t outputCnt = 1;
  mach_port_t v4 = *((_DWORD *)this + 3);
  if ((!v4
     || !*((unsigned char *)this + 34)
     || (uint64_t v3 = IOConnectCallMethod(v4, 0xBu, &input, 1u, 0, 0, &output, &outputCnt, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    CFArrayRef v9 = "HALS_IOA2UCDevice.cpp";
    __int16 v10 = 1024;
    __int16 v11 = 1291;
    int v12 = 1024;
    __int16 v13 = v3;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::StopIOWithFlags: got an error when telling the hardware to stop, Error: 0x%X", buf, 0x18u);
  }
}

uint64_t HALS_IOA2UCDevice::DoIO(HALS_IOA2UCDevice *this)
{
  uint64_t result = *((unsigned int *)this + 3);
  if (result)
  {
    if (*((unsigned char *)this + 34)) {
      JUMPOUT(0x1C1858890);
    }
  }
  return result;
}

void HALS_IOA2UCDevice::SetStreamCurrentFormat(HALS_IOA2UCDevice *this, unsigned int a2, const AudioStreamBasicDescription *a3)
{
  kern_return_t v4;
  mach_port_t v5;
  unint64_t inputStruct;
  long long v7;
  uint64_t v8;
  UInt32 mBitsPerChannel;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  kern_return_t v15;
  uint64_t input[2];

  input[1] = *MEMORY[0x1E4F143B8];
  mach_port_t v4 = 1937010544;
  inputStruct = vcvtd_n_s64_f64(a3->mSampleRate - floor(a3->mSampleRate), 0x20uLL) | (vcvtmd_s64_f64(a3->mSampleRate) << 32);
  unsigned int v7 = *(_OWORD *)&a3->mFormatID;
  uint64_t v8 = *(void *)&a3->mBytesPerFrame;
  UInt32 mBitsPerChannel = a3->mBitsPerChannel;
  input[0] = a2;
  uint64_t v5 = *((_DWORD *)this + 3);
  if ((!v5
     || !*((unsigned char *)this + 34)
     || (mach_port_t v4 = IOConnectCallMethod(v5, 5u, input, 1u, &inputStruct, 0x28uLL, 0, 0, 0, 0)) != 0)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    __int16 v11 = "HALS_IOA2UCDevice.cpp";
    int v12 = 1024;
    __int16 v13 = 1328;
    int v14 = 1024;
    uint64_t v15 = v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetStreamCurrentFormat: got an error when telling the hardware to set the stream format, Error: 0x%X", buf, 0x18u);
  }
}

uint64_t HALS_IOA2UCDevice::SetControlValue(HALS_IOA2UCDevice *this, unsigned int a2, unsigned int a3, unsigned int *a4)
{
  input[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = 1937010544;
  input[0] = a2;
  input[1] = a3;
  uint64_t output = a3;
  uint32_t outputCnt = 1;
  mach_port_t v6 = *((_DWORD *)this + 3);
  if (v6
    && *((unsigned char *)this + 34)
    && (uint64_t v5 = IOConnectCallMethod(v6, 2u, input, 2u, 0, 0, &output, &outputCnt, 0, 0), !v5))
  {
    *a4 = output;
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    __int16 v11 = "HALS_IOA2UCDevice.cpp";
    __int16 v12 = 1024;
    int v13 = 1339;
    __int16 v14 = 1024;
    int v15 = v5;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::SetControlValue: got an error when telling the hardware to change a control value, Error: 0x%X", buf, 0x18u);
  }
  return v5;
}

uint64_t HALS_IOA2UCDevice::SetMultiControlValue(mach_port_t *this, unsigned int a2, const unsigned int *a3, int a4, unsigned int *a5, unsigned int a6, unsigned int *a7)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 1937010544;
  size_t v12 = 4 * (a4 + 1);
  MEMORY[0x1F4188790](this);
  __int16 v14 = (char *)&v20 - v13;
  *(_DWORD *)((char *)&v20 - v13) = v15;
  memcpy((char *)&v20 - v13 + 4, v17, 4 * v16);
  size_t v21 = 4 * a6;
  mach_port_t v18 = this[3];
  if (v18
    && *((unsigned char *)this + 34)
    && (uint64_t v11 = IOConnectCallMethod(v18, 8u, 0, 0, v14, v12, 0, 0, a5, &v21), !v11))
  {
    *a7 = v21 >> 2;
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
    unsigned int v23 = "HALS_IOA2UCDevice.cpp";
    __int16 v24 = 1024;
    int v25 = 1362;
    __int16 v26 = 1024;
    int v27 = v11;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HAL_IOA2PhysicalDevice::SetMultiControlValue: got an error when telling the hardware to change a multi control value, Error: 0x%X", buf, 0x18u);
  }
  return v11;
}

uint64_t CACFDictionary::operator=(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
    mach_port_t v4 = *(const void **)a1;
    if (*(void *)a1) {
      CFRelease(v4);
    }
  }
  uint64_t v5 = *(const void **)a2;
  *(void *)a1 = *(void *)a2;
  int v6 = *(unsigned __int8 *)(a2 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  if (v6) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFRetain(v5);
  }
  return a1;
}

uint64_t HALS_IOA2UCDevice::PerformConfigChange(uint64_t a1, void *inputStruct)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 1937010544;
  mach_port_t v4 = *(_DWORD *)(a1 + 12);
  if (!v4
    || !*(unsigned char *)(a1 + 34)
    || (uint64_t v3 = IOConnectCallMethod(v4, 3u, 0, 0, inputStruct, 0x20uLL, 0, 0, 0, 0), v3))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      BOOL v7 = "HALS_IOA2UCDevice.cpp";
      __int16 v8 = 1024;
      int v9 = 1606;
      __int16 v10 = 1024;
      int v11 = v3;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::PerformConfigChange: got an error from the call down to the driver, Error: 0x%X", buf, 0x18u);
    }
  }
  return v3;
}

uint64_t HALS_IOA2UCDevice::MapEngineStatus(HALB_UCObject *a1, uint64_t *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unsigned int v5 = 0;
  uint64_t result = HALB_UCObject::MapMemory(a1, 0, 1u, &v5);
  if (v5 <= 0x27)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
      BOOL v7 = "HALS_IOA2UCDevice.cpp";
      __int16 v8 = 1024;
      int v9 = 1614;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2UCDevice::MapEngineStatus: Mapped engine status is not large enough.", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 2003329396;
  }
  *a2 = result;
  return result;
}

uint64_t HALS_IOThread::DispatchThread(HALS_IOThread *this)
{
  return HALB_IOThread::DispatchPThread(this, (void *(__cdecl *)(void *))HALS_IOThread::Entry, this);
}

uint64_t HALS_IOThread::Entry(HALS_IOThread *this, void *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v49 = (HALS_IOThread *)((char *)this + 16);
  int v50 = HALB_Mutex::Lock((HALS_IOThread *)((char *)this + 16));
  if (*((unsigned char *)this + 180)) {
    pthread_setname_np((const char *)this + 180);
  }
  HALB_IOThread::PostStateChange(this, 1920298606);
  uint64_t v3 = (AMCP::Utility *)(*(uint64_t (**)(HALS_IOThread *, void, void))(*(void *)this + 16))(this, *((void *)this + 42), *((unsigned __int8 *)this + 344));
  int v4 = (int)v3;
  unsigned int v5 = AMCP::Utility::configure_syscall_mask_for_normal_priority(v3);
  int v6 = (int)v5;
  if (v5)
  {
    unsigned int v5 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v5)
    {
      *(_DWORD *)AudioStreamBasicDescription buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_IOThread.mm";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 208;
      *(_WORD *)&unsigned char buf[18] = 1024;
      LODWORD(v56) = v6;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - configure_syscall_mask_for_normal_priority failed, Error: 0x%X", buf, 0x18u);
    }
  }
  if (v4)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v7 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
    __int16 v8 = pthread_self();
    mach_port_t v9 = pthread_mach_thread_np(v8);
    uint64_t v10 = __error();
    int v11 = strerror(*v10);
    uint64_t v12 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v12 + 16) = 0;
    *(unsigned char *)(v12 + 20) = 16;
    *(_DWORD *)(v12 + 24) = v9;
    *(void *)(v12 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v12 + 40) = 307;
    *(_DWORD *)(v12 + 44) = v4;
    *(void *)(v12 + 48) = v11;
    *(void *)uint64_t v12 = &unk_1F145EEE0;
    *(void *)(v12 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v7, (caulk::concurrent::message *)v12);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (*((_DWORD *)this + 40) != 1735552612)
  {
    uint64_t v13 = (caulk::mach::os_workgroup_managed *)*((void *)this + 31);
    if (v13)
    {
      if (*((void *)v13 + 1))
      {
        __int16 v14 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_managed::join(v13);
        if (!v14) {
          goto LABEL_20;
        }
        int v15 = (int)v14;
        AMCP::Log::Scope_Registry::get(v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unsigned int v16 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
        unsigned int v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        int v19 = __error();
        uint64_t v20 = strerror(*v19);
        uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
        *(_DWORD *)(v21 + 16) = 0;
        *(unsigned char *)(v21 + 20) = 16;
        *(_DWORD *)(v21 + 24) = v18;
        *(void *)(v21 + 32) = "HALS_IOThread.mm";
        *(_DWORD *)(v21 + 40) = 706;
        *(_DWORD *)(v21 + 44) = v15;
        *(void *)(v21 + 48) = v20;
        *(void *)uint64_t v21 = &unk_1F145F090;
        *(void *)(v21 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v16, (caulk::concurrent::message *)v21);
      }
      else
      {
        AMCP::Log::Scope_Registry::get(v13);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unsigned int v31 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
        BOOL v32 = pthread_self();
        mach_port_t v33 = pthread_mach_thread_np(v32);
        uint64_t v34 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
        *(_DWORD *)(v34 + 16) = 0;
        *(unsigned char *)(v34 + 20) = 2;
        *(_DWORD *)(v34 + 24) = v33;
        *(void *)(v34 + 32) = "HALS_IOThread.mm";
        *(_DWORD *)(v34 + 40) = 712;
        *(void *)uint64_t v34 = &unk_1F145F0E8;
        *(void *)(v34 + 8) = 0;
        caulk::concurrent::messenger::enqueue(v31, (caulk::concurrent::message *)v34);
      }
      BOOL v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8])
      {
LABEL_20:
        LOBYTE(v35) = 0;
        int v36 = 0;
        int v37 = 1;
        while ((HALB_IOThread::HasBeenStopped(this) & 1) == 0 && v37 && !v36)
        {
          int v37 = (*(uint64_t (**)(void))(*((void *)this + 44) + 16))();
          char v38 = v35;
          if (!(v35 & 1 | (v37 != 1))) {
            char v38 = HALS_IOThread::WorkgroupStart((caulk::mach::os_workgroup_interval_managed **)this, 0, 0);
          }
          int v36 = (*(uint64_t (**)(void))(*((void *)this + 45) + 16))();
          LOBYTE(v35) = 0;
          if (v38) {
            int v35 = HALS_IOThread::WorkgroupFinish(this) ^ 1;
          }
        }
        uint64_t v39 = (caulk::mach::os_workgroup_managed *)*((void *)this + 31);
        if (!v39)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v46 = **(NSObject ***)buf;
          AMCP::Log::Scope::get_os_log_t(**(id **)buf);
          objc_claimAutoreleasedReturnValue();
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            uint64_t v47 = pthread_self();
            mach_port_t v48 = pthread_mach_thread_np(v47);
            *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v48;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_IOThread.mm";
            *(_WORD *)&unsigned char buf[18] = 1024;
            LODWORD(v56) = 812;
            WORD2(v56) = 2080;
            *(void *)((char *)&v56 + 6) = "mWorkgroupInterval != nullptr";
            _os_log_error_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Workgroup must be allocated to leave", buf, 0x22u);
          }

          abort();
        }
        if (*((void *)v39 + 1))
        {
          caulk::mach::os_workgroup_managed::leave(v39);
        }
        else
        {
          AMCP::Log::Scope_Registry::get(v39);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          __int16 v40 = *(caulk::concurrent::messenger **)(*(void *)buf + 8);
          unint64_t v41 = pthread_self();
          mach_port_t v42 = pthread_mach_thread_np(v41);
          uint64_t v43 = *(void *)(*((void *)this + 31) + 8);
          uint64_t v44 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
          *(_DWORD *)(v44 + 16) = 0;
          *(unsigned char *)(v44 + 20) = 2;
          *(_DWORD *)(v44 + 24) = v42;
          *(void *)(v44 + 32) = "HALS_IOThread.mm";
          *(_DWORD *)(v44 + 40) = 822;
          *(unsigned char *)(v44 + 44) = v43 != 0;
          *(void *)uint64_t v44 = &unk_1F145F350;
          *(void *)(v44 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v40, (caulk::concurrent::message *)v44);
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
        }
        HALB_IOThread::ConfigureThreadForNormalPriority((_opaque_pthread_t **)this);
        HALB_IOThread::PostStateChange(this, 1735552612);
        *((void *)this + 1) = 0;
        goto LABEL_34;
      }
    }
    else
    {
      memset(v57, 0, sizeof(v57));
      long long v56 = 0u;
      *(_OWORD *)&uint8_t buf[4] = 0u;
      *(_DWORD *)AudioStreamBasicDescription buf = 799564724;
      AudioFormatFlags v22 = (AMCP::Log::Scope_Registry *)os_workgroup_attr_set_telemetry_flavor();
      int v23 = (int)v22;
      if (!v22)
      {
        os_workgroup_attr_set_interval_type();
        std::string::basic_string[abi:ne180100]<0>(&v52, "AudioHALS Workgroup");
        std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.coreaudio.hal.iothread");
        caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
        operator new();
      }
      AMCP::Log::Scope_Registry::get(v22);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v53, "com.apple.coreaudio", "AMCP");
      __int16 v24 = *(caulk::concurrent::messenger **)(v53 + 8);
      int v25 = pthread_self();
      mach_port_t v26 = pthread_mach_thread_np(v25);
      int v27 = __error();
      uint64_t v28 = strerror(*v27);
      uint64_t v29 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v29 + 16) = 0;
      *(unsigned char *)(v29 + 20) = 16;
      *(_DWORD *)(v29 + 24) = v26;
      *(void *)(v29 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v29 + 40) = 691;
      *(_DWORD *)(v29 + 44) = v23;
      *(void *)(v29 + 48) = v28;
      *(void *)uint64_t v29 = &unk_1F145F038;
      *(void *)(v29 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v24, (caulk::concurrent::message *)v29);
      BOOL v30 = v54;
      if (!v54) {
        goto LABEL_20;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    goto LABEL_20;
  }
LABEL_34:
  HALB_Guard::Locker::~Locker(&v49);
  return 0;
}

void sub_1BAB30ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, HALB_Mutex *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,uint64_t a34,int a35,uint64_t a36)
{
  HALB_Guard::Locker::~Locker(&a11);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F145EF90;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F145EF38;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t HALS_IOThread::WorkgroupStart(caulk::mach::os_workgroup_interval_managed **this, unint64_t a2, unint64_t a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if (!this[31])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __int16 v40 = **(NSObject ***)&buf.sig;
    AMCP::Log::Scope::get_os_log_t(**(id **)&buf.sig);
    objc_claimAutoreleasedReturnValue();
    if (*(void *)&buf.opaque[4]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf.opaque[4]);
    }
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      unint64_t v41 = pthread_self();
      mach_port_t v42 = pthread_mach_thread_np(v41);
      buf.sig = 67109890;
      *(_DWORD *)buf.opaque = v42;
      *(_WORD *)&buf.opaque[4] = 2080;
      *(void *)&buf.opaque[6] = "HALS_IOThread.mm";
      *(_WORD *)&buf.opaque[14] = 1024;
      *(_DWORD *)&buf.opaque[16] = 732;
      *(_WORD *)&buf.opaque[20] = 2080;
      *(void *)&buf.opaque[22] = "mWorkgroupInterval != nullptr";
      _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Workgroup must be allocated to start", (uint8_t *)&buf, 0x22u);
    }

    abort();
  }
  uint64_t v6 = (AMCP::Log::Scope_Registry *)mach_absolute_time();
  unint64_t v7 = (unint64_t)v6;
  if ((unint64_t)v6 < a2)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __int16 v8 = *(caulk::concurrent::messenger **)(*(void *)&buf.sig + 8);
    mach_port_t v9 = pthread_self();
    mach_port_t v10 = pthread_mach_thread_np(v9);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
    *(_DWORD *)(v11 + 16) = 0;
    *(unsigned char *)(v11 + 20) = 16;
    *(_DWORD *)(v11 + 24) = v10;
    *(void *)(v11 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v11 + 40) = 124;
    *(void *)(v11 + 48) = v7;
    *(void *)(v11 + 56) = a2;
    *(void *)uint64_t v11 = &unk_1F145EE30;
    *(void *)(v11 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v8, (caulk::concurrent::message *)v11);
    uint64_t v6 = *(AMCP::Log::Scope_Registry **)&buf.opaque[4];
    if (*(void *)&buf.opaque[4]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf.opaque[4]);
    }
  }
  if (a2 >= v7) {
    a2 = v7;
  }
  if (a2 > a3)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = *(caulk::concurrent::messenger **)(*(void *)&buf.sig + 8);
    uint64_t v13 = pthread_self();
    mach_port_t v14 = pthread_mach_thread_np(v13);
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 64, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(unsigned char *)(v15 + 20) = 16;
    *(_DWORD *)(v15 + 24) = v14;
    *(void *)(v15 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v15 + 40) = 130;
    *(void *)(v15 + 48) = a2;
    *(void *)(v15 + 56) = a3;
    *(void *)uint64_t v15 = &unk_1F145EE88;
    *(void *)(v15 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v15);
    uint64_t v6 = *(AMCP::Log::Scope_Registry **)&buf.opaque[4];
    if (*(void *)&buf.opaque[4]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf.opaque[4]);
    }
  }
  if (v7 <= a3) {
    unint64_t v7 = a3;
  }
  if (*((void *)this[31] + 1)) {
    BOOL v16 = a2 == v7;
  }
  else {
    BOOL v16 = 1;
  }
  if (v16)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unsigned int v17 = *(caulk::concurrent::messenger **)(*(void *)&buf.sig + 8);
    mach_port_t v18 = pthread_self();
    mach_port_t v19 = pthread_mach_thread_np(v18);
    uint64_t v20 = *((void *)this[31] + 1);
    uint64_t v21 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v21 + 16) = 0;
    *(unsigned char *)(v21 + 20) = 2;
    *(_DWORD *)(v21 + 24) = v19;
    *(void *)(v21 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v21 + 40) = 758;
    *(unsigned char *)(v21 + 44) = v20 != 0;
    *(void *)uint64_t v21 = &unk_1F145F1F0;
    *(void *)(v21 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v17, (caulk::concurrent::message *)v21);
    AudioFormatFlags v22 = *(std::__shared_weak_count **)&buf.opaque[4];
    if (!*(void *)&buf.opaque[4]) {
      return 0;
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    return 0;
  }
  memset(buf.opaque, 0, sizeof(buf.opaque));
  buf.sig = 1386695757;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  this[36] = 0;
  __int16 v24 = (AMCP::Log::Scope_Registry *)os_workgroup_interval_data_set_telemetry();
  int v25 = (int)v24;
  if (v24)
  {
    AMCP::Log::Scope_Registry::get(v24);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v43, "com.apple.coreaudio", "AMCP");
    mach_port_t v26 = *(caulk::concurrent::messenger **)(v43 + 8);
    int v27 = pthread_self();
    mach_port_t v28 = pthread_mach_thread_np(v27);
    uint64_t v29 = __error();
    BOOL v30 = strerror(*v29);
    uint64_t v31 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v31 + 16) = 0;
    *(unsigned char *)(v31 + 20) = 16;
    *(_DWORD *)(v31 + 24) = v28;
    *(void *)(v31 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v31 + 40) = 746;
    *(_DWORD *)(v31 + 44) = v25;
    *(void *)(v31 + 48) = v30;
    *(void *)uint64_t v31 = &unk_1F145F140;
    *(void *)(v31 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v26, (caulk::concurrent::message *)v31);
    goto LABEL_24;
  }
  BOOL v32 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_interval_managed::start(this[31], a2, v7, &buf);
  if (v32)
  {
    int v33 = (int)v32;
    AMCP::Log::Scope_Registry::get(v32);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v43, "com.apple.coreaudio", "AMCP");
    uint64_t v34 = *(caulk::concurrent::messenger **)(v43 + 8);
    int v35 = pthread_self();
    mach_port_t v36 = pthread_mach_thread_np(v35);
    int v37 = __error();
    char v38 = strerror(*v37);
    uint64_t v39 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v39 + 16) = 0;
    *(unsigned char *)(v39 + 20) = 16;
    *(_DWORD *)(v39 + 24) = v36;
    *(void *)(v39 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v39 + 40) = 752;
    *(_DWORD *)(v39 + 44) = v33;
    *(void *)(v39 + 48) = v38;
    *(void *)uint64_t v39 = &unk_1F145F198;
    *(void *)(v39 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v34, (caulk::concurrent::message *)v39);
LABEL_24:
    AudioFormatFlags v22 = v44;
    if (!v44) {
      return 0;
    }
    goto LABEL_18;
  }
  return 1;
}

void sub_1BAB317F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t HALS_IOThread::WorkgroupFinish(HALS_IOThread *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 31);
  if (!v1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v26 = **(NSObject ***)&buf.sig;
    AMCP::Log::Scope::get_os_log_t(**(id **)&buf.sig);
    objc_claimAutoreleasedReturnValue();
    if (*(void *)&buf.opaque[4]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf.opaque[4]);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      int v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      buf.sig = 67109890;
      *(_DWORD *)buf.opaque = v28;
      *(_WORD *)&buf.opaque[4] = 2080;
      *(void *)&buf.opaque[6] = "HALS_IOThread.mm";
      *(_WORD *)&buf.opaque[14] = 1024;
      *(_DWORD *)&buf.opaque[16] = 773;
      *(_WORD *)&buf.opaque[20] = 2080;
      *(void *)&buf.opaque[22] = "mWorkgroupInterval != nullptr";
      _os_log_error_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Workgroup must be allocated to finish", (uint8_t *)&buf, 0x22u);
    }

    abort();
  }
  if (!*(void *)(v1 + 8))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = *(caulk::concurrent::messenger **)(*(void *)&buf.sig + 8);
    uint64_t v12 = pthread_self();
    mach_port_t v13 = pthread_mach_thread_np(v12);
    uint64_t v14 = *(void *)(*((void *)this + 31) + 8);
    uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 48, 8);
    *(_DWORD *)(v15 + 16) = 0;
    *(unsigned char *)(v15 + 20) = 2;
    *(_DWORD *)(v15 + 24) = v13;
    *(void *)(v15 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v15 + 40) = 797;
    *(unsigned char *)(v15 + 44) = v14 != 0;
    *(void *)uint64_t v15 = &unk_1F145F2F8;
    *(void *)(v15 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v11, (caulk::concurrent::message *)v15);
    BOOL v16 = *(std::__shared_weak_count **)&buf.opaque[4];
    if (!*(void *)&buf.opaque[4]) {
      return 0;
    }
    goto LABEL_10;
  }
  memset(buf.opaque, 0, sizeof(buf.opaque));
  buf.sig = 1386695757;
  *((void *)this + 41) = 0;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  uint64_t v3 = (AMCP::Log::Scope_Registry *)os_workgroup_interval_data_set_telemetry();
  int v4 = (int)v3;
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v29, "com.apple.coreaudio", "AMCP");
    unsigned int v5 = *(caulk::concurrent::messenger **)(v29 + 8);
    uint64_t v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    __int16 v8 = __error();
    mach_port_t v9 = strerror(*v8);
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v10 + 16) = 0;
    *(unsigned char *)(v10 + 20) = 16;
    *(_DWORD *)(v10 + 24) = v7;
    *(void *)(v10 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v10 + 40) = 785;
    *(_DWORD *)(v10 + 44) = v4;
    *(void *)(v10 + 48) = v9;
    *(void *)uint64_t v10 = &unk_1F145F248;
    *(void *)(v10 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v5, (caulk::concurrent::message *)v10);
    goto LABEL_9;
  }
  unsigned int v17 = (AMCP::Log::Scope_Registry *)caulk::mach::os_workgroup_interval_managed::finish(*((caulk::mach::os_workgroup_interval_managed **)this + 31), &buf);
  if (v17)
  {
    int v18 = (int)v17;
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v29, "com.apple.coreaudio", "AMCP");
    mach_port_t v19 = *(caulk::concurrent::messenger **)(v29 + 8);
    uint64_t v20 = pthread_self();
    mach_port_t v21 = pthread_mach_thread_np(v20);
    AudioFormatFlags v22 = __error();
    int v23 = strerror(*v22);
    uint64_t v24 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v24 + 16) = 0;
    *(unsigned char *)(v24 + 20) = 16;
    *(_DWORD *)(v24 + 24) = v21;
    *(void *)(v24 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v24 + 40) = 791;
    *(_DWORD *)(v24 + 44) = v18;
    *(void *)(v24 + 48) = v23;
    *(void *)uint64_t v24 = &unk_1F145F2A0;
    *(void *)(v24 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v19, (caulk::concurrent::message *)v24);
LABEL_9:
    BOOL v16 = v30;
    if (!v30) {
      return 0;
    }
LABEL_10:
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    return 0;
  }
  return 1;
}

void sub_1BAB31C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::messenger::enqueue_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>(caulk::concurrent::messenger *a1, unsigned char *a2, long long *a3)
{
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)uint64_t v6 = &unk_1F145F010;
  *(void *)(v6 + 8) = 0;
  *(unsigned char *)(v6 + 20) = *a2;
  long long v7 = *a3;
  *(_OWORD *)(v6 + 40) = a3[1];
  *(_OWORD *)(v6 + 24) = v7;
  *(void *)uint64_t v6 = &unk_1F145EFB8;

  return caulk::concurrent::messenger::enqueue(a1, (caulk::concurrent::message *)v6);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v8) = 67109890;
    HIDWORD(v8) = v4;
    *(_WORD *)mach_port_t v9 = 2080;
    *(void *)&_OWORD v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    __int16 v12 = 2080;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to change thread to normal priority because of exception - %s", (uint8_t *)&v8, 0x22u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_3,std::tuple<unsigned int,char const*,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupLeave(void)::$_1,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  AMCP::Log::Scope::get_os_log_t(*v9);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Could not leave an invalid or unjoined workgroup - %d", (uint8_t *)&v9, 0x1Eu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB320CC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupLeave(void)::$_1,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  AMCP::Log::Scope::get_os_log_t(*v9);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Could not finish an invalid or unstarted workgroup - %d", (uint8_t *)&v9, 0x1Eu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB3226C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to finish the workgroup with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB32414(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set telemetry data with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB325BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupFinish(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  AMCP::Log::Scope::get_os_log_t(*v9);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)__int16 v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Could not start an invalid or unjoined workgroup - %d", (uint8_t *)&v9, 0x1Eu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB3275C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_3,std::tuple<unsigned int,char const*,int,BOOL>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to start the workgroup with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB32904(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set telemetry data with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB32AAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupStart(unsigned long long,unsigned long long)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Deadline is prior to Start time - this will cause a workgroup error. Start Time: %llu Deadline Time: %llu", (uint8_t *)&v10, 0x2Cu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BAB32C58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_1,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)__int16 v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Start time is in the future relative to current time - this will cause a workgroup error. Current Mach Time: %llu Provided Start Time: %llu", (uint8_t *)&v10, 0x2Cu);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 64, 8);
}

void sub_1BAB32E04(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<ValidateWorkgroupIntervalTimestamps(unsigned long long &,unsigned long long &)::$_0,std::tuple<unsigned int,char const*,int,unsigned long long,unsigned long long>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_3,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)mach_port_t v9 = 2080;
    *(void *)&_OWORD v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Could not join an invalid workgroup", (uint8_t *)&v8, 0x18u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAB32F98(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_3,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to join the workgroup with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB33140(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_2,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set telemetry flavor with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB332E8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::WorkgroupJoin(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::perform(caulk::concurrent::message *a1)
{
  return (*(uint64_t (**)(void, caulk::concurrent::message *, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90]
                                                                                           + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::perform(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v8) = 67109890;
    HIDWORD(v8) = v4;
    *(_WORD *)mach_port_t v9 = 2080;
    *(void *)&_OWORD v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    __int16 v12 = 2080;
    uint64_t v13 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to change thread to realtime priority with code because of exception - %s", (uint8_t *)&v8, 0x22u);
  }
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void caulk::concurrent::details::message_call<HALS_IOThread::Entry(void *)::$_1,std::tuple<unsigned int,char const*,int,char *>>::~message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to change thread to realtime priority with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB33688(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::Entry(void *)::$_0,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOThread::ConfigureThreadForRealtimePriority(_opaque_pthread_t **this, _opaque_pthread_t *a2, int a3)
{
  return 0;
}

void HALS_IOThread::~HALS_IOThread(HALS_IOThread *this)
{
  HALS_IOThread::~HALS_IOThread(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;

  *(void *)this = &unk_1F145EDE0;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOThread *)((char *)this + 416));
  uint64_t v2 = *((void *)this + 51);
  *((void *)this + 51) = 0;
  if (v2) {
    MEMORY[0x1C1859840](v2, 0xC400A2AC0F1);
  }
  if (*((char *)this + 407) < 0) {
    operator delete(*((void **)this + 48));
  }
  os_log_type_t v3 = (std::__shared_weak_count *)*((void *)this + 47);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  int v4 = *((void *)this + 31);
  *((void *)this + 31) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  *(void *)this = &unk_1F1484E48;
  HALB_Guard::~HALB_Guard((pthread_cond_t *)((char *)this + 16));
}

AMCP::Log::Scope_Registry *HALS_IOThread::EnableRTSafeSyscallMasks(_opaque_pthread_t **this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    int v7 = "HALS_IOThread.mm";
    __int16 v8 = 1024;
    int v9 = 215;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::EnableRTSafeSyscallMasks - must be called from on the thread", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v2 = this[11];
  pthread_t v3 = pthread_self();
  if (v2 != v3)
  {
    pthread_t v3 = (pthread_t)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v3)
    {
      int v6 = 136315394;
      int v7 = "HALS_IOThread.mm";
      __int16 v8 = 1024;
      int v9 = 216;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::EnableRTSafeSyscallMasks - this thread ought to lock the lock", (uint8_t *)&v6, 0x12u);
    }
  }
  int v4 = AMCP::Utility::configure_syscall_mask_for_realtime_priority((AMCP::Utility *)v3);
  if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315650;
    int v7 = "HALS_IOThread.mm";
    __int16 v8 = 1024;
    int v9 = 220;
    __int16 v10 = 1024;
    int v11 = (int)v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::EnableRTSafeSyscallMasks - configure_syscall_mask_for_realtime_priority failed, Error: 0x%X", (uint8_t *)&v6, 0x18u);
  }
  return v4;
}

AMCP::Log::Scope_Registry *HALS_IOThread::ClearAllSyscallMasks(_opaque_pthread_t **this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    int v7 = "HALS_IOThread.mm";
    __int16 v8 = 1024;
    int v9 = 227;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - must be called from on the thread", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v2 = this[11];
  pthread_t v3 = pthread_self();
  if (v2 != v3)
  {
    pthread_t v3 = (pthread_t)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
    if (v3)
    {
      int v6 = 136315394;
      int v7 = "HALS_IOThread.mm";
      __int16 v8 = 1024;
      int v9 = 228;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - this thread ought to lock the lock", (uint8_t *)&v6, 0x12u);
    }
  }
  int v4 = AMCP::Utility::configure_syscall_mask_for_normal_priority((AMCP::Utility *)v3);
  if (v4 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315650;
    int v7 = "HALS_IOThread.mm";
    __int16 v8 = 1024;
    int v9 = 232;
    __int16 v10 = 1024;
    int v11 = (int)v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::ClearAllSyscallMasks - configure_syscall_mask_for_normal_priority failed, Error: 0x%X", (uint8_t *)&v6, 0x18u);
  }
  return v4;
}

uint64_t HALS_IOThread::HasBeenDeactivated(HALS_IOThread *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (_opaque_pthread_t *)*((void *)this + 11);
  if (v2 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v4 = 136315394;
    uint64_t v5 = "HALS_IOThread.mm";
    __int16 v6 = 1024;
    int v7 = 239;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOThread::HasBeenDeactivated: this thread ought to lock the lock", (uint8_t *)&v4, 0x12u);
  }
  return *((unsigned __int8 *)this + 173);
}

uint64_t HALS_IOThread::CopyWorkgroupIntervalPort(HALS_IOThread *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  int v15 = (HALS_IOThread *)((char *)this + 16);
  int v16 = HALB_Mutex::Lock((HALS_IOThread *)((char *)this + 16));
  uint64_t v2 = (caulk::mach::os_workgroup_managed *)*((void *)this + 31);
  if (!v2)
  {
    memset(v22, 0, sizeof(v22));
    long long v21 = 0u;
    long long v20 = 0u;
    int v19 = 799564724;
    int v4 = (AMCP::Log::Scope_Registry *)os_workgroup_attr_set_telemetry_flavor();
    int v5 = (int)v4;
    if (!v4)
    {
      os_workgroup_attr_set_interval_type();
      std::string::basic_string[abi:ne180100]<0>(&v14, "AudioHALS Workgroup");
      std::string::basic_string[abi:ne180100]<0>(&__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      operator new();
    }
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
    __int16 v6 = *(caulk::concurrent::messenger **)(v17 + 8);
    int v7 = pthread_self();
    mach_port_t v8 = pthread_mach_thread_np(v7);
    int v9 = __error();
    __int16 v10 = strerror(*v9);
    uint64_t v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
    *(_DWORD *)(v11 + 16) = 0;
    *(unsigned char *)(v11 + 20) = 16;
    *(_DWORD *)(v11 + 24) = v8;
    *(void *)(v11 + 32) = "HALS_IOThread.mm";
    *(_DWORD *)(v11 + 40) = 869;
    *(_DWORD *)(v11 + 44) = v5;
    *(void *)(v11 + 48) = v10;
    *(void *)uint64_t v11 = &unk_1F145F3A8;
    *(void *)(v11 + 8) = 0;
    caulk::concurrent::messenger::enqueue(v6, (caulk::concurrent::message *)v11);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    goto LABEL_7;
  }
  if (!*((void *)v2 + 1))
  {
LABEL_7:
    uint64_t v3 = 0;
    goto LABEL_8;
  }
  uint64_t v3 = caulk::mach::os_workgroup_managed::copy_mach_port(v2);
LABEL_8:
  HALB_Guard::Locker::~Locker(&v15);
  return v3;
}

void sub_1BAB33F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,HALB_Mutex *a21,uint64_t a22,char a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  HALB_Guard::Locker::~Locker(&a21);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::CopyWorkgroupIntervalPort(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set telemetry flavor with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB340F0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::CopyWorkgroupIntervalPort(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

__n128 HALS_IOThread::GetIOThreadOSWorkgroup(HALS_IOThread *this, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  int v19 = (HALB_Mutex *)(a2 + 16);
  int v20 = HALB_Mutex::Lock((HALB_Mutex *)(a2 + 16));
  uint64_t v5 = *(void *)(a2 + 248);
  if (!v5)
  {
    memset(v26, 0, sizeof(v26));
    long long v25 = 0u;
    long long v24 = 0u;
    int v23 = 799564724;
    int v6 = (AMCP::Log::Scope_Registry *)os_workgroup_attr_set_telemetry_flavor();
    int v7 = (int)v6;
    if (v6)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
      uint64_t v8 = *(caulk::concurrent::messenger **)(v21 + 8);
      int v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      uint64_t v11 = __error();
      __int16 v12 = strerror(*v11);
      uint64_t v13 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v13 + 16) = 0;
      *(unsigned char *)(v13 + 20) = 16;
      *(_DWORD *)(v13 + 24) = v10;
      *(void *)(v13 + 32) = "HALS_IOThread.mm";
      *(_DWORD *)(v13 + 40) = 927;
      *(_DWORD *)(v13 + 44) = v7;
      *(void *)(v13 + 48) = v12;
      *(void *)uint64_t v13 = &unk_1F145F400;
      *(void *)(v13 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v8, (caulk::concurrent::message *)v13);
      if (v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "AudioHALS Workgroup");
      std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.hal.iothread");
      caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
      operator new();
    }
    os_workgroup_attr_set_interval_type();
    std::string::basic_string[abi:ne180100]<0>(v18, "AudioHALS Workgroup");
    std::string::basic_string[abi:ne180100]<0>(__p, "com.apple.coreaudio.hal.iothread");
    caulk::mach::os_workgroup_interval_managed::make_with_workload_id();
    operator new();
  }
  *(void *)this = MEMORY[0x1E4FB7EA0] + 16;
  *((void *)this + 1) = caulk::mach::details::retain_os_object(*(caulk::mach::details **)(v5 + 8), v4);
  long long v14 = *(_OWORD *)(v5 + 41);
  long long v15 = *(_OWORD *)(v5 + 32);
  *((_OWORD *)this + 1) = *(_OWORD *)(v5 + 16);
  *((_OWORD *)this + 2) = v15;
  *(_OWORD *)((char *)this + 41) = v14;
  *(void *)this = MEMORY[0x1E4FB7EA8] + 16;
  *((unsigned char *)this + 57) = *(unsigned char *)(v5 + 57);
  HALB_Guard::Locker::~Locker(&v19);
  return result;
}

void sub_1BAB344B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,HALB_Mutex *a21,uint64_t a22,char a23,uint64_t a24)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  HALB_Guard::Locker::~Locker(&a21);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_IOThread::GetIOThreadOSWorkgroup(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  AMCP::Log::Scope::get_os_log_t(*v10);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&_OWORD v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 2080;
    uint64_t v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d Failed to set telemetry flavor with code: %d - %s", (uint8_t *)&v10, 0x28u);
  }

  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB3468C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_IOThread::GetIOThreadOSWorkgroup(void)::$_1,std::tuple<unsigned int,char const*,int,int,char *>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

AMCP::Utility::Dispatch_Queue *std::unique_ptr<AMCP::Utility::Dispatch_Queue>::reset[abi:ne180100](AMCP::Utility::Dispatch_Queue **a1, AMCP::Utility::Dispatch_Queue *a2)
{
  __n128 result = *a1;
  *a1 = a2;
  if (result)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void HALB_Mutex::Locker::~Locker(HALB_Mutex **this)
{
  if (!*((_DWORD *)this + 2)) {
    HALB_Mutex::Unlock(*this);
  }
}

uint64_t HALS_IOEngineInfo::engine_is_running_for_reference_stream(HALS_IOEngineInfo *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 680))();
  }
  return result;
}

uint64_t HALS_IOEngineInfo::engine_has_time_for_reference_stream(HALS_IOEngineInfo *this)
{
  uint64_t result = *((void *)this + 1);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 680))(result);
    if (result) {
      return *(_DWORD *)(*((void *)this + 36) + 96) != 0;
    }
  }
  return result;
}

uint64_t HALS_IOEngineInfo::is_mixing(HALS_IOEngineInfo *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 864))();
}

uint64_t HALS_IOEngineInfo::update_engine_start_sample(HALS_IOEngineInfo *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**((void **)this + 1) + 464))(*((void *)this + 1), a2, (uint64_t)*((double *)this + 72), (uint64_t)*((double *)this + 64), a3, *((unsigned __int8 *)this + 424));
}

uint64_t HALS_IOEngineInfo::max_procesor_frame_size(HALS_IOEngineInfo *this, uint64_t a2, uint64_t a3)
{
  if (!(*(unsigned int (**)(HALS_IOEngineInfo *))(*(void *)this + 168))(this)) {
    return 0;
  }
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, v6);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 24))(v8))
    {
      unsigned int v9 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)v8 + 16))(v8, a2 != 0, a3);
      if (v9 <= v7) {
        uint64_t v7 = v7;
      }
      else {
        uint64_t v7 = v9;
      }
    }
    uint64_t v6 = (v6 + 1);
  }
  while (v6 < (*(unsigned int (**)(HALS_IOEngineInfo *, uint64_t))(*(void *)this + 168))(this, a2));
  return v7;
}

uint64_t HALS_IOEngineInfo::should_fetch_buffer_size_from_processors(HALS_IOEngineInfo *this, uint64_t a2)
{
  if (!(*(unsigned int (**)(HALS_IOEngineInfo *))(*(void *)this + 168))(this)) {
    return 0;
  }
  uint64_t v4 = 0;
  do
  {
    uint64_t v5 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(void *)this + 176))(this, a2, v4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 24))(v5);
    if (v6) {
      break;
    }
    uint64_t v4 = (v4 + 1);
  }
  while (v4 < (*(unsigned int (**)(HALS_IOEngineInfo *, uint64_t))(*(void *)this + 168))(this, a2));
  return v6;
}

uint64_t HALS_IOEngineInfo::match_buffer_size_in_directions_without_streams(HALS_IOEngineInfo *this, int a2)
{
  if ((*(unsigned int (**)(HALS_IOEngineInfo *))(*(void *)this + 192))(this)
    && ((*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 200))(this) & 1) == 0)
  {
    if (a2)
    {
      uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 208))(this);
      if (result) {
        return result;
      }
    }
    uint64_t v5 = (*(uint64_t (**)(HALS_IOEngineInfo *, void))(*(void *)this + 144))(this, 0);
    uint64_t v6 = *(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(void *)this + 272);
    uint64_t v7 = this;
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 192))(this);
    if (result) {
      return result;
    }
    uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 200))(this);
    if (!result) {
      return result;
    }
    uint64_t v5 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t))(*(void *)this + 144))(this, 1);
    uint64_t v6 = *(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(void *)this + 272);
    uint64_t v7 = this;
    uint64_t v8 = 0;
  }

  return v6(v7, v8, v5);
}

uint64_t HALS_IOEngineInfo::set_io_buffer_frame_size(uint64_t this, unsigned int a2, int a3)
{
  *(_DWORD *)(this + 4 * a2 + 672) = a3;
  return this;
}

uint64_t HALS_IOEngineInfo::update_io_buffer_frame_size(HALS_IOEngineInfo *this, uint64_t a2, double a3, int a4, uint64_t a5)
{
  if ((*(unsigned int (**)(HALS_IOEngineInfo *, uint64_t))(*(void *)this + 288))(this, a5))
  {
    uint64_t v10 = *(void *)this;
    if (a4)
    {
      a2 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(v10 + 296))(this, a5, a2);
    }
    else
    {
      uint64_t v11 = (*(uint64_t (**)(HALS_IOEngineInfo *, uint64_t))(v10 + 184))(this, a5);
      a2 = ((double)a2 * a3
                        + fmod((double)v11, (double)a2 * a3) / ((double)a2 * a3));
    }
  }
  __int16 v12 = *(uint64_t (**)(HALS_IOEngineInfo *, uint64_t, uint64_t))(*(void *)this + 272);

  return v12(this, a5, a2);
}

uint64_t HALS_IOEngineInfo::set_nominal_io_buffer_frame_size(uint64_t this, int a2)
{
  *(_DWORD *)(this + 680) = a2;
  return this;
}

uint64_t HALS_IOEngineInfo::add_to_io_frame_counter(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(void *)(this + 8 * a2 + 656) += a3;
  return this;
}

uint64_t HALS_IOEngineInfo::set_io_frame_counter(uint64_t this, unsigned int a2, uint64_t a3)
{
  *(void *)(this + 8 * a2 + 656) = a3;
  return this;
}

uint64_t HALS_IOEngineInfo::set_io_cycle_usage(uint64_t this, double a2)
{
  *(double *)(this + 688) = a2;
  return this;
}

uint64_t HALS_IOEngineInfo::must_begin_and_end_writing(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 16))(this);
  if (result) {
    return !*((unsigned char *)this + 749) && *((unsigned char *)this + 751) != 0;
  }
  return result;
}

uint64_t HALS_IOEngineInfo::must_begin_and_end_reading(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 16))(this);
  if (result)
  {
    if (*((unsigned char *)this + 749)) {
      return 0;
    }
    else {
      return *((unsigned char *)this + 750) || *((unsigned char *)this + 762) != 0;
    }
  }
  return result;
}

uint64_t HALS_IOEngineInfo::is_shadow_reference_stream(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 762);
}

uint64_t HALS_IOEngineInfo::has_client_visibile_input(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 750);
}

uint64_t HALS_IOEngineInfo::has_client_visibile_output(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 751);
}

uint64_t HALS_IOEngineInfo::io_frame_counter(HALS_IOEngineInfo *this, unsigned int a2)
{
  return *((void *)this + a2 + 82);
}

uint64_t HALS_IOEngineInfo::processor(HALS_IOEngineInfo *this, unsigned int a2, unsigned int a3)
{
  os_log_type_t v3 = (char *)this + 24 * a2;
  uint64_t v4 = *((void *)v3 + 88);
  uint64_t v5 = *((void *)v3 + 87);
  if (a3 >= (unint64_t)((v4 - v5) >> 3)) {
    return 0;
  }
  else {
    return *(void *)(v5 + 8 * a3);
  }
}

uint64_t HALS_IOEngineInfo::number_of_processors(HALS_IOEngineInfo *this, unsigned int a2)
{
  return (*((void *)this + 3 * a2 + 88) - *((void *)this + 3 * a2 + 87)) >> 3;
}

double HALS_IOEngineInfo::nominal_host_ticks_per_frame(HALS_IOEngineInfo *this)
{
  return *(double *)(*((void *)this + 36) + 112);
}

double HALS_IOEngineInfo::actual_host_ticks_per_frame(HALS_IOEngineInfo *this)
{
  return *(double *)(*((void *)this + 36) + 40 * *(unsigned int *)(*((void *)this + 36) + 192) + 200);
}

uint64_t HALS_IOEngineInfo::io_buffer_frame_size(HALS_IOEngineInfo *this, unsigned int a2)
{
  return *((unsigned int *)this + a2 + 168);
}

uint64_t HALS_IOEngineInfo::only_needs_reference_streams(HALS_IOEngineInfo *this)
{
  return *((unsigned __int8 *)this + 748);
}

__n128 HALS_IOEngineInfo::update_cycle_info(HALS_IOEngineInfo *this, unsigned int a2, double a3, double a4)
{
  *((void *)this + 54) = a2;
  *((_DWORD *)this + 110) = *((_DWORD *)this + 170);
  *((_DWORD *)this + 126) = 3;
  HALS_IOClock::GetCurrentTime(*((HALS_IOClock **)this + 36), (AudioTimeStamp *)this + 7);
  *((double *)this + 80) = a3;
  uint64_t v7 = *((void *)this + 36);
  *((void *)this + 81) = *(void *)(v7 + 40 * *(unsigned int *)(v7 + 192) + 200);
  long long v8 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)&v21.mSampleTime = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)&v21.mRateScalar = v8;
  long long v9 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)&v21.mSMPTETime.mSubframes = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)&v21.mSMPTETime.mHours = v9;
  v21.mFlags = 1;
  DWORD1(v8) = HIDWORD(v21.mSampleTime);
  LODWORD(v8) = *((_DWORD *)this + 79);
  *(double *)&long long v9 = v21.mSampleTime + (double)*((uint64_t *)this + 83) - (double)(unint64_t)v8;
  int v10 = *((_DWORD *)this + 81);
  *(double *)&long long v8 = (double)v10;
  LODWORD(v8) = *((_DWORD *)this + 85);
  *(double *)&long long v8 = (double)(unint64_t)v8;
  *(double *)&long long v9 = *(double *)&v9 - (double)v10 - *(double *)&v8;
  LODWORD(v8) = *((_DWORD *)this + 170);
  v21.mSampleTime = *(double *)&v9 - (double)(unint64_t)v8;
  memset(&v20, 0, sizeof(v20));
  v20.mFlags = 3;
  HALS_IOClock::TranslateTime(v7, &v21, &v20);
  long long v12 = *(_OWORD *)&v20.mSMPTETime.mSubframes;
  long long v11 = *(_OWORD *)&v20.mSMPTETime.mHours;
  long long v13 = *(_OWORD *)&v20.mRateScalar;
  *((_OWORD *)this + 32) = *(_OWORD *)&v20.mSampleTime;
  *((_OWORD *)this + 33) = v13;
  *((_OWORD *)this + 34) = v12;
  *((_OWORD *)this + 35) = v11;
  long long v14 = *(_OWORD *)((char *)this + 376);
  *(_OWORD *)&v21.mSampleTime = *(_OWORD *)((char *)this + 360);
  *(_OWORD *)&v21.mRateScalar = v14;
  long long v15 = *(_OWORD *)((char *)this + 408);
  *(_OWORD *)&v21.mSMPTETime.mSubframes = *(_OWORD *)((char *)this + 392);
  *(_OWORD *)&v21.mSMPTETime.mHours = v15;
  v21.mFlags = 1;
  DWORD1(v14) = HIDWORD(v21.mSampleTime);
  LODWORD(v14) = *((_DWORD *)this + 78);
  *(double *)&long long v15 = v21.mSampleTime + (double)*((uint64_t *)this + 82) + (double)(unint64_t)v14;
  int v16 = *((_DWORD *)this + 80);
  *(double *)&long long v14 = (double)v16;
  LODWORD(v14) = *((_DWORD *)this + 84);
  *(double *)&long long v14 = (double)(unint64_t)v14;
  *(double *)&long long v15 = *(double *)&v15 + (double)v16 + *(double *)&v14;
  LODWORD(v14) = *((_DWORD *)this + 170);
  v21.mSampleTime = *(double *)&v15 + round((double)(unint64_t)v14 * a4);
  memset(&v20, 0, sizeof(v20));
  v20.mFlags = 3;
  HALS_IOClock::TranslateTime(*((void *)this + 36), &v21, &v20);
  long long v18 = *(_OWORD *)&v20.mSMPTETime.mSubframes;
  __n128 result = *(__n128 *)&v20.mSMPTETime.mHours;
  long long v19 = *(_OWORD *)&v20.mRateScalar;
  *((_OWORD *)this + 36) = *(_OWORD *)&v20.mSampleTime;
  *((_OWORD *)this + 37) = v19;
  *((_OWORD *)this + 38) = v18;
  *((__n128 *)this + 39) = result;
  return result;
}

uint64_t HALS_IOEngineInfo::isolated_read_from_stream(HALS_IOEngineInfo *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, HALS_IOEngineInfo *, uint64_t))(**((void **)this + 1)
                                                                                           + 760))(*((void *)this + 1), a2, a3, this, a4);
}

uint64_t HALS_IOEngineInfo::process_output_stream_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 840);

  return v11(v9, v10, a3, a1, a4, a5);
}

uint64_t HALS_IOEngineInfo::process_input_stream_data(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 112))(a2);
  long long v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 832);

  return v11(v9, v10, a3, a1, a4, a5);
}

uint64_t HALS_IOEngineInfo::write_to_stream_commit_trailing_silence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 808))(*(void *)(a1 + 8), a2, a3, a4, a1, a5);
}

uint64_t HALS_IOEngineInfo::write_to_stream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 800))(*(void *)(a1 + 8), a2, a3, a4, a1, a5);
}

uint64_t HALS_IOEngineInfo::read_from_stream(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 8) + 752))(*(void *)(a1 + 8), a2, a3, a4, a1, a5);
}

uint64_t HALS_IOEngineInfo::end_writing(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 224))(this);
  if (result)
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 816);
    return v3();
  }
  return result;
}

uint64_t HALS_IOEngineInfo::begin_writing(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 224))(this);
  if (result)
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 792);
    return v3();
  }
  return result;
}

uint64_t HALS_IOEngineInfo::end_reading(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 216))(this);
  if (result)
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 784);
    return v3();
  }
  return result;
}

uint64_t HALS_IOEngineInfo::begin_reading(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 216))(this);
  if (result)
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 744);
    return v3();
  }
  return result;
}

uint64_t HALS_IOEngineInfo::end_io_cycle(HALS_IOEngineInfo *this)
{
  uint64_t result = (*(uint64_t (**)(HALS_IOEngineInfo *))(*(void *)this + 16))(this);
  if (result)
  {
    os_log_type_t v3 = *(uint64_t (**)(void))(**((void **)this + 1) + 736);
    return v3();
  }
  return result;
}

uint64_t HALS_IOEngineInfo::begin_io_cycle(HALS_IOEngineInfo *this, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, HALS_IOEngineInfo *))(**((void **)this + 1) + 728))(*((void *)this + 1), a2, this);
}

uint64_t HALS_IOEngineInfo::has_device(HALS_IOEngineInfo *this)
{
  uint64_t result = *((void *)this + 1);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 320))(result) != 0;
  }
  return result;
}

BOOL HALS_IOEngineInfo::has_engine(HALS_IOEngineInfo *this)
{
  return *((void *)this + 1) != 0;
}

void HALS_IOEngineInfo::~HALS_IOEngineInfo(HALS_IOEngineInfo *this)
{
  HALS_IOEngineInfo::~HALS_IOEngineInfo(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t i;
  uint64_t v3;

  *(void *)this = &unk_1F1480AD8;
  for (unsigned int i = 720; i != 672; i -= 24)
  {
    if (*(void *)((char *)this + i))
    {
      std::vector<std::unique_ptr<HALS_IOProcessor>>::__clear[abi:ne180100]((HALS_IOEngineInfo *)((char *)this + i));
      operator delete(*(void **)((char *)this + i));
    }
  }
  os_log_type_t v3 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  CACFString::~CACFString((HALS_IOEngineInfo *)((char *)this + 16));
}

void *std::vector<std::unique_ptr<HALS_IOProcessor>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  os_log_type_t v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    *os_log_type_t v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void ADS::StereoPanControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == 1936745315)
  {
    if (a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v41 = 136315394;
        *(void *)&v41[4] = "ADS_StereoPanControl.cpp";
        __int16 v42 = 1024;
        int v43 = 144;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::StereoPanControl::SetPropertyData: wrong size for the data for kAudioStereoPanControlPropertyPanningChannels", v41, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = a1 + 56;
    *(void *)unint64_t v41 = a1 + 56;
    v41[8] = (*(uint64_t (**)(uint64_t))(v19 + 16))(a1 + 56);
    *(_DWORD *)(v18 + 92) = *a8;
    *(_DWORD *)(v18 + 96) = a8[1];
    *a9 = 1;
    int v14 = *(_DWORD *)(v18 - 4);
    long long v15 = (int *)a10[1];
    unint64_t v20 = a10[2];
    if ((unint64_t)v15 < v20)
    {
      int v17 = 1936745315;
      goto LABEL_9;
    }
    unint64_t v28 = 0x1555555555555555;
    int v23 = (int *)*a10;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - *a10) >> 2);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v23) >> 2);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v28 = v30;
    }
    if (v28)
    {
      unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v28);
      int v23 = (int *)*a10;
      long long v15 = (int *)a10[1];
    }
    else
    {
      uint64_t v32 = 0;
    }
    int v33 = (_DWORD *)(v28 + 12 * v29);
    unint64_t v34 = v28 + 12 * v32;
    *int v33 = 1936745315;
    v33[1] = v14;
    v33[2] = 0;
    AudioTimeStamp v21 = v33 + 3;
    if (v15 != v23)
    {
      do
      {
        uint64_t v37 = *(void *)(v15 - 3);
        v15 -= 3;
        int v38 = v15[2];
        *(void *)(v33 - 3) = v37;
        v33 -= 3;
        v33[2] = v38;
      }
      while (v15 != v23);
      goto LABEL_34;
    }
LABEL_35:
    *a10 = (unint64_t)v33;
    a10[1] = (unint64_t)v21;
    a10[2] = v34;
    if (v23) {
      operator delete(v23);
    }
    goto LABEL_37;
  }
  if (*(_DWORD *)a4 == 1936745334)
  {
    if (a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)unint64_t v41 = 136315394;
        *(void *)&v41[4] = "ADS_StereoPanControl.cpp";
        __int16 v42 = 1024;
        int v43 = 131;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::StereoPanControl::SetPropertyData: wrong size for the data for kAudioStereoPanControlPropertyValue", v41, 0x12u);
      }
      uint64_t v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v39 = off_1F148A5D8;
      v39[2] = 561211770;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v12 = a1 + 56;
    *(void *)unint64_t v41 = a1 + 56;
    v41[8] = (*(uint64_t (**)(uint64_t))(v13 + 16))(a1 + 56);
    *(_DWORD *)(v12 + 88) = *a8;
    *a9 = 1;
    int v14 = *(_DWORD *)(v12 - 4);
    long long v15 = (int *)a10[1];
    unint64_t v16 = a10[2];
    if ((unint64_t)v15 < v16)
    {
      int v17 = 1936745334;
LABEL_9:
      *long long v15 = v17;
      v15[1] = v14;
      uint64_t v15[2] = 0;
      AudioTimeStamp v21 = v15 + 3;
LABEL_37:
      a10[1] = (unint64_t)v21;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v41);
      return;
    }
    unint64_t v22 = 0x1555555555555555;
    int v23 = (int *)*a10;
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - *a10) >> 2);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v23) >> 2);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v22 = v25;
    }
    if (v22)
    {
      unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v22);
      int v23 = (int *)*a10;
      long long v15 = (int *)a10[1];
    }
    else
    {
      uint64_t v27 = 0;
    }
    int v33 = (_DWORD *)(v22 + 12 * v24);
    unint64_t v34 = v22 + 12 * v27;
    *int v33 = 1936745334;
    v33[1] = v14;
    v33[2] = 0;
    AudioTimeStamp v21 = v33 + 3;
    if (v15 != v23)
    {
      do
      {
        uint64_t v35 = *(void *)(v15 - 3);
        v15 -= 3;
        int v36 = v15[2];
        *(void *)(v33 - 3) = v35;
        v33 -= 3;
        v33[2] = v36;
      }
      while (v15 != v23);
LABEL_34:
      int v23 = (int *)*a10;
      goto LABEL_35;
    }
    goto LABEL_35;
  }

  ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
}

void sub_1BAB35D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ADS::StereoPanControl::GetPropertyData(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  if (a4->mSelector == 1936745315)
  {
    uint64_t v14 = *((void *)this + 7);
    uint64_t v13 = (char *)this + 56;
    long long v15 = (char *)this + 56;
    char v16 = (*(uint64_t (**)(char *))(v14 + 16))((char *)this + 56);
    *(_DWORD *)a9 = *((_DWORD *)v13 + 23);
    *((_DWORD *)a9 + 1) = *((_DWORD *)v13 + 24);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v15);
    unsigned int v12 = 8;
    goto LABEL_5;
  }
  if (a4->mSelector == 1936745334)
  {
    uint64_t v11 = *((void *)this + 7);
    uint64_t v10 = (char *)this + 56;
    long long v15 = (char *)this + 56;
    char v16 = (*(uint64_t (**)(char *))(v11 + 16))((char *)this + 56);
    *(_DWORD *)a9 = *((_DWORD *)v10 + 22);
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v15);
    unsigned int v12 = 4;
LABEL_5:
    *a8 = v12;
    return;
  }

  ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ADS::StereoPanControl::GetPropertyDataSize(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  uint64_t v7 = 4;
  if ((int)a4->mSelector <= 1936745314)
  {
    if (mSelector != 1667591277 && mSelector != 1668506480) {
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    }
    return v7;
  }
  if (mSelector == 1936745334) {
    return v7;
  }
  if (mSelector == 1936745315) {
    return 8;
  }
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::StereoPanControl::IsPropertySettable(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1936745314)
  {
    if (mSelector == 1936745315 || mSelector == 1936745334) {
      return 1;
    }
  }
  else if (mSelector == 1667591277 || mSelector == 1668506480)
  {
    return 0;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

BOOL ADS::StereoPanControl::HasProperty(ADS::StereoPanControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1936745314)
  {
    BOOL v5 = mSelector == 1936745315;
    int v6 = 1936745334;
  }
  else
  {
    BOOL v5 = mSelector == 1667591277;
    int v6 = 1668506480;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::StereoPanControl::~StereoPanControl(ADS::StereoPanControl *this)
{
  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::StereoPanControl *)((char *)this + 56));
  ADS::BaseObject::~BaseObject(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::StereoPanControl *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

void AMCP::Object::~Object(AMCP::Object *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t AMCP::Object::Object(uint64_t a1, uint64_t a2, unsigned int a3)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v9, *(std::__shared_mutex_base **)(**(void **)a2 + 16), a3);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v5 = v9[0];
  if (v9[0]) {
    int v6 = *(_DWORD *)v9[0];
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  uint64_t v7 = (std::__shared_weak_count *)v9[1];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
  }
  return a1;
}

{
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  void v9[2];

  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v9, *(std::__shared_mutex_base **)(**(void **)a2 + 16), a3);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v5 = v9[0];
  if (v9[0]) {
    int v6 = *(_DWORD *)v9[0];
  }
  else {
    int v6 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  uint64_t v7 = (std::__shared_weak_count *)v9[1];
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
  }
  return a1;
}

uint64_t AMCP::Object::Object(uint64_t result, uint64_t a2, int **a3)
{
  *(void *)uint64_t result = &unk_1F145F4E8;
  os_log_type_t v3 = *a3;
  if (*a3) {
    int v4 = *v3;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(result + 8) = v4;
  uint64_t v5 = a3[1];
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 2, 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = a2;
  return result;
}

{
  int *v3;
  int v4;
  int *v5;

  *(void *)uint64_t result = &unk_1F145F4E8;
  os_log_type_t v3 = *a3;
  if (*a3) {
    int v4 = *v3;
  }
  else {
    int v4 = 0;
  }
  *(_DWORD *)(result + 8) = v4;
  uint64_t v5 = a3[1];
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v5 + 2, 1uLL, memory_order_relaxed);
  }
  *(void *)(result + 32) = a2;
  return result;
}

BOOL AMCP::Object::expired(AMCP::Object *this)
{
  uint64_t v1 = *((void *)this + 3);
  return !v1 || *(void *)(v1 + 8) == -1;
}

uint64_t AMCP::Object::has_property(AMCP::Object *this, const AMCP::Address *a2)
{
  os_log_type_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v7) {
    uint64_t has_property = AMCP::Core::Core::has_property(v7, a2);
  }
  else {
    uint64_t has_property = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return has_property;
}

uint64_t AMCP::Object::is_property_settable(AMCP::Object *this, const AMCP::Address *a2)
{
  os_log_type_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 0;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  int v6 = v5;
  uint64_t v7 = (int8x8_t *)*((void *)this + 2);
  if (v7) {
    uint64_t is_property_settable = AMCP::Core::Core::is_property_settable(v7, a2);
  }
  else {
    uint64_t is_property_settable = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return is_property_settable;
}

uint64_t AMCP::Core::Core::is_property_settable(int8x8_t *this, const AMCP::Address *a2)
{
  os_log_type_t v3 = this;
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!AMCP::Core::Core::has_property((AMCP::Core::Core *)this, a2)) {
    goto LABEL_14;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, v3, (unsigned int *)a2);
  int v4 = v18;
  if (v18)
  {
    unint64_t Is_Property_Settable = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, Is_Property_Settable))
    {
      unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>();
      uint64_t v7 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v6);
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v15 = **(NSObject ***)buf;
        if (*(void *)v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
        }
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          char v16 = pthread_self();
          mach_port_t v17 = pthread_mach_thread_np(v16);
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v17;
          *(_WORD *)uint64_t v35 = 2080;
          *(void *)&v35[2] = "Operation.h";
          __int16 v36 = 1024;
          int v37 = 154;
          _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v25);
        std::runtime_error::runtime_error(&v26, &v25);
        std::runtime_error::runtime_error(&v27, &v26);
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = -1;
        v27.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        unint64_t v28 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
        int v38 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Ty"
              "pes = <AMCP::Core::Is_Property_Settable_Function>]";
        uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v40 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
        long long v23 = v20;
        uint64_t v24 = v21;
        long long v20 = 0uLL;
        uint64_t v21 = 0;
        unint64_t v22 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      long long v8 = v7;
      if (!*((void *)v7 + 7)
        || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>(),
            (uint64_t v7 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v8 + 7))(4, (uint64_t)v8 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unsigned int v12 = **(NSObject ***)buf;
        if (*(void *)v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
        }
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = pthread_self();
          mach_port_t v14 = pthread_mach_thread_np(v13);
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v14;
          *(_WORD *)uint64_t v35 = 2080;
          *(void *)&v35[2] = "Operation.h";
          __int16 v36 = 1024;
          int v37 = 161;
          _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v25);
        std::runtime_error::runtime_error(&v26, &v25);
        std::runtime_error::runtime_error(&v27, &v26);
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = 0;
        int v32 = -1;
        v27.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        unint64_t v28 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
        int v38 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = BOOL, Argument_Ty"
              "pes = <AMCP::Core::Is_Property_Settable_Function>]";
        uint64_t v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v40 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v20);
        long long v23 = v20;
        uint64_t v24 = v21;
        long long v20 = 0uLL;
        uint64_t v21 = 0;
        unint64_t v22 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v9 = *((void *)v7 + 3);
      if (!v9) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v9 + 48))(v9, buf);
    }
    else
    {
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
      LOBYTE(v3) = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v10) != 0;
    }
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (!v4) {
LABEL_14:
  }
    LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_1BAB36970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<BOOL ()(AMCP::Core::Is_Property_Settable_Function)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[360];
}

unint64_t AMCP::Object::get_property_type_hint(AMCP::Object *this, const AMCP::Address *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  os_log_type_t v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3 && (uint64_t v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = *((void *)this + 2);
    if (v7)
    {
      if (AMCP::Core::Core::has_property((AMCP::Core::Core *)v7, a2))
      {
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, (int8x8_t *)v7, (unsigned int *)a2);
        long long v8 = v27;
        if (v27
          && (unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>(),
              std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9)))
        {
          unint64_t Property_Type_Hint = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>();
          uint64_t v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, Property_Type_Hint);
          if (!v11)
          {
            AMCP::Log::Scope_Registry::get(0);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            long long v23 = **(NSObject ***)buf;
            if (*(void *)v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
            }
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              uint64_t v24 = pthread_self();
              mach_port_t v25 = pthread_mach_thread_np(v24);
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
              *(_DWORD *)&uint8_t buf[4] = v25;
              *(_WORD *)uint64_t v44 = 2080;
              *(void *)&v44[2] = "Operation.h";
              __int16 v45 = 1024;
              int v46 = 154;
              _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34);
            std::runtime_error::runtime_error(&v35, &v34);
            std::runtime_error::runtime_error(&v36, &v35);
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            int v41 = -1;
            v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
            int v37 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
            uint64_t v47 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Propert"
                  "y_Type_Hint, Argument_Types = <AMCP::Core::Get_Property_Type_Hint_Function>]";
            mach_port_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
            int v49 = 154;
            std::vector<void *>::vector(&v29);
            int v26 = backtrace((void **)v29, (*((void *)&v29 + 1) - (void)v29) >> 3);
            std::vector<void *>::resize((char **)&v29, v26);
            long long v32 = v29;
            uint64_t v33 = v30;
            long long v29 = 0uLL;
            uint64_t v30 = 0;
            uint64_t v31 = &unk_1F148AA90;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          unsigned int v12 = v11;
          if (!*((void *)v11 + 7)
            || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>(),
                (uint64_t v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12
                                                     + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
          {
            AMCP::Log::Scope_Registry::get(v11);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v19 = **(NSObject ***)buf;
            if (*(void *)v44) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v44);
            }
            if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
            {
              long long v20 = pthread_self();
              mach_port_t v21 = pthread_mach_thread_np(v20);
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
              *(_DWORD *)&uint8_t buf[4] = v21;
              *(_WORD *)uint64_t v44 = 2080;
              *(void *)&v44[2] = "Operation.h";
              __int16 v45 = 1024;
              int v46 = 161;
              _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v34);
            std::runtime_error::runtime_error(&v35, &v34);
            std::runtime_error::runtime_error(&v36, &v35);
            uint64_t v38 = 0;
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            int v41 = -1;
            v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
            int v37 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
            uint64_t v47 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Propert"
                  "y_Type_Hint, Argument_Types = <AMCP::Core::Get_Property_Type_Hint_Function>]";
            mach_port_t v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
            int v49 = 161;
            std::vector<void *>::vector(&v29);
            int v22 = backtrace((void **)v29, (*((void *)&v29 + 1) - (void)v29) >> 3);
            std::vector<void *>::resize((char **)&v29, v22);
            long long v32 = v29;
            uint64_t v33 = v30;
            long long v29 = 0uLL;
            uint64_t v30 = 0;
            uint64_t v31 = &unk_1F148AA90;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          uint64_t v13 = *((void *)v11 + 3);
          if (!v13) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          uint64_t v14 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v13 + 48))(v13, buf);
          int v15 = v14;
          unint64_t v16 = v14 & 0xFFFFFFFF00000000;
        }
        else
        {
          AMCP::get_property_traits((AMCP *)*(unsigned int *)a2, (uint64_t)buf);
          int v15 = (int)v48;
          if (*(void *)v44) {
            operator delete(*(void **)v44);
          }
          unint64_t v16 = 0;
        }
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
      }
      else
      {
        unint64_t v16 = 0;
        int v15 = 0;
      }
      unint64_t v7 = v16 & 0xFFFFFFFF00000000;
      unsigned int v17 = v7 | v15;
    }
    else
    {
      unsigned int v17 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    unsigned int v17 = 0;
    unint64_t v7 = 0;
  }
  return v7 & 0xFFFFFFFF00000000 | v17;
}

void sub_1BAB371E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Property_Type_Hint ()(AMCP::Core::Get_Property_Type_Hint_Function)>>()
{
  uint64_t v0 = &unk_1E9F79000;
  {
    uint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      uint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[325];
}

void AMCP::Object::get_property_value(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (unint64_t v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    long long v8 = v7;
    unint64_t v9 = (const AMCP::Address *)*((void *)this + 2);
    if (v9)
    {
      AMCP::Core::Core::get_property_value((AMCP::Core::Core *)a3, v9, a2);
    }
    else
    {
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

double AMCP::Core::Core::get_property_value(AMCP::Core::Core *this, const AMCP::Address *a2, const AMCP::Address *a3)
{
  if (!AMCP::Core::Core::has_property(a2, a3)) {
    goto LABEL_9;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v10, (int8x8_t *)a2, (unsigned int *)a3);
  unint64_t v7 = v10;
  if (v10
    && (unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8)))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)this, v7);
    int v9 = 0;
  }
  else
  {
    int v9 = 1;
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  if (v9)
  {
LABEL_9:
    *((void *)this + 4) = 0;
    double result = 0.0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  return result;
}

void AMCP::Object::get_property_value(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const AMCP::Thing *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7)
  {
    int v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      unint64_t v10 = (const AMCP::Address *)*((void *)this + 2);
      if (v10)
      {
        AMCP::Core::Core::get_property_value((AMCP::Core::Core *)a4, v10, a2, (uint64_t)a3);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        return;
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  *(void *)(a4 + 32) = 0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  uint64_t v11 = (void (*)(uint64_t, const AMCP::Thing *, uint64_t, void))*((void *)a3 + 4);
  if (v11) {
    v11(1, a3, a4, 0);
  }
  if (v9) {
    goto LABEL_9;
  }
}

void AMCP::Core::Core::get_property_value(AMCP::Core::Core *this, const AMCP::Address *a2, const AMCP::Thing *a3, uint64_t a4)
{
  if (!AMCP::Core::Core::has_property(a2, a3)) {
    goto LABEL_9;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v12, (int8x8_t *)a2, (unsigned int *)a3);
  unint64_t v8 = v12;
  if (v12
    && (unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9)))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)this, v8);
    int v10 = 0;
  }
  else
  {
    int v10 = 1;
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v10)
  {
LABEL_9:
    *((void *)this + 4) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, AMCP::Core::Core *, void))(a4 + 32);
    if (v11) {
      v11(1, a4, this, 0);
    }
  }
}

uint64_t AMCP::Object::set_property_value(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4) {
    return 0;
  }
  unint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7;
  unint64_t v9 = (int8x8_t *)*((void *)this + 2);
  if (!v9 || !AMCP::Core::Core::is_property_settable(v9, a2)) {
    goto LABEL_13;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, v9, (unsigned int *)a2);
  int v10 = v15;
  if (v15
    && (unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11)))
  {
    AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v10, (uint64_t)a3);
    char v12 = 0;
  }
  else
  {
    char v12 = 1;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if ((v12 & 1) == 0) {
    uint64_t v13 = 1;
  }
  else {
LABEL_13:
  }
    uint64_t v13 = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v13;
}

void sub_1BAB3782C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, NSObject **buf, long long a17, long long a18)
{
  if (a2)
  {
    if ((void)a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a17);
    }
    long long v20 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v21 = *buf;
    if ((void)a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a17);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      int v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      v24.i32[0] = bswap32(*v18);
      int8x8_t v25 = vzip1_s8(v24, v24);
      v26.i64[0] = 0x1F0000001FLL;
      v26.i64[1] = 0x1F0000001FLL;
      v27.i64[0] = 0x5F0000005FLL;
      v27.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v27, (uint32x4_t)vsraq_n_s32(v26, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v25), 0x18uLL), 0x18uLL))), v25, (int8x8_t)0x2E002E002E002ELL);
      a15 = 4;
      LODWORD(__p) = vmovn_s16(v28).u32[0];
      BYTE4(__p) = 0;
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v23;
      LOWORD(a17) = 2080;
      *(void *)((char *)&a17 + 2) = "Core.h";
      WORD5(a17) = 1024;
      HIDWORD(a17) = 311;
      LOWORD(a18) = 2080;
      *(void *)((char *)&a18 + 2) = &__p;
      _os_log_debug_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Caught exception trying to set property value %s", (uint8_t *)&buf, 0x22u);
      if (a15 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAB377E4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)uint64_t v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    uint64_t v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const AMCP::Thing &>]";
    std::string v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>(),
        (uint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    mach_port_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    uint64_t v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const AMCP::Thing &>]";
    std::string v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    uint64_t v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAB37E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Object::set_property_value_and_wait(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4) {
    return 0;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return 0;
  }
  unint64_t v8 = v7;
  unint64_t v9 = (int8x8_t *)*((void *)this + 2);
  if (!v9 || !AMCP::Core::Core::is_property_settable(v9, a2)) {
    goto LABEL_13;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, v9, (unsigned int *)a2);
  int v10 = v15;
  if (v15
    && (unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>(),
        std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v10, v11)))
  {
    AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v10, (uint64_t)a3);
    char v12 = 0;
  }
  else
  {
    char v12 = 1;
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if ((v12 & 1) == 0) {
    uint64_t v13 = 1;
  }
  else {
LABEL_13:
  }
    uint64_t v13 = 0;
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  return v13;
}

void sub_1BAB37FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, NSObject **buf, long long a17, long long a18)
{
  if (a2)
  {
    if ((void)a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a17);
    }
    std::string v20 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    std::runtime_error v21 = *buf;
    if ((void)a17) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a17);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      std::runtime_error v22 = pthread_self();
      mach_port_t v23 = pthread_mach_thread_np(v22);
      v24.i32[0] = bswap32(*v18);
      int8x8_t v25 = vzip1_s8(v24, v24);
      v26.i64[0] = 0x1F0000001FLL;
      v26.i64[1] = 0x1F0000001FLL;
      v27.i64[0] = 0x5F0000005FLL;
      v27.i64[1] = 0x5F0000005FLL;
      *(int8x8_t *)v28.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v27, (uint32x4_t)vsraq_n_s32(v26, vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)v25), 0x18uLL), 0x18uLL))), v25, (int8x8_t)0x2E002E002E002ELL);
      a15 = 4;
      LODWORD(__p) = vmovn_s16(v28).u32[0];
      BYTE4(__p) = 0;
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v23;
      LOWORD(a17) = 2080;
      *(void *)((char *)&a17 + 2) = "Core.h";
      WORD5(a17) = 1024;
      HIDWORD(a17) = 332;
      LOWORD(a18) = 2080;
      *(void *)((char *)&a18 + 2) = &__p;
      _os_log_debug_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Caught exception trying to set property value %s", (uint8_t *)&buf, 0x22u);
      if (a15 < 0) {
        operator delete(__p);
      }
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAB37F70);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Object::get_property_value_with_qualifier(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const AMCP::Thing *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6 && (unint64_t v9 = std::__shared_weak_count::lock(v6)) != 0)
  {
    int v10 = v9;
    unint64_t v11 = (int8x8_t *)*((void *)this + 2);
    if (v11)
    {
      AMCP::Core::Core::call_operation_function<AMCP::Thing,AMCP::Thing const&>((AMCP::Log::Scope_Registry *)a4, v11, (unsigned int *)a2, (uint64_t)a3);
    }
    else
    {
      *(void *)(a4 + 32) = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  else
  {
    *(void *)(a4 + 32) = 0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
}

void AMCP::Core::Core::call_operation_function<AMCP::Thing,AMCP::Thing const&>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::runtime_error v22 = **(NSObject ***)buf;
    if (*(void *)v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)char v42 = 2080;
      *(void *)&uint64_t v42[2] = "Core.h";
      __int16 v43 = 1024;
      int v44 = 198;
      __int16 v45 = 2080;
      *(void *)int v46 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, a2, a3);
  unint64_t v8 = v25;
  if (!v25)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v16 = **(NSObject ***)buf;
    if (*(void *)v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)char v42 = 2080;
      *(void *)&uint64_t v42[2] = "Core.h";
      __int16 v43 = 1024;
      int v44 = 202;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v46[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = AMCP::Thing, Argument_Types = <const AMCP::Thing &>]";
    uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v48 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    long long v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>();
  int v10 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9);
  if (!v10)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v19 = **(NSObject ***)buf;
    if (*(void *)v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      std::string v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)char v42 = 2080;
      *(void *)&uint64_t v42[2] = "Operation.h";
      __int16 v43 = 1024;
      int v44 = 154;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v46[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::"
                         "Thing, Argument_Types = <const AMCP::Thing &>]";
    uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v48 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    long long v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v11 = v10;
  if (!*((void *)v10 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>(),
        (int v10 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v11 + 7))(4, (uint64_t)v11 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)char v42 = 2080;
      *(void *)&uint64_t v42[2] = "Operation.h";
      __int16 v43 = 1024;
      int v44 = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v46[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::"
                         "Thing, Argument_Types = <const AMCP::Thing &>]";
    uint64_t v47 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v48 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    long long v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v12 = *((void *)v10 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, a4);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1BAB38910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 2808);
}

void AMCP::Object::get_property_value_with_qualifier(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const AMCP::Thing *a3@<X2>, const AMCP::Thing *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v8)
  {
    unint64_t v11 = std::__shared_weak_count::lock(v8);
    uint64_t v12 = v11;
    if (v11)
    {
      uint64_t v13 = (int8x8_t *)*((void *)this + 2);
      if (v13)
      {
        if (*(_DWORD *)a2 == 707406378 || *((_DWORD *)a2 + 1) == 707406378 || *((_DWORD *)a2 + 2) == -1)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
          mach_port_t v18 = *v21;
          if (*(void *)v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
          }
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = pthread_self();
            mach_port_t v20 = pthread_mach_thread_np(v19);
            LODWORD(v21) = 67109890;
            HIDWORD(v21) = v20;
            *(_WORD *)std::runtime_error v22 = 2080;
            *(void *)&v22[2] = "Core.h";
            __int16 v23 = 1024;
            int v24 = 186;
            __int16 v25 = 2080;
            int32x4_t v26 = "!in_address.has_wildcards()";
            _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v21, 0x22u);
          }
          abort();
        }
        AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v21, v13, (unsigned int *)a2);
        mach_port_t v14 = v21;
        if (v21)
        {
          unint64_t v15 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(AMCP::Thing const&)>>();
          LOBYTE(v14) = std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v14, v15) != 0;
        }
        if (*(void *)v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
        }
        if (v14)
        {
          AMCP::Core::Core::call_operation_function<AMCP::Thing,AMCP::Thing const&>((AMCP::Log::Scope_Registry *)a5, v13, (unsigned int *)a2, (uint64_t)a3);
        }
        else
        {
          *(void *)(a5 + 32) = 0;
          *(_OWORD *)a5 = 0u;
          *(_OWORD *)(a5 + 16) = 0u;
          uint64_t v17 = (void (*)(uint64_t, const AMCP::Thing *, uint64_t, void))*((void *)a4 + 4);
          if (v17) {
            v17(1, a4, a5, 0);
          }
        }
LABEL_17:
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
        return;
      }
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  *(void *)(a5 + 32) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v16 = (void (*)(uint64_t, const AMCP::Thing *, uint64_t, void))*((void *)a4 + 4);
  if (v16) {
    v16(1, a4, a5, 0);
  }
  if (v12) {
    goto LABEL_17;
  }
}

void sub_1BAB38CBC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Object::set_property_value_with_qualifier(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3, const AMCP::Thing *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v5) {
    return 0;
  }
  unint64_t v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    return 0;
  }
  int v10 = v9;
  unint64_t v11 = (AMCP::Address *)*((void *)this + 2);
  if (v11)
  {
    AMCP::Core::Core::call_operation_function<void,AMCP::Thing const&,AMCP::Thing const&>(v11, (unsigned int *)a2, (uint64_t)a3, (uint64_t)a4);
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  return v12;
}

void AMCP::Core::Core::call_operation_function<void,AMCP::Thing const&,AMCP::Thing const&>(AMCP::Address *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v23 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      int v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 198;
      __int16 v46 = 2080;
      *(void *)uint64_t v47 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)a1, a2);
  unint64_t v9 = v26;
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v17 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <const AMCP::Thing &, const AMCP::Thing &>]";
    int v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&,AMCP::Thing const&)>>();
  unint64_t v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v20 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <const AMCP::Thing &, const AMCP::Thing &>]";
    int v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v12 = v11;
  if (!*((void *)v11 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&,AMCP::Thing const&)>>(),
        (unint64_t v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v14 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      unint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v33);
    std::runtime_error::runtime_error(&v34, &v33);
    std::runtime_error::runtime_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v36 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <const AMCP::Thing &, const AMCP::Thing &>]";
    int v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v28);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    long long v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v13 = *((void *)v11 + 3);
  if (!v13) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a3, a4);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void sub_1BAB394C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&,AMCP::Thing const&)>>()
{
  unint64_t v0 = 0x1E9F78000uLL;
  {
    unint64_t v0 = 0x1E9F78000;
    if (v2)
    {
      unint64_t v0 = 0x1E9F78000;
    }
  }
  return *(void *)(v0 + 2824);
}

uint64_t AMCP::Object::set_property_value_with_qualifier_and_wait(AMCP::Object *this, const AMCP::Address *a2, const AMCP::Thing *a3, const AMCP::Thing *a4)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v5) {
    return 0;
  }
  unint64_t v9 = std::__shared_weak_count::lock(v5);
  if (!v9) {
    return 0;
  }
  unint64_t v10 = v9;
  unint64_t v11 = (AMCP::Address *)*((void *)this + 2);
  if (v11)
  {
    AMCP::Core::Core::call_operation_function<void,AMCP::Thing const&,AMCP::Thing const&>(v11, (unsigned int *)a2, (uint64_t)a3, (uint64_t)a4);
    uint64_t v12 = 1;
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  return v12;
}

unint64_t AMCP::Object::get_stock_class_id(AMCP::Object *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Object::get_class_id(AMCP::Object *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  unint64_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1668047219u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "salcbolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "clas");
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      unint64_t v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      uint64_t v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAB398C0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Object::get_owner(AMCP::Object *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  os_log_type_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  mach_port_t v4 = v3;
  uint64_t v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5) {
    unint64_t simple_required = AMCP::Core::Core::get_simple_required_property<1870098034u>(v5);
  }
  else {
    unint64_t simple_required = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return simple_required;
}

unint64_t AMCP::Core::Core::get_simple_required_property<1870098034u>(AMCP::Core::Core *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  strcpy(buf, "rnwobolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  unint64_t result = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(a1, (const AMCP::Address *)buf);
  if (!HIDWORD(result))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v2 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      char v6 = 4;
      strcpy((char *)__p, "ownr");
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      __int16 v8 = 1024;
      int v9 = 391;
      __int16 v10 = 2080;
      unint64_t v11 = "optional_value.operator BOOL() == true";
      __int16 v12 = 2080;
      uint64_t v13 = __p;
      __int16 v14 = 1024;
      int v15 = 1735159650;
      __int16 v16 = 1024;
      int v17 = 0;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    abort();
  }
  return result;
}

void sub_1BAB39A9C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Object::get_creator(AMCP::Object *this@<X0>, void *a2@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "glpobolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, v7, (const AMCP::Address *)buf);
      if (!v16)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          unint64_t v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "oplg");
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v18 = 1024;
          int v19 = 391;
          __int16 v20 = 2080;
          mach_port_t v21 = "optional_value.operator BOOL() == true";
          __int16 v22 = 2080;
          __int16 v23 = __p;
          __int16 v24 = 1024;
          int v25 = 1735159650;
          __int16 v26 = 1024;
          int v27 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      CFTypeRef v9 = cf;
      if (cf) {
        CFRetain(cf);
      }
      *a2 = v9;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    }
    else
    {
      *a2 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
  }
}

void sub_1BAB39CAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Object::get_owned_object_list(AMCP::Object *this@<X0>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      strcpy(buf, "#nwobolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>((uint64_t)&v15, v7, (AMCP::Address *)buf);
      if (!v17)
      {
        AMCP::Log::Scope_Registry::get(v8);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v10 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          unint64_t v11 = pthread_self();
          mach_port_t v12 = pthread_mach_thread_np(v11);
          char v14 = 4;
          strcpy((char *)__p, "own#");
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v12;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Core.h";
          __int16 v19 = 1024;
          int v20 = 391;
          __int16 v21 = 2080;
          __int16 v22 = "optional_value.operator BOOL() == true";
          __int16 v23 = 2080;
          __int16 v24 = __p;
          __int16 v25 = 1024;
          int v26 = 1735159650;
          __int16 v27 = 1024;
          int v28 = 0;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        abort();
      }
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      CFTypeRef v9 = v15;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, v15, v16, (v16 - (uint64_t)v15) >> 2);
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_1BAB39EDC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Object::get_name(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626C6E616DLL;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_name(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  char v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F626C6E616DLL;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(void *a1, AMCP::Core::Core *this, AMCP::Address *a3, const void **a4)
{
  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_13:
    mach_port_t v12 = *a4;
    if (v12) {
      CFRetain(v12);
    }
    *a1 = v12;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)this, (unsigned int *)a3);
  uint64_t v8 = v15;
  if (v15)
  {
    unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
    {
      AMCP::Core::Operation::call_function<applesauce::CF::StringRef>((uint64_t)a1, v8);
LABEL_5:
      int v10 = 0;
      goto LABEL_10;
    }
    unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v13, v8);
      AMCP::Thing::convert_to<applesauce::CF::StringRef>(a1, (uint64_t)v13);
      if (v14) {
        v14(0, v13, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v10 = 1;
LABEL_10:
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v10) {
    goto LABEL_13;
  }
}

void AMCP::Object::get_model_name(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626C6D6F64;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_model_name(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  char v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F626C6D6F64;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_manufacturer_name(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626C6D616BLL;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_manufacturer_name(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  char v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F626C6D616BLL;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_icon(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  mach_port_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F6269636F6ELL;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a2, v7, (AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(unsigned char *a1, AMCP::Core::Core *this, AMCP::Address *a3)
{
  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_13:
    *a1 = 0;
    a1[8] = 0;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)this, (unsigned int *)a3);
  char v6 = v13;
  if (!v13) {
    goto LABEL_9;
  }
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
  {
    AMCP::Core::Operation::call_function<applesauce::CF::URLRef>((uint64_t)v11, v6);
    int v8 = 0;
    *(void *)a1 = v11[0];
    a1[8] = 1;
    goto LABEL_10;
  }
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, v6);
    AMCP::Thing::convert_to<applesauce::CF::URLRef>(&v10, (uint64_t)v11);
    *(void *)a1 = v10;
    a1[8] = 1;
    if (v12) {
      v12(0, v11, 0, 0);
    }
    int v8 = 0;
  }
  else
  {
LABEL_9:
    int v8 = 1;
  }
LABEL_10:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v8) {
    goto LABEL_13;
  }
}

uint64_t AMCP::Core::Operation::call_function<applesauce::CF::URLRef>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
  mach_port_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    uint64_t v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::URLRe"
          "f, Argument_Types = <>]";
    std::string v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>(),
        (mach_port_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    uint64_t v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::URLRe"
          "f, Argument_Types = <>]";
    std::string v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAB3AA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

CFTypeRef *AMCP::Thing::convert_to<applesauce::CF::URLRef>(void *a1, uint64_t a2)
{
  if (!*(void *)(a2 + 32)) {
    goto LABEL_16;
  }
  uint64_t v4 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, void, void))(a2 + 32);
  std::runtime_error v20 = 0;
  if (v5)
  {
    v5(3, a2, 0, &v20);
    uint64_t v5 = v20;
  }
  if (v5 == (void (*)(uint64_t, uint64_t, void, void))v4)
  {
    uint64_t v19 = v4;
    unint64_t result = (CFTypeRef *)(*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *))(a2 + 32))(4, a2, 0, &v19);
    if (result)
    {
      CFTypeRef v7 = *result;
      if (*result) {
        unint64_t result = (CFTypeRef *)CFRetain(*result);
      }
      *a1 = v7;
      return result;
    }
LABEL_16:
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v10 = std::bad_cast::bad_cast(exception);
    __cxa_throw(v10, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v16 = AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>();
  memset(v17, 0, sizeof(v17));
  uint64_t v18 = 0;
  (*(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t *))(a2 + 32))(6, a2, v17, &v16);
  if (!v18)
  {
    int v11 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    mach_port_t v12 = std::bad_cast::bad_cast(v11);
    __cxa_throw(v12, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  uint64_t v15 = v4;
  unint64_t result = (CFTypeRef *)v18(4, v17, 0, &v15);
  if (!result)
  {
    mach_port_t v13 = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    long long v14 = std::bad_cast::bad_cast(v13);
    __cxa_throw(v14, MEMORY[0x1E4FBA358], MEMORY[0x1E4FBA2B8]);
  }
  CFTypeRef v8 = *result;
  if (*result) {
    unint64_t result = (CFTypeRef *)CFRetain(*result);
  }
  *a1 = v8;
  if (v18) {
    return (CFTypeRef *)v18(0, v17, 0, 0);
  }
  return result;
}

void sub_1BAB3ACE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<applesauce::CF::URLRef>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[133];
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[415];
}

void AMCP::Object::get_icon(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    CFTypeRef v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      CFTypeRef v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F6269636F6ELL;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  unint64_t v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(void *a1, AMCP::Core::Core *this, AMCP::Address *a3, const void **a4)
{
  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_13:
    mach_port_t v12 = *a4;
    if (v12) {
      CFRetain(v12);
    }
    *a1 = v12;
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v15, (int8x8_t *)this, (unsigned int *)a3);
  CFTypeRef v8 = v15;
  if (v15)
  {
    unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::URLRef ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
    {
      AMCP::Core::Operation::call_function<applesauce::CF::URLRef>((uint64_t)a1, v8);
LABEL_5:
      int v10 = 0;
      goto LABEL_10;
    }
    unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v13, v8);
      AMCP::Thing::convert_to<applesauce::CF::URLRef>(a1, (uint64_t)v13);
      if (v14) {
        v14(0, v13, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v10 = 1;
LABEL_10:
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v10) {
    goto LABEL_13;
  }
}

void AMCP::Object::get_configuration_app(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    CFTypeRef v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F6263617070;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_configuration_app(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    CFTypeRef v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F6263617070;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_serial_number(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    CFTypeRef v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F62736E756DLL;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_serial_number(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    CFTypeRef v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F62736E756DLL;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_firmware_version(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    CFTypeRef v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626677766ELL;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a2, v7, (const AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_firmware_version(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    CFTypeRef v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F626677766ELL;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_element_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (CFTypeRef v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v8 = v7;
    int v9 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v9)
    {
      int v10 = 1818454126;
      uint64_t v11 = *(void *)((char *)a2 + 4);
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v9, (const AMCP::Address *)&v10);
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void AMCP::Object::get_element_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const void **a3@<X2>, void *a4@<X8>)
{
  CFTypeRef v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7)
  {
    int v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      int v10 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v10)
      {
        int v12 = 1818454126;
        uint64_t v13 = *(void *)((char *)a2 + 4);
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a4, v10, (AMCP::Address *)&v12, a3);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        return;
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v11 = *a3;
  if (v11) {
    CFRetain(v11);
  }
  *a4 = v11;
  if (v9) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_element_category_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (CFTypeRef v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v8 = v7;
    int v9 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v9)
    {
      int v10 = 1818452846;
      uint64_t v11 = *(void *)((char *)a2 + 4);
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v9, (const AMCP::Address *)&v10);
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void AMCP::Object::get_element_category_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const void **a3@<X2>, void *a4@<X8>)
{
  CFTypeRef v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7)
  {
    int v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      int v10 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v10)
      {
        int v12 = 1818452846;
        uint64_t v13 = *(void *)((char *)a2 + 4);
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a4, v10, (AMCP::Address *)&v12, a3);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        return;
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v11 = *a3;
  if (v11) {
    CFRetain(v11);
  }
  *a4 = v11;
  if (v9) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_element_number_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (CFTypeRef v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v8 = v7;
    int v9 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v9)
    {
      int v10 = 1818455662;
      uint64_t v11 = *(void *)((char *)a2 + 4);
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a3, v9, (const AMCP::Address *)&v10);
    }
    else
    {
      *a3 = 0;
      a3[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[8] = 0;
  }
}

void AMCP::Object::get_element_number_name(AMCP::Object *this@<X0>, const AMCP::Address *a2@<X1>, const void **a3@<X2>, void *a4@<X8>)
{
  CFTypeRef v7 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v7)
  {
    int v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      int v10 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v10)
      {
        int v12 = 1818455662;
        uint64_t v13 = *(void *)((char *)a2 + 4);
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(a4, v10, (AMCP::Address *)&v12, a3);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        return;
      }
    }
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v11 = *a3;
  if (v11) {
    CFRetain(v11);
  }
  *a4 = v11;
  if (v9) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_resource_bundle_url(AMCP::Object *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (uint64_t v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    CFTypeRef v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F6272737263;
      int v9 = 0;
      AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a2, v7, (AMCP::Address *)&v8);
    }
    else
    {
      *a2 = 0;
      a2[8] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[8] = 0;
  }
}

void AMCP::Object::get_resource_bundle_url(AMCP::Object *this@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v6)
  {
    CFTypeRef v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = (AMCP::Core::Core *)*((void *)this + 2);
      if (v8)
      {
        uint64_t v10 = 0x676C6F6272737263;
        int v11 = 0;
        AMCP::Core::Core::get_typed_property_value<applesauce::CF::URLRef,std::enable_if<true,void>>(a3, v8, (AMCP::Address *)&v10, a2);
LABEL_9:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
        return;
      }
    }
  }
  else
  {
    CFTypeRef v7 = 0;
  }
  int v9 = *a2;
  if (v9) {
    CFRetain(v9);
  }
  *a3 = v9;
  if (v7) {
    goto LABEL_9;
  }
}

void AMCP::Object::get_localized_string(AMCP::Object *this@<X0>, CFStringRef *a2@<X1>, CFTypeRef *a3@<X2>, CFStringRef *a4@<X3>, CFStringRef *a5@<X4>, void *a6@<X8>)
{
  int v11 = *a3;
  if (*a3)
  {
    CFRetain(*a3);
  }
  else
  {
    int v11 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v11)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  AMCP::Object::get_resource_bundle_url(this, &bundleURL);
  if (!v19)
  {
    *a6 = v11;
    return;
  }
  CFBundleRef v12 = CFBundleCreate(0, bundleURL);
  mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(&bundle, v12);
  *a6 = 0;
  CFTypeRef v21 = 0;
  if (!bundle) {
    goto LABEL_19;
  }
  if (*a2)
  {
    CFStringRef v13 = CFBundleCopyLocalizedString(bundle, *a2, 0, *a5);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v13);
    CFTypeRef v14 = cf;
    CFTypeRef v21 = cf;
    if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, a2))
    {
      *a6 = v14;
      if (v14) {
        goto LABEL_16;
      }
    }
    else
    {
      CFTypeRef v21 = 0;
      if (v14) {
        CFRelease(v14);
      }
    }
  }
  if (!*a4) {
    goto LABEL_19;
  }
  CFStringRef v15 = CFBundleCopyLocalizedString(bundle, *a4, 0, *a5);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v15);
  CFTypeRef v14 = cf;
  CFTypeRef v21 = cf;
  if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, a4) == kCFCompareEqualTo)
  {
    CFTypeRef v21 = 0;
    if (v14) {
      CFRelease(v14);
    }
    goto LABEL_19;
  }
  *a6 = v14;
  if (!v14)
  {
LABEL_19:
    *a6 = v11;
    CFRetain(v11);
    goto LABEL_20;
  }
LABEL_16:
  CFRetain(v14);
  CFRelease(v14);
LABEL_20:
  if (bundle) {
    CFRelease(bundle);
  }
  if (bundleURL) {
    CFRelease(bundleURL);
  }
  CFRelease(v11);
}

void sub_1BAB3BBD0(void *a1)
{
}

void *mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf)
  {
    CFTypeID v3 = CFGetTypeID(cf);
    if (v3 != CFBundleGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  return a1;
}

void sub_1BAB3BCA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(v1);
  _Unwind_Resume(a1);
}

const void **applesauce::CF::ObjectRef<__CFBundle *>::~ObjectRef(const void **a1)
{
  int v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t AMCP::Object::constructed_correct_class(AMCP::Object *this, AMCP *a2)
{
  CFTypeID v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v3) {
    return 1;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 1;
  }
  uint64_t v6 = v5;
  CFTypeRef v7 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v7)
  {
    unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(v7);
    uint64_t is_base_of = AMCP::is_base_of(a2, simple_required);
  }
  else
  {
    uint64_t is_base_of = 1;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return is_base_of;
}

void AMCP::Object::get_control_list(AMCP::Object *this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v5 && (CFTypeRef v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    uint64_t v8 = v7;
    int v9 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v9)
    {
      memset(v10, 0, sizeof(v10));
      v11[0] = 1668575852;
      v11[1] = a2;
      _OWORD v11[2] = 0;
      AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(a3, v9, (AMCP::Address *)v11, (uint64_t)v10);
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(void *a1, AMCP::Core::Core *this, AMCP::Address *a3, uint64_t a4)
{
  if (!AMCP::Core::Core::has_property(this, a3))
  {
LABEL_13:
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a1, *(const void **)a4, *(void *)(a4 + 8), (uint64_t)(*(void *)(a4 + 8) - *(void *)a4) >> 2);
    return;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v14, (int8x8_t *)this, (unsigned int *)a3);
  uint64_t v8 = v14;
  if (v14)
  {
    unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v9))
    {
      AMCP::Core::Operation::call_function<std::vector<unsigned int>>((uint64_t)a1, v8);
LABEL_5:
      int v10 = 0;
      goto LABEL_10;
    }
    unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v8, v11))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v12, v8);
      AMCP::Thing::convert_to<std::vector<unsigned int>>(a1, (uint64_t)v12);
      if (v13) {
        v13(0, v12, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v10 = 1;
LABEL_10:
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v10) {
    goto LABEL_13;
  }
}

uint64_t AMCP::Object::get_control(AMCP::Object *this, int a2, int a3, int a4)
{
  AMCP::Object::get_control_list(this, a3, &__p);
  uint64_t v8 = (unsigned int *)__p;
  unint64_t v9 = v21;
  if (__p == v21)
  {
    uint64_t v10 = 0;
    if (!__p) {
      return v10;
    }
    goto LABEL_17;
  }
  while (1)
  {
    uint64_t v10 = *v8;
    AMCP::Control::Control((uint64_t)v18, *((void *)this + 4), *v8);
    int class_id = AMCP::Object::get_class_id((AMCP::Object *)v18);
    int scope = AMCP::Control::get_scope((AMCP::Control *)v18);
    int element = AMCP::Control::get_element((AMCP::Control *)v18);
    BOOL v14 = class_id == a2 && scope == a3;
    BOOL v15 = v14 && element == a4;
    BOOL v16 = v15;
    v18[0] = &unk_1F145F4E8;
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
    if (v16) {
      break;
    }
    if (++v8 == v9)
    {
      uint64_t v10 = 0;
      break;
    }
  }
  uint64_t v8 = (unsigned int *)__p;
  if (__p)
  {
LABEL_17:
    CFTypeRef v21 = v8;
    operator delete(v8);
  }
  return v10;
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::GetSoftwareReferenceStreamControlValue(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::GetHardwareReferenceStreamControlValue(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 224))();
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlValue(void *a1)
{
  int v1 = *(_DWORD *)(a1[1] + 60);
  if (v1)
  {
    if (v1 != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlValue: unknown control type";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    int v2 = *(uint64_t (**)(void))(*a1 + 56);
  }
  else
  {
    int v2 = *(uint64_t (**)(void))(*a1 + 48);
  }
  return v2();
}

void HALS_ReferenceStreamControlPropertyHandler::SetSoftwareReferenceStreamControlValue(HALS_ReferenceStreamControlPropertyHandler *this, HALS_Client *a2, char a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*((void *)this + 1) + 56));
  CFTypeRef v7 = (HALS_ObjectMap *)v6;
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      CFBundleRef v12 = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      __int16 v13 = 1024;
      int v14 = 120;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::SetSoftwareReferenceStreamControlValue: owning device is missing", (uint8_t *)&v11, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  *((unsigned char *)this + 16) = a3;
  if (a2) {
    uint64_t v8 = *((unsigned int *)a2 + 4);
  }
  else {
    uint64_t v8 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 936))(v6, 1, v8);
  HALS_ObjectMap::ReleaseObject(v7, v9);
}

void sub_1BAB3C2BC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_ReferenceStreamControlPropertyHandler::SetHardwareReferenceStreamControlValue(HALS_ReferenceStreamControlPropertyHandler *this, HALS_Client *a2, uint64_t a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(*((void *)this + 1)
                                                                                                + 56));
  if (!v6)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v9 = 136315394;
      uint64_t v10 = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      __int16 v11 = 1024;
      int v12 = 107;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::SetHardwareReferenceStreamControlValue: owning device is missing", (uint8_t *)&v9, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 560947818;
  }
  (*(void (**)(void, HALS_Client *, uint64_t))(**((void **)this + 1) + 216))(*((void *)this + 1), a2, a3);
  (*(void (**)(HALS_ObjectMap *, HALS_Client *, void))(*(void *)v6 + 944))(v6, a2, *(unsigned int *)(*((void *)this + 1) + 16));
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1BAB3C488(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlValue(void *a1)
{
  int v1 = *(_DWORD *)(a1[1] + 60);
  if (v1)
  {
    if (v1 != 1)
    {
      exception = __cxa_allocate_exception(8uLL);
      void *exception = "HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlValue: unknown control type";
      __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
    }
    int v2 = *(uint64_t (**)(void))(*a1 + 32);
  }
  else
  {
    int v2 = *(uint64_t (**)(void))(*a1 + 24);
  }
  return v2();
}

void HALS_ReferenceStreamControlPropertyHandler::~HALS_ReferenceStreamControlPropertyHandler(HALS_ReferenceStreamControlPropertyHandler *this)
{
}

void HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(HALS_ReferenceStreamControlPropertyHandler *this, HALS_Client *a2, int a3)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 15) >= 2u)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData: unknown control type";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v5 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      __int16 v38 = 1024;
      int v39 = 44;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData: owning device is missing", buf, 0x12u);
    }
    char v27 = __cxa_allocate_exception(0x10uLL);
    *(void *)char v27 = off_1F148A5D8;
    v27[2] = 560947818;
  }
  if (a2) {
    uint64_t v6 = (HALS_ObjectMap *)*((unsigned int *)a2 + 4);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0;
  *(void *)os_workgroup_interval_data_opaque_s buf = 0x696E70746F757470;
  do
  {
    uint64_t v8 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_ObjectMap *, uint64_t, void, void))(*(void *)v5 + 640))(v5, 1702259059, *(unsigned int *)&buf[v7], 0);
    int v9 = v8;
    if (v8) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = v7 == 4;
    }
    v7 += 4;
  }
  while (!v10);
  int v28 = v8;
  __int16 v11 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
  uint64_t v13 = v11;
  if (v9)
  {
    HALS_ObjectMap::RetainObject(v11, v12);
    uint64_t v14 = *((void *)v5 + 55);
    uint64_t v15 = operator new(0x20uLL);
    *uint64_t v15 = &unk_1F1487178;
    v15[1] = v5;
    uint64_t v15[2] = &v28;
    *((_DWORD *)v15 + 6) = v6;
    uint64_t v36 = (uint64_t)v15;
    HALS_ObjectMap::RetainObject(v13, v16);
    int v34 = 0;
    long long v17 = operator new(0x28uLL);
    void *v17 = &unk_1F1487208;
    v17[1] = v5;
    *((_DWORD *)v17 + 4) = v6;
    v17[3] = v13;
    *((unsigned char *)v17 + 32) = a3;
    int v34 = v17;
    uint64_t v18 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v6);
    uint64_t v31 = v14;
    char v32 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)v14);
    char v19 = *(uint64_t **)(v14 + 184);
    if (v19)
    {
      while (*((_DWORD *)v19 + 4) != v6)
      {
        char v19 = (uint64_t *)*v19;
        if (!v19) {
          goto LABEL_16;
        }
      }
      if (a3) {
        goto LABEL_20;
      }
    }
    else
    {
LABEL_16:
      if ((a3 & 1) == 0)
      {
LABEL_20:
        std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v31);
LABEL_28:
        HALS_ObjectMap::ReleaseObject(v18, v20);
        std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v33);
        pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
        std::__function::__value_func<void ()(HALS_Client *,BOOL)>::~__value_func[abi:ne180100](v35);
        HALS_ObjectMap::ReleaseObject(v13, v23);
        goto LABEL_29;
      }
    }
    std::unordered_set<unsigned int>::unordered_set((uint64_t)buf, v14 + 168);
    std::unordered_set<unsigned int>::unordered_set((uint64_t)v29, v14 + 208);
    if (a3) {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>(v14 + 168, v6, (int)v6);
    }
    else {
      std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__erase_unique<unsigned int>((void *)(v14 + 168), v6);
    }
    int v21 = (v40 | v30) != 0;
    int v22 = (*(void *)(v14 + 192) | *(void *)(v14 + 232)) == 0;
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v29);
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)buf);
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v31);
    if (v21 == v22)
    {
      if (v18) {
        std::function<void ()(HALS_Client *,BOOL)>::operator()(v36, (uint64_t)v18, a3);
      }
      else {
        std::function<void ()(HALS_Client *,BOOL)>::operator()(v36, 0, a3);
      }
    }
    else
    {
      if (!v34) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(void *))(*v34 + 48))(v34);
    }
    goto LABEL_28;
  }
LABEL_29:
  HALS_ObjectMap::ReleaseObject(v13, v12);
  HALS_ObjectMap::ReleaseObject(v28, v24);
  HALS_ObjectMap::ReleaseObject(v5, v25);
}

void sub_1BAB3C980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_ObjectMap *a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)&a10);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v24 - 112);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a15);
  HALS_ObjectMap::ReleaseObject(v23, v26);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a17);
  HALS_ObjectMap::ReleaseObject(0, v27);
  std::__function::__value_func<void ()(HALS_Client *,BOOL)>::~__value_func[abi:ne180100](&a21);
  HALS_ObjectMap::ReleaseObject(v22, v28);
  HALS_ObjectMap::ReleaseObject(v22, v29);
  HALS_ObjectMap::ReleaseObject(a9, v30);
  HALS_ObjectMap::ReleaseObject(v21, v31);
  _Unwind_Resume(a1);
}

BOOL HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(HALS_ReferenceStreamControlPropertyHandler *this, const HALS_Client *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 15) >= 2u)
  {
    exception = __cxa_allocate_exception(8uLL);
    void *exception = "HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData: unknown control type";
    __cxa_throw(exception, MEMORY[0x1E4FBA308], 0);
  }
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  uint64_t v4 = (HALS_ObjectMap *)v3;
  if (!v3)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v11 = 136315394;
      int v12 = "HALS_ReferenceStreamControlPropertyHandler.cpp";
      __int16 v13 = 1024;
      int v14 = 69;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData: owning device is missing", (uint8_t *)&v11, 0x12u);
    }
    BOOL v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v10 = off_1F148A5D8;
    _OWORD v10[2] = 560947818;
  }
  if (a2) {
    int v5 = *((_DWORD *)a2 + 4);
  }
  else {
    int v5 = 0;
  }
  BOOL ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(*(std::__shared_mutex_base **)(v3 + 440), v5);
  HALS_ObjectMap::ReleaseObject(v4, v7);
  return ReferenceStreamStateForClient;
}

void sub_1BAB3CBF4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void IOProcessorHookForDSP::Process(IOProcessorHookForDSP *this, __n128 a2, const unsigned __int8 *a3, unsigned __int8 *a4, int a5)
{
  if (*((unsigned char *)this + 24))
  {
    uint64_t v9 = *((void *)this + 7);
    if (v9)
    {
      BOOL v10 = (unsigned int *)*((void *)this + 21);
      uint64_t v11 = *v10;
      if (v11 != (unint64_t)(*((void *)this + 22) - (void)v10 - 8) >> 4) {
        __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
      }
      if (!v11) {
        goto LABEL_30;
      }
      *((void *)v10 + 2) = a4;
      void v10[3] = *((_DWORD *)this + 32) * a5;
      _OWORD v10[2] = *((_DWORD *)this + 33);
      int v12 = (uint64_t *)*((void *)this + 1);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = (unsigned int *)*((void *)this + 18);
      uint64_t v16 = v14 - v13;
      if (v14 != v13)
      {
        uint64_t v17 = *v15;
        if (v17 != (unint64_t)(*((void *)this + 19) - (void)v15 - 8) >> 4) {
          __assert_rtn("GetNumberBuffers", "CoreAudioBaseTypes.hpp", 1096, "GetAudioBufferList().mNumberBuffers == (mStorage.size() - kHeaderSize) / sizeof(AudioBuffer)");
        }
        uint64_t v18 = v16 >> 7;
        if ((unint64_t)(v16 >> 7) <= 1) {
          uint64_t v18 = 1;
        }
        char v19 = v15 + 4;
        while (v17)
        {
          if (v13 == *((void *)this + 2))
          {
            *char v19 = a3;
            *((_DWORD *)v19 - 1) = *((_DWORD *)this + 22) * a5;
            uint64_t v22 = (uint64_t)this + 92;
          }
          else
          {
            uint64_t v20 = *(void *)(v13 + 104);
            uint64_t v21 = *(unsigned int *)(v13 + 48);
            if (v20)
            {
              *char v19 = *(void *)(v13 + 32) + v21;
              *((_DWORD *)v19 - 1) = *(_DWORD *)(v20 + 48) * a5;
              uint64_t v22 = v20 + 52;
            }
            else
            {
              *char v19 = *(void *)(v13 + 16) + v21;
              *((_DWORD *)v19 - 1) = MEMORY[0x30] * a5;
              uint64_t v22 = 52;
            }
          }
          *((_DWORD *)v19 - 2) = *(_DWORD *)v22;
          v13 += 128;
          v19 += 2;
          --v17;
          if (!--v18) {
            goto LABEL_17;
          }
        }
LABEL_30:
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::out_of_range::out_of_range[abi:ne180100](exception, "accessing a CA::BufferList with an out-of-range index");
        __cxa_throw(exception, (struct type_info *)off_1E6230080, MEMORY[0x1E4FBA1D0]);
      }
LABEL_17:
      uint64_t v30 = v15;
      std::string v33 = v10;
      int v32 = a5;
      (*(void (**)(uint64_t, unsigned int **, unsigned int **, int *, __n128))(*(void *)v9 + 48))(v9, &v30, &v33, &v32, a2);
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v30, "com.apple.coreaudio", "AMCP");
      uint64_t v23 = (caulk::concurrent::messenger *)*((void *)v30 + 1);
      uint64_t v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      uint64_t v26 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
      *(_DWORD *)(v26 + 16) = 0;
      *(unsigned char *)(v26 + 20) = 2;
      *(_DWORD *)(v26 + 24) = v25;
      *(void *)(v26 + 32) = "HALS_IODSPInfo.cpp";
      *(_DWORD *)(v26 + 40) = 313;
      *(void *)(v26 + 48) = this;
      *(void *)uint64_t v26 = &unk_1F145F690;
      *(void *)(v26 + 8) = 0;
      caulk::concurrent::messenger::enqueue(v23, (caulk::concurrent::message *)v26);
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      size_t v27 = (*((_DWORD *)this + 22) * a5 * *((_DWORD *)this + 23));
      size_t v28 = (*((_DWORD *)this + 32) * a5 * *((_DWORD *)this + 33));
      if (v27 == v28)
      {
        memcpy(a4, a3, v27);
      }
      else
      {
        bzero(a4, v28);
      }
    }
  }
}

void sub_1BAB3CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<IOProcessorHookForDSP::Process(double,unsigned char const*,unsigned char *,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,IOProcessorHookForDSP*>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  int v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)BOOL v10 = 2080;
    *(void *)&_OWORD v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 2048;
    uint64_t v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d [hal_dsp] %p Fallback processing from custom IOProcessor hook without a DSP callback, may copy or silence output.", (uint8_t *)&v9, 0x22u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAB3D110(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<IOProcessorHookForDSP::Process(double,unsigned char const*,unsigned char *,unsigned int)::$_0,std::tuple<unsigned int,char const*,int,IOProcessorHookForDSP*>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

BOOL IOProcessorHookForDSP::Init(IOProcessorHookForDSP *this, const AudioStreamBasicDescription *a2, const AudioStreamBasicDescription *a3)
{
  long long v3 = *(_OWORD *)&a2->mSampleRate;
  long long v4 = *(_OWORD *)&a2->mBytesPerPacket;
  *((void *)this + 12) = *(void *)&a2->mBitsPerChannel;
  *((_OWORD *)this + 4) = v3;
  *((_OWORD *)this + 5) = v4;
  uint64_t v5 = *(void *)&a3->mBitsPerChannel;
  long long v6 = *(_OWORD *)&a3->mBytesPerPacket;
  *(_OWORD *)((char *)this + 104) = *(_OWORD *)&a3->mSampleRate;
  *((void *)this + 17) = v5;
  *(_OWORD *)((char *)this + 120) = v6;
  *(void *)&long long v6 = *((void *)this + 8);
  *(void *)&long long v4 = *((void *)this + 13);
  *((unsigned char *)this + 24) = *(double *)&v6 == *(double *)&v4;
  if (*(double *)&v6 != *(double *)&v4) {
    return 0;
  }
  unint64_t v8 = *(void *)(*((void *)this + 1) + 8) - **((void **)this + 1);
  unint64_t v9 = v8 >> 7;
  unint64_t v10 = (v8 >> 3) & 0xFFFFFFFF0 | 8;
  std::vector<char>::value_type __x = 0;
  __int16 v11 = (_DWORD *)*((void *)this + 18);
  int v12 = (_DWORD **)((char *)this + 144);
  unint64_t v13 = *((void *)this + 19) - (void)v11;
  if (v10 <= v13)
  {
    if (v10 < v13) {
      *((void *)this + 19) = (char *)v11 + v10;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 6, v10 - v13, &__x);
    __int16 v11 = *v12;
  }
  _DWORD *v11 = v9;
  uint64_t v15 = (_DWORD *)*((void *)this + 21);
  uint64_t v16 = *((void *)this + 22);
  std::vector<char>::value_type v19 = 0;
  unint64_t v17 = v16 - (void)v15;
  if (v17 > 0x17)
  {
    if (v17 != 24) {
      *((void *)this + 22) = v15 + 6;
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)this + 7, 24 - v17, &v19);
    uint64_t v15 = (_DWORD *)*((void *)this + 21);
  }
  *uint64_t v15 = 1;
  return *((unsigned char *)this + 24) != 0;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4 = __n;
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      unint64_t v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      std::vector<unsigned int>::pointer end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    int64_t v8 = end - this->__begin_;
    unint64_t v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = value - this->__begin_;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)operator new(v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v14 = &v12[v8];
    uint64_t v15 = &v12[v8 + v4];
    uint64_t v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    std::vector<char>::pointer begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        char v18 = *--end;
        *--uint64_t v14 = v18;
      }
      while (end != begin);
      std::vector<unsigned int>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
    {
      operator delete(end);
    }
  }
}

void IOProcessorHookForDSP::~IOProcessorHookForDSP(IOProcessorHookForDSP *this)
{
  IOProcessorHookForDSP::~IOProcessorHookForDSP(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void *v3;

  *(void *)this = &unk_1F145F648;
  int v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  long long v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  std::__function::__value_func<void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__value_func[abi:ne180100]((void *)this + 4);
}

void *std::__function::__value_func<void ()(AudioBufferList *,AudioBufferList *,unsigned int)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA488] + 104;
  *(void *)(a1 + 128) = MEMORY[0x1E4FBA488] + 104;
  uint64_t v3 = a1 + 16;
  uint64_t v4 = MEMORY[0x1E4FBA488] + 64;
  *(void *)(a1 + 16) = MEMORY[0x1E4FBA488] + 64;
  uint64_t v5 = (void *)MEMORY[0x1E4FBA408];
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA408] + 24);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA408] + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  int64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  uint64_t v9 = MEMORY[0x1E4FBA488] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  uint64_t v10 = v5[5];
  uint64_t v11 = v5[4];
  *(void *)(a1 + 16) = v11;
  *(void *)(v3 + *(void *)(v11 - 24)) = v10;
  uint64_t v12 = v5[1];
  *(void *)a1 = v12;
  *(void *)(a1 + *(void *)(v12 - 24)) = v5[6];
  *(void *)a1 = v9;
  *(void *)(a1 + 128) = v2;
  *(void *)(a1 + 16) = v4;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1BAB3D77C(_Unwind_Exception *a1)
{
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](v1);
  _Unwind_Resume(a1);
}

void CA::StreamDescription::AsString(CA::StreamDescription *this, void *a2, double a3, int16x8_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  unsigned int v6 = *((_DWORD *)a2 + 2);
  if (v6 == 1718773105)
  {
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, 'freq'", (uint64_t)this, *((unsigned int *)a2 + 7), *a2);
    return;
  }
  if (v6 != 1819304813) {
    goto LABEL_19;
  }
  if (*((_DWORD *)a2 + 5) != 1) {
    goto LABEL_19;
  }
  unsigned int v7 = *((_DWORD *)a2 + 6);
  if (v7 != *((_DWORD *)a2 + 4)) {
    goto LABEL_19;
  }
  unsigned int v8 = *((_DWORD *)a2 + 8);
  if (v7 < v8 >> 3) {
    goto LABEL_19;
  }
  uint64_t v9 = *((unsigned int *)a2 + 7);
  if (!v9) {
    goto LABEL_19;
  }
  unsigned int v10 = *((_DWORD *)a2 + 3);
  if ((v10 & 0x20) == 0)
  {
    BOOL v15 = v7 == v7 / v9 * v9;
    v7 /= v9;
    if (!v15) {
      goto LABEL_19;
    }
  }
  if ((v10 & 2) != 0 || 8 * v7 != v8) {
    goto LABEL_19;
  }
  if (v10)
  {
    if ((v10 & 0x1F84) == 0)
    {
      if (v7 == 4)
      {
        uint64_t v12 = 1;
        goto LABEL_163;
      }
      BOOL v15 = v7 == 8;
      BOOL v52 = v7 == 8;
      if (v15)
      {
        uint64_t v12 = 4 * v52;
        goto LABEL_163;
      }
    }
LABEL_19:
    uint64_t v13 = *((unsigned int *)a2 + 7);
    double v14 = *(double *)a2;
    if (v13) {
      BOOL v15 = 0;
    }
    else {
      BOOL v15 = v6 == 0;
    }
    if (v15 && v14 == 0.0)
    {
      caulk::make_string((caulk *)"%2u ch, %6.0f Hz", (uint64_t)this, 0, *a2);
      return;
    }
    a4.i32[0] = bswap32(v6);
    *(int8x8_t *)a4.i8 = vzip1_s8(*(int8x8_t *)a4.i8, *(int8x8_t *)&v14);
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    v17.i64[0] = 0x5F0000005FLL;
    v17.i64[1] = 0x5F0000005FLL;
    *(int8x8_t *)a4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v17, (uint32x4_t)vsraq_n_s32(v16, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)a4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)a4.i8, (int8x8_t)0x2E002E002E002ELL);
    *((unsigned char *)&v57.__r_.__value_.__s + 23) = 4;
    LODWORD(v57.__r_.__value_.__l.__data_) = vmovn_s16(a4).u32[0];
    v57.__r_.__value_.__s.__data_[4] = 0;
    caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s (0x%08X) ", (uint64_t)&v55, v13, *(void *)&v14, &v57, *((unsigned int *)a2 + 3));
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
    int v18 = *((_DWORD *)a2 + 2);
    if (v18 <= 1819304812)
    {
      if (v18 != 1634492771 && v18 != 1634497332 && v18 != 1718378851)
      {
LABEL_70:
        caulk::make_string((caulk *)"%u bits/channel, %u bytes/packet, %u frames/packet, %u bytes/frame", (uint64_t)&v57, *((unsigned int *)a2 + 8), *((unsigned int *)a2 + 4), *((unsigned int *)a2 + 5), *((unsigned int *)a2 + 6));
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v30 = &v55;
        }
        else {
          uint64_t v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
        }
        if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v55.__r_.__value_.__l.__size_;
        }
LABEL_62:
        int v32 = std::string::insert(&v57, 0, (const std::string::value_type *)v30, size);
        long long v33 = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        *((void *)this + 2) = *((void *)&v32->__r_.__value_.__l + 2);
        *(_OWORD *)this = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        if ((SHIBYTE(v57.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_65;
        }
        int v34 = (void *)v57.__r_.__value_.__r.__words[0];
LABEL_64:
        operator delete(v34);
LABEL_65:
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v55.__r_.__value_.__l.__data_);
        }
        return;
      }
LABEL_45:
      uint64_t v27 = *((unsigned int *)a2 + 3);
      if ((v27 - 1) < 4 || !v27 && (v18 == 1634497332 || v18 == 1936487278 || v18 == 1936487267))
      {
        caulk::make_string((caulk *)"from %u-bit source, ", (uint64_t)&v57, CA::StreamDescription::AsString(void)const::kSourceBits[v27]);
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v28 = &v57;
        }
        else {
          size_t v28 = (std::string *)v57.__r_.__value_.__r.__words[0];
        }
        if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v29 = HIBYTE(v57.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v29 = v57.__r_.__value_.__l.__size_;
        }
        std::string::append(&v55, (const std::string::value_type *)v28, v29);
        if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v57.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        std::string::append(&v55, "from UNKNOWN source bit depth, ", 0x1FuLL);
      }
      caulk::make_string((caulk *)"%u frames/packet", (uint64_t)&v57, *((unsigned int *)a2 + 5));
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v55;
      }
      else {
        uint64_t v30 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v55.__r_.__value_.__l.__size_;
      }
      goto LABEL_62;
    }
    if (v18 == 1936487278 || v18 == 1936487267) {
      goto LABEL_45;
    }
    if (v18 != 1819304813) {
      goto LABEL_70;
    }
    unsigned int v19 = *((_DWORD *)a2 + 3);
    unsigned int v20 = *((_DWORD *)a2 + 6);
    int v21 = v19 & 0x20;
    uint64_t v22 = "";
    if (!v20) {
      goto LABEL_37;
    }
    if ((v19 & 0x20) != 0)
    {
      unsigned int v23 = 1;
    }
    else
    {
      unsigned int v23 = *((_DWORD *)a2 + 7);
      if (!v23)
      {
        int v21 = 0;
LABEL_37:
        uint64_t v24 = " signed";
        if ((v19 & 4) == 0) {
          uint64_t v24 = " unsigned";
        }
        if (v19) {
          mach_port_t v25 = "float";
        }
        else {
          mach_port_t v25 = "integer";
        }
        if (v19) {
          uint64_t v26 = "";
        }
        else {
          uint64_t v26 = v24;
        }
LABEL_102:
        v57.__r_.__value_.__s.__data_[0] = 0;
        if (v21) {
          int v39 = ", deinterleaved";
        }
        else {
          int v39 = "";
        }
        uint64_t v36 = "";
        uint64_t v40 = "";
        goto LABEL_106;
      }
    }
    int v35 = v20 / v23;
    if (v20 / v23 < 2)
    {
      __int16 v38 = " signed";
      if ((v19 & 4) == 0) {
        __int16 v38 = " unsigned";
      }
      if (v19) {
        mach_port_t v25 = "float";
      }
      else {
        mach_port_t v25 = "integer";
      }
      if (v19) {
        uint64_t v26 = "";
      }
      else {
        uint64_t v26 = v38;
      }
      if (v23 > v20) {
        goto LABEL_102;
      }
      int v35 = 1;
      uint64_t v36 = "";
    }
    else
    {
      if ((v19 & 2) != 0) {
        uint64_t v36 = " big-endian";
      }
      else {
        uint64_t v36 = " little-endian";
      }
      uint64_t v37 = " unsigned";
      if ((v19 & 4) != 0) {
        uint64_t v37 = " signed";
      }
      if (v19) {
        mach_port_t v25 = "float";
      }
      else {
        mach_port_t v25 = "integer";
      }
      if (v19) {
        uint64_t v26 = "";
      }
      else {
        uint64_t v26 = v37;
      }
    }
    unsigned int v41 = *((_DWORD *)a2 + 7);
    if ((v19 & 0x20) != 0) {
      unsigned int v42 = 1;
    }
    else {
      unsigned int v42 = *((_DWORD *)a2 + 7);
    }
    if (v42) {
      unsigned int v42 = 8 * (v20 / v42);
    }
    if (v42 == *((_DWORD *)a2 + 8))
    {
      v57.__r_.__value_.__s.__data_[0] = 0;
    }
    else
    {
      if ((v19 & 8) != 0) {
        __int16 v43 = "";
      }
      else {
        __int16 v43 = "un";
      }
      snprintf((char *)&v57, 0x20uLL, "%spacked in %u bytes", v43, v35);
      unsigned int v20 = *((_DWORD *)a2 + 6);
      unsigned int v19 = *((_DWORD *)a2 + 3);
      if (!v20)
      {
        unsigned int v44 = 0;
        int v21 = *((_DWORD *)a2 + 3) & 0x20;
        goto LABEL_128;
      }
      unsigned int v41 = *((_DWORD *)a2 + 7);
      int v21 = *((_DWORD *)a2 + 3) & 0x20;
    }
    if (v21) {
      unsigned int v44 = 1;
    }
    else {
      unsigned int v44 = v41;
    }
    if (v44) {
      unsigned int v44 = 8 * (v20 / v44);
    }
LABEL_128:
    int v45 = *((_DWORD *)a2 + 8);
    __int16 v46 = " high-aligned";
    if ((v19 & 0x10) == 0) {
      __int16 v46 = " low-aligned";
    }
    if ((v45 & 7) == 0 && v44 == v45) {
      uint64_t v40 = "";
    }
    else {
      uint64_t v40 = v46;
    }
    if (v21) {
      int v39 = ", deinterleaved";
    }
    else {
      int v39 = "";
    }
    if (v57.__r_.__value_.__s.__data_[0])
    {
      uint64_t v22 = ", ";
LABEL_141:
      if (((v19 >> 7) & 0x3F) != 0) {
        snprintf(__str, 0x14uLL, "%u.%u");
      }
      else {
        snprintf(__str, 0x14uLL, "%u");
      }
      caulk::make_string((caulk *)"%s-bit%s%s %s%s%s%s%s", (uint64_t)&v54, __str, v36, v26, v25, v22, &v57, v40, v39);
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v48 = &v55;
      }
      else {
        int v48 = (std::string *)v55.__r_.__value_.__r.__words[0];
      }
      if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = v55.__r_.__value_.__l.__size_;
      }
      uint64_t v50 = std::string::insert(&v54, 0, (const std::string::value_type *)v48, v49);
      long long v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
      *((void *)this + 2) = *((void *)&v50->__r_.__value_.__l + 2);
      *(_OWORD *)this = v51;
      v50->__r_.__value_.__l.__size_ = 0;
      v50->__r_.__value_.__r.__words[2] = 0;
      v50->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v54.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_65;
      }
      int v34 = (void *)v54.__r_.__value_.__r.__words[0];
      goto LABEL_64;
    }
LABEL_106:
    if (*v40) {
      uint64_t v22 = ", ";
    }
    goto LABEL_141;
  }
  if ((v10 & 4) == 0) {
    goto LABEL_19;
  }
  int v11 = (v10 >> 7) & 0x3F;
  if (v11 != 24 || v7 != 4)
  {
    if (!v11 && v7 == 4)
    {
      uint64_t v12 = 5;
      goto LABEL_163;
    }
    if (!v11 && v7 == 2)
    {
      uint64_t v12 = 2;
      goto LABEL_163;
    }
    goto LABEL_19;
  }
  uint64_t v12 = 3;
LABEL_163:
  if ((v10 & 0x20) != 0) {
    uint64_t v53 = ", deinterleaved";
  }
  else {
    uint64_t v53 = ", interleaved";
  }
  if (v9 <= 1) {
    uint64_t v53 = "";
  }
  caulk::make_string((caulk *)"%2u ch, %6.0f Hz, %s%s", (uint64_t)this, v9, *a2, *((void *)&off_1E62309E0 + v12), v53);
}

void sub_1BAB3DED4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x1E4FBA408];
  uint64_t v3 = *MEMORY[0x1E4FBA408];
  *(void *)a1 = *MEMORY[0x1E4FBA408];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x1E4FBA470] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](a1 + 128);
  return a1;
}

__n128 HALS_IODSPInfo::GetClientFormat(HALS_IODSPInfo *this, uint64_t *a2)
{
  if (a2[1] == *a2) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = *a2;
  }
  uint64_t v3 = a2 + 25;
  if (*((unsigned char *)a2 + 240)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = v2 == 0;
  }
  if (!v4)
  {
    long long v5 = *(_OWORD *)(v2 + 56);
    long long v6 = *(_OWORD *)(v2 + 72);
    a2[29] = *(void *)(v2 + 88);
    *(_OWORD *)uint64_t v3 = v5;
    *(_OWORD *)(a2 + 27) = v6;
    *((unsigned char *)a2 + 240) = 1;
  }
  {
    double v14 = this;
    uint64_t v12 = a2 + 25;
    uint64_t v13 = a2;
    uint64_t v3 = v12;
    a2 = v13;
    int v11 = v10;
    this = v14;
    if (v11)
    {
      HALS_IODSPInfo::GetClientFormat(void)const::kDummyFormat = 0x40E5888000000000;
      *(_OWORD *)algn_1E9F78B20 = xmmword_1BAFF93E0;
      *(_OWORD *)&algn_1E9F78B20[16] = xmmword_1BAFF93F0;
      uint64_t v3 = v12;
      a2 = v13;
      this = v14;
    }
  }
  if (*((unsigned char *)a2 + 240)) {
    unsigned int v7 = v3;
  }
  else {
    unsigned int v7 = &HALS_IODSPInfo::GetClientFormat(void)const::kDummyFormat;
  }
  __n128 result = *(__n128 *)v7;
  long long v9 = *((_OWORD *)v7 + 1);
  *(_OWORD *)this = *(_OWORD *)v7;
  *((_OWORD *)this + 1) = v9;
  *((void *)this + 4) = v7[4];
  return result;
}

void HALS_IODSPInfo::AddStream(char **a1, long long *a2)
{
  BOOL v4 = a1[1];
  unint64_t v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v13 = (v4 - *a1) >> 7;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 57) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = v5 - (void)*a1;
    if (v15 >> 6 > v14) {
      unint64_t v14 = v15 >> 6;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v16 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IODSPInfo::EngineStreamInfo>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    int v18 = (char *)(v16 + (v13 << 7));
    unint64_t v19 = v16 + (v17 << 7);
    long long v20 = *a2;
    long long v21 = a2[1];
    long long v22 = a2[3];
    *((_OWORD *)v18 + 2) = a2[2];
    *((_OWORD *)v18 + 3) = v22;
    *(_OWORD *)int v18 = v20;
    *((_OWORD *)v18 + 1) = v21;
    long long v23 = a2[4];
    long long v24 = a2[5];
    long long v25 = a2[7];
    *((_OWORD *)v18 + 6) = a2[6];
    *((_OWORD *)v18 + 7) = v25;
    *((_OWORD *)v18 + 4) = v23;
    *((_OWORD *)v18 + 5) = v24;
    uint64_t v12 = v18 + 128;
    uint64_t v27 = *a1;
    uint64_t v26 = a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 8);
        long long v29 = *((_OWORD *)v26 - 7);
        long long v30 = *((_OWORD *)v26 - 5);
        *((_OWORD *)v18 - 6) = *((_OWORD *)v26 - 6);
        *((_OWORD *)v18 - 5) = v30;
        *((_OWORD *)v18 - 8) = v28;
        *((_OWORD *)v18 - 7) = v29;
        long long v31 = *((_OWORD *)v26 - 4);
        long long v32 = *((_OWORD *)v26 - 3);
        long long v33 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v18 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v18 - 1) = v33;
        *((_OWORD *)v18 - 4) = v31;
        *((_OWORD *)v18 - 3) = v32;
        v18 -= 128;
        v26 -= 128;
      }
      while (v26 != v27);
      uint64_t v26 = *a1;
    }
    *a1 = v18;
    a1[1] = v12;
    a1[2] = (char *)v19;
    if (v26) {
      operator delete(v26);
    }
  }
  else
  {
    long long v6 = *a2;
    long long v7 = a2[1];
    long long v8 = a2[3];
    *((_OWORD *)v4 + 2) = a2[2];
    *((_OWORD *)v4 + 3) = v8;
    *(_OWORD *)BOOL v4 = v6;
    *((_OWORD *)v4 + 1) = v7;
    long long v9 = a2[4];
    long long v10 = a2[5];
    long long v11 = a2[7];
    *((_OWORD *)v4 + 6) = a2[6];
    *((_OWORD *)v4 + 7) = v11;
    *((_OWORD *)v4 + 4) = v9;
    *((_OWORD *)v4 + 5) = v10;
    uint64_t v12 = v4 + 128;
  }
  a1[1] = v12;
  int v34 = a1[19];
  int v35 = a1[20];
  unint64_t v36 = v12 - *a1;
  unint64_t v37 = (v36 >> 3) & 0xFFFFFFFF0 | 8;
  std::vector<char>::value_type __x = 0;
  unint64_t v38 = v35 - v34;
  if (v37 <= v38)
  {
    if (v37 < v38) {
      a1[20] = &v34[v37];
    }
  }
  else
  {
    std::vector<char>::__append((std::vector<char> *)(a1 + 19), v37 - v38, &__x);
    int v34 = a1[19];
  }
  *(_DWORD *)int v34 = v36 >> 7;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<HALS_IODSPInfo::EngineStreamInfo>>(unint64_t a1)
{
  if (a1 >> 57) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a1 << 7);
}

uint64_t CAVolumeCurve::GetMaximumRaw(CAVolumeCurve *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0;
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CARawPoint,CADBPoint>,std::__tree_node<std::__value_type<CARawPoint,CADBPoint>,void *> *,long>>>(&v3, (int)v1 - 1);
  return *((unsigned int *)v3 + 8);
}

void **std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CARawPoint,CADBPoint>,std::__tree_node<std::__value_type<CARawPoint,CADBPoint>,void *> *,long>>>(void **result, uint64_t a2)
{
  if (a2 < 0)
  {
    long long v7 = *result;
    do
    {
      long long v8 = (void *)*v7;
      if (*v7)
      {
        do
        {
          BOOL v4 = v8;
          long long v8 = (void *)v8[1];
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v4 = (void *)v7[2];
          BOOL v5 = *v4 == (void)v7;
          long long v7 = v4;
        }
        while (v5);
      }
      long long v7 = v4;
    }
    while (!__CFADD__(a2++, 1));
  }
  else
  {
    if (!a2) {
      return result;
    }
    uint64_t v2 = *result;
    do
    {
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          BOOL v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          BOOL v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (a2-- > 1);
  }
  *__n128 result = v4;
  return result;
}

double CAVolumeCurve::GetMaximumDB(CAVolumeCurve *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (!v1) {
    return 0.0;
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  std::__advance[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CARawPoint,CADBPoint>,std::__tree_node<std::__value_type<CARawPoint,CADBPoint>,void *> *,long>>>(&v3, (int)v1 - 1);
  LODWORD(result) = *((_DWORD *)v3 + 10);
  return result;
}

void CAVolumeCurve::AddRange(CAVolumeCurve *this, signed int a2, signed int a3, double a4, float a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v6 = (uint64_t **)((char *)this + 8);
  BOOL v5 = (uint64_t **)*((void *)this + 1);
  long long v7 = (uint64_t **)((char *)this + 16);
  if (v5 == (uint64_t **)((char *)this + 16)) {
    goto LABEL_26;
  }
  do
  {
    int v8 = *((_DWORD *)v5 + 7);
    BOOL v9 = *((_DWORD *)v5 + 8) > a2 && v8 < a3;
    char v10 = v9;
    if (v9 || v8 <= a2)
    {
      uint64_t v12 = v5;
    }
    else
    {
      long long v11 = v5[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = (uint64_t **)v11;
          long long v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (uint64_t **)v5[2];
          BOOL v13 = *v12 == (uint64_t *)v5;
          BOOL v5 = v12;
        }
        while (!v13);
      }
    }
    if (v12 == v7) {
      char v14 = 1;
    }
    else {
      char v14 = v10;
    }
    if (v14) {
      break;
    }
    BOOL v5 = v12;
  }
  while (v8 > a2);
  if ((v10 & 1) == 0)
  {
LABEL_26:
    uint64_t v15 = *v7;
    unint64_t v16 = (uint64_t **)((char *)this + 16);
    if (*v7)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v16 = (uint64_t **)v15;
          int v17 = *((_DWORD *)v15 + 7);
          if (v17 <= a2) {
            break;
          }
          uint64_t v15 = *v16;
          long long v7 = v16;
          if (!*v16) {
            goto LABEL_33;
          }
        }
        if (v17 >= a2) {
          break;
        }
        uint64_t v15 = v16[1];
        if (!v15)
        {
          long long v7 = v16 + 1;
          goto LABEL_33;
        }
      }
    }
    else
    {
LABEL_33:
      *((float *)&a4 + 1) = a5;
      double v19 = a4;
      unint64_t v20 = __PAIR64__(a3, a2);
      int v18 = (uint64_t *)operator new(0x30uLL);
      *(uint64_t *)((char *)v18 + 28) = v20;
      *(double *)((char *)v18 + 36) = v19;
      std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v6, (uint64_t)v16, v7, v18);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
    long long v22 = "CAVolumeCurve.cpp";
    __int16 v23 = 1024;
    int v24 = 214;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  CAVolumeCurve::AddRange: new point overlaps", buf, 0x12u);
  }
}

uint64_t CAVolumeCurve::ConvertDBToRaw(CAVolumeCurve *this, float a2)
{
  if (*((void *)this + 3)) {
    float v4 = *(float *)(*((void *)this + 1) + 36);
  }
  else {
    float v4 = 0.0;
  }
  double MaximumDB = CAVolumeCurve::GetMaximumDB(this);
  if (v4 <= a2) {
    float v6 = a2;
  }
  else {
    float v6 = v4;
  }
  if (v6 <= *(float *)&MaximumDB) {
    *(float *)&double MaximumDB = v6;
  }
  long long v7 = (void *)*((void *)this + 1);
  uint64_t result = *((unsigned int *)v7 + 7);
  if (v7 != (void *)((char *)this + 16))
  {
    do
    {
      int v9 = *((_DWORD *)v7 + 8) - *((_DWORD *)v7 + 7);
      float v10 = *((float *)v7 + 10);
      if (*(float *)&MaximumDB > v10)
      {
        uint64_t result = (v9 + result);
      }
      else
      {
        unsigned int v11 = llroundf((float)(*(float *)&MaximumDB - *((float *)v7 + 9))/ (float)((float)(v10 - *((float *)v7 + 9)) / (float)v9));
        BOOL v12 = __OFADD__(result, v11);
        unsigned int v13 = result + v11;
        unsigned int v14 = ((int)(result | v11) >> 31) ^ 0x7FFFFFFF;
        if (v12) {
          uint64_t result = v14;
        }
        else {
          uint64_t result = v13;
        }
      }
      uint64_t v15 = (void *)v7[1];
      if (v15)
      {
        do
        {
          unint64_t v16 = v15;
          uint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unint64_t v16 = (void *)v7[2];
          BOOL v17 = *v16 == (void)v7;
          long long v7 = v16;
        }
        while (!v17);
      }
      BOOL v17 = *(float *)&MaximumDB <= v10 || v16 == (void *)((char *)this + 16);
      long long v7 = v16;
    }
    while (!v17);
  }
  return result;
}

uint64_t CAVolumeCurve::ConvertRawToDB(CAVolumeCurve *this, int a2)
{
  if (*((void *)this + 3)) {
    int v4 = *(_DWORD *)(*((void *)this + 1) + 28);
  }
  else {
    int v4 = 0;
  }
  uint64_t result = CAVolumeCurve::GetMaximumRaw(this);
  if (v4 <= a2) {
    int v6 = a2;
  }
  else {
    int v6 = v4;
  }
  if (v6 >= (int)result) {
    int v6 = result;
  }
  int v7 = v6 - v4;
  int v8 = (float *)*((void *)this + 1);
  float v9 = v8[9];
  float v10 = (float *)((char *)this + 16);
  BOOL v11 = v7 < 1 || v8 == v10;
  if (!v11)
  {
    do
    {
      int v12 = *((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 7);
      if (v7 >= v12) {
        int v13 = *((_DWORD *)v8 + 8) - *((_DWORD *)v8 + 7);
      }
      else {
        int v13 = v7;
      }
      unsigned int v14 = (float *)*((void *)v8 + 1);
      uint64_t v15 = v8;
      if (v14)
      {
        do
        {
          unint64_t v16 = v14;
          unsigned int v14 = *(float **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v16 = (float *)*((void *)v15 + 2);
          BOOL v11 = *(void *)v16 == (void)v15;
          uint64_t v15 = v16;
        }
        while (!v11);
      }
      float v9 = v9 + (float)((float)v13 * (float)((float)(v8[10] - v8[9]) / (float)v12));
      v7 -= v13;
      if (v7 < 1) {
        break;
      }
      int v8 = v16;
    }
    while (v16 != v10);
  }
  return result;
}

float CAVolumeCurve::ConvertRawToScalar(CAVolumeCurve *this, int a2)
{
  if (*((void *)this + 3)) {
    int v4 = *(_DWORD *)(*((void *)this + 1) + 28);
  }
  else {
    int v4 = 0;
  }
  int MaximumRaw = CAVolumeCurve::GetMaximumRaw(this);
  if (v4 <= a2) {
    int v6 = a2;
  }
  else {
    int v6 = v4;
  }
  if (v6 >= MaximumRaw) {
    int v6 = MaximumRaw;
  }
  float v7 = (float)(v6 - v4) / (float)(MaximumRaw - v4);
  if (!CAVolumeCurve::GetIsApplyingTransferFunction(this)) {
    return v7;
  }
  float v8 = *((float *)this + 10) / *((float *)this + 11);

  return powf(v7, v8);
}

BOOL CAVolumeCurve::GetIsApplyingTransferFunction(CAVolumeCurve *this)
{
  if (*((void *)this + 3)) {
    float v2 = *(float *)(*((void *)this + 1) + 36);
  }
  else {
    float v2 = 0.0;
  }
  double MaximumDB = CAVolumeCurve::GetMaximumDB(this);
  return (float)(*(float *)&MaximumDB - v2) > 30.0 && *((unsigned char *)this + 32) != 0;
}

uint64_t CAVolumeCurve::ConvertScalarToRaw(CAVolumeCurve *this, float a2)
{
  float v3 = fmaxf(a2, 0.0);
  if (*((void *)this + 3)) {
    int v4 = *(_DWORD *)(*((void *)this + 1) + 28);
  }
  else {
    int v4 = 0;
  }
  float v5 = fminf(v3, 1.0);
  int MaximumRaw = CAVolumeCurve::GetMaximumRaw(this);
  if (CAVolumeCurve::GetIsApplyingTransferFunction(this)) {
    float v5 = powf(v5, *((float *)this + 11) / *((float *)this + 10));
  }
  unsigned int v7 = llroundf(v5 * (float)(MaximumRaw - v4));
  BOOL v8 = __OFADD__(v4, v7);
  unsigned int v9 = v4 + v7;
  unsigned int v10 = ((int)(v4 | v7) >> 31) ^ 0x7FFFFFFF;
  if (v8) {
    return v10;
  }
  else {
    return v9;
  }
}

uint64_t std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    float v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    float v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  return a1;
}

void AMCP::DAL::DAL_Time_Range::~DAL_Time_Range(AMCP::DAL::DAL_Time_Range *this)
{
  float v2 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  float v3 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void AMCP::DAL::Synchronizer_Source::receive_data(AMCP::DAL::Synchronizer_Source *this, const AMCP::DAL::DAL_Time_Range *a2)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  int v4 = (char *)this + 280;
  host_time = (AMCP::Log::Scope_Registry *)AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::Synchronizer_Source *)((char *)this + 280));
  if (!host_time)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v28 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      long long v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 48;
      LOWORD(v52) = 2080;
      *(void *)((char *)&v52 + 2) = "not (is_anchored())";
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data on unanchored source", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::receive_data on unanchored source", (uint64_t)&v42);
    std::logic_error::logic_error(&v43, &v42);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v44, &v43);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    int v49 = -1;
    v44.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v45 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *((void *)&v52 + 1) = "void AMCP::DAL::Synchronizer_Source::receive_data(const DAL_Time_Range &)";
    *(void *)&long long v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v53) = 48;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    long long v40 = v37;
    uint64_t v41 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    int v39 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (*((unsigned char *)this + 136))
  {
    AMCP::Log::Scope_Registry::get(host_time);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v31 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      long long v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v33;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 49;
      LOWORD(v52) = 2080;
      *(void *)((char *)&v52 + 2) = "not (not m_removal_pending)";
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data on removed source", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::receive_data on removed source", (uint64_t)&v42);
    std::logic_error::logic_error(&v43, &v42);
    v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v44, &v43);
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    int v49 = -1;
    v44.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v45 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
    *((void *)&v52 + 1) = "void AMCP::DAL::Synchronizer_Source::receive_data(const DAL_Time_Range &)";
    *(void *)&long long v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v53) = 49;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    long long v40 = v37;
    uint64_t v41 = v38;
    long long v37 = 0uLL;
    uint64_t v38 = 0;
    int v39 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!*((unsigned char *)this + 184))
  {
    int v6 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::Synchronizer_Source *)((char *)this + 56), (AMCP::DAL::Synchronizer_Source *)((char *)this + 96))? (AMCP::DAL::Synchronizer_Source *)((char *)this + 96): (AMCP::DAL::DAL_Time *)v4;
    BOOL v7 = AMCP::DAL::DAL_Time::operator==(a2, v6);
    if (!v7)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v34 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        int v35 = pthread_self();
        mach_port_t v36 = pthread_mach_thread_np(v35);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Synchronizer.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = 50;
        LOWORD(v52) = 2080;
        *(void *)((char *)&v52 + 2) = "not (m_did_overload or range_is_continuous(range_to_commit))";
        _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data not contiguous", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Synchronizer::receive_data not contiguous", (uint64_t)&v42);
      std::logic_error::logic_error(&v43, &v42);
      v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v44, &v43);
      uint64_t v46 = 0;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      int v49 = -1;
      v44.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      int v45 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
      *((void *)&v52 + 1) = "void AMCP::DAL::Synchronizer_Source::receive_data(const DAL_Time_Range &)";
      *(void *)&long long v53 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
      DWORD2(v53) = 50;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
      long long v40 = v37;
      uint64_t v41 = v38;
      long long v37 = 0uLL;
      uint64_t v38 = 0;
      int v39 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::Synchronizer_Source *)((char *)this + 56), (AMCP::DAL::Synchronizer_Source *)((char *)this + 96))&& round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::Synchronizer_Source *)((char *)this + 56))) == 0.0)
  {
    *((_DWORD *)this + 14) = *(_DWORD *)a2;
    *((void *)this + 8) = *((void *)a2 + 1);
    *((void *)this + 9) = *((void *)a2 + 2);
    uint64_t v9 = *((void *)a2 + 3);
    uint64_t v8 = *((void *)a2 + 4);
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    unsigned int v10 = (std::__shared_weak_count *)*((void *)this + 11);
    *((void *)this + 10) = v9;
    *((void *)this + 11) = v8;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    *((_DWORD *)this + 24) = *((_DWORD *)a2 + 10);
    *((void *)this + 13) = *((void *)a2 + 6);
    *((void *)this + 14) = *((void *)a2 + 7);
    uint64_t v12 = *((void *)a2 + 8);
    uint64_t v11 = *((void *)a2 + 9);
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    int v13 = (std::__shared_weak_count *)*((void *)this + 16);
    *((void *)this + 15) = v12;
    *((void *)this + 16) = v11;
    if (!v13) {
      goto LABEL_26;
    }
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_26;
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::Synchronizer_Source *)((char *)this + 96), (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40)))
  {
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (AMCP::DAL::Synchronizer_Source *)((char *)this + 56), (const AMCP::DAL::DAL_Time_Range *)((char *)a2 + 40));
    *(_OWORD *)((char *)this + 56) = *(_OWORD *)buf;
    *((void *)this + 9) = *(void *)&buf[16];
    long long v14 = v52;
    long long v52 = 0uLL;
    uint64_t v15 = (std::__shared_weak_count *)*((void *)this + 11);
    *((_OWORD *)this + 5) = v14;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    *((_OWORD *)this + 6) = v53;
    *((void *)this + 14) = v54;
    long long v16 = v55;
    long long v55 = 0uLL;
    BOOL v17 = (std::__shared_weak_count *)*((void *)this + 16);
    *(_OWORD *)((char *)this + 120) = v16;
    if (v17)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      if (*((void *)&v55 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v55 + 1));
      }
    }
    int v13 = (std::__shared_weak_count *)*((void *)&v52 + 1);
    if (*((void *)&v52 + 1)) {
      goto LABEL_25;
    }
  }
LABEL_26:
  if (*((unsigned char *)this + 272))
  {
    *((_DWORD *)this + 48) = *(_DWORD *)a2;
    *((void *)this + 25) = *((void *)a2 + 1);
    *((void *)this + 26) = *((void *)a2 + 2);
    uint64_t v19 = *((void *)a2 + 3);
    uint64_t v18 = *((void *)a2 + 4);
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v20 = (std::__shared_weak_count *)*((void *)this + 28);
    *((void *)this + 27) = v19;
    *((void *)this + 28) = v18;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    *((_DWORD *)this + 58) = *((_DWORD *)a2 + 10);
    *((void *)this + 30) = *((void *)a2 + 6);
    *((void *)this + 31) = *((void *)a2 + 7);
    uint64_t v22 = *((void *)a2 + 8);
    uint64_t v21 = *((void *)a2 + 9);
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    __int16 v23 = (std::__shared_weak_count *)*((void *)this + 33);
    *((void *)this + 32) = v22;
    *((void *)this + 33) = v21;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
  }
  else
  {
    long long v24 = *(_OWORD *)a2;
    *((void *)this + 26) = *((void *)a2 + 2);
    *((_OWORD *)this + 12) = v24;
    *((void *)this + 27) = *((void *)a2 + 3);
    uint64_t v25 = *((void *)a2 + 4);
    *((void *)this + 28) = v25;
    if (v25) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v25 + 8), 1uLL, memory_order_relaxed);
    }
    long long v26 = *(_OWORD *)((char *)a2 + 40);
    *((void *)this + 31) = *((void *)a2 + 7);
    *(_OWORD *)((char *)this + 232) = v26;
    *((void *)this + 32) = *((void *)a2 + 8);
    uint64_t v27 = *((void *)a2 + 9);
    *((void *)this + 33) = v27;
    if (v27) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 8), 1uLL, memory_order_relaxed);
    }
    *((unsigned char *)this + 272) = 1;
  }
  *((unsigned char *)this + 184) = 0;
}

void sub_1BAB3F2F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl((uint64_t)&a35);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v36) {
    __cxa_free_exception(v35);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a34);
  _Unwind_Resume(a1);
}

void std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80))
  {
    float v2 = *(std::__shared_weak_count **)(a1 + 72);
    if (v2) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v2);
    }
    float v3 = *(std::__shared_weak_count **)(a1 + 32);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==(uint64_t a1, uint64_t a2)
{
  int v4 = (AMCP::DAL::DAL_Time *)(a2 + 40);
  if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)(a2 + 40))) {
    return !AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a1, (AMCP::DAL::DAL_Time *)(a1 + 40));
  }
  BOOL result = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)a1);
  if (result)
  {
    return AMCP::DAL::DAL_Time::operator==(v4, (AMCP::DAL::DAL_Time *)(a1 + 40));
  }
  return result;
}

void std::vector<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  float v2 = **a1;
  if (v2)
  {
    int v4 = v1[1];
    float v5 = v2;
    if (v4 != v2)
    {
      do
        int v4 = std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__value_func[abi:ne180100](v4 - 4);
      while (v4 != v2);
      float v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::~__hash_table(uint64_t a1)
{
  float v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      float v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::DAL::Source_ID const,AMCP::DAL::Synchronizer_Source>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      float v2 = v3;
    }
    while (v3);
  }
  int v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<AMCP::DAL::Source_ID const,AMCP::DAL::Synchronizer_Source>,0>(uint64_t a1)
{
  float v2 = *(std::__shared_weak_count **)(a1 + 360);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100](a1 + 240);
  float v3 = *(std::__shared_weak_count **)(a1 + 224);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 176);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  float v5 = *(std::__shared_weak_count **)(a1 + 136);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    int v6 = *(void **)(a1 + 8);
    operator delete(v6);
  }
}

void *std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__value_func[abi:ne180100](void *a1)
{
  float v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::DAL::Synchronizer::Synchronizer(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = *a2;
  uint64_t v3 = a2[1];
  *(void *)(a1 + 56) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = (AMCP::DAL::DAL_Time_Range *)(a1 + 64);
  *(void *)&long long v5 = *a2;
  int v6 = (std::__shared_weak_count *)a2[1];
  *(void *)&long long v7 = *a2;
  *((void *)&v7 + 1) = v6;
  if (v6)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = (std::__shared_weak_count *)a2[1];
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 2;
    long long v31 = 0uLL;
    long long v32 = v7;
    *(void *)&long long v5 = *a2;
    *((void *)&v5 + 1) = v8;
    BOOL v9 = v8 == 0;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v8 = 0;
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 2;
    long long v31 = 0uLL;
    long long v32 = (unint64_t)v7;
    BOOL v9 = 1;
    *((void *)&v5 + 1) = 0;
  }
  LODWORD(v24.__vftable) = 2;
  v24.__imp_.__imp_ = 0;
  uint64_t v25 = 0;
  long long v26 = v5;
  unsigned int v10 = AMCP::DAL::DAL_Time_Range::DAL_Time_Range(v4, (const AMCP::DAL::DAL_Time *)buf, (const AMCP::DAL::DAL_Time *)&v24);
  if (!v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v11 = *(void *)(a1 + 48);
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 1;
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v13 = **(NSObject ***)buf;
    if ((void)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v31);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      long long v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      LOWORD(v31) = 2080;
      *(void *)((char *)&v31 + 2) = "Synchronizer.cpp";
      WORD5(v31) = 1024;
      HIDWORD(v31) = 124;
      LOWORD(v32) = 2080;
      *(void *)((char *)&v32 + 2) = "not (m_timebase)";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v22);
    std::logic_error::logic_error(&v23, &v22);
    v23.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v24, &v23);
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    int v28 = -1;
    v24.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v25 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v24);
    *((void *)&v32 + 1) = "AMCP::DAL::Synchronizer::Synchronizer(const Timebase_Ref &)";
    mach_port_t v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    int v34 = 124;
    std::vector<void *>::vector(&v17);
    int v16 = backtrace((void **)v17, (*((void *)&v17 + 1) - (void)v17) >> 3);
    std::vector<void *>::resize((char **)&v17, v16);
    long long v20 = v17;
    uint64_t v21 = v18;
    long long v17 = 0uLL;
    uint64_t v18 = 0;
    uint64_t v19 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return a1;
}

void sub_1BAB3FAF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  std::vector<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
  long long v40 = (std::__shared_weak_count *)v37[17];
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  uint64_t v41 = (std::__shared_weak_count *)v37[12];
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  std::string v42 = (std::__shared_weak_count *)v37[7];
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::~__hash_table(v38);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>(void *a1, _DWORD *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)(a2 + 2));
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = v7 & (*(void *)&v6 - 1);
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v13 == v7)
      {
        if (AMCP::DAL::Source_ID::operator==((uint64_t)(v12 + 2), a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v6) {
            v13 %= *(void *)&v6;
          }
        }
        else
        {
          v13 &= *(void *)&v6 - 1;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

{
  uint64_t v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  unint64_t v13;

  uint64_t v4 = *a2;
  unint64_t v5 = std::hash<AMCP::Terminal_Identifier>::operator()((uint64_t)(a2 + 2));
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = 0xC6A4A7935BD1E995
     * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v5) ^ ((0xC6A4A7935BD1E995 * v5) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v4) ^ ((0xC6A4A7935BD1E995 * v4) >> 47)) + 3864292196u))
     + 3864292196u;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  unint64_t v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v6) {
      unint64_t v10 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v10 = v7 & (*(void *)&v6 - 1);
  }
  uint64_t v11 = *(void **)(*a1 + 8 * v10);
  if (!v11) {
    return 0;
  }
  uint64_t v12 = (void *)*v11;
  if (*v11)
  {
    do
    {
      unint64_t v13 = v12[1];
      if (v7 == v13)
      {
        if (AMCP::DAL::Source_ID::operator==((uint64_t)(v12 + 2), a2)) {
          return v12;
        }
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(void *)&v6) {
            v13 %= *(void *)&v6;
          }
        }
        else
        {
          v13 &= *(void *)&v6 - 1;
        }
        if (v13 != v10) {
          return 0;
        }
      }
      uint64_t v12 = (void *)*v12;
    }
    while (v12);
  }
  return v12;
}

void AMCP::DAL::Synchronizer_Source::~Synchronizer_Source(AMCP::DAL::Synchronizer_Source *this)
{
  float v2 = (std::__shared_weak_count *)*((void *)this + 39);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 192);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 22);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

unint64_t std::hash<AMCP::Terminal_Identifier>::operator()(uint64_t a1)
{
  unint64_t v2 = boost::hash<std::string>::operator()((char *)a1);
  return 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * *(void *)(a1 + 24)) ^ ((0xC6A4A7935BD1E995 * *(void *)(a1 + 24)) >> 47))) ^ (0x35A98F4D286A90B9 * ((0xC6A4A7935BD1E995 * v2) ^ ((0xC6A4A7935BD1E995 * v2) >> 47)) + 3864292196u))
         + 3864292196u) ^ (0xC6A4A7935BD1E995
                         * ((0xC6A4A7935BD1E995 * *(unsigned int *)(a1 + 32)) ^ ((0xC6A4A7935BD1E995
                                                                                  * *(unsigned int *)(a1 + 32)) >> 47))))
       + 3864292196u;
}

BOOL AMCP::DAL::Source_ID::operator==(uint64_t a1, _DWORD *a2)
{
  if (*a2 != *(_DWORD *)a1) {
    return 0;
  }
  v4[0] = a2 + 2;
  v4[1] = a2 + 8;
  v4[2] = a2 + 10;
  v3[0] = (unsigned __int8 **)(a1 + 8);
  v3[1] = (unsigned __int8 **)(a1 + 32);
  v3[2] = (unsigned __int8 **)(a1 + 40);
  return std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>((uint64_t)v4, v3);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<AMCP::DAL::Source_ID const,AMCP::DAL::Synchronizer_Source>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

BOOL std::__tuple_equal<3ul>::operator()[abi:ne180100]<std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>,std::tuple<std::string const&,unsigned long const&,AMCP::Direction const&>>(uint64_t a1, unsigned __int8 ***a2)
{
  unint64_t v2 = *(const void ***)a1;
  uint64_t v3 = *a2;
  uint64_t v4 = *(unsigned __int8 *)(*(void *)a1 + 23);
  if ((v4 & 0x80u) == 0) {
    unint64_t v5 = (unsigned __int8 *)*(unsigned __int8 *)(*(void *)a1 + 23);
  }
  else {
    unint64_t v5 = *(unsigned __int8 **)(*(void *)a1 + 8);
  }
  int8x8_t v6 = (unsigned __int8 *)*((unsigned __int8 *)v3 + 23);
  int v7 = (char)v6;
  if ((char)v6 < 0) {
    int8x8_t v6 = v3[1];
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 >= 0) {
    unint64_t v10 = *a2;
  }
  else {
    unint64_t v10 = (unsigned __int8 **)*v3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v2, v10, *(void *)(*(void *)a1 + 8))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(*(void *)a1 + 23))
  {
    uint64_t v11 = v4 - 1;
    do
    {
      int v13 = *(unsigned __int8 *)v2;
      unint64_t v2 = (const void **)((char *)v2 + 1);
      int v12 = v13;
      int v15 = *(unsigned __int8 *)v10;
      unint64_t v10 = (unsigned __int8 **)((char *)v10 + 1);
      int v14 = v15;
      BOOL v17 = v11-- != 0;
    }
    while (v12 == v14 && v17);
    if (v12 != v14) {
      return 0;
    }
  }
  if (**(unsigned __int8 ***)(a1 + 8) == *a2[1]) {
    return **(_DWORD **)(a1 + 16) == *(_DWORD *)a2[2];
  }
  return 0;
}

void AMCP::DAL::Synchronizer::_sweep_and_remove_sources(AMCP::DAL::Synchronizer *this)
{
  unint64_t v2 = (char *)this + 24;
  uint64_t v3 = (char *)*((void *)this + 3);
  if (v3)
  {
    do
    {
      if (v3[200])
      {
        AMCP::DAL::Synchronizer_Source::get_source_id((AMCP::DAL::Synchronizer_Source *)__p, (uint64_t)(v3 + 64));
        BOOL has_pending_range = AMCP::DAL::Synchronizer::_has_pending_range((uint64_t)this, __p);
        BOOL v5 = has_pending_range;
        if (SBYTE7(v36) < 0)
        {
          operator delete(__p[1]);
          if (!v5)
          {
LABEL_7:
            int8x8_t v7 = *(int8x8_t *)((char *)this + 16);
            unint64_t v8 = *((void *)v3 + 1);
            uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
            v9.i16[0] = vaddlv_u8(v9);
            if (v9.u32[0] > 1uLL)
            {
              if (v8 >= *(void *)&v7) {
                v8 %= *(void *)&v7;
              }
            }
            else
            {
              v8 &= *(void *)&v7 - 1;
            }
            uint64_t v6 = *(void *)v3;
            uint64_t v10 = *((void *)this + 1);
            uint64_t v11 = *(char **)(v10 + 8 * v8);
            do
            {
              int v12 = v11;
              uint64_t v11 = *(char **)v11;
            }
            while (v11 != v3);
            if (v12 == v2) {
              goto LABEL_54;
            }
            unint64_t v13 = *((void *)v12 + 1);
            if (v9.u32[0] > 1uLL)
            {
              if (v13 >= *(void *)&v7) {
                v13 %= *(void *)&v7;
              }
            }
            else
            {
              v13 &= *(void *)&v7 - 1;
            }
            uint64_t v14 = *(void *)v3;
            if (v13 == v8)
            {
LABEL_26:
              if (v14) {
                goto LABEL_27;
              }
            }
            else
            {
LABEL_54:
              if (!v6) {
                goto LABEL_25;
              }
              unint64_t v15 = *(void *)(v6 + 8);
              if (v9.u32[0] > 1uLL)
              {
                if (v15 >= *(void *)&v7) {
                  v15 %= *(void *)&v7;
                }
              }
              else
              {
                v15 &= *(void *)&v7 - 1;
              }
              uint64_t v14 = *(void *)v3;
              if (v15 != v8)
              {
LABEL_25:
                *(void *)(v10 + 8 * v8) = 0;
                uint64_t v14 = *(void *)v3;
                goto LABEL_26;
              }
LABEL_27:
              unint64_t v16 = *(void *)(v14 + 8);
              if (v9.u32[0] > 1uLL)
              {
                if (v16 >= *(void *)&v7) {
                  v16 %= *(void *)&v7;
                }
              }
              else
              {
                v16 &= *(void *)&v7 - 1;
              }
              if (v16 != v8)
              {
                *(void *)(*((void *)this + 1) + 8 * v16) = v12;
                uint64_t v14 = *(void *)v3;
              }
            }
            *(void *)int v12 = v14;
            *(void *)uint64_t v3 = 0;
            --*((void *)this + 4);
            __p[0] = v3;
            __p[1] = v2;
            LOBYTE(v35) = 1;
            std::unique_ptr<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,void *>>>>::reset[abi:ne180100]((uint64_t)__p);
            goto LABEL_34;
          }
        }
        else if (!has_pending_range)
        {
          goto LABEL_7;
        }
      }
      uint64_t v6 = *(void *)v3;
LABEL_34:
      uint64_t v3 = (char *)v6;
    }
    while (v6);
  }
  if (!*((void *)this + 4))
  {
    *(void *)&long long v17 = *((void *)this + 6);
    uint64_t v18 = (std::__shared_weak_count *)*((void *)this + 7);
    *(void *)&long long v19 = v17;
    *((void *)&v19 + 1) = v18;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v20 = (std::__shared_weak_count *)*((void *)this + 7);
      int v30 = 2;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v33 = v19;
      *(void *)&long long v17 = *((void *)this + 6);
      *((void *)&v17 + 1) = v20;
      BOOL v21 = v20 == 0;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    else
    {
      long long v20 = 0;
      int v30 = 2;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      long long v33 = (unint64_t)v17;
      BOOL v21 = 1;
      *((void *)&v17 + 1) = 0;
    }
    int v26 = 2;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    long long v29 = v17;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)&v30, (const AMCP::DAL::DAL_Time *)&v26);
    *((_OWORD *)this + 4) = *(_OWORD *)__p;
    *((void *)this + 10) = v35;
    long long v22 = v36;
    long long v36 = 0uLL;
    std::logic_error v23 = (std::__shared_weak_count *)*((void *)this + 12);
    *(_OWORD *)((char *)this + 88) = v22;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    *(_OWORD *)((char *)this + 104) = v37;
    *((void *)this + 15) = v38;
    long long v24 = v39;
    long long v39 = 0uLL;
    uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 17);
    *((_OWORD *)this + 8) = v24;
    if (v25)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      if (*((void *)&v39 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v39 + 1));
      }
    }
    if (*((void *)&v36 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
    }
    if (!v21) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
    *((unsigned char *)this + 168) = 1;
  }
}

void sub_1BAB40458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if ((v27 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Synchronizer_Source::get_source_id(AMCP::DAL::Synchronizer_Source *this, uint64_t a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  uint64_t v4 = (std::string *)((char *)this + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
  }
  *((void *)this + 4) = *(void *)(a2 + 32);
  *((_DWORD *)this + 10) = *(_DWORD *)(a2 + 40);
}

BOOL AMCP::DAL::Synchronizer::_has_pending_range(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2);
  if (!v3) {
    return 0;
  }
  long long v11 = *(_OWORD *)(v3 + 15);
  uint64_t v4 = v3[18];
  uint64_t v12 = v3[17];
  uint64_t v13 = v4;
  BOOL v5 = (std::__shared_weak_count *)v3[19];
  uint64_t v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v15 = *((_OWORD *)v3 + 10);
  uint64_t v6 = v3[23];
  uint64_t v16 = v3[22];
  uint64_t v17 = v6;
  int8x8_t v7 = (std::__shared_weak_count *)v3[24];
  uint64_t v18 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 104), (AMCP::DAL::DAL_Time *)&v15))
  {
    double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v11);
    BOOL v9 = round(sample_time) < round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v15));
  }
  else
  {
    BOOL v9 = 0;
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  return v9;
}

void sub_1BAB405EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void AMCP::DAL::Synchronizer::_get_latest_common_pending_time(AMCP::DAL::Synchronizer *this, uint64_t a2)
{
  AMCP::DAL::Synchronizer::_get_pending_time_range((AMCP::DAL::Synchronizer *)v20, a2);
  *(_OWORD *)this = v23;
  uint64_t v4 = v25;
  *((void *)this + 2) = v24;
  *((void *)this + 3) = v4;
  BOOL v5 = v26;
  *((void *)this + 4) = v26;
  if (v5)
  {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v6 = *(uint64_t **)(a2 + 24);
  if (v6)
  {
    int8x8_t v7 = (AMCP::DAL::DAL_Time *)(a2 + 104);
    do
    {
      if (AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(v6 + 43)))
      {
        *(_OWORD *)long long v20 = *(_OWORD *)(v6 + 43);
        uint64_t v9 = v6[46];
        unint64_t v8 = (std::__shared_weak_count *)v6[47];
        *(void *)&v20[16] = v6[45];
        uint64_t v21 = v9;
        long long v22 = v8;
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v6 + 15), (AMCP::DAL::DAL_Time *)(v6 + 20))
          && !*((unsigned char *)v6 + 200))
        {
          uint64_t v10 = (std::__shared_weak_count *)v6[19];
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          int v11 = *((_DWORD *)v6 + 40);
          long long v12 = *(_OWORD *)(v6 + 21);
          uint64_t v13 = v6[23];
          uint64_t v14 = (std::__shared_weak_count *)v6[24];
          if (v14)
          {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          *(_OWORD *)&v20[8] = v12;
          *(_DWORD *)long long v20 = v11;
          long long v15 = v22;
          uint64_t v21 = v13;
          long long v22 = v14;
          if (v15) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v15);
          }
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          if (v10) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
        if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v20, v7))
        {
          uint64_t v16 = v22;
        }
        else
        {
          BOOL v17 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v20, this);
          uint64_t v16 = v22;
          if (v17)
          {
            *(_DWORD *)this = *(_DWORD *)v20;
            *(_OWORD *)((char *)this + 8) = *(_OWORD *)&v20[8];
            uint64_t v18 = v21;
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            long long v19 = (std::__shared_weak_count *)*((void *)this + 4);
            *((void *)this + 3) = v18;
            *((void *)this + 4) = v16;
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
          }
        }
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
      }
      uint64_t v6 = (uint64_t *)*v6;
    }
    while (v6);
  }
}

void sub_1BAB407B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  long long v15 = *(std::__shared_weak_count **)(v13 + 32);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Synchronizer::_emit(void *a1, uint64_t a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (AMCP::DAL::DAL_Time *)(a3 + 5);
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5)))
  {
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a1 + 13)))
    {
      BOOL v7 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a1 + 13));
      if (!v7)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v7);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v22 = **(NSObject ***)buf;
        if (*(void *)v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
        }
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          long long v23 = pthread_self();
          mach_port_t v24 = pthread_mach_thread_np(v23);
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v24;
          *(_WORD *)long long v40 = 2080;
          *(void *)&v40[2] = "Synchronizer.cpp";
          __int16 v41 = 1024;
          int v42 = 535;
          __int16 v43 = 2080;
          *(void *)std::logic_error v44 = "not (is_contiguous)";
          _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s emitting gap range", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"emitting gap range", (uint64_t)&v30);
        std::logic_error::logic_error(&v31, &v30);
        v31.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v32, &v31);
        uint64_t v34 = 0;
        uint64_t v35 = 0;
        uint64_t v36 = 0;
        int v37 = -1;
        v32.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        long long v33 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
        *(void *)&v44[6] = "void AMCP::DAL::Synchronizer::_emit(const Source_ID &, const DAL::DAL_Time_Range &)";
        int v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
        int v46 = 535;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
        long long v28 = v25;
        uint64_t v29 = v26;
        long long v25 = 0uLL;
        uint64_t v26 = 0;
        char v27 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a3);
    AMCP::DAL::DAL_Time::get_sample_time(v6);
    AMCP::DAL::DAL_Time::operator-((uint64_t)buf, v6, (AMCP::DAL::DAL_Time *)a3);
    if ((buf[0] & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
    }
    kdebug_trace();
    if (*(void *)&v44[6]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v44[6]);
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 8), (AMCP::DAL::DAL_Time *)(a1 + 13))
      || round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 8))) != 0.0)
    {
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a1 + 8))) {
        uint64_t v17 = (uint64_t)a3;
      }
      else {
        uint64_t v17 = (uint64_t)(a1 + 8);
      }
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 13), v6)) {
        uint64_t v18 = (uint64_t)v6;
      }
      else {
        uint64_t v18 = (uint64_t)(a1 + 13);
      }
      caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set((uint64_t)(a1 + 8), v17, v18);
    }
    else
    {
      *((_DWORD *)a1 + 16) = *(_DWORD *)a3;
      a1[9] = a3[1];
      a1[10] = a3[2];
      uint64_t v9 = a3[3];
      uint64_t v8 = a3[4];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::__shared_weak_count *)a1[12];
      a1[11] = v9;
      a1[12] = v8;
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      *((_DWORD *)a1 + 26) = *((_DWORD *)a3 + 10);
      a1[14] = a3[6];
      a1[15] = a3[7];
      uint64_t v12 = a3[8];
      uint64_t v11 = a3[9];
      if (v11) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v13 = (std::__shared_weak_count *)a1[17];
      a1[16] = v12;
      a1[17] = v11;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    uint64_t v20 = a1[18];
    uint64_t v19 = a1[19];
    while (v20 != v19)
    {
      uint64_t v21 = *(void *)(v20 + 24);
      if (!v21) {
        goto LABEL_39;
      }
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v21 + 48))(v21, a2, a3);
      v20 += 32;
    }
  }
  else
  {
    uint64_t v15 = a1[18];
    uint64_t v14 = a1[19];
    while (v15 != v14)
    {
      uint64_t v16 = *(void *)(v15 + 24);
      if (!v16) {
LABEL_39:
      }
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 48))(v16, a2, a3);
      v15 += 32;
    }
  }
}

void sub_1BAB40C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  _Unwind_Resume(exception_object);
}

void caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::set(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v7 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  *(_DWORD *)(a1 + 40) = *(_DWORD *)a3;
  *(void *)(a1 + 48) = *(void *)(a3 + 8);
  uint64_t v8 = *(void *)(a3 + 24);
  *(void *)(a1 + 56) = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 32);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 72);
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void AMCP::DAL::Synchronizer::_get_pending_time_range(AMCP::DAL::Synchronizer *this, uint64_t a2)
{
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)this, (uint64_t *)(a2 + 48));
  if (*(void *)(a2 + 32))
  {
    uint64_t v4 = *(void *)(a2 + 24);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 152);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v32 = *(_OWORD *)(v4 + 160);
    uint64_t v6 = *(void *)(v4 + 184);
    uint64_t v33 = *(void *)(v4 + 176);
    BOOL v7 = *(std::__shared_weak_count **)(v4 + 192);
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v38 = v32;
      uint64_t v39 = v33;
      uint64_t v40 = v6;
      __int16 v41 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    else
    {
      long long v38 = *(_OWORD *)(v4 + 160);
      uint64_t v39 = *(void *)(v4 + 176);
      uint64_t v40 = v6;
      __int16 v41 = 0;
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    for (unsigned int i = *(uint64_t **)(a2 + 24); i; unsigned int i = (uint64_t *)*i)
    {
      long long v32 = *(_OWORD *)(i + 15);
      uint64_t v9 = i[18];
      uint64_t v33 = i[17];
      *(void *)&long long v34 = v9;
      uint64_t v10 = i[19];
      *((void *)&v34 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      long long v35 = *((_OWORD *)i + 10);
      uint64_t v11 = i[23];
      uint64_t v36 = i[22];
      uint64_t v12 = i[24];
      *(void *)&long long v37 = v11;
      *((void *)&v37 + 1) = v12;
      if (v12) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v13 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v38, (AMCP::DAL::DAL_Time *)&v35);
      uint64_t v14 = &v35;
      if (!v13) {
        uint64_t v14 = &v38;
      }
      LODWORD(v38) = *(_DWORD *)v14;
      uint64_t v15 = (char *)&v35 + 8;
      if (!v13) {
        uint64_t v15 = (char *)&v38 + 8;
      }
      *((void *)&v38 + 1) = *(void *)v15;
      uint64_t v16 = &v36;
      if (!v13) {
        uint64_t v16 = &v39;
      }
      uint64_t v39 = *v16;
      if (v13) {
        uint64_t v17 = (uint64_t *)&v37;
      }
      else {
        uint64_t v17 = &v40;
      }
      uint64_t v18 = *v17;
      if (v13) {
        uint64_t v19 = (std::__shared_weak_count **)&v37 + 1;
      }
      else {
        uint64_t v19 = &v41;
      }
      uint64_t v20 = *v19;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = v41;
      uint64_t v40 = v18;
      __int16 v41 = v20;
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      if (*((void *)&v37 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
      }
      if (*((void *)&v34 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
      }
    }
    long long v28 = *(_OWORD *)(a2 + 104);
    uint64_t v22 = *(void *)(a2 + 128);
    uint64_t v29 = *(void *)(a2 + 120);
    uint64_t v30 = v22;
    long long v23 = *(std::__shared_weak_count **)(a2 + 136);
    std::logic_error v31 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v32, (const AMCP::DAL::DAL_Time *)&v28, (const AMCP::DAL::DAL_Time *)&v38);
    *(_OWORD *)this = v32;
    *((void *)this + 2) = v33;
    long long v24 = v34;
    long long v34 = 0uLL;
    long long v25 = (std::__shared_weak_count *)*((void *)this + 4);
    *(_OWORD *)((char *)this + 24) = v24;
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    *(_OWORD *)((char *)this + 40) = v35;
    *((void *)this + 7) = v36;
    long long v26 = v37;
    long long v37 = 0uLL;
    char v27 = (std::__shared_weak_count *)*((void *)this + 9);
    *((_OWORD *)this + 4) = v26;
    if (v27)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      if (*((void *)&v37 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
      }
    }
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
  }
}

void sub_1BAB41078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMCP::DAL::DAL_Time_Range *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  uint64_t v20 = *(std::__shared_weak_count **)(v18 - 96);
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range(a10);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronizer::receive_data(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v6 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2);
  if (!v6) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  if (!AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(v6 + 43)))
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v22 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      long long v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      unsigned int v25 = *a2;
      long long v26 = a2 + 2;
      if (*((char *)a2 + 31) < 0) {
        long long v26 = (unsigned int *)*((void *)a2 + 1);
      }
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 189;
      LOWORD(v57) = 2080;
      *(void *)((char *)&v57 + 2) = "not (_is_anchored(source_id))";
      WORD5(v57) = 1024;
      HIDWORD(v57) = v25;
      *(_WORD *)uint64_t v58 = 2080;
      *(void *)&v58[2] = v26;
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data on unanchored source: %d  '%s'", buf, 0x32u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    if (*((char *)a2 + 31) >= 0) {
      char v27 = a2 + 2;
    }
    else {
      char v27 = (unsigned int *)*((void *)a2 + 1);
    }
    caulk::make_string((caulk *)"Synchronizer::receive_data on unanchored source: %d  '%s'", (uint64_t)&v42, *a2, v27);
    std::logic_error::logic_error(&v40, &v42);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v50, &v40);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    int v55 = -1;
    v50.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v51 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
    *((void *)&v57 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
    *(void *)uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    *(_DWORD *)&v58[8] = 189;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v49.__r_.__value_.__l.__data_);
    int v46 = &unk_1F148AA90;
    std::string v47 = v49;
    memset(&v49, 0, sizeof(v49));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  BOOL v7 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2);
  if (!v7) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  *(_OWORD *)os_workgroup_interval_data_opaque_s buf = *(_OWORD *)(v7 + 43);
  uint64_t v8 = v7[46];
  *(void *)&buf[16] = v7[45];
  *(void *)&long long v57 = v8;
  uint64_t v9 = v7[47];
  *((void *)&v57 + 1) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v10 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a3 + 40), (AMCP::DAL::DAL_Time *)buf);
  uint64_t v11 = (AMCP::Log::Scope_Registry *)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
  }
  if (v10)
  {
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v28 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = pthread_self();
      mach_port_t v30 = pthread_mach_thread_np(v29);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v30;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 190;
      LOWORD(v57) = 2080;
      *(void *)((char *)&v57 + 2) = "not (received_range.end() >= _get_anchor_time(source_id))";
      _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data older than anchor", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Synchronizer::receive_data older than anchor", (uint64_t)&v42);
    std::logic_error::logic_error(&v40, &v42);
    v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v50, &v40);
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    int v55 = -1;
    v50.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v51 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
    *((void *)&v57 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
    *(void *)uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    *(_DWORD *)&v58[8] = 190;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v49.__r_.__value_.__l.__data_);
    int v46 = &unk_1F148AA90;
    std::string v47 = v49;
    memset(&v49, 0, sizeof(v49));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::Synchronizer::_check_sources_for_overloads(a1);
  if (!std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2))goto LABEL_71; {
  uint64_t v12 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2);
  }
  if (!v12) {
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  }
  BOOL v13 = v12;
  if (*((unsigned char *)v12 + 336))
  {
    BOOL v14 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==((uint64_t)(v12 + 32), a3);
    if (!v14 && *((unsigned char *)v13 + 336))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v15 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v16 = pthread_self();
        mach_port_t v17 = pthread_mach_thread_np(v16);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v17;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Synchronizer.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = 110;
        LOWORD(v57) = 2080;
        *(void *)((char *)&v57 + 2) = "not (m_current_range == range_to_commit or not m_current_range)";
        _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer_Source has seen two different ranges in the same cycle", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Synchronizer_Source has seen two different ranges in the same cycle", (uint64_t)&v42);
      std::logic_error::logic_error(&v40, &v42);
      v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v50, &v40);
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      int v55 = -1;
      v50.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      long long v51 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
      *((void *)&v57 + 1) = "BOOL AMCP::DAL::Synchronizer_Source::is_unique_range(const DAL_Time_Range &) const";
      *(void *)uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
      *(_DWORD *)&v58[8] = 110;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v49.__r_.__value_.__l.__data_);
      int v46 = &unk_1F148AA90;
      std::string v47 = v49;
      memset(&v49, 0, sizeof(v49));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  else
  {
LABEL_71:
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 64), (AMCP::DAL::DAL_Time *)(a1 + 104)))
    {
      BOOL v18 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 104), (AMCP::DAL::DAL_Time *)(a3 + 40));
      if (!v18)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v18);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        std::logic_error v31 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          long long v32 = pthread_self();
          mach_port_t v33 = pthread_mach_thread_np(v32);
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v33;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Synchronizer.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = 204;
          LOWORD(v57) = 2080;
          *(void *)((char *)&v57 + 2) = "not (received_range.end() > m_emitted_time_range.end())";
          _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data end of range already emitted", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Synchronizer::receive_data end of range already emitted", (uint64_t)&v42);
        std::logic_error::logic_error(&v40, &v42);
        v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v50, &v40);
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        int v55 = -1;
        v50.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        long long v51 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        *((void *)&v57 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
        *(void *)uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
        *(_DWORD *)&v58[8] = 204;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v49.__r_.__value_.__l.__data_);
        int v46 = &unk_1F148AA90;
        std::string v47 = v49;
        memset(&v49, 0, sizeof(v49));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      BOOL v19 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a1 + 104));
      if (v19)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v34 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        {
          long long v35 = pthread_self();
          mach_port_t v36 = pthread_mach_thread_np(v35);
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v36;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "Synchronizer.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&unsigned char buf[20] = 205;
          LOWORD(v57) = 2080;
          *(void *)((char *)&v57 + 2) = "not (received_range.start() >= m_emitted_time_range.end())";
          _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Synchronizer::receive_data start of range already emitted", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v44);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Synchronizer::receive_data start of range already emitted", (uint64_t)&v42);
        std::logic_error::logic_error(&v40, &v42);
        v40.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v50, &v40);
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        int v55 = -1;
        v50.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        long long v51 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
        *((void *)&v57 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
        *(void *)uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
        *(_DWORD *)&v58[8] = 205;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v49.__r_.__value_.__l.__data_);
        int v46 = &unk_1F148AA90;
        std::string v47 = v49;
        memset(&v49, 0, sizeof(v49));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    if (std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2))
    {
      uint64_t v20 = std::__hash_table<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::__unordered_map_hasher<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::hash<AMCP::DAL::Source_ID>,std::equal_to<AMCP::DAL::Source_ID>,true>,std::__unordered_map_equal<AMCP::DAL::Source_ID,std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>,std::equal_to<AMCP::DAL::Source_ID>,std::hash<AMCP::DAL::Source_ID>,true>,std::allocator<std::__hash_value_type<AMCP::DAL::Source_ID,AMCP::DAL::Synchronizer_Source>>>::find<AMCP::DAL::Source_ID>((void *)(a1 + 8), a2);
      if (!v20) {
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      }
      if (!v20[200] && !v20[248])
      {
        AMCP::DAL::Synchronizer_Source::receive_data((AMCP::DAL::Synchronizer_Source *)(v20 + 64), (const AMCP::DAL::DAL_Time_Range *)a3);
        AMCP::DAL::Synchronizer::_get_latest_common_pending_time((AMCP::DAL::Synchronizer *)&v46, a1);
        BOOL v21 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v46, (AMCP::DAL::DAL_Time *)(a1 + 104));
        if (v21)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v21);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v37 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            long long v38 = pthread_self();
            mach_port_t v39 = pthread_mach_thread_np(v38);
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v39;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Synchronizer.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 216;
            LOWORD(v57) = 2080;
            *(void *)((char *)&v57 + 2) = "not (m_emitted_time_range.end() <= emit_end_time)";
            _os_log_error_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid time in Synchronizer", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v45);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid time in Synchronizer", (uint64_t)&v49);
          std::logic_error::logic_error(&v44, &v49);
          v44.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v50, &v44);
          uint64_t v52 = 0;
          uint64_t v53 = 0;
          uint64_t v54 = 0;
          int v55 = -1;
          v50.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          long long v51 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v50);
          *((void *)&v57 + 1) = "void AMCP::DAL::Synchronizer::receive_data(const Source_ID &, const DAL_Time_Range &)";
          *(void *)uint64_t v58 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
          *(_DWORD *)&v58[8] = 216;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v40);
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          *(std::logic_error *)&v42.__r_.__value_.__r.__words[1] = v40;
          uint64_t v43 = v41;
          v40.__vftable = 0;
          v40.__imp_.__imp_ = 0;
          uint64_t v41 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)(a1 + 104), (const AMCP::DAL::DAL_Time *)&v46);
        AMCP::DAL::Synchronizer::_emit((void *)a1, (uint64_t)a2, buf);
        if (v59) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v59);
        }
        if (*((void *)&v57 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v57 + 1));
        }
        if (v48) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v48);
        }
      }
    }
    AMCP::DAL::Synchronizer::_sweep_and_remove_sources((AMCP::DAL::Synchronizer *)a1);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1BAB41F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  os_unfair_lock_unlock(v36);
  _Unwind_Resume(a1);
}

void AMCP::DAL::Synchronizer::_check_sources_for_overloads(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 48);
  if (!v2)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v17 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      BOOL v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Synchronizer.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 494;
      LOWORD(v35) = 2080;
      *(void *)((char *)&v35 + 2) = "not (m_timebase)";
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v25);
    std::logic_error::logic_error(&v26, &v25);
    v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v27, &v26);
    uint64_t v29 = 0;
    mach_port_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = -1;
    v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v28 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *((void *)&v35 + 1) = "void AMCP::DAL::Synchronizer::_check_sources_for_overloads(const DAL_Time &)";
    *(void *)&long long v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Synchronizer.cpp";
    DWORD2(v36) = 494;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v23);
    uint64_t v20 = &unk_1F148AA90;
    long long v21 = v23;
    *(void *)&long long v22 = v24;
    long long v23 = 0uLL;
    uint64_t v24 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 120))(v2))
  {
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 48) + 32))(buf);
    double v3 = *(double *)buf;
    unsigned int v4 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 144))(*(void *)(a1 + 48), 0);
    uint64_t v5 = *(uint64_t **)(a1 + 24);
    if (v5)
    {
      double v6 = v3 + (double)v4;
      double v7 = round(v6);
      do
      {
        if (AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(v5 + 43)))
        {
          *(_OWORD *)os_workgroup_interval_data_opaque_s buf = *(_OWORD *)(v5 + 15);
          uint64_t v8 = v5[18];
          *(void *)&buf[16] = v5[17];
          *(void *)&long long v35 = v8;
          uint64_t v9 = v5[19];
          *((void *)&v35 + 1) = v9;
          if (v9) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          }
          long long v36 = *((_OWORD *)v5 + 10);
          uint64_t v10 = v5[23];
          uint64_t v37 = v5[22];
          uint64_t v11 = (std::__shared_weak_count *)v5[24];
          uint64_t v38 = v10;
          mach_port_t v39 = v11;
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v36);
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
          if (*((void *)&v35 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
          }
          if (round(sample_time) < v7 && !*((unsigned char *)v5 + 200))
          {
            BOOL v13 = (std::__shared_weak_count *)v5[19];
            if (v13) {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(_OWORD *)os_workgroup_interval_data_opaque_s buf = *((_OWORD *)v5 + 10);
            *(void *)&buf[16] = v5[22];
            uint64_t v15 = v5[23];
            BOOL v14 = (std::__shared_weak_count *)v5[24];
            if (v14)
            {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              std::logic_error v27 = *(std::logic_error *)buf;
              long long v28 = *(void **)&buf[16];
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            else
            {
              std::logic_error v27 = (std::logic_error)*((_OWORD *)v5 + 10);
              long long v28 = (void *)v5[22];
            }
            uint64_t v29 = v15;
            mach_port_t v30 = v14;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *(void *)&long long v16 = v15;
            *((void *)&v16 + 1) = v14;
            LODWORD(v20) = 2;
            long long v21 = *(unint64_t *)&v6;
            long long v22 = v16;
            AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v27, (const AMCP::DAL::DAL_Time *)&v20);
            AMCP::DAL::Synchronizer_Source::receive_data((AMCP::DAL::Synchronizer_Source *)(v5 + 8), (const AMCP::DAL::DAL_Time_Range *)buf);
            if (v39) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            }
            if (*((void *)&v35 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v35 + 1));
            }
            if (*((void *)&v22 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
            }
            *((unsigned char *)v5 + 248) = 1;
            std::__optional_destruct_base<AMCP::DAL::DAL_Time_Range,false>::reset[abi:ne180100]((uint64_t)(v5 + 32));
            if (v30) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v30);
            }
          }
        }
        uint64_t v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
  }
}

void sub_1BAB42614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__split_buffer<std::function<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    std::__function::__value_func<void ()(AMCP::DAL::Source_ID const&,AMCP::DAL::DAL_Time_Range const&)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void non-virtual thunk to'HALS_PlugInDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInDevice *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void non-virtual thunk to'HALS_PlugInDevice::~HALS_PlugInDevice(HALS_PlugInDevice *this)
{
  HALS_PlugInDevice::~HALS_PlugInDevice((HALS_PlugInDevice *)((char *)this - 1304));

  JUMPOUT(0x1C1859840);
}

{
  HALS_PlugInDevice::~HALS_PlugInDevice((HALS_PlugInDevice *)((char *)this - 1304));
}

void HALS_PlugInDevice::~HALS_PlugInDevice(HALS_PlugInDevice *this)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F145F6E8;
  uint64_t v2 = (HALS_PlugInDevice *)((char *)this + 1304);
  *((void *)this + 163) = &unk_1F145FAB8;
  uint64_t v3 = (HALS_ObjectMap *)*((unsigned int *)this + 356);
  if (v3)
  {
    unsigned int v4 = (AMCP::Log::Scope_Registry *)HALS_ObjectMap::CopyObjectByObjectID(v3);
    uint64_t v5 = v4;
    if (v4)
    {
      if (v4 != *((AMCP::Log::Scope_Registry **)this + 177))
      {
        AMCP::Log::Scope_Registry::get(v4);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        double v6 = **(NSObject ***)buf;
        if (*(void *)v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
        }
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          BOOL v13 = pthread_self();
          mach_port_t v14 = pthread_mach_thread_np(v13);
          int v15 = *((_DWORD *)this + 356);
          uint64_t v16 = *((void *)this + 177);
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110402;
          *(_DWORD *)&uint8_t buf[4] = v14;
          *(_WORD *)long long v23 = 2080;
          *(void *)&v23[2] = "HALS_PlugInDevice.cpp";
          __int16 v24 = 1024;
          int v25 = 72;
          __int16 v26 = 1024;
          int v27 = v15;
          __int16 v28 = 2048;
          uint64_t v29 = v5;
          __int16 v30 = 2048;
          uint64_t v31 = v16;
          _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d IO Engine ID %u object from map %p is not the same as cached object %p", buf, 0x32u);
        }
      }
      (*(void (**)(HALS_ObjectMap *))(*(void *)v5 + 8))(v5);
      HALS_ObjectMap::ObjectIsDead(*((HALS_ObjectMap **)this + 177), v7);
    }
    else
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v9 = **(NSObject ***)buf;
      if (*(void *)v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        int v19 = *((_DWORD *)this + 356);
        uint64_t v20 = (HALS_ObjectMap *)*((void *)this + 177);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)long long v23 = 2080;
        *(void *)&v23[2] = "HALS_PlugInDevice.cpp";
        __int16 v24 = 1024;
        int v25 = 80;
        __int16 v26 = 1024;
        int v27 = v19;
        __int16 v28 = 2048;
        uint64_t v29 = v20;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d IO Engine ID %u is not valid, ptr %p", buf, 0x28u);
      }
    }
    HALS_ObjectMap::ReleaseObject(v5, v8);
  }
  *((void *)this + 177) = 0;
  *((_DWORD *)this + 356) = 0;
  v21[0] = 0;
  v21[1] = 0;
  HALS_System::GetInstance(buf, 0, v21);
  if (*(void *)buf) {
    HALS_IOContext_Manager::destroy_engine_for_device(*(os_unfair_lock_s **)(*(void *)buf + 1392), this);
  }
  if (*(void *)v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v23);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PlugInDevice *)((char *)this + 1432));
  uint64_t v10 = (void *)*((void *)this + 174);
  if (v10)
  {
    *((void *)this + 175) = v10;
    operator delete(v10);
  }
  for (uint64_t i = 0; i != -48; i -= 24)
  {
    uint64_t v12 = *(void **)((char *)this + i + 1368);
    if (v12)
    {
      *(void *)((char *)this + i + 1376) = v12;
      operator delete(v12);
    }
  }
  HALS_PlugInObject::~HALS_PlugInObject(v2);
  HALS_Device::~HALS_Device(this);
}

{
  uint64_t vars8;

  HALS_PlugInDevice::~HALS_PlugInDevice(this);

  JUMPOUT(0x1C1859840);
}

void sub_1BAB42B28(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void HALS_PlugInDevice::HandlePlugIn_PropertiesChanged(HALS_PlugInDevice *this, unsigned int a2, const AudioObjectPropertyAddress *a3)
{
}

void HALS_PlugInDevice::ConfigChange_HardwareReferenceStream(uint64_t a1, uint64_t a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN17HALS_PlugInDevice36ConfigChange_HardwareReferenceStreamEPK11HALS_Clientj_block_invoke;
  block[3] = &__block_descriptor_tmp_10_1018;
  int v5 = v3;
  int v6 = a3;
  block[4] = a1;
  void block[5] = a2;
  LOBYTE(v3) = atomic_load((unsigned __int8 *)(a1 + 1464));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), block);
}

void ___ZN17HALS_PlugInDevice36ConfigChange_HardwareReferenceStreamEPK11HALS_Clientj_block_invoke(uint64_t a1)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned int v4 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 48));
  if (v4)
  {
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 502;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v2 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  --->", buf, 0x1Cu);
    }
    memset(buf, 0, 32);
    memset(v43, 0, sizeof(v43));
    int v6 = (HALS_NotificationManager *)*(unsigned int *)(v2 + 16);
    strcpy(v44, "bgfcbolg");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v6, 0, 1u, (const AudioObjectPropertyAddress *)v44, v5);
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v7 = *(void *)(v2 + 1416);
    if (v7) {
      (*(void (**)(uint64_t, void **))(*(void *)v7 + 216))(v7, &v40);
    }
    v39[0] = 0;
    v39[1] = 0;
    HALS_System::GetInstance(v44, 0, v39);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(void *)v44 + 1392), (HALS_IODevice *)v2);
    if (*(void *)&v44[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v44[8]);
    }
    strcpy(v44, "ffidbolg");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v44, v8);
    strcpy(v44, "egfcbolg");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v44, v9);
    strcpy(v44, "#mtsbolg");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v44, v10);
    strcpy(v44, "#mtstpni");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v44, v11);
    strcpy(v44, "cntltpni");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v44, v12);
    strcpy(v44, "tfastpni");
    v44[9] = 0;
    *(_WORD *)&unsigned char v44[10] = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)buf, (AudioObjectPropertyAddress *)v44, v13);
    memset(v44, 0, 24);
    HALS_Device::CopyStreamList(v2, 1, (char **)v44);
    int v15 = *(HALS_Stream ***)v44;
    uint64_t v16 = *(HALS_Stream ***)&v44[8];
    while (1)
    {
      if (v15 == v16)
      {
        unsigned int v17 = 0;
        goto LABEL_14;
      }
      if (HALS_Stream::IsReferenceStream(*v15)) {
        break;
      }
      ++v15;
    }
    unsigned int v17 = *((_DWORD *)*v15 + 4);
LABEL_14:
    mach_port_t v18 = HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)v44, v14);
    memset(v44, 0, 24);
    *(void *)&v44[24] = v17;
    __p = (void *)0x676C6F627363686ELL;
    LODWORD(v36) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v18, (AudioObjectPropertyAddress *)&__p, v19);
    __p = (void *)0x676C6F6273666D74;
    LODWORD(v36) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v44, (AudioObjectPropertyAddress *)&__p, v20);
    __p = (void *)0x676C6F6273666D61;
    LODWORD(v36) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v44, (AudioObjectPropertyAddress *)&__p, v21);
    __p = (void *)0x676C6F6270667420;
    LODWORD(v36) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v44, (AudioObjectPropertyAddress *)&__p, v22);
    __p = (void *)0x676C6F6270667461;
    LODWORD(v36) = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v44, (AudioObjectPropertyAddress *)&__p, v23);
    CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)v43, (uint64_t **)v44);
    uint64_t v24 = *(unsigned int *)(a1 + 52);
    __p = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = v24;
    *(void *)&v34.AudioObjectPropertySelector mSelector = 0x676C6F626263766CLL;
    v34.AudioObjectPropertyElement mElement = 0;
    CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&__p, &v34, v25);
    CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)v43, (uint64_t **)&__p);
    uint64_t v26 = *(void *)(v2 + 1416);
    if (v26) {
      (*(void (**)(uint64_t))(*(void *)v26 + 936))(v26);
    }
    if (__p) {
      operator delete(__p);
    }
    if (*(void *)v44) {
      operator delete(*(void **)v44);
    }
    v33[0] = 0;
    v33[1] = 0;
    HALS_System::GetInstance(v44, 0, v33);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(void *)v44 + 1392), (const HALS_IODevice *)v2);
    if (*(void *)&v44[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v44[8]);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::logic_error v44 = 136315650;
      *(void *)&v44[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&unsigned char v44[12] = 1024;
      *(_DWORD *)&unsigned char v44[14] = 564;
      *(_WORD *)&v44[18] = 2080;
      *(void *)&v44[20] = v2 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  --- sending notifications", v44, 0x1Cu);
    }
    kdebug_trace();
    uint64_t v27 = *(void *)(a1 + 40);
    if (v27) {
      unsigned int v28 = *(_DWORD *)(v27 + 16);
    }
    else {
      unsigned int v28 = 0;
    }
    HALS_NotificationManager::GroupPropertiesChanged(1, *(_DWORD *)(v2 + 16), v28, (uint64_t)buf, v43, (uint64_t)&v40);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::logic_error v44 = 136315650;
      *(void *)&v44[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&unsigned char v44[12] = 1024;
      *(_DWORD *)&unsigned char v44[14] = 573;
      *(_WORD *)&v44[18] = 2080;
      *(void *)&v44[20] = v2 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  --- restarting IO", v44, 0x1Cu);
    }
    uint64_t v29 = *(void *)(v2 + 1416);
    if (v29)
    {
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v29 + 232))(v29, buf);
      (*(void (**)(void, void **))(**(void **)(v2 + 1416) + 224))(*(void *)(v2 + 1416), &v40);
    }
    v32[0] = 0;
    v32[1] = 0;
    HALS_System::GetInstance(v44, 0, v32);
    __int16 v30 = (os_unfair_lock_s *)(*(void *)(*(void *)v44 + 1392) + 16);
    os_unfair_lock_lock(v30);
    os_unfair_lock_unlock(v30);
    if (*(void *)&v44[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v44[8]);
    }
    v31[0] = 0;
    v31[1] = 0;
    HALS_System::GetInstance(v44, 0, v31);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(void *)v44 + 1392), (HALS_IODevice *)v2);
    if (*(void *)&v44[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v44[8]);
    }
    if (v40)
    {
      uint64_t v41 = v40;
      operator delete(v40);
    }
    *(void *)std::logic_error v44 = v43;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 590;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v2 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::ConfigChange_HardwareReferenceStream: %s  <---", buf, 0x1Cu);
    }
    kdebug_trace();
  }
  HALS_ObjectMap::ReleaseObject(v4, v3);
}

void sub_1BAB432D0(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a2)
  {
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)(v27 - 144), a2);
    uint64_t v29 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(a1);
    AMCP::Log::Scope_Registry::get(v29);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)(v27 - 144), "com.apple.coreaudio", "AMCP");
    __int16 v30 = *(std::__shared_weak_count **)(v27 - 136);
    uint64_t v31 = **(NSObject ***)(v27 - 144);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = pthread_self();
      mach_port_t v33 = pthread_mach_thread_np(v32);
      *(_DWORD *)(v27 - 144) = 67109634;
      *(_DWORD *)(v27 - 140) = v33;
      *(_WORD *)(v27 - 136) = 2080;
      *(void *)(v26 + 10) = "HALS_PlugInDevice.cpp";
      *(_WORD *)(v27 - 126) = 1024;
      *(_DWORD *)(v27 - 124) = 559;
      _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Caught exception trying to notify about reference stream", (uint8_t *)(v27 - 144), 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAB42F8CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1BAB4343C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_end_catch();
    JUMPOUT(0x1BAB43458);
  }
  _Unwind_Resume(a1);
}

void sub_1BAB43498(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void sub_1BAB434A8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAB434B0);
  }
  __clang_call_terminate(a1);
}

uint64_t CAPropertyAddressListVector::AppendItem(CAPropertyAddressListVector *this, uint64_t **a2)
{
  int v5 = (char *)this + 16;
  unint64_t v4 = *((void *)this + 2);
  unint64_t v6 = *((void *)this + 1);
  if (v6 >= v4)
  {
    uint64_t v9 = (uint64_t)(v6 - *(void *)this) >> 5;
    if ((unint64_t)(v9 + 1) >> 59) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - *(void *)this;
    uint64_t v11 = v10 >> 4;
    if (v10 >> 4 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v27 = v5;
    if (v12) {
      unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v12);
    }
    else {
      uint64_t v13 = 0;
    }
    unint64_t v14 = v12 + 32 * v9;
    unint64_t v25 = v12;
    *(void *)uint64_t v26 = v14;
    *(void *)&v26[8] = v14;
    *(void *)&v26[16] = v12 + 32 * v13;
    *(void *)unint64_t v14 = 0;
    *(void *)(v14 + 8) = 0;
    *(void *)(v14 + 16) = 0;
    std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)v14, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2));
    *(void *)(v14 + 24) = a2[3];
    uint64_t v15 = *(void *)v26;
    *(void *)&v26[8] += 32;
    uint64_t v16 = *(void *)this;
    uint64_t v17 = *((void *)this + 1);
    *(void *)&long long v31 = *(void *)v26;
    *((void *)&v31 + 1) = *(void *)v26;
    long long v30 = v31;
    v28[0] = v5;
    v28[1] = &v30;
    v28[2] = &v31;
    char v29 = 0;
    if (v17 != v16)
    {
      uint64_t v18 = v17;
      do
      {
        *(void *)(v15 - 32) = 0;
        *(void *)(v15 - 24) = 0;
        *(void *)(v15 - 16) = 0;
        int v19 = *(uint64_t **)(v18 - 32);
        uint64_t v20 = *(uint64_t **)(v18 - 24);
        v18 -= 32;
        std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)(v15 - 32), v19, v20, 0xAAAAAAAAAAAAAAABLL * (((char *)v20 - (char *)v19) >> 2));
        *(void *)(v15 - 8) = *(void *)(v17 - 8);
        uint64_t v15 = *((void *)&v31 + 1) - 32;
        *((void *)&v31 + 1) -= 32;
        uint64_t v17 = v18;
      }
      while (v18 != v16);
    }
    char v29 = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,std::reverse_iterator<CAPropertyAddressList*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v28);
    uint64_t v21 = *((void *)this + 2);
    long long v22 = *(_OWORD *)&v26[8];
    unint64_t v24 = *(void *)&v26[8];
    long long v23 = *(_OWORD *)this;
    *(void *)this = v15;
    *(_OWORD *)uint64_t v26 = v23;
    *(_OWORD *)((char *)this + 8) = v22;
    *(void *)&v26[16] = v21;
    unint64_t v25 = v23;
    uint64_t result = std::__split_buffer<CAPropertyAddressList>::~__split_buffer((uint64_t)&v25);
    unint64_t v8 = v24;
  }
  else
  {
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(void *)(v6 + 16) = 0;
    uint64_t result = (uint64_t)std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>((char *)v6, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 2));
    *(void *)(v6 + 24) = a2[3];
    unint64_t v8 = v6 + 32;
    *((void *)this + 1) = v6 + 32;
  }
  *((void *)this + 1) = v8;
  return result;
}

void sub_1BAB436A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<CAPropertyAddressList>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

char *std::vector<CAPropertyAddress>::__init_with_size[abi:ne180100]<CAPropertyAddress*,CAPropertyAddress*>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<AudioObjectPropertyAddress>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      uint64_t v8 = *a2;
      *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
      *(void *)uint64_t v7 = v8;
      v7 += 12;
      a2 = (uint64_t *)((char *)a2 + 12);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BAB43774(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CAPropertyAddressList>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    unint64_t v4 = *(void **)(v2 - 32);
    *(void *)(a1 + 16) = v2 - 32;
    if (v4)
    {
      *(void *)(v2 - 24) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CAPropertyAddressList>,std::reverse_iterator<CAPropertyAddressList*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      int v5 = *(void **)v3;
      if (*(void *)v3)
      {
        *(void *)(v3 + 8) = v5;
        operator delete(v5);
      }
      v3 += 32;
    }
  }
  return a1;
}

void HALS_PlugInDevice::PerformNonDriverConfigChange(HALS_PlugInDevice *this, BOOL a2, int a3)
{
  long long v3 = 0uLL;
  char v4 = 0;
  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange((uint64_t)this, &v3, a3);
}

void HALS_PlugInDevice::HandlePlugIn_RequestConfigChange(uint64_t a1, long long *a2, int a3)
{
  int v3 = *(_DWORD *)(a1 + 16);
  int v4 = *(_DWORD *)(a1 + 1324);
  int v5 = *(_DWORD *)(*(void *)(a1 + 1312) + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN17HALS_PlugInDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEbj_block_invoke;
  block[3] = &__block_descriptor_tmp_24_1029;
  int v9 = v5;
  int v10 = v3;
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  int v11 = a3;
  int v12 = v4;
  LOBYTE(v3) = atomic_load((unsigned __int8 *)(a1 + 1464));
  if (v3) {
    atomic_store(1u, (unsigned __int8 *)(a1 + 1465));
  }
  dispatch_async(*(dispatch_queue_t *)(a1 + 1432), block);
}

void ___ZN17HALS_PlugInDevice32HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEbj_block_invoke(uint64_t a1)
{
  v67[3] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 56));
  uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 60));
  if (v3)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = *(unsigned __int8 *)(a1 + 48);
    uint64_t v7 = *(unsigned int *)(a1 + 64);
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2143;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v3 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --->", buf, 0x1Cu);
    }
    long long v58 = 0u;
    long long v59 = 0u;
    memset(v57, 0, sizeof(v57));
    int v9 = (HALS_NotificationManager *)*(unsigned int *)(v3 + 16);
    strcpy(v61, "bgfcbolg");
    v61[9] = 0;
    *(_WORD *)&v61[10] = 0;
    HALS_NotificationManager::PropertiesChanged_Sync(v9, v7, 1u, (const AudioObjectPropertyAddress *)v61, v8);
    uint64_t v54 = 0;
    int v55 = 0;
    uint64_t v56 = 0;
    v53[0] = 0;
    v53[1] = 0;
    HALS_System::GetInstance(buf, 0, v53);
    uint64_t v10 = *(void *)buf;
    int v11 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 200))(v3);
    int v12 = v11;
    if (v11) {
      CFRetain(v11);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v12);
    HALS_System::GetRawDeviceListUsingClockDevice(v10, (uint64_t)&v54, &cf);
    if (cf) {
      CFRelease(cf);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v13 = *(void *)(v3 + 1416);
    __p = 0;
    std::logic_error v50 = 0;
    uint64_t v51 = 0;
    if (v13) {
      (*(void (**)(uint64_t, void **))(*(void *)v13 + 216))(v13, &__p);
    }
    v48[0] = 0;
    v48[1] = 0;
    HALS_System::GetInstance(buf, 0, v48);
    HALS_IOContext_Manager::pause_contexts_for_device(*(os_unfair_lock_s **)(*(void *)buf + 1392), (HALS_IODevice *)v3);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    HALS_DeviceState::HALS_DeviceState((HALS_DeviceState *)buf);
    HALS_DeviceState::Capture(v14, (HALS_Device *)v3, (const CAPropertyAddressList *)HALS_DeviceState::sStandardDevicePropertiesToCapture, (const CAPropertyAddressList *)HALS_DeviceState::sStandardStreamPropertiesToCapture);
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unint64_t v61 = 136315650;
      *(void *)&v61[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v61[12] = 1024;
      *(_DWORD *)&v61[14] = 2174;
      __int16 v62 = 2080;
      uint64_t v63 = v3 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- calling driver", v61, 0x1Cu);
    }
    if (v6)
    {
      kdebug_trace();
      uint64_t v15 = *(void *)(v3 + 1312);
      uint64_t v16 = *(void *)(v15 + 400);
      uint64_t v17 = *(std::__shared_weak_count **)(v15 + 408);
      if (v17) {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v18 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v16 + 96))(v16, *(unsigned int *)(v3 + 1324), v4, v5);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      kdebug_trace();
      if (v18 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)unint64_t v61 = 136315906;
        *(void *)&v61[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&v61[12] = 1024;
        *(_DWORD *)&v61[14] = 2185;
        __int16 v62 = 2080;
        uint64_t v63 = v3 + 156;
        __int16 v64 = 1024;
        int v65 = v18;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- driver encountered error %d", v61, 0x22u);
      }
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unint64_t v61 = 136315650;
      *(void *)&v61[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&v61[12] = 1024;
      *(_DWORD *)&v61[14] = 2190;
      __int16 v62 = 2080;
      uint64_t v63 = v3 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- driver returned", v61, 0x1Cu);
    }
    uint64_t v44 = 0;
    char v45 = &v44;
    uint64_t v46 = 0x2000000000;
    char v47 = 1;
    v43[0] = MEMORY[0x1E4F143A8];
    v43[1] = 0x40000000;
    v43[2] = ___ZN17HALS_PlugInDevice33_HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEj_block_invoke;
    uint64_t v43[3] = &unk_1E6230AD0;
    v43[4] = &v44;
    v43[5] = v3;
    int v19 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v3 + 56))(v3);
    HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v43);
    if (*((unsigned char *)v45 + 24))
    {
      *(_WORD *)uint64_t v42 = 0;
      HALS_PlugInDevice::UpdateStreams((HALS_PlugInDevice *)v3, v42);
    }
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v61, "com.apple.coreaudio", "AMCP");
    uint64_t v26 = **(NSObject ***)v61;
    if (*(void *)&v61[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v61[8]);
    }
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = pthread_self();
      mach_port_t v28 = pthread_mach_thread_np(v27);
      *(_DWORD *)unint64_t v61 = 67109634;
      *(_DWORD *)&v61[4] = v28;
      *(_WORD *)&v61[8] = 2080;
      *(void *)&v61[10] = "HALS_PlugInDevice.cpp";
      __int16 v62 = 1024;
      LODWORD(v63) = 2200;
      _os_log_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_INFO, "%6u %32s:%-5d The device is no longer active after performing the config change, skip updating the device", v61, 0x18u);
    }
    _Block_object_dispose(&v44, 8);
    *(void *)unint64_t v61 = v67;
    std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*(void **)&buf[16]);
    uint64_t v29 = *(void *)(v3 + 1416);
    if (v29) {
      (*(void (**)(uint64_t))(*(void *)v29 + 936))(v29);
    }
    *(void *)unint64_t v61 = 0;
    *(void *)&v61[8] = 0;
    HALS_System::GetInstance(buf, 0, (uint64_t *)v61);
    HALS_IOContext_Manager::rebuild_engine_for_device(*(HALS_IOContext_Manager **)(*(void *)buf + 1392), (const HALS_IODevice *)v3);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2295;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v3 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- sending notifications", buf, 0x1Cu);
    }
    if (!v6 && v4 == 4444)
    {
      strcpy(buf, "tsivbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v58, (AudioObjectPropertyAddress *)buf, v30);
      strcpy(buf, "TaPsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v58, (AudioObjectPropertyAddress *)buf, v31);
      strcpy(buf, "CaPsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v58, (AudioObjectPropertyAddress *)buf, v32);
      strcpy(buf, "#mtsbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&v58, (AudioObjectPropertyAddress *)buf, v33);
    }
    kdebug_trace();
    HALS_NotificationManager::GroupPropertiesChanged(1, *(_DWORD *)(v3 + 16), v7, (uint64_t)&v58, v57, (uint64_t)&__p);
    AudioObjectPropertyAddress v34 = v54;
    long long v35 = v55;
    if (v54 != v55)
    {
      uint64_t v36 = v54;
      do
        HALS_NotificationManager::GroupPropertiesChanged(1, *v36++, v7, (uint64_t)&v58, v57, (uint64_t)&__p);
      while (v36 != v35);
    }
    kdebug_trace();
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2317;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v3 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  --- restarting IO", buf, 0x1Cu);
    }
    uint64_t v37 = *(void *)(v3 + 1416);
    if (v37)
    {
      (*(void (**)(uint64_t, long long *))(*(void *)v37 + 232))(v37, &v58);
      (*(void (**)(void, void **))(**(void **)(v3 + 1416) + 224))(*(void *)(v3 + 1416), &__p);
    }
    uint64_t v44 = 0;
    char v45 = 0;
    HALS_System::GetInstance(buf, 0, &v44);
    uint64_t v38 = (os_unfair_lock_s *)(*(void *)(*(void *)buf + 1392) + 16);
    os_unfair_lock_lock(v38);
    os_unfair_lock_unlock(v38);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    v60[0] = 0;
    v60[1] = 0;
    HALS_System::GetInstance(buf, 0, v60);
    HALS_IOContext_Manager::resume_contexts_for_device(*(os_unfair_lock_s **)(*(void *)buf + 1392), (HALS_IODevice *)v3);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    v41[0] = 0;
    v41[1] = 0;
    HALS_System::GetInstance(buf, 0, v41);
    HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)buf);
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (__p)
    {
      std::logic_error v50 = __p;
      operator delete(__p);
    }
    if (v34) {
      operator delete(v34);
    }
    *(void *)os_workgroup_interval_data_opaque_s buf = v57;
    std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    if ((void)v58)
    {
      *((void *)&v58 + 1) = v58;
      operator delete((void *)v58);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2337;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&unsigned char buf[20] = v3 + 156;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: %s  <---", buf, 0x1Cu);
    }
    kdebug_trace();
  }
  else
  {
    BOOL v21 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v21)
      {
        int v23 = *(_DWORD *)(a1 + 60);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
        *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
        *(_WORD *)&uint8_t buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2122;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v23;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: Device %u is no longer valid, calling abort config change", buf, 0x18u);
      }
      if (*(unsigned char *)(a1 + 48))
      {
        uint64_t v24 = *((void *)v2 + 50);
        unint64_t v25 = (std::__shared_weak_count *)*((void *)v2 + 51);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void, void, void))(*(void *)v24 + 104))(v24, *(unsigned int *)(a1 + 68), *(void *)(a1 + 32), *(void *)(a1 + 40));
        if (v25) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        }
      }
    }
    else if (v21)
    {
      int v40 = *(_DWORD *)(a1 + 60);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
      *(_WORD *)&uint8_t buf[12] = 1024;
      *(_DWORD *)&buf[14] = 2132;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = v40;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange: Failed to perform or abort config change request for device %u", buf, 0x18u);
    }
  }
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v3, v22);
  HALS_ObjectMap::ReleaseObject(v2, v39);
}

void sub_1BAB44634(_Unwind_Exception *exception_object, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  if (a2)
  {
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    HALS_ObjectMap::ReleaseObject(v39, a2);
    HALS_ObjectMap::ReleaseObject(v38, v42);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAB4451CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAB44828()
{
}

uint64_t ___ZN17HALS_PlugInDevice33_HandlePlugIn_RequestConfigChangeENS_19ConfigChangePayloadEj_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 40))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void HALS_PlugInDevice::UpdateStreams(HALS_PlugInDevice *this, BOOL *a2)
{
  *(_WORD *)a2 = 0;
  uint64_t v3 = *((void *)this + 164);
  uint64_t v4 = *(void *)(v3 + 400);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 408);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v10 = 0;
  uint64_t v6 = *((unsigned int *)this + 331);
  uint64_t v8 = 0x6F75747073746D23;
  LODWORD(v9) = 0;
  unsigned int v7 = (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void))(*(void *)v4 + 568))(v4, v6, 0, &v8, 0, 0) >> 2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned int v10 = v7;
  operator new[]();
}

void sub_1BAB44E78(void *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB44B0CLL);
}

void sub_1BAB44E98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44)
{
  MEMORY[0x1C1859810](v45, 0x1000C8052888210);
  MEMORY[0x1C1859810](v44, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

void HALS_PlugInDevice::UpdateControls(HALS_PlugInDevice *this, BOOL *a2)
{
  *a2 = 0;
  uint64_t v3 = *((void *)this + 164);
  uint64_t v4 = *(void *)(v3 + 400);
  uint64_t v5 = *(std::__shared_weak_count **)(v3 + 408);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *((unsigned int *)this + 331);
  uint64_t v8 = 0x676C6F626374726CLL;
  LODWORD(v9) = 0;
  unsigned int v7 = (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void))(*(void *)v4 + 568))(v4, v6, 0, &v8, 0, 0) >> 2;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unsigned int v10 = v7;
  operator new[]();
}

void sub_1BAB45330(void *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB45114);
}

void sub_1BAB45350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34)
{
  MEMORY[0x1C1859810](v34, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__11(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__12(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN17HALS_PlugInDevice14UpdateControlsERb_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v53 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v5 = *(uint64_t **)(v2 + 1392);
  uint64_t v6 = *(uint64_t **)(v2 + 1400);
  if (v5 == v6)
  {
    char v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    char v8 = 0;
    do
    {
      uint64_t v9 = *v5;
      *(unsigned char *)(v9 + 13) = 0;
      if (*(_DWORD *)(v9 + 60) == 1) {
        uint64_t v7 = v9;
      }
      else {
        v8 |= *(_DWORD *)(v9 + 20) == 1702259059;
      }
      ++v5;
    }
    while (v5 != v6);
  }
  if (v1)
  {
    for (uint64_t i = 0; i != v1; ++i)
    {
      int v11 = *(uint64_t **)(v2 + 1392);
      uint64_t v12 = (uint64_t)(*(void *)(v2 + 1400) - (void)v11) >> 3;
      while (v12)
      {
        uint64_t v14 = *v11++;
        uint64_t v13 = v14;
        --v12;
        if (*(_DWORD *)(v14 + 92) == *(_DWORD *)(v3 + 4 * i) && v13 != 0)
        {
          *(unsigned char *)(v13 + 13) = 1;
          goto LABEL_28;
        }
      }
      uint64_t v16 = *(unsigned int *)(v3 + 4 * i);
      if (v16)
      {
        uint64_t v17 = *(void *)(v2 + 1312);
        int v18 = *(HALS_UCPlugInBase **)(v17 + 400);
        int v19 = *(std::__shared_weak_count **)(v17 + 408);
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HALS_UCPlugInBase::Object_GetClass(v18, v16);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        uint64_t v20 = *(void *)(v2 + 1312);
        BOOL v21 = *(HALS_UCPlugInBase **)(v20 + 400);
        long long v22 = *(std::__shared_weak_count **)(v20 + 408);
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        HALS_UCPlugInBase::Object_GetBaseClass(v21, v16);
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        operator new();
      }
LABEL_28:
      ;
    }
  }
  if ((v8 & 1) == 0 && *(void *)(v2 + 1352) != *(void *)(v2 + 1344))
  {
    if ((*(void *)(v2 + 448) & 0xFF00000000) == 0 || *(void *)(v2 + 448) != 1 || !v7) {
      operator new();
    }
    *(unsigned char *)(v7 + 13) = 1;
  }
  int v23 = (char **)(v2 + 1392);
  uint64_t v24 = *(char **)(v2 + 1400);
  unint64_t v25 = *(char **)(v2 + 1392);
  if (v24 == v25)
  {
    unint64_t v25 = *(char **)(v2 + 1400);
    uint64_t v28 = v53;
  }
  else
  {
    uint64_t v26 = 0;
    unsigned int v27 = 0;
    uint64_t v28 = v53;
    do
    {
      uint64_t v29 = *(HALS_ObjectMap **)&v25[8 * v26];
      if (*((unsigned char *)v29 + 13))
      {
        ++v27;
      }
      else
      {
        *(unsigned char *)(v53 + 24) = 1;
        (*(void (**)(HALS_ObjectMap *))(*(void *)v29 + 8))(v29);
        HALS_ObjectMap::ObjectIsDead(v29, v30);
        unint64_t v25 = *(char **)(v2 + 1392);
        long long v31 = &v25[8 * v26];
        uint64_t v32 = *(char **)(v2 + 1400);
        int64_t v33 = v32 - (v31 + 8);
        if (v32 != v31 + 8)
        {
          memmove(&v25[8 * v26], v31 + 8, v32 - (v31 + 8));
          unint64_t v25 = *v23;
        }
        uint64_t v24 = &v31[v33];
        *(void *)(v2 + 1400) = v24;
      }
      uint64_t v26 = v27;
    }
    while (v27 < (unint64_t)((v24 - v25) >> 3));
  }
  long long v35 = *(uint64_t **)(v4 + 40);
  uint64_t v34 = *(uint64_t **)(v4 + 48);
  if (v34 != v35)
  {
    do
    {
      uint64_t v36 = *v35;
      *(unsigned char *)(v28 + 24) = 1;
      unint64_t v37 = *(void *)(v2 + 1408);
      if ((unint64_t)v24 >= v37)
      {
        uint64_t v38 = (v24 - *v23) >> 3;
        if ((unint64_t)(v38 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v39 = v37 - (void)*v23;
        uint64_t v40 = v39 >> 2;
        if (v39 >> 2 <= (unint64_t)(v38 + 1)) {
          uint64_t v40 = v38 + 1;
        }
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v41 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v40;
        }
        if (v41) {
          unint64_t v41 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v41);
        }
        else {
          uint64_t v42 = 0;
        }
        uint64_t v43 = (void *)(v41 + 8 * v38);
        void *v43 = v36;
        uint64_t v24 = (char *)(v43 + 1);
        uint64_t v44 = *(char **)(v2 + 1400);
        uint64_t v45 = *(char **)(v2 + 1392);
        if (v44 != v45)
        {
          do
          {
            uint64_t v46 = *((void *)v44 - 1);
            v44 -= 8;
            *--uint64_t v43 = v46;
          }
          while (v44 != v45);
          uint64_t v44 = *v23;
        }
        *(void *)(v2 + 1392) = v43;
        *(void *)(v2 + 1400) = v24;
        *(void *)(v2 + 1408) = v41 + 8 * v42;
        if (v44) {
          operator delete(v44);
        }
      }
      else
      {
        *(void *)uint64_t v24 = v36;
        v24 += 8;
      }
      *(void *)(v2 + 1400) = v24;
      ++v35;
    }
    while (v35 != v34);
    unint64_t v25 = *v23;
  }
  if (v25 != v24)
  {
    char v47 = v25;
    while (*(_DWORD *)(*(void *)v47 + 20) != 1702259059)
    {
      v47 += 8;
      if (v47 == v24) {
        goto LABEL_71;
      }
    }
    *(_DWORD *)(v2 + 448) = *(_DWORD *)(*(void *)v47 + 60);
    *(unsigned char *)(v2 + 452) = 1;
  }
LABEL_71:
  uint64_t v48 = *(void *)(*(void *)(a1 + 48) + 8);
  if (v23 != (char **)(v48 + 40)) {
    std::vector<HALS_IOUAControl *>::__assign_with_size[abi:ne180100]<HALS_IOUAControl **,HALS_IOUAControl **>((void *)(v48 + 40), v25, v24, (v24 - v25) >> 3);
  }
  std::string v49 = *(HALS_ObjectMap ***)(v48 + 40);
  std::logic_error v50 = *(HALS_ObjectMap ***)(v48 + 48);
  while (v49 != v50)
  {
    uint64_t v51 = *v49++;
    HALS_ObjectMap::RetainObject(v51, (HALS_Object *)v25);
  }
}

void sub_1BAB45A24(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10E1C402F24237BLL);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__1042(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__1043(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

void ___ZN17HALS_PlugInDevice13UpdateStreamsEPb_block_invoke(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(void *)(a1 + 80);
  int v4 = *(_DWORD *)(a1 + 96);
  int v5 = *(_DWORD *)(a1 + 100);
  uint64_t v6 = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v9 = *(void *)(v8 + 40);
  uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v100 = v10 + 40;
  unsigned int v97 = (uint64_t *)(v7 + 40);
  uint64_t v98 = (uint64_t *)(v8 + 40);
  *(void *)(v7 + 48) = *(void *)(v7 + 40);
  *(void *)(v8 + 48) = v9;
  char v11 = 1;
  do
  {
    char v12 = v11;
    uint64_t v13 = v2 + 24 * v1;
    uint64_t v14 = *(void *)(v13 + 1352);
    uint64_t v15 = *(uint64_t **)(v13 + 1344);
    uint64_t v16 = v14 - (void)v15;
    if (((v14 - (void)v15) & 0x7FFFFFFF8) != 0)
    {
      uint64_t v17 = v16 >> 3;
      uint64_t v18 = ((unint64_t)v16 >> 3);
      do
      {
        if (!v17) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v19 = *v15++;
        *(unsigned char *)(v19 + 13) = 0;
        --v17;
        --v18;
      }
      while (v18);
    }
    char v11 = 0;
    *(unsigned char *)(v100 + v1) = 0;
    uint64_t v1 = 1;
  }
  while ((v12 & 1) != 0);
  uint64_t v20 = *(void *)(v2 + 448);
  BOOL IsEnabledForAnyClientOrContext = HALS_ReferenceStreamStateManager::ReferenceStreamIsEnabledForAnyClientOrContext(*(std::__shared_mutex_base **)(v2 + 440));
  uint64_t v22 = v10 + 41;
  int v23 = (char *)operator new(0x50uLL);
  uint64_t v24 = v23;
  uint64_t v96 = v23 + 80;
  *(_DWORD *)int v23 = 0;
  *((_DWORD *)v23 + 1) = v4;
  *((void *)v23 + 1) = v3;
  *((void *)v23 + 2) = 0;
  *((void *)v23 + 3) = v97;
  *((void *)v23 + 4) = v100;
  *((_DWORD *)v23 + 10) = 1;
  *((_DWORD *)v23 + 11) = v5;
  *((void *)v23 + 6) = v6;
  *((void *)v23 + 7) = 1;
  *((void *)v23 + 8) = v98;
  *((void *)v23 + 9) = v22;
  if ((v20 & 0xFF00000000) != 0 && v20 == 1)
  {
    if (IsEnabledForAnyClientOrContext)
    {
      unint64_t v25 = (char *)operator new(0xA0uLL);
      uint64_t v26 = v25;
      *((_DWORD *)v25 + 20) = 0;
      *((_DWORD *)v25 + 21) = v4;
      *((void *)v25 + 11) = v3;
      *((void *)v25 + 12) = 0x100000001;
      *((void *)v25 + 13) = v98;
      *((void *)v25 + 14) = v22;
      uint64_t v96 = v25 + 120;
      for (uint64_t i = 40; i != -40; i -= 40)
      {
        uint64_t v28 = &v25[i];
        long long v29 = *(_OWORD *)&v24[i + 16];
        *(_OWORD *)uint64_t v28 = *(_OWORD *)&v24[i];
        *((_OWORD *)v28 + 1) = v29;
        *((void *)v28 + 4) = *(void *)&v24[i + 32];
      }
      operator delete(v24);
    }
    else
    {
      uint64_t v26 = v23;
    }
  }
  else
  {
    uint64_t v26 = v23;
  }
  __p = v26;
  do
  {
    uint64_t v99 = v26;
    uint64_t v30 = *((unsigned int *)v26 + 1);
    if (v30)
    {
      uint64_t v31 = 0;
      uint64_t v32 = *((void *)v26 + 1);
      int v33 = *((_DWORD *)v26 + 5);
      do
      {
        uint64_t v34 = 0;
        for (char j = 1; ; char j = 0)
        {
          char v36 = j;
          uint64_t v37 = v2 + 24 * v34;
          uint64_t v38 = *(void *)(v37 + 1352);
          uint64_t v39 = *(void *)(v37 + 1344);
          uint64_t v40 = v38 - v39;
          if (v40) {
            break;
          }
LABEL_24:
          uint64_t v34 = 1;
          if ((v36 & 1) == 0) {
            operator new();
          }
        }
        uint64_t v41 = 0;
        unint64_t v42 = v40 >> 3;
        unsigned int v43 = 1;
        while (1)
        {
          uint64_t v44 = *(void *)(v39 + 8 * v41);
          if (*(_DWORD *)(v44 + 84) == *(_DWORD *)(v32 + 4 * v31) && *(_DWORD *)(v44 + 56) == v33) {
            break;
          }
          uint64_t v41 = v43;
          if (v42 <= v43++) {
            goto LABEL_24;
          }
        }
        *(unsigned char *)(v44 + 13) = 1;
        ++v31;
      }
      while (v31 != v30);
    }
    v26 += 40;
  }
  while (v99 + 40 != v96);
  uint64_t v46 = 0;
  char v47 = 1;
  do
  {
    char v48 = v47;
    uint64_t v49 = v2 + 24 * v46;
    uint64_t v50 = *(void *)(v49 + 1352);
    unint64_t v51 = v50 - *(void *)(v49 + 1344);
    if ((v51 & 0x7FFFFFFF8) != 0)
    {
      uint64_t v52 = (void *)(v49 + 1344);
      uint64_t v53 = (const void **)(v49 + 1352);
      uint64_t v54 = (v51 >> 3);
      do
      {
        uint64_t v55 = v54 - 1;
        if (v54 - 1 >= (unint64_t)((v50 - *v52) >> 3)) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v56 = *(HALS_ObjectMap **)(*v52 + 8 * v55);
        if (!*((unsigned char *)v56 + 13))
        {
          (*(void (**)(void))(*(void *)v56 + 8))(*(void *)(*v52 + 8 * v55));
          HALS_ObjectMap::ObjectIsDead(v56, v57);
          uint64_t v58 = *v52 + 8 * v55;
          long long v59 = (unsigned char *)(*v52 + 8 * v54);
          int64_t v60 = (unsigned char *)*v53 - v59;
          if (*v53 != v59) {
            memmove((void *)(*v52 + 8 * v55), v59, (unsigned char *)*v53 - v59);
          }
          uint64_t v50 = v58 + v60;
          *uint64_t v53 = (const void *)(v58 + v60);
          *(unsigned char *)(v100 + v46) = 1;
        }
        uint64_t v54 = v55;
      }
      while (v55);
    }
    char v47 = 0;
    uint64_t v46 = 1;
  }
  while ((v48 & 1) != 0);
  uint64_t v61 = 0;
  char v62 = 1;
  do
  {
    char v101 = v62;
    if (v62) {
      uint64_t v63 = v97;
    }
    else {
      uint64_t v63 = v98;
    }
    uint64_t v64 = *v63;
    uint64_t v65 = v63[1] - *v63;
    if ((v65 & 0x7FFFFFFF8) != 0)
    {
      unint64_t v66 = 0;
      unint64_t v67 = v65 >> 3;
      uint64_t v68 = v2 + 24 * v61;
      uint64_t v69 = (void *)(v68 + 1344);
      int v70 = (void **)(v68 + 1352);
      char v71 = (void *)(v68 + 1360);
      do
      {
        if (v67 <= v66) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v72 = *(void *)(v64 + 8 * v66);
        __int16 v73 = *v70;
        if ((unint64_t)*v70 >= *v71)
        {
          uint64_t v75 = ((uint64_t)v73 - *v69) >> 3;
          if ((unint64_t)(v75 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v76 = *v71 - *v69;
          uint64_t v77 = v76 >> 2;
          if (v76 >> 2 <= (unint64_t)(v75 + 1)) {
            uint64_t v77 = v75 + 1;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v78 = v77;
          }
          if (v78) {
            unint64_t v78 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v78);
          }
          else {
            uint64_t v79 = 0;
          }
          uint64_t v80 = (void *)(v78 + 8 * v75);
          *uint64_t v80 = v72;
          int v74 = v80 + 1;
          long long v81 = *v70;
          unint64_t v82 = (void *)*v69;
          if (*v70 != (void *)*v69)
          {
            do
            {
              uint64_t v83 = *--v81;
              *--uint64_t v80 = v83;
            }
            while (v81 != v82);
            long long v81 = (void *)*v69;
          }
          void *v69 = v80;
          *int v70 = v74;
          *char v71 = v78 + 8 * v79;
          if (v81) {
            operator delete(v81);
          }
        }
        else
        {
          void *v73 = v72;
          int v74 = v73 + 1;
        }
        *int v70 = v74;
        ++v66;
        uint64_t v64 = *v63;
        unint64_t v67 = (v63[1] - *v63) >> 3;
      }
      while (v66 < v67);
    }
    char v62 = 0;
    uint64_t v61 = 1;
  }
  while ((v101 & 1) != 0);
  uint64_t v84 = 0;
  char v85 = 1;
  do
  {
    char v86 = v85;
    uint64_t v87 = v2 + 24 * v84;
    uint64_t v88 = *(void *)(v87 + 1344);
    v89 = *(const HALS_Stream ***)(v87 + 1352);
    unint64_t v90 = 126 - 2 * __clz(((uint64_t)v89 - v88) >> 3);
    if (v89 == (const HALS_Stream **)v88) {
      uint64_t v91 = 0;
    }
    else {
      uint64_t v91 = v90;
    }
    std::__introsort<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **,false>(v88, v89, v91, 1);
    char v85 = 0;
    uint64_t v84 = 1;
  }
  while ((v86 & 1) != 0);
  BOOL v92 = *(void *)(v2 + 1352) == *(void *)(v2 + 1344) && *(void *)(v2 + 1376) != *(void *)(v2 + 1368);
  *(unsigned char *)(v2 + 432) = v92;
  operator delete(__p);
  HALS_PlugInDevice::_CopyStreamList(v2, 0, *(void *)(*(void *)(a1 + 56) + 8) + 40);
  uint64_t v93 = *(void *)(*(void *)(a1 + 64) + 8) + 40;

  HALS_PlugInDevice::_CopyStreamList(v2, (HALS_Object *)1, v93);
}

void sub_1BAB46284(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
}

void HALS_PlugInDevice::_CopyStreamList(uint64_t a1, HALS_Object *a2, uint64_t a3)
{
  int v4 = (const void **)(a1 + 24 * a2 + 1344);
  int v5 = *(HALS_ObjectMap ***)a3;
  if (v4 == (const void **)a3)
  {
    uint64_t v13 = *(HALS_ObjectMap ***)(a3 + 8);
    goto LABEL_24;
  }
  uint64_t v6 = (char *)*v4;
  uint64_t v7 = *(char **)(a1 + 24 * a2 + 1352);
  int64_t v8 = v7 - (unsigned char *)*v4;
  unint64_t v9 = v8 >> 3;
  uint64_t v10 = *(void *)(a3 + 16);
  if (v8 >> 3 <= (unint64_t)((v10 - (uint64_t)v5) >> 3))
  {
    uint64_t v14 = *(char **)(a3 + 8);
    unint64_t v15 = (v14 - (char *)v5) >> 3;
    if (v15 < v9)
    {
      uint64_t v16 = &v6[8 * v15];
      if (v14 != (char *)v5)
      {
        memmove(v5, v6, v14 - (char *)v5);
        int v5 = *(HALS_ObjectMap ***)(a3 + 8);
      }
      int64_t v8 = v7 - v16;
      if (v7 == v16) {
        goto LABEL_22;
      }
      uint64_t v17 = v5;
      uint64_t v18 = v16;
      goto LABEL_21;
    }
  }
  else
  {
    if (v5)
    {
      *(void *)(a3 + 8) = v5;
      operator delete(v5);
      uint64_t v10 = 0;
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
    }
    if (v8 < 0) {
      goto LABEL_26;
    }
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= v9) {
      uint64_t v11 = v8 >> 3;
    }
    unint64_t v12 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61) {
LABEL_26:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    int v5 = (HALS_ObjectMap **)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    *(void *)a3 = v5;
    *(void *)(a3 + 8) = v5;
    *(void *)(a3 + 16) = &v5[(void)a2];
  }
  if (v7 != v6)
  {
    uint64_t v17 = v5;
    uint64_t v18 = v6;
LABEL_21:
    memmove(v17, v18, v8);
  }
LABEL_22:
  uint64_t v13 = (HALS_ObjectMap **)((char *)v5 + v8);
  *(void *)(a3 + 8) = v13;
  int v5 = *(HALS_ObjectMap ***)a3;
LABEL_24:
  while (v5 != v13)
  {
    uint64_t v19 = *v5++;
    HALS_ObjectMap::RetainObject(v19, a2);
  }
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **,false>(uint64_t result, const HALS_Stream **a2, uint64_t a3, char a4)
{
  unint64_t v9 = (const HALS_Stream **)result;
LABEL_2:
  uint64_t v91 = a2 - 2;
  uint64_t v93 = a2 - 1;
  unint64_t v90 = a2 - 3;
  uint64_t v10 = v9;
  while (1)
  {
    unint64_t v9 = v10;
    uint64_t v11 = (char *)a2 - (char *)v10;
    uint64_t v12 = a2 - v10;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0:
        case 1:
          return result;
        case 2:
          __n128 result = StreamLessThan(*v93, *v9);
          if (result)
          {
            uint64_t v38 = *v9;
            HALS_NotificationManager *v9 = *v93;
            _DWORD *v93 = v38;
          }
          break;
        case 3:
          __n128 result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v93);
          break;
        case 4:
          __n128 result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v9 + 2, v93);
          break;
        case 5:
          uint64_t v39 = v9 + 2;
          uint64_t v40 = v9 + 3;
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v9 + 1, v9 + 2, v9 + 3);
          __n128 result = StreamLessThan(*v93, v9[3]);
          if (result)
          {
            uint64_t v41 = *v40;
            *uint64_t v40 = *v93;
            _DWORD *v93 = v41;
            __n128 result = StreamLessThan(*v40, *v39);
            if (result)
            {
              unint64_t v42 = *v39;
              unsigned int v43 = *v40;
              *uint64_t v39 = *v40;
              *uint64_t v40 = v42;
              __n128 result = StreamLessThan(v43, v9[1]);
              if (result)
              {
                uint64_t v45 = v9[1];
                uint64_t v44 = v9[2];
                uint64_t v46 = *v9;
                v9[1] = v44;
                void v9[2] = v45;
                __n128 result = StreamLessThan(v44, v46);
                if (result) {
                  *(int8x16_t *)unint64_t v9 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v11 <= 191) {
      break;
    }
    if (!a3)
    {
      if (v9 == a2) {
        return result;
      }
      int64_t v57 = (unint64_t)(v12 - 2) >> 1;
      int64_t v58 = v57;
      BOOL v92 = a2;
      do
      {
        int64_t v59 = v58;
        if (v57 >= v58)
        {
          uint64_t v60 = (2 * v58) | 1;
          uint64_t v61 = &v9[v60];
          if (2 * v58 + 2 < v12)
          {
            BOOL v62 = StreamLessThan(*v61, v61[1]);
            if (v62) {
              ++v61;
            }
            int64_t v57 = (unint64_t)(v12 - 2) >> 1;
            if (v62) {
              uint64_t v60 = 2 * v59 + 2;
            }
          }
          uint64_t v63 = &v9[v59];
          __n128 result = StreamLessThan(*v61, *v63);
          if ((result & 1) == 0)
          {
            uint64_t v64 = *v63;
            do
            {
              uint64_t v65 = v63;
              uint64_t v63 = v61;
              *uint64_t v65 = *v61;
              if (v57 < v60) {
                break;
              }
              uint64_t v66 = (2 * v60) | 1;
              uint64_t v61 = &v9[v66];
              uint64_t v67 = 2 * v60 + 2;
              if (v67 < v12)
              {
                BOOL v68 = StreamLessThan(*v61, v61[1]);
                if (v68) {
                  ++v61;
                }
                int64_t v57 = (unint64_t)(v12 - 2) >> 1;
                if (v68) {
                  uint64_t v66 = v67;
                }
              }
              __n128 result = StreamLessThan(*v61, v64);
              uint64_t v60 = v66;
            }
            while (!result);
            *uint64_t v63 = v64;
          }
        }
        int64_t v58 = v59 - 1;
      }
      while (v59);
      uint64_t v69 = (unint64_t)v11 >> 3;
      int v70 = v92;
      while (2)
      {
        char v71 = v70;
        uint64_t v72 = 0;
        __int16 v73 = *v9;
        int v74 = v9;
        do
        {
          uint64_t v75 = &v74[v72 + 1];
          uint64_t v76 = (2 * v72) | 1;
          uint64_t v77 = 2 * v72 + 2;
          if (v77 < v69)
          {
            __n128 result = StreamLessThan(*v75, v74[v72 + 2]);
            if (result)
            {
              ++v75;
              uint64_t v76 = v77;
            }
          }
          *int v74 = *v75;
          int v74 = v75;
          uint64_t v72 = v76;
        }
        while (v76 <= (uint64_t)((unint64_t)(v69 - 2) >> 1));
        unint64_t v78 = v71 - 1;
        if (v75 != v78)
        {
          *uint64_t v75 = *v78;
          int v70 = v78;
          *unint64_t v78 = v73;
          uint64_t v79 = (char *)v75 - (char *)v9 + 8;
          if (v79 >= 9)
          {
            unint64_t v80 = (((unint64_t)v79 >> 3) - 2) >> 1;
            long long v81 = &v9[v80];
            __n128 result = StreamLessThan(*v81, *v75);
            if (result)
            {
              __int16 v73 = *v75;
              do
              {
                unint64_t v82 = v75;
                uint64_t v75 = v81;
                *unint64_t v82 = *v81;
                if (!v80) {
                  break;
                }
                unint64_t v80 = (v80 - 1) >> 1;
                long long v81 = &v9[v80];
                __n128 result = StreamLessThan(*v81, v73);
              }
              while ((result & 1) != 0);
LABEL_117:
              *uint64_t v75 = v73;
            }
          }
          if (v69-- <= 2) {
            return result;
          }
          continue;
        }
        break;
      }
      int v70 = v78;
      goto LABEL_117;
    }
    unint64_t v13 = (unint64_t)v12 >> 1;
    uint64_t v14 = &v9[(unint64_t)v12 >> 1];
    if ((unint64_t)v11 < 0x401)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14, v9, v93);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v14, v93);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9 + 1, v14 - 1, v91);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9 + 2, &v9[v13 + 1], v90);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v14 - 1, v14, &v9[v13 + 1]);
      unint64_t v15 = *v9;
      HALS_NotificationManager *v9 = *v14;
      *uint64_t v14 = v15;
    }
    --a3;
    if ((a4 & 1) != 0 || StreamLessThan(*(v9 - 1), *v9))
    {
      uint64_t v16 = *v9;
      uint64_t v17 = v9;
      do
      {
        uint64_t v18 = v17;
        uint64_t v19 = v17[1];
        ++v17;
      }
      while (StreamLessThan(v19, v16));
      uint64_t v20 = a2;
      if (v18 == v9)
      {
        do
        {
          if (v17 >= a2) {
            break;
          }
          uint64_t v22 = *--a2;
        }
        while (!StreamLessThan(v22, v16));
      }
      else
      {
        do
          BOOL v21 = *--a2;
        while (!StreamLessThan(v21, v16));
      }
      if (v17 < a2)
      {
        int v23 = v17;
        uint64_t v24 = a2;
        do
        {
          unint64_t v25 = *v23;
          *int v23 = *v24;
          *uint64_t v24 = v25;
          do
          {
            uint64_t v18 = v23;
            uint64_t v26 = v23[1];
            ++v23;
          }
          while (StreamLessThan(v26, v16));
          do
            unsigned int v27 = *--v24;
          while (!StreamLessThan(v27, v16));
        }
        while (v23 < v24);
      }
      if (v18 != v9) {
        HALS_NotificationManager *v9 = *v18;
      }
      *uint64_t v18 = v16;
      BOOL v4 = v17 >= a2;
      a2 = v20;
      if (!v4) {
        goto LABEL_31;
      }
      BOOL v28 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v9, v18);
      uint64_t v10 = v18 + 1;
      __n128 result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(v18 + 1, v20);
      if (result)
      {
        a2 = v18;
        if (v28) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v28)
      {
LABEL_31:
        __n128 result = std::__introsort<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **,false>(v9, v18, a3, a4 & 1);
        a4 = 0;
        uint64_t v10 = v18 + 1;
      }
    }
    else
    {
      long long v29 = *v9;
      __n128 result = StreamLessThan(*v9, *v93);
      if (result)
      {
        uint64_t v10 = v9;
        do
        {
          uint64_t v30 = v10[1];
          ++v10;
          __n128 result = StreamLessThan(v29, v30);
        }
        while ((result & 1) == 0);
      }
      else
      {
        uint64_t v31 = v9 + 1;
        do
        {
          uint64_t v10 = v31;
          if (v31 >= a2) {
            break;
          }
          ++v31;
          __n128 result = StreamLessThan(v29, *v10);
        }
        while (!result);
      }
      uint64_t v32 = a2;
      if (v10 < a2)
      {
        uint64_t v32 = a2;
        do
        {
          int v33 = *--v32;
          __n128 result = StreamLessThan(v29, v33);
        }
        while ((result & 1) != 0);
      }
      while (v10 < v32)
      {
        uint64_t v34 = *v10;
        const AudioObjectPropertyAddress *v10 = *v32;
        *uint64_t v32 = v34;
        do
        {
          long long v35 = v10[1];
          ++v10;
        }
        while (!StreamLessThan(v29, v35));
        do
        {
          char v36 = *--v32;
          __n128 result = StreamLessThan(v29, v36);
        }
        while ((result & 1) != 0);
      }
      uint64_t v37 = v10 - 1;
      BOOL v4 = v10 - 1 >= v9;
      BOOL v5 = v10 - 1 == v9;
      if (v10 - 1 != v9) {
        HALS_NotificationManager *v9 = *v37;
      }
      a4 = 0;
      NSObject *v37 = v29;
    }
  }
  char v47 = v9 + 1;
  BOOL v49 = v9 == a2 || v47 == a2;
  if (a4)
  {
    if (!v49)
    {
      uint64_t v50 = 0;
      unint64_t v51 = v9;
      do
      {
        uint64_t v53 = *v51;
        uint64_t v52 = v51[1];
        unint64_t v51 = v47;
        __n128 result = StreamLessThan(v52, v53);
        if (result)
        {
          uint64_t v54 = *v51;
          uint64_t v55 = v50;
          while (1)
          {
            *(const HALS_Stream **)((char *)v9 + v55 + 8) = *(const HALS_Stream **)((char *)v9 + v55);
            if (!v55) {
              break;
            }
            __n128 result = StreamLessThan(v54, *(const HALS_Stream **)((char *)v9 + v55 - 8));
            v55 -= 8;
            if ((result & 1) == 0)
            {
              uint64_t v56 = (const HALS_Stream **)((char *)v9 + v55 + 8);
              goto LABEL_81;
            }
          }
          uint64_t v56 = v9;
LABEL_81:
          *uint64_t v56 = v54;
        }
        char v47 = v51 + 1;
        v50 += 8;
      }
      while (v51 + 1 != a2);
    }
  }
  else if (!v49)
  {
    do
    {
      char v85 = *v9;
      uint64_t v84 = v9[1];
      unint64_t v9 = v47;
      __n128 result = StreamLessThan(v84, v85);
      if (result)
      {
        char v86 = *v9;
        uint64_t v87 = v9;
        do
        {
          uint64_t v88 = v87;
          v89 = *--v87;
          _DWORD *v88 = v89;
          __n128 result = StreamLessThan(v86, *(v88 - 2));
        }
        while ((result & 1) != 0);
        *uint64_t v87 = v86;
      }
      char v47 = v9 + 1;
    }
    while (v9 + 1 != a2);
  }
  return result;
}

BOOL std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(const HALS_Stream **a1, const HALS_Stream **a2, const HALS_Stream **a3)
{
  BOOL v6 = StreamLessThan(*a2, *a1);
  BOOL result = StreamLessThan(*a3, *a2);
  if (v6)
  {
    int64_t v8 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v8;
    }
    else
    {
      *a1 = *a2;
      *a2 = v8;
      BOOL result = StreamLessThan(*a3, v8);
      if (result)
      {
        uint64_t v11 = *a2;
        *a2 = *a3;
        *a3 = v11;
      }
    }
  }
  else if (result)
  {
    unint64_t v9 = *a2;
    *a2 = *a3;
    *a3 = v9;
    BOOL result = StreamLessThan(*a2, *a1);
    if (result)
    {
      uint64_t v10 = *a1;
      *a1 = *a2;
      *a2 = v10;
    }
  }
  return result;
}

BOOL std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(const HALS_Stream **a1, const HALS_Stream **a2, const HALS_Stream **a3, const HALS_Stream **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a2, a3);
  BOOL result = StreamLessThan(*a4, *a3);
  if (result)
  {
    unint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    BOOL result = StreamLessThan(*a3, *a2);
    if (result)
    {
      uint64_t v10 = *a2;
      *a2 = *a3;
      *a3 = v10;
      BOOL result = StreamLessThan(*a2, *a1);
      if (result)
      {
        uint64_t v11 = *a1;
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(const HALS_Stream **a1, const HALS_Stream **a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (StreamLessThan(*(a2 - 1), *a1))
      {
        BOOL v6 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      unint64_t v15 = a1 + 2;
      uint64_t v16 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2, a1 + 3);
      if (StreamLessThan(*(a2 - 1), a1[3]))
      {
        uint64_t v17 = *v16;
        *uint64_t v16 = *(a2 - 1);
        *(a2 - 1) = v17;
        if (StreamLessThan(*v16, *v15))
        {
          uint64_t v18 = *v15;
          uint64_t v19 = *v16;
          *unint64_t v15 = *v16;
          *uint64_t v16 = v18;
          if (StreamLessThan(v19, a1[1]))
          {
            BOOL v21 = a1[1];
            uint64_t v20 = a1[2];
            uint64_t v22 = *a1;
            a1[1] = v20;
            a1[2] = v21;
            if (StreamLessThan(v20, v22)) {
              *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v7 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,HALS_PlugInDevice::_UpdateStreams(unsigned int,unsigned int *,unsigned int,unsigned int *,std::vector<HALS_PlugInStream *> &,std::vector<HALS_PlugInStream *> &,std::array<BOOL,2ul> &)::$_0 &,HALS_PlugInStream **>(a1, a1 + 1, a1 + 2);
      int64_t v8 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    if (StreamLessThan(*v8, *v7))
    {
      uint64_t v11 = *v8;
      uint64_t v12 = v9;
      while (1)
      {
        unint64_t v13 = (const HALS_Stream **)((char *)a1 + v12);
        *(const HALS_Stream **)((char *)a1 + v12 + 24) = *(const HALS_Stream **)((char *)a1 + v12 + 16);
        if (v12 == -16) {
          break;
        }
        v12 -= 8;
        if (!StreamLessThan(v11, v13[1]))
        {
          uint64_t v14 = (const HALS_Stream **)((char *)a1 + v12 + 24);
          goto LABEL_13;
        }
      }
      uint64_t v14 = a1;
LABEL_13:
      *uint64_t v14 = v11;
      if (++v10 == 8) {
        return v8 + 1 == a2;
      }
    }
    uint64_t v7 = v8;
    v9 += 8;
    if (++v8 == a2) {
      return 1;
    }
  }
}

void HALS_PlugInDevice::_SetDSPForClient(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = 0x115CuLL;
  char v4 = 0;
  if (a3) {
    LODWORD(a3) = *(_DWORD *)(a3 + 16);
  }
  HALS_PlugInDevice::HandlePlugIn_RequestConfigChange(a1, &v3, a3);
}

void HALS_PlugInDevice::_ClientDescriptionChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 1312);
  uint64_t v5 = *(void *)(v4 + 400);
  BOOL v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(unsigned int *)(a1 + 1324);
  if (a2) {
    uint64_t v8 = *(unsigned int *)(a2 + 232);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t Mutable = 0x676C6F6263646573;
  int v25 = 0;
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v5 + 552))(v5, v7, v8, &Mutable);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 728))(a1);
    if (*(void *)(a1 + 536) == v10)
    {
      uint64_t Mutable = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      LOWORD(v25) = 257;
      CACFDictionary::AddUInt32((CFMutableDictionaryRef *)&Mutable, @"kind", 0);
      CFMutableDictionaryRef v23 = (CFMutableDictionaryRef)Mutable;
      uint64_t v16 = *(void *)(a1 + 1312);
      uint64_t v17 = *(void *)(v16 + 400);
      uint64_t v18 = *(std::__shared_weak_count **)(v16 + 408);
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = *(unsigned int *)(a1 + 1324);
      if (a2) {
        uint64_t v20 = *(unsigned int *)(a2 + 232);
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = 0x676C6F6263646573;
      int v22 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, CFMutableDictionaryRef *))(*(void *)v17 + 584))(v17, v19, v20, &v21, 0, 0, 8, &v23);
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
    }
    else
    {
      uint64_t v21 = *(void *)(v10 + 8);
      uint64_t v11 = *(void *)(a1 + 1312);
      uint64_t v12 = *(void *)(v11 + 400);
      unint64_t v13 = *(std::__shared_weak_count **)(v11 + 408);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(unsigned int *)(a1 + 1324);
      if (a2) {
        uint64_t v15 = *(unsigned int *)(a2 + 232);
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t Mutable = 0x676C6F6263646573;
      int v25 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void, void, uint64_t, uint64_t *))(*(void *)v12 + 584))(v12, v14, v15, &Mutable, 0, 0, 8, &v21);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
  }
}

void sub_1BAB47164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_PlugInDevice::_CopyControlByDescription(HALS_PlugInDevice *this, HALS_Object *a2, int a3, int a4)
{
  for (uint64_t i = (HALS_ObjectMap **)*((void *)this + 174); i != *((HALS_ObjectMap ***)this + 175); ++i)
  {
    uint64_t v5 = *i;
    if (*((_DWORD *)*i + 5) == a2 && *((_DWORD *)v5 + 12) == a3 && *((_DWORD *)v5 + 13) == a4) {
      goto LABEL_8;
    }
  }
  uint64_t v5 = 0;
LABEL_8:
  HALS_ObjectMap::RetainObject(v5, a2);
  return v5;
}

HALS_ObjectMap *HALS_PlugInDevice::_CopyControlByIndex(HALS_PlugInDevice *this, HALS_Object *a2)
{
  uint64_t v2 = *((void *)this + 174);
  if (a2 >= (unint64_t)((*((void *)this + 175) - v2) >> 3)) {
    long long v3 = 0;
  }
  else {
    long long v3 = *(HALS_ObjectMap **)(v2 + 8 * a2);
  }
  HALS_ObjectMap::RetainObject(v3, a2);
  return v3;
}

uint64_t HALS_PlugInDevice::_GetNumberControls(HALS_PlugInDevice *this)
{
  return (*((void *)this + 175) - *((void *)this + 174)) >> 3;
}

void HALS_PlugInDevice::_CopyControls(HALS_PlugInDevice *this, HALS_Device::BasicControlList *a2)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 174);
  long long v3 = (HALS_ObjectMap **)*((void *)this + 175);
  if (v2 != v3)
  {
    uint64_t v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      uint64_t v5 = *v2;
      uint64_t v7 = (HALS_ObjectMap **)*((void *)v4 + 1);
      unint64_t v6 = *((void *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((uint64_t)v7 - *(void *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - *(void *)v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        unint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        std::__shared_weak_count *v13 = v5;
        uint64_t v8 = v13 + 1;
        uint64_t v15 = *(char **)v4;
        uint64_t v14 = (char *)*((void *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            uint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--unint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = *(char **)v4;
        }
        *(void *)uint64_t v4 = v13;
        *((void *)v4 + 1) = v8;
        *((void *)v4 + 2) = v12 + 8 * (void)a2;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *uint64_t v7 = v5;
        uint64_t v8 = v7 + 1;
      }
      *((void *)v4 + 1) = v8;
      ++v2;
    }
    while (v2 != v3);
  }
}

void HALS_PlugInDevice::_CopyStreamList(uint64_t a1, unsigned int a2, void **a3)
{
  a3[1] = *a3;
  uint64_t v4 = a1 + 24 * a2;
  std::vector<void const*>::reserve(a3, (uint64_t)(*(void *)(v4 + 1352) - *(void *)(v4 + 1344)) >> 3);
  unint64_t v6 = *(HALS_ObjectMap ***)(v4 + 1344);
  for (uint64_t i = *(HALS_ObjectMap ***)(v4 + 1352); v6 != i; ++v6)
  {
    HALS_ObjectMap::RetainObject(*v6, v5);
    uint64_t v8 = *v6;
    uint64_t v10 = (HALS_ObjectMap **)a3[1];
    unint64_t v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 >= v9)
    {
      uint64_t v12 = ((char *)v10 - (unsigned char *)*a3) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v13 = v9 - (void)*a3;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v15);
      }
      else {
        uint64_t v5 = 0;
      }
      uint64_t v16 = (HALS_ObjectMap **)(v15 + 8 * v12);
      *uint64_t v16 = v8;
      uint64_t v11 = (char *)(v16 + 1);
      uint64_t v18 = (char *)*a3;
      uint64_t v17 = (char *)a3[1];
      if (v17 != *a3)
      {
        do
        {
          uint64_t v19 = (HALS_ObjectMap *)*((void *)v17 - 1);
          v17 -= 8;
          *--uint64_t v16 = v19;
        }
        while (v17 != v18);
        uint64_t v17 = (char *)*a3;
      }
      *a3 = v16;
      a3[1] = v11;
      a3[2] = (void *)(v15 + 8 * (void)v5);
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      const HALS_Stream *v10 = v8;
      uint64_t v11 = (char *)(v10 + 1);
    }
    a3[1] = v11;
  }
}

uint64_t HALS_PlugInDevice::_GetTotalNumberChannels(HALS_PlugInDevice *this, unsigned int a2)
{
  uint64_t v2 = (char *)this + 24 * a2;
  long long v3 = (HALS_Stream **)*((void *)v2 + 168);
  if (v3 == *((HALS_Stream ***)v2 + 169)) {
    return 0;
  }
  LODWORD(v4) = 0;
  uint64_t v5 = (HALS_Stream ***)(v2 + 1352);
  do
  {
    unint64_t v6 = *v3++;
    uint64_t v4 = HALS_Stream::GetNumberChannels(v6) + v4;
  }
  while (v3 != *v5);
  return v4;
}

uint64_t HALS_Stream::GetNumberChannels(HALS_Stream *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v5 = 0x676C6F6270667420;
  uint64_t v6 = 0;
  (*(void (**)(HALS_Stream *, uint64_t, uint64_t *, uint64_t, char *, unsigned char *, void, void, void))(*(void *)this + 112))(this, v1, &v5, 40, (char *)&v6 + 4, v3, 0, 0, 0);
  return v4;
}

uint64_t HALS_PlugInDevice::_CopyDefaultElementName(HALS_PlugInDevice *this, int a2, int a3)
{
  v14[0] = 1818454126;
  v14[1] = a2;
  uint64_t v14[2] = a3;
  uint64_t v4 = *((void *)this + 164);
  uint64_t v5 = *(void *)(v4 + 400);
  uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = (*(uint64_t (**)(uint64_t, void, void, _DWORD *))(*(void *)v5 + 552))(v5, *((unsigned int *)this + 331), 0, v14);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (!v7) {
    return 0;
  }
  uint64_t v8 = *((void *)this + 164);
  uint64_t v9 = *(void *)(v8 + 400);
  uint64_t v10 = *(std::__shared_weak_count **)(v8 + 408);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = *((unsigned int *)this + 331);
  uint64_t v16 = 0;
  int v15 = 0;
  (*(void (**)(uint64_t, uint64_t, void, _DWORD *, void, void, uint64_t, int *, uint64_t *))(*(void *)v9 + 576))(v9, v11, 0, v14, 0, 0, 8, &v15, &v16);
  uint64_t v12 = v16;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v12;
}

void sub_1BAB476B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_Device::GetAccessEntitlementName(HALS_Device *this)
{
  return *((void *)this + 16);
}

BOOL HALS_Device::HasAccessEntitlement(HALS_Device *this)
{
  return *((void *)this + 16) != 0;
}

uint64_t HALS_Device::IsolatedUseCaseID(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::MaximumPastData(HALS_Device *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F62646D7064;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_Device::AvailablePastData(HALS_Device *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F6264617064;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

BOOL HALS_Device::SupportsPastData(HALS_Device *this)
{
  uint64_t v2 = *((unsigned int *)this + 4);
  uint64_t v8 = 0x676C6F6264737064;
  int v9 = 0;
  int v3 = (*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t *, void))(*(void *)this + 88))(this, v2, &v8, 0);
  BOOL result = 0;
  if (v3)
  {
    uint64_t v5 = *((unsigned int *)this + 4);
    uint64_t v6 = 0x676C6F6264737064;
    int v7 = 0;
    int v11 = 0;
    int v10 = 0;
    (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)this + 112))(this, v5, &v6, 4, &v10, &v11, 0, 0, 0);
    return v11 != 0;
  }
  return result;
}

uint64_t HALS_PlugInDevice::_CopyIOEngine(HALS_PlugInDevice *this, HALS_Object *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)this + 5);
  int v3 = *((_DWORD *)this + 6);
  if (v4 == v3 || v4 == 1701733488)
  {
    if (v4 == 1701733488 || v4 != v3)
    {
LABEL_13:
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v9 = 136315394;
        int v10 = "HALS_PlugInDevice.cpp";
        __int16 v11 = 1024;
        int v12 = 846;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::_GetIOEngine: EndPoints shouldn't need engines", (uint8_t *)&v9, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
  }
  else if (v3 == 1701733488)
  {
    goto LABEL_13;
  }
  HALS_ObjectMap::RetainObject(*((HALS_ObjectMap **)this + 177), a2);
  return *((void *)this + 177);
}

HALS_ObjectMap *HALS_PlugInDevice::_CopyStreamByIndex(HALS_PlugInDevice *this, HALS_Object *a2, unsigned int a3)
{
  int v3 = (char *)this + 24 * a2;
  uint64_t v4 = *((void *)v3 + 169);
  uint64_t v5 = *((void *)v3 + 168);
  if (a3 >= (unint64_t)((v4 - v5) >> 3)) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(HALS_ObjectMap **)(v5 + 8 * a3);
  }
  HALS_ObjectMap::RetainObject(v6, a2);
  return v6;
}

uint64_t HALS_PlugInDevice::_GetNumberStreams(HALS_PlugInDevice *this, unsigned int a2)
{
  return (*((void *)this + 3 * a2 + 169) - *((void *)this + 3 * a2 + 168)) >> 3;
}

BOOL HALS_PlugInDevice::IsClockStable(HALS_PlugInDevice *this)
{
  uint64_t v5 = 0x676C6F6263737462;
  int v6 = 0;
  if (!(*(unsigned int (**)(HALS_PlugInDevice *, void, uint64_t *, void))(*(void *)this + 88))(this, *((unsigned int *)this + 4), &v5, 0))return 1; {
  int v3 = 4;
  }
  int v4 = 0;
  (*(void (**)(HALS_PlugInDevice *, void, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)this + 112))(this, *((unsigned int *)this + 4), &v5, 4, &v3, &v4, 0, 0, 0);
  return v4 != 0;
}

void sub_1BAB47B3C(void *a1)
{
}

uint64_t HALS_PlugInDevice::GetClockAlgorithm(HALS_PlugInDevice *this)
{
  uint64_t v2 = 1768518246;
  unsigned int v7 = 1768518246;
  uint64_t v5 = 0x676C6F62636C6F6BLL;
  int v6 = 0;
  if ((*(unsigned int (**)(HALS_PlugInDevice *, void, uint64_t *, void))(*(void *)this + 88))(this, *((unsigned int *)this + 4), &v5, 0))
  {
    int v4 = 4;
    (*(void (**)(HALS_PlugInDevice *, void, uint64_t *, uint64_t, int *, unsigned int *, void, void, void))(*(void *)this + 112))(this, *((unsigned int *)this + 4), &v5, 4, &v4, &v7, 0, 0, 0);
    return v7;
  }
  return v2;
}

void sub_1BAB47C18(void *a1)
{
}

uint64_t HALS_Device::GetClockDomain(HALS_Device *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F62636C6B64;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_Device *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

uint64_t HALS_PlugInDevice::create_mcp_engine(HALS_PlugInDevice *this)
{
  uint64_t v1 = *((void *)this + 164);
  int v3 = *((_DWORD *)this + 331);
  return (*(uint64_t (**)(void, uint64_t, HALS_PlugInDevice *, int *))(**(void **)(v1 + 400) + 152))(*(void *)(v1 + 400), v1, this, &v3);
}

uint64_t HALS_PlugInDevice::DoAnyQueuesHaveWorkAfterFlush(HALS_PlugInDevice *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 697);
  if ((v1 & 1) == 0)
  {
    unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 1017);
    if ((v2 & 1) == 0) {
      return 0;
    }
  }
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)this + 1465);
  return v4 & 1;
}

void HALS_PlugInDevice::FlushAllQueues(HALS_PlugInDevice *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_PlugInDevice *)((char *)this + 664));
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_PlugInDevice *)((char *)this + 984));

  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_PlugInDevice *)((char *)this + 1432));
}

const void *HALS_Device::CopyDeviceUID(HALS_Device *this)
{
  BOOL result = (const void *)*((void *)this + 12);
  if (result)
  {
    CFRetain(result);
    return (const void *)*((void *)this + 12);
  }
  return result;
}

uint64_t HALS_Device::GetDeviceUID(HALS_Device *this)
{
  return *((void *)this + 12);
}

uint64_t HALS_Device::WantsOwnedObjectPropertiesChanged(HALS_Device *this)
{
  return 1;
}

void HALS_PlugInDevice::SetPropertyData(HALS_PlugInDevice *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, uint64_t a4, _DWORD *a5, uint64_t a6, int *a7, HALS_Client *a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if (HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, a2))
  {
    if (!HALS_Device::IsHogModeOwnerOrFree(this, a8))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v51 = 136315394;
        uint64_t v52 = "HALS_PlugInDevice.cpp";
        __int16 v53 = 1024;
        int v54 = 1989;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: the given process does not own hog mode", (uint8_t *)&v51, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 560492391;
    }
    signed int mSelector = a3->mSelector;
  }
  if (mSelector > 1818850144)
  {
    if (mSelector > 1853059699)
    {
      if (mSelector == 1886546294)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            int v51 = 136315394;
            uint64_t v52 = "HALS_PlugInDevice.cpp";
            __int16 v53 = 1024;
            int v54 = 2015;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioEndPointDevicePropertyIsPrivate", (uint8_t *)&v51, 0x12u);
          }
          char v48 = __cxa_allocate_exception(0x10uLL);
          *(void *)char v48 = off_1F148A5D8;
          uint64_t v48[2] = 561211770;
        }
        uint64_t v31 = *((void *)this + 164);
        uint64_t v19 = *(void *)(v31 + 400);
        uint64_t v20 = *(std::__shared_weak_count **)(v31 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 331);
        if (a8) {
          uint64_t v22 = *((unsigned int *)a8 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_69;
      }
      if (mSelector == 1853059700)
      {
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            int v51 = 136315394;
            uint64_t v52 = "HALS_PlugInDevice.cpp";
            __int16 v53 = 1024;
            int v54 = 1995;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", (uint8_t *)&v51, 0x12u);
          }
          uint64_t v50 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v50 = off_1F148A5D8;
          v50[2] = 561211770;
        }
        uint64_t v28 = *((void *)this + 164);
        uint64_t v19 = *(void *)(v28 + 400);
        uint64_t v20 = *(std::__shared_weak_count **)(v28 + 408);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v21 = *((unsigned int *)this + 331);
        if (a8) {
          uint64_t v22 = *((unsigned int *)a8 + 58);
        }
        else {
          uint64_t v22 = 0;
        }
        goto LABEL_69;
      }
    }
    else if (mSelector == 1818850145 || mSelector == 1818850162)
    {
      if (a4 <= 0xB)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v51 = 136315394;
          uint64_t v52 = "HALS_PlugInDevice.cpp";
          __int16 v53 = 1024;
          int v54 = 2023;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioObjectPropertyListenerAdded or kAudioObjectPropertyListenerRemoved", (uint8_t *)&v51, 0x12u);
        }
        uint64_t v45 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v45 = off_1F148A5D8;
        v45[2] = 561211770;
      }
      uint64_t v23 = *((void *)this + 164);
      uint64_t v19 = *(void *)(v23 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v23 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 331);
      if (a8) {
        uint64_t v22 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_69;
    }
    goto LABEL_49;
  }
  if (mSelector <= 1685087595)
  {
    if (mSelector == 1633906541)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          int v51 = 136315394;
          uint64_t v52 = "HALS_PlugInDevice.cpp";
          __int16 v53 = 1024;
          int v54 = 2002;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioEndPointDevicePropertyComposition", (uint8_t *)&v51, 0x12u);
        }
        uint64_t v46 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v46 = off_1F148A5D8;
        v46[2] = 561211770;
      }
      uint64_t v29 = *((void *)this + 164);
      uint64_t v19 = *(void *)(v29 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v29 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 331);
      if (a8) {
        uint64_t v22 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
      goto LABEL_69;
    }
    if (mSelector == 1634169456)
    {
      uint64_t v18 = *((void *)this + 164);
      uint64_t v19 = *(void *)(v18 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v18 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *((unsigned int *)this + 331);
      if (a8) {
        uint64_t v22 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v22 = 0;
      }
LABEL_69:
      (*(void (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *, void, void, uint64_t, _DWORD *))(*(void *)v19 + 584))(v19, v21, v22, a3, 0, 0, a4, a5);
LABEL_85:
      if (v20)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      return;
    }
    goto LABEL_49;
  }
  if (mSelector == 1685087596)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v51 = 136315394;
        uint64_t v52 = "HALS_PlugInDevice.cpp";
        __int16 v53 = 1024;
        int v54 = 2030;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::SetPropertyData: bad property data size for kAudioDevicePropertyEnableListening", (uint8_t *)&v51, 0x12u);
      }
      char v47 = __cxa_allocate_exception(0x10uLL);
      *(void *)char v47 = off_1F148A5D8;
      v47[2] = 561211770;
    }
    uint64_t v30 = *((void *)this + 164);
    uint64_t v19 = *(void *)(v30 + 400);
    uint64_t v20 = *(std::__shared_weak_count **)(v30 + 408);
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v21 = *((unsigned int *)this + 331);
    if (a8) {
      uint64_t v22 = *((unsigned int *)a8 + 58);
    }
    else {
      uint64_t v22 = 0;
    }
    goto LABEL_69;
  }
  if (mSelector != 1685414763)
  {
LABEL_49:
    if (!HALS_Device::HasProperty((HALS_Device ***)this, v17, a3, (AudioObjectPropertyAddress *)a8))
    {
      if (!(*(unsigned int (**)(char *, void))(*((void *)this + 163) + 24))((char *)this + 1304, a3->mSelector))return; {
      uint64_t v32 = *((void *)this + 164);
      }
      uint64_t v33 = *(void *)(v32 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v32 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a8) {
        uint64_t v34 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v34 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, const AudioObjectPropertyAddress *, uint64_t, int *, uint64_t, _DWORD *))(*(void *)v33 + 584))(v33, *((unsigned int *)this + 331), v34, a3, a6, a7, a4, a5);
      goto LABEL_85;
    }
    goto LABEL_78;
  }
  if (a4 <= 0xF)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v51 = 136315394;
      uint64_t v52 = "HALS_PlugInDevice.cpp";
      __int16 v53 = 1024;
      int v54 = 2038;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessDuck", (uint8_t *)&v51, 0x12u);
    }
    BOOL v49 = __cxa_allocate_exception(0x10uLL);
    *(void *)BOOL v49 = off_1F148A5D8;
    v49[2] = 561211770;
  }
  uint64_t v24 = *((void *)this + 164);
  uint64_t v25 = *(void *)(v24 + 400);
  uint64_t v26 = *(std::__shared_weak_count **)(v24 + 408);
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a8) {
    uint64_t v27 = *((unsigned int *)a8 + 58);
  }
  else {
    uint64_t v27 = 0;
  }
  int v35 = (*(uint64_t (**)(uint64_t, void, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v25 + 552))(v25, *((unsigned int *)this + 331), v27, a3);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v35)
  {
    uint64_t v36 = *((void *)this + 164);
    uint64_t v37 = *(void *)(v36 + 400);
    uint64_t v38 = *(std::__shared_weak_count **)(v36 + 408);
    if (v38) {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a8) {
      uint64_t v39 = *((unsigned int *)a8 + 58);
    }
    else {
      uint64_t v39 = 0;
    }
    int v40 = (*(uint64_t (**)(uint64_t, void, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v37
                                                                                                  + 560))(v37, *((unsigned int *)this + 331), v39, a3);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if (v40)
    {
      uint64_t v41 = *((void *)this + 164);
      uint64_t v42 = *(void *)(v41 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v41 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a8) {
        uint64_t v43 = *((unsigned int *)a8 + 58);
      }
      else {
        uint64_t v43 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, const AudioObjectPropertyAddress *, void, void, uint64_t, _DWORD *))(*(void *)v42 + 584))(v42, *((unsigned int *)this + 331), v43, a3, 0, 0, 16, a5);
      goto LABEL_85;
    }
  }
LABEL_78:

  HALS_Device::SetPropertyData(this, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1BAB48980(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL HALS_Device::IsHogModeOwnerOrFree(HALS_Device *this, HALS_Client *a2)
{
  if (a2) {
    pid_t v3 = *((_DWORD *)a2 + 58);
  }
  else {
    pid_t v3 = getpid();
  }
  return HALS_Device::GetHogModeOwner(this) == v3
      || HALS_Device::GetHogModeOwner(this) == -1;
}

void HALS_PlugInDevice::GetPropertyData(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, unsigned int *a5, unsigned int *a6, void *a7, int *a8, HALS_Client *a9)
{
  uint64_t v301 = *MEMORY[0x1E4F143B8];
  v296[0] = 0;
  uint64_t v15 = (*(uint64_t (**)(HALS_PlugInDevice *, HALS_Client *))(*(void *)this + 696))(this, a9);
  signed int mSelector = a3->mSelector;
  AudioObjectPropertyScope mScope = a3->mScope;
  if ((int)a3->mSelector > 1768124269)
  {
    char v19 = (char)v16;
    double v20 = *(double *)&v15;
    if (mSelector <= 1851878763)
    {
      if (mSelector > 1819107690)
      {
        if (mSelector <= 1819569762)
        {
          if (mSelector == 1819107691)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                __int16 v299 = 1024;
                int v300 = 1380;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyManufacturer", buf, 0x12u);
              }
              exception = __cxa_allocate_exception(0x10uLL);
              *(void *)exception = off_1F148A5D8;
              exception[2] = 561211770;
            }
            uint64_t v162 = *((void *)this + 164);
            uint64_t v141 = *(void *)(v162 + 400);
            uint64_t v39 = *(std::__shared_weak_count **)(v162 + 408);
            uint64_t v41 = a6;
            v174 = a5;
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v142 = *((unsigned int *)this + 331);
            if (a9) {
              uint64_t v143 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v143 = 0;
            }
            goto LABEL_430;
          }
          if (mSelector == 1819111268)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                __int16 v299 = 1024;
                int v300 = 1372;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyModelName", buf, 0x12u);
              }
              v278 = __cxa_allocate_exception(0x10uLL);
              *(void *)v278 = off_1F148A5D8;
              v278[2] = 561211770;
            }
            uint64_t v149 = *((void *)this + 164);
            uint64_t v141 = *(void *)(v149 + 400);
            uint64_t v39 = *(std::__shared_weak_count **)(v149 + 408);
            uint64_t v41 = a6;
            v174 = a5;
            if (v39) {
              atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v142 = *((unsigned int *)this + 331);
            if (a9) {
              uint64_t v143 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v143 = 0;
            }
            goto LABEL_430;
          }
          if (mSelector != 1819173229) {
            goto LABEL_298;
          }
          goto LABEL_73;
        }
        if (mSelector == 1819569763)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1520;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
            }
            v288 = __cxa_allocate_exception(0x10uLL);
            *(void *)v288 = off_1F148A5D8;
            v288[2] = 561211770;
          }
          uint64_t v169 = *((void *)this + 164);
          uint64_t v170 = *(void *)(v169 + 400);
          v171 = *(std::__shared_weak_count **)(v169 + 408);
          if (v171) {
            atomic_fetch_add_explicit(&v171->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v172 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v173 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v173 = 0;
          }
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
          LODWORD(__p) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v170 + 576))(v170, v172, v173, a3, 0, 0, 4, &__p, buf);
          unsigned int v215 = *(_DWORD *)buf;
          if (v171) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v171);
          }
          if ((*(unsigned int (**)(HALS_PlugInDevice *))(*(void *)this + 440))(this)) {
            v215 += HALS_Device::GetStreamDSPLatency(this, (const BOOL *)(mScope == 1768845428));
          }
          if (v19) {
            unsigned int v215 = (v20
          }
                                / (*(double (**)(HALS_PlugInDevice *))(*(void *)this + 264))(this)
                                * (double)v215);
          if (a9)
          {
            uint64_t DSPLatencyForClient = HALS_Device::GetDSPLatencyForClient(this, mScope == 1768845428, a9);
            if ((DSPLatencyForClient & 0xFF00000000) != 0) {
              v215 += DSPLatencyForClient;
            }
          }
          v204 = a5;
          *a6 = v215;
          int v74 = 4;
          goto LABEL_394;
        }
        if (mSelector == 1819634020)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1874;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyLegacyUIDList", buf, 0x12u);
            }
            v280 = __cxa_allocate_exception(0x10uLL);
            *(void *)v280 = off_1F148A5D8;
            v280[2] = 561211770;
          }
          uint64_t v156 = *((void *)this + 164);
          uint64_t v157 = *(void *)(v156 + 400);
          uint64_t v79 = *(std::__shared_weak_count **)(v156 + 408);
          v174 = a5;
          if (v79) {
            atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "diulbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          __p = 0;
          v297[0] = 0;
          (*(void (**)(uint64_t))(*(void *)v157 + 576))(v157);
          *(void *)a6 = 0;
          if (!v79) {
            goto LABEL_440;
          }
LABEL_455:
          v214 = v79;
          goto LABEL_439;
        }
        if (mSelector != 1836411236)
        {
LABEL_298:
          if (HALS_Device::HasProperty((HALS_Device ***)this, v16, a3, (AudioObjectPropertyAddress *)a9))
          {
            HALS_Device::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
            return;
          }
          if (!(*(unsigned int (**)(char *, void))(*((void *)this + 163) + 24))((char *)this + 1304, a3->mSelector))return; {
          uint64_t v175 = *((void *)this + 164);
          }
          uint64_t v151 = *(void *)(v175 + 400);
          v152 = *(std::__shared_weak_count **)(v175 + 408);
          if (v152) {
            atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v153 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v154 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v154 = 0;
          }
          goto LABEL_312;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1432;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyModelUID", buf, 0x12u);
          }
          v262 = __cxa_allocate_exception(0x10uLL);
          *(void *)v262 = off_1F148A5D8;
          v262[2] = 561211770;
        }
        uint64_t v76 = *((void *)this + 164);
        uint64_t v38 = *(void *)(v76 + 400);
        uint64_t v39 = *(std::__shared_weak_count **)(v76 + 408);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = *((unsigned int *)this + 331);
        uint64_t v41 = a6;
        if (a9) {
          uint64_t v42 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v42 = 0;
        }
      }
      else
      {
        if (mSelector > 1818455661)
        {
          if (mSelector != 1818455662)
          {
            if (mSelector == 1818850145 || mSelector == 1818850162)
            {
              if (a4 <= 0xB)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                  __int16 v299 = 1024;
                  int v300 = 1807;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyListenerAdded or kAudioObjectPropertyListenerRemoved", buf, 0x12u);
                }
                v248 = __cxa_allocate_exception(0x10uLL);
                *(void *)v248 = off_1F148A5D8;
                v248[2] = 561211770;
              }
              a6[2] = 0;
              *(void *)a6 = 0;
              int v74 = 12;
              goto LABEL_393;
            }
            goto LABEL_298;
          }
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1396;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyElementNumberName", buf, 0x12u);
            }
            v286 = __cxa_allocate_exception(0x10uLL);
            *(void *)v286 = off_1F148A5D8;
            v286[2] = 561211770;
          }
          uint64_t v167 = *((void *)this + 164);
          uint64_t v141 = *(void *)(v167 + 400);
          uint64_t v39 = *(std::__shared_weak_count **)(v167 + 408);
          uint64_t v41 = a6;
          v174 = a5;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v142 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v143 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v143 = 0;
          }
          goto LABEL_430;
        }
        if (mSelector == 1768124270)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1768;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyIcon", buf, 0x12u);
            }
            v282 = __cxa_allocate_exception(0x10uLL);
            *(void *)v282 = off_1F148A5D8;
            v282[2] = 561211770;
          }
          uint64_t v160 = *((void *)this + 164);
          uint64_t v141 = *(void *)(v160 + 400);
          uint64_t v39 = *(std::__shared_weak_count **)(v160 + 408);
          uint64_t v41 = a6;
          v174 = a5;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v142 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v143 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v143 = 0;
          }
          goto LABEL_430;
        }
        if (mSelector == 1768777573)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1776;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyRawImageData", buf, 0x12u);
            }
            v276 = __cxa_allocate_exception(0x10uLL);
            *(void *)v276 = off_1F148A5D8;
            v276[2] = 561211770;
          }
          uint64_t v144 = *((void *)this + 164);
          uint64_t v141 = *(void *)(v144 + 400);
          uint64_t v39 = *(std::__shared_weak_count **)(v144 + 408);
          uint64_t v41 = a6;
          v174 = a5;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v142 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v143 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v143 = 0;
          }
          goto LABEL_430;
        }
        if (mSelector != 1818452846) {
          goto LABEL_298;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1388;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyElementCategoryName", buf, 0x12u);
          }
          v252 = __cxa_allocate_exception(0x10uLL);
          *(void *)v252 = off_1F148A5D8;
          v252[2] = 561211770;
        }
        uint64_t v37 = *((void *)this + 164);
        uint64_t v38 = *(void *)(v37 + 400);
        uint64_t v39 = *(std::__shared_weak_count **)(v37 + 408);
        if (v39) {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v40 = *((unsigned int *)this + 331);
        uint64_t v41 = a6;
        if (a9) {
          uint64_t v42 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v42 = 0;
        }
      }
LABEL_398:
      v174 = a5;
      *(void *)os_workgroup_interval_data_opaque_s buf = 0;
      LODWORD(__p) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v38 + 576))(v38, v40, v42, a3, 0, 0, 8, &__p, buf);
      goto LABEL_431;
    }
    if (mSelector > 1919512166)
    {
      if (mSelector <= 1936092275)
      {
        if (mSelector != 1919512167)
        {
          if (mSelector == 1920168547)
          {
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                __int16 v299 = 1024;
                int v300 = 1760;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyResourceBundle", buf, 0x12u);
              }
              v265 = __cxa_allocate_exception(0x10uLL);
              *(void *)v265 = off_1F148A5D8;
              v265[2] = 561211770;
            }
            *(void *)a6 = HALS_PlugInObject::CopyResourceBundlePath((uint64_t)this + 1304, (uint64_t)a9);
            int v74 = 8;
            goto LABEL_393;
          }
          if (mSelector == 1935763060)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                __int16 v299 = 1024;
                int v300 = 1585;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
              }
              v257 = __cxa_allocate_exception(0x10uLL);
              *(void *)v257 = off_1F148A5D8;
              v257[2] = 561211770;
            }
            uint64_t v59 = *((void *)this + 164);
            uint64_t v60 = *(void *)(v59 + 400);
            uint64_t v61 = *(std::__shared_weak_count **)(v59 + 408);
            if (v61) {
              atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v62 = *((unsigned int *)this + 331);
            if (a9) {
              uint64_t v63 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v63 = 0;
            }
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
            LODWORD(__p) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v60 + 576))(v60, v62, v63, a3, 0, 0, 4, &__p, buf);
            unsigned int v178 = *(_DWORD *)buf;
            if (v61) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v61);
            }
            if (v19) {
              unsigned int v178 = (v20
            }
                                  / (*(double (**)(HALS_PlugInDevice *))(*(void *)this + 264))(this)
                                  * (double)v178);
            *a6 = v178;
            goto LABEL_392;
          }
          goto LABEL_298;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1554;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          v272 = __cxa_allocate_exception(0x10uLL);
          *(void *)v272 = off_1F148A5D8;
          v272[2] = 561211770;
        }
        uint64_t v120 = *((void *)this + 164);
        uint64_t v121 = *(void *)(v120 + 400);
        long long v122 = *(std::__shared_weak_count **)(v120 + 408);
        long long v123 = a6;
        uint64_t v44 = a5;
        if (v122) {
          atomic_fetch_add_explicit(&v122->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v124 = (*(uint64_t (**)(uint64_t))(*(void *)v121 + 24))(v121);
        if (v122) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v122);
        }
        uint64_t v125 = *((void *)this + 164);
        uint64_t v126 = *(void *)(v125 + 400);
        int v127 = *(std::__shared_weak_count **)(v125 + 408);
        if (v124)
        {
          if (v127) {
            atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "zisfbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(__p) = 0;
          v297[0] = 0;
          (*(void (**)(uint64_t))(*(void *)v126 + 576))(v126);
          unsigned int v234 = 0;
LABEL_507:
          *long long v123 = v234;
          if (v127)
          {
            v228 = v127;
            goto LABEL_509;
          }
          goto LABEL_510;
        }
        if (v127) {
          atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v176 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v177 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v177 = 0;
        }
LABEL_506:
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
        LODWORD(__p) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v126 + 576))(v126, v176, v177, a3, 0, 0, 4, &__p, buf);
        unsigned int v234 = *(_DWORD *)buf;
        goto LABEL_507;
      }
      if (mSelector <= 1936879203)
      {
        if (mSelector != 1936092276)
        {
          if (mSelector != 1936876644) {
            goto LABEL_298;
          }
          unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
          int v22 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
          uint64_t v23 = caulk::numeric::exceptional_add<unsigned int>(v22);
          v296[0] = v23;
          if (v23 > a4)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1634;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
            }
            v250 = __cxa_allocate_exception(0x10uLL);
            *(void *)v250 = off_1F148A5D8;
            v250[2] = 561211770;
          }
          uint64_t v24 = v23;
          unsigned int v25 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(void *)this + 600))(this, mScope == 1768845428, a9);
          *(void *)a6 = 0;
          a6[2] = v25;
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = a6 + 4;
            do
            {
              *((_DWORD *)v27 - 1) = -1;
              *uint64_t v27 = 0;
              v27[1] = 0;
              uint64_t v27 = (void *)((char *)v27 + 20);
              --v26;
            }
            while (v26);
          }
          *a5 = v24;
          AudioObjectPropertyScope v28 = a3->mScope;
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 1936879204;
          *(_DWORD *)&uint8_t buf[4] = v28;
          *(_DWORD *)&uint8_t buf[8] = 1735159650;
          uint64_t v29 = *((void *)this + 164);
          uint64_t v30 = *(void *)(v29 + 400);
          uint64_t v31 = *(std::__shared_weak_count **)(v29 + 408);
          if (v31) {
            atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (a9) {
            uint64_t v32 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v32 = 0;
          }
          (*(void (**)(uint64_t, void, uint64_t, unsigned char *, void, void, uint64_t, _DWORD *, unsigned int *))(*(void *)v30 + 576))(v30, *((unsigned int *)this + 331), v32, buf, 0, 0, v24, v296, a6);
LABEL_346:
          if (v31) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v31);
          }
          return;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1508;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
          }
          v269 = __cxa_allocate_exception(0x10uLL);
          *(void *)v269 = off_1F148A5D8;
          v269[2] = 561211770;
        }
        int v103 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(void *)this + 536))(this, mScope == 1768845428, a9);
        *a6 = v103 != 0;
        if (v103)
        {
          uint64_t v104 = *((void *)this + 164);
          uint64_t v105 = *(void *)(v104 + 400);
          unint64_t v106 = *(std::__shared_weak_count **)(v104 + 408);
          if (v106) {
            atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (a9) {
            uint64_t v107 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v107 = 0;
          }
          int v217 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v105 + 552))(v105, *((unsigned int *)this + 331), v107, a3);
          char v218 = v217;
          if (v106)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v106);
            if ((v218 & 1) == 0) {
              goto LABEL_504;
            }
LABEL_469:
            uint64_t v221 = *((void *)this + 164);
            uint64_t v222 = *(void *)(v221 + 400);
            v223 = *(std::__shared_weak_count **)(v221 + 408);
            if (v223) {
              atomic_fetch_add_explicit(&v223->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v224 = *((unsigned int *)this + 331);
            if (a9) {
              uint64_t v225 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v225 = 0;
            }
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
            LODWORD(__p) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v222 + 576))(v222, v224, v225, a3, 0, 0, 4, &__p, buf);
            *a6 = *(_DWORD *)buf;
            if (v223) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v223);
            }
            goto LABEL_504;
          }
          if (v217) {
            goto LABEL_469;
          }
        }
LABEL_504:
        *a5 = 4;
        return;
      }
      if (mSelector != 1936879204)
      {
        if (mSelector != 1953653102) {
          goto LABEL_298;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1440;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
          }
          v263 = __cxa_allocate_exception(0x10uLL);
          *(void *)v263 = off_1F148A5D8;
          v263[2] = 561211770;
        }
        uint64_t v82 = *((void *)this + 164);
        uint64_t v55 = *(void *)(v82 + 400);
        char v47 = *(std::__shared_weak_count **)(v82 + 408);
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v56 = *((unsigned int *)this + 331);
        int64_t v57 = a6;
        if (a9) {
          uint64_t v58 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v58 = 0;
        }
        goto LABEL_396;
      }
      unsigned int v108 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
      int v109 = caulk::numeric::exceptional_mul<unsigned int>(v108);
      uint64_t v110 = caulk::numeric::exceptional_add<unsigned int>(v109);
      if (v110 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1600;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelLayout", buf, 0x12u);
        }
        v270 = __cxa_allocate_exception(0x10uLL);
        *(void *)v270 = off_1F148A5D8;
        v270[2] = 561211770;
      }
      uint64_t v111 = v110;
      unsigned int v112 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(void *)this + 600))(this, mScope == 1768845428, a9);
      *(void *)a6 = 0;
      a6[2] = v112;
      if (v112)
      {
        uint64_t v113 = v112;
        uint64_t v114 = a6 + 4;
        do
        {
          *((_DWORD *)v114 - 1) = -1;
          *uint64_t v114 = 0;
          v114[1] = 0;
          uint64_t v114 = (void *)((char *)v114 + 20);
          --v113;
        }
        while (v113);
      }
      *a5 = v111;
      uint64_t v115 = *((void *)this + 164);
      uint64_t v116 = *(void *)(v115 + 400);
      long long v117 = *(std::__shared_weak_count **)(v115 + 408);
      if (v117) {
        atomic_fetch_add_explicit(&v117->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a9) {
        uint64_t v118 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v118 = 0;
      }
      (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t))(*(void *)v116 + 576))(v116, *((unsigned int *)this + 331), v118, a3, 0, 0, v111);
      if (v117) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v117);
      }
      v295[0] = 0;
      v295[1] = 0;
      HALS_System::GetInstance(&__p, 0, v295);
      *(void *)os_workgroup_interval_data_opaque_s buf = HALS_SettingsManager::ReadSetting(*((HALS_SettingsManager **)__p + 176), *((const __CFString **)this + 14));
      *(_WORD *)&uint8_t buf[8] = 1;
      if (v294) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v294);
      }
      __p = 0;
      LOWORD(v294) = 1;
      if (mScope == 1768845428)
      {
        CFStringRef v194 = @"input.surround";
      }
      else
      {
        if (a3->mScope != 1869968496)
        {
LABEL_370:
          CACFDictionary::~CACFDictionary((CACFDictionary *)&__p);
          CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
          return;
        }
        CFStringRef v194 = @"output.surround";
      }
      CACFDictionary::GetCACFDictionary((const __CFDictionary **)buf, v194, (CACFDictionary *)&__p);
      if (__p) {
        HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)&__p, (const CACFDictionary *)a6, v195);
      }
      goto LABEL_370;
    }
    if (mSelector <= 1886546293)
    {
      if (mSelector != 1851878764)
      {
        if (mSelector != 1853059619)
        {
          if (mSelector != 1853059700) {
            goto LABEL_298;
          }
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1649;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
            }
            v254 = __cxa_allocate_exception(0x10uLL);
            *(void *)v254 = off_1F148A5D8;
            v254[2] = 561211770;
          }
          uint64_t v44 = a5;
          if (!(_BYTE)v16)
          {
            uint64_t v179 = *((void *)this + 164);
            uint64_t v180 = *(void *)(v179 + 400);
            v181 = *(std::__shared_weak_count **)(v179 + 408);
            if (v181) {
              atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v182 = *((unsigned int *)this + 331);
            if (a9) {
              uint64_t v183 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v183 = 0;
            }
            *(void *)os_workgroup_interval_data_opaque_s buf = 0;
            LODWORD(__p) = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v180 + 576))(v180, v182, v183, a3, 0, 0, 8, &__p, buf);
            *(void *)a6 = *(void *)buf;
            if (!v181) {
              goto LABEL_495;
            }
            goto LABEL_494;
          }
          *(void *)a6 = v15;
LABEL_495:
          int v235 = 8;
LABEL_511:
          *uint64_t v44 = v235;
          return;
        }
        int NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
        if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
        {
          v94 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
          if (v94) {
            unsigned int NumberAvailablePhysicalFormats = HALS_Stream::GetNumberAvailablePhysicalFormats(v94);
          }
          else {
            unsigned int NumberAvailablePhysicalFormats = 0;
          }
          v297[0] = NumberAvailablePhysicalFormats;
          operator new[]();
        }
        strcpy(buf, "#rsnbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        uint64_t v44 = a5;
        if (a9) {
          uint64_t v236 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v236 = 0;
        }
        uint64_t v237 = *((void *)this + 164);
        uint64_t v238 = *(void *)(v237 + 400);
        v239 = *(std::__shared_weak_count **)(v237 + 408);
        if (v239) {
          atomic_fetch_add_explicit(&v239->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v240 = (*(uint64_t (**)(uint64_t, void, uint64_t, unsigned char *))(*(void *)v238 + 552))(v238, *((unsigned int *)this + 331), v236, buf);
        if (v239) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v239);
        }
        if (!v240)
        {
          if (!v19)
          {
            uint64_t v243 = *((void *)this + 164);
            uint64_t v244 = *(void *)(v243 + 400);
            v245 = *(std::__shared_weak_count **)(v243 + 408);
            if (v245) {
              atomic_fetch_add_explicit(&v245->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            __p = (void *)0x676C6F626E737274;
            LODWORD(v294) = 0;
            *(void *)v297 = 0;
            v296[1] = 0;
            (*(void (**)(uint64_t))(*(void *)v244 + 576))(v244);
            double v20 = 0.0;
            if (v245) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v245);
            }
          }
          if (a4 < 0x10)
          {
            int v235 = 0;
          }
          else
          {
            *(double *)a6 = v20;
            *((double *)a6 + 1) = v20;
            int v235 = 16;
          }
          goto LABEL_511;
        }
        uint64_t v241 = *((void *)this + 164);
        uint64_t v242 = *(void *)(v241 + 400);
        uint64_t v31 = *(std::__shared_weak_count **)(v241 + 408);
        if (v31) {
          atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void, uint64_t, unsigned char *, void, void, const AudioObjectPropertyAddress *, unsigned int *, unsigned int *))(*(void *)v242 + 576))(v242, *((unsigned int *)this + 331), v236, buf, 0, 0, a4, a5, a6);
        goto LABEL_346;
      }
LABEL_73:
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1364;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioObjectPropertyName", buf, 0x12u);
        }
        v247 = __cxa_allocate_exception(0x10uLL);
        *(void *)v247 = off_1F148A5D8;
        v247[2] = 561211770;
      }
      uint64_t v50 = *((void *)this + 164);
      uint64_t v51 = *(void *)(v50 + 400);
      uint64_t v52 = *(std::__shared_weak_count **)(v50 + 408);
      if (v52) {
        atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      __int16 v53 = (void **)a6;
      v174 = a5;
      strcpy(buf, "manlbolg");
      buf[9] = 0;
      *(_WORD *)&buf[10] = 0;
      __p = 0;
      v297[0] = 0;
      (*(void (**)(uint64_t))(*(void *)v51 + 576))(v51);
      goto LABEL_416;
    }
    switch(mSelector)
    {
      case 1886546294:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1798;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioEndPointDevicePropertyIsPrivate", buf, 0x12u);
          }
          v274 = __cxa_allocate_exception(0x10uLL);
          *(void *)v274 = off_1F148A5D8;
          v274[2] = 561211770;
        }
        uint64_t v139 = *((void *)this + 164);
        uint64_t v90 = *(void *)(v139 + 400);
        char v47 = *(std::__shared_weak_count **)(v139 + 408);
        int64_t v57 = a6;
        v174 = a5;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v91 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v92 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v92 = 0;
        }
        goto LABEL_436;
      case 1919251299:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1890;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyWantsControlsRestored", buf, 0x12u);
          }
          v268 = __cxa_allocate_exception(0x10uLL);
          *(void *)v268 = off_1F148A5D8;
          v268[2] = 561211770;
        }
        uint64_t v97 = *((void *)this + 164);
        uint64_t v98 = *(void *)(v97 + 400);
        uint64_t v99 = *(std::__shared_weak_count **)(v97 + 408);
        uint64_t v100 = a6;
        uint64_t v44 = a5;
        if (v99) {
          atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v101 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v102 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v102 = 0;
        }
        strcpy(buf, "cserbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        int v191 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v98 + 552))(v98, v101, v102, buf);
        if (v99) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v99);
        }
        if (v191)
        {
          uint64_t v192 = *((void *)this + 164);
          uint64_t v193 = *(void *)(v192 + 400);
          v187 = *(std::__shared_weak_count **)(v192 + 408);
          if (v187) {
            atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "cserbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(__p) = 0;
          v297[0] = 0;
          (*(void (**)(uint64_t))(*(void *)v193 + 576))(v193);
LABEL_478:
          *uint64_t v100 = __p;
          if (v187)
          {
            v228 = v187;
LABEL_509:
            std::__shared_weak_count::__release_shared[abi:ne180100](v228);
          }
LABEL_510:
          int v235 = 4;
          goto LABEL_511;
        }
        break;
      case 1919251302:
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1905;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyWantsStreamFormatsRestored", buf, 0x12u);
          }
          v259 = __cxa_allocate_exception(0x10uLL);
          *(void *)v259 = off_1F148A5D8;
          v259[2] = 561211770;
        }
        uint64_t v65 = *((void *)this + 164);
        uint64_t v66 = *(void *)(v65 + 400);
        uint64_t v67 = *(std::__shared_weak_count **)(v65 + 408);
        if (v67) {
          atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v68 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v69 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v69 = 0;
        }
        uint64_t v100 = a6;
        uint64_t v44 = a5;
        strcpy(buf, "fserbolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        int v184 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v66 + 552))(v66, v68, v69, buf);
        if (v67) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v67);
        }
        if (v184)
        {
          uint64_t v185 = *((void *)this + 164);
          uint64_t v186 = *(void *)(v185 + 400);
          v187 = *(std::__shared_weak_count **)(v185 + 408);
          if (v187) {
            atomic_fetch_add_explicit(&v187->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          strcpy(buf, "fserbolg");
          buf[9] = 0;
          *(_WORD *)&buf[10] = 0;
          LODWORD(__p) = 0;
          v297[0] = 0;
          (*(void (**)(uint64_t))(*(void *)v186 + 576))(v186);
          goto LABEL_478;
        }
        break;
      default:
        goto LABEL_298;
    }
    *uint64_t v100 = 1;
    goto LABEL_510;
  }
  if (mSelector <= 1668641651)
  {
    if (mSelector > 1635087470)
    {
      if (mSelector > 1668049763)
      {
        if (mSelector == 1668049764)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1479;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
            }
            v287 = __cxa_allocate_exception(0x10uLL);
            *(void *)v287 = off_1F148A5D8;
            v287[2] = 561211770;
          }
          uint64_t v168 = *((void *)this + 164);
          uint64_t v90 = *(void *)(v168 + 400);
          char v47 = *(std::__shared_weak_count **)(v168 + 408);
          int64_t v57 = a6;
          v174 = a5;
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v91 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v92 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v92 = 0;
          }
          goto LABEL_436;
        }
        if (mSelector == 1668050795)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1569;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockAlgorithm", buf, 0x12u);
            }
            v279 = __cxa_allocate_exception(0x10uLL);
            *(void *)v279 = off_1F148A5D8;
            v279[2] = 561211770;
          }
          uint64_t v155 = *((void *)this + 164);
          uint64_t v90 = *(void *)(v155 + 400);
          char v47 = *(std::__shared_weak_count **)(v155 + 408);
          int64_t v57 = a6;
          v174 = a5;
          if (v47) {
            atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v91 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v92 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v92 = 0;
          }
          goto LABEL_436;
        }
        if (mSelector != 1668510818) {
          goto LABEL_298;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1577;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyClockIsStable", buf, 0x12u);
          }
          v261 = __cxa_allocate_exception(0x10uLL);
          *(void *)v261 = off_1F148A5D8;
          v261[2] = 561211770;
        }
        uint64_t v75 = *((void *)this + 164);
        uint64_t v55 = *(void *)(v75 + 400);
        char v47 = *(std::__shared_weak_count **)(v75 + 408);
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v56 = *((unsigned int *)this + 331);
        int64_t v57 = a6;
        if (a9) {
          uint64_t v58 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v58 = 0;
        }
        goto LABEL_396;
      }
      if (mSelector == 1635087471)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1882;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAllowsAutoRoute", buf, 0x12u);
          }
          v283 = __cxa_allocate_exception(0x10uLL);
          *(void *)v283 = off_1F148A5D8;
          v283[2] = 561211770;
        }
        uint64_t v161 = *((void *)this + 164);
        uint64_t v90 = *(void *)(v161 + 400);
        char v47 = *(std::__shared_weak_count **)(v161 + 408);
        int64_t v57 = a6;
        v174 = a5;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v91 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v92 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v92 = 0;
        }
        goto LABEL_436;
      }
      if (mSelector != 1667330160)
      {
        if (mSelector != 1667658618) {
          goto LABEL_298;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1850;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyCalculateBufferFrameSize", buf, 0x12u);
          }
          v255 = __cxa_allocate_exception(0x10uLL);
          *(void *)v255 = off_1F148A5D8;
          v255[2] = 561211770;
        }
        uint64_t v45 = *((void *)this + 164);
        uint64_t v46 = *(void *)(v45 + 400);
        char v47 = *(std::__shared_weak_count **)(v45 + 408);
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v48 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v49 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v49 = 0;
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
        LODWORD(__p) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void *, int *, uint64_t, void **, unsigned char *))(*(void *)v46 + 576))(v46, v48, v49, a3, a7, a8, 4, &__p, buf);
        *a6 = *(_DWORD *)buf;
        v174 = a5;
        if (!v47) {
          goto LABEL_440;
        }
LABEL_438:
        v214 = v47;
LABEL_439:
        std::__shared_weak_count::__release_shared[abi:ne180100](v214);
        goto LABEL_440;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1417;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyConfigurationApplication", buf, 0x12u);
        }
        v277 = __cxa_allocate_exception(0x10uLL);
        *(void *)v277 = off_1F148A5D8;
        v277[2] = 561211770;
      }
      uint64_t v145 = *((void *)this + 164);
      uint64_t v146 = *(void *)(v145 + 400);
      v147 = *(std::__shared_weak_count **)(v145 + 408);
      char v86 = a6;
      uint64_t v44 = a5;
      if (v147) {
        atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a9) {
        uint64_t v148 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v148 = 0;
      }
      int v205 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v146 + 552))(v146, *((unsigned int *)this + 331), v148, a3);
      if (v147) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v147);
      }
      if (!v205)
      {
        *(void *)a6 = CFRetain(@"com.apple.audio.AudioMIDISetup");
        goto LABEL_495;
      }
      uint64_t v206 = *((void *)this + 164);
      uint64_t v207 = *(void *)(v206 + 400);
      v181 = *(std::__shared_weak_count **)(v206 + 408);
      if (v181) {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v208 = *((unsigned int *)this + 331);
      if (a9) {
        uint64_t v209 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v209 = 0;
      }
    }
    else
    {
      if (mSelector <= 1634038356)
      {
        if (mSelector != 1633903475)
        {
          if (mSelector != 1633906541)
          {
            if (mSelector != 1634038341) {
              goto LABEL_298;
            }
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                __int16 v299 = 1024;
                int v300 = 1963;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDeviceEngineReplacerIsEnabled", buf, 0x12u);
              }
              v251 = __cxa_allocate_exception(0x10uLL);
              *(void *)v251 = off_1F148A5D8;
              v251[2] = 561211770;
            }
            uint64_t v33 = *((void *)this + 164);
            uint64_t v34 = *(void *)(v33 + 400);
            int v35 = *(std::__shared_weak_count **)(v33 + 408);
            if (v35) {
              atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (a9) {
              uint64_t v36 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v36 = 0;
            }
            long long v123 = a6;
            uint64_t v44 = a5;
            char v196 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v34 + 552))(v34, *((unsigned int *)this + 331), v36, a3);
            if (v35) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v35);
            }
            if ((v196 & 1) == 0)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
                __int16 v299 = 1024;
                int v300 = 1965;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: does not support property kAudioDeviceEngineReplacerIsEnabled", buf, 0x12u);
              }
              v289 = __cxa_allocate_exception(0x10uLL);
              *(void *)v289 = off_1F148A5D8;
              v289[2] = 1970171760;
            }
            uint64_t v197 = *((void *)this + 164);
            uint64_t v126 = *(void *)(v197 + 400);
            int v127 = *(std::__shared_weak_count **)(v197 + 408);
            if (v127) {
              atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v176 = *((unsigned int *)this + 331);
            if (a9) {
              uint64_t v177 = *((unsigned int *)a9 + 58);
            }
            else {
              uint64_t v177 = 0;
            }
            goto LABEL_506;
          }
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1784;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioEndPointDevicePropertyComposition", buf, 0x12u);
            }
            v275 = __cxa_allocate_exception(0x10uLL);
            *(void *)v275 = off_1F148A5D8;
            v275[2] = 561211770;
          }
          uint64_t v140 = *((void *)this + 164);
          uint64_t v141 = *(void *)(v140 + 400);
          uint64_t v39 = *(std::__shared_weak_count **)(v140 + 408);
          uint64_t v41 = a6;
          v174 = a5;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v142 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v143 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v143 = 0;
          }
LABEL_430:
          *(void *)os_workgroup_interval_data_opaque_s buf = 0;
          LODWORD(__p) = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v141 + 576))(v141, v142, v143, a3, 0, 0, 8, &__p, buf);
LABEL_431:
          *(void *)uint64_t v41 = *(void *)buf;
          if (v39)
          {
            v210 = v39;
            goto LABEL_433;
          }
          goto LABEL_434;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1866;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAccessEntitlementName", buf, 0x12u);
          }
          v281 = __cxa_allocate_exception(0x10uLL);
          *(void *)v281 = off_1F148A5D8;
          v281[2] = 561211770;
        }
        uint64_t v158 = *((void *)this + 164);
        uint64_t v159 = *(void *)(v158 + 400);
        uint64_t v52 = *(std::__shared_weak_count **)(v158 + 408);
        __int16 v53 = (void **)a6;
        v174 = a5;
        if (v52) {
          atomic_fetch_add_explicit(&v52->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        strcpy(buf, "sccabolg");
        buf[9] = 0;
        *(_WORD *)&buf[10] = 0;
        __p = 0;
        v297[0] = 0;
        (*(void (**)(uint64_t))(*(void *)v159 + 576))(v159);
LABEL_416:
        *__int16 v53 = __p;
        if (v52)
        {
          v210 = v52;
LABEL_433:
          std::__shared_weak_count::__release_shared[abi:ne180100](v210);
        }
LABEL_434:
        int v213 = 8;
LABEL_441:
        unsigned int *v174 = v213;
        return;
      }
      if (mSelector != 1634038357)
      {
        if (mSelector == 1634169456)
        {
          uint64_t v150 = *((void *)this + 164);
          uint64_t v151 = *(void *)(v150 + 400);
          v152 = *(std::__shared_weak_count **)(v150 + 408);
          if (v152) {
            atomic_fetch_add_explicit(&v152->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v153 = *((unsigned int *)this + 331);
          if (a9) {
            uint64_t v154 = *((unsigned int *)a9 + 58);
          }
          else {
            uint64_t v154 = 0;
          }
LABEL_312:
          (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void *, int *, const AudioObjectPropertyAddress *, unsigned int *, unsigned int *))(*(void *)v151 + 576))(v151, v153, v154, a3, a7, a8, a4, a5, a6);
          if (v152)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v152);
          }
          return;
        }
        if (mSelector != 1634429294) {
          goto LABEL_298;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1448;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
          }
          v260 = __cxa_allocate_exception(0x10uLL);
          *(void *)v260 = off_1F148A5D8;
          v260[2] = 561211770;
        }
        uint64_t v70 = *((void *)this + 164);
        uint64_t v71 = *(void *)(v70 + 400);
        uint64_t v72 = *(std::__shared_weak_count **)(v70 + 408);
        if (v72) {
          atomic_fetch_add_explicit(&v72->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (a9) {
          uint64_t v73 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v73 = 0;
        }
        v198 = (int *)a6;
        int v199 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v71 + 552))(v71, *((unsigned int *)this + 331), v73, a3);
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        if (!v199)
        {
          *a6 = *((_DWORD *)this + 4);
LABEL_392:
          int v74 = 4;
LABEL_393:
          v204 = a5;
LABEL_394:
          unsigned int *v204 = v74;
          return;
        }
        uint64_t v200 = *((void *)this + 164);
        uint64_t v201 = *(void *)(v200 + 400);
        v202 = *(std::__shared_weak_count **)(v200 + 408);
        if (v202) {
          atomic_fetch_add_explicit(&v202->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (a9) {
          uint64_t v203 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v203 = 0;
        }
        (*(void (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *, void *, int *, const AudioObjectPropertyAddress *, unsigned int *, unsigned int *))(*(void *)v201 + 576))(v201, *((unsigned int *)this + 331), v203, a3, a7, a8, a4, a5, a6);
        if (v202) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v202);
        }
        unint64_t v229 = *a5;
        if (v229 >= 4)
        {
          unint64_t v230 = v229 >> 2;
          do
          {
            v231 = HALS_PlugIn::CopyObjectByUCID(*((HALS_PlugIn **)this + 164), *v198);
            if (v231) {
              int v233 = *((_DWORD *)v231 + 4);
            }
            else {
              int v233 = 0;
            }
            int *v198 = v233;
            HALS_ObjectMap::ReleaseObject(v231, v232);
            ++v198;
            --v230;
          }
          while (v230);
        }
        return;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1952;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDeviceEngineReplacerUID", buf, 0x12u);
        }
        v285 = __cxa_allocate_exception(0x10uLL);
        *(void *)v285 = off_1F148A5D8;
        v285[2] = 561211770;
      }
      uint64_t v163 = *((void *)this + 164);
      uint64_t v164 = *(void *)(v163 + 400);
      v165 = *(std::__shared_weak_count **)(v163 + 408);
      char v86 = a6;
      uint64_t v44 = a5;
      if (v165) {
        atomic_fetch_add_explicit(&v165->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (a9) {
        uint64_t v166 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v166 = 0;
      }
      char v211 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v164 + 552))(v164, *((unsigned int *)this + 331), v166, a3);
      if (v165) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v165);
      }
      if ((v211 & 1) == 0)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1954;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: does not support property kAudioDeviceEngineReplacerUID", buf, 0x12u);
        }
        v290 = __cxa_allocate_exception(0x10uLL);
        *(void *)v290 = off_1F148A5D8;
        v290[2] = 1970171760;
      }
      uint64_t v212 = *((void *)this + 164);
      uint64_t v207 = *(void *)(v212 + 400);
      v181 = *(std::__shared_weak_count **)(v212 + 408);
      if (v181) {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v208 = *((unsigned int *)this + 331);
      if (a9) {
        uint64_t v209 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v209 = 0;
      }
    }
    *(void *)os_workgroup_interval_data_opaque_s buf = 0;
    LODWORD(__p) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v207 + 576))(v207, v208, v209, a3, 0, 0, 8, &__p, buf);
    uint64_t v227 = *(void *)buf;
LABEL_493:
    *(void *)char v86 = v227;
    if (v181)
    {
LABEL_494:
      std::__shared_weak_count::__release_shared[abi:ne180100](v181);
      goto LABEL_495;
    }
    goto LABEL_495;
  }
  if (mSelector > 1685222500)
  {
    if (mSelector > 1735354733)
    {
      if (mSelector <= 1751412336)
      {
        if (mSelector == 1735354734 || mSelector == 1735356005)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
              __int16 v299 = 1024;
              int v300 = 1488;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
            }
            v246 = __cxa_allocate_exception(0x10uLL);
            *(void *)v246 = off_1F148A5D8;
            v246[2] = 561211770;
          }
          *a6 = (*(uint64_t (**)(void))(**((void **)this + 177) + 672))(*((void *)this + 177));
          goto LABEL_392;
        }
        goto LABEL_298;
      }
      if (mSelector == 1751412337 || mSelector == 1751737454)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1743;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
          }
          v249 = __cxa_allocate_exception(0x10uLL);
          *(void *)v249 = off_1F148A5D8;
          v249[2] = 561211770;
        }
        *(void *)os_workgroup_interval_data_opaque_s buf = *(void *)&a3->mSelector;
        *(_DWORD *)&uint8_t buf[8] = a3->mElement;
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 1751737454;
        v174 = a5;
        if (!(*(unsigned int (**)(HALS_PlugInDevice *, const BOOL *, unsigned char *, HALS_Client *))(*(void *)this + 88))(this, a2, buf, a9))goto LABEL_440; {
        uint64_t v77 = *((void *)this + 164);
        }
        uint64_t v78 = *(void *)(v77 + 400);
        uint64_t v79 = *(std::__shared_weak_count **)(v77 + 408);
        if (v79) {
          atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v80 = *((unsigned int *)this + 331);
        uint64_t v81 = a9 ? *((unsigned int *)a9 + 58) : 0;
        LODWORD(__p) = 0;
        v297[0] = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void, void, uint64_t, unsigned int *, void **))(*(void *)v78 + 576))(v78, v80, v81, buf, 0, 0, 4, v297, &__p);
        *a6 = __p;
        if (!v79) {
          goto LABEL_440;
        }
        goto LABEL_455;
      }
      goto LABEL_298;
    }
    if (mSelector != 1685222501)
    {
      if (mSelector != 1685278578)
      {
        if (mSelector != 1685287012) {
          goto LABEL_298;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1815;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertySupportsPastData", buf, 0x12u);
          }
          v256 = __cxa_allocate_exception(0x10uLL);
          *(void *)v256 = off_1F148A5D8;
          v256[2] = 561211770;
        }
        uint64_t v54 = *((void *)this + 164);
        uint64_t v55 = *(void *)(v54 + 400);
        char v47 = *(std::__shared_weak_count **)(v54 + 408);
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v56 = *((unsigned int *)this + 331);
        int64_t v57 = a6;
        if (a9) {
          uint64_t v58 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v58 = 0;
        }
        goto LABEL_396;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1919;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDSPOffloadRequested", buf, 0x12u);
        }
        v264 = __cxa_allocate_exception(0x10uLL);
        *(void *)v264 = off_1F148A5D8;
        v264[2] = 561211770;
      }
      uint64_t v83 = *((void *)this + 164);
      uint64_t v84 = *(void *)(v83 + 400);
      char v85 = *(std::__shared_weak_count **)(v83 + 408);
      char v86 = a6;
      uint64_t v44 = a5;
      if (v85) {
        atomic_fetch_add_explicit(&v85->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v87 = *((unsigned int *)this + 331);
      if (a9) {
        uint64_t v88 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v88 = 0;
      }
      *(void *)os_workgroup_interval_data_opaque_s buf = *(void *)&a3->mSelector;
      *(_DWORD *)&uint8_t buf[8] = a3->mElement;
      int v188 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v84 + 552))(v84, v87, v88, buf);
      if (v85) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v85);
      }
      if (!v188)
      {
        *(void *)a6 = 0;
        goto LABEL_495;
      }
      uint64_t v189 = *((void *)this + 164);
      uint64_t v190 = *(void *)(v189 + 400);
      v181 = *(std::__shared_weak_count **)(v189 + 408);
      if (v181) {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)os_workgroup_interval_data_opaque_s buf = *(void *)&a3->mSelector;
      *(_DWORD *)&uint8_t buf[8] = a3->mElement;
      __p = 0;
      v297[0] = 0;
      (*(void (**)(uint64_t))(*(void *)v190 + 576))(v190);
      uint64_t v227 = 0;
      goto LABEL_493;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
        __int16 v299 = 1024;
        int v300 = 1944;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyWantsDisplayRouting", buf, 0x12u);
      }
      v271 = __cxa_allocate_exception(0x10uLL);
      *(void *)v271 = off_1F148A5D8;
      v271[2] = 561211770;
    }
    uint64_t v119 = *((void *)this + 164);
    uint64_t v90 = *(void *)(v119 + 400);
    char v47 = *(std::__shared_weak_count **)(v119 + 408);
    int64_t v57 = a6;
    v174 = a5;
    if (v47) {
      atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v91 = *((unsigned int *)this + 331);
    if (a9) {
      uint64_t v92 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v92 = 0;
    }
LABEL_436:
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
    LODWORD(__p) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v90 + 576))(v90, v91, v92, a3, 0, 0, 4, &__p, buf);
LABEL_437:
    *int64_t v57 = *(_DWORD *)buf;
    if (!v47)
    {
LABEL_440:
      int v213 = 4;
      goto LABEL_441;
    }
    goto LABEL_438;
  }
  if (mSelector > 1684434035)
  {
    if (mSelector != 1684434036)
    {
      if (mSelector == 1684893796)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
            __int16 v299 = 1024;
            int v300 = 1834;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyMaximumPastData", buf, 0x12u);
          }
          v267 = __cxa_allocate_exception(0x10uLL);
          *(void *)v267 = off_1F148A5D8;
          v267[2] = 561211770;
        }
        uint64_t v96 = *((void *)this + 164);
        uint64_t v90 = *(void *)(v96 + 400);
        char v47 = *(std::__shared_weak_count **)(v96 + 408);
        int64_t v57 = a6;
        v174 = a5;
        if (v47) {
          atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v91 = *((unsigned int *)this + 331);
        if (a9) {
          uint64_t v92 = *((unsigned int *)a9 + 58);
        }
        else {
          uint64_t v92 = 0;
        }
        goto LABEL_436;
      }
      if (mSelector != 1685087596) {
        goto LABEL_298;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1842;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyEnableListening", buf, 0x12u);
        }
        v258 = __cxa_allocate_exception(0x10uLL);
        *(void *)v258 = off_1F148A5D8;
        v258[2] = 561211770;
      }
      uint64_t v64 = *((void *)this + 164);
      uint64_t v55 = *(void *)(v64 + 400);
      char v47 = *(std::__shared_weak_count **)(v64 + 408);
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = *((unsigned int *)this + 331);
      int64_t v57 = a6;
      if (a9) {
        uint64_t v58 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v58 = 0;
      }
LABEL_396:
      v174 = a5;
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
      LODWORD(__p) = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, void, void, uint64_t, void **, unsigned char *))(*(void *)v55 + 576))(v55, v56, v58, a3, 0, 0, 4, &__p, buf);
      goto LABEL_437;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
        __int16 v299 = 1024;
        int v300 = 1496;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
      }
      v273 = __cxa_allocate_exception(0x10uLL);
      *(void *)v273 = off_1F148A5D8;
      v273[2] = 561211770;
    }
    int v134 = (*(uint64_t (**)(HALS_PlugInDevice *, BOOL, HALS_Client *))(*(void *)this + 536))(this, mScope == 1768845428, a9);
    long long v123 = a6;
    uint64_t v44 = a5;
    *a6 = v134 != 0;
    if (!v134) {
      goto LABEL_510;
    }
    uint64_t v135 = *((void *)this + 164);
    uint64_t v136 = *(void *)(v135 + 400);
    v137 = *(std::__shared_weak_count **)(v135 + 408);
    if (v137) {
      atomic_fetch_add_explicit(&v137->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (a9) {
      uint64_t v138 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v138 = 0;
    }
    int v219 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v136 + 552))(v136, *((unsigned int *)this + 331), v138, a3);
    char v220 = v219;
    if (v137)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v137);
      if ((v220 & 1) == 0) {
        goto LABEL_510;
      }
    }
    else if (!v219)
    {
      goto LABEL_510;
    }
    uint64_t v226 = *((void *)this + 164);
    uint64_t v126 = *(void *)(v226 + 400);
    int v127 = *(std::__shared_weak_count **)(v226 + 408);
    if (v127) {
      atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v176 = *((unsigned int *)this + 331);
    if (a9) {
      uint64_t v177 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v177 = 0;
    }
    goto LABEL_506;
  }
  if (mSelector != 1668641652)
  {
    if (mSelector == 1684107364)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
          __int16 v299 = 1024;
          int v300 = 1823;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyAvailablePastData", buf, 0x12u);
        }
        v266 = __cxa_allocate_exception(0x10uLL);
        *(void *)v266 = off_1F148A5D8;
        v266[2] = 561211770;
      }
      uint64_t v89 = *((void *)this + 164);
      uint64_t v90 = *(void *)(v89 + 400);
      char v47 = *(std::__shared_weak_count **)(v89 + 408);
      int64_t v57 = a6;
      v174 = a5;
      if (v47) {
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v91 = *((unsigned int *)this + 331);
      if (a9) {
        uint64_t v92 = *((unsigned int *)a9 + 58);
      }
      else {
        uint64_t v92 = 0;
      }
      goto LABEL_436;
    }
    if (mSelector != 1684301171) {
      goto LABEL_298;
    }
    if (a4 <= 7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_PlugInDevice.cpp";
        __int16 v299 = 1024;
        int v300 = 1858;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInDevice::GetPropertyData: bad property data size for kAudioDevicePropertyDeviceDescription", buf, 0x12u);
      }
      v253 = __cxa_allocate_exception(0x10uLL);
      *(void *)v253 = off_1F148A5D8;
      v253[2] = 561211770;
    }
    uint64_t v43 = *((void *)this + 164);
    uint64_t v38 = *(void *)(v43 + 400);
    uint64_t v39 = *(std::__shared_weak_count **)(v43 + 408);
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v40 = *((unsigned int *)this + 331);
    uint64_t v41 = a6;
    if (a9) {
      uint64_t v42 = *((unsigned int *)a9 + 58);
    }
    else {
      uint64_t v42 = 0;
    }
    goto LABEL_398;
  }
  unsigned int v128 = a4 / 0xC;
  if (*((_DWORD *)this + 334) < a4 / 0xC) {
    unsigned int v128 = *((_DWORD *)this + 334);
  }
  if (v128)
  {
    uint64_t v129 = 0;
    unint64_t v130 = 0;
    do
    {
      if (v130 < *((unsigned int *)this + 334))
      {
        long long v131 = &a6[v129];
        v132 = (uint64_t *)(*((void *)this + 166) + v129 * 4);
        uint64_t v133 = *v132;
        v131[2] = *((_DWORD *)v132 + 2);
        *(void *)long long v131 = v133;
      }
      ++v130;
      v129 += 3;
    }
    while (3 * v128 != v129);
  }
  *a5 = 12 * v128;
}

void sub_1BAB4D668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

unint64_t HALS_Stream::GetNumberAvailablePhysicalFormats(HALS_Stream *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F6270667461;
  int v4 = 0;
  return (*(unsigned int (**)(HALS_Stream *, uint64_t, uint64_t *, void, void, void))(*(void *)this + 104))(this, v1, &v3, 0, 0, 0)/ 0x38uLL;
}

uint64_t HALS_Stream::GetAvailablePhysicalFormats(HALS_Stream *this, int a2, unsigned int *a3, AudioStreamRangedDescription *a4)
{
  uint64_t v5 = *((unsigned int *)this + 4);
  uint64_t v7 = 0x676C6F6270667461;
  int v8 = 0;
  unsigned int v9 = 0;
  uint64_t result = (*(uint64_t (**)(HALS_Stream *, uint64_t, uint64_t *, void, unsigned int *, AudioStreamRangedDescription *, void, void, void))(*(void *)this + 112))(this, v5, &v7, (56 * a2), &v9, a4, 0, 0, 0);
  *a3 = v9 / 0x38;
  return result;
}

void std::vector<CAAudioValueRange>::reserve(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int v4 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v7 = &v4[16 * v6];
    unsigned int v9 = (char *)*a1;
    int v8 = (char *)a1[1];
    int v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      int v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::vector<CAAudioValueRange>::__assign_with_size[abi:ne180100]<CAAudioValueRange*,CAAudioValueRange*>(void *result, char *__src, char *a3, unint64_t a4)
{
  uint64_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  unsigned int v9 = (char *)*result;
  if (a4 > (v8 - *result) >> 4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 60) {
      goto LABEL_23;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    unint64_t v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v10;
    if (v11 >> 60) {
LABEL_23:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v11);
    unsigned int v9 = (char *)result;
    *uint64_t v7 = result;
    v7[1] = result;
    void v7[2] = &result[2 * v12];
    size_t v13 = a3 - v6;
    if (v13) {
      uint64_t result = memmove(result, v6, v13);
    }
    uint64_t v14 = (void **)(v7 + 1);
    goto LABEL_22;
  }
  uint64_t v14 = (void **)(result + 1);
  uint64_t v15 = (unsigned char *)result[1];
  unint64_t v16 = (v15 - v9) >> 4;
  if (v16 >= a4)
  {
    size_t v13 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_22;
    }
    uint64_t v18 = (void *)*result;
LABEL_21:
    uint64_t result = memmove(v18, __src, v13);
    goto LABEL_22;
  }
  uint64_t v17 = &__src[16 * v16];
  if (v15 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v15 - v9);
    unsigned int v9 = (char *)*v14;
  }
  size_t v13 = a3 - v17;
  if (v13)
  {
    uint64_t v18 = v9;
    __src = v17;
    goto LABEL_21;
  }
LABEL_22:
  *uint64_t v14 = &v9[v13];
  return result;
}

uint64_t caulk::numeric::exceptional_mul<unsigned int>(unsigned int a1)
{
  uint64_t result = 20 * a1;
  if ((result & 0xFFFFFFFF00000000) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic multiplication overflow");
    __cxa_throw(exception, (struct type_info *)off_1E6230090, MEMORY[0x1E4FBA1E0]);
  }
  return result;
}

void sub_1BAB4DBB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t caulk::numeric::exceptional_add<unsigned int>(int a1)
{
  BOOL v1 = __CFADD__(a1, 12);
  uint64_t result = (a1 + 12);
  if (v1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::overflow_error::overflow_error[abi:ne180100](exception, "arithmetic addition overflow");
    __cxa_throw(exception, (struct type_info *)off_1E6230090, MEMORY[0x1E4FBA1E0]);
  }
  return result;
}

void sub_1BAB4DC20(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *std::overflow_error::overflow_error[abi:ne180100](std::runtime_error *a1, const char *a2)
{
  uint64_t result = std::runtime_error::runtime_error(a1, a2);
  result->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA4E0] + 16);
  return result;
}

uint64_t HALS_PlugInDevice::GetPropertyDataSize(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, int *a5, AudioObjectPropertyAddress *a6)
{
  signed int mSelector = a3->mSelector;
  uint64_t v12 = 8;
  if ((int)a3->mSelector <= 1685222500)
  {
    if (mSelector <= 1635087470)
    {
      if (mSelector > 1634038356)
      {
        switch(mSelector)
        {
          case 1634038357:
            return v12;
          case 1634169456:
            uint64_t v24 = *((void *)this + 164);
            uint64_t v25 = *(void *)(v24 + 400);
            uint64_t v26 = *(std::__shared_weak_count **)(v24 + 408);
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v27 = *((unsigned int *)this + 331);
            if (a6) {
              uint64_t mScope = a6[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            break;
          case 1634429294:
            uint64_t v14 = *((void *)this + 164);
            uint64_t v15 = *(void *)(v14 + 400);
            unint64_t v16 = *(std::__shared_weak_count **)(v14 + 408);
            if (v16) {
              atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (a6) {
              uint64_t v17 = a6[19].mScope;
            }
            else {
              uint64_t v17 = 0;
            }
            int v30 = (*(uint64_t (**)(uint64_t, void, uint64_t, AudioObjectPropertyAddress *))(*(void *)v15 + 552))(v15, *((unsigned int *)this + 331), v17, a3);
            if (v16) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v16);
            }
            if (!v30) {
              return 4;
            }
            uint64_t v31 = *((void *)this + 164);
            uint64_t v25 = *(void *)(v31 + 400);
            uint64_t v26 = *(std::__shared_weak_count **)(v31 + 408);
            if (v26) {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v27 = *((unsigned int *)this + 331);
            if (a6) {
              uint64_t mScope = a6[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            break;
          default:
            goto LABEL_40;
        }
LABEL_76:
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *, HALS_Client *, int *))(*(void *)v25 + 568))(v25, v27, mScope, a3, a4, a5);
        if (v26)
        {
          uint64_t v33 = v26;
LABEL_78:
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        return v12;
      }
      if (mSelector == 1633903475 || mSelector == 1633906541) {
        return v12;
      }
      int v13 = 1634038341;
LABEL_21:
      if (mSelector != v13) {
        goto LABEL_40;
      }
      return 4;
    }
    if (mSelector <= 1668510817)
    {
      if (mSelector == 1635087471 || mSelector == 1667658618) {
        return 4;
      }
      int v13 = 1668050795;
      goto LABEL_21;
    }
    if (mSelector == 1668510818) {
      return 4;
    }
    if (mSelector == 1668641652) {
      return (12 * *((_DWORD *)this + 334));
    }
    int v18 = 1684301171;
    goto LABEL_39;
  }
  if (mSelector > 1851878763)
  {
    if (mSelector <= 1919251298)
    {
      if (mSelector == 1851878764) {
        return v12;
      }
      if (mSelector == 1853059619)
      {
        int NumberStreams = HALS_IODevice::GetNumberStreams(this, 0);
        if (NumberStreams || HALS_IODevice::GetNumberStreams(this, 1))
        {
          int v22 = (unsigned int *)HALS_IODevice::CopyStreamByIndex(this, NumberStreams == 0, 0);
          if (v22)
          {
            uint64_t v23 = v22[4];
            __p = (void *)0x676C6F6270667461;
            LODWORD(v42) = 0;
            (*(void (**)(unsigned int *, uint64_t, void **, void, void, void))(*(void *)v22 + 104))(v22, v23, &__p, 0, 0, 0);
          }
          operator new[]();
        }
        __p = (void *)0x676C6F626E737223;
        LODWORD(v42) = 0;
        if (a6) {
          uint64_t v32 = a6[19].mScope;
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v34 = *((void *)this + 164);
        uint64_t v35 = *(void *)(v34 + 400);
        uint64_t v36 = *(std::__shared_weak_count **)(v34 + 408);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v37 = (*(uint64_t (**)(uint64_t, void, uint64_t, void **))(*(void *)v35 + 552))(v35, *((unsigned int *)this + 331), v32, &__p);
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (!v37) {
          return 16;
        }
        uint64_t v38 = *((void *)this + 164);
        uint64_t v39 = *(void *)(v38 + 400);
        uint64_t v40 = *(std::__shared_weak_count **)(v38 + 408);
        if (v40) {
          atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t, void **, void, void))(*(void *)v39 + 568))(v39, *((unsigned int *)this + 331), v32, &__p, 0, 0);
        if (!v40) {
          return v12;
        }
        uint64_t v33 = v40;
        goto LABEL_78;
      }
      int v13 = 1886546294;
      goto LABEL_21;
    }
    if (mSelector == 1919251299 || mSelector == 1919251302) {
      return 4;
    }
    int v18 = 1920168547;
    goto LABEL_39;
  }
  if (mSelector > 1818850161)
  {
    if (mSelector != 1818850162)
    {
      if (mSelector == 1819173229) {
        return v12;
      }
      int v18 = 1836411236;
LABEL_39:
      if (mSelector == v18) {
        return v12;
      }
      goto LABEL_40;
    }
    return 12;
  }
  switch(mSelector)
  {
    case 1685222501:
      return 4;
    case 1685278578:
      return v12;
    case 1818850145:
      return 12;
  }
LABEL_40:
  if (!HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a6))
  {
    if (!(*(unsigned int (**)(char *, void))(*((void *)this + 163) + 24))((char *)this + 1304, a3->mSelector))return 0; {
    uint64_t v29 = *((void *)this + 164);
    }
    uint64_t v25 = *(void *)(v29 + 400);
    uint64_t v26 = *(std::__shared_weak_count **)(v29 + 408);
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v27 = *((unsigned int *)this + 331);
    if (a6) {
      uint64_t mScope = a6[19].mScope;
    }
    else {
      uint64_t mScope = 0;
    }
    goto LABEL_76;
  }

  return HALS_Device::GetPropertyDataSize((HALS_Device ***)this, v19, a3, a4, a5, a6);
}

void sub_1BAB4E404(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInDevice::IsPropertySettable(HALS_PlugInDevice *this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  uint64_t v7 = 0;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1684301170)
  {
    if (mSelector > 1818850161)
    {
      if (mSelector > 1919251298)
      {
        BOOL v14 = mSelector == 1919251299 || mSelector == 1919251302;
        int v15 = 1920168547;
LABEL_41:
        if (v14 || mSelector == v15) {
          return v7;
        }
        goto LABEL_53;
      }
      if (mSelector != 1818850162)
      {
        if (mSelector == 1886546294)
        {
          int v20 = *((_DWORD *)this + 5);
          int v19 = *((_DWORD *)this + 6);
          if (v20 == v19 || v20 == 1701078390)
          {
            if (v20 != 1701078390 && v20 == v19) {
              return 0;
            }
          }
          else if (v19 != 1701078390)
          {
            return 0;
          }
          uint64_t v29 = *((void *)this + 164);
          uint64_t v24 = *(void *)(v29 + 400);
          uint64_t v25 = *(std::__shared_weak_count **)(v29 + 408);
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v26 = *((unsigned int *)this + 331);
          if (a4) {
            uint64_t mScope = a4[19].mScope;
          }
          else {
            uint64_t mScope = 0;
          }
          goto LABEL_85;
        }
        goto LABEL_53;
      }
    }
    else
    {
      if (mSelector <= 1685222500)
      {
        if (mSelector == 1684301171) {
          return v7;
        }
        int v13 = 1685087596;
      }
      else
      {
        if (mSelector == 1685222501 || mSelector == 1685278578) {
          return v7;
        }
        int v13 = 1818850145;
      }
      if (mSelector != v13) {
        goto LABEL_53;
      }
    }
    return 1;
  }
  if (mSelector > 1635087470)
  {
    if (mSelector <= 1668050794)
    {
      BOOL v14 = mSelector == 1635087471;
      int v15 = 1667658618;
    }
    else
    {
      BOOL v14 = mSelector == 1668050795 || mSelector == 1668510818;
      int v15 = 1668641652;
    }
    goto LABEL_41;
  }
  if (mSelector <= 1634038340)
  {
    if (mSelector != 1633903475)
    {
      if (mSelector == 1633906541)
      {
        int v17 = *((_DWORD *)this + 5);
        int v16 = *((_DWORD *)this + 6);
        if (v17 == v16 || v17 == 1701078390)
        {
          if (v17 != 1701078390 && v17 == v16) {
            return 0;
          }
        }
        else if (v16 != 1701078390)
        {
          return 0;
        }
        uint64_t v28 = *((void *)this + 164);
        uint64_t v24 = *(void *)(v28 + 400);
        uint64_t v25 = *(std::__shared_weak_count **)(v28 + 408);
        if (v25) {
          atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v26 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
        goto LABEL_85;
      }
      goto LABEL_53;
    }
    return v7;
  }
  if (mSelector == 1634038341 || mSelector == 1634038357) {
    return v7;
  }
  if (mSelector == 1634169456)
  {
    int v11 = *((_DWORD *)this + 5);
    int v10 = *((_DWORD *)this + 6);
    if (v11 == v10 || v11 == 1701078390)
    {
      if (v11 != 1701078390 && v11 == v10) {
        return 0;
      }
    }
    else if (v10 != 1701078390)
    {
      return 0;
    }
    uint64_t v23 = *((void *)this + 164);
    uint64_t v24 = *(void *)(v23 + 400);
    uint64_t v25 = *(std::__shared_weak_count **)(v23 + 408);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = *((unsigned int *)this + 331);
    if (a4) {
      uint64_t mScope = a4[19].mScope;
    }
    else {
      uint64_t mScope = 0;
    }
    goto LABEL_85;
  }
LABEL_53:
  if (!HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4))
  {
    if (!(*(unsigned int (**)(char *, void))(*((void *)this + 163) + 24))((char *)this + 1304, a3->mSelector))return 0; {
    uint64_t v30 = *((void *)this + 164);
    }
    uint64_t v24 = *(void *)(v30 + 400);
    uint64_t v25 = *(std::__shared_weak_count **)(v30 + 408);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = *((unsigned int *)this + 331);
    if (a4) {
      uint64_t mScope = a4[19].mScope;
    }
    else {
      uint64_t mScope = 0;
    }
LABEL_85:
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, AudioObjectPropertyAddress *))(*(void *)v24 + 560))(v24, v26, mScope, a3);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    return v7;
  }

  return HALS_Device::IsPropertySettable((HALS_Device ***)this, v21, a3, a4);
}

void sub_1BAB4E934(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInDevice::HasProperty(HALS_PlugInDevice *this, const BOOL *a2, const AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1685287011)
  {
    if (mSelector > 1668510817)
    {
      if (mSelector > 1684893795)
      {
        if (mSelector > 1685222500)
        {
          if (mSelector == 1685222501)
          {
            uint64_t v55 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v55 + 400);
            int v15 = *(std::__shared_weak_count **)(v55 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
          if (mSelector == 1685278578)
          {
            uint64_t v31 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v31 + 400);
            int v15 = *(std::__shared_weak_count **)(v31 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
        }
        else
        {
          if (mSelector == 1684893796)
          {
            uint64_t v48 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v48 + 400);
            int v15 = *(std::__shared_weak_count **)(v48 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
          if (mSelector == 1685087596)
          {
            uint64_t v18 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v18 + 400);
            int v15 = *(std::__shared_weak_count **)(v18 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
        }
        goto LABEL_156;
      }
      if (mSelector <= 1684107363)
      {
        if (mSelector == 1668510818)
        {
          uint64_t v43 = *((void *)this + 164);
          uint64_t v14 = *(void *)(v43 + 400);
          int v15 = *(std::__shared_weak_count **)(v43 + 408);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *((unsigned int *)this + 331);
          if (a4) {
            uint64_t mScope = a4[19].mScope;
          }
          else {
            uint64_t mScope = 0;
          }
          goto LABEL_214;
        }
        if (mSelector == 1668641652) {
          return *((_DWORD *)this + 334) != 0;
        }
        goto LABEL_156;
      }
      if (mSelector == 1684107364)
      {
        uint64_t v49 = *((void *)this + 164);
        uint64_t v14 = *(void *)(v49 + 400);
        int v15 = *(std::__shared_weak_count **)(v49 + 408);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
        goto LABEL_214;
      }
      if (mSelector != 1684301171) {
        goto LABEL_156;
      }
      uint64_t v23 = *((void *)this + 164);
      uint64_t v24 = *(void *)(v23 + 400);
      uint64_t v25 = *(std::__shared_weak_count **)(v23 + 408);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v26 = *((unsigned int *)this + 331);
      if (a4) {
        uint64_t v27 = a4[19].mScope;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v62 = 0x676C6F6264646573;
      int v63 = 0;
      uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v24 + 552))(v24, v26, v27, &v62);
    }
    else
    {
      if (mSelector > 1634169455)
      {
        if (mSelector > 1667658617)
        {
          if (mSelector == 1667658618)
          {
            uint64_t v54 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v54 + 400);
            int v15 = *(std::__shared_weak_count **)(v54 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
          if (mSelector == 1668050795)
          {
            uint64_t v29 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v29 + 400);
            int v15 = *(std::__shared_weak_count **)(v29 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
        }
        else
        {
          if (mSelector == 1634169456)
          {
            int v46 = *((_DWORD *)this + 5);
            int v45 = *((_DWORD *)this + 6);
            if (v46 == v45 || v46 == 1701078390)
            {
              if (v46 != 1701078390 && v46 == v45) {
                return 0;
              }
            }
            else if (v45 != 1701078390)
            {
              return 0;
            }
            uint64_t v59 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v59 + 400);
            int v15 = *(std::__shared_weak_count **)(v59 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
          if (mSelector == 1635087471)
          {
            uint64_t v13 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v13 + 400);
            int v15 = *(std::__shared_weak_count **)(v13 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
        }
        goto LABEL_156;
      }
      if (mSelector > 1634038340)
      {
        if (mSelector == 1634038341 || mSelector == 1634038357)
        {
          uint64_t v21 = *((void *)this + 164);
          uint64_t v14 = *(void *)(v21 + 400);
          int v15 = *(std::__shared_weak_count **)(v21 + 408);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *((unsigned int *)this + 331);
          if (a4) {
            uint64_t mScope = a4[19].mScope;
          }
          else {
            uint64_t mScope = 0;
          }
          goto LABEL_214;
        }
        goto LABEL_156;
      }
      if (mSelector != 1633903475)
      {
        if (mSelector == 1633906541)
        {
          int v12 = *((_DWORD *)this + 5);
          int v11 = *((_DWORD *)this + 6);
          if (v12 == v11 || v12 == 1701078390)
          {
            if (v12 != 1701078390 && v12 == v11) {
              return 0;
            }
          }
          else if (v11 != 1701078390)
          {
            return 0;
          }
          uint64_t v57 = *((void *)this + 164);
          uint64_t v14 = *(void *)(v57 + 400);
          int v15 = *(std::__shared_weak_count **)(v57 + 408);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *((unsigned int *)this + 331);
          if (a4) {
            uint64_t mScope = a4[19].mScope;
          }
          else {
            uint64_t mScope = 0;
          }
          goto LABEL_214;
        }
        goto LABEL_156;
      }
      uint64_t v38 = *((void *)this + 164);
      uint64_t v39 = *(void *)(v38 + 400);
      uint64_t v25 = *(std::__shared_weak_count **)(v38 + 408);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v40 = *((unsigned int *)this + 331);
      if (a4) {
        uint64_t v41 = a4[19].mScope;
      }
      else {
        uint64_t v41 = 0;
      }
      uint64_t v62 = 0x676C6F6261636373;
      int v63 = 0;
      uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v39 + 552))(v39, v40, v41, &v62);
    }
    goto LABEL_206;
  }
  if (mSelector <= 1819111267)
  {
    if (mSelector > 1818455661)
    {
      if (mSelector > 1818850161)
      {
        if (mSelector != 1818850162)
        {
          if (mSelector == 1819107691)
          {
            uint64_t v30 = *((void *)this + 164);
            uint64_t v14 = *(void *)(v30 + 400);
            int v15 = *(std::__shared_weak_count **)(v30 + 408);
            if (v15) {
              atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v16 = *((unsigned int *)this + 331);
            if (a4) {
              uint64_t mScope = a4[19].mScope;
            }
            else {
              uint64_t mScope = 0;
            }
            goto LABEL_214;
          }
          goto LABEL_156;
        }
      }
      else
      {
        if (mSelector == 1818455662)
        {
          uint64_t v47 = *((void *)this + 164);
          uint64_t v14 = *(void *)(v47 + 400);
          int v15 = *(std::__shared_weak_count **)(v47 + 408);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *((unsigned int *)this + 331);
          if (a4) {
            uint64_t mScope = a4[19].mScope;
          }
          else {
            uint64_t mScope = 0;
          }
          goto LABEL_214;
        }
        if (mSelector != 1818850145) {
          goto LABEL_156;
        }
      }
      uint64_t v37 = *((void *)this + 164);
      uint64_t v14 = *(void *)(v37 + 400);
      int v15 = *(std::__shared_weak_count **)(v37 + 408);
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v16 = *((unsigned int *)this + 331);
      if (a4) {
        uint64_t mScope = a4[19].mScope;
      }
      else {
        uint64_t mScope = 0;
      }
      goto LABEL_214;
    }
    if (mSelector > 1768777572)
    {
      if (mSelector != 1768777573)
      {
        if (mSelector == 1818452846)
        {
          uint64_t v22 = *((void *)this + 164);
          uint64_t v14 = *(void *)(v22 + 400);
          int v15 = *(std::__shared_weak_count **)(v22 + 408);
          if (v15) {
            atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v16 = *((unsigned int *)this + 331);
          if (a4) {
            uint64_t mScope = a4[19].mScope;
          }
          else {
            uint64_t mScope = 0;
          }
          goto LABEL_214;
        }
        goto LABEL_156;
      }
    }
    else
    {
      if (mSelector == 1685287012)
      {
        uint64_t v42 = *((void *)this + 164);
        uint64_t v14 = *(void *)(v42 + 400);
        int v15 = *(std::__shared_weak_count **)(v42 + 408);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
        goto LABEL_214;
      }
      if (mSelector != 1768124270) {
        goto LABEL_156;
      }
    }
    uint64_t v36 = *((void *)this + 164);
    uint64_t v14 = *(void *)(v36 + 400);
    int v15 = *(std::__shared_weak_count **)(v36 + 408);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v16 = *((unsigned int *)this + 331);
    if (a4) {
      uint64_t mScope = a4[19].mScope;
    }
    else {
      uint64_t mScope = 0;
    }
    goto LABEL_214;
  }
  if (mSelector <= 1851878763)
  {
    if (mSelector <= 1819634019)
    {
      if (mSelector == 1819111268)
      {
        uint64_t v44 = *((void *)this + 164);
        uint64_t v14 = *(void *)(v44 + 400);
        int v15 = *(std::__shared_weak_count **)(v44 + 408);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
        goto LABEL_214;
      }
      if (mSelector != 1819173229) {
        goto LABEL_156;
      }
LABEL_100:
      uint64_t v32 = *((void *)this + 164);
      uint64_t v33 = *(void *)(v32 + 400);
      uint64_t v25 = *(std::__shared_weak_count **)(v32 + 408);
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v34 = *((unsigned int *)this + 331);
      if (a4) {
        uint64_t v35 = a4[19].mScope;
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t v62 = 0x676C6F626C6E616DLL;
      int v63 = 0;
      uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v33 + 552))(v33, v34, v35, &v62);
      goto LABEL_206;
    }
    if (mSelector != 1819634020)
    {
      if (mSelector == 1836411236)
      {
        uint64_t v28 = *((void *)this + 164);
        uint64_t v14 = *(void *)(v28 + 400);
        int v15 = *(std::__shared_weak_count **)(v28 + 408);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
        goto LABEL_214;
      }
      goto LABEL_156;
    }
    uint64_t v50 = *((void *)this + 164);
    uint64_t v51 = *(void *)(v50 + 400);
    uint64_t v25 = *(std::__shared_weak_count **)(v50 + 408);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v52 = *((unsigned int *)this + 331);
    if (a4) {
      uint64_t v53 = a4[19].mScope;
    }
    else {
      uint64_t v53 = 0;
    }
    uint64_t v62 = 0x676C6F626C756964;
    int v63 = 0;
    uint64_t v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v51 + 552))(v51, v52, v53, &v62);
LABEL_206:
    uint64_t v8 = v56;
    if (!v25) {
      return v8;
    }
    uint64_t v61 = v25;
LABEL_216:
    std::__shared_weak_count::__release_shared[abi:ne180100](v61);
    return v8;
  }
  if (mSelector <= 1919251298)
  {
    if (mSelector != 1851878764)
    {
      if (mSelector == 1886546294)
      {
        int v20 = *((_DWORD *)this + 5);
        int v19 = *((_DWORD *)this + 6);
        if (v20 == v19 || v20 == 1701078390)
        {
          if (v20 != 1701078390 && v20 == v19) {
            return 0;
          }
        }
        else if (v19 != 1701078390)
        {
          return 0;
        }
        uint64_t v58 = *((void *)this + 164);
        uint64_t v14 = *(void *)(v58 + 400);
        int v15 = *(std::__shared_weak_count **)(v58 + 408);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
        goto LABEL_214;
      }
LABEL_156:
      if (HALS_Device::HasProperty((HALS_Device ***)this, a2, a3, a4)) {
        return 1;
      }
      if ((*(unsigned int (**)(char *, void))(*((void *)this + 163) + 24))((char *)this + 1304, a3->mSelector))
      {
        uint64_t v60 = *((void *)this + 164);
        uint64_t v14 = *(void *)(v60 + 400);
        int v15 = *(std::__shared_weak_count **)(v60 + 408);
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v16 = *((unsigned int *)this + 331);
        if (a4) {
          uint64_t mScope = a4[19].mScope;
        }
        else {
          uint64_t mScope = 0;
        }
LABEL_214:
        uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(*(void *)v14 + 552))(v14, v16, mScope, a3);
        if (!v15) {
          return v8;
        }
        uint64_t v61 = v15;
        goto LABEL_216;
      }
      return 0;
    }
    goto LABEL_100;
  }
  uint64_t v8 = 1;
  if (mSelector == 1919251299 || mSelector == 1919251302) {
    return v8;
  }
  if (mSelector != 1920168547) {
    goto LABEL_156;
  }
  unsigned int v9 = (char *)this + 1304;

  return HALS_PlugInObject::HasResourceBundle((uint64_t)v9, (uint64_t)a4);
}

void sub_1BAB4F804(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInDevice::_Deactivate(HALS_PlugInDevice *this)
{
  uint64_t v2 = 0;
  char v3 = 1;
  do
  {
    char v4 = v3;
    uint64_t v5 = (char *)this + 24 * v2;
    uint64_t v6 = v5 + 1352;
    uint64_t v7 = *((void *)v5 + 169);
    if (v7 != *((void *)v5 + 168))
    {
      unint64_t v8 = 0;
      unsigned int v9 = (uint64_t *)(v5 + 1344);
      unsigned int v10 = 1;
      uint64_t v7 = *((void *)v5 + 168);
      do
      {
        int v11 = *(HALS_ObjectMap **)(v7 + 8 * v8);
        (*(void (**)(HALS_ObjectMap *))(*(void *)v11 + 8))(v11);
        HALS_ObjectMap::ObjectIsDead(v11, v12);
        unint64_t v8 = v10;
        uint64_t v7 = *v9;
        ++v10;
      }
      while (v8 < (*v6 - *v9) >> 3);
    }
    char v3 = 0;
    void *v6 = v7;
    uint64_t v2 = 1;
  }
  while ((v4 & 1) != 0);
  uint64_t v13 = *((void *)this + 175);
  if (v13 != *((void *)this + 174))
  {
    unint64_t v14 = 0;
    unsigned int v15 = 1;
    uint64_t v13 = *((void *)this + 174);
    do
    {
      uint64_t v16 = *(HALS_ObjectMap **)(v13 + 8 * v14);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v16 + 8))(v16);
      HALS_ObjectMap::ObjectIsDead(v16, v17);
      unint64_t v14 = v15;
      uint64_t v13 = *((void *)this + 174);
      ++v15;
    }
    while (v14 < (*((void *)this + 175) - v13) >> 3);
  }
  *((void *)this + 175) = v13;
  (*(void (**)(void, void))(**(void **)(*((void *)this + 164) + 400) + 144))(*(void *)(*((void *)this + 164) + 400), *((unsigned int *)this + 331));

  return HALS_Device::_Deactivate(this);
}

void HALS_PlugInDevice::Activate(HALS_PlugInDevice *this)
{
  HALS_PlugInDevice::UpdateStreams(this, &v1);
}

void sub_1BAB4FC04(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 - 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInDevice::HALS_PlugInDevice(HALS_PlugInDevice *this, HALB_Info *a2, HALS_PlugIn *a3, uint64_t a4)
{
  uint64_t v7 = *((void *)a3 + 50);
  uint64_t v8 = *((void *)a3 + 51);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 576))(v7, a4);
  HALS_Device::HALS_Device(this, a2, (uint64_t)a3, 0, v9);
}

void sub_1BAB4FFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  HALS_Device::~HALS_Device(v29);
  _Unwind_Resume(a1);
}

void sub_1BAB50168()
{
  if (v0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v0);
  }
  JUMPOUT(0x1BAB50160);
}

char *CAStreamBasicDescription::AsString(CAStreamBasicDescription *this, char *a2, size_t a3, double a4, int16x8_t a5)
{
  CA::StreamDescription::AsString((CA::StreamDescription *)__p, this, a4, a5);
  if (v10 >= 0) {
    uint64_t v7 = __p;
  }
  else {
    uint64_t v7 = (void **)__p[0];
  }
  strlcpy(a2, (const char *)v7, a3);
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  return a2;
}

void sub_1BAB501F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<AudioStreamRangedDescription>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<CA::RangedStreamDescription>::__vallocate[abi:ne180100](a1, a2);
    char v4 = (char *)a1[1];
    size_t v5 = 56 * ((56 * a2 - 56) / 0x38) + 56;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1BAB50294(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<AudioStreamRangedDescription>::resize(char **a1, unint64_t a2)
{
  char v3 = *a1;
  char v4 = a1[1];
  unint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 >= v5) {
      return;
    }
    uint64_t v22 = &v3[56 * a2];
    goto LABEL_19;
  }
  uint64_t v7 = a1[2];
  if (0x6DB6DB6DB6DB6DB7 * ((v7 - v4) >> 3) >= v6)
  {
    size_t v23 = 56 * ((56 * v6 - 56) / 0x38) + 56;
    bzero(a1[1], v23);
    uint64_t v22 = &v4[v23];
LABEL_19:
    a1[1] = v22;
    return;
  }
  if (a2 > 0x492492492492492) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((v7 - v3) >> 3);
  uint64_t v9 = 2 * v8;
  if (2 * v8 <= a2) {
    uint64_t v9 = a2;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v10 = 0x492492492492492;
  }
  else {
    unint64_t v10 = v9;
  }
  int v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(v10);
  int v12 = &v11[56 * v5];
  unint64_t v14 = &v11[56 * v13];
  size_t v15 = 56 * ((56 * v6 - 56) / 0x38) + 56;
  bzero(v12, v15);
  uint64_t v16 = &v12[v15];
  uint64_t v18 = *a1;
  int v17 = a1[1];
  if (v17 != *a1)
  {
    do
    {
      long long v19 = *(_OWORD *)(v17 - 56);
      long long v20 = *(_OWORD *)(v17 - 40);
      long long v21 = *(_OWORD *)(v17 - 24);
      *((void *)v12 - 1) = *((void *)v17 - 1);
      *(_OWORD *)(v12 - 24) = v21;
      *(_OWORD *)(v12 - 40) = v20;
      *(_OWORD *)(v12 - 56) = v19;
      v12 -= 56;
      v17 -= 56;
    }
    while (v17 != v18);
    int v17 = *a1;
  }
  *a1 = v12;
  a1[1] = v16;
  a1[2] = v14;
  if (v17)
  {
    operator delete(v17);
  }
}

void std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    char v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    char v4 = *(void **)(i - 24);
    if (v4)
    {
      *(void *)(i - 16) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t *std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::reserve(uint64_t *result, unint64_t a2)
{
  if (a2 > (result[2] - *result) >> 5)
  {
    if (a2 >> 59) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v2 = result;
    uint64_t v3 = result[1] - *result;
    v5[4] = result + 2;
    v5[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(a2);
    v5[1] = v5[0] + v3;
    uint64_t v5[2] = v5[0] + v3;
    _DWORD v5[3] = v5[0] + 32 * v4;
    std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(v2, v5);
    return (uint64_t *)std::__split_buffer<std::pair<unsigned int,std::vector<unsigned int>>>::~__split_buffer((uint64_t)v5);
  }
  return result;
}

BOOL CodecRegistryEntry::ReadRegistersFromCFData<CodecRegistryEntry::RegisterWidth>(uint64_t *a1, CFDataRef theData, int a3, int a4)
{
  if (!theData) {
    return theData != 0;
  }
  if (a4 == 1)
  {
    int64_t Length = CFDataGetLength(theData);
    BytePtr = CFDataGetBytePtr(theData);
    if (!BytePtr) {
      return theData != 0;
    }
    long long v19 = BytePtr;
    memset(&v79, 0, sizeof(v79));
    std::vector<unsigned int>::reserve(&v79, Length);
    if (Length <= 0)
    {
      std::vector<char>::pointer begin = v79.__begin_;
      std::vector<unsigned int>::pointer end = v79.__end_;
    }
    else
    {
      int v70 = a3;
      uint64_t v73 = a1;
      uint64_t v20 = 0;
      std::vector<unsigned int>::pointer end = v79.__end_;
      value = v79.__end_cap_.__value_;
      std::vector<char>::pointer begin = v79.__begin_;
      do
      {
        unsigned int v24 = v19[v20];
        if (end >= value)
        {
          uint64_t v25 = end - begin;
          unint64_t v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
          {
            v79.__begin_ = begin;
            v79.__end_ = end;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)value - (char *)begin) >> 1 > v26) {
            unint64_t v26 = ((char *)value - (char *)begin) >> 1;
          }
          if ((unint64_t)((char *)value - (char *)begin) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v27 = v26;
          }
          if (v27) {
            unint64_t v27 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v27);
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v29 = (unsigned int *)(v27 + 4 * v25);
          *uint64_t v29 = v24;
          uint64_t v30 = v29 + 1;
          while (end != begin)
          {
            unsigned int v31 = *--end;
            *--uint64_t v29 = v31;
          }
          value = (unsigned int *)(v27 + 4 * v28);
          if (begin) {
            operator delete(begin);
          }
          std::vector<char>::pointer begin = v29;
          std::vector<unsigned int>::pointer end = v30;
        }
        else
        {
          *end++ = v24;
        }
        ++v20;
      }
      while (v20 != Length);
      v79.__end_ = end;
      v79.__end_cap_.__value_ = value;
      v79.__begin_ = begin;
      a1 = v73;
      a3 = v70;
    }
    int v76 = a3;
    uint64_t v78 = 0;
    long long v77 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, begin, (uint64_t)end, end - begin);
    unint64_t v62 = a1[2];
    unint64_t v44 = a1[1];
    if (v44 >= v62)
    {
      uint64_t v45 = (uint64_t)(v44 - *a1) >> 5;
      unint64_t v64 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 59) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v65 = v62 - *a1;
      if (v65 >> 4 > v64) {
        unint64_t v64 = v65 >> 4;
      }
      if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v48 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v64;
      }
      goto LABEL_102;
    }
    goto LABEL_95;
  }
  if (a4 == 2)
  {
    unint64_t v12 = CFDataGetLength(theData);
    uint64_t v13 = CFDataGetBytePtr(theData);
    if (!v13) {
      return theData != 0;
    }
    unint64_t v14 = v13;
    memset(&v79, 0, sizeof(v79));
    std::vector<unsigned int>::reserve(&v79, v12 >> 1);
    if (v12 > 1)
    {
      int v71 = a3;
      int v74 = a1;
      uint64_t v32 = 0;
      if (v12 >> 1 <= 1) {
        uint64_t v33 = 1;
      }
      else {
        uint64_t v33 = v12 >> 1;
      }
      uint64_t v16 = v79.__end_;
      uint64_t v34 = v79.__end_cap_.__value_;
      size_t v15 = v79.__begin_;
      do
      {
        unsigned int v35 = *(unsigned __int16 *)&v14[2 * v32];
        if (v16 >= v34)
        {
          uint64_t v36 = v16 - v15;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
          {
            v79.__begin_ = v15;
            v79.__end_ = v16;
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if (((char *)v34 - (char *)v15) >> 1 > v37) {
            unint64_t v37 = ((char *)v34 - (char *)v15) >> 1;
          }
          if ((unint64_t)((char *)v34 - (char *)v15) >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v38 = v37;
          }
          if (v38) {
            unint64_t v38 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v38);
          }
          else {
            uint64_t v39 = 0;
          }
          uint64_t v40 = (unsigned int *)(v38 + 4 * v36);
          *uint64_t v40 = v35;
          uint64_t v41 = v40 + 1;
          while (v16 != v15)
          {
            unsigned int v42 = *--v16;
            *--uint64_t v40 = v42;
          }
          uint64_t v34 = (unsigned int *)(v38 + 4 * v39);
          if (v15) {
            operator delete(v15);
          }
          size_t v15 = v40;
          uint64_t v16 = v41;
        }
        else
        {
          *v16++ = v35;
        }
        ++v32;
      }
      while (v32 != v33);
      v79.__end_ = v16;
      v79.__end_cap_.__value_ = v34;
      v79.__begin_ = v15;
      a1 = v74;
      a3 = v71;
    }
    else
    {
      size_t v15 = v79.__begin_;
      uint64_t v16 = v79.__end_;
    }
    int v76 = a3;
    uint64_t v78 = 0;
    long long v77 = 0uLL;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, v15, (uint64_t)v16, v16 - v15);
    unint64_t v43 = a1[2];
    unint64_t v44 = a1[1];
    if (v44 >= v43)
    {
      uint64_t v45 = (uint64_t)(v44 - *a1) >> 5;
      unint64_t v46 = v45 + 1;
      if ((unint64_t)(v45 + 1) >> 59) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v47 = v43 - *a1;
      if (v47 >> 4 > v46) {
        unint64_t v46 = v47 >> 4;
      }
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v48 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v46;
      }
      goto LABEL_102;
    }
LABEL_95:
    *(_DWORD *)unint64_t v44 = v76;
    *(_OWORD *)(v44 + 8) = v77;
    *(void *)(v44 + 24) = v78;
    uint64_t v63 = v44 + 32;
    goto LABEL_103;
  }
  if (a4 != 4) {
    return theData != 0;
  }
  unint64_t v7 = CFDataGetLength(theData);
  unint64_t v8 = CFDataGetBytePtr(theData);
  if (!v8) {
    return theData != 0;
  }
  uint64_t v9 = v8;
  memset(&v79, 0, sizeof(v79));
  std::vector<unsigned int>::reserve(&v79, v7 >> 2);
  if (v7 > 3)
  {
    int v72 = a3;
    uint64_t v75 = a1;
    uint64_t v49 = 0;
    if (v7 >> 2 <= 1) {
      uint64_t v50 = 1;
    }
    else {
      uint64_t v50 = v7 >> 2;
    }
    int v11 = v79.__end_;
    uint64_t v51 = v79.__end_cap_.__value_;
    unint64_t v10 = v79.__begin_;
    do
    {
      if (v11 >= v51)
      {
        uint64_t v52 = v11 - v10;
        unint64_t v53 = v52 + 1;
        if ((unint64_t)(v52 + 1) >> 62)
        {
          v79.__begin_ = v10;
          v79.__end_ = v11;
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v51 - (char *)v10) >> 1 > v53) {
          unint64_t v53 = ((char *)v51 - (char *)v10) >> 1;
        }
        if ((unint64_t)((char *)v51 - (char *)v10) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v54 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v54 = v53;
        }
        if (v54) {
          unint64_t v54 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v54);
        }
        else {
          uint64_t v55 = 0;
        }
        uint64_t v56 = (unsigned int *)(v54 + 4 * v52);
        *uint64_t v56 = *(_DWORD *)&v9[4 * v49];
        uint64_t v57 = v56 + 1;
        while (v11 != v10)
        {
          unsigned int v58 = *--v11;
          *--uint64_t v56 = v58;
        }
        uint64_t v51 = (unsigned int *)(v54 + 4 * v55);
        if (v10) {
          operator delete(v10);
        }
        unint64_t v10 = v56;
        int v11 = v57;
      }
      else
      {
        *v11++ = *(_DWORD *)&v9[4 * v49];
      }
      ++v49;
    }
    while (v49 != v50);
    v79.__end_ = v11;
    v79.__end_cap_.__value_ = v51;
    v79.__begin_ = v10;
    a1 = v75;
    a3 = v72;
  }
  else
  {
    unint64_t v10 = v79.__begin_;
    int v11 = v79.__end_;
  }
  int v76 = a3;
  uint64_t v78 = 0;
  long long v77 = 0uLL;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v77, v10, (uint64_t)v11, v11 - v10);
  unint64_t v59 = a1[2];
  unint64_t v44 = a1[1];
  if (v44 < v59) {
    goto LABEL_95;
  }
  uint64_t v45 = (uint64_t)(v44 - *a1) >> 5;
  unint64_t v60 = v45 + 1;
  if ((unint64_t)(v45 + 1) >> 59) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v61 = v59 - *a1;
  if (v61 >> 4 > v60) {
    unint64_t v60 = v61 >> 4;
  }
  if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v48 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v48 = v60;
  }
LABEL_102:
  v80[4] = a1 + 2;
  uint64_t v66 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CAPropertyAddressList>>(v48);
  uint64_t v67 = &v66[32 * v45];
  v80[0] = v66;
  v80[1] = v67;
  v80[3] = &v66[32 * v68];
  *(_DWORD *)uint64_t v67 = v76;
  *(_OWORD *)(v67 + 8) = v77;
  *((void *)v67 + 3) = v78;
  v80[2] = v67 + 32;
  std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(a1, v80);
  uint64_t v63 = a1[1];
  std::__split_buffer<std::pair<unsigned int,std::vector<unsigned int>>>::~__split_buffer((uint64_t)v80);
LABEL_103:
  a1[1] = v63;
  if (v79.__begin_) {
    operator delete(v79.__begin_);
  }
  return theData != 0;
}

void sub_1BAB50B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<std::pair<unsigned int,std::vector<unsigned int>>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  if (v2 != *result)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = v4 + v5;
      uint64_t v7 = v2 + v5;
      *(_DWORD *)(v6 - 32) = *(_DWORD *)(v2 + v5 - 32);
      *(void *)(v6 - 16) = 0;
      *(void *)(v6 - 8) = 0;
      *(void *)(v6 - 24) = 0;
      *(_OWORD *)(v6 - 24) = *(_OWORD *)(v2 + v5 - 24);
      *(void *)(v6 - 8) = *(void *)(v2 + v5 - 8);
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      v5 -= 32;
    }
    while (v2 + v5 != v3);
    v4 += v5;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::pair<unsigned int,std::vector<unsigned int>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void AMCP::Core::Driver_Manager::load(void *a1, long long *a2, const void ***a3, const void ***a4)
{
  uint64_t v415 = *MEMORY[0x1E4F143B8];
  CFBundleRef MainBundle = CFBundleGetMainBundle();
  uint64_t v9 = (uint64_t)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(&v390, MainBundle);
  if (!v390)
  {
    int64x2_t v388 = 0uLL;
    std::string::pointer data = 0;
    v385 = 0;
    v386 = 0;
    uint64_t v387 = 0;
LABEL_11:
    if (&v388 != (int64x2_t *)a3) {
      std::vector<applesauce::CF::StringRef>::__assign_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>((uint64_t)&v388, *a3, a3[1], a3[1] - *a3);
    }
    if (&v385 != (const __CFString ***)a4) {
      std::vector<applesauce::CF::StringRef>::__assign_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>((uint64_t)&v385, *a4, a4[1], a4[1] - *a4);
    }
    goto LABEL_15;
  }
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)cf, (__CFBundle *)v390);
  CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.coreaudiod", 26, 0x8000100u, 0);
  *(void *)v410 = v10;
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFComparisonResult v11 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf[0].__r_.__value_.__l.__data_, (const __CFString **)v410);
  CFRelease(v10);
  uint64_t v9 = cf[0].__r_.__value_.__r.__words[0];
  if (cf[0].__r_.__value_.__r.__words[0]) {
    CFRelease(cf[0].__r_.__value_.__l.__data_);
  }
  int64x2_t v388 = 0uLL;
  std::string::pointer data = 0;
  v385 = 0;
  v386 = 0;
  uint64_t v387 = 0;
  if (v11) {
    goto LABEL_11;
  }
  uint64_t v9 = AMCP::Feature_Flags::access_run_new_hal(0, v12);
  if (v9) {
    goto LABEL_11;
  }
  uint64_t v9 = AMCP::Feature_Flags::access_allow_mcp_and_hal_coex(0, v13);
  if (v9) {
    goto LABEL_11;
  }
  if (v388.i64[1] >= (unint64_t)data)
  {
    uint64_t v342 = (v388.i64[1] - v388.i64[0]) >> 3;
    if ((unint64_t)(v342 + 1) >> 61) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v343 = (uint64_t)&data[-v388.i64[0]] >> 2;
    if (v343 <= v342 + 1) {
      unint64_t v343 = v342 + 1;
    }
    if ((unint64_t)&data[-v388.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v344 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v344 = v343;
    }
    cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)&data;
    if (v344) {
      unint64_t v344 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v344);
    }
    else {
      uint64_t v345 = 0;
    }
    cf[0].__r_.__value_.__r.__words[0] = v344;
    cf[0].__r_.__value_.__l.__size_ = v344 + 8 * v342;
    cf[0].__r_.__value_.__r.__words[2] = cf[0].__r_.__value_.__l.__size_;
    cf[1].__r_.__value_.__r.__words[0] = v344 + 8 * v345;
    std::construct_at[abi:ne180100]<applesauce::CF::StringRef,char const(&)[28],applesauce::CF::StringRef*>((CFStringRef *)cf[0].__r_.__value_.__l.__size_);
    std::string::size_type size = cf[0].__r_.__value_.__l.__size_;
    uint64_t v14 = cf[0].__r_.__value_.__r.__words[2] + 8;
    cf[0].__r_.__value_.__r.__words[2] += 8;
    v347 = (void *)v388.i64[1];
    v348 = (void *)v388.i64[0];
    if (v388.i64[1] == v388.i64[0])
    {
      int64x2_t v350 = vdupq_n_s64(v388.u64[1]);
    }
    else
    {
      do
      {
        uint64_t v349 = *--v347;
        *(void *)(size - 8) = v349;
        size -= 8;
        void *v347 = 0;
      }
      while (v347 != v348);
      int64x2_t v350 = v388;
      uint64_t v14 = cf[0].__r_.__value_.__r.__words[2];
    }
    v388.i64[0] = size;
    v388.i64[1] = v14;
    *(int64x2_t *)&cf[0].__r_.__value_.__r.__words[1] = v350;
    std::string::size_type v351 = (std::string::size_type)data;
    std::string::pointer data = cf[1].__r_.__value_.__l.__data_;
    cf[1].__r_.__value_.__r.__words[0] = v351;
    cf[0].__r_.__value_.__r.__words[0] = v350.i64[0];
    uint64_t v9 = std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)cf);
  }
  else
  {
    uint64_t v9 = (uint64_t)std::construct_at[abi:ne180100]<applesauce::CF::StringRef,char const(&)[28],applesauce::CF::StringRef*>((CFStringRef *)v388.i64[1]);
    uint64_t v14 = v388.i64[1] + 8;
  }
  v388.i64[1] = v14;
LABEL_15:
  if (v388.i64[0] == v388.i64[1]) {
    goto LABEL_24;
  }
  CFStringRef v15 = CFStringCreateWithBytes(0, (const UInt8 *)"*", 1, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v15;
  if (!v15)
  {
    v354 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v354, "Could not construct");
    __cxa_throw(v354, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v16 = v385;
  int v17 = v386;
  if (v385 == v386)
  {
    BOOL v18 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v16, (const __CFString **)cf))
    {
      if (++v16 == v17)
      {
        uint64_t v16 = v17;
        break;
      }
    }
    BOOL v18 = v16 != v386;
  }
  CFRelease(v15);
  if (v18)
  {
LABEL_24:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
    int v20 = *(_DWORD *)(*(void *)v410 + 16);
    switch(v20)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v33 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          uint64_t v34 = pthread_self();
          mach_port_t v35 = pthread_mach_thread_np(v34);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v35;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 63;
          unsigned int v24 = v33;
          os_log_type_t v25 = OS_LOG_TYPE_INFO;
          goto LABEL_45;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v30 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
        {
          unsigned int v31 = pthread_self();
          mach_port_t v32 = pthread_mach_thread_np(v31);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v32;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 63;
          _os_log_debug_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading no drivers.", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v19);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        long long v21 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v22 = pthread_self();
          mach_port_t v23 = pthread_mach_thread_np(v22);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v23;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 63;
          unsigned int v24 = v21;
          os_log_type_t v25 = OS_LOG_TYPE_DEFAULT;
LABEL_45:
          _os_log_impl(&dword_1BAA78000, v24, v25, "%6u %32s:%-5d Loading no drivers.", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    uint64_t v36 = *(std::__shared_weak_count **)&v410[8];
    if (!*(void *)&v410[8]) {
      goto LABEL_599;
    }
    goto LABEL_47;
  }
  CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)"*", 1, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
  if (!v26)
  {
    v355 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v355, "Could not construct");
    __cxa_throw(v355, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v28 = (const __CFString **)v388.i64[1];
  unint64_t v27 = (const __CFString **)v388.i64[0];
  if (v388.i64[0] == v388.i64[1])
  {
    BOOL v29 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v27, (const __CFString **)cf))
    {
      if (++v27 == v28)
      {
        unint64_t v27 = v28;
        break;
      }
    }
    BOOL v29 = v27 != (const __CFString **)v388.i64[1];
  }
  CFRelease(v26);
  if (v29)
  {
    AMCP::Log::Scope_Registry::get(v37);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
    int v39 = *(_DWORD *)(*(void *)v410 + 16);
    switch(v39)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v38);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v65 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (!os_log_type_enabled(v65, OS_LOG_TYPE_INFO)) {
          goto LABEL_104;
        }
        uint64_t v66 = pthread_self();
        mach_port_t v67 = pthread_mach_thread_np(v66);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v67;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 67;
        unint64_t v43 = v65;
        os_log_type_t v44 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v38);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        unint64_t v62 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v63 = pthread_self();
          mach_port_t v64 = pthread_mach_thread_np(v63);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v64;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 67;
          _os_log_debug_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading all drivers...", (uint8_t *)cf, 0x18u);
        }
        goto LABEL_104;
      case 1:
        AMCP::Log::Scope_Registry::get(v38);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v40 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        {
LABEL_104:
          if (*(void *)&v410[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
          }
          BOOL v68 = 1;
          goto LABEL_158;
        }
        uint64_t v41 = pthread_self();
        mach_port_t v42 = pthread_mach_thread_np(v41);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v42;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 67;
        unint64_t v43 = v40;
        os_log_type_t v44 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_104;
    }
    _os_log_impl(&dword_1BAA78000, v43, v44, "%6u %32s:%-5d Loading all drivers...", (uint8_t *)cf, 0x18u);
    goto LABEL_104;
  }
  if (!*(void *)v388.i64[0])
  {
LABEL_617:
    v352 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v352, "Could not construct");
    __cxa_throw(v352, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v45 = (std::string *)applesauce::CF::convert_to<std::string,0>((uint64_t)v410, *(const __CFString **)v388.i64[0]);
  if (v388.i64[1] - v388.i64[0] >= 9uLL)
  {
    uint64_t v46 = 1;
    do
    {
      std::string::append((std::string *)v410, ", ", 2uLL);
      CFStringRef v47 = *(const __CFString **)(v388.i64[0] + 8 * v46);
      if (!v47) {
        goto LABEL_617;
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)cf, v47);
      if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v48 = cf;
      }
      else {
        unint64_t v48 = (std::string *)cf[0].__r_.__value_.__r.__words[0];
      }
      if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v49 = HIBYTE(cf[0].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v49 = cf[0].__r_.__value_.__l.__size_;
      }
      uint64_t v45 = std::string::append((std::string *)v410, (const std::string::value_type *)v48, v49);
      if (SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(cf[0].__r_.__value_.__l.__data_);
      }
    }
    while (++v46 < (unint64_t)((v388.i64[1] - v388.i64[0]) >> 3));
  }
  memset(&v407, 0, sizeof(v407));
  if (v385 != v386)
  {
    if (!*v385) {
      goto LABEL_617;
    }
    uint64_t v45 = (std::string *)applesauce::CF::convert_to<std::string,0>((uint64_t)cf, *v385);
    if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v407.__r_.__value_.__l.__data_);
    }
    std::string v407 = cf[0];
    if ((unint64_t)((char *)v386 - (char *)v385) >= 9)
    {
      uint64_t v50 = 1;
      do
      {
        std::string::append(&v407, ", ", 2uLL);
        CFStringRef v51 = v385[v50];
        if (!v51) {
          goto LABEL_617;
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)cf, v51);
        if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v52 = cf;
        }
        else {
          uint64_t v52 = (std::string *)cf[0].__r_.__value_.__r.__words[0];
        }
        if ((cf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v53 = HIBYTE(cf[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v53 = cf[0].__r_.__value_.__l.__size_;
        }
        uint64_t v45 = std::string::append(&v407, (const std::string::value_type *)v52, v53);
        if (SHIBYTE(cf[0].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(cf[0].__r_.__value_.__l.__data_);
        }
      }
      while (++v50 < (unint64_t)(v386 - v385));
    }
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v45);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v405, "com.apple.coreaudio", "AMCP");
  int v55 = *((_DWORD *)v405[0] + 4);
  switch(v55)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v73 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v73, OS_LOG_TYPE_INFO))
      {
        int v74 = pthread_self();
        mach_port_t v75 = pthread_mach_thread_np(v74);
        int v76 = v410;
        if (v410[23] < 0) {
          int v76 = *(unsigned char **)v410;
        }
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v75;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 87;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v76;
        unint64_t v60 = v73;
        os_log_type_t v61 = OS_LOG_TYPE_INFO;
        goto LABEL_119;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v69 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        int v70 = pthread_self();
        mach_port_t v71 = pthread_mach_thread_np(v70);
        int v72 = v410;
        if (v410[23] < 0) {
          int v72 = *(unsigned char **)v410;
        }
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v71;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 87;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v72;
        _os_log_debug_impl(&dword_1BAA78000, v69, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v54);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v56 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = pthread_self();
        mach_port_t v58 = pthread_mach_thread_np(v57);
        unint64_t v59 = v410;
        if (v410[23] < 0) {
          unint64_t v59 = *(unsigned char **)v410;
        }
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v58;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 87;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v59;
        unint64_t v60 = v56;
        os_log_type_t v61 = OS_LOG_TYPE_DEFAULT;
LABEL_119:
        _os_log_impl(&dword_1BAA78000, v60, v61, "%6u %32s:%-5d Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
  }
  long long v77 = (AMCP::Log::Scope_Registry *)v405[1];
  if (v405[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v405[1]);
  }
  AMCP::Log::Scope_Registry::get(v77);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v405, "com.apple.coreaudio", "AMCP");
  int v79 = *((_DWORD *)v405[0] + 4);
  switch(v79)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v78);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v90 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (!os_log_type_enabled(v90, OS_LOG_TYPE_INFO)) {
        break;
      }
      uint64_t v91 = pthread_self();
      mach_port_t v92 = pthread_mach_thread_np(v91);
      uint64_t v93 = &v407;
      if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v93 = (std::string *)v407.__r_.__value_.__r.__words[0];
      }
      LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v92;
      LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
      WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 88;
      LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
      *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v93;
      uint64_t v84 = v90;
      os_log_type_t v85 = OS_LOG_TYPE_INFO;
      goto LABEL_143;
    case 2:
      AMCP::Log::Scope_Registry::get(v78);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      char v86 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v87 = pthread_self();
        mach_port_t v88 = pthread_mach_thread_np(v87);
        uint64_t v89 = &v407;
        if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v89 = (std::string *)v407.__r_.__value_.__r.__words[0];
        }
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v88;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 88;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v89;
        _os_log_debug_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Not Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v78);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v80 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v81 = pthread_self();
        mach_port_t v82 = pthread_mach_thread_np(v81);
        uint64_t v83 = &v407;
        if ((v407.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v83 = (std::string *)v407.__r_.__value_.__r.__words[0];
        }
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109890;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v82;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 88;
        LOWORD(cf[1].__r_.__value_.__l.__data_) = 2080;
        *(std::string::size_type *)((char *)cf[1].__r_.__value_.__r.__words + 2) = (std::string::size_type)v83;
        uint64_t v84 = v80;
        os_log_type_t v85 = OS_LOG_TYPE_DEFAULT;
LABEL_143:
        _os_log_impl(&dword_1BAA78000, v84, v85, "%6u %32s:%-5d Not Loading drivers: %s...", (uint8_t *)cf, 0x22u);
      }
      break;
  }
  if (v405[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v405[1]);
  }
  if (SHIBYTE(v407.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v407.__r_.__value_.__l.__data_);
  }
  if ((v410[23] & 0x80000000) != 0) {
    operator delete(*(void **)v410);
  }
  CFStringRef v94 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
  if (!v94)
  {
    v378 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v378, "Could not construct");
    __cxa_throw(v378, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v96 = (const __CFString **)v388.i64[1];
  uint64_t v95 = (const __CFString **)v388.i64[0];
  if (v388.i64[0] == v388.i64[1])
  {
    BOOL v68 = 0;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v95, (const __CFString **)cf))
    {
      if (++v95 == v96)
      {
        uint64_t v95 = v96;
        break;
      }
    }
    BOOL v68 = v95 != (const __CFString **)v388.i64[1];
  }
  CFRelease(v94);
LABEL_158:
  CFStringRef v97 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
  if (!v97)
  {
    v356 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v356, "Could not construct");
    __cxa_throw(v356, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v98 = v385;
  uint64_t v99 = v386;
  if (v385 == v386)
  {
    BOOL v100 = 1;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v98, (const __CFString **)cf))
    {
      if (++v98 == v99)
      {
        uint64_t v98 = v99;
        break;
      }
    }
    BOOL v100 = v98 == v386;
  }
  CFRelease(v97);
  if (!v68 || !v100)
  {
    BOOL v383 = 0;
    goto LABEL_256;
  }
  BOOL v383 = v388.i64[1] - v388.i64[0] == 8;
  AMCP::Log::Scope_Registry::get(v101);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
  int v103 = *(_DWORD *)(*(void *)v410 + 16);
  switch(v103)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      unsigned int v112 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
      {
        uint64_t v113 = pthread_self();
        mach_port_t v114 = pthread_mach_thread_np(v113);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v114;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 102;
        uint64_t v107 = v112;
        os_log_type_t v108 = OS_LOG_TYPE_INFO;
        goto LABEL_182;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      int v109 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v110 = pthread_self();
        mach_port_t v111 = pthread_mach_thread_np(v110);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v111;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 102;
        _os_log_debug_impl(&dword_1BAA78000, v109, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading Null driver (com.apple.audio.Null-Driver)...", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v102);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v104 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v105 = pthread_self();
        mach_port_t v106 = pthread_mach_thread_np(v105);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v106;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 102;
        uint64_t v107 = v104;
        os_log_type_t v108 = OS_LOG_TYPE_DEFAULT;
LABEL_182:
        _os_log_impl(&dword_1BAA78000, v107, v108, "%6u %32s:%-5d Loading Null driver (com.apple.audio.Null-Driver)...", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  if (*(void *)&v410[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
  }
  long long v380 = *a2;
  uint64_t v115 = (std::__shared_weak_count *)*((void *)a2 + 1);
  if (v115) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a2 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v116 = (char *)operator new(0xA8uLL);
  long long v117 = v116;
  *((void *)v116 + 1) = 0;
  *((void *)v116 + 2) = 0;
  *(void *)uint64_t v116 = &unk_1F145FB60;
  std::string::size_type v118 = (std::string::size_type)(v116 + 24);
  if (v115) {
    atomic_fetch_add_explicit(&v115->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v116 + 4) = 0;
  *((void *)v116 + 5) = 0;
  *(_OWORD *)(v116 + 56) = v380;
  *((void *)v116 + 3) = &unk_1F1471260;
  *((void *)v116 + 4) = v118;
  *((void *)v116 + 5) = v116;
  *((void *)v116 + 6) = &unk_1F1471288;
  *((_DWORD *)v116 + 18) = 0;
  *((void *)v116 + 10) = 850045863;
  *(_OWORD *)(v116 + 88) = 0u;
  *(_OWORD *)(v116 + 104) = 0u;
  *(_OWORD *)(v116 + 120) = 0u;
  *(_OWORD *)(v116 + 136) = 0u;
  *(_OWORD *)(v116 + 152) = 0u;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v116 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v116 + 2, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v116);
  int v119 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)v117 + 7) + 16));
  *((_DWORD *)v117 + 18) = v119;
  memset(v410, 0, sizeof(v410));
  int v411 = 1065353216;
  LODWORD(v391) = v119;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v391, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  LODWORD(v391) = 1853189228;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v391, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  LODWORD(v391) = 1853189228;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v391, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  LODWORD(v391) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v391, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFStringRef v120 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  if (!v120)
  {
    v361 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v361, "Could not construct");
    __cxa_throw(v361, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v391 = 0x676C6F626F706C67;
  DWORD2(v391) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v391, v120);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v120);
  int v121 = *((_DWORD *)v117 + 18);
  *(void *)&long long v391 = *(void *)(*((void *)v117 + 7) + 16);
  DWORD2(v391) = v121;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, &v391, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFStringRef v122 = CFStringCreateWithBytes(0, (const UInt8 *)"Null Driver", 11, 0x8000100u, 0);
  if (!v122)
  {
    v363 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v363, "Could not construct");
    __cxa_throw(v363, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v391 = 0x676C6F626C6E616DLL;
  DWORD2(v391) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v391, v122);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v122);
  CFStringRef v123 = CFStringCreateWithBytes(0, (const UInt8 *)"Apple Inc.", 10, 0x8000100u, 0);
  if (!v123)
  {
    v366 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v366, "Could not construct");
    __cxa_throw(v366, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v391 = 0x676C6F626C6D616BLL;
  DWORD2(v391) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v391, v123);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v123);
  CFStringRef v124 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  if (!v124)
  {
    v369 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v369, "Could not construct");
    __cxa_throw(v369, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)&long long v391 = 0x676C6F6270696964;
  DWORD2(v391) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v391, v124);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v124);
  unsigned int v125 = *((_DWORD *)v117 + 18);
  *(void *)&long long v391 = *(void *)(*((void *)v117 + 7) + 16);
  *((void *)&v391 + 1) = v125 | 0x61626F7800000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, &v391, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  unsigned int v126 = *((_DWORD *)v117 + 18);
  *(void *)&long long v391 = *(void *)(*((void *)v117 + 7) + 16);
  *((void *)&v391 + 1) = v126 | 0x61636C6B00000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, &v391, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  unsigned int v127 = *((_DWORD *)v117 + 18);
  *(void *)&long long v391 = *(void *)(*((void *)v117 + 7) + 16);
  *((void *)&v391 + 1) = v127 | 0x6164657600000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)cf, 0, &v391, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)v405, 0, 1.5836601e190);
  unsigned int v128 = (unsigned int *)v405[0];
  unint64_t v129 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>();
  v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1471350;
  v407.__r_.__value_.__l.__size_ = v118;
  v408 = &v407;
  memset(cf, 0, 40);
  std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v407);
  cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v128, v129, (AMCP *)cf);
  if (cf[1].__r_.__value_.__l.__size_) {
    ((void (*)(void, std::string *, void, void))cf[1].__r_.__value_.__l.__size_)(0, cf, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(applesauce::CF::ArrayRef const&)>::~__value_func[abi:ne180100](&v407);
  unint64_t v130 = AMCP::Implementation::get_type_marker<std::function<void ()(std::vector<unsigned int> const&)>>();
  v407.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F14713E0;
  v407.__r_.__value_.__l.__size_ = v118;
  v408 = &v407;
  memset(cf, 0, 40);
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v407);
  cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<void ()(std::vector<unsigned int> const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v128, v130, (AMCP *)cf);
  if (cf[1].__r_.__value_.__l.__size_) {
    ((void (*)(void, std::string *, void, void))cf[1].__r_.__value_.__l.__size_)(0, cf, 0, 0);
  }
  std::__function::__value_func<void ()(std::vector<unsigned int> const&)>::~__value_func[abi:ne180100](&v407);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, v128 + 10, v405);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)cf, *(std::__shared_mutex_base **)(*((void *)v117 + 7) + 16), (uint64_t)v410, *((_DWORD *)v117 + 18));
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  if (v405[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v405[1]);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&v410[16]);
  long long v131 = *(void **)v410;
  *(void *)v410 = 0;
  if (v131) {
    operator delete(v131);
  }
  unint64_t v132 = a1[2];
  uint64_t v133 = (std::string::size_type *)a1[1];
  if ((unint64_t)v133 >= v132)
  {
    uint64_t v135 = ((uint64_t)v133 - *a1) >> 4;
    unint64_t v136 = v135 + 1;
    if ((unint64_t)(v135 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v137 = v132 - *a1;
    if (v137 >> 3 > v136) {
      unint64_t v136 = v137 >> 3;
    }
    if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v138 = v136;
    }
    v394 = a1 + 2;
    uint64_t v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v138);
    *(void *)&long long v140 = v118;
    *((void *)&v140 + 1) = v117;
    uint64_t v141 = &v139[16 * v135];
    *(void *)&long long v391 = v139;
    *((void *)&v391 + 1) = v141;
    v393 = &v139[16 * v142];
    *(_OWORD *)uint64_t v141 = v140;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v117 + 1, 1uLL, memory_order_relaxed);
    v392 = v141 + 16;
    std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(a1, &v391);
    int v134 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v391);
  }
  else
  {
    *uint64_t v133 = v118;
    v133[1] = (std::string::size_type)v117;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v117 + 1, 1uLL, memory_order_relaxed);
    int v134 = v133 + 2;
  }
  a1[1] = v134;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v117);
  if (v115) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v115);
  }
  AMCP::Log::Scope_Registry::get(v143);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
  int v145 = *(_DWORD *)(*(void *)v410 + 16);
  switch(v145)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v144);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v154 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (!os_log_type_enabled(v154, OS_LOG_TYPE_INFO)) {
        break;
      }
      uint64_t v155 = pthread_self();
      mach_port_t v156 = pthread_mach_thread_np(v155);
      LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
      HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v156;
      LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
      WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 104;
      uint64_t v149 = v154;
      os_log_type_t v150 = OS_LOG_TYPE_INFO;
      goto LABEL_253;
    case 2:
      AMCP::Log::Scope_Registry::get(v144);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v151 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v151, OS_LOG_TYPE_DEBUG))
      {
        v152 = pthread_self();
        mach_port_t v153 = pthread_mach_thread_np(v152);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v153;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 104;
        _os_log_debug_impl(&dword_1BAA78000, v151, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading Null driver (com.apple.audio.Null-Driver).", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v144);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      uint64_t v146 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
      {
        v147 = pthread_self();
        mach_port_t v148 = pthread_mach_thread_np(v147);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v148;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 104;
        uint64_t v149 = v146;
        os_log_type_t v150 = OS_LOG_TYPE_DEFAULT;
LABEL_253:
        _os_log_impl(&dword_1BAA78000, v149, v150, "%6u %32s:%-5d Done loading Null driver (com.apple.audio.Null-Driver).", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  if (*(void *)&v410[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
  }
LABEL_256:
  if (v29)
  {
    BOOL v157 = 1;
  }
  else
  {
    CFStringRef v158 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
    cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v158;
    if (!v158)
    {
      v360 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v360, "Could not construct");
      __cxa_throw(v360, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v160 = (const __CFString **)v388.i64[1];
    uint64_t v159 = (const __CFString **)v388.i64[0];
    if (v388.i64[0] == v388.i64[1])
    {
      BOOL v157 = 0;
    }
    else
    {
      while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v159, (const __CFString **)cf))
      {
        if (++v159 == v160)
        {
          uint64_t v159 = v160;
          break;
        }
      }
      BOOL v157 = v159 != (const __CFString **)v388.i64[1];
    }
    CFRelease(v158);
  }
  CFStringRef v161 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v161;
  if (!v161)
  {
    v357 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v357, "Could not construct");
    __cxa_throw(v357, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v162 = v385;
  uint64_t v163 = v386;
  if (v385 == v386)
  {
    BOOL v164 = 1;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v162, (const __CFString **)cf))
    {
      if (++v162 == v163)
      {
        uint64_t v162 = v163;
        break;
      }
    }
    BOOL v164 = v162 == v386;
  }
  CFRelease(v161);
  if (v157 && v164)
  {
    AMCP::Log::Scope_Registry::get(v165);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
    int v167 = *(_DWORD *)(*(void *)v410 + 16);
    switch(v167)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v166);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v176 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
        {
          uint64_t v177 = pthread_self();
          mach_port_t v178 = pthread_mach_thread_np(v177);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v178;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 111;
          v171 = v176;
          os_log_type_t v172 = OS_LOG_TYPE_INFO;
          goto LABEL_289;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v166);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v173 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v173, OS_LOG_TYPE_DEBUG))
        {
          v174 = pthread_self();
          mach_port_t v175 = pthread_mach_thread_np(v174);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v175;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 111;
          _os_log_debug_impl(&dword_1BAA78000, v173, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading IOAudio1 driver (com.apple.iokit.IOAudio1)...", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v166);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v168 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v169 = pthread_self();
          mach_port_t v170 = pthread_mach_thread_np(v169);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v170;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 111;
          v171 = v168;
          os_log_type_t v172 = OS_LOG_TYPE_DEFAULT;
LABEL_289:
          _os_log_impl(&dword_1BAA78000, v171, v172, "%6u %32s:%-5d Loading IOAudio1 driver (com.apple.iokit.IOAudio1)...", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    long long v381 = *a2;
    uint64_t v179 = *((void *)a2 + 1);
    if (v179) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a2 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v180 = (char *)operator new(0x70uLL);
    v181 = v180;
    *((void *)v180 + 1) = 0;
    *((void *)v180 + 2) = 0;
    *(void *)uint64_t v180 = &unk_1F145FBB0;
    if (v179) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v179 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v180 + 4) = 0;
    *((void *)v180 + 5) = 0;
    *(_OWORD *)(v180 + 56) = v381;
    *((void *)v180 + 3) = &unk_1F1488490;
    *((void *)v180 + 4) = v180 + 24;
    *((void *)v180 + 5) = v180;
    *((void *)v180 + 6) = &unk_1F14884B8;
    *((_DWORD *)v180 + 18) = 0;
    *((_OWORD *)v180 + 5) = 0u;
    *((_OWORD *)v180 + 6) = 0u;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v180 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v180 + 2, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v180);
    int v182 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)v181 + 7) + 16));
    *((_DWORD *)v181 + 18) = v182;
    memset(cf, 0, 32);
    LODWORD(cf[1].__r_.__value_.__r.__words[1]) = 1065353216;
    LODWORD(__p[0]) = v182;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)__p, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    LODWORD(__p[0]) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)__p, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    LODWORD(__p[0]) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)__p, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    LODWORD(__p[0]) = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)__p, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    CFStringRef v183 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
    v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v183;
    if (v183)
    {
      __p[0] = (void *)0x676C6F626F706C67;
      LODWORD(__p[1]) = 0;
      AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)__p, v183);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      if (v407.__r_.__value_.__r.__words[0]) {
        CFRelease(v407.__r_.__value_.__l.__data_);
      }
      int v184 = *((_DWORD *)v181 + 18);
      __p[0] = *(void **)(*((void *)v181 + 7) + 16);
      LODWORD(__p[1]) = v184;
      AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)__p, 1.58366011e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      CFStringRef v185 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudio1 Driver", 15, 0x8000100u, 0);
      v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v185;
      if (v185)
      {
        __p[0] = (void *)0x676C6F626C6E616DLL;
        LODWORD(__p[1]) = 0;
        AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)__p, v185);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
        if (*(void *)&v410[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
        }
        if (v407.__r_.__value_.__r.__words[0]) {
          CFRelease(v407.__r_.__value_.__l.__data_);
        }
        CFStringRef v186 = CFStringCreateWithBytes(0, (const UInt8 *)"Apple Inc.", 10, 0x8000100u, 0);
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v186;
        if (v186)
        {
          __p[0] = (void *)0x676C6F626C6D616BLL;
          LODWORD(__p[1]) = 0;
          AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)__p, v186);
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
          if (*(void *)&v410[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
          }
          if (v407.__r_.__value_.__r.__words[0]) {
            CFRelease(v407.__r_.__value_.__l.__data_);
          }
          CFStringRef v187 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio1", 24, 0x8000100u, 0);
          v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v187;
          if (v187)
          {
            __p[0] = (void *)0x676C6F6270696964;
            LODWORD(__p[1]) = 0;
            AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)__p, v187);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            if (v407.__r_.__value_.__r.__words[0]) {
              CFRelease(v407.__r_.__value_.__l.__data_);
            }
            unsigned int v188 = *((_DWORD *)v181 + 18);
            __p[0] = *(void **)(*((void *)v181 + 7) + 16);
            __p[1] = (void *)(v188 | 0x61626F7800000000);
            AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)__p, 1.58366006e190);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            unsigned int v189 = *((_DWORD *)v181 + 18);
            __p[0] = *(void **)(*((void *)v181 + 7) + 16);
            __p[1] = (void *)(v189 | 0x61636C6B00000000);
            AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)__p, 1.58366007e190);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            unsigned int v190 = *((_DWORD *)v181 + 18);
            __p[0] = *(void **)(*((void *)v181 + 7) + 16);
            __p[1] = (void *)(v190 | 0x6164657600000000);
            AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)__p, 1.58366007e190);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            AMCP::Core::Broker::make_core((AMCP::Core::Core **)v410, *(std::__shared_mutex_base **)(*((void *)v181 + 7) + 16), (uint64_t)cf, *((_DWORD *)v181 + 18));
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)cf[0].__r_.__value_.__r.__words[2]);
            int v191 = (void *)cf[0].__r_.__value_.__r.__words[0];
            cf[0].__r_.__value_.__r.__words[0] = 0;
            if (v191) {
              operator delete(v191);
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "IOAudioEngine");
            if (v403 >= 0) {
              uint64_t v192 = __p;
            }
            else {
              uint64_t v192 = (void **)__p[0];
            }
            CFMutableDictionaryRef v193 = IOServiceMatching((const char *)v192);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v395, v193);
            if (v403 < 0) {
              operator delete(__p[0]);
            }
            AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf, *(dispatch_object_t *)(*(void *)(*((void *)v181 + 7) + 32) + 352));
            std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v407, *((void *)v181 + 4), *((std::__shared_weak_count **)v181 + 5));
            std::dynamic_pointer_cast[abi:ne180100]<AMCP::IOAudio1::Driver,AMCP::Core::Driver>((void **)v410, (void **)&v407.__r_.__value_.__l.__data_);
            operator new();
          }
          v372 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v372, "Could not construct");
          __cxa_throw(v372, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v370 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v370, "Could not construct");
        __cxa_throw(v370, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v367 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v367, "Could not construct");
      __cxa_throw(v367, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v364 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v364, "Could not construct");
    __cxa_throw(v364, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (v29)
  {
    BOOL v194 = 1;
  }
  else
  {
    CFStringRef v195 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0);
    cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v195;
    if (!v195)
    {
      v362 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v362, "Could not construct");
      __cxa_throw(v362, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    uint64_t v197 = (const __CFString **)v388.i64[1];
    char v196 = (const __CFString **)v388.i64[0];
    if (v388.i64[0] == v388.i64[1])
    {
      BOOL v194 = 0;
    }
    else
    {
      while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v196, (const __CFString **)cf))
      {
        if (++v196 == v197)
        {
          char v196 = v197;
          break;
        }
      }
      BOOL v194 = v196 != (const __CFString **)v388.i64[1];
    }
    CFRelease(v195);
  }
  CFStringRef v198 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
  if (!v198)
  {
    v358 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v358, "Could not construct");
    __cxa_throw(v358, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  int v199 = v385;
  uint64_t v200 = v386;
  if (v385 == v386)
  {
    BOOL v201 = 1;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v199, (const __CFString **)cf))
    {
      if (++v199 == v200)
      {
        int v199 = v200;
        break;
      }
    }
    BOOL v201 = v199 == v386;
  }
  CFRelease(v198);
  if (v194 && v201)
  {
    AMCP::Log::Scope_Registry::get(v202);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
    int v204 = *(_DWORD *)(*(void *)v410 + 16);
    switch(v204)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v203);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        int v213 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v213, OS_LOG_TYPE_INFO))
        {
          v214 = pthread_self();
          mach_port_t v215 = pthread_mach_thread_np(v214);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v215;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 120;
          uint64_t v208 = v213;
          os_log_type_t v209 = OS_LOG_TYPE_INFO;
          goto LABEL_375;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v203);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v210 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v210, OS_LOG_TYPE_DEBUG))
        {
          char v211 = pthread_self();
          mach_port_t v212 = pthread_mach_thread_np(v211);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v212;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 120;
          _os_log_debug_impl(&dword_1BAA78000, v210, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading IOAudio2 driver (com.apple.iokit.IOAudio2)...", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v203);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        int v205 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v206 = pthread_self();
          mach_port_t v207 = pthread_mach_thread_np(v206);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v207;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 120;
          uint64_t v208 = v205;
          os_log_type_t v209 = OS_LOG_TYPE_DEFAULT;
LABEL_375:
          _os_log_impl(&dword_1BAA78000, v208, v209, "%6u %32s:%-5d Loading IOAudio2 driver (com.apple.iokit.IOAudio2)...", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    long long v382 = *a2;
    uint64_t v216 = *((void *)a2 + 1);
    if (v216) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a2 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    int v217 = (char *)operator new(0x70uLL);
    char v218 = v217;
    *((void *)v217 + 1) = 0;
    *((void *)v217 + 2) = 0;
    *(void *)int v217 = &unk_1F145FC00;
    if (v216) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v216 + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)v217 + 4) = 0;
    *((void *)v217 + 5) = 0;
    *(_OWORD *)(v217 + 56) = v382;
    *((void *)v217 + 3) = &unk_1F145E8A0;
    *((void *)v217 + 4) = v217 + 24;
    *((void *)v217 + 5) = v217;
    *((void *)v217 + 6) = &unk_1F145E8C8;
    *((_DWORD *)v217 + 18) = 0;
    *((_OWORD *)v217 + 5) = 0u;
    *((_OWORD *)v217 + 6) = 0u;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v217 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v217 + 2, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v217);
    int v219 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)v218 + 7) + 16));
    *((_DWORD *)v218 + 18) = v219;
    memset(cf, 0, 32);
    LODWORD(cf[1].__r_.__value_.__r.__words[1]) = 1065353216;
    LODWORD(v405[0]) = v219;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)v405, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    LODWORD(v405[0]) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)v405, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    LODWORD(v405[0]) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)v405, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    LODWORD(v405[0]) = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)v410, 0, (int *)v405, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    CFStringRef v220 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0);
    v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v220;
    if (v220)
    {
      v405[0] = (void *)0x676C6F626F706C67;
      LODWORD(v405[1]) = 0;
      AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)v405, v220);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      if (v407.__r_.__value_.__r.__words[0]) {
        CFRelease(v407.__r_.__value_.__l.__data_);
      }
      int v221 = *((_DWORD *)v218 + 18);
      v405[0] = *(void **)(*((void *)v218 + 7) + 16);
      LODWORD(v405[1]) = v221;
      AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)v405, 1.58366011e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      CFStringRef v222 = CFStringCreateWithBytes(0, (const UInt8 *)"IOAudio2 Driver", 15, 0x8000100u, 0);
      v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v222;
      if (v222)
      {
        v405[0] = (void *)0x676C6F626C6E616DLL;
        LODWORD(v405[1]) = 0;
        AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)v405, v222);
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
        if (*(void *)&v410[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
        }
        if (v407.__r_.__value_.__r.__words[0]) {
          CFRelease(v407.__r_.__value_.__l.__data_);
        }
        CFStringRef v223 = CFStringCreateWithBytes(0, (const UInt8 *)"Apple Inc.", 10, 0x8000100u, 0);
        v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v223;
        if (v223)
        {
          v405[0] = (void *)0x676C6F626C6D616BLL;
          LODWORD(v405[1]) = 0;
          AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)v405, v223);
          std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
          if (*(void *)&v410[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
          }
          if (v407.__r_.__value_.__r.__words[0]) {
            CFRelease(v407.__r_.__value_.__l.__data_);
          }
          CFStringRef v224 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.iokit.IOAudio2", 24, 0x8000100u, 0);
          v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v224;
          if (v224)
          {
            v405[0] = (void *)0x676C6F6270696964;
            LODWORD(v405[1]) = 0;
            AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v410, (uint64_t)v405, v224);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            if (v407.__r_.__value_.__r.__words[0]) {
              CFRelease(v407.__r_.__value_.__l.__data_);
            }
            unsigned int v225 = *((_DWORD *)v218 + 18);
            v405[0] = *(void **)(*((void *)v218 + 7) + 16);
            v405[1] = (void *)(v225 | 0x61626F7800000000);
            AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)v405, 1.58366006e190);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            unsigned int v226 = *((_DWORD *)v218 + 18);
            v405[0] = *(void **)(*((void *)v218 + 7) + 16);
            v405[1] = (void *)(v226 | 0x61636C6B00000000);
            AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)v405, 1.58366007e190);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            unsigned int v227 = *((_DWORD *)v218 + 18);
            v405[0] = *(void **)(*((void *)v218 + 7) + 16);
            v405[1] = (void *)(v227 | 0x6164657600000000);
            AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)v410, 0, (long long *)v405, 1.58366007e190);
            std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)cf, (unsigned int *)(*(void *)v410 + 40), v410);
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            AMCP::Core::Broker::make_core((AMCP::Core::Core **)v410, *(std::__shared_mutex_base **)(*((void *)v218 + 7) + 16), (uint64_t)cf, *((_DWORD *)v218 + 18));
            if (*(void *)&v410[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
            }
            std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)cf[0].__r_.__value_.__r.__words[2]);
            v228 = (void *)cf[0].__r_.__value_.__r.__words[0];
            cf[0].__r_.__value_.__r.__words[0] = 0;
            if (v228) {
              operator delete(v228);
            }
            std::string::basic_string[abi:ne180100]<0>(v405, "IOAudio2Device");
            if (v406 >= 0) {
              unint64_t v229 = v405;
            }
            else {
              unint64_t v229 = (void **)v405[0];
            }
            CFMutableDictionaryRef v230 = IOServiceMatching((const char *)v229);
            applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v396, v230);
            if (v406 < 0) {
              operator delete(v405[0]);
            }
            AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)cf, *(dispatch_object_t *)(*(void *)(*((void *)v218 + 7) + 32) + 352));
            std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v407, *((void *)v218 + 4), *((std::__shared_weak_count **)v218 + 5));
            std::dynamic_pointer_cast[abi:ne180100]<AMCP::IOAudio2::Driver,AMCP::Core::Driver>((void **)v410, (void **)&v407.__r_.__value_.__l.__data_);
            operator new();
          }
          v376 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v376, "Could not construct");
          __cxa_throw(v376, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        v374 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v374, "Could not construct");
        __cxa_throw(v374, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      v371 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v371, "Could not construct");
      __cxa_throw(v371, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v368 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v368, "Could not construct");
    __cxa_throw(v368, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  if (!v383)
  {
    AMCP::Log::Scope_Registry::get(v202);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
    int v232 = *(_DWORD *)(*(void *)v410 + 16);
    switch(v232)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v231);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v241 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v241, OS_LOG_TYPE_INFO))
        {
          uint64_t v242 = pthread_self();
          mach_port_t v243 = pthread_mach_thread_np(v242);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v243;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 128;
          uint64_t v236 = v241;
          os_log_type_t v237 = OS_LOG_TYPE_INFO;
          goto LABEL_444;
        }
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v231);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        uint64_t v238 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v238, OS_LOG_TYPE_DEBUG))
        {
          v239 = pthread_self();
          mach_port_t v240 = pthread_mach_thread_np(v239);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v240;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 128;
          _os_log_debug_impl(&dword_1BAA78000, v238, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading AudioServerPlugIns...", (uint8_t *)cf, 0x18u);
        }
        break;
      case 1:
        AMCP::Log::Scope_Registry::get(v231);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        int v233 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v233, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v234 = pthread_self();
          mach_port_t v235 = pthread_mach_thread_np(v234);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v235;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 128;
          uint64_t v236 = v233;
          os_log_type_t v237 = OS_LOG_TYPE_DEFAULT;
LABEL_444:
          _os_log_impl(&dword_1BAA78000, v236, v237, "%6u %32s:%-5d Loading AudioServerPlugIns...", (uint8_t *)cf, 0x18u);
        }
        break;
    }
    if (*(void *)&v410[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
    }
    uint64_t v245 = *(void *)a2;
    uint64_t v244 = (std::__shared_weak_count *)*((void *)a2 + 1);
    if (v244) {
      atomic_fetch_add_explicit(&v244->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v246 = (std::__shared_weak_count *)operator new(0x60uLL);
    v247 = v246;
    v246->__shared_owners_ = 0;
    v246->__shared_weak_owners_ = 0;
    v246->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FC50;
    uint64_t v248 = (uint64_t)&v246[1];
    if (v244) {
      atomic_fetch_add_explicit(&v244->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v246[1].__shared_owners_ = 0;
    v246[1].__shared_weak_owners_ = 0;
    v246[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FB28;
    if (v244) {
      atomic_fetch_add_explicit(&v244->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v246[2].__shared_owners_ = v245;
    v246[2].__shared_weak_owners_ = (uint64_t)v244;
    v246[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FCA0;
    v246[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FCC8;
    v246[3].__shared_owners_ = 0;
    v246[3].__shared_weak_owners_ = 0;
    v246[3].__vftable = 0;
    if (v244) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v244);
    }
    shared_weak_owners = (std::__shared_weak_count *)v247[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1) {
        goto LABEL_460;
      }
      atomic_fetch_add_explicit(&v247->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v247->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v247[1].__shared_owners_ = v248;
      v247[1].__shared_weak_owners_ = (uint64_t)v247;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      atomic_fetch_add_explicit(&v247->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&v247->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      v247[1].__shared_owners_ = v248;
      v247[1].__shared_weak_owners_ = (uint64_t)v247;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v247);
LABEL_460:
    AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(v248, (const __CFString ***)&v388, &v385);
    unint64_t v250 = a1[2];
    v251 = (uint64_t *)a1[1];
    if ((unint64_t)v251 >= v250)
    {
      uint64_t v253 = ((uint64_t)v251 - *a1) >> 4;
      unint64_t v254 = v253 + 1;
      if ((unint64_t)(v253 + 1) >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v255 = v250 - *a1;
      if (v255 >> 3 > v254) {
        unint64_t v254 = v255 >> 3;
      }
      if ((unint64_t)v255 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v256 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v256 = v254;
      }
      v409 = a1 + 2;
      v257 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v256);
      *(void *)&long long v258 = v248;
      *((void *)&v258 + 1) = v247;
      v259 = &v257[16 * v253];
      v407.__r_.__value_.__r.__words[0] = (std::string::size_type)v257;
      v407.__r_.__value_.__l.__size_ = (std::string::size_type)v259;
      v408 = (std::string *)&v257[16 * v260];
      *(_OWORD *)v259 = v258;
      atomic_fetch_add_explicit(&v247->__shared_owners_, 1uLL, memory_order_relaxed);
      v407.__r_.__value_.__r.__words[2] = (std::string::size_type)(v259 + 16);
      std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(a1, &v407);
      v252 = (void *)a1[1];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&v407);
    }
    else
    {
      uint64_t *v251 = v248;
      v251[1] = (uint64_t)v247;
      atomic_fetch_add_explicit(&v247->__shared_owners_, 1uLL, memory_order_relaxed);
      v252 = v251 + 2;
    }
    a1[1] = v252;
    std::__shared_weak_count::__release_shared[abi:ne180100](v247);
    if (v244) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v244);
    }
    AMCP::Log::Scope_Registry::get(v261);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
    int v263 = *(_DWORD *)(*(void *)v410 + 16);
    switch(v263)
    {
      case 3:
        AMCP::Log::Scope_Registry::get(v262);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v272 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (!os_log_type_enabled(v272, OS_LOG_TYPE_INFO)) {
          goto LABEL_487;
        }
        v273 = pthread_self();
        mach_port_t v274 = pthread_mach_thread_np(v273);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v274;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 130;
        v267 = v272;
        os_log_type_t v268 = OS_LOG_TYPE_INFO;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v262);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v269 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v269, OS_LOG_TYPE_DEBUG))
        {
          v270 = pthread_self();
          mach_port_t v271 = pthread_mach_thread_np(v270);
          LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
          HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v271;
          LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
          WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 130;
          _os_log_debug_impl(&dword_1BAA78000, v269, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading AudioServerPlugIns.", (uint8_t *)cf, 0x18u);
        }
        goto LABEL_487;
      case 1:
        AMCP::Log::Scope_Registry::get(v262);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
        v264 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
        if (cf[0].__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
        }
        if (!os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
        {
LABEL_487:
          if (*(void *)&v410[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
          }
          goto LABEL_489;
        }
        v265 = pthread_self();
        mach_port_t v266 = pthread_mach_thread_np(v265);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v266;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 130;
        v267 = v264;
        os_log_type_t v268 = OS_LOG_TYPE_DEFAULT;
        break;
      default:
        goto LABEL_487;
    }
    _os_log_impl(&dword_1BAA78000, v267, v268, "%6u %32s:%-5d Done loading AudioServerPlugIns.", (uint8_t *)cf, 0x18u);
    goto LABEL_487;
  }
LABEL_489:
  if (v29)
  {
    BOOL v275 = 1;
  }
  else
  {
    CFStringRef v276 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
    cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v276;
    if (!v276)
    {
      v365 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v365, "Could not construct");
      __cxa_throw(v365, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    v278 = (const __CFString **)v388.i64[1];
    v277 = (const __CFString **)v388.i64[0];
    if (v388.i64[0] == v388.i64[1])
    {
      BOOL v275 = 0;
    }
    else
    {
      while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v277, (const __CFString **)cf))
      {
        if (++v277 == v278)
        {
          v277 = v278;
          break;
        }
      }
      BOOL v275 = v277 != (const __CFString **)v388.i64[1];
    }
    CFRelease(v276);
  }
  CFStringRef v279 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
  cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v279;
  if (!v279)
  {
    v359 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v359, "Could not construct");
    __cxa_throw(v359, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  v280 = v385;
  v281 = v386;
  if (v385 == v386)
  {
    BOOL v282 = 1;
  }
  else
  {
    while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v280, (const __CFString **)cf))
    {
      if (++v280 == v281)
      {
        v280 = v281;
        break;
      }
    }
    BOOL v282 = v280 == v386;
  }
  CFRelease(v279);
  if (!v275 || !v282) {
    goto LABEL_599;
  }
  AMCP::Log::Scope_Registry::get(v283);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
  int v285 = *(_DWORD *)(*(void *)v410 + 16);
  switch(v285)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v284);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v294 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v294, OS_LOG_TYPE_INFO))
      {
        v295 = pthread_self();
        mach_port_t v296 = pthread_mach_thread_np(v295);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v296;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 137;
        v289 = v294;
        os_log_type_t v290 = OS_LOG_TYPE_INFO;
        goto LABEL_522;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v284);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v291 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v291, OS_LOG_TYPE_DEBUG))
      {
        v292 = pthread_self();
        mach_port_t v293 = pthread_mach_thread_np(v292);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v293;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 137;
        _os_log_debug_impl(&dword_1BAA78000, v291, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading Meta driver (com.apple.audio.Meta-Driver)...", (uint8_t *)cf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v284);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)cf, "com.apple.coreaudio", "AMCP");
      v286 = *(NSObject **)cf[0].__r_.__value_.__l.__data_;
      if (cf[0].__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
      }
      if (os_log_type_enabled(v286, OS_LOG_TYPE_DEFAULT))
      {
        v287 = pthread_self();
        mach_port_t v288 = pthread_mach_thread_np(v287);
        LODWORD(cf[0].__r_.__value_.__l.__data_) = 67109634;
        HIDWORD(cf[0].__r_.__value_.__r.__words[0]) = v288;
        LOWORD(cf[0].__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&cf[0].__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Driver_Manager.cpp";
        WORD1(cf[0].__r_.__value_.__r.__words[2]) = 1024;
        HIDWORD(cf[0].__r_.__value_.__r.__words[2]) = 137;
        v289 = v286;
        os_log_type_t v290 = OS_LOG_TYPE_DEFAULT;
LABEL_522:
        _os_log_impl(&dword_1BAA78000, v289, v290, "%6u %32s:%-5d Loading Meta driver (com.apple.audio.Meta-Driver)...", (uint8_t *)cf, 0x18u);
      }
      break;
  }
  if (*(void *)&v410[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
  }
  long long v297 = *a2;
  long long v384 = v297;
  v298 = (std::__shared_weak_count *)*((void *)a2 + 1);
  if (*((void *)&v297 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v297 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v299 = (char *)operator new(0x68uLL);
  int v300 = v299;
  *((void *)v299 + 1) = 0;
  *((void *)v299 + 2) = 0;
  *(void *)__int16 v299 = &unk_1F145FDF0;
  uint64_t v301 = v299 + 24;
  if (v298) {
    atomic_fetch_add_explicit(&v298->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v299 + 4) = 0;
  *((void *)v299 + 5) = 0;
  *(_OWORD *)(v299 + 56) = v384;
  *((void *)v299 + 3) = &unk_1F147D180;
  *((void *)v299 + 4) = v301;
  *((void *)v299 + 5) = v299;
  *((void *)v299 + 6) = &unk_1F147D1A8;
  *((_DWORD *)v299 + 18) = 0;
  *((void *)v299 + 11) = 0;
  *((void *)v299 + 12) = 0;
  *((void *)v299 + 10) = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v299 + 1, 1uLL, memory_order_relaxed);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v299 + 2, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v299);
  int v302 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(*((void *)v300 + 7) + 16));
  *((_DWORD *)v300 + 18) = v302;
  memset(v410, 0, sizeof(v410));
  int v411 = 1065353216;
  LODWORD(v400) = v302;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v400, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  LODWORD(v400) = 1835299446;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v400, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  LODWORD(v400) = 1835299446;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v400, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  LODWORD(v400) = 1;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)cf, 0, (int *)&v400, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFStringRef v303 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
  if (!v303)
  {
    v373 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v373, "Could not construct");
    __cxa_throw(v373, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v400 = 0x676C6F626F706C67;
  LODWORD(v401) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v400, v303);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v303);
  int v304 = *((_DWORD *)v300 + 18);
  cf[0].__r_.__value_.__r.__words[0] = *(void *)(*((void *)v300 + 7) + 16);
  LODWORD(cf[0].__r_.__value_.__r.__words[1]) = v304;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_list_property(AMCP::Core::Broker &,unsigned int)::{lambda(void)#1}>((uint64_t *)&v412, 0, (long long *)cf, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, v412 + 10, &v412);
  if ((void)v413) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v413);
  }
  CFStringRef v305 = CFStringCreateWithBytes(0, (const UInt8 *)"Meta Driver", 11, 0x8000100u, 0);
  if (!v305)
  {
    v375 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v375, "Could not construct");
    __cxa_throw(v375, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v400 = 0x676C6F626C6E616DLL;
  LODWORD(v401) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v400, v305);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v305);
  CFStringRef v306 = CFStringCreateWithBytes(0, (const UInt8 *)"Apple Inc.", 10, 0x8000100u, 0);
  if (!v306)
  {
    v377 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v377, "Could not construct");
    __cxa_throw(v377, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v400 = 0x676C6F626C6D616BLL;
  LODWORD(v401) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v400, v306);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v306);
  CFStringRef v307 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
  if (!v307)
  {
    v379 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v379, "Could not construct");
    __cxa_throw(v379, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v400 = 0x676C6F6270696964;
  LODWORD(v401) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)cf, (uint64_t)&v400, v307);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(cf[0].__r_.__value_.__r.__words[0] + 40), cf);
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  CFRelease(v307);
  unsigned int v308 = *((_DWORD *)v300 + 18);
  cf[0].__r_.__value_.__r.__words[0] = *(void *)(*((void *)v300 + 7) + 16);
  cf[0].__r_.__value_.__l.__size_ = v308 | 0x61626F7800000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v412, 0, (long long *)cf, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, v412 + 10, &v412);
  if ((void)v413) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v413);
  }
  unsigned int v309 = *((_DWORD *)v300 + 18);
  cf[0].__r_.__value_.__r.__words[0] = *(void *)(*((void *)v300 + 7) + 16);
  cf[0].__r_.__value_.__l.__size_ = v309 | 0x61636C6B00000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v412, 0, (long long *)cf, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, v412 + 10, &v412);
  if ((void)v413) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v413);
  }
  unsigned int v310 = *((_DWORD *)v300 + 18);
  cf[0].__r_.__value_.__r.__words[0] = *(void *)(*((void *)v300 + 7) + 16);
  cf[0].__r_.__value_.__l.__size_ = v310 | 0x6164657600000000;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>((uint64_t *)&v412, 0, (long long *)cf, 1.58366007e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, v412 + 10, &v412);
  if ((void)v413) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v413);
  }
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>(&v400, 0, 1.5836601e190);
  uint64_t v311 = v400;
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v397, *((void *)v300 + 4), *((std::__shared_weak_count **)v300 + 5));
  std::dynamic_pointer_cast[abi:ne180100]<AMCP::Meta::Driver,AMCP::Core::Driver>((void **)&v399, &v397);
  unint64_t v312 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>();
  long long v313 = v399;
  long long v399 = 0uLL;
  long long v413 = v313;
  v412 = (unsigned int *)&unk_1F147D200;
  v414 = (void **)&v412;
  memset(cf, 0, 40);
  std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v412);
  cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(Aggregate_Device_Description const&,int)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v311, v312, (AMCP *)cf);
  if (cf[1].__r_.__value_.__l.__size_) {
    ((void (*)(void, std::string *, void, void))cf[1].__r_.__value_.__l.__size_)(0, cf, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(Aggregate_Device_Description const&,int)>::~__value_func[abi:ne180100](&v412);
  if (v398) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v398);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v397, *((void *)v300 + 4), *((std::__shared_weak_count **)v300 + 5));
  std::dynamic_pointer_cast[abi:ne180100]<AMCP::Meta::Driver,AMCP::Core::Driver>((void **)&v399, &v397);
  unint64_t v314 = AMCP::Implementation::get_type_marker<std::function<void ()>>();
  long long v315 = v399;
  long long v399 = 0uLL;
  long long v413 = v315;
  v412 = (unsigned int *)&unk_1F147D310;
  v414 = (void **)&v412;
  memset(cf, 0, 40);
  std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)cf, (uint64_t)&v412);
  cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)AMCP::Implementation::In_Place_Storage<std::function<void ()>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v311, v314, (AMCP *)cf);
  if (cf[1].__r_.__value_.__l.__size_) {
    ((void (*)(void, std::string *, void, void))cf[1].__r_.__value_.__l.__size_)(0, cf, 0, 0);
  }
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](&v412);
  if (v398) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v398);
  }
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)v410, (unsigned int *)(v311 + 40), &v400);
  AMCP::Core::Broker::make_core((AMCP::Core::Core **)cf, *(std::__shared_mutex_base **)(*((void *)v300 + 7) + 16), (uint64_t)v410, *((_DWORD *)v300 + 18));
  if (cf[0].__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)cf[0].__r_.__value_.__l.__size_);
  }
  if (v401) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v401);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&v410[16]);
  v316 = *(void **)v410;
  *(void *)v410 = 0;
  if (v316) {
    operator delete(v316);
  }
  unint64_t v317 = a1[2];
  v318 = (void *)a1[1];
  if ((unint64_t)v318 >= v317)
  {
    uint64_t v320 = ((uint64_t)v318 - *a1) >> 4;
    unint64_t v321 = v320 + 1;
    if ((unint64_t)(v320 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v322 = v317 - *a1;
    if (v322 >> 3 > v321) {
      unint64_t v321 = v322 >> 3;
    }
    if ((unint64_t)v322 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v323 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v323 = v321;
    }
    cf[1].__r_.__value_.__l.__size_ = (std::string::size_type)(a1 + 2);
    v324 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v323);
    *(void *)&long long v325 = v301;
    *((void *)&v325 + 1) = v300;
    v326 = &v324[16 * v320];
    cf[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v324;
    cf[0].__r_.__value_.__l.__size_ = (std::string::size_type)v326;
    cf[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&v324[16 * v327];
    *(_OWORD *)v326 = v325;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v300 + 1, 1uLL, memory_order_relaxed);
    cf[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v326 + 16);
    std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(a1, cf);
    v319 = (void *)a1[1];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)cf);
  }
  else
  {
    void *v318 = v301;
    v318[1] = v300;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v300 + 1, 1uLL, memory_order_relaxed);
    v319 = v318 + 2;
  }
  a1[1] = v319;
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v300);
  if (v298) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v298);
  }
  AMCP::Log::Scope_Registry::get(v328);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v412, "com.apple.coreaudio", "AMCP");
  unsigned int v330 = v412[4];
  switch(v330)
  {
    case 3u:
      AMCP::Log::Scope_Registry::get(v329);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
      v339 = **(NSObject ***)v410;
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      if (os_log_type_enabled(v339, OS_LOG_TYPE_INFO))
      {
        v340 = pthread_self();
        mach_port_t v341 = pthread_mach_thread_np(v340);
        *(_DWORD *)v410 = 67109634;
        *(_DWORD *)&v410[4] = v341;
        *(_WORD *)&v410[8] = 2080;
        *(void *)&v410[10] = "Driver_Manager.cpp";
        *(_WORD *)&v410[18] = 1024;
        *(_DWORD *)&v410[20] = 139;
        v334 = v339;
        os_log_type_t v335 = OS_LOG_TYPE_INFO;
        goto LABEL_597;
      }
      break;
    case 2u:
      AMCP::Log::Scope_Registry::get(v329);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
      v336 = **(NSObject ***)v410;
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      if (os_log_type_enabled(v336, OS_LOG_TYPE_DEBUG))
      {
        v337 = pthread_self();
        mach_port_t v338 = pthread_mach_thread_np(v337);
        *(_DWORD *)v410 = 67109634;
        *(_DWORD *)&v410[4] = v338;
        *(_WORD *)&v410[8] = 2080;
        *(void *)&v410[10] = "Driver_Manager.cpp";
        *(_WORD *)&v410[18] = 1024;
        *(_DWORD *)&v410[20] = 139;
        _os_log_debug_impl(&dword_1BAA78000, v336, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Done loading Meta driver (com.apple.audio.Meta-Driver).", v410, 0x18u);
      }
      break;
    case 1u:
      AMCP::Log::Scope_Registry::get(v329);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v410, "com.apple.coreaudio", "AMCP");
      v331 = **(NSObject ***)v410;
      if (*(void *)&v410[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v410[8]);
      }
      if (os_log_type_enabled(v331, OS_LOG_TYPE_DEFAULT))
      {
        v332 = pthread_self();
        mach_port_t v333 = pthread_mach_thread_np(v332);
        *(_DWORD *)v410 = 67109634;
        *(_DWORD *)&v410[4] = v333;
        *(_WORD *)&v410[8] = 2080;
        *(void *)&v410[10] = "Driver_Manager.cpp";
        *(_WORD *)&v410[18] = 1024;
        *(_DWORD *)&v410[20] = 139;
        v334 = v331;
        os_log_type_t v335 = OS_LOG_TYPE_DEFAULT;
LABEL_597:
        _os_log_impl(&dword_1BAA78000, v334, v335, "%6u %32s:%-5d Done loading Meta driver (com.apple.audio.Meta-Driver).", v410, 0x18u);
      }
      break;
  }
  uint64_t v36 = (std::__shared_weak_count *)v413;
  if ((void)v413) {
LABEL_47:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
LABEL_599:
  *(void *)v410 = &v385;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v410);
  *(void *)v410 = &v388;
  std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100]((void ***)v410);
  if (v390) {
    CFRelease(v390);
  }
}

void sub_1BAB55B64(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  if (a2)
  {
    std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer((uint64_t)&a47);
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(void *result, CFTypeRef cf)
{
  uint64_t v2 = result;
  if (cf)
  {
    CFRetain(cf);
    return mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(v2, cf);
  }
  else
  {
    *uint64_t result = 0;
  }
  return result;
}

applesauce::CF::StringRef *mcp_applesauce::CF::BundleRef_proxy::get_bundle_id(applesauce::CF::StringRef *this, __CFBundle *a2)
{
  uint64_t v2 = this;
  if (a2)
  {
    CFStringRef Identifier = CFBundleGetIdentifier(a2);
    CFStringRef v4 = Identifier;
    if (Identifier) {
      CFRetain(Identifier);
    }
    return applesauce::CF::StringRef::StringRef(v2, v4);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

CFStringRef *std::construct_at[abi:ne180100]<applesauce::CF::StringRef,char const(&)[28],applesauce::CF::StringRef*>(CFStringRef *a1)
{
  CFStringRef v2 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Null-Driver", 27, 0x8000100u, 0);
  *a1 = v2;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return a1;
}

void sub_1BAB566A4(_Unwind_Exception *exception_object)
{
  if (*v1) {
    CFRelease(*v1);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<applesauce::CF::StringRef>::__assign_with_size[abi:ne180100]<applesauce::CF::StringRef*,applesauce::CF::StringRef*>(uint64_t a1, const void **a2, const void **a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(const void ***)a1;
  if (a4 > (v8 - *(void *)a1) >> 3)
  {
    if (v9)
    {
      CFStringRef v10 = *(const void ***)(a1 + 8);
      CFComparisonResult v11 = *(const void ***)a1;
      if (v10 != v9)
      {
        do
        {
          unint64_t v12 = *--v10;
          std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v12);
        }
        while (v10 != v9);
        CFComparisonResult v11 = *(const void ***)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 >> 61) {
      goto LABEL_25;
    }
    uint64_t v13 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v13;
    if (v14 >> 61) {
LABEL_25:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    CFStringRef v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v14);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[v16];
    while (v6 != a3)
    {
      int v17 = *v6++;
      CFStringRef v15 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef&,applesauce::CF::StringRef*>(v15, v17)+ 1;
    }
    goto LABEL_21;
  }
  unint64_t v18 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3;
  if (v18 < a4)
  {
    long long v19 = &a2[v18];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::StringRef *,applesauce::CF::StringRef *,applesauce::CF::StringRef *>(a2, v19, v9);
    CFStringRef v15 = *(void **)(a1 + 8);
    while (v19 != a3)
    {
      int v20 = *v19++;
      CFStringRef v15 = std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef&,applesauce::CF::StringRef*>(v15, v20)+ 1;
    }
LABEL_21:
    *(void *)(a1 + 8) = v15;
    return;
  }
  long long v21 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::StringRef *,applesauce::CF::StringRef *,applesauce::CF::StringRef *>(a2, a3, v9);
  for (uint64_t i = *(const void ***)(a1 + 8); i != v21; --i)
  {
    mach_port_t v23 = *(i - 1);
    std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v23);
  }
  *(void *)(a1 + 8) = v21;
}

void std::vector<applesauce::CF::StringRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFStringRef v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t std::__shared_ptr_emplace<AMCP::Meta::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Meta::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FDF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Meta::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FDF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(uint64_t a1, const __CFString ***a2, const __CFString ***a3)
{
  uint64_t v230 = *MEMORY[0x1E4F143B8];
  if (*a2 == a2[1])
  {
    BOOL v206 = 1;
  }
  else
  {
    CFStringRef v3 = CFStringCreateWithBytes(0, (const UInt8 *)"*", 1, 0x8000100u, 0);
    v229.CFArrayRef d_ino = (__uint64_t)v3;
    if (!v3)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v4 = v3;
    uint64_t v5 = *a3;
    uint64_t v6 = a3[1];
    if (*a3 == v6)
    {
      BOOL v206 = 0;
    }
    else
    {
      while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v5, (const __CFString **)&v229))
      {
        if (++v5 == v6)
        {
          uint64_t v5 = v6;
          break;
        }
      }
      BOOL v206 = v5 != a3[1];
    }
    CFRelease(v4);
    if (*a2 != a2[1])
    {
      CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)"*", 1, 0x8000100u, 0);
      v229.CFArrayRef d_ino = (__uint64_t)v7;
      if (!v7)
      {
        BOOL v201 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v201, "Could not construct");
        __cxa_throw(v201, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      CFStringRef v8 = v7;
      uint64_t v9 = *a2;
      CFStringRef v10 = a2[1];
      if (*a2 == v10)
      {
        BOOL v205 = 0;
      }
      else
      {
        while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v9, (const __CFString **)&v229))
        {
          if (++v9 == v10)
          {
            uint64_t v9 = v10;
            break;
          }
        }
        BOOL v205 = v9 != a2[1];
      }
      CFRelease(v8);
      goto LABEL_20;
    }
  }
  BOOL v205 = 1;
LABEL_20:
  *(_DWORD *)&mainPort[8] = 0;
  *(void *)mach_port_t mainPort = *MEMORY[0x1E4F2EEF0];
  do
  {
    CFComparisonResult v11 = operator new(0x18uLL);
    *(_OWORD *)CFComparisonResult v11 = xmmword_1E6233A20;
    _OWORD v11[2] = "/Library/Apple/Audio/Plug-Ins/HAL";
    unint64_t v12 = (const char *)v11[*(void *)&mainPort[4]];
    uint64_t v216 = 0;
    int64x2_t v215 = 0uLL;
    if (v12)
    {
      CFIndex v13 = strlen(v12);
      CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)v12, v13, 0x8000100u, 0);
      if (!v14)
      {
        int v199 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v199, "Could not construct");
        __cxa_throw(v199, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v14 = 0;
    }
    CFURLRef v15 = CFURLCreateWithFileSystemPath(0, v14, kCFURLPOSIXPathStyle, 1u);
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v223, v15);
    if (v14) {
      CFRelease(v14);
    }
    if (!access(v12, 5))
    {
      uint64_t v16 = opendir(v12);
      if (v16)
      {
        *(void *)existing = 0;
        bzero(&v229, 0x418uLL);
        for (int i = readdir_r(v16, &v229, (dirent **)existing);
              !i && *(void *)existing;
              int i = readdir_r(v16, &v229, (dirent **)existing))
        {
          long long v19 = (const char *)(*(void *)existing + 21);
          int v18 = *(unsigned __int8 *)(*(void *)existing + 21);
          if (*(unsigned char *)(*(void *)existing + 21))
          {
            unint64_t v20 = 0;
            uint64_t v21 = 0;
            do
            {
              unint64_t v22 = *(void *)existing + v20;
              if (v18 == 46) {
                uint64_t v21 = *(void *)existing + v20 + 21;
              }
              int v18 = *(unsigned __int8 *)(v22 + 22);
              if (!*(unsigned char *)(v22 + 22)) {
                break;
              }
              BOOL v25 = v20++ >= 0xFFF;
            }
            while (!v25);
            if (v21 && v21 != (void)v19)
            {
              unint64_t v24 = 0;
              while (*(unsigned __int8 *)(v21 + v24) == aDriver[v24])
              {
                if (*(unsigned char *)(v21 + v24)) {
                  BOOL v25 = v24 >= 6;
                }
                else {
                  BOOL v25 = 1;
                }
                ++v24;
                if (v25)
                {
                  CFIndex v26 = strlen(v19);
                  CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)v19, v26, 0x8000100u, 0);
                  if (!v27)
                  {
                    uint64_t v197 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v197, "Could not construct");
                    __cxa_throw(v197, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  uint64_t v28 = (const void *)MEMORY[0x1C18586C0](0, v27, 0, 1, v223.__vftable);
                  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)cf, v28);
                  CFRelease(v27);
                  if (v215.i64[1] >= (unint64_t)v216)
                  {
                    uint64_t v30 = (v215.i64[1] - v215.i64[0]) >> 3;
                    if ((unint64_t)(v30 + 1) >> 61) {
                      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                    }
                    unint64_t v31 = (uint64_t)&v216[-v215.i64[0]] >> 2;
                    if (v31 <= v30 + 1) {
                      unint64_t v31 = v30 + 1;
                    }
                    if ((unint64_t)&v216[-v215.i64[0]] >= 0x7FFFFFFFFFFFFFF8) {
                      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v32 = v31;
                    }
                    if (v32)
                    {
                      if (v32 >> 61) {
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      }
                      uint64_t v33 = operator new(8 * v32);
                    }
                    else
                    {
                      uint64_t v33 = 0;
                    }
                    uint64_t v34 = std::construct_at[abi:ne180100]<applesauce::CF::URLRef,applesauce::CF::URLRef&,applesauce::CF::URLRef*>(&v33[v30], cf[0]);
                    mach_port_t v35 = (void *)v215.i64[1];
                    uint64_t v36 = (void *)v215.i64[0];
                    if (v215.i64[1] == v215.i64[0])
                    {
                      int64x2_t v39 = vdupq_n_s64(v215.u64[1]);
                      unint64_t v37 = v34;
                    }
                    else
                    {
                      unint64_t v37 = v34;
                      do
                      {
                        uint64_t v38 = *--v35;
                        *--unint64_t v37 = v38;
                        *mach_port_t v35 = 0;
                      }
                      while (v35 != v36);
                      int64x2_t v39 = v215;
                    }
                    uint64_t v40 = (char *)&v33[v32];
                    BOOL v29 = v34 + 1;
                    v215.i64[0] = (uint64_t)v37;
                    v215.i64[1] = (uint64_t)(v34 + 1);
                    uint64_t v216 = v40;
                    mach_port_t v42 = (char *)v39.i64[1];
                    uint64_t v41 = (char *)v39.i64[0];
                    while (v42 != v41)
                    {
                      unint64_t v43 = (const void *)*((void *)v42 - 1);
                      v42 -= 8;
                      std::__destroy_at[abi:ne180100]<applesauce::CF::URLRef,0>(v43);
                    }
                    if (v41) {
                      operator delete(v41);
                    }
                  }
                  else
                  {
                    BOOL v29 = std::construct_at[abi:ne180100]<applesauce::CF::URLRef,applesauce::CF::URLRef&,applesauce::CF::URLRef*>((void *)v215.i64[1], cf[0])+ 1;
                  }
                  v215.i64[1] = (uint64_t)v29;
                  if (cf[0]) {
                    CFRelease(cf[0]);
                  }
                  break;
                }
              }
            }
          }
        }
        closedir(v16);
      }
    }
    if (v223.__vftable) {
      CFRelease(v223.__vftable);
    }
    operator delete(v11);
    os_log_type_t v44 = (CFURLRef *)v215.i64[1];
    mach_port_t v207 = (CFURLRef *)v215.i64[1];
    for (char j = (CFURLRef *)v215.i64[0]; j != v44; ++j)
    {
      CFBundleRef v46 = CFBundleCreate(0, *j);
      CFStringRef v47 = (AMCP::Log::Scope_Registry *)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::BasicRef(&v214, v46);
      if (!v214)
      {
        AMCP::Log::Scope_Registry::get(v47);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
        uint64_t v173 = *(NSObject **)v229.d_ino;
        if (v229.d_seekoff) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
        }
        if (os_log_type_enabled(v173, OS_LOG_TYPE_ERROR))
        {
          v174 = pthread_self();
          mach_port_t v175 = pthread_mach_thread_np(v174);
          LODWORD(v229.d_ino) = 67109890;
          HIDWORD(v229.d_ino) = v175;
          LOWORD(v229.d_seekoff) = 2080;
          *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
          v229.d_namlen = 1024;
          *(_DWORD *)&v229.d_uint64_t type = 85;
          *(_WORD *)&v229.d_name[3] = 2080;
          *(void *)&v229.d_name[5] = "!plugin_bundle.is_valid()";
          _os_log_error_impl(&dword_1BAA78000, v173, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s no actual bundle for the given driver url", (uint8_t *)&v229, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v222);
        __cxa_allocate_exception(0x40uLL);
        std::runtime_error::runtime_error(&v213, "no actual bundle for the given driver url");
        std::runtime_error::runtime_error(&v223, &v213);
        uint64_t v225 = 0;
        uint64_t v226 = 0;
        uint64_t v227 = 0;
        int v228 = -1;
        v223.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        CFStringRef v224 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v229, (uint64_t)&v223);
        *(void *)&v229.d_name[11] = "void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(const std::vect"
                                      "or<CF::String> &, const std::vector<CF::String> &) [Helper = AMCP::ASP::Simple_Loader_Helper]";
        *(void *)&v229.d_name[19] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Loader.h";
        *(_DWORD *)&v229.d_name[27] = 85;
        std::vector<void *>::vector(cf);
        int v176 = backtrace((void **)cf[0], (unint64_t)((char *)cf[1] - (char *)cf[0]) >> 3);
        std::vector<void *>::resize((char **)cf, v176);
        *(void *)existing = &unk_1F148AA90;
        *(_OWORD *)__p = *(_OWORD *)cf;
        uint64_t v221 = v212;
        cf[0] = 0;
        cf[1] = 0;
        uint64_t v212 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&v210, (__CFBundle *)v214);
      if (v205)
      {
        BOOL v48 = 1;
      }
      else
      {
        std::string::size_type v49 = *a2;
        uint64_t v50 = a2[1];
        if (*a2 == v50)
        {
          CFStringRef v51 = *a2;
        }
        else
        {
          while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v49, (const __CFString **)&v210))
          {
            if (++v49 == v50)
            {
              std::string::size_type v49 = v50;
              break;
            }
          }
          CFStringRef v51 = v49;
          std::string::size_type v49 = a2[1];
        }
        BOOL v48 = v51 != v49;
      }
      if (!v206)
      {
        uint64_t v52 = *a3;
        std::string::size_type v53 = a3[1];
        if (*a3 == v53)
        {
          unint64_t v54 = *a3;
        }
        else
        {
          while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*v52, (const __CFString **)&v210))
          {
            if (++v52 == v53)
            {
              uint64_t v52 = v53;
              break;
            }
          }
          unint64_t v54 = v52;
          uint64_t v52 = a3[1];
        }
        if (v54 == v52 && v48)
        {
          info_dictionary = mcp_applesauce::CF::BundleRef_proxy::get_info_dictionary((applesauce::CF::DictionaryRef *)&v209, (__CFBundle *)v214);
          if (!v214)
          {
            AMCP::Log::Scope_Registry::get(info_dictionary);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
            uint64_t v177 = *(NSObject **)v229.d_ino;
            if (v229.d_seekoff) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
            }
            if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
            {
              mach_port_t v178 = pthread_self();
              mach_port_t v179 = pthread_mach_thread_np(v178);
              LODWORD(v229.d_ino) = 67109890;
              HIDWORD(v229.d_ino) = v179;
              LOWORD(v229.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              v229.d_namlen = 1024;
              *(_DWORD *)&v229.d_uint64_t type = 93;
              *(_WORD *)&v229.d_name[3] = 2080;
              *(void *)&v229.d_name[5] = "!plugin_bundle.is_valid()";
              _os_log_error_impl(&dword_1BAA78000, v177, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't get the info.plist for the driver", (uint8_t *)&v229, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v222);
            __cxa_allocate_exception(0x40uLL);
            std::runtime_error::runtime_error(&v213, "couldn't get the info.plist for the driver");
            std::runtime_error::runtime_error(&v223, &v213);
            uint64_t v225 = 0;
            uint64_t v226 = 0;
            uint64_t v227 = 0;
            int v228 = -1;
            v223.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
            CFStringRef v224 = &unk_1F148A9D0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)&v229, (uint64_t)&v223);
            *(void *)&v229.d_name[11] = "void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::start(const std::"
                                          "vector<CF::String> &, const std::vector<CF::String> &) [Helper = AMCP::ASP::Si"
                                          "mple_Loader_Helper]";
            *(void *)&v229.d_name[19] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Loader.h";
            *(_DWORD *)&v229.d_name[27] = 93;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)cf);
            *(void *)existing = &unk_1F148AA90;
            *(_OWORD *)__p = *(_OWORD *)cf;
            uint64_t v221 = v212;
            cf[0] = 0;
            cf[1] = 0;
            uint64_t v212 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
          }
          if (!v209)
          {
            uint64_t v180 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v180, "Could not construct");
            __cxa_throw(v180, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(cf, (CFDictionaryRef)v209, @"AudioServerPlugIn_LoadingConditions");
          if (!LOBYTE(cf[1]))
          {
            AMCP::Log::Scope_Registry::get(v57);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
            int v68 = *(_DWORD *)(*(void *)existing + 16);
            if (v68 == 1)
            {
              AMCP::Log::Scope_Registry::get(v67);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
              uint64_t v99 = *(NSObject **)v229.d_ino;
              if (v229.d_seekoff) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
              }
              if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_168;
              }
              BOOL v100 = pthread_self();
              mach_port_t v101 = pthread_mach_thread_np(v100);
              if (!v210)
              {
                int v191 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v191, "Could not construct");
                __cxa_throw(v191, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mach_port_t v102 = v101;
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
              int v103 = (std::runtime_error_vtbl *)&v223;
              if (SHIBYTE(v224) < 0) {
                int v103 = v223.__vftable;
              }
              LODWORD(v229.d_ino) = 67109890;
              HIDWORD(v229.d_ino) = v102;
              LOWORD(v229.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              v229.d_namlen = 1024;
              *(_DWORD *)&v229.d_uint64_t type = 98;
              *(_WORD *)&v229.d_name[3] = 2080;
              *(void *)&v229.d_name[5] = v103;
              int v74 = v99;
              os_log_type_t v75 = OS_LOG_TYPE_DEFAULT;
LABEL_165:
              _os_log_impl(&dword_1BAA78000, v74, v75, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&v229, 0x22u);
            }
            else
            {
              if (v68 != 2)
              {
                if (v68 == 3)
                {
                  AMCP::Log::Scope_Registry::get(v67);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                  uint64_t v69 = *(NSObject **)v229.d_ino;
                  if (v229.d_seekoff) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                  }
                  if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
                  {
                    int v70 = pthread_self();
                    mach_port_t v71 = pthread_mach_thread_np(v70);
                    if (!v210)
                    {
                      unsigned int v190 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v190, "Could not construct");
                      __cxa_throw(v190, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    mach_port_t v72 = v71;
                    applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                    uint64_t v73 = (std::runtime_error_vtbl *)&v223;
                    if (SHIBYTE(v224) < 0) {
                      uint64_t v73 = v223.__vftable;
                    }
                    LODWORD(v229.d_ino) = 67109890;
                    HIDWORD(v229.d_ino) = v72;
                    LOWORD(v229.d_seekoff) = 2080;
                    *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                    v229.d_namlen = 1024;
                    *(_DWORD *)&v229.d_uint64_t type = 98;
                    *(_WORD *)&v229.d_name[3] = 2080;
                    *(void *)&v229.d_name[5] = v73;
                    int v74 = v69;
                    os_log_type_t v75 = OS_LOG_TYPE_INFO;
                    goto LABEL_165;
                  }
                }
LABEL_168:
                if (__p[0]) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
                }
                AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver(a1);
              }
              AMCP::Log::Scope_Registry::get(v67);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
              CFStringRef v94 = *(NSObject **)v229.d_ino;
              if (v229.d_seekoff) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
              }
              if (!os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG)) {
                goto LABEL_168;
              }
              uint64_t v95 = pthread_self();
              mach_port_t v96 = pthread_mach_thread_np(v95);
              if (!v210)
              {
                CFStringRef v183 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v183, "Could not construct");
                __cxa_throw(v183, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              mach_port_t v97 = v96;
              applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
              uint64_t v98 = (std::runtime_error_vtbl *)&v223;
              if (SHIBYTE(v224) < 0) {
                uint64_t v98 = v223.__vftable;
              }
              LODWORD(v229.d_ino) = 67109890;
              HIDWORD(v229.d_ino) = v97;
              LOWORD(v229.d_seekoff) = 2080;
              *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
              v229.d_namlen = 1024;
              *(_DWORD *)&v229.d_uint64_t type = 98;
              *(_WORD *)&v229.d_name[3] = 2080;
              *(void *)&v229.d_name[5] = v98;
              _os_log_debug_impl(&dword_1BAA78000, v94, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&v229, 0x22u);
            }
            if (SHIBYTE(v224) < 0) {
              operator delete(v223.__vftable);
            }
            goto LABEL_168;
          }
          AMCP::Log::Scope_Registry::get(v57);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
          int v59 = *(_DWORD *)(*(void *)existing + 16);
          if (v59 == 3)
          {
            AMCP::Log::Scope_Registry::get(v58);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
            uint64_t v81 = *(NSObject **)v229.d_ino;
            if (v229.d_seekoff) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
            }
            if (!os_log_type_enabled(v81, OS_LOG_TYPE_INFO)) {
              goto LABEL_142;
            }
            mach_port_t v82 = pthread_self();
            mach_port_t v83 = pthread_mach_thread_np(v82);
            if (!v210)
            {
              CFStringRef v185 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v185, "Could not construct");
              __cxa_throw(v185, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mach_port_t v84 = v83;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
            os_log_type_t v85 = (std::runtime_error_vtbl *)&v223;
            if (SHIBYTE(v224) < 0) {
              os_log_type_t v85 = v223.__vftable;
            }
            LODWORD(v229.d_ino) = 67109890;
            HIDWORD(v229.d_ino) = v84;
            LOWORD(v229.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            v229.d_namlen = 1024;
            *(_DWORD *)&v229.d_uint64_t type = 104;
            *(_WORD *)&v229.d_name[3] = 2080;
            *(void *)&v229.d_name[5] = v85;
            uint64_t v65 = v81;
            os_log_type_t v66 = OS_LOG_TYPE_INFO;
LABEL_139:
            _os_log_impl(&dword_1BAA78000, v65, v66, "%6u %32s:%-5d Evaluating loading conditions for server plug-in %s...", (uint8_t *)&v229, 0x22u);
          }
          else
          {
            if (v59 != 2)
            {
              if (v59 == 1)
              {
                AMCP::Log::Scope_Registry::get(v58);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                unint64_t v60 = *(NSObject **)v229.d_ino;
                if (v229.d_seekoff) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                }
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                {
                  os_log_type_t v61 = pthread_self();
                  mach_port_t v62 = pthread_mach_thread_np(v61);
                  if (!v210)
                  {
                    int v184 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                    std::runtime_error::runtime_error(v184, "Could not construct");
                    __cxa_throw(v184, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                  }
                  mach_port_t v63 = v62;
                  applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                  mach_port_t v64 = (std::runtime_error_vtbl *)&v223;
                  if (SHIBYTE(v224) < 0) {
                    mach_port_t v64 = v223.__vftable;
                  }
                  LODWORD(v229.d_ino) = 67109890;
                  HIDWORD(v229.d_ino) = v63;
                  LOWORD(v229.d_seekoff) = 2080;
                  *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                  v229.d_namlen = 1024;
                  *(_DWORD *)&v229.d_uint64_t type = 104;
                  *(_WORD *)&v229.d_name[3] = 2080;
                  *(void *)&v229.d_name[5] = v64;
                  uint64_t v65 = v60;
                  os_log_type_t v66 = OS_LOG_TYPE_DEFAULT;
                  goto LABEL_139;
                }
              }
LABEL_142:
              if (__p[0]) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
              }
              if (!cf[0])
              {
                char v196 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v196, "Could not construct");
                __cxa_throw(v196, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&v229, (CFDictionaryRef)cf[0], @"IOService Matching");
              int d_seekoff_low = LOBYTE(v229.d_seekoff);
              if (LOBYTE(v229.d_seekoff))
              {
                CFArrayRef d_ino = (const __CFArray *)v229.d_ino;
                if (!v229.d_ino) {
                  goto LABEL_181;
                }
                CFIndex Count = CFArrayGetCount((CFArrayRef)v229.d_ino);
                CFIndex v89 = Count;
                __uint64_t v90 = v229.d_ino;
                if (v229.d_ino)
                {
                  CFIndex v91 = CFArrayGetCount((CFArrayRef)v229.d_ino);
                  if (!v89) {
                    goto LABEL_181;
                  }
                }
                else
                {
                  CFIndex v91 = 0;
                  if (!Count) {
                    goto LABEL_181;
                  }
                }
                unint64_t v104 = 0;
                while (d_ino != (const __CFArray *)v90 || v91 != v104)
                {
                  applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v223, d_ino, v104);
                  uint64_t v105 = v223.__vftable;
                  if (v223.__vftable) {
                    CFRetain(v223.__vftable);
                  }
                  existing[0] = 0;
                  IOServiceGetMatchingServices(*(mach_port_t *)mainPort, (CFDictionaryRef)v105, existing);
                  if (existing[0])
                  {
                    IOObjectRelease(existing[0]);
                    if (v223.__vftable) {
                      CFRelease(v223.__vftable);
                    }
                    int v92 = 0;
                    int v93 = 0;
                    goto LABEL_182;
                  }
                  if (v223.__vftable) {
                    CFRelease(v223.__vftable);
                  }
                  if (v89 == ++v104) {
                    break;
                  }
                }
LABEL_181:
                int v92 = 1;
                int v93 = 1;
              }
              else
              {
                int v92 = 0;
                int v93 = 2;
              }
LABEL_182:
              mach_port_t v106 = (AMCP::Log::Scope_Registry *)std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v229);
              AMCP::Log::Scope_Registry::get(v106);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
              int v108 = *(_DWORD *)(*(void *)existing + 16);
              if (v108 == 1)
              {
                AMCP::Log::Scope_Registry::get(v107);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                CFStringRef v123 = *(NSObject **)v229.d_ino;
                if (v229.d_seekoff) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                }
                if (!os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_221;
                }
                CFStringRef v124 = pthread_self();
                mach_port_t v125 = pthread_mach_thread_np(v124);
                if (!v210)
                {
                  CFStringRef v187 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v187, "Could not construct");
                  __cxa_throw(v187, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mach_port_t v126 = v125;
                applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                unsigned int v127 = (std::runtime_error_vtbl *)&v223;
                if (SHIBYTE(v224) < 0) {
                  unsigned int v127 = v223.__vftable;
                }
                unsigned int v128 = "satisfied";
                if (v92) {
                  unsigned int v128 = "not satisfied";
                }
                LODWORD(v229.d_ino) = 67110146;
                if (!d_seekoff_low) {
                  unsigned int v128 = "not satisfiable";
                }
                HIDWORD(v229.d_ino) = v126;
                LOWORD(v229.d_seekoff) = 2080;
                *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                v229.d_namlen = 1024;
                *(_DWORD *)&v229.d_uint64_t type = 106;
                *(_WORD *)&v229.d_name[3] = 2080;
                *(void *)&v229.d_name[5] = v127;
                *(_WORD *)&v229.d_name[13] = 2080;
                *(void *)&v229.d_name[15] = v128;
                uint64_t v115 = v123;
                os_log_type_t v116 = OS_LOG_TYPE_DEFAULT;
LABEL_218:
                _os_log_impl(&dword_1BAA78000, v115, v116, "%6u %32s:%-5d Loading conditions for server plug-in %s %s...", (uint8_t *)&v229, 0x2Cu);
              }
              else
              {
                if (v108 != 2)
                {
                  if (v108 == 3)
                  {
                    AMCP::Log::Scope_Registry::get(v107);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                    int v109 = *(NSObject **)v229.d_ino;
                    if (v229.d_seekoff) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                    }
                    if (os_log_type_enabled(v109, OS_LOG_TYPE_INFO))
                    {
                      uint64_t v110 = pthread_self();
                      mach_port_t v111 = pthread_mach_thread_np(v110);
                      if (!v210)
                      {
                        CFStringRef v186 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v186, "Could not construct");
                        __cxa_throw(v186, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      mach_port_t v112 = v111;
                      applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                      uint64_t v113 = (std::runtime_error_vtbl *)&v223;
                      if (SHIBYTE(v224) < 0) {
                        uint64_t v113 = v223.__vftable;
                      }
                      mach_port_t v114 = "satisfied";
                      if (v92) {
                        mach_port_t v114 = "not satisfied";
                      }
                      LODWORD(v229.d_ino) = 67110146;
                      if (!d_seekoff_low) {
                        mach_port_t v114 = "not satisfiable";
                      }
                      HIDWORD(v229.d_ino) = v112;
                      LOWORD(v229.d_seekoff) = 2080;
                      *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                      v229.d_namlen = 1024;
                      *(_DWORD *)&v229.d_uint64_t type = 106;
                      *(_WORD *)&v229.d_name[3] = 2080;
                      *(void *)&v229.d_name[5] = v113;
                      *(_WORD *)&v229.d_name[13] = 2080;
                      *(void *)&v229.d_name[15] = v114;
                      uint64_t v115 = v109;
                      os_log_type_t v116 = OS_LOG_TYPE_INFO;
                      goto LABEL_218;
                    }
                  }
LABEL_221:
                  unint64_t v129 = (AMCP::Log::Scope_Registry *)__p[0];
                  if (__p[0]) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
                  }
                  if (v93 != 1)
                  {
                    if (!v93)
                    {
                      AMCP::Log::Scope_Registry::get(v129);
                      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
                      int v131 = *(_DWORD *)(*(void *)existing + 16);
                      if (v131 == 1)
                      {
                        AMCP::Log::Scope_Registry::get(v130);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                        CFStringRef v158 = *(NSObject **)v229.d_ino;
                        if (v229.d_seekoff) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                        }
                        if (!os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT)) {
                          goto LABEL_269;
                        }
                        uint64_t v159 = pthread_self();
                        mach_port_t v160 = pthread_mach_thread_np(v159);
                        if (!v210)
                        {
                          BOOL v194 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v194, "Could not construct");
                          __cxa_throw(v194, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        mach_port_t v161 = v160;
                        applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                        uint64_t v162 = (std::runtime_error_vtbl *)&v223;
                        if (SHIBYTE(v224) < 0) {
                          uint64_t v162 = v223.__vftable;
                        }
                        LODWORD(v229.d_ino) = 67109890;
                        HIDWORD(v229.d_ino) = v161;
                        LOWORD(v229.d_seekoff) = 2080;
                        *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                        v229.d_namlen = 1024;
                        *(_DWORD *)&v229.d_uint64_t type = 109;
                        *(_WORD *)&v229.d_name[3] = 2080;
                        *(void *)&v229.d_name[5] = v162;
                        uint64_t v137 = v158;
                        os_log_type_t v138 = OS_LOG_TYPE_DEFAULT;
LABEL_266:
                        _os_log_impl(&dword_1BAA78000, v137, v138, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&v229, 0x22u);
                      }
                      else
                      {
                        if (v131 != 2)
                        {
                          if (v131 == 3)
                          {
                            AMCP::Log::Scope_Registry::get(v130);
                            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                            unint64_t v132 = *(NSObject **)v229.d_ino;
                            if (v229.d_seekoff) {
                              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                            }
                            if (os_log_type_enabled(v132, OS_LOG_TYPE_INFO))
                            {
                              uint64_t v133 = pthread_self();
                              mach_port_t v134 = pthread_mach_thread_np(v133);
                              if (!v210)
                              {
                                uint64_t v192 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v192, "Could not construct");
                                __cxa_throw(v192, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                              }
                              mach_port_t v135 = v134;
                              applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                              unint64_t v136 = (std::runtime_error_vtbl *)&v223;
                              if (SHIBYTE(v224) < 0) {
                                unint64_t v136 = v223.__vftable;
                              }
                              LODWORD(v229.d_ino) = 67109890;
                              HIDWORD(v229.d_ino) = v135;
                              LOWORD(v229.d_seekoff) = 2080;
                              *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                              v229.d_namlen = 1024;
                              *(_DWORD *)&v229.d_uint64_t type = 109;
                              *(_WORD *)&v229.d_name[3] = 2080;
                              *(void *)&v229.d_name[5] = v136;
                              uint64_t v137 = v132;
                              os_log_type_t v138 = OS_LOG_TYPE_INFO;
                              goto LABEL_266;
                            }
                          }
LABEL_269:
                          if (__p[0]) {
                            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
                          }
                          AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver(a1);
                        }
                        AMCP::Log::Scope_Registry::get(v130);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                        mach_port_t v148 = *(NSObject **)v229.d_ino;
                        if (v229.d_seekoff) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                        }
                        if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEBUG)) {
                          goto LABEL_269;
                        }
                        uint64_t v149 = pthread_self();
                        mach_port_t v150 = pthread_mach_thread_np(v149);
                        if (!v210)
                        {
                          unsigned int v188 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                          std::runtime_error::runtime_error(v188, "Could not construct");
                          __cxa_throw(v188, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                        }
                        mach_port_t v151 = v150;
                        applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                        v152 = (std::runtime_error_vtbl *)&v223;
                        if (SHIBYTE(v224) < 0) {
                          v152 = v223.__vftable;
                        }
                        LODWORD(v229.d_ino) = 67109890;
                        HIDWORD(v229.d_ino) = v151;
                        LOWORD(v229.d_seekoff) = 2080;
                        *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                        v229.d_namlen = 1024;
                        *(_DWORD *)&v229.d_uint64_t type = 109;
                        *(_WORD *)&v229.d_name[3] = 2080;
                        *(void *)&v229.d_name[5] = v152;
                        _os_log_debug_impl(&dword_1BAA78000, v148, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading server plug-in %s...", (uint8_t *)&v229, 0x22u);
                      }
                      if (SHIBYTE(v224) < 0) {
                        operator delete(v223.__vftable);
                      }
                      goto LABEL_269;
                    }
                    goto LABEL_301;
                  }
                  AMCP::Log::Scope_Registry::get(v129);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)existing, "com.apple.coreaudio", "AMCP");
                  int v140 = *(_DWORD *)(*(void *)existing + 16);
                  if (v140 == 3)
                  {
                    AMCP::Log::Scope_Registry::get(v139);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                    uint64_t v163 = *(NSObject **)v229.d_ino;
                    if (v229.d_seekoff) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                    }
                    if (!os_log_type_enabled(v163, OS_LOG_TYPE_INFO)) {
                      goto LABEL_282;
                    }
                    BOOL v164 = pthread_self();
                    mach_port_t v165 = pthread_mach_thread_np(v164);
                    if (!v210)
                    {
                      CFStringRef v195 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v195, "Could not construct");
                      __cxa_throw(v195, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    mach_port_t v166 = v165;
                    applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                    int v167 = (std::runtime_error_vtbl *)&v223;
                    if (SHIBYTE(v224) < 0) {
                      int v167 = v223.__vftable;
                    }
                    LODWORD(v229.d_ino) = 67109890;
                    HIDWORD(v229.d_ino) = v166;
                    LOWORD(v229.d_seekoff) = 2080;
                    *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                    v229.d_namlen = 1024;
                    *(_DWORD *)&v229.d_uint64_t type = 115;
                    *(_WORD *)&v229.d_name[3] = 2080;
                    *(void *)&v229.d_name[5] = v167;
                    uint64_t v146 = v163;
                    os_log_type_t v147 = OS_LOG_TYPE_INFO;
LABEL_279:
                    _os_log_impl(&dword_1BAA78000, v146, v147, "%6u %32s:%-5d Deferring loading server plug-in %s...", (uint8_t *)&v229, 0x22u);
                  }
                  else
                  {
                    if (v140 != 2)
                    {
                      if (v140 == 1)
                      {
                        AMCP::Log::Scope_Registry::get(v139);
                        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                        uint64_t v141 = *(NSObject **)v229.d_ino;
                        if (v229.d_seekoff) {
                          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                        }
                        if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
                        {
                          uint64_t v142 = pthread_self();
                          mach_port_t v143 = pthread_mach_thread_np(v142);
                          if (!v210)
                          {
                            CFMutableDictionaryRef v193 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v193, "Could not construct");
                            __cxa_throw(v193, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          mach_port_t v144 = v143;
                          applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                          int v145 = (std::runtime_error_vtbl *)&v223;
                          if (SHIBYTE(v224) < 0) {
                            int v145 = v223.__vftable;
                          }
                          LODWORD(v229.d_ino) = 67109890;
                          HIDWORD(v229.d_ino) = v144;
                          LOWORD(v229.d_seekoff) = 2080;
                          *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                          v229.d_namlen = 1024;
                          *(_DWORD *)&v229.d_uint64_t type = 115;
                          *(_WORD *)&v229.d_name[3] = 2080;
                          *(void *)&v229.d_name[5] = v145;
                          uint64_t v146 = v141;
                          os_log_type_t v147 = OS_LOG_TYPE_DEFAULT;
                          goto LABEL_279;
                        }
                      }
LABEL_282:
                      if (__p[0]) {
                        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[0]);
                      }
                      CFTypeRef v168 = v210;
                      if (v210) {
                        CFRetain(v210);
                      }
                      if (!cf[0])
                      {
                        CFStringRef v198 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                        std::runtime_error::runtime_error(v198, "Could not construct");
                        __cxa_throw(v198, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                      }
                      CFArrayRef v169 = CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D518]);
                      applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v229, v169);
                      applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, (const __CFDictionary *)cf[0], @"IOService Matching", &v229);
                      if (v229.d_ino) {
                        CFRelease((CFTypeRef)v229.d_ino);
                      }
                      CFArrayRef v170 = theArray;
                      if (theArray)
                      {
                        CFIndex v171 = CFArrayGetCount(theArray);
                        CFIndex v172 = CFArrayGetCount(v170);
                        if (!v171) {
                          goto LABEL_298;
                        }
                        if (v172)
                        {
                          applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&v217, v170, 0);
                          AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&v229, *(dispatch_object_t *)(*(void *)(*(void *)(a1 + 32) + 32) + 352));
                          if (*j) {
                            CFRetain(*j);
                          }
                          if (v168) {
                            CFRetain(v168);
                          }
                          operator new();
                        }
                        CFArrayRef v170 = theArray;
                        if (theArray) {
LABEL_298:
                        }
                          CFRelease(v170);
                      }
                      if (v168) {
                        CFRelease(v168);
                      }
LABEL_301:
                      std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)cf);
                      if (v209) {
                        CFRelease(v209);
                      }
                      goto LABEL_303;
                    }
                    AMCP::Log::Scope_Registry::get(v139);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                    mach_port_t v153 = *(NSObject **)v229.d_ino;
                    if (v229.d_seekoff) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                    }
                    if (!os_log_type_enabled(v153, OS_LOG_TYPE_DEBUG)) {
                      goto LABEL_282;
                    }
                    uint64_t v154 = pthread_self();
                    mach_port_t v155 = pthread_mach_thread_np(v154);
                    if (!v210)
                    {
                      unsigned int v189 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v189, "Could not construct");
                      __cxa_throw(v189, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    mach_port_t v156 = v155;
                    applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                    BOOL v157 = (std::runtime_error_vtbl *)&v223;
                    if (SHIBYTE(v224) < 0) {
                      BOOL v157 = v223.__vftable;
                    }
                    LODWORD(v229.d_ino) = 67109890;
                    HIDWORD(v229.d_ino) = v156;
                    LOWORD(v229.d_seekoff) = 2080;
                    *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                    v229.d_namlen = 1024;
                    *(_DWORD *)&v229.d_uint64_t type = 115;
                    *(_WORD *)&v229.d_name[3] = 2080;
                    *(void *)&v229.d_name[5] = v157;
                    _os_log_debug_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Deferring loading server plug-in %s...", (uint8_t *)&v229, 0x22u);
                  }
                  if (SHIBYTE(v224) < 0) {
                    operator delete(v223.__vftable);
                  }
                  goto LABEL_282;
                }
                AMCP::Log::Scope_Registry::get(v107);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
                long long v117 = *(NSObject **)v229.d_ino;
                if (v229.d_seekoff) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
                }
                if (!os_log_type_enabled(v117, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_221;
                }
                std::string::size_type v118 = pthread_self();
                mach_port_t v119 = pthread_mach_thread_np(v118);
                if (!v210)
                {
                  int v182 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v182, "Could not construct");
                  __cxa_throw(v182, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mach_port_t v120 = v119;
                applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
                int v121 = (std::runtime_error_vtbl *)&v223;
                if (SHIBYTE(v224) < 0) {
                  int v121 = v223.__vftable;
                }
                CFStringRef v122 = "satisfied";
                if (v92) {
                  CFStringRef v122 = "not satisfied";
                }
                LODWORD(v229.d_ino) = 67110146;
                if (!d_seekoff_low) {
                  CFStringRef v122 = "not satisfiable";
                }
                HIDWORD(v229.d_ino) = v120;
                LOWORD(v229.d_seekoff) = 2080;
                *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
                v229.d_namlen = 1024;
                *(_DWORD *)&v229.d_uint64_t type = 106;
                *(_WORD *)&v229.d_name[3] = 2080;
                *(void *)&v229.d_name[5] = v121;
                *(_WORD *)&v229.d_name[13] = 2080;
                *(void *)&v229.d_name[15] = v122;
                _os_log_debug_impl(&dword_1BAA78000, v117, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading conditions for server plug-in %s %s...", (uint8_t *)&v229, 0x2Cu);
              }
              if (SHIBYTE(v224) < 0) {
                operator delete(v223.__vftable);
              }
              goto LABEL_221;
            }
            AMCP::Log::Scope_Registry::get(v58);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v229, "com.apple.coreaudio", "AMCP");
            int v76 = *(NSObject **)v229.d_ino;
            if (v229.d_seekoff) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229.d_seekoff);
            }
            if (!os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG)) {
              goto LABEL_142;
            }
            long long v77 = pthread_self();
            mach_port_t v78 = pthread_mach_thread_np(v77);
            if (!v210)
            {
              v181 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v181, "Could not construct");
              __cxa_throw(v181, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mach_port_t v79 = v78;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v223, (const __CFString *)v210);
            uint64_t v80 = (std::runtime_error_vtbl *)&v223;
            if (SHIBYTE(v224) < 0) {
              uint64_t v80 = v223.__vftable;
            }
            LODWORD(v229.d_ino) = 67109890;
            HIDWORD(v229.d_ino) = v79;
            LOWORD(v229.d_seekoff) = 2080;
            *(__uint64_t *)((char *)&v229.d_seekoff + 2) = (__uint64_t)"ASP_Loader.h";
            v229.d_namlen = 1024;
            *(_DWORD *)&v229.d_uint64_t type = 104;
            *(_WORD *)&v229.d_name[3] = 2080;
            *(void *)&v229.d_name[5] = v80;
            _os_log_debug_impl(&dword_1BAA78000, v76, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Evaluating loading conditions for server plug-in %s...", (uint8_t *)&v229, 0x22u);
          }
          if (SHIBYTE(v224) < 0) {
            operator delete(v223.__vftable);
          }
          goto LABEL_142;
        }
      }
LABEL_303:
      if (v210) {
        CFRelease(v210);
      }
      if (v214) {
        CFRelease(v214);
      }
      os_log_type_t v44 = v207;
    }
    v229.CFArrayRef d_ino = (__uint64_t)&v215;
    std::vector<applesauce::CF::URLRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v229);
    ++*(void *)&mainPort[4];
  }
  while (*(void *)&mainPort[4] != 3);
}

void sub_1BAB59558(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::vector<applesauce::CF::URLRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  CFStringRef v2 = (char *)**a1;
  if (v2)
  {
    CFStringRef v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        std::__destroy_at[abi:ne180100]<applesauce::CF::URLRef,0>(v6);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::DictionaryRef *mcp_applesauce::CF::BundleRef_proxy::get_info_dictionary(applesauce::CF::DictionaryRef *this, __CFBundle *a2)
{
  CFStringRef v2 = this;
  if (a2)
  {
    CFDictionaryRef InfoDictionary = CFBundleGetInfoDictionary(a2);
    CFDictionaryRef v4 = InfoDictionary;
    if (InfoDictionary) {
      CFRetain(InfoDictionary);
    }
    return applesauce::CF::DictionaryRef::DictionaryRef(v2, v4);
  }
  else
  {
    *(void *)this = 0;
  }
  return this;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  CFDictionaryRef v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 32);
  long long v4 = v1;
  uint64_t v2 = *(void *)(a1 + 40);
  if (*((void *)&v1 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v1 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  CFStringRef v3 = (char *)operator new(0x138uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)CFStringRef v3 = &unk_1F145FD20;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(v3 + 88) = 0u;
  *((void *)v3 + 4) = 0;
  *((void *)v3 + 5) = 0;
  *(_OWORD *)(v3 + 56) = v4;
  *(_OWORD *)(v3 + 72) = 0u;
  *((void *)v3 + 3) = &unk_1F14728A8;
  *((void *)v3 + 6) = &unk_1F14728D0;
  *((void *)v3 + 13) = 0;
  std::__shared_mutex_base::__shared_mutex_base((std::__shared_mutex_base *)(v3 + 112));
  operator new();
}

void sub_1BAB59B18(void *a1)
{
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 224));
  std::condition_variable::~condition_variable((std::condition_variable *)(v1 + 176));
  std::mutex::~mutex(v3);
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::shared_ptr<AMCP::ASP::PlugIn_Object>>>,void>::~vector(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 80);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)(v1 + 48) = &unk_1F146D188;
  CFTypeID v6 = *(std::__shared_weak_count **)(v1 + 64);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  char v7 = *(std::__shared_weak_count **)(v1 + 40);
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  std::__shared_weak_count::~__shared_weak_count((std::__shared_weak_count *)v1);
  operator delete(v8);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB59AE8);
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void *std::__tuple_leaf<0ul,applesauce::CF::StringRef,false>::__tuple_leaf[abi:ne180100]<applesauce::CF::StringRef const&,void>(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::tuple<applesauce::CF::StringRef,std::unique_ptr<applesauce::iokit::io_service_factory>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v2) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v2);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
}

uint64_t AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}::~io_object_holder(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  CFStringRef v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP10Loader_ImpINS0_20Simple_Loader_HelperEE12defer_driverERKN10applesauce2CF6URLRefENS5_9StringRefERKNS5_13DictionaryRefEjEUlNS4_5iokit16io_object_holderEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::operator()(AMCP::Log::Scope_Registry *a1, _DWORD *a2)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  *a2 = 0;
  uint64_t v3 = *((void *)a1 + 1);
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v57, "com.apple.coreaudio", "AMCP");
  int v5 = *(_DWORD *)(v57 + 16);
  switch(v5)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v20 = **(NSObject ***)buf;
      if (*(void *)v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v60);
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        CFStringRef v23 = (const __CFString *)*((void *)a1 + 3);
        if (!v23)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v24 = v22;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v23);
        if (v56 >= 0) {
          BOOL v25 = __p;
        }
        else {
          BOOL v25 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)unint64_t v60 = 2080;
        *(void *)&uint64_t v60[2] = "ASP_Loader.h";
        __int16 v61 = 1024;
        int v62 = 149;
        __int16 v63 = 2080;
        mach_port_t v64 = v25;
        unint64_t v12 = v20;
        os_log_type_t v13 = OS_LOG_TYPE_INFO;
        goto LABEL_28;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      CFStringRef v14 = **(NSObject ***)buf;
      if (*(void *)v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v60);
      }
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        CFURLRef v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        CFStringRef v17 = (const __CFString *)*((void *)a1 + 3);
        if (!v17)
        {
          std::string::size_type v49 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v49, "Could not construct");
          __cxa_throw(v49, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v18 = v16;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v17);
        if (v56 >= 0) {
          long long v19 = __p;
        }
        else {
          long long v19 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)unint64_t v60 = 2080;
        *(void *)&uint64_t v60[2] = "ASP_Loader.h";
        __int16 v61 = 1024;
        int v62 = 149;
        __int16 v63 = 2080;
        mach_port_t v64 = v19;
        _os_log_debug_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading conditions for server plug-in %s finally satisfied...", buf, 0x22u);
        goto LABEL_29;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v4);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      CFTypeRef v6 = **(NSObject ***)buf;
      if (*(void *)v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v60);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        char v7 = pthread_self();
        mach_port_t v8 = pthread_mach_thread_np(v7);
        CFStringRef v9 = (const __CFString *)*((void *)a1 + 3);
        if (!v9)
        {
          uint64_t v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v52, "Could not construct");
          __cxa_throw(v52, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v10 = v8;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v9);
        if (v56 >= 0) {
          CFComparisonResult v11 = __p;
        }
        else {
          CFComparisonResult v11 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v10;
        *(_WORD *)unint64_t v60 = 2080;
        *(void *)&uint64_t v60[2] = "ASP_Loader.h";
        __int16 v61 = 1024;
        int v62 = 149;
        __int16 v63 = 2080;
        mach_port_t v64 = v11;
        unint64_t v12 = v6;
        os_log_type_t v13 = OS_LOG_TYPE_DEFAULT;
LABEL_28:
        _os_log_impl(&dword_1BAA78000, v12, v13, "%6u %32s:%-5d Loading conditions for server plug-in %s finally satisfied...", buf, 0x22u);
LABEL_29:
        if (v56 < 0) {
          operator delete(__p[0]);
        }
      }
      break;
  }
  CFIndex v26 = (AMCP::Log::Scope_Registry *)v58;
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  AMCP::Log::Scope_Registry::get(v26);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v57, "com.apple.coreaudio", "AMCP");
  int v28 = *(_DWORD *)(v57 + 16);
  switch(v28)
  {
    case 1:
      AMCP::Log::Scope_Registry::get(v27);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v43 = **(NSObject ***)buf;
      if (*(void *)v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v60);
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v44 = pthread_self();
        mach_port_t v45 = pthread_mach_thread_np(v44);
        CFStringRef v46 = (const __CFString *)*((void *)a1 + 3);
        if (!v46)
        {
          std::string::size_type v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v53, "Could not construct");
          __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v47 = v45;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v46);
        if (v56 >= 0) {
          BOOL v48 = __p;
        }
        else {
          BOOL v48 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v47;
        *(_WORD *)unint64_t v60 = 2080;
        *(void *)&uint64_t v60[2] = "ASP_Loader.h";
        __int16 v61 = 1024;
        int v62 = 150;
        __int16 v63 = 2080;
        mach_port_t v64 = v48;
        mach_port_t v35 = v43;
        os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_60;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v27);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v37 = **(NSObject ***)buf;
      if (*(void *)v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v60);
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v38 = pthread_self();
        mach_port_t v39 = pthread_mach_thread_np(v38);
        CFStringRef v40 = (const __CFString *)*((void *)a1 + 3);
        if (!v40)
        {
          uint64_t v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v50, "Could not construct");
          __cxa_throw(v50, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v41 = v39;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v40);
        if (v56 >= 0) {
          mach_port_t v42 = __p;
        }
        else {
          mach_port_t v42 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)unint64_t v60 = 2080;
        *(void *)&uint64_t v60[2] = "ASP_Loader.h";
        __int16 v61 = 1024;
        int v62 = 150;
        __int16 v63 = 2080;
        mach_port_t v64 = v42;
        _os_log_debug_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Loading server plug-in %s...", buf, 0x22u);
        goto LABEL_61;
      }
      break;
    case 3:
      AMCP::Log::Scope_Registry::get(v27);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      BOOL v29 = **(NSObject ***)buf;
      if (*(void *)v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v60);
      }
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = pthread_self();
        mach_port_t v31 = pthread_mach_thread_np(v30);
        CFStringRef v32 = (const __CFString *)*((void *)a1 + 3);
        if (!v32)
        {
          unint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v54, "Could not construct");
          __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v33 = v31;
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v32);
        if (v56 >= 0) {
          uint64_t v34 = __p;
        }
        else {
          uint64_t v34 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v33;
        *(_WORD *)unint64_t v60 = 2080;
        *(void *)&uint64_t v60[2] = "ASP_Loader.h";
        __int16 v61 = 1024;
        int v62 = 150;
        __int16 v63 = 2080;
        mach_port_t v64 = v34;
        mach_port_t v35 = v29;
        os_log_type_t v36 = OS_LOG_TYPE_INFO;
LABEL_60:
        _os_log_impl(&dword_1BAA78000, v35, v36, "%6u %32s:%-5d Loading server plug-in %s...", buf, 0x22u);
LABEL_61:
        if (v56 < 0) {
          operator delete(__p[0]);
        }
      }
      break;
  }
  if (v58) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v58);
  }
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::load_driver(v3);
}

void sub_1BAB5A92C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  __cxa_free_exception(v15);
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v14) {
    IOObjectRelease(v14);
  }
  _Unwind_Resume(a1);
}

void *applesauce::CF::StringRef::operator->(void *result)
{
  if (!*result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  return result;
}

void sub_1BAB5AA30(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3) {
    CFRelease(v3);
  }
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F145FD70;
  return std::__compressed_pair_elem<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1} const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  long long v4 = *(const void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  if (v4) {
    CFRetain(v4);
  }
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a2 + 16));
  }
  *(void *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

void *std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_1F145FD70;
  std::__compressed_pair_elem<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1} const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::~__func(void *a1)
{
  *a1 = &unk_1F145FD70;
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1},std::allocator<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::defer_driver(applesauce::CF::URLRef const&,applesauce::CF::StringRef,applesauce::CF::DictionaryRef const&,unsigned int)::{lambda(applesauce::iokit::io_object_holder)#1}>,void ()(applesauce::iokit::io_object_holder)>::~__func(void *a1)
{
  *a1 = &unk_1F145FD70;
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[2];
  if (v3) {
    CFRelease(v3);
  }
  return a1;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  long long v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::ASP::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FD20;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::ASP::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FD20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::URLRef,0>(const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void non-virtual thunk to'AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(uint64_t a1)
{
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp((void *)(a1 - 24));

  JUMPOUT(0x1C1859840);
}

void *AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(void *a1)
{
  *a1 = &unk_1F145FCA0;
  a1[3] = &unk_1F145FCC8;
  uint64_t v2 = a1[6];
  if (v2)
  {
    uint64_t v3 = a1[7];
    long long v4 = (void *)a1[6];
    if (v3 != v2)
    {
      do
      {
        v3 -= 16;
        std::__destroy_at[abi:ne180100]<std::tuple<applesauce::CF::StringRef,std::unique_ptr<applesauce::iokit::io_service_factory>>,0>(v3);
      }
      while (v3 != v2);
      long long v4 = (void *)a1[6];
    }
    a1[7] = v2;
    operator delete(v4);
  }
  a1[3] = &unk_1F146D188;
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  CFTypeID v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void *non-virtual thunk to'AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(uint64_t a1)
{
  return AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp((void *)(a1 - 24));
}

void AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(void *a1)
{
  AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>::~Loader_Imp(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FC50;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::ASP::Loader_Imp<AMCP::ASP::Simple_Loader_Helper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FC50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FC00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio1::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FBB0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FBB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t std::__shared_ptr_emplace<AMCP::Null::Driver>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Null::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FB60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Null::Driver>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FB60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

const void **std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<applesauce::CF::StringRef *,applesauce::CF::StringRef *,applesauce::CF::StringRef *>(const void **a1, const void **a2, const void **a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      CFTypeID v6 = *a3;
      char v7 = *v5;
      *a3 = *v5;
      if (v7) {
        CFRetain(v7);
      }
      if (v6) {
        CFRelease(v6);
      }
      ++v5;
      ++a3;
    }
    while (v5 != a2);
  }
  return a3;
}

void *std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef&,applesauce::CF::StringRef*>(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

uint64_t std::__split_buffer<applesauce::CF::StringRef>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    long long v4 = *(const void **)(i - 8);
    *(void *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::StringRef,0>(v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::pair<HALS_PlugIn *,NSXPCConnection * {__strong}>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__function::__value_func<int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(NSString *,NSXPCConnection *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

const void **mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::~BasicRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::construct_at[abi:ne180100]<applesauce::CF::StringRef,applesauce::CF::StringRef const&,applesauce::CF::StringRef*>(void *a1, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  *a1 = cf;
  return a1;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1)
{
  int v1 = *(char *)(a1 + 23);
  unint64_t v2 = *(void *)(a1 + 8);
  BOOL v3 = v1 < 0;
  if (v1 >= 0) {
    long long v4 = (uint64_t *)a1;
  }
  else {
    long long v4 = *(uint64_t **)a1;
  }
  if (!v3) {
    unint64_t v2 = *(unsigned __int8 *)(a1 + 23);
  }
  if (v2 > 0x20)
  {
    if (v2 > 0x40)
    {
      unint64_t v34 = 0x9DDFEA08EB382D69;
      uint64_t v44 = *(uint64_t *)((char *)v4 + v2 - 48);
      uint64_t v43 = *(uint64_t *)((char *)v4 + v2 - 40);
      uint64_t v45 = *(uint64_t *)((char *)v4 + v2 - 24);
      uint64_t v47 = *(uint64_t *)((char *)v4 + v2 - 64);
      uint64_t v46 = *(uint64_t *)((char *)v4 + v2 - 56);
      uint64_t v48 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v49 = *(uint64_t *)((char *)v4 + v2 - 8);
      unint64_t v50 = v46 + v48;
      unint64_t v51 = 0x9DDFEA08EB382D69
          * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ (v44 + v2))));
      unint64_t v52 = 0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47));
      unint64_t v53 = v47 + v2 + v46 + v44;
      uint64_t v54 = v53 + v43;
      unint64_t v55 = __ROR8__(v53, 44) + v47 + v2 + __ROR8__(v43 + v47 + v2 - 0x622015F714C7D297 * (v51 ^ (v51 >> 47)), 21);
      uint64_t v56 = v46 + v48 + *(uint64_t *)((char *)v4 + v2 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v57 = v56 + v45 + v48;
      uint64_t v58 = __ROR8__(v57, 44);
      uint64_t v59 = v57 + v49;
      uint64_t v60 = v58 + v56 + __ROR8__(v56 + v43 + v49, 21);
      uint64_t v62 = *v4;
      __int16 v61 = v4 + 4;
      unint64_t v63 = v62 - 0x4B6D499041670D8DLL * v43;
      uint64_t v64 = -(uint64_t)((v2 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v65 = *(v61 - 3);
        uint64_t v66 = v63 + v54 + v50 + v65;
        uint64_t v67 = v61[2];
        uint64_t v68 = v61[3];
        uint64_t v69 = v61[1];
        unint64_t v50 = v69 + v54 - 0x4B6D499041670D8DLL * __ROR8__(v50 + v55 + v67, 42);
        uint64_t v70 = v52 + v59;
        uint64_t v71 = *(v61 - 2);
        uint64_t v72 = *(v61 - 1);
        uint64_t v73 = *(v61 - 4) - 0x4B6D499041670D8DLL * v55;
        uint64_t v74 = v73 + v59 + v72;
        uint64_t v75 = v73 + v65 + v71;
        uint64_t v54 = v75 + v72;
        uint64_t v76 = __ROR8__(v75, 44) + v73;
        unint64_t v77 = (0xB492B66FBE98F273 * __ROR8__(v66, 37)) ^ v60;
        unint64_t v63 = 0xB492B66FBE98F273 * __ROR8__(v70, 33);
        unint64_t v55 = v76 + __ROR8__(v74 + v77, 21);
        unint64_t v78 = v63 + v60 + *v61;
        uint64_t v59 = v78 + v69 + v67 + v68;
        uint64_t v60 = __ROR8__(v78 + v69 + v67, 44) + v78 + __ROR8__(v50 + v71 + v78 + v68, 21);
        v61 += 8;
        unint64_t v52 = v77;
        v64 += 64;
      }
      while (v64);
      unint64_t v79 = 0x9DDFEA08EB382D69
          * (v59 ^ ((0x9DDFEA08EB382D69 * (v59 ^ v54)) >> 47) ^ (0x9DDFEA08EB382D69 * (v59 ^ v54)));
      unint64_t v80 = v63
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) ^ ((0x9DDFEA08EB382D69 * (v60 ^ ((0x9DDFEA08EB382D69 * (v60 ^ v55)) >> 47) ^ (0x9DDFEA08EB382D69 * (v60 ^ v55)))) >> 47));
      unint64_t v81 = 0x9DDFEA08EB382D69
          * (v80 ^ (v77 - 0x4B6D499041670D8DLL * (v50 ^ (v50 >> 47)) - 0x622015F714C7D297 * (v79 ^ (v79 >> 47))));
      unint64_t v35 = 0x9DDFEA08EB382D69 * (v80 ^ (v81 >> 47) ^ v81);
    }
    else
    {
      CFStringRef v9 = (char *)v4 + v2;
      uint64_t v10 = *(uint64_t *)((char *)v4 + v2 - 16);
      uint64_t v11 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v12 = v4[1];
      uint64_t v13 = *v4 - 0x3C5A37A36834CED9 * (v10 + v2);
      mach_port_t v16 = v4 + 2;
      uint64_t v14 = v4[2];
      uint64_t v15 = v16[1];
      uint64_t v17 = __ROR8__(v13 + v15, 52);
      uint64_t v18 = __ROR8__(v13, 37);
      uint64_t v19 = v13 + v12;
      uint64_t v20 = __ROR8__(v19, 7);
      uint64_t v21 = v19 + v14;
      uint64_t v22 = v20 + v18;
      uint64_t v23 = *((void *)v9 - 4) + v14;
      uint64_t v24 = v11 + v15;
      uint64_t v25 = __ROR8__(v24 + v23, 52);
      uint64_t v26 = v22 + v17;
      uint64_t v27 = __ROR8__(v23, 37);
      uint64_t v28 = *((void *)v9 - 3) + v23;
      uint64_t v29 = __ROR8__(v28, 7);
      uint64_t v30 = v26 + __ROR8__(v21, 31);
      uint64_t v31 = v28 + v10;
      uint64_t v32 = v31 + v24;
      uint64_t v33 = v21 + v15 + v27 + v29 + v25 + __ROR8__(v31, 31);
      unint64_t v34 = 0x9AE16A3B2F90404FLL;
      unint64_t v35 = v30
          - 0x3C5A37A36834CED9
          * ((0xC3A5C85C97CB3127 * (v32 + v30) - 0x651E95C4D06FBFB1 * v33) ^ ((0xC3A5C85C97CB3127 * (v32 + v30)
                                                                                 - 0x651E95C4D06FBFB1 * v33) >> 47));
    }
    return (v35 ^ (v35 >> 47)) * v34;
  }
  else
  {
    if (v2 > 0x10)
    {
      uint64_t v36 = v4[1];
      unint64_t v37 = 0xB492B66FBE98F273 * *v4;
      unint64_t v38 = 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v39 = __ROR8__(v38, 30) + __ROR8__(v37 - v36, 43);
      unint64_t v40 = v37 + v2 + __ROR8__(v36 ^ 0xC949D7C7509E6557, 20) - v38;
      unint64_t v41 = 0x9DDFEA08EB382D69 * (v40 ^ (v39 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)v4 + v2 - 16)));
      unint64_t v42 = v40 ^ (v41 >> 47) ^ v41;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    if (v2 >= 9)
    {
      uint64_t v5 = *v4;
      uint64_t v6 = *(uint64_t *)((char *)v4 + v2 - 8);
      uint64_t v7 = __ROR8__(v6 + v2, v2);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) ^ ((0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v5)))) >> 47))) ^ v6;
    }
    if (v2 >= 4)
    {
      int v82 = *(_DWORD *)v4;
      uint64_t v83 = *(unsigned int *)((char *)v4 + v2 - 4);
      unint64_t v84 = 0x9DDFEA08EB382D69 * ((v2 + (8 * v82)) ^ v83);
      unint64_t v42 = v83 ^ (v84 >> 47) ^ v84;
      return 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v42) ^ ((0x9DDFEA08EB382D69 * v42) >> 47));
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (v2)
    {
      unint64_t v85 = (0xC949D7C7509E6557 * (v2 + 4 * *((unsigned __int8 *)v4 + v2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)v4 | ((unint64_t)*((unsigned __int8 *)v4 + (v2 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v85 ^ (v85 >> 47));
    }
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<HALS_UCRemotePlugIn,HALS_UCPlugInBase>(void **a1, void **a2)
{
  unint64_t result = *a2;
  if (*a2 {
    && (long long v4 = a2,
  }
  {
    uint64_t v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    long long v4 = a1;
  }
  *long long v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t std::__shared_ptr_emplace<HALS_UCRemotePlugIn>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_UCRemotePlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FF60;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_UCRemotePlugIn>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F145FF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(void *a1, const __CFDictionary *a2, const void *a3, void *a4)
{
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(&cf, a2, a3);
  if (v9)
  {
    CFTypeRef v6 = cf;
    if (cf) {
      CFRetain(cf);
    }
    *a1 = v6;
  }
  else
  {
    *a1 = *a4;
    *a4 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(unsigned char *a1, CFDictionaryRef theDict, const void *a3)
{
  long long v4 = applesauce::CF::details::at_key<__CFString const*>(theDict, a3);
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = v4;
  CFRetain(v4);
  CFTypeID v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    char v7 = 0;
    *a1 = 0;
    goto LABEL_6;
  }
  *(void *)a1 = v5;
  char v7 = 1;
LABEL_6:
  a1[8] = v7;
}

uint64_t std::__function::__value_func<void ()(NSString *,NSXPCConnection *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_RemotePlugInRegistrar31CreateExtrinsicDriverEntryPointEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::operator()(uint64_t a1, void **a2, void **a3, void **a4, void **a5, int *a6, unsigned __int8 *a7, uint64_t a8)
{
  v39[5] = *MEMORY[0x1E4F143B8];
  char v9 = *a2;
  uint64_t v10 = *a3;
  uint64_t v11 = *a4;
  uint64_t v12 = *a5;
  int v13 = *a6;
  int v30 = *a7;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v35, a8);
  id v14 = v9;
  id v15 = v10;
  id v16 = v11;
  id v17 = v12;
  int v18 = *(_DWORD *)(a1 + 8);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v36, (uint64_t)v35);
  id v26 = v14;
  id v27 = v15;
  id v28 = v16;
  id v29 = v17;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v37, (uint64_t)v36);
  CFURLRef relativeURL = (const __CFURL *)v28;
  id v32 = v26;
  v27;
  CFTypeRef cf = v29;
  v34[0] = 0;
  v34[1] = 0;
  HALS_System::GetInstance(&v38, 0, v34);
  uint64_t v19 = (char *)operator new(0x388uLL);
  *(_OWORD *)(v19 + 8) = 0u;
  *(void *)uint64_t v19 = &unk_1F145FF60;
  uint64_t v20 = v19 + 24;
  id v21 = v32;
  v19[32] = 0;
  *((void *)v19 + 5) = 0;
  *((_OWORD *)v19 + 3) = 0u;
  *((void *)v19 + 3) = &unk_1F145C088;
  CFURLRef v22 = CFURLCopyAbsoluteURL(relativeURL);
  applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)(v19 + 64), v22);
  *(_OWORD *)(v19 + 72) = 0u;
  *((void *)v19 + 14) = 0;
  *((void *)v19 + 15) = 0;
  *(_OWORD *)(v19 + 88) = 0u;
  *((_WORD *)v19 + 52) = 0;
  *((void *)v19 + 16) = 0;
  *((void *)v19 + 17) = 850045863;
  *((_OWORD *)v19 + 9) = 0u;
  *((_OWORD *)v19 + 10) = 0u;
  *((_OWORD *)v19 + 11) = 0u;
  *((_OWORD *)v19 + 12) = 0u;
  *((_OWORD *)v19 + 13) = 0u;
  *((void *)v19 + 28) = 850045863;
  *(_OWORD *)(v19 + 232) = 0u;
  *(_OWORD *)(v19 + 248) = 0u;
  *(_OWORD *)(v19 + 264) = 0u;
  *(_OWORD *)(v19 + 280) = 0u;
  *(_OWORD *)(v19 + 296) = 0u;
  *((void *)v19 + 39) = 850045863;
  *((_OWORD *)v19 + 20) = 0u;
  *((_OWORD *)v19 + 21) = 0u;
  *((_OWORD *)v19 + 22) = 0u;
  *((_OWORD *)v19 + 23) = 0u;
  *((void *)v19 + 48) = dispatch_semaphore_create(0);
  id v23 = v21;
  *((void *)v19 + 49) = v23;
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((uint64_t)(v19 + 400), "Remote PlugIn Change Queue");
  v19[720] = 0;
  *((_OWORD *)v19 + 49) = 0u;
  *((_OWORD *)v19 + 50) = 0u;
  *(_OWORD *)(v19 + 728) = 0u;
  *(_OWORD *)(v19 + 744) = 0u;
  *(_OWORD *)(v19 + 760) = 0u;
  *((_DWORD *)v19 + 194) = 0;
  *((_DWORD *)v19 + 204) = 1065353216;
  *(_OWORD *)(v19 + 824) = 0u;
  *(_OWORD *)(v19 + 840) = 0u;
  *((_DWORD *)v19 + 214) = 1065353216;
  *((_OWORD *)v19 + 54) = 0u;
  *((_OWORD *)v19 + 55) = 0u;
  *((_DWORD *)v19 + 224) = 1065353216;
  if (v18 != v13) {
    v19[720] = 1;
  }
  if (v30) {
    operator new();
  }
  if (cf && !*((void *)v19 + 7))
  {
    CFRetain(cf);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)v39, cf);
    uint64_t v24 = (const void *)*((void *)v19 + 7);
    *((void *)v19 + 7) = v39[0];
    v39[0] = v24;
    if (v24) {
      CFRelease(v24);
    }
  }

  uint64_t v25 = (std::__shared_weak_count *)*((void *)v19 + 6);
  if (v25)
  {
    if (v25->__shared_owners_ != -1) {
      goto LABEL_14;
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 2, 1uLL, memory_order_relaxed);
    *((void *)v19 + 5) = v20;
    *((void *)v19 + 6) = v19;
    std::__shared_weak_count::__release_weak(v25);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 2, 1uLL, memory_order_relaxed);
    *((void *)v19 + 5) = v20;
    *((void *)v19 + 6) = v19;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v19);
LABEL_14:
  operator new();
}

void sub_1BAB5C278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, AMCP::Utility::Dispatch_Queue *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F145FED0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::__clone(uint64_t a1)
{
  unint64_t result = operator new(0x10uLL);
  *(void *)unint64_t result = &unk_1F145FED0;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_1>,int ()(NSXPCListenerEndpoint *,NSXPCConnection *,NSURL *,NSString *,int,BOOL,std::function<void ()(void)>)>::~__func()
{
}

void *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *,NSXPCConnection *)>::target_type()
{
}

uint64_t std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *,NSXPCConnection *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN26HALS_RemotePlugInRegistrar31CreateExtrinsicDriverEntryPointEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *,NSXPCConnection *)>::operator()(uint64_t a1, id *a2, void **a3)
{
  uint64_t v3 = *a3;
  id v4 = *a2;
  id v5 = v3;
  uint64_t v6 = HALS_RemotePlugInRegistrar::sHighPriorityConcurrentQueue;
  id v7 = v4;
  id v8 = v5;
  unsigned __int8 v9 = atomic_load((unsigned __int8 *)(v6 + 32));
  if (v9) {
    atomic_store(1u, (unsigned __int8 *)(v6 + 33));
  }
  AMCP::Log::Scope::get_os_log_t(*(id *)v6);
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  operator new();
}

id **std::unique_ptr<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1},std::default_delete<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](id **a1)
{
  unint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {

    MEMORY[0x1C1859840](v2, 0x80C40803F642BLL);
  }
  return a1;
}

id **applesauce::dispatch::v1::async<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1} &>(NSObject  {objcproto17OS_dispatch_queue}*,HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1} &)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v67 = (id *)a1;
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v1 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  if ((void)v76) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    id v4 = *(id *)a1;
    id v5 = v4;
    if (v4) {
      CFRetain(v4);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);

    CFStringRef v6 = CFCopyDescription(cf);
    applesauce::CF::details::CFString_get_value<true>((uint64_t)&__p, v6);
    if (v6) {
      CFRelease(v6);
    }
    p_p = &__p;
    if (v74 < 0) {
      p_p = __p;
    }
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v3;
    LOWORD(v76) = 2080;
    *(void *)((char *)&v76 + 2) = "HALS_RemotePlugInRegistrar.mm";
    WORD5(v76) = 1024;
    HIDWORD(v76) = 255;
    LOWORD(v77) = 2080;
    *(void *)((char *)&v77 + 2) = p_p;
    _os_log_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Calling DestroyPlugInObject():  %s", buf, 0x22u);
    if (v74 < 0) {
      operator delete(__p);
    }
    if (cf) {
      CFRelease(cf);
    }
  }

  id v8 = *(void **)(a1 + 8);
  id v9 = *(id *)a1;
  id v10 = v8;
  uint64_t v66 = v10;
  if (v9)
  {
    uint64_t v62 = (std::mutex *)HALS_RemotePlugInRegistrar::sPlugInListMutex;
    std::mutex::lock((std::mutex *)HALS_RemotePlugInRegistrar::sPlugInListMutex);
    AMCP::Log::Scope_Registry::get(v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      id v15 = v9;
      CFRetain(v15);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v15);

      CFStringRef v16 = CFCopyDescription(cf);
      applesauce::CF::details::CFString_get_value<true>((uint64_t)&__p, v16);
      if (v16) {
        CFRelease(v16);
      }
      id v17 = &__p;
      if (v74 < 0) {
        id v17 = __p;
      }
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      LOWORD(v76) = 2080;
      *(void *)((char *)&v76 + 2) = "HALS_RemotePlugInRegistrar.mm";
      WORD5(v76) = 1024;
      HIDWORD(v76) = 671;
      LOWORD(v77) = 2080;
      *(void *)((char *)&v77 + 2) = v17;
      _os_log_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_RemotePlugInRegistrar::DestroyPlugInObject: + %s", buf, 0x22u);
      if (v74 < 0) {
        operator delete(__p);
      }
      if (cf) {
        CFRelease(cf);
      }
    }

    v71[0] = 0;
    v71[1] = 0;
    HALS_System::GetInstance(&cf, 0, v71);
    p_vtable = DSP_HAL_Mock_IOProcessor.vtable;
    id v21 = *(void **)HALS_RemotePlugInRegistrar::sPlugInList;
    uint64_t v20 = *(void **)(HALS_RemotePlugInRegistrar::sPlugInList + 8);
    if (*(void **)HALS_RemotePlugInRegistrar::sPlugInList == v20)
    {
      CFURLRef v22 = 0;
    }
    else
    {
      CFURLRef v22 = 0;
      id v23 = 0;
      unint64_t v65 = 0;
      unint64_t v63 = (char *)&v76 + 8;
      do
      {
        uint64_t v24 = *(void *)(*v21 + 408);
        *(void *)os_workgroup_interval_data_opaque_s buf = *(void *)(*v21 + 400);
        *(void *)&long long v76 = v24;
        if (v24) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
        }
        std::dynamic_pointer_cast[abi:ne180100]<HALS_UCRemotePlugIn,HALS_UCPlugInBase>(&__p, (void **)buf);
        if ((void)v76) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76);
        }
        uint64_t v25 = __p;
        id v26 = (*(void (**)(void *))(*(void *)__p + 40))(__p);
        id v27 = v26;
        if (v26)
        {
          if (!objc_msgSend(v26, "compare:", v9, v62, v63)
            && (!v66 || (id v28 = (AMCP::Log::Scope_Registry *)v21[1]) == 0 || v28 == v66))
          {
            for (uint64_t i = (void *)v25[102]; i; uint64_t i = (void *)*i)
              atomic_store(1u, (unsigned __int8 *)(i[3] + 65));
            uint64_t v30 = *v21;
            uint64_t v31 = (*(uint64_t (**)(void))(*(void *)*v21 + 64))(*v21);
            *(void *)os_workgroup_interval_data_opaque_s buf = MEMORY[0x1E4F143A8];
            *(void *)&long long v76 = 0x40000000;
            *((void *)&v76 + 1) = ___ZN11HALS_PlugIn25RemoveAllDevicesAndNotifyEv_block_invoke;
            *(void *)&long long v77 = &__block_descriptor_tmp_22;
            *((void *)&v77 + 1) = v30;
            unsigned __int8 v32 = atomic_load((unsigned __int8 *)(v31 + 32));
            if (v32) {
              atomic_store(1u, (unsigned __int8 *)(v31 + 33));
            }
            dispatch_sync(*(dispatch_queue_t *)v31, buf);
            HALS_System::DeviceManagerDestroyed((HALS_System *)cf, (HALS_DeviceManager *)*v21);
            if ((unint64_t)v23 >= v65)
            {
              uint64_t v33 = (v23 - v22) >> 3;
              unint64_t v34 = v33 + 1;
              if ((unint64_t)(v33 + 1) >> 61) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              if ((uint64_t)(v65 - (void)v22) >> 2 > v34) {
                unint64_t v34 = (uint64_t)(v65 - (void)v22) >> 2;
              }
              if (v65 - (unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v35 = v34;
              }
              if (v35)
              {
                unint64_t v35 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v35);
                id v37 = v9;
                uint64_t v38 = p_vtable;
              }
              else
              {
                id v37 = v9;
                uint64_t v38 = p_vtable;
                uint64_t v36 = 0;
              }
              uint64_t v39 = (char *)(v35 + 8 * v33);
              *(void *)uint64_t v39 = *v21;
              unint64_t v40 = v39 + 8;
              while (v23 != v22)
              {
                uint64_t v41 = *((void *)v23 - 1);
                v23 -= 8;
                *((void *)v39 - 1) = v41;
                v39 -= 8;
              }
              unint64_t v65 = v35 + 8 * v36;
              if (v22) {
                operator delete(v22);
              }
              CFURLRef v22 = v39;
              id v23 = v40;
              p_vtable = v38;
              id v9 = v37;
            }
            else
            {
              *(void *)id v23 = *v21;
              v23 += 8;
            }
          }
        }

        int v18 = (AMCP::Log::Scope_Registry *)v73;
        if (v73) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v73);
        }
        v21 += 2;
      }
      while (v21 != v20);
      if (v22 != v23)
      {
        unint64_t v42 = (HALS_ObjectMap **)v22;
        do
        {
          uint64_t v43 = *v42;
          uint64_t v44 = p_vtable[179];
          uint64_t v45 = (void *)*v44;
          uint64_t v46 = (void *)v44[1];
          if ((void *)*v44 != v46)
          {
            while ((HALS_ObjectMap *)*v45 != v43)
            {
              v45 += 2;
              if (v45 == v46) {
                goto LABEL_74;
              }
            }
          }
          if (v45 != v46)
          {
            uint64_t v47 = v45 + 2;
            if (v45 + 2 != v46)
            {
              do
              {
                uint64_t v45 = v47;
                uint64_t v48 = *v47;
                uint64_t v49 = v45[1];
                v45[1] = 0;
                unint64_t v50 = (void *)*(v45 - 1);
                *(v45 - 2) = v48;
                *(v45 - 1) = v49;

                uint64_t v47 = v45 + 2;
              }
              while (v45 + 2 != v46);
              uint64_t v46 = (void *)v44[1];
            }
            while (v46 != v45)
            {

              v46 -= 2;
            }
            v44[1] = v45;
            (*(void (**)(HALS_ObjectMap *))(*(void *)v43 + 8))(v43);
            HALS_ObjectMap::ReleaseObject(v43, v51);
          }
LABEL_74:
          ++v42;
        }
        while (v42 != (HALS_ObjectMap **)v23);
      }
    }
    AMCP::Log::Scope_Registry::get(v18);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v53 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76);
    }
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v54 = pthread_self();
      mach_port_t v55 = pthread_mach_thread_np(v54);
      id v56 = v9;
      CFRetain(v56);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v70, v56);

      CFStringRef v57 = CFCopyDescription(v70);
      applesauce::CF::details::CFString_get_value<true>((uint64_t)&__p, v57);
      if (v57) {
        CFRelease(v57);
      }
      uint64_t v58 = &__p;
      if (v74 < 0) {
        uint64_t v58 = __p;
      }
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v55;
      LOWORD(v76) = 2080;
      *(void *)((char *)&v76 + 2) = "HALS_RemotePlugInRegistrar.mm";
      WORD5(v76) = 1024;
      HIDWORD(v76) = 696;
      LOWORD(v77) = 2080;
      *(void *)((char *)&v77 + 2) = v58;
      _os_log_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d HALS_RemotePlugInRegistrar::DestroyPlugInObject: - %s", buf, 0x22u);
      if (v74 < 0) {
        operator delete(__p);
      }
      if (v70) {
        CFRelease(v70);
      }
    }

    if (v22) {
      operator delete(v22);
    }
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
    std::mutex::unlock(v62);
  }
  else
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v52 = **(NSObject ***)buf;
    AMCP::Log::Scope::get_os_log_t(**(id **)buf);
    objc_claimAutoreleasedReturnValue();
    if ((void)v76) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v76);
    }
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      uint64_t v60 = pthread_self();
      mach_port_t v61 = pthread_mach_thread_np(v60);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v61;
      LOWORD(v76) = 2080;
      *(void *)((char *)&v76 + 2) = "HALS_RemotePlugInRegistrar.mm";
      WORD5(v76) = 1024;
      HIDWORD(v76) = 666;
      _os_log_error_impl(&dword_1BAA78000, v52, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_RemotePlugInRegistrar cannot remove a driver with no name.", buf, 0x18u);
    }
  }
  return std::unique_ptr<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1},std::default_delete<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0::operator() const(NSString *,NSXPCConnection *)::{lambda(void)#1}>>::~unique_ptr[abi:ne180100](&v67);
}

void sub_1BAB5D084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, uint64_t a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,CFTypeRef cf,uint64_t a22,uint64_t a23,uint8_t buf,uint64_t a25,__int16 a26,__int16 a27,int a28,__int16 a29,uint64_t a30)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *,NSXPCConnection *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F145FE40;
}

void *std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *,NSXPCConnection *)>::__clone()
{
  unint64_t result = operator new(0x10uLL);
  *unint64_t result = &unk_1F145FE40;
  return result;
}

void std::__function::__func<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0,std::allocator<HALS_RemotePlugInRegistrar::CreateExtrinsicDriverEntryPoint(void)::$_0>,void ()(NSString *,NSXPCConnection *)>::~__func()
{
}

uint64_t AudioObjectCreate(HALS_ObjectMap *a1, const BOOL *a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (AMCP::Feature_Flags::access_run_new_hal(0, a2)) {
    return 1970171760;
  }
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2387;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: nowhere to return the object ID", buf, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v16[0] = 0;
  v16[1] = 0;
  HALS_System::GetInstance(&v17, 0, v16);
  if (!v17)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2391;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no system object", buf, 0x12u);
    }
    mach_port_t v14 = __cxa_allocate_exception(0x10uLL);
    *(void *)mach_port_t v14 = off_1F148A5D8;
    uint64_t v14[2] = 1852797029;
  }
  id v9 = HALS_System::CopyPlugInByReferenceID(v17, a1);
  id v10 = v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
      uint64_t v20 = "HALS_Framework-ios-imp.cpp";
      __int16 v21 = 1024;
      int v22 = 2395;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no plug-in with given reference ID", buf, 0x12u);
    }
    id v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)id v15 = off_1F148A5D8;
    uint64_t v15[2] = 560947818;
  }
  *a4 = (*(uint64_t (**)(HALS_ObjectMap *, uint64_t, const BOOL *, void))(*(void *)v9 + 280))(v9, a3, a2, 0);
  HALS_ObjectMap::ReleaseObject(v10, v11);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  return 0;
}

void sub_1BAB5D7F4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAB5D80C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a2)
  {
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    __cxa_begin_catch(a1);
    if (a2 == 2)
    {
      if (v12) {
        _DWORD *v12 = 0;
      }
    }
    else if (v12)
    {
      _DWORD *v12 = 0;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAB5D5A4);
  }
  JUMPOUT(0x1BAB5D7FCLL);
}

void sub_1BAB5D894()
{
}

uint64_t AudioObjectsPublishedAndDied(HALS_ObjectMap *a1, const BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (AMCP::Feature_Flags::access_run_new_hal(0, a2)) {
    return 1970171760;
  }
  if (!AllowHALClientsInThisProcess()) {
    return 560033144;
  }
  if (a3 && !a4)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
    id v26 = "HALS_Framework-ios-imp.cpp";
    __int16 v27 = 1024;
    int v28 = 2464;
    id v17 = MEMORY[0x1E4F14500];
    int v18 = "%25s:%-5d  AudioObjectCreate: the number of published objects doesn't match the array size";
    goto LABEL_19;
  }
  if (a5 && !a6)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_20;
    }
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
    id v26 = "HALS_Framework-ios-imp.cpp";
    __int16 v27 = 1024;
    int v28 = 2465;
    id v17 = MEMORY[0x1E4F14500];
    int v18 = "%25s:%-5d  AudioObjectCreate: the number of dead objects doesn't match the array size";
LABEL_19:
    _os_log_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, v18, buf, 0x12u);
LABEL_20:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  v22[0] = 0;
  v22[1] = 0;
  HALS_System::GetInstance(&v23, 0, v22);
  if (!v23)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
      id v26 = "HALS_Framework-ios-imp.cpp";
      __int16 v27 = 1024;
      int v28 = 2469;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no system object", buf, 0x12u);
    }
    uint64_t v20 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v20 = off_1F148A5D8;
    _OWORD v20[2] = 1852797029;
  }
  int v13 = HALS_System::CopyPlugInByReferenceID(v23, a1);
  mach_port_t v14 = v13;
  if (!v13)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
      id v26 = "HALS_Framework-ios-imp.cpp";
      __int16 v27 = 1024;
      int v28 = 2473;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  AudioObjectCreate: no plug-in with given reference ID", buf, 0x12u);
    }
    __int16 v21 = __cxa_allocate_exception(0x10uLL);
    *(void *)__int16 v21 = off_1F148A5D8;
    uint64_t v21[2] = 560947818;
  }
  (*(void (**)(HALS_ObjectMap *, const BOOL *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v13 + 288))(v13, a2, a3, a4, a5, a6, 0);
  HALS_ObjectMap::ReleaseObject(v14, v15);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  return 0;
}

void sub_1BAB5DC54(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAB5DC6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a2)
  {
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAB5D9A8);
  }
  JUMPOUT(0x1BAB5DC5CLL);
}

void sub_1BAB5DCE4()
{
}

uint64_t AudioHardwareClaimAudioDeviceID(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareDevicesCreated(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareDevicesDied(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareDevicePropertyChanged(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareClaimAudioStreamID(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareStreamsCreated(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareStreamsDied(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

uint64_t AudioHardwareStreamPropertyChanged(uint64_t a1, const BOOL *a2)
{
  return 1970171760;
}

void sub_1BAB5E22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAB5E44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c101_ZTSKZ87__Core_Audio_Driver_Host_Proxy_driver_request_config_change_change_action_change_info__E4__13(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

__n128 __copy_helper_block_ea8_32c101_ZTSKZ87__Core_Audio_Driver_Host_Proxy_driver_request_config_change_change_action_change_info__E4__12(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

void sub_1BAB5E5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAB5E764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_Proxy_delete_from_driver_storage__E4__11(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c73_ZTSKZ59__Core_Audio_Driver_Host_Proxy_delete_from_driver_storage__E4__10(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BAB5E900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAB5EAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c83_ZTSKZ70__Core_Audio_Driver_Host_Proxy_write_to_driver_storage_property_list__E3__9(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

uint64_t __copy_helper_block_ea8_32c83_ZTSKZ70__Core_Audio_Driver_Host_Proxy_write_to_driver_storage_property_list__E3__8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BAB5EC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  mcp_applesauce::CF::PropertyListRef::~PropertyListRef(v19);

  _Unwind_Resume(a1);
}

void sub_1BAB5EE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 __copy_helper_block_ea8_32c70_ZTSKZ57__Core_Audio_Driver_Host_Proxy_copy_from_driver_storage__E3__7(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

uint64_t __copy_helper_block_ea8_32c70_ZTSKZ57__Core_Audio_Driver_Host_Proxy_copy_from_driver_storage__E3__6(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void sub_1BAB5F004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAB5F1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_Proxy_driver_properties_changed_properties_data__E3__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

__n128 __copy_helper_block_ea8_32c87_ZTSKZ74__Core_Audio_Driver_Host_Proxy_driver_properties_changed_properties_data__E3__4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[2];
  a1[2] = result;
  return result;
}

void sub_1BAB5F39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id std::allocate_shared[abi:ne180100]<Host_Interface,std::allocator<Host_Interface>,Core_Audio_Driver_Host_Proxy * {__strong}&,void>(void *a1, void *a2)
{
  id v4 = operator new(0x48uLL);
  v4[1] = 0;
  v4[2] = 0;
  *id v4 = &unk_1F1460190;
  id result = a2;
  void v4[3] = Host_Interface::properties_changed;
  v4[4] = Host_Interface::copy_from_storage;
  void v4[5] = Host_Interface::write_to_storage;
  v4[6] = Host_Interface::delete_from_storage;
  v4[7] = Host_Interface::request_device_configuration_change;
  v4[8] = result;
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

uint64_t Host_Interface::request_device_configuration_change(Host_Interface *this, const AudioServerPlugInHostInterface *a2, uint64_t a3, uint64_t a4, void *a5)
{
  return objc_msgSend(*((id *)this + 5), "driver_request_config_change:change_action:change_info:", a2, a3, a4);
}

uint64_t Host_Interface::delete_from_storage(Host_Interface *this, CFTypeRef cf, const __CFString *a3)
{
  id v4 = (void *)*((void *)this + 5);
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  uint64_t v5 = objc_msgSend(v4, "delete_from_driver_storage:", &cfa);
  if (cfa) {
    CFRelease(cfa);
  }
  return v5;
}

uint64_t Host_Interface::write_to_storage(Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void *a4)
{
  CFStringRef v6 = (void *)*((void *)this + 5);
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v10, cf);
  mcp_applesauce::CF::PropertyListRef::from_get((mcp_applesauce::CF::PropertyListRef *)&cfa, a3);
  uint64_t v7 = objc_msgSend(v6, "write_to_driver_storage:property_list:", &v10, &cfa);
  if (cfa) {
    CFRelease(cfa);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

uint64_t Host_Interface::copy_from_storage(Host_Interface *this, CFTypeRef cf, const __CFString *a3, const void **a4)
{
  CFStringRef v6 = (void *)*((void *)this + 5);
  if (cf) {
    CFRetain(cf);
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, cf);
  if (v6) {
    objc_msgSend(v6, "copy_from_driver_storage:", &cfa);
  }
  else {
    CFTypeRef v9 = 0;
  }
  if (cfa) {
    CFRelease(cfa);
  }
  if (a3)
  {
    a3->isa = (void *)v9;
  }
  else if (v9)
  {
    CFRelease(v9);
  }
  return 0;
}

uint64_t Host_Interface::properties_changed(Host_Interface *this, const AudioServerPlugInHostInterface *a2, unsigned int a3, uint64_t a4, const AudioObjectPropertyAddress *a5)
{
  uint64_t v7 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B0]) initWithBytes:a4 length:12 * a3];
  uint64_t v8 = objc_msgSend(*((id *)this + 5), "driver_properties_changed:properties_data:", a2, v7);

  return v8;
}

void std::__shared_ptr_emplace<Host_Interface>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<Host_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1460190;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<Host_Interface>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1460190;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAB5F7EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string const,HALS_IOEngineInfo const*>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  unint64_t v2 = (void **)**a1;
  if (v2)
  {
    id v4 = (void **)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 9) < 0) {
          operator delete(*(v4 - 4));
        }
        v4 -= 4;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<HALB_CaptureFile>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<HALB_CaptureFile>>,0>(uint64_t a1)
{
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(a1 + 24), 0);
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

unsigned __int8 **std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100](unsigned __int8 ***a1, unsigned __int8 **a2)
{
  id result = *a1;
  *a1 = a2;
  if (result)
  {
    HALB_CaptureFile::~HALB_CaptureFile(result);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

BOOL HALS_DSPCaptureFiles::isDSPCaptureEnabled(HALS_DSPCaptureFiles *this)
{
  v6[0] = 0;
  v6[1] = 0;
  HALS_System::GetInstance(&v7, 0, v6);
  if (v7)
  {
    v3[0] = 0;
    v3[1] = 0;
    HALS_System::GetInstance(&v4, 0, v3);
    BOOL v1 = *(unsigned char *)(v4 + 1465) != 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    BOOL v1 = 0;
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v1;
}

void sub_1BAB5FA04(_Unwind_Exception *exception_object)
{
  mach_port_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_DSPCaptureFiles::CreateDSPCaptureFiles(HALS_IODSPInfo const&,std::optional<float>)::$_0::operator()(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v27[4] = *(uint64_t (**)(void, void, void, void, void))MEMORY[0x1E4F143B8];
  BOOL v6 = a3 != 0;
  long long v7 = *(_OWORD *)(a4 + 72);
  long long v19 = *(_OWORD *)(a4 + 56);
  long long v20 = v7;
  uint64_t v21 = *(void *)(a4 + 88);
  if (*(unsigned char *)(a1 + 4)) {
    *(double *)&long long v19 = *(float *)a1;
  }
  uint64_t v16 = 0;
  id v17 = 0;
  unint64_t v18 = 0;
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(&v16, a5);
  HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>(&v16, (_DWORD *)(a4 + 96));
  uint64_t v8 = v17;
  if ((unint64_t)v17 >= v18)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v17 - v16) >> 3);
    if (v10 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0x999999999999999ALL * ((uint64_t)(v18 - v16) >> 3);
    if (v11 <= v10 + 1) {
      unint64_t v11 = v10 + 1;
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v16) >> 3) >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    id v26 = &v18;
    int v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    mach_port_t v14 = &v13[40 * v10];
    int v22 = (void *(*)(unsigned int, void *, uint64_t, uint64_t, void *))v13;
    BOOL v23 = (BOOL)v14;
    uint64_t v25 = &v13[40 * v15];
    v27[1] = (uint64_t (*)(void, void, void, void, void))v6;
    v27[0] = (uint64_t (*)(void, void, void, void, void))std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    *(_DWORD *)mach_port_t v14 = 6;
    *((void *)v14 + 1) = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    *((void *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v6;
    std::any::reset[abi:ne180100](v27);
    uint64_t v24 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(&v16, &v22);
    CFTypeRef v9 = v17;
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    BOOL v23 = v6;
    int v22 = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    _DWORD *v17 = 6;
    *((void *)v8 + 1) = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
    *((void *)v8 + 2) = 0;
    v8[4] = v6;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v22);
    CFTypeRef v9 = v8 + 10;
  }
  id v17 = v9;
  operator new();
}

void sub_1BAB5FC4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)va1, 0);
  *(void *)(v2 - 88) = va;
  std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 88));
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::pair<std::string const,HALS_IOEngineInfo const*>>::~__split_buffer(uint64_t a1)
{
  mach_port_t v3 = *(void ***)(a1 + 8);
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 4;
      *(void *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v4);
        uint64_t v4 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string const,HALS_IOEngineInfo const*>>,std::reverse_iterator<std::pair<std::string const,HALS_IOEngineInfo const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 16) + 8);
    uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      if (*(char *)(v3 + 23) < 0) {
        operator delete(*(void **)v3);
      }
      v3 += 32;
    }
  }
  return a1;
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v8 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x333333333333333) {
      unint64_t v11 = 0x666666666666666;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v18 = v4;
    if (v11) {
      unint64_t v11 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    unint64_t v14 = v11;
    uint64_t v15 = v11 + 40 * v8;
    unint64_t v17 = v11 + 40 * v12;
    std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(v15, 0, a2);
    uint64_t v16 = v15 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v14);
    uint64_t v7 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(a1[1], 0, a2);
    uint64_t v7 = v6 + 40;
    a1[1] = v6 + 40;
  }
  a1[1] = v7;
  return a1;
}

void sub_1BAB5FE84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)3>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v5)
  {
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - *a1) >> 3);
    if (v9 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x333333333333333) {
      unint64_t v12 = 0x666666666666666;
    }
    else {
      unint64_t v12 = v11;
    }
    int v22 = v4;
    uint64_t v13 = (uint64_t (*)(unsigned int, uint64_t, uint64_t, uint64_t, void *))std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v12);
    unint64_t v14 = (char *)v13 + 40 * v9;
    unint64_t v18 = v13;
    long long v19 = v14;
    uint64_t v21 = (char *)v13 + 40 * v15;
    uint64_t v24 = 0;
    LODWORD(v24) = *a2;
    int v16 = v24;
    BOOL v23 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(_DWORD *)unint64_t v14 = 3;
    *((void *)v14 + 1) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *((void *)v14 + 2) = 0;
    *((_DWORD *)v14 + 4) = v16;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v23);
    long long v20 = v14 + 40;
    std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(a1, &v18);
    uint64_t v8 = a1[1];
    std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer((uint64_t)&v18);
  }
  else
  {
    long long v19 = 0;
    LODWORD(v19) = *a2;
    int v7 = (int)v19;
    unint64_t v18 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(_DWORD *)unint64_t v6 = 3;
    *(void *)(v6 + 8) = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
    *(void *)(v6 + 16) = 0;
    *(_DWORD *)(v6 + 16) = v7;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v18);
    uint64_t v8 = v6 + 40;
  }
  a1[1] = v8;
  return a1;
}

uint64_t **std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void *a2, uint64_t a3)
{
  unint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  int v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        unint64_t v10 = v5 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) == 0) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v8 = v7;
        if (!*v7) {
          goto LABEL_7;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0) {
        return v7;
      }
      uint64_t v8 = v7 + 1;
      unint64_t v5 = v7[1];
      if (!v5) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    uint64_t v11 = operator new(0x40uLL);
    v16[0] = v11;
    v16[1] = v6;
    char v17 = 0;
    unint64_t v12 = (std::string *)(v11 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v11[6] = *(void *)(a3 + 16);
    }
    v11[7] = 0;
    char v17 = 1;
    void *v11 = 0;
    v11[1] = 0;
    _OWORD v11[2] = v7;
    *uint64_t v8 = v11;
    uint64_t v13 = (uint64_t *)**a1;
    unint64_t v14 = v11;
    if (v13)
    {
      *a1 = v13;
      unint64_t v14 = *v8;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v14);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v16[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>>>>::reset[abi:ne180100]((uint64_t)v16);
  }
  return (uint64_t **)v11;
}

void sub_1BAB60154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = v4 - 40;
        std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t (**std::any::reset[abi:ne180100](uint64_t (**result)(void, void, void, void, void)))(void, void, void, void, void)
{
  if (*result) {
    return (uint64_t (**)(void, void, void, void, void))(*result)(0, result, 0, 0, 0);
  }
  return result;
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unique_ptr<HALB_CaptureFile>>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *std::vector<HALB_CaptureFile_NameBuilder::ComponentBase>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      int v8 = *(_DWORD *)(v4 + v7 - 40);
      *(void *)(v6 + v7 - 32) = 0;
      uint64_t v9 = v6 + v7 - 32;
      *(_DWORD *)(v9 - 8) = v8;
      *(void *)(v9 + 8) = 0;
      unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + v7 - 32);
      if (v10) {
        id result = (uint64_t *)v10(2, v4 + v7 - 32);
      }
      v7 -= 40;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v11 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v11;
  uint64_t v12 = v3[1];
  v3[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = v3[2];
  uint64_t v3[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<HALB_CaptureFile_NameBuilder::ComponentBase>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100](unsigned int a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      id result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
      break;
    case 2:
      id result = 0;
      *(_DWORD *)(a3 + 8) = *((_DWORD *)a2 + 2);
      *(void *)a3 = std::__any_imp::_SmallHandler<HALB_CaptureFile_DSPState>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = std::type_info::operator==[abi:ne180100](*(void *)(a4 + 8), (uint64_t)"25HALB_CaptureFile_DSPState");
      }
      else {
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<HALB_CaptureFile_DSPState>::__id;
      }
      if (v8) {
        id result = a2 + 1;
      }
      else {
        id result = 0;
      }
      break;
    case 4:
      return result;
    default:
      id result = 0;
LABEL_5:
      *a2 = 0;
      break;
  }
  return result;
}

uint64_t std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  uint64_t result = MEMORY[0x1E4FBA3B0];
  switch(v5)
  {
    case 1:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
      break;
    case 2:
      uint64_t result = 0;
      *(_DWORD *)(a3 + 8) = *(_DWORD *)(a2 + 8);
      *(void *)a3 = std::__any_imp::_SmallHandler<unsigned int>::__handle[abi:ne180100];
      goto LABEL_5;
    case 3:
      if (a4) {
        BOOL v8 = std::type_info::operator==[abi:ne180100](*(void *)(a4 + 8), *(void *)(MEMORY[0x1E4FBA3B0] + 8));
      }
      else {
        BOOL v8 = a5 == &std::__any_imp::__unique_typeinfo<unsigned int>::__id;
      }
      if (v8) {
        uint64_t result = a2 + 8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      uint64_t result = 0;
LABEL_5:
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t std::construct_at[abi:ne180100]<HALB_CaptureFile_NameBuilder::ComponentBase,HALB_CaptureFile_NameBuilder_Label,std::string const&,HALB_CaptureFile_NameBuilder::ComponentBase*>(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  v8.__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string v8 = *(std::string *)a3;
  }
  uint64_t v7 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  *(_DWORD *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  uint64_t v5 = (std::string *)(a1 + 16);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
    *(void *)(a1 + 32) = *((void *)&v8.__r_.__value_.__l + 2);
  }
  *(void *)(a1 + 8) = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))&v7);
  return a1;
}

void sub_1BAB60650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::any::reset[abi:ne180100]((uint64_t (**)(void, void, void, void, void))va);
  _Unwind_Resume(a1);
}

void *std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100](unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      unint64_t v10 = (std::string *)(a3 + 8);
      if (*(char *)(a2 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
      }
      else
      {
        long long v11 = *(_OWORD *)(a2 + 8);
        *(void *)(a3 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      uint64_t result = 0;
      *(void *)a3 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
      break;
    case 2:
      long long v12 = *(_OWORD *)(a2 + 8);
      *(void *)(a3 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a3 + 8) = v12;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)a3 = std::__any_imp::_SmallHandler<std::string>::__handle[abi:ne180100];
      if ((*(char *)(a2 + 31) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      uint64_t v9 = *(void **)(a2 + 8);
      goto LABEL_8;
    case 3:
      if (a4) {
        BOOL v13 = std::type_info::operator==[abi:ne180100](*(void *)(a4 + 8), 0x80000001BB044F5DLL);
      }
      else {
        BOOL v13 = a5 == &std::__any_imp::__unique_typeinfo<std::string>::__id;
      }
      if (v13) {
        uint64_t result = (void *)(a2 + 8);
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      if (*(char *)(a2 + 31) < 0)
      {
        uint64_t v9 = *(void **)(a2 + 8);
LABEL_8:
        operator delete(v9);
      }
LABEL_9:
      uint64_t result = 0;
      *(void *)a2 = 0;
      break;
  }
  return result;
}

void HALS_DSPCaptureFiles::WriteBufferToCaptureFile(uint64_t a1, unsigned int a2, unsigned int *a3, _OWORD *a4, _OWORD *a5, uint64_t **a6)
{
  long long v6 = a4[1];
  v34[0] = *a4;
  v34[1] = v6;
  long long v7 = a4[3];
  uint64_t v34[2] = a4[2];
  v34[3] = v7;
  long long v8 = a5[1];
  v33[0] = *a5;
  v33[1] = v8;
  long long v9 = a5[3];
  uint64_t v33[2] = a5[2];
  uint64_t v33[3] = v9;
  if (a3)
  {
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = (*(void *)(a1 + 56) - v12) >> 5 >= (unint64_t)*a3 ? *a3 : (*(void *)(a1 + 56) - v12) >> 5;
    if (v13)
    {
      unint64_t v14 = 0;
      uint64_t v15 = a6 + 1;
      do
      {
        uint64_t v16 = *(void *)(a1 + 48);
        if (v14 >= (*(void *)(a1 + 56) - v16) >> 5) {
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v17 = v16 + 32 * v14;
        uint64_t v18 = *(void *)(v17 + 24);
        uint64_t v19 = *(unsigned __int8 *)(v17 + 23);
        if ((v19 & 0x80u) != 0) {
          uint64_t v19 = *(void *)(v17 + 8);
        }
        if (v19) {
          BOOL v20 = v18 == 0;
        }
        else {
          BOOL v20 = 1;
        }
        if (!v20)
        {
          if (*(void *)(v18 + 288))
          {
            if ((*(unsigned int (**)(void))(**(void **)(v18 + 8) + 680))(*(void *)(v18 + 8)))
            {
              uint64_t v21 = *(HALS_IOClock **)(v18 + 288);
              if (*((_DWORD *)v21 + 24))
              {
                double v31 = 0.0;
                v32[0] = 0;
                v32[1] = 0;
                HALS_IOClock::GetRaw0Time(v21, &v31, v32);
                int v22 = &a3[4 * v14];
                uint64_t v23 = *((void *)v22 + 2);
                if (v23)
                {
                  if (v22[3])
                  {
                    uint64_t v24 = (void *)*v15;
                    if (*v15)
                    {
                      uint64_t v25 = v15;
                      do
                      {
                        char v26 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v24 + 4, (void *)v17);
                        if (v26 >= 0) {
                          __int16 v27 = v24;
                        }
                        else {
                          __int16 v27 = v24 + 1;
                        }
                        if (v26 >= 0) {
                          uint64_t v25 = v24;
                        }
                        uint64_t v24 = (void *)*v27;
                      }
                      while (*v27);
                      if (v25 != v15
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v17, v25 + 4) & 0x80) == 0)
                      {
                        int v28 = std::__tree<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::__map_value_compare<std::string const,std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>,std::less<std::string const>,true>,std::allocator<std::__value_type<std::string const,std::unique_ptr<HALB_CaptureFile>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a6, (void *)v17, v17);
                        HALB_CaptureFile::Write((atomic_uint *)v28[7], (uint64_t)v34, (double *)v33, (uint64_t)&v31, a2, v23);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v14;
      }
      while (v14 != v13);
    }
  }
}

void ResamplerInitLocker::~ResamplerInitLocker(ResamplerInitLocker *this)
{
}

void non-virtual thunk to'HALS_IOUAControl::~HALS_IOUAControl(HALS_IOUAControl *this, HALS_Object *a2)
{
}

{
  HALS_Control *v2;
  uint64_t vars8;

  uint64_t v2 = (HALS_IOUAControl *)((char *)this - 72);
  HALS_IOUAObject::~HALS_IOUAObject(this, a2);

  HALS_Control::~HALS_Control(v2);
}

void HALS_IOUAControl::~HALS_IOUAControl(HALS_IOUAControl *this, HALS_Object *a2)
{
  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUAControl *)((char *)this + 72), a2);
  HALS_Control::~HALS_Control(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  HALS_IOUAObject::~HALS_IOUAObject((HALS_IOUAControl *)((char *)this + 72), a2);

  HALS_Control::~HALS_Control(this);
}

BOOL HALS_IOUAControl::GetHardwareReferenceStreamControlValue(HALS_IOUAControl *this, const HALS_Client *a2)
{
  unint64_t v7 = 4;
  int outputStruct = 0;
  uint64_t v2 = *((void *)this + 10);
  uint64_t v3 = *(void *)(v2 + 792);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 800);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v3 + 4), (const AudioObjectPropertyAddress *)"lvcbbolg", *((_DWORD *)this + 22), 0, 0, &outputStruct, &v7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return outputStruct != 0;
}

void sub_1BAB60ABC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAControl::SetHardwareReferenceStreamControlValue(HALS_IOUAControl *this, HALS_Client *a2, int a3)
{
  int v7 = a3;
  uint64_t v4 = *((void *)this + 10);
  uint64_t v5 = *(HALS_IOUAUCDriver **)(v4 + 792);
  long long v6 = *(std::__shared_weak_count **)(v4 + 800);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  HALS_IOUAUCDriver::SetPropertyData(v5, (const AudioObjectPropertyAddress *)"lvcbbolg", *((_DWORD *)this + 22), 0, 0, &v7, 4uLL);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1BAB60B48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOUAControl::SetPropertyData(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, uint64_t a4, const AudioObjectPropertyAddress *a5, uint64_t a6, CFTypeRef *a7, HALS_Client *a8)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  size_t v16 = a4;
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1818457189)
  {
    if (mSelector > 1935962741)
    {
      if (mSelector == 1936745334)
      {
        uint64_t v29 = *((void *)this + 10);
        uint64_t v19 = *(HALS_IOUAUCDriver **)(v29 + 792);
        BOOL v20 = *(std::__shared_weak_count **)(v29 + 800);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_35;
      }
      if (mSelector == 1935962742)
      {
        uint64_t v23 = *((void *)this + 10);
        uint64_t v19 = *(HALS_IOUAUCDriver **)(v23 + 792);
        BOOL v20 = *(std::__shared_weak_count **)(v23 + 800);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (mSelector == 1818457190)
      {
        uint64_t v27 = *((void *)this + 10);
        uint64_t v19 = *(HALS_IOUAUCDriver **)(v27 + 792);
        BOOL v20 = *(std::__shared_weak_count **)(v27 + 800);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_35;
      }
      if (mSelector == 1935893353)
      {
        uint64_t v21 = *((void *)this + 10);
        uint64_t v19 = *(HALS_IOUAUCDriver **)(v21 + 792);
        BOOL v20 = *(std::__shared_weak_count **)(v21 + 800);
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_35;
      }
    }
LABEL_39:
    if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
    {
      HALS_Control::SetPropertyData((uint64_t)this, a2, (int *)a3, a4, (uint64_t)a5, a6, (uint64_t)a7, (uint64_t)a8);
    }
    else
    {
      HALS_IOUAObject::SetPropertyData((HALS_IOUAControl *)((char *)this + 72), &a3->mSelector, a5, a7, v30, v31, v32, v33);
    }
    return;
  }
  if (mSelector > 1818453109)
  {
    if (mSelector == 1818453110)
    {
      uint64_t v28 = *((void *)this + 10);
      uint64_t v19 = *(HALS_IOUAUCDriver **)(v28 + 792);
      BOOL v20 = *(std::__shared_weak_count **)(v28 + 800);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_35;
    }
    if (mSelector == 1818456950)
    {
      uint64_t v22 = *((void *)this + 10);
      uint64_t v19 = *(HALS_IOUAUCDriver **)(v22 + 792);
      BOOL v20 = *(std::__shared_weak_count **)(v22 + 800);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_35;
    }
    goto LABEL_39;
  }
  if (mSelector != 1650685548)
  {
    if (mSelector == 1651272546)
    {
      uint64_t v18 = *((void *)this + 10);
      uint64_t v19 = *(HALS_IOUAUCDriver **)(v18 + 792);
      BOOL v20 = *(std::__shared_weak_count **)(v18 + 800);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
LABEL_35:
      HALS_IOUAUCDriver::SetPropertyData(v19, a3, *((_DWORD *)this + 22), a7, a6, a5, a4);
      if (v20)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      return;
    }
    goto LABEL_39;
  }
  if (!a4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v38 = 136315394;
      uint64_t v39 = "HALS_IOUAControl.cpp";
      __int16 v40 = 1024;
      int v41 = 303;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAControl::SetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", (uint8_t *)&v38, 0x12u);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "kAudioHardwareBadPropertySizeError");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  AudioObjectPropertySelector v24 = a5->mSelector;
  uint64_t v25 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)this + 14));
  if (*((_DWORD *)this + 5) == 1702259059)
  {
    HALS_ReferenceStreamControlPropertyHandler::SetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((void *)this + 8) + 8), a8, v24 != 0);
  }
  else
  {
    uint64_t v34 = *((void *)this + 10);
    unint64_t v35 = *(HALS_IOUAUCDriver **)(v34 + 792);
    uint64_t v36 = *(std::__shared_weak_count **)(v34 + 800);
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    HALS_IOUAUCDriver::SetPropertyData(v35, a3, *((_DWORD *)this + 22), a7, a6, a5, v16);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
  HALS_ObjectMap::ReleaseObject(v25, v26);
}

void sub_1BAB610A0(_Unwind_Exception *a1, HALS_Object *a2)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  HALS_ObjectMap::ReleaseObject(v3, a2);
  _Unwind_Resume(a1);
}

void HALS_IOUAControl::GetPropertyData(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, AudioObjectPropertyAddress *a5, char *a6, unsigned int a7, _DWORD *a8, HALS_Client *a9)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector <= 1818457189)
  {
    if (mSelector <= 1818453105)
    {
      if (mSelector <= 1651272547)
      {
        if (mSelector != 1650685548)
        {
          int v31 = 1651272546;
LABEL_50:
          if (mSelector != v31) {
            goto LABEL_87;
          }
          goto LABEL_51;
        }
        if (!a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)CFTypeRef cf = 136315394;
            *(void *)&cf[4] = "HALS_IOUAControl.cpp";
            __int16 v49 = 1024;
            int v50 = 216;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOUAControl::GetPropertyData: bad property data size for kAudioBooleanControlPropertyValue", cf, 0x12u);
          }
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "kAudioHardwareBadPropertySizeError");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        if (*((_DWORD *)this + 5) != 1702259059)
        {
          *(void *)CFTypeRef cf = a4;
          uint64_t v45 = *((void *)this + 10);
          uint64_t v29 = *(void *)(v45 + 792);
          uint64_t v30 = *(std::__shared_weak_count **)(v45 + 800);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_64;
        }
        *(_DWORD *)a6 = HALS_ReferenceStreamControlPropertyHandler::GetReferenceStreamControlPropertyData(*(HALS_ReferenceStreamControlPropertyHandler **)(*((void *)this + 8) + 8), a9);
        unsigned int v26 = 4;
      }
      else
      {
        if (mSelector == 1651272548) {
          goto LABEL_51;
        }
        if (mSelector == 1668049771)
        {
          *(void *)CFTypeRef cf = a4;
          uint64_t v40 = *((void *)this + 10);
          uint64_t v29 = *(void *)(v40 + 792);
          uint64_t v30 = *(std::__shared_weak_count **)(v40 + 800);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          goto LABEL_64;
        }
        if (mSelector != 1668641652) {
          goto LABEL_87;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 2) >= a4 / 0xCuLL) {
          unint64_t v19 = a4 / 0xCuLL;
        }
        else {
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 13) - *((void *)this + 12)) >> 2);
        }
        if (v19)
        {
          uint64_t v20 = 0;
          unint64_t v21 = 0;
          do
          {
            uint64_t v22 = *((void *)this + 12);
            if (0xAAAAAAAAAAAAAAABLL * ((*((void *)this + 13) - v22) >> 2) > v21)
            {
              uint64_t v23 = &a6[v20];
              AudioObjectPropertySelector v24 = (uint64_t *)(v22 + v20);
              uint64_t v25 = *v24;
              *((_DWORD *)v23 + 2) = *((_DWORD *)v24 + 2);
              *(void *)uint64_t v23 = v25;
            }
            ++v21;
            v20 += 12;
          }
          while (12 * v19 != v20);
        }
        unsigned int v26 = 12 * v19;
      }
      a5->signed int mSelector = v26;
      return;
    }
    if (mSelector <= 1818453109)
    {
      if (mSelector != 1818453106)
      {
        if (mSelector != 1818453107) {
          goto LABEL_87;
        }
        if (a4 >= 4 && a7 >= 4) {
          *(_DWORD *)a6 = *a8;
        }
        *(void *)CFTypeRef cf = a4;
        uint64_t v36 = *((void *)this + 10);
        uint64_t v29 = *(void *)(v36 + 792);
        uint64_t v30 = *(std::__shared_weak_count **)(v36 + 800);
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_64;
      }
      goto LABEL_62;
    }
    if (mSelector != 1818453110)
    {
      if (mSelector == 1818456932)
      {
        if (a4 >= 4 && a7 >= 4) {
          *(_DWORD *)a6 = *a8;
        }
        *(void *)CFTypeRef cf = a4;
        uint64_t v41 = *((void *)this + 10);
        uint64_t v29 = *(void *)(v41 + 792);
        uint64_t v30 = *(std::__shared_weak_count **)(v41 + 800);
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_64;
      }
      int v18 = 1818456950;
      goto LABEL_34;
    }
LABEL_62:
    *(void *)CFTypeRef cf = a4;
    uint64_t v37 = *((void *)this + 10);
    uint64_t v29 = *(void *)(v37 + 792);
    uint64_t v30 = *(std::__shared_weak_count **)(v37 + 800);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
LABEL_64:
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v29 + 4), a3, *((_DWORD *)this + 22), a8, a7, a6, (unint64_t *)cf);
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    a5->signed int mSelector = *(_DWORD *)cf;
    return;
  }
  if (mSelector <= 1935893352)
  {
    if (mSelector <= 1851878763)
    {
      if (mSelector == 1818457190)
      {
        *(void *)CFTypeRef cf = a4;
        uint64_t v39 = *((void *)this + 10);
        uint64_t v29 = *(void *)(v39 + 792);
        uint64_t v30 = *(std::__shared_weak_count **)(v39 + 800);
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        goto LABEL_64;
      }
      if (mSelector != 1819173229) {
        goto LABEL_87;
      }
    }
    else if (mSelector != 1851878764 && mSelector != 1852400499)
    {
      if (mSelector != 1935892841) {
        goto LABEL_87;
      }
      *(void *)CFTypeRef cf = a4;
      uint64_t v28 = *((void *)this + 10);
      uint64_t v29 = *(void *)(v28 + 792);
      uint64_t v30 = *(std::__shared_weak_count **)(v28 + 800);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_64;
    }
    goto LABEL_41;
  }
  if (mSelector > 1935962741)
  {
    if (mSelector != 1935962742)
    {
      if (mSelector != 1936745315)
      {
        int v31 = 1936745334;
        goto LABEL_50;
      }
LABEL_51:
      *(void *)CFTypeRef cf = a4;
      uint64_t v35 = *((void *)this + 10);
      uint64_t v29 = *(void *)(v35 + 792);
      uint64_t v30 = *(std::__shared_weak_count **)(v35 + 800);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_64;
    }
    goto LABEL_62;
  }
  if (mSelector == 1935893353)
  {
    *(void *)CFTypeRef cf = a4;
    uint64_t v38 = *((void *)this + 10);
    uint64_t v29 = *(void *)(v38 + 792);
    uint64_t v30 = *(std::__shared_weak_count **)(v38 + 800);
    if (v30) {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_64;
  }
  if (mSelector != 1935894894)
  {
    int v18 = 1935962738;
LABEL_34:
    if (mSelector != v18)
    {
LABEL_87:
      if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
      {
        HALS_Control::GetPropertyData((uint64_t)this, a2, a3, a4, &a5->mSelector, (uint64_t *)a6, a7, a8, a9);
      }
      else
      {
        HALS_IOUAObject::GetPropertyData((HALS_IOUAControl *)((char *)this + 72), &a3->mSelector, a5, (AMCP::Log::Scope_Registry **)a6, a8, v42, v43, v44, a9);
      }
      return;
    }
    goto LABEL_62;
  }
LABEL_41:
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)CFTypeRef cf = 136315394;
      *(void *)&cf[4] = "HALS_IOUAControl.cpp";
      __int16 v49 = 1024;
      int v50 = 151;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PlugInControl::GetPropertyData: bad property data size for kAudioObjectPropertyName", cf, 0x12u);
    }
    uint64_t v46 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v46, "kAudioHardwareBadPropertySizeError");
    __cxa_throw(v46, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v32 = *((void *)this + 10);
  uint64_t v33 = *(void *)(v32 + 792);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 + 800);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)&long long v53 = *((unsigned int *)this + 22);
  *((void *)&v53 + 1) = *(void *)&a3->mSelector;
  HALS_IOUAUCDriver::get_string_property((HALS_IOUAUCDriver *)cf, v33, v53, (void *)a3->mElement, a8, a7);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  *(void *)a6 = CFRetain(*(CFTypeRef *)cf);
  a5->signed int mSelector = 8;
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
}

void sub_1BAB61990(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAControl::GetPropertyDataSize(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, unsigned int a4, const void *a5, HALS_Client *a6)
{
  AudioObjectPropertySelector mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1935892840)
  {
    if (mSelector != 1935893353 && mSelector != 1935892841) {
      goto LABEL_15;
    }
LABEL_10:
    uint64_t v12 = *((void *)this + 10);
    uint64_t v13 = *(void *)(v12 + 792);
    unint64_t v14 = *(std::__shared_weak_count **)(v12 + 800);
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t PropertySize = HALS_IOUAUCDriver::GetPropertySize((HALS_IOUAUCDriver *)*(unsigned int *)(v13 + 4), a3, *((_DWORD *)this + 22), a5, a4);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    return PropertySize;
  }
  if (mSelector == 1651272546) {
    goto LABEL_10;
  }
  if (mSelector == 1668641652) {
    return 96;
  }
LABEL_15:
  if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    return HALS_Control::GetPropertyDataSize((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::GetPropertyDataSize((HALS_IOUAControl *)((char *)this + 72), a3, v16, v17, v18, v19);
  }
}

void sub_1BAB61B6C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAControl::IsPropertySettable(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  if (a3->mSelector == 1668641652) {
    return 0;
  }
  if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3))
  {
    return HALS_Control::IsPropertySettable((uint64_t)this, a2, (int *)a3);
  }
  else
  {
    return HALS_IOUAObject::IsPropertySettable((HALS_IOUAControl *)((char *)this + 72), a3, v8, v9);
  }
}

uint64_t HALS_IOUAControl::HasProperty(HALS_IOUAControl *this, uint64_t a2, AudioObjectPropertyAddress *a3, HALS_Client *a4)
{
  uint64_t mSelector = a3->mSelector;
  if (mSelector == 1668641652) {
    return *((void *)this + 13) != *((void *)this + 12);
  }
  if (mSelector == 1851878764 || mSelector == 1819173229)
  {
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = *(void *)(v7 + 792);
    long long v9 = *(std::__shared_weak_count **)(v7 + 800);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL HasProperty = HALS_IOUAUCDriver::GetHasProperty((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), a3, *((_DWORD *)this + 22));
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    return HasProperty;
  }
  if (HALS_Control::HasProperty((uint64_t)this, a2, (int *)a3)) {
    return 1;
  }
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t))(*((void *)this + 9) + 16);

  return v12((char *)this + 72, mSelector);
}

void sub_1BAB61D2C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOUAControl::_Deactivate(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  return this;
}

void HALS_IOUAControl::Activate(HALS_IOUAControl *this)
{
  HALS_IOUAControl::RefreshCache(this);
  if (!*((_DWORD *)this + 15)) {
    (*(void (**)(void))(*((void *)this + 9) + 24))();
  }

  HALS_Object::Activate(this, v2);
}

BOOL HALS_IOUAControl::RefreshCache(HALS_IOUAControl *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (*((_DWORD *)this + 15) == 1)
  {
    int v2 = 0;
    int v3 = 1702259059;
    int v4 = 1650685548;
    int v5 = 1869968496;
  }
  else
  {
    unsigned int v6 = *((_DWORD *)this + 22);
    uint64_t v7 = *((void *)this + 10);
    uint64_t v8 = *(void *)(v7 + 792);
    long long v9 = *(std::__shared_weak_count **)(v7 + 800);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int outputStruct = 0;
    unint64_t v27 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v8 + 4), (const AudioObjectPropertyAddress *)"salcbolg", v6, 0, 0, &outputStruct, &v27);
    int v3 = outputStruct;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    uint64_t v10 = *((void *)this + 10);
    uint64_t v11 = *(void *)(v10 + 792);
    uint64_t v12 = *(std::__shared_weak_count **)(v10 + 800);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int outputStruct = 0;
    unint64_t v27 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v11 + 4), (const AudioObjectPropertyAddress *)"slcbbolg", v6, 0, 0, &outputStruct, &v27);
    int v4 = outputStruct;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    uint64_t v13 = *((void *)this + 10);
    uint64_t v14 = *(void *)(v13 + 792);
    uint64_t v15 = *(std::__shared_weak_count **)(v13 + 800);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int outputStruct = 0;
    unint64_t v27 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v14 + 4), (const AudioObjectPropertyAddress *)"pcscbolg", v6, 0, 0, &outputStruct, &v27);
    int v5 = outputStruct;
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    uint64_t v16 = *((void *)this + 10);
    uint64_t v17 = *(void *)(v16 + 792);
    int v18 = *(std::__shared_weak_count **)(v16 + 800);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int outputStruct = 0;
    unint64_t v27 = 4;
    HALS_IOUAUCDriver::GetPropertyData((HALS_IOUAUCDriver *)*(unsigned int *)(v17 + 4), (const AudioObjectPropertyAddress *)"mlecbolg", v6, 0, 0, &outputStruct, &v27);
    int v2 = outputStruct;
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  char v32 = 0;
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 0x40000000;
  uint64_t v22[2] = ___ZN16HALS_IOUAControl12RefreshCacheEv_block_invoke;
  void v22[3] = &unk_1E6230B28;
  v22[4] = &v29;
  v22[5] = this;
  int v23 = v3;
  int v24 = v4;
  int v25 = v5;
  int v26 = v2;
  unint64_t v19 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOUAControl *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v19, (uint64_t)v22);
  BOOL v20 = *((unsigned char *)v30 + 24) != 0;
  _Block_object_dispose(&v29, 8);
  return v20;
}

void sub_1BAB620AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, NSObject **buf, long long a20)
{
  if (a2)
  {
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    uint64_t v22 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v22);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v23 = *buf;
    if ((void)a20) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a20);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      int v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      LODWORD(buf) = 67109634;
      HIDWORD(buf) = v25;
      LOWORD(a20) = 2080;
      *(void *)((char *)&a20 + 2) = "HALS_IOUAControl.cpp";
      WORD5(a20) = 1024;
      HIDWORD(a20) = 383;
      _os_log_debug_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Caught exception refreshing the control", (uint8_t *)&buf, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAB62074);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN16HALS_IOUAControl12RefreshCacheEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(_DWORD **)(result + 40);
  int v2 = *(_DWORD *)(result + 48);
  if (v1[5] != v2)
  {
    v1[5] = v2;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  int v3 = *(_DWORD *)(result + 52);
  if (v1[6] != v3)
  {
    v1[6] = v3;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  int v4 = *(_DWORD *)(result + 56);
  if (v1[12] != v4)
  {
    v1[12] = v4;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  int v5 = *(_DWORD *)(result + 60);
  if (v1[13] != v5)
  {
    v1[13] = v5;
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void HALS_IOUAControl::HALS_IOUAControl(HALS_Object *a1, int a2, uint64_t a3, int a4, int a5, int a6, HALS_Object *a7, int a8, int a9)
{
}

void sub_1BAB622F0(_Unwind_Exception *a1)
{
  HALS_Control::~HALS_Control(v1);
  _Unwind_Resume(a1);
}

void std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = *((void *)v4 - 2);
        if (v6) {
          MEMORY[0x1C1859810](v6, 0x1000C8077774924);
        }
        uint64_t v7 = *((void *)v4 - 4);
        if (v7) {
          MEMORY[0x1C1859810](v7, 0x1000C8077774924);
        }
        v4 -= 48;
      }
      while (v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*a1);
    std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(a1[1]);
    HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)(a1 + 6));
    operator delete(a1);
  }
}

void HALS_DeviceState::Value::~Value(HALS_DeviceState::Value *this)
{
  OS::CF::UntypedObject::~UntypedObject((HALS_DeviceState::Value *)((char *)this + 88));
  int v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
}

void HALS_DeviceState::InitializeStandardPropertiesToCapture(HALS_DeviceState *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAB62828(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    HALS_DeviceState::sStandardDevicePropertiesToCapture = 0;
    __cxa_end_catch();
    JUMPOUT(0x1BAB6278CLL);
  }
  _Unwind_Resume(a1);
}

void HALS_DeviceState::HALS_DeviceState(HALS_DeviceState *this)
{
  *(_DWORD *)this = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 1) = (char *)this + 16;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  pthread_once(&HALS_DeviceState::sPropertiesToCaptureInitialized, (void (*)(void))HALS_DeviceState::InitializeStandardPropertiesToCapture);
}

void sub_1BAB628B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*v2);
  _Unwind_Resume(a1);
}

void HALS_DeviceState::~HALS_DeviceState(HALS_DeviceState *this)
{
  int v2 = (void **)((char *)this + 32);
  std::vector<HALS_DeviceState::ControlState>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((void **)this + 2));
}

void HALS_DeviceState::Capture(HALS_DeviceState *this, HALS_Device *a2, const CAPropertyAddressList *a3, const CAPropertyAddressList *a4)
{
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)this = *((_DWORD *)a2 + 4);
  uint64_t v7 = (void *)((char *)this + 16);
  std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::destroy(*((void **)this + 2));
  *((void *)this + 1) = v7;
  *uint64_t v7 = 0;
  uint64_t v62 = (uint64_t **)((char *)this + 8);
  *((void *)this + 3) = 0;
  uint64_t v9 = *(void *)a3;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 2);
  if (v10)
  {
    uint64_t v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = MEMORY[0x1E4F14500];
    do
    {
      int v14 = 0;
      int v15 = 0;
      uint64_t v16 = 0;
      LODWORD(v83) = 0;
      int v82 = 0;
      if (v10 > v12)
      {
        uint64_t v17 = v9 + v11;
        int v14 = *(_DWORD *)(v17 + 8);
        uint64_t v16 = *(char **)v17;
        int v82 = *(char **)v17;
        LODWORD(v83) = v14;
        int v15 = HIDWORD(v82);
      }
      if ((v16 == 707406378 || v15 == 707406378 || v14 == -1) && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
        uint64_t v95 = "HALS_DeviceState.cpp";
        LOWORD(v96[0]) = 1024;
        *(_DWORD *)((char *)v96 + 2) = 72;
        _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceState::Capture: properties with a wildcard are not supported", buf, 0x12u);
        uint64_t v16 = (char *)v82;
      }
      if (HALB_Info::GetPropertyQualifierDataType((HALB_Info *)v16, 0, v8)
        && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
        uint64_t v95 = "HALS_DeviceState.cpp";
        LOWORD(v96[0]) = 1024;
        *(_DWORD *)((char *)v96 + 2) = 73;
        _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceState::Capture: properties with a qualifier are not supported", buf, 0x12u);
        uint64_t v16 = (char *)v82;
      }
      if (HALB_Info::IsAVTProperty((HALB_Info *)v16) && os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 136315394;
        uint64_t v95 = "HALS_DeviceState.cpp";
        LOWORD(v96[0]) = 1024;
        *(_DWORD *)((char *)v96 + 2) = 74;
        _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_DeviceState::Capture: properties that use an AVT are not supported", buf, 0x12u);
        uint64_t v16 = (char *)v82;
      }
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v73 = 0u;
      uint64_t v78 = &unk_1F1489918;
      unint64_t v79 = 0;
      int PropertyDataType = HALB_Info::GetPropertyDataType((HALB_Info *)v16, 0, v18);
      int v72 = PropertyDataType;
      if (PropertyDataType <= 1718367025)
      {
        if (PropertyDataType != 1634951780)
        {
          if (PropertyDataType == 1667658612 || PropertyDataType == 1668641388)
          {
LABEL_30:
            if ((*(unsigned int (**)(HALS_Device *, void, char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
            {
              uint64_t v22 = *((unsigned int *)a2 + 4);
              uint64_t v71 = 0;
              int v70 = 0;
              (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, const void **, void, void, void))(*(void *)a2 + 112))(a2, v22, &v82, 8, &v70, &v71, 0, 0, 0);
              int v23 = v79;
              unint64_t v79 = v71;
              if (v23) {
                CFRelease(v23);
              }
              goto LABEL_46;
            }
            goto LABEL_47;
          }
LABEL_37:
          if ((*(unsigned int (**)(HALS_Device *, void, char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
          {
            int v72 = 1918990199;
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
            uint64_t v26 = (*(uint64_t (**)(HALS_Device *, void, char **, void, void, void))(*(void *)a2 + 104))(a2, *((unsigned int *)a2 + 4), &v82, 0, 0, 0);
            uint64_t v27 = v26;
            *(_DWORD *)os_workgroup_interval_data_opaque_s buf = v26;
            uint64_t v28 = v73;
            if ((unint64_t)v26 <= *((void *)&v73 + 1) - (void)v73)
            {
              if ((unint64_t)v26 < *((void *)&v73 + 1) - (void)v73) {
                *((void *)&v73 + 1) = v73 + v26;
              }
            }
            else
            {
              std::vector<unsigned char>::__append((unint64_t *)&v73, v26 - (*((void *)&v73 + 1) - v73));
              uint64_t v27 = *(unsigned int *)buf;
              uint64_t v28 = v73;
            }
            (*(void (**)(HALS_Device *, void, char **, uint64_t, uint8_t *, uint64_t, void, void, void))(*(void *)a2 + 112))(a2, *((unsigned int *)a2 + 4), &v82, v27, buf, v28, 0, 0, 0);
            if ((unint64_t)*(unsigned int *)buf <= *((void *)&v73 + 1) - (void)v73)
            {
              if ((unint64_t)*(unsigned int *)buf < *((void *)&v73 + 1) - (void)v73) {
                *((void *)&v73 + 1) = v73 + *(unsigned int *)buf;
              }
            }
            else
            {
              std::vector<unsigned char>::__append((unint64_t *)&v73, *(unsigned int *)buf - (*((void *)&v73 + 1) - v73));
            }
            goto LABEL_46;
          }
          goto LABEL_47;
        }
        if ((*(unsigned int (**)(HALS_Device *, void, char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          uint64_t v25 = *((unsigned int *)a2 + 4);
          int v69 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, char *, void, void, void))(*(void *)a2 + 112))(a2, v25, &v82, 40, &v69, (char *)&v75 + 8, 0, 0, 0);
          goto LABEL_46;
        }
      }
      else if (PropertyDataType > 1886155635)
      {
        if (PropertyDataType == 1886155636) {
          goto LABEL_30;
        }
        if (PropertyDataType != 1969828658) {
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(HALS_Device *, void, char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          uint64_t v21 = *((unsigned int *)a2 + 4);
          int v63 = 0;
          int v64 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, int *, void, void, void))(*(void *)a2 + 112))(a2, v21, &v82, 4, &v63, &v64, 0, 0, 0);
          DWORD2(v74) = v64;
          goto LABEL_46;
        }
      }
      else if (PropertyDataType == 1718367026)
      {
        if ((*(unsigned int (**)(HALS_Device *, void, char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          uint64_t v24 = *((unsigned int *)a2 + 4);
          int v65 = 0;
          int v66 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, int *, void, void, void))(*(void *)a2 + 112))(a2, v24, &v82, 4, &v65, &v66, 0, 0, 0);
          HIDWORD(v74) = v66;
          goto LABEL_46;
        }
      }
      else
      {
        if (PropertyDataType != 1718367796) {
          goto LABEL_37;
        }
        if ((*(unsigned int (**)(HALS_Device *, void, char **, void))(*(void *)a2 + 88))(a2, *((unsigned int *)a2 + 4), &v82, 0))
        {
          uint64_t v20 = *((unsigned int *)a2 + 4);
          uint64_t v68 = 0;
          int v67 = 0;
          (*(void (**)(HALS_Device *, uint64_t, char **, uint64_t, int *, uint64_t *, void, void, void))(*(void *)a2 + 112))(a2, v20, &v82, 8, &v67, &v68, 0, 0, 0);
          *(void *)&long long v75 = v68;
LABEL_46:
          *(_DWORD *)os_workgroup_interval_data_opaque_s buf = *((_DWORD *)a2 + 4);
          uint64_t v95 = v82;
          v96[0] = v83;
          HALS_DeviceState::Value::Value((HALS_DeviceState::Value *)&v96[1], (const HALS_DeviceState::Value *)&v72);
          std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::__emplace_unique_key_args<HALS_DeviceState::Key,std::pair<HALS_DeviceState::Key const,HALS_DeviceState::Value>>(v62, buf, (uint64_t)buf);
          HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v96[1]);
        }
      }
LABEL_47:
      HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v72);
      ++v12;
      uint64_t v9 = *(void *)a3;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a3 + 1) - *(void *)a3) >> 2);
      v11 += 12;
      uint64_t v13 = MEMORY[0x1E4F14500];
    }
    while (v12 < v10);
  }
  char v29 = 0;
  char v30 = 1;
  do
  {
    char v31 = v30;
    int v82 = 0;
    uint64_t v83 = 0;
    uint64_t v84 = 0;
    HALS_Device::CopyStreamList((uint64_t)a2, v29 & 1, &v82);
    uint64_t v34 = (HALS_ObjectMap **)v82;
    mach_port_t v61 = v83;
    if (v82 == v83) {
      goto LABEL_92;
    }
    char v59 = v31;
    do
    {
      uint64_t v35 = *(void *)a4;
      unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 2);
      if (v36)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0;
        do
        {
          uint64_t v80 = 0x676C6F6200000000;
          int v81 = 0;
          if (v36 <= v38)
          {
            int v40 = 0;
            uint64_t v41 = 0;
            int v42 = 1735159650;
          }
          else
          {
            uint64_t v39 = (HALB_Info **)(v35 + v37);
            int v40 = *(_DWORD *)(v35 + v37 + 8);
            uint64_t v41 = *v39;
            uint64_t v80 = (uint64_t)*v39;
            int v81 = v40;
            int v42 = HIDWORD(v80);
          }
          if (v41 == 707406378 || v42 == 707406378 || v40 == -1) {
            goto LABEL_89;
          }
          long long v76 = 0u;
          long long v77 = 0u;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v73 = 0u;
          uint64_t v78 = &unk_1F1489918;
          unint64_t v79 = 0;
          int v43 = HALB_Info::GetPropertyDataType(v41, 0, v33);
          int v72 = v43;
          if (v43 <= 1718367025)
          {
            if (v43 != 1634951780)
            {
              if (v43 == 1667658612 || v43 == 1668641388)
              {
LABEL_73:
                if ((*(unsigned int (**)(HALS_ObjectMap *, void, uint64_t *, void))(*(void *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
                {
                  __int16 v49 = *v34;
                  uint64_t v50 = *((unsigned int *)*v34 + 4);
                  int v93 = 0;
                  int v92 = 0;
                  (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, const void **, void, void, void))(*(void *)v49 + 112))(v49, v50, &v80, 8, &v92, &v93, 0, 0, 0);
                  uint64_t v51 = v79;
                  unint64_t v79 = v93;
                  if (v51) {
                    CFRelease(v51);
                  }
                  goto LABEL_87;
                }
                goto LABEL_88;
              }
              goto LABEL_78;
            }
            if ((*(unsigned int (**)(HALS_ObjectMap *, void, uint64_t *, void))(*(void *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
            {
              unint64_t v52 = *v34;
              uint64_t v53 = *((unsigned int *)*v34 + 4);
              int v91 = 0;
              (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, char *, void, void, void))(*(void *)v52 + 112))(v52, v53, &v80, 40, &v91, (char *)&v75 + 8, 0, 0, 0);
              goto LABEL_87;
            }
          }
          else if (v43 > 1886155635)
          {
            if (v43 == 1886155636) {
              goto LABEL_73;
            }
            if (v43 != 1969828658) {
              goto LABEL_78;
            }
            if ((*(unsigned int (**)(HALS_ObjectMap *, void, uint64_t *, void))(*(void *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
            {
              uint64_t v47 = *v34;
              uint64_t v48 = *((unsigned int *)*v34 + 4);
              int v86 = 0;
              int v85 = 0;
              (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)v47 + 112))(v47, v48, &v80, 4, &v85, &v86, 0, 0, 0);
              DWORD2(v74) = v86;
              goto LABEL_87;
            }
          }
          else
          {
            if (v43 != 1718367026)
            {
              if (v43 == 1718367796)
              {
                if ((*(unsigned int (**)(HALS_ObjectMap *, void, uint64_t *, void))(*(void *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
                {
                  uint64_t v44 = *v34;
                  uint64_t v45 = *((unsigned int *)*v34 + 4);
                  uint64_t v90 = 0;
                  int v89 = 0;
                  (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, void, void, void))(*(void *)v44 + 112))(v44, v45, &v80, 8, &v89, &v90, 0, 0, 0);
                  uint64_t v46 = v90;
                  goto LABEL_83;
                }
                goto LABEL_88;
              }
LABEL_78:
              if ((*(unsigned int (**)(HALS_ObjectMap *, void, uint64_t *, void))(*(void *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
              {
                int v72 = 1918990199;
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 0;
                uint64_t v54 = (*(uint64_t (**)(HALS_ObjectMap *, void, uint64_t *, void, void, void))(*(void *)*v34 + 104))(*v34, *((unsigned int *)*v34 + 4), &v80, 0, 0, 0);
                uint64_t v55 = v54;
                *(_DWORD *)os_workgroup_interval_data_opaque_s buf = v54;
                uint64_t v56 = v73;
                if ((unint64_t)v54 <= *((void *)&v73 + 1) - (void)v73)
                {
                  if ((unint64_t)v54 < *((void *)&v73 + 1) - (void)v73) {
                    *((void *)&v73 + 1) = v73 + v54;
                  }
                }
                else
                {
                  std::vector<unsigned char>::__append((unint64_t *)&v73, v54 - (*((void *)&v73 + 1) - v73));
                  uint64_t v55 = *(unsigned int *)buf;
                  uint64_t v56 = v73;
                }
                (*(void (**)(HALS_ObjectMap *, void, uint64_t *, uint64_t, uint8_t *, uint64_t, void, void, void))(*(void *)*v34 + 112))(*v34, *((unsigned int *)*v34 + 4), &v80, v55, buf, v56, 0, 0, 0);
                goto LABEL_87;
              }
              goto LABEL_88;
            }
            if ((*(unsigned int (**)(HALS_ObjectMap *, void, uint64_t *, void))(*(void *)*v34 + 88))(*v34, *((unsigned int *)*v34 + 4), &v80, 0))
            {
              CFStringRef v57 = *v34;
              uint64_t v58 = *((unsigned int *)*v34 + 4);
              uint64_t v88 = 0;
              int v87 = 0;
              (*(void (**)(HALS_ObjectMap *, uint64_t, uint64_t *, uint64_t, int *, uint64_t *, void, void, void))(*(void *)v57 + 112))(v57, v58, &v80, 8, &v87, &v88, 0, 0, 0);
              uint64_t v46 = v88;
LABEL_83:
              *(void *)&long long v75 = v46;
LABEL_87:
              *(_DWORD *)os_workgroup_interval_data_opaque_s buf = *((_DWORD *)*v34 + 4);
              uint64_t v95 = (const char *)v80;
              v96[0] = v81;
              HALS_DeviceState::Value::Value((HALS_DeviceState::Value *)&v96[1], (const HALS_DeviceState::Value *)&v72);
              std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::__emplace_unique_key_args<HALS_DeviceState::Key,std::pair<HALS_DeviceState::Key const,HALS_DeviceState::Value>>(v62, buf, (uint64_t)buf);
              HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v96[1]);
            }
          }
LABEL_88:
          HALS_DeviceState::Value::~Value((HALS_DeviceState::Value *)&v72);
LABEL_89:
          ++v38;
          uint64_t v35 = *(void *)a4;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a4 + 1) - *(void *)a4) >> 2);
          v37 += 12;
        }
        while (v38 < v36);
      }
      HALS_ObjectMap::ReleaseObject(*v34++, v32);
    }
    while (v34 != (HALS_ObjectMap **)v61);
    uint64_t v34 = (HALS_ObjectMap **)v82;
    char v31 = v59;
LABEL_92:
    if (v34)
    {
      uint64_t v83 = (char *)v34;
      operator delete(v34);
    }
    char v30 = 0;
    char v29 = 1;
  }
  while ((v31 & 1) != 0);
}

void sub_1BAB63808(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAB6380CLL);
  }
  __clang_call_terminate(a1);
}

void sub_1BAB63818(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, HALS_DeviceState::Value *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
}

void sub_1BAB63844(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 120);
  if (v3)
  {
    *(void *)(v1 + 128) = v3;
    int v4 = a1;
    operator delete(v3);
    a1 = v4;
  }
  _Unwind_Resume(a1);
}

void sub_1BAB63864(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAB6386CLL);
  }
  __clang_call_terminate(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  int v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    unint64_t v12 = &v7[v11];
    uint64_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      int v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

HALS_DeviceState::Value *HALS_DeviceState::Value::Value(HALS_DeviceState::Value *this, const HALS_DeviceState::Value *a2)
{
  *(_DWORD *)this = *(_DWORD *)a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 1) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)this + 1, *((const void **)a2 + 1), *((void *)a2 + 2), *((void *)a2 + 2) - *((void *)a2 + 1));
  long long v4 = *((_OWORD *)a2 + 2);
  long long v5 = *((_OWORD *)a2 + 3);
  long long v6 = *((_OWORD *)a2 + 4);
  *((void *)this + 10) = *((void *)a2 + 10);
  *((_OWORD *)this + 3) = v5;
  *((_OWORD *)this + 4) = v6;
  *((_OWORD *)this + 2) = v4;
  OS::CF::UntypedObject::UntypedObject((HALS_DeviceState::Value *)((char *)this + 88), *((CFTypeRef *)a2 + 12));
  return this;
}

uint64_t *std::__tree<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::__map_value_compare<HALS_DeviceState::Key,std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>,std::less<HALS_DeviceState::Key>,true>,std::allocator<std::__value_type<HALS_DeviceState::Key,HALS_DeviceState::Value>>>::__emplace_unique_key_args<HALS_DeviceState::Key,std::pair<HALS_DeviceState::Key const,HALS_DeviceState::Value>>(uint64_t **a1, _DWORD *a2, uint64_t a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        long long v6 = (uint64_t **)v5;
        unint64_t v8 = v5 + 4;
        if (!operator<(a2, (_DWORD *)v5 + 8)) {
          break;
        }
        long long v5 = *v6;
        unint64_t v9 = v6;
        if (!*v6) {
          goto LABEL_9;
        }
      }
      uint64_t result = (uint64_t *)operator<(v8, a2);
      if (!result) {
        break;
      }
      unint64_t v9 = v6 + 1;
      long long v5 = v6[1];
      if (!v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_9:
    unint64_t v11 = (char *)operator new(0x98uLL);
    *((_DWORD *)v11 + 8) = *(_DWORD *)a3;
    *(void *)(v11 + 36) = *(void *)(a3 + 4);
    int v12 = *(_DWORD *)(a3 + 16);
    *((_DWORD *)v11 + 11) = *(_DWORD *)(a3 + 12);
    *((_DWORD *)v11 + 12) = v12;
    *(_OWORD *)(v11 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v11 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    long long v13 = *(_OWORD *)(a3 + 48);
    long long v14 = *(_OWORD *)(a3 + 80);
    uint64_t v15 = *(void *)(a3 + 96);
    *((_OWORD *)v11 + 6) = *(_OWORD *)(a3 + 64);
    *((_OWORD *)v11 + 7) = v14;
    *((_OWORD *)v11 + 5) = v13;
    uint64_t v16 = *(void *)(a3 + 112);
    *((void *)v11 + 16) = v15;
    *((void *)v11 + 17) = &unk_1F1489918;
    *((void *)v11 + 18) = v16;
    *(void *)(a3 + 112) = 0;
    *(void *)unint64_t v11 = 0;
    *((void *)v11 + 1) = 0;
    *((void *)v11 + 2) = v6;
    std::__shared_weak_count *v9 = (uint64_t *)v11;
    uint64_t v17 = (uint64_t *)**a1;
    if (v17)
    {
      *a1 = v17;
      int v18 = *v9;
    }
    else
    {
      int v18 = (uint64_t *)v11;
    }
    uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v18);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return result;
}

BOOL operator<(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2) {
    return 1;
  }
  if (*a1 != *a2) {
    return 0;
  }
  unsigned int v3 = a1[2];
  unsigned int v4 = a2[2];
  BOOL v5 = v3 >= v4;
  if (v3 == v4)
  {
    unsigned int v6 = a1[1];
    unsigned int v7 = a2[1];
    BOOL v5 = v6 >= v7;
    if (v6 == v7) {
      BOOL v5 = a1[3] >= a2[3];
    }
  }
  return !v5;
}

void HALS_DeviceState::Compare(HALS_DeviceState *this, const HALS_DeviceState *a2, const AudioObjectPropertyAddress *a3, CAPropertyAddressList **a4, CAPropertyAddressListVector *a5)
{
  BOOL v5 = (char *)*((void *)this + 1);
  unsigned int v6 = (char *)this + 16;
  if (v5 != (char *)this + 16)
  {
    unint64_t v8 = a3;
    size_t v10 = (void *)((char *)a2 + 16);
    while (1)
    {
      uint64_t v11 = *v10;
      if (!*v10) {
        goto LABEL_39;
      }
      int v12 = v10;
      do
      {
        BOOL v13 = operator<((_DWORD *)(v11 + 32), (_DWORD *)v5 + 8);
        long long v14 = (uint64_t *)(v11 + 8);
        if (!v13)
        {
          long long v14 = (uint64_t *)v11;
          int v12 = (void *)v11;
        }
        uint64_t v11 = *v14;
      }
      while (*v14);
      if (v12 == v10
        || operator<((_DWORD *)v5 + 8, (_DWORD *)v12 + 8)
        || (int v15 = *((_DWORD *)v5 + 12), v15 != *((_DWORD *)v12 + 12)))
      {
LABEL_39:
        uint64_t v18 = *((unsigned int *)v5 + 8);
        if (v18 == *(_DWORD *)this)
        {
          p_p = (AudioObjectPropertyAddress *)(v5 + 36);
          uint64_t v20 = (CAPropertyAddressList *)v8;
LABEL_41:
          CAPropertyAddressList::AppendUniqueItem(v20, p_p, a3);
        }
        else
        {
          uint64_t v21 = *a4;
          do
          {
            if (v21 == a4[1])
            {
              long long __p = 0uLL;
              uint64_t v29 = 0;
              uint64_t v30 = v18;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)&__p, (AudioObjectPropertyAddress *)v5 + 3, a3);
              CAPropertyAddressListVector::AppendItem((CAPropertyAddressListVector *)a4, (uint64_t **)&__p);
              if ((void)__p) {
                operator delete((void *)__p);
              }
              goto LABEL_51;
            }
            uint64_t v22 = v21;
            uint64_t v23 = *((void *)v21 + 3);
            uint64_t v21 = (CAPropertyAddressList *)((char *)v21 + 32);
          }
          while (v23 != v18);
          CAPropertyAddressList::AppendUniqueItem(v22, (AudioObjectPropertyAddress *)v5 + 3, a3);
          int v24 = *((_DWORD *)v5 + 9);
          if (v24 == 1936092532)
          {
            LODWORD(__p) = 1936092532;
            *(void *)((char *)&__p + 4) = *((void *)v5 + 5);
            CAPropertyAddressList::AppendUniqueItem(v22, (AudioObjectPropertyAddress *)&__p, a3);
            int v24 = *((_DWORD *)v5 + 9);
          }
          if (v24 == 1936092513)
          {
            LODWORD(__p) = 1936092451;
            *(void *)((char *)&__p + 4) = *((void *)v5 + 5);
            p_p = (AudioObjectPropertyAddress *)&__p;
            uint64_t v20 = v22;
            goto LABEL_41;
          }
        }
        goto LABEL_51;
      }
      if (v15 > 1718367025) {
        break;
      }
      if (v15 != 1634951780)
      {
        if (v15 == 1667658612 || v15 == 1668641388)
        {
LABEL_25:
          if (!CFEqual(*((CFTypeRef *)v5 + 18), (CFTypeRef)v12[18])) {
            goto LABEL_39;
          }
          goto LABEL_51;
        }
LABEL_37:
        uint64_t v16 = (const void *)*((void *)v5 + 7);
        a3 = (const AudioObjectPropertyAddress *)(*((void *)v5 + 8) - (void)v16);
        uint64_t v17 = (const void *)v12[7];
        if (a3 != (const AudioObjectPropertyAddress *)(v12[8] - (void)v17) || memcmp(v16, v17, (size_t)a3)) {
          goto LABEL_39;
        }
        goto LABEL_51;
      }
      if (*((double *)v5 + 12) != *((double *)v12 + 12)
        || *((_DWORD *)v5 + 26) != *((_DWORD *)v12 + 26)
        || *((_DWORD *)v5 + 28) != *((_DWORD *)v12 + 28)
        || *((_DWORD *)v5 + 29) != *((_DWORD *)v12 + 29)
        || *((_DWORD *)v5 + 31) != *((_DWORD *)v12 + 31)
        || *((_DWORD *)v5 + 32) != *((_DWORD *)v12 + 32)
        || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)(v5 + 96), (const AudioStreamBasicDescription *)(v12 + 12), (const AudioStreamBasicDescription *)1, 0))
      {
        goto LABEL_39;
      }
LABEL_51:
      uint64_t v25 = (char *)*((void *)v5 + 1);
      if (v25)
      {
        do
        {
          uint64_t v26 = v25;
          uint64_t v25 = *(char **)v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          uint64_t v26 = (char *)*((void *)v5 + 2);
          BOOL v27 = *(void *)v26 == (void)v5;
          BOOL v5 = v26;
        }
        while (!v27);
      }
      BOOL v5 = v26;
      if (v26 == v6) {
        return;
      }
    }
    if (v15 > 1886155635)
    {
      if (v15 == 1886155636) {
        goto LABEL_25;
      }
      if (v15 == 1969828658)
      {
        if (*((_DWORD *)v5 + 20) != *((_DWORD *)v12 + 20)) {
          goto LABEL_39;
        }
        goto LABEL_51;
      }
    }
    else
    {
      if (v15 == 1718367026)
      {
        if (*((float *)v5 + 21) != *((float *)v12 + 21)) {
          goto LABEL_39;
        }
        goto LABEL_51;
      }
      if (v15 == 1718367796)
      {
        if (*((double *)v5 + 11) != *((double *)v12 + 11)) {
          goto LABEL_39;
        }
        goto LABEL_51;
      }
    }
    goto LABEL_37;
  }
}

void sub_1BAB63F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAB641D8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<unsigned int ()(AudioObjectPropertyAddress const&,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1BAB645F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAB647EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1BAB64D84(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  DSP_Host_Types::DSPPropertyInfoArray::~DSPPropertyInfoArray((DSP_Host_Types::DSPPropertyInfoArray *)va);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<DSP_Host_Types::DSPPropertyInfo,std::allocator<DSP_Host_Types::DSPPropertyInfo>,char const(&)[1],void>(void *a1, const char *a2)
{
  unsigned int v4 = operator new(0x158uLL);
  v4[1] = 0;
  v4[2] = 0;
  *unsigned int v4 = &unk_1F147F508;
  CFIndex v5 = strlen(a2);
  CFStringRef v6 = CFStringCreateWithBytes(0, (const UInt8 *)a2, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  void v4[3] = &unk_1F147F3D8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::__optional_destruct_base[abi:ne180100]<applesauce::CF::StringRef const&>((uint64_t)(v4 + 4), v6);
  CFRelease(v6);
  void v4[3] = &unk_1F147EFD8;
  std::string::basic_string[abi:ne180100]<0>(__p, "property selector");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 6, (uint64_t)__p);
  v4[6] = &unk_1F1487570;
  *((unsigned char *)v4 + 64) = 0;
  *((unsigned char *)v4 + 68) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "property scope");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 9, (uint64_t)__p);
  v4[9] = &unk_1F1487570;
  *((unsigned char *)v4 + 88) = 0;
  *((unsigned char *)v4 + 92) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "property is invariant");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 12, (uint64_t)__p);
  v4[12] = &unk_1F1486878;
  *((_WORD *)v4 + 56) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "property is settable");
  DSP_Dictionariable::DictionariableKvp::DictionariableKvp(v4 + 15, (uint64_t)__p);
  v4[15] = &unk_1F1486878;
  *((_WORD *)v4 + 68) = 0;
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "property data type");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::StringifiedKvp((uint64_t)(v4 + 18), (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "property qualifier data type");
  DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::StringifiedKvp((uint64_t)(v4 + 29), (uint64_t)__p);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  v4[40] = 0;
  v4[41] = 0;
  v4[42] = 0;
  DSP_Host_Types::DSPPropertyInfo::init_set((DSP_Host_Types::DSPPropertyInfo *)(v4 + 3));
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_1BAB650D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::__shared_weak_count::~__shared_weak_count(v17);
  operator delete(v18);
  _Unwind_Resume(a1);
}

void DSP_Host_Types::DSPPropertyInfoArray::~DSPPropertyInfoArray(DSP_Host_Types::DSPPropertyInfoArray *this)
{
  *(void *)this = &unk_1F1487398;
  int v2 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F14873D8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);
}

{
  void **v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1487398;
  int v2 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);
  *(void *)this = &unk_1F14873D8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)this + 8);

  JUMPOUT(0x1C1859840);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfoArray>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB65344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfoArray>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB654B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::StringifiedKvp(uint64_t a1, uint64_t a2)
{
  void v9[3] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = DSP_Dictionariable::DictionariableKvp::DictionariableKvp((void *)a1, a2);
  *((unsigned char *)v3 + 16) = 0;
  *((unsigned char *)v3 + 20) = 0;
  *uint64_t v3 = &unk_1F147F380;
  CFStringRef v4 = v3 + 3;
  v3[6] = 0;
  v3[10] = 0;
  {
    qword_1EBFFA908 = (uint64_t)"uninitialized";
    dword_1EBFFA910 = 1;
    qword_1EBFFA918 = (uint64_t)"None";
    dword_1EBFFA920 = 2;
    qword_1EBFFA928 = (uint64_t)"String";
    dword_1EBFFA930 = 3;
    qword_1EBFFA938 = (uint64_t)"Boolean";
    dword_1EBFFA940 = 4;
    qword_1EBFFA948 = (uint64_t)"Float32";
    dword_1EBFFA950 = 5;
    DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[0] = 0;
    qword_1EBFFA958 = (uint64_t)"UInt32";
    dword_1EBFFA960 = 6;
    qword_1EBFFA968 = (uint64_t)"Int32";
    dword_1EBFFA970 = 7;
    qword_1EBFFA978 = (uint64_t)"Dictionary";
  }
  v7[0] = &unk_1F14865B8;
  CFTypeRef v8 = v7;
  if (v4 != v7)
  {
    if (*(void **)(a1 + 48) == v4)
    {
      std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone((uint64_t)v7, v9);
      (*(void (**)(void *))(*v8 + 32))(v8);
      CFTypeRef v8 = 0;
      (*(void (**)(void, void *))(**(void **)(a1 + 48) + 24))(*(void *)(a1 + 48), v7);
      (*(void (**)(void))(**(void **)(a1 + 48) + 32))(*(void *)(a1 + 48));
      *(void *)(a1 + 48) = 0;
      CFTypeRef v8 = v7;
      (*(void (**)(void *, void *))(v9[0] + 24))(v9, v4);
      (*(void (**)(void *))(v9[0] + 32))(v9);
    }
    else
    {
      std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone((uint64_t)v7, v4);
      (*(void (**)(void *))(*v8 + 32))(v8);
      CFTypeRef v8 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 48) = v4;
  }
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100](v7);
  uint64_t v5 = a1 + 56;
  v7[0] = &unk_1F1486648;
  CFTypeRef v8 = v7;
  if ((void *)(a1 + 56) != v7)
  {
    if (*(void *)(a1 + 80) == v5)
    {
      std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone((uint64_t)v7, v9);
      (*(void (**)(void *))(*v8 + 32))(v8);
      CFTypeRef v8 = 0;
      (*(void (**)(void, void *))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), v7);
      (*(void (**)(void))(**(void **)(a1 + 80) + 32))(*(void *)(a1 + 80));
      *(void *)(a1 + 80) = 0;
      CFTypeRef v8 = v7;
      (*(void (**)(void *, uint64_t))(v9[0] + 24))(v9, a1 + 56);
      (*(void (**)(void *))(v9[0] + 32))(v9);
    }
    else
    {
      std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone((uint64_t)v7, (void *)(a1 + 56));
      (*(void (**)(void *))(*v8 + 32))(v8);
      CFTypeRef v8 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 80) = v5;
  }
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100](v7);
  return a1;
}

void sub_1BAB65954(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::~StringifiedKvp(DSP_Dictionariable::DictionariableKvp *a1)
{
  *(void *)a1 = &unk_1F147F380;
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100]((void *)a1 + 7);
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100]((void *)a1 + 3);

  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);
}

{
  uint64_t vars8;

  *(void *)a1 = &unk_1F147F380;
  std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100]((void *)a1 + 7);
  std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100]((void *)a1 + 3);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__function::__value_func<char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::load_from(uint64_t a1, CFDictionaryRef *a2)
{
  if (*(unsigned char *)(a1 + 20)) {
    *(unsigned char *)(a1 + 20) = 0;
  }
  v9[0] = &unk_1F1487618;
  v9[1] = 0;
  size_t v10 = a2;
  if (applesauce::CF::details::has_key<__CFString const*&>(*a2, *(const void **)(a1 + 8)))
  {
    applesauce::CF::details::find_at_key<std::string,__CFString const*&>((uint64_t)__p, *v10, *(const void **)(a1 + 8));
    if (v8 >= 0) {
      uint64_t v3 = __p;
    }
    else {
      uint64_t v3 = (void **)__p[0];
    }
    uint64_t v11 = v3;
    uint64_t v4 = *(void *)(a1 + 48);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    *(_DWORD *)(a1 + 16) = (*(uint64_t (**)(uint64_t, void ***))(*(void *)v4 + 48))(v4, &v11);
    *(unsigned char *)(a1 + 20) = 1;
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }
  DSP_Dictionariable::TooledDictionary::~TooledDictionary((DSP_Dictionariable::TooledDictionary *)v9);
  return v5;
}

void DSP_Dictionariable::StringifiedKvp<DSP_Host_Types::CustomPropertyDataType,DSP_Host_Types::StringLookup_CustomPropertyDataType,unsigned int>::add_to(uint64_t a1, __CFDictionary **a2)
{
  if (!*(unsigned char *)(a1 + 20)) {
    return;
  }
  int v14 = *(_DWORD *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 80);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v5 = (char *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v3 + 48))(v3, &v14);
  std::string::basic_string[abi:ne180100]<0>(&bytes, v5);
  if ((char)v13 < 0)
  {
    CFIndex v6 = numBytes;
    if (!numBytes)
    {
LABEL_12:
      operator delete(bytes);
      return;
    }
    p_bytes = bytes;
    CFIndex v7 = (const void **)(a1 + 8);
    if (!bytes)
    {
      CFStringRef v9 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    CFIndex v6 = v13;
    if (!v13) {
      return;
    }
    CFIndex v7 = (const void **)(a1 + 8);
    p_bytes = (const UInt8 *)&bytes;
  }
  CFStringRef v9 = CFStringCreateWithBytes(0, p_bytes, v6, 0x8000100u, 0);
  if (!v9)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
LABEL_9:
  mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(*a2, *v7, v9);
  if (v9) {
    CFRelease(v9);
  }
  if ((char)v13 < 0) {
    goto LABEL_12;
  }
}

void sub_1BAB65D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfo>::add_to(uint64_t a1, __CFArray **a2)
{
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v4, cf);
  if (cf) {
    CFRelease(cf);
  }
  mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(*a2, v4);
  if (v4) {
    CFRelease(v4);
  }
}

void sub_1BAB65ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void DSP_Host_Types::DSP_Host_DictionaryData<DSP_Host_Types::DSPPropertyInfo>::description(uint64_t a1@<X0>, void *a2@<X8>)
{
  cf.__begin_ = (std::vector<char>::pointer)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(uint64_t, std::vector<char> *))(*(void *)a1 + 24))(a1, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v8, cf.__begin_);
  if (cf.__begin_) {
    CFRelease(cf.__begin_);
  }
  CFStringRef v4 = CFCopyDescription(v8);
  CFStringRef v5 = v4;
  if (v4)
  {
    CFIndex Length = CFStringGetLength(v4);
    CFIndex v7 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
    std::vector<char>::value_type __x = 0;
    std::vector<char>::vector(&cf, v7, &__x);
    LODWORD(v7) = CFStringGetCString(v5, cf.__begin_, v7, 0x8000100u);
    CFRelease(v5);
    if (v7) {
      std::string::basic_string[abi:ne180100]<0>(a2, cf.__begin_);
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(a2, "<error>");
    }
    if (cf.__begin_)
    {
      cf.__end_ = cf.__begin_;
      operator delete(cf.__begin_);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "<empty>");
  }
  if (v8) {
    CFRelease(v8);
  }
}

void sub_1BAB66044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__shared_ptr_emplace<DSP_Host_Types::DSPPropertyInfo>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host_Types::DSPPropertyInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F508;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host_Types::DSPPropertyInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F147F508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1BAB66538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)va);
  mcp_applesauce::CF::Dictionary_Builder::~Dictionary_Builder((const void **)(v4 - 104));
  DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(v3);
  MEMORY[0x1C1859840](v3, 0x10E1C404ACA052DLL);
  _Unwind_Resume(a1);
}

uint64_t DSP_TemplatedProperty<1684500589u,1768845428u,float>::DSP_TemplatedProperty(uint64_t a1, uint64_t a2, char a3)
{
  v8[4] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F1460410;
  CFIndex v6 = (void *)(a1 + 8);
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::__value_func[abi:ne180100](a1 + 8, a2);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 1018212795;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 850045863;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0x696E70746467706DLL;
  *(_DWORD *)(a1 + 168) = 0;
  *(unsigned char *)(a1 + 172) = a3;
  *(_OWORD *)(a1 + 176) = xmmword_1BAFF9400;
  *(void *)(a1 + 176) = std::chrono::steady_clock::now().__d_.__rep_ - 1000000 * *(void *)(a1 + 184);
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v8, a2);
  if (!*(void *)(a1 + 32) && v8[3])
  {
    std::function<void ()(unsigned int,unsigned int)>::operator=(v6, (uint64_t)v8);
    operator new();
  }
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v8);
  return a1;
}

void sub_1BAB6687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va);
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::mutex::~mutex(v6);
  std::condition_variable::~condition_variable(v5);
  std::thread::~thread(v3);
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v4);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(unsigned int,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::function<void ()(unsigned int,unsigned int)>::operator=(void *a1, uint64_t a2)
{
  v8[3] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    uint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        CFIndex v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        CFIndex v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        CFIndex v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      CFIndex v7 = v6;
    }
    else
    {
      CFIndex v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1BAB66C18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](uint64_t **result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v1);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v16 = a1;
  int v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 96);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 96));
    v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v7.__d_.__rep_ = 100000000;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
        }
        else {
          v7.__d_.__rep_ = 0x8000000005F5E100;
        }
      }
      else if ((unint64_t)v6.__d_.__rep_ < 0x20C49BA5E1CD58)
      {
        v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
      }
      else
      {
        v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 48), &__lk, v7);
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    unsigned int v9 = atomic_load((unsigned int *)(v4 + 160));
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = v8.__d_.__rep_ - v5.__d_.__rep_;
    if (v9 == 1802071148)
    {
      BOOL v12 = 0;
      BOOL v11 = 0;
    }
    else
    {
      BOOL v12 = __OFSUB__(v10, 100000000);
      BOOL v11 = v10 - 100000000 < 0;
    }
    if (v11 != v12)
    {
      int v13 = atomic_load((unsigned int *)(v4 + 160));
      std::function<void ()(unsigned int,unsigned int)>::operator()(*(void *)(v4 + 32), v13, *(_DWORD *)(v4 + 164));
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v9 == 1802071148) {
      break;
    }
    unsigned int v14 = atomic_load((unsigned int *)(v4 + 160));
  }
  while (v14 != 1802071148);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&v16);
  return 0;
}

void sub_1BAB66E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, std::mutex *a11, char a12)
{
}

uint64_t std::function<void ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v5 = a2;
  int v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

void DSP_TemplatedProperty<1684500589u,1768845428u,float>::~DSP_TemplatedProperty(uint64_t a1)
{
  DSP_TemplatedProperty<1684500589u,1768845428u,float>::~DSP_TemplatedProperty(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_TemplatedProperty<1684500589u,1768845428u,float>::~DSP_TemplatedProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F1460410;
  if (*(void *)(a1 + 32))
  {
    atomic_store(0x6B696C6Cu, (unsigned int *)(a1 + 160));
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 48));
    std::thread::join((std::thread *)(a1 + 40));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  std::thread::~thread((std::thread *)(a1 + 40));
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

uint64_t DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14603F0;
  if (*(void *)(a1 + 32))
  {
    atomic_store(0x6B696C6Cu, (unsigned int *)(a1 + 160));
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 48));
    std::thread::join((std::thread *)(a1 + 40));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  std::thread::~thread((std::thread *)(a1 + 40));
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

void DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(uint64_t a1)
{
  DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty(a1);

  JUMPOUT(0x1C1859840);
}

void mcp_applesauce::CF::Dictionary_Builder::add_value<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(__CFDictionary *a1, const void *a2, const void *a3)
{
  if (a1) {
    CFDictionaryAddValue(a1, a2, a3);
  }
}

void DSP_DictionaryRefProperty<1685278561u,1768845428u>::~DSP_DictionaryRefProperty(void *a1)
{
  DSP_DictionaryRefProperty<1685278561u,1768845428u>::~DSP_DictionaryRefProperty(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_DictionaryRefProperty<1685278561u,1768845428u>::~DSP_DictionaryRefProperty(void *a1)
{
  *a1 = &unk_1F14603D0;
  int v2 = (const void *)atomic_exchange(a1 + 21, 0);
  if (v2) {
    CFRelease(v2);
  }

  return DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::~DSP_TemplatedProperty((uint64_t)a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1685278561u,1768845428u,__CFDictionary const*>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v16 = a1;
  int v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 96);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 96));
    v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v7.__d_.__rep_ = 100000000;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
        }
        else {
          v7.__d_.__rep_ = 0x8000000005F5E100;
        }
      }
      else if ((unint64_t)v6.__d_.__rep_ < 0x20C49BA5E1CD58)
      {
        v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
      }
      else
      {
        v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 48), &__lk, v7);
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    unsigned int v9 = atomic_load((unsigned int *)(v4 + 160));
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = v8.__d_.__rep_ - v5.__d_.__rep_;
    if (v9 == 1802071148)
    {
      BOOL v12 = 0;
      BOOL v11 = 0;
    }
    else
    {
      BOOL v12 = __OFSUB__(v10, 100000000);
      BOOL v11 = v10 - 100000000 < 0;
    }
    if (v11 != v12)
    {
      int v13 = atomic_load((unsigned int *)(v4 + 160));
      std::function<void ()(unsigned int,unsigned int)>::operator()(*(void *)(v4 + 32), v13, *(_DWORD *)(v4 + 164));
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v9 == 1802071148) {
      break;
    }
    unsigned int v14 = atomic_load((unsigned int *)(v4 + 160));
  }
  while (v14 != 1802071148);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&v16);
  return 0;
}

void sub_1BAB67274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, std::mutex *a11, char a12)
{
}

void sub_1BAB674D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<unsigned int ()(AudioObjectPropertyAddress const&,unsigned int)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1BAB676EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100](va);
  _Unwind_Resume(a1);
}

uint64_t DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::setNotifyCallback(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 32))
  {
    if (*(void *)(a2 + 24))
    {
      std::function<void ()(unsigned int,unsigned int)>::operator=((void *)(result + 8), a2);
      operator new();
    }
  }
  return result;
}

void sub_1BAB67860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__thread_struct>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>(uint64_t *a1)
{
  uint64_t v16 = a1;
  int v2 = std::__thread_local_data();
  uint64_t v3 = (const void *)*a1;
  *a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  uint64_t v4 = a1[1];
  do
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v4 + 96);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v4 + 96));
    v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    v7.__d_.__rep_ = 100000000;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09) {
          v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
        }
        else {
          v7.__d_.__rep_ = 0x8000000005F5E100;
        }
      }
      else if ((unint64_t)v6.__d_.__rep_ < 0x20C49BA5E1CD58)
      {
        v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 100000000;
      }
      else
      {
        v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
      }
    }
    std::condition_variable::__do_timed_wait((std::condition_variable *)(v4 + 48), &__lk, v7);
    v8.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    unsigned int v9 = atomic_load((unsigned int *)(v4 + 160));
    std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = v8.__d_.__rep_ - v5.__d_.__rep_;
    if (v9 == 1802071148)
    {
      BOOL v12 = 0;
      BOOL v11 = 0;
    }
    else
    {
      BOOL v12 = __OFSUB__(v10, 100000000);
      BOOL v11 = v10 - 100000000 < 0;
    }
    if (v11 != v12)
    {
      int v13 = atomic_load((unsigned int *)(v4 + 160));
      std::function<void ()(unsigned int,unsigned int)>::operator()(*(void *)(v4 + 32), v13, *(_DWORD *)(v4 + 164));
    }
    if (__lk.__owns_) {
      std::mutex::unlock(__lk.__m_);
    }
    if (v9 == 1802071148) {
      break;
    }
    unsigned int v14 = atomic_load((unsigned int *)(v4 + 160));
  }
  while (v14 != 1802071148);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,DSP_TemplatedProperty<1684500589u,1768845428u,float>::setNotifyCallback(std::function<void ()(unsigned int,unsigned int)>)::{lambda(void)#1}>>::reset[abi:ne180100](&v16);
  return 0;
}

void sub_1BAB67A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, std::mutex *a11, char a12)
{
}

void DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::~DSP_TemplatedProperty(uint64_t a1)
{
  DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::~DSP_TemplatedProperty(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_TemplatedProperty<1983997011u,1768845428u,unsigned int>::~DSP_TemplatedProperty(uint64_t a1)
{
  *(void *)a1 = &unk_1F14603B0;
  if (*(void *)(a1 + 32))
  {
    atomic_store(0x6B696C6Cu, (unsigned int *)(a1 + 160));
    std::condition_variable::notify_one((std::condition_variable *)(a1 + 48));
    std::thread::join((std::thread *)(a1 + 40));
  }
  std::mutex::~mutex((std::mutex *)(a1 + 96));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 48));
  std::thread::~thread((std::thread *)(a1 + 40));
  std::__function::__value_func<void ()(unsigned int,unsigned int)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
  return a1;
}

void AMCP::IO_Clock::~IO_Clock(AMCP::IO_Clock *this)
{
  AMCP::IO_Clock::~IO_Clock(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;

  *(void *)this = &unk_1F1460430;
  std::__function::__value_func<CA::TimeStamp ()(void)>::~__value_func[abi:ne180100]((void *)this + 4);
  int v2 = *((void *)this + 3);
  *((void *)this + 3) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *((void *)this + 2);
  *((void *)this + 2) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
}

void *std::__function::__value_func<CA::TimeStamp ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AMCP::IO_Clock::IO_Clock(uint64_t a1)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F1460430;
  *(unsigned char *)(a1 + 8) = 0;
  operator new();
}

void sub_1BAB6840C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37)
{
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v39);
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(v38);
  MEMORY[0x1C1859840](v37, 0x10A1C40D17D5D67);
  _Unwind_Resume(a1);
}

BOOL AMCP::IO_Clock::has_time(os_unfair_lock_s *this)
{
  int v2 = this + 20;
  os_unfair_lock_lock(this + 20);
  if ((*(unsigned int (**)(void))(**(void **)&this[4]._os_unfair_lock_opaque + 16))(*(void *)&this[4]._os_unfair_lock_opaque)) {
    BOOL v3 = LOBYTE(this[38]._os_unfair_lock_opaque) != 0;
  }
  else {
    BOOL v3 = 0;
  }
  os_unfair_lock_unlock(v2);
  return v3;
}

void sub_1BAB685F4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t AMCP::IO_Clock::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = this + 20;
  os_unfair_lock_lock(this + 20);
  std::chrono::steady_clock::time_point v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(**(void **)&this[4]._os_unfair_lock_opaque
                                                                      + 16))(*(void *)&this[4]._os_unfair_lock_opaque);
  if (!v5 || !LOBYTE(this[38]._os_unfair_lock_opaque))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)BOOL v27 = 2080;
      *(void *)&v27[2] = "IO_Clock.cpp";
      __int16 v28 = 1024;
      int v29 = 69;
      __int16 v30 = 2080;
      *(void *)char v31 = "not (has_time_internal())";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s convert_sample_to_host_time, clock does not have time", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"convert_sample_to_host_time, clock does not have time", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "uint64_t AMCP::IO_Clock::convert_sample_to_host_time(float64_t) const";
    char v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/IO_Clock.cpp";
    int v33 = 69;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    unsigned int v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v6 = *(double *)&this[22]._os_unfair_lock_opaque;
  if (v6 <= a2)
  {
    if (v6 < a2) {
      unint64_t v7 = *(void *)&this[24]._os_unfair_lock_opaque
    }
         + (unint64_t)((a2 - v6) * *(double *)&this[16]._os_unfair_lock_opaque);
    else {
      unint64_t v7 = *(void *)&this[24]._os_unfair_lock_opaque;
    }
  }
  else
  {
    unint64_t v7 = *(void *)&this[24]._os_unfair_lock_opaque
       - (unint64_t)((v6 - a2) * *(double *)&this[16]._os_unfair_lock_opaque);
  }
  os_unfair_lock_unlock(v4);
  return v7;
}

void sub_1BAB68904(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

double AMCP::IO_Clock::convert_host_to_sample_time_internal(AMCP::IO_Clock *this, unint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2));
  if (!v4 || !*((unsigned char *)this + 152))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::chrono::steady_clock::time_point v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      unsigned int v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)uint64_t v26 = 2080;
      *(void *)&v26[2] = "IO_Clock.cpp";
      __int16 v27 = 1024;
      int v28 = 190;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = "not (has_time_internal())";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s convert_host_to_sample_time, clock does not have time", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"convert_host_to_sample_time, clock does not have time", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "float64_t AMCP::IO_Clock::convert_host_to_sample_time_internal(uint64_t) const";
    char v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/IO_Clock.cpp";
    int v32 = 190;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    uint64_t v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *((void *)this + 12);
  if (v5 <= a2)
  {
    if (v5 >= a2) {
      double v6 = *((double *)this + 11);
    }
    else {
      double v6 = *((double *)this + 11) + *((double *)this + 9) * (double)(a2 - v5);
    }
  }
  else
  {
    double v6 = *((double *)this + 11) - *((double *)this + 9) * (double)(v5 - a2);
  }
  return floor(v6);
}

void sub_1BAB68BEC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::IO_Clock::get_current_time(AMCP::IO_Clock *this, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 80));
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16))
    && *(unsigned char *)(a2 + 152))
  {
    uint64_t v5 = mach_absolute_time();
    *((void *)this + 7) = 0;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *((_DWORD *)this + 14) = 7;
    *((void *)this + 1) = v5;
    *(double *)this = AMCP::IO_Clock::convert_host_to_sample_time_internal((AMCP::IO_Clock *)a2, v5);
    *((double *)this + 2) = *(double *)(a2 + 64) / *(double *)(*(void *)(a2 + 16) + 40);
  }
  else
  {
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 24) = 0u;
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    *((void *)this + 2) = 0x3FF0000000000000;
    *((void *)this + 7) = 7;
  }

  os_unfair_lock_unlock(v4);
}

void AMCP::IO_Clock::get_current_zts(AMCP::IO_Clock *this, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a2 + 80);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 80));
  if ((*(unsigned int (**)(void))(**(void **)(a2 + 16) + 16))(*(void *)(a2 + 16))
    && *(unsigned char *)(a2 + 152))
  {
    long long v5 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)this = *(_OWORD *)(a2 + 88);
    *((_OWORD *)this + 1) = v5;
    long long v6 = *(_OWORD *)(a2 + 136);
    *((_OWORD *)this + 2) = *(_OWORD *)(a2 + 120);
    *((_OWORD *)this + 3) = v6;
  }
  else
  {
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }

  os_unfair_lock_unlock(v4);
}

BOOL AMCP::IO_Clock::reset_time(os_unfair_lock_s *this)
{
  int v2 = this + 20;
  os_unfair_lock_lock(this + 20);
  int os_unfair_lock_opaque_low = LOBYTE(this[38]._os_unfair_lock_opaque);
  if (LOBYTE(this[38]._os_unfair_lock_opaque))
  {
    uint64_t v4 = *(AMCP::Time_Stamp_Historian **)&this[4]._os_unfair_lock_opaque;
    AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v4);
    AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v4);
    if (LOBYTE(this[38]._os_unfair_lock_opaque)) {
      LOBYTE(this[38]._os_unfair_lock_opaque) = 0;
    }
  }
  os_unfair_lock_unlock(v2);
  return os_unfair_lock_opaque_low != 0;
}

uint64_t AMCP::IO_Clock::update_time(AMCP::IO_Clock *this)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)this + 7);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(long long *__return_ptr))(*(void *)v2 + 48))(&v40);
  os_unfair_lock_lock((os_unfair_lock_t)this + 20);
  if ((BYTE8(v43) & 3) != 0 && *((void *)&v40 + 1) == 0)
  {
    if (*((void *)this + 12))
    {
      uint64_t v5 = 0;
      *((unsigned char *)this + 8) = 1;
      goto LABEL_83;
    }
  }
  else if ((BYTE8(v43) & 3) == 0)
  {
LABEL_82:
    uint64_t v5 = 0;
    goto LABEL_83;
  }
  long long v6 = (double *)((char *)this + 88);
  int v7 = *((unsigned __int8 *)this + 152);
  if (*((unsigned char *)this + 152)
    && DWORD2(v43) == *((_DWORD *)this + 36)
    && ((BYTE8(v43) & 1) == 0 || *(double *)&v40 == *v6)
    && ((BYTE8(v43) & 2) == 0 || *((void *)&v40 + 1) == *((void *)this + 12))
    && ((BYTE8(v43) & 4) == 0 || *(double *)&v41 == *((double *)this + 13))
    && ((BYTE8(v43) & 8) == 0 || *((void *)&v41 + 1) == *((void *)this + 14))
    && ((BYTE8(v43) & 0x10) == 0
     || __PAIR64__(WORD1(v42), (unsigned __int16)v42) == __PAIR64__(*((unsigned __int16 *)this + 61), *((unsigned __int16 *)this + 60))&& *(void *)((char *)&v42 + 4) == *(void *)((char *)this + 124)&& __PAIR64__((unsigned __int16)v43, HIDWORD(v42)) == __PAIR64__(*((unsigned __int16 *)this + 68), *((_DWORD *)this + 33))&& __PAIR64__(WORD2(v43), WORD1(v43)) == __PAIR64__(*((unsigned __int16 *)this + 70), *((unsigned __int16 *)this + 69))&& WORD3(v43) == *((unsigned __int16 *)this + 71)))
  {
    goto LABEL_82;
  }
  if (*((unsigned char *)this + 8))
  {
    std::chrono::steady_clock::time_point v8 = (AMCP::Time_Stamp_Historian *)*((void *)this + 2);
    AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v8);
    AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v8);
    *((unsigned char *)this + 8) = 0;
    int v7 = *((unsigned __int8 *)this + 152);
  }
  long long v9 = v41;
  *(_OWORD *)long long v6 = v40;
  *(_OWORD *)((char *)this + 104) = v9;
  v10.n128_u64[1] = *((void *)&v42 + 1);
  long long v11 = v43;
  *(_OWORD *)((char *)this + 120) = v42;
  *(_OWORD *)((char *)this + 136) = v11;
  if (!v7) {
    *((unsigned char *)this + 152) = 1;
  }
  v10.n128_u64[0] = v40;
  long long v38 = v40;
  uint64_t v39 = 0;
  uint64_t v12 = (AMCP::Time_Stamp_Historian *)*((void *)this + 2);
  if (*(double *)&v40 != 0.0 || *((void *)&v40 + 1))
  {
    uint64_t v13 = *((void *)v12 + 11);
    if (v13 == *((void *)v12 + 8)) {
      uint64_t v13 = *((void *)v12 + 9);
    }
    if (*(double *)&v40 == *(double *)(v13 - 24) && *(_OWORD *)(v13 - 16) == *((unint64_t *)&v40 + 1))
    {
      AMCP::Log::Scope_Registry::get(v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      char v31 = **(NSObject ***)buf;
      if (*(void *)v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v59);
      }
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        int v32 = pthread_self();
        mach_port_t v33 = pthread_mach_thread_np(v32);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v33;
        *(_WORD *)char v59 = 2080;
        *(void *)&v59[2] = "Time_Stamp_Historian.cpp";
        __int16 v60 = 1024;
        int v61 = 275;
        __int16 v62 = 2080;
        *(void *)int v63 = "not (not(new_time_stamp == m_time_stamp_buffer.back()))";
        _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s time stamp is a repeat", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"time stamp is a repeat", (uint64_t)&v49);
      std::logic_error::logic_error(&v50, &v49);
      v50.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v51, &v50);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      int v56 = -1;
      v51.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unint64_t v52 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v51);
      *(void *)&v63[6] = "BOOL AMCP::Time_Stamp_Historian::update(const Zero_Time_Stamp &)";
      *(void *)&v63[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
      *(_DWORD *)&v63[22] = 275;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v44);
      long long v47 = v44;
      uint64_t v48 = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      uint64_t v46 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if ((*(unsigned int (**)(void, __n128))(*(void *)v12 + 32))(*((void *)this + 2), v10))
    {
      *((void *)v12 + 4) = v39;
    }
    else if (v39 != *((void *)v12 + 4))
    {
      goto LABEL_62;
    }
    os_unfair_lock_lock((os_unfair_lock_t)v12 + 15);
    uint64_t v14 = *((void *)v12 + 11);
    if (v14 == *((void *)v12 + 8)) {
      uint64_t v14 = *((void *)v12 + 9);
    }
    BOOL v15 = *(double *)&v38 < *(double *)(v14 - 24) || *((void *)&v38 + 1) < *(void *)(v14 - 16);
    os_unfair_lock_unlock((os_unfair_lock_t)v12 + 15);
    if (!*((unsigned char *)v12 + 56) || v15)
    {
      if (*((unsigned char *)v12 + 56)) {
        int v16 = 1;
      }
      else {
        int v16 = v15;
      }
      if (v16 != 1) {
        goto LABEL_63;
      }
    }
    else
    {
      if ((*(unsigned int (**)(AMCP::Time_Stamp_Historian *))(*(void *)v12 + 24))(v12)) {
        (*(void (**)(AMCP::Time_Stamp_Historian *))(*(void *)v12 + 56))(v12);
      }
      if (*((unsigned char *)v12 + 20)
        && (*(unsigned int (**)(AMCP::Time_Stamp_Historian *))(*(void *)v12 + 24))(v12)
        && *((void *)&v38 + 1) > mach_absolute_time() + 24000)
      {
        kdebug_trace();
        os_unfair_lock_lock((os_unfair_lock_t)v12 + 15);
        os_unfair_lock_unlock((os_unfair_lock_t)v12 + 15);
      }
      else
      {
        if ((*(uint64_t (**)(AMCP::Time_Stamp_Historian *))(*(void *)v12 + 32))(v12)) {
          goto LABEL_63;
        }
        os_unfair_lock_lock((os_unfair_lock_t)v12 + 15);
        uint64_t v18 = *((void *)v12 + 11);
        if (v18 == *((void *)v12 + 8)) {
          uint64_t v18 = *((void *)v12 + 9);
        }
        LODWORD(v17) = *((_DWORD *)v12 + 4);
        double v19 = *(double *)(v18 - 24) + (double)v17;
        os_unfair_lock_unlock((os_unfair_lock_t)v12 + 15);
        if (*(double *)&v38 == v19) {
          goto LABEL_63;
        }
      }
    }
LABEL_62:
    kdebug_trace();
    AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(v12);
    AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(v12);
LABEL_63:
    kdebug_trace();
    kdebug_trace();
    (*(void (**)(AMCP::Time_Stamp_Historian *, long long *))(*(void *)v12 + 48))(v12, &v38);
    uint64_t v12 = (AMCP::Time_Stamp_Historian *)*((void *)this + 2);
  }
  uint64_t v20 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Time_Stamp_Historian *, __n128))(*(void *)v12 + 16))(v12, v10);
  if (v20 && *((unsigned char *)this + 152))
  {
    uint64_t v21 = *((void *)this + 2);
    if (!*(void *)(v21 + 144))
    {
      uint64_t v37 = std::logic_error::logic_error((std::logic_error *)buf, "circular_buffer");
      *(void *)os_workgroup_interval_data_opaque_s buf = MEMORY[0x1E4FBA4D8] + 16;
      boost::throw_exception<std::out_of_range>(v37);
    }
    uint64_t v23 = *(void *)(v21 + 120);
    uint64_t v22 = *(void *)(v21 + 128);
    if (v23 - v22 <= 0) {
      uint64_t v24 = 0x5555555555555555 * ((v23 - *(void *)(v21 + 112)) >> 3);
    }
    else {
      uint64_t v24 = 0;
    }
    uint64_t v25 = v22 + 24 * v24;
    double v26 = *(double *)v25;
    unint64_t v27 = *(void *)(v25 + 8);
    if (v26 == 0.0 && v27 == 0)
    {
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v34 = **(NSObject ***)buf;
      if (*(void *)v59) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v59);
      }
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = pthread_self();
        mach_port_t v36 = pthread_mach_thread_np(v35);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110402;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)char v59 = 2080;
        *(void *)&v59[2] = "IO_Clock.cpp";
        __int16 v60 = 1024;
        int v61 = 223;
        __int16 v62 = 2080;
        *(void *)int v63 = "not (newest_delta.is_non_zero())";
        *(_WORD *)&v63[8] = 2048;
        *(void *)&v63[10] = *((void *)&v38 + 1);
        *(_WORD *)&v63[18] = 2048;
        *(void *)&v63[20] = v38;
        _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s obtained a zero timestamp delta, after processing new zts host %llu sample %f", buf, 0x36u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"obtained a zero timestamp delta, after processing new zts host %llu sample %f", (uint64_t)&v49, *((void *)&v38 + 1), (void)v38);
      std::logic_error::logic_error(&v50, &v49);
      v50.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v51, &v50);
      uint64_t v53 = 0;
      uint64_t v54 = 0;
      uint64_t v55 = 0;
      int v56 = -1;
      v51.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      unint64_t v52 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v51);
      *(void *)&v63[6] = "BOOL AMCP::IO_Clock::process_new_time_stamp_internal(const Zero_Time_Stamp &)";
      *(void *)&v63[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/IO_Clock.cpp";
      *(_DWORD *)&v63[22] = 223;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v44);
      long long v47 = v44;
      uint64_t v48 = v45;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      uint64_t v46 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (*(_DWORD *)(v21 + 24) == 1) {
      double v29 = *(double *)(v21 + 40);
    }
    else {
      double v29 = (*(double (**)(void, double))(**((void **)this + 3) + 24))(*((void *)this + 3), (double)v27 / v26);
    }
    *((double *)this + 8) = v29;
    *((double *)this + 9) = 1.0 / v29;
  }
  if (((*(uint64_t (**)(void))(**((void **)this + 2) + 16))(*((void *)this + 2)) & 1) == 0)
  {
    if (*((unsigned char *)this + 152)) {
      *((unsigned char *)this + 152) = 0;
    }
    goto LABEL_82;
  }
  uint64_t v5 = 1;
LABEL_83:
  os_unfair_lock_unlock((os_unfair_lock_t)this + 20);
  return v5;
}

void sub_1BAB69A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void boost::throw_exception<std::out_of_range>(const std::logic_error *a1)
{
  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(void *)exception = &unk_1F148A978;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((void *)exception + 4) = 0;
  *((void *)exception + 5) = 0;
  *((void *)exception + 6) = 0;
  *((_DWORD *)exception + 14) = -1;
  *(void *)exception = &unk_1F1484820;
  *((void *)exception + 1) = &unk_1F1484850;
  *((void *)exception + 3) = &unk_1F1484878;
}

uint64_t boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1C18590C0](a1 + 8);
  return a1;
}

void non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(void *a1)
{
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  MEMORY[0x1C18590C0](a1 - 2);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  JUMPOUT(0x1C18590C0);
}

void non-virtual thunk to'boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  MEMORY[0x1C18590C0](a1);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)(a1 + 16) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));

  JUMPOUT(0x1C18590C0);
}

void boost::wrapexcept<std::out_of_range>::~wrapexcept(uint64_t a1)
{
  *(void *)(a1 + 24) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  MEMORY[0x1C18590C0](a1 + 8);

  JUMPOUT(0x1C1859840);
}

void boost::wrapexcept<std::out_of_range>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::out_of_range>::wrapexcept((uint64_t)exception, a1);
}

void sub_1BAB69EF0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::out_of_range>::wrapexcept(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_1F148A978;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(void *)(a1 + 8) = MEMORY[0x1E4FBA4D8] + 16;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = &unk_1F148A9F0;
  *(void *)(a1 + 32) = v4;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 24))(v4);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)a1 = &unk_1F1484820;
  *(void *)(a1 + 8) = &unk_1F1484850;
  *(void *)(a1 + 24) = &unk_1F1484878;
  return a1;
}

void boost::wrapexcept<std::out_of_range>::clone()
{
}

void sub_1BAB6A20C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::DAL::Mixing_Ring_Buffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::DAL::Mixing_Ring_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1460460;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::Mixing_Ring_Buffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1460460;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *std::pair<std::string,AMCP::Thing>::pair[abi:ne180100]<char const* const&,std::string const&,0>(void *a1, char *a2, long long *a3)
{
  long long v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  *(_OWORD *)(v5 + 3) = 0u;
  long long v6 = v5 + 3;
  void v6[4] = 0;
  *((_OWORD *)v6 + 1) = 0u;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v6, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    uint64_t v6[2] = *((void *)a3 + 2);
    *(_OWORD *)long long v6 = v7;
  }
  a1[7] = AMCP::Implementation::In_Place_Storage<std::string>::dispatch;
  return a1;
}

void sub_1BAB6A390(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unint64_t AMCP::DAL::DAL_Settings::DAL_Settings(unint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  default_resource = (std::pmr *)std::pmr::get_default_resource((std::pmr *)a1);
  *(void *)(a1 + 16) = default_resource;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = std::pmr::get_default_resource(default_resource);
  *(void *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 1065353216;
  uint64_t v6 = a2[1];
  if (v6)
  {
    uint64_t v7 = *a2;
    uint64_t v8 = *a2 + (v6 << 6);
    do
    {
      unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](v7);
      unint64_t v10 = v9;
      unint64_t v11 = *(void *)(a1 + 8);
      if (v11)
      {
        uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
        v12.i16[0] = vaddlv_u8(v12);
        unint64_t v13 = v12.u32[0];
        if (v12.u32[0] > 1uLL)
        {
          unint64_t v2 = v9;
          if (v9 >= v11) {
            unint64_t v2 = v9 % v11;
          }
        }
        else
        {
          unint64_t v2 = (v11 - 1) & v9;
        }
        uint64_t v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v2);
        if (v14)
        {
          for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
          {
            unint64_t v16 = *((void *)i + 1);
            if (v16 == v10)
            {
              if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, (unsigned __int8 *)v7)) {
                goto LABEL_46;
              }
            }
            else
            {
              if (v13 > 1)
              {
                if (v16 >= v11) {
                  v16 %= v11;
                }
              }
              else
              {
                v16 &= v11 - 1;
              }
              if (v16 != v2) {
                break;
              }
            }
          }
        }
      }
      uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 32) + 16))(*(void *)(a1 + 32), 80, 8);
      uint64_t v18 = v17;
      uint64_t v30 = v17;
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = v10;
      if (*(char *)(v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v17 + 16), *(const std::string::value_type **)v7, *(void *)(v7 + 8));
      }
      else
      {
        long long v19 = *(_OWORD *)v7;
        *(void *)(v17 + 32) = *(void *)(v7 + 16);
        *(_OWORD *)(v17 + 16) = v19;
      }
      *(_OWORD *)(v18 + 40) = 0u;
      *(void *)(v18 + 72) = 0;
      *(_OWORD *)(v18 + 56) = 0u;
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v7 + 56);
      if (v20) {
        v20(1, v7 + 24);
      }
      float v21 = (float)(unint64_t)(*(void *)(a1 + 40) + 1);
      float v22 = *(float *)(a1 + 48);
      if (!v11 || (float)(v22 * (float)v11) < v21)
      {
        BOOL v23 = (v11 & (v11 - 1)) != 0;
        if (v11 < 3) {
          BOOL v23 = 1;
        }
        unint64_t v24 = v23 | (2 * v11);
        unint64_t v25 = vcvtps_u32_f32(v21 / v22);
        if (v24 <= v25) {
          size_t v26 = v25;
        }
        else {
          size_t v26 = v24;
        }
        std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__rehash<true>(a1, v26);
        unint64_t v11 = *(void *)(a1 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v10 >= v11) {
            unint64_t v2 = v10 % v11;
          }
          else {
            unint64_t v2 = v10;
          }
        }
        else
        {
          unint64_t v2 = (v11 - 1) & v10;
        }
      }
      unint64_t v27 = *(uint64_t **)(*(void *)a1 + 8 * v2);
      if (v27)
      {
        *(void *)uint64_t v30 = *v27;
      }
      else
      {
        *(void *)uint64_t v30 = *(void *)(a1 + 24);
        *(void *)(a1 + 24) = v30;
        *(void *)(*(void *)a1 + 8 * v2) = a1 + 24;
        if (!*(void *)v30) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(*(void *)v30 + 8);
        if ((v11 & (v11 - 1)) != 0)
        {
          if (v28 >= v11) {
            v28 %= v11;
          }
        }
        else
        {
          v28 &= v11 - 1;
        }
        unint64_t v27 = (uint64_t *)(*(void *)a1 + 8 * v28);
      }
      *unint64_t v27 = v30;
LABEL_45:
      ++*(void *)(a1 + 40);
LABEL_46:
      v7 += 64;
    }
    while (v7 != v8);
  }
  return a1;
}

void sub_1BAB6A6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](a10, v11);
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(v10);
  _Unwind_Resume(a1);
}

AMCP::DAL::DALSupport *std::allocate_shared[abi:ne180100]<AMCP::DAL::File,std::allocator<AMCP::DAL::File>,CA::StreamDescription const&,AMCP::DAL::DAL_Settings &,void>(AMCP::DAL::DALSupport **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = operator new(0x28uLL);
  v6[1] = 0;
  uint64_t v6[2] = 0;
  void *v6 = &unk_1F1480328;
  uint64_t result = AMCP::DAL::File::File((AMCP::DAL::DALSupport *)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (AMCP::DAL::DALSupport *)v6;
  return result;
}

void sub_1BAB6A774(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,AMCP::Thing>::~pair(uint64_t a1)
{
  unint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 56);
  if (v2) {
    v2(0, a1 + 24, 0, 0);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node(a1, *(void **)(a1 + 24));
  uint64_t v2 = *(void *)a1;
  *(void *)a1 = 0;
  if (v2) {
    std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](*(void *)(a1 + 16), v2, *(void *)(a1 + 8));
  }
  return a1;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__deallocate_node(uint64_t result, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = (void *)*v2;
      std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>((uint64_t)(v2 + 2));
      uint64_t result = std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::deallocate[abi:ne180100](*(void *)(v3 + 32), (uint64_t)v2);
      uint64_t v2 = v4;
    }
    while (v4);
  }
  return result;
}

uint64_t std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 8 * a3, 8);
}

void std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>(uint64_t a1)
{
  uint64_t v2 = *(void (**)(void, uint64_t, void, void))(a1 + 56);
  if (v2) {
    v2(0, a1 + 24, 0, 0);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

uint64_t std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::deallocate[abi:ne180100](uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2, 80, 8);
}

void std::__shared_ptr_emplace<AMCP::DAL::File>::__on_zero_shared(uint64_t a1)
{
}

void std::__shared_ptr_emplace<AMCP::DAL::File>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1480328;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::DAL::File>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1480328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::__rehash<true>(unint64_t result, size_t __n)
{
  unint64_t v2 = result;
  if (__n == 1)
  {
    unint64_t v3 = 2;
  }
  else
  {
    unint64_t v3 = __n;
    if ((__n & (__n - 1)) != 0)
    {
      uint64_t result = std::__next_prime(__n);
      unint64_t v3 = result;
    }
  }
  int8x8_t v4 = *(int8x8_t *)(v2 + 8);
  if (v3 <= *(void *)&v4)
  {
    if (v3 >= *(void *)&v4) {
      return result;
    }
    uint64_t result = vcvtps_u32_f32((float)*(unint64_t *)(v2 + 40) / *(float *)(v2 + 48));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v10 = (uint8x8_t)vcnt_s8(v4), v10.i16[0] = vaddlv_u8(v10), v10.u32[0] > 1uLL))
    {
      uint64_t result = std::__next_prime(result);
    }
    else
    {
      uint64_t v11 = 1 << -(char)__clz(result - 1);
      if (result >= 2) {
        uint64_t result = v11;
      }
    }
    if (v3 <= result) {
      unint64_t v3 = result;
    }
    if (v3 >= *(void *)&v4) {
      return result;
    }
    if (!v3)
    {
      uint64_t v14 = *(void *)v2;
      *(void *)unint64_t v2 = 0;
      if (v14) {
        uint64_t result = std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](*(void *)(v2 + 16), v14, *(void *)(v2 + 8));
      }
      *(void *)(v2 + 8) = 0;
      return result;
    }
  }
  uint64_t result = std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>::allocate[abi:ne180100](v2 + 16, v3);
  uint64_t v5 = *(void *)v2;
  *(void *)unint64_t v2 = result;
  if (v5) {
    uint64_t result = std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>>::deallocate[abi:ne180100](*(void *)(v2 + 16), v5, *(void *)(v2 + 8));
  }
  uint64_t v6 = 0;
  *(void *)(v2 + 8) = v3;
  do
    *(void *)(*(void *)v2 + 8 * v6++) = 0;
  while (v3 != v6);
  uint64_t v7 = *(void **)(v2 + 24);
  if (v7)
  {
    unint64_t v8 = v7[1];
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v3);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      if (v8 >= v3) {
        v8 %= v3;
      }
    }
    else
    {
      v8 &= v3 - 1;
    }
    *(void *)(*(void *)v2 + 8 * v8) = v2 + 24;
    uint8x8_t v12 = (void *)*v7;
    if (*v7)
    {
      do
      {
        unint64_t v13 = v12[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v13 >= v3) {
            v13 %= v3;
          }
        }
        else
        {
          v13 &= v3 - 1;
        }
        if (v13 != v8)
        {
          if (!*(void *)(*(void *)v2 + 8 * v13))
          {
            *(void *)(*(void *)v2 + 8 * v13) = v7;
            goto LABEL_30;
          }
          *uint64_t v7 = *v12;
          void *v12 = **(void **)(*(void *)v2 + 8 * v13);
          **(void **)(*(void *)v2 + 8 * v13) = v12;
          uint8x8_t v12 = v7;
        }
        unint64_t v13 = v8;
LABEL_30:
        uint64_t v7 = v12;
        uint8x8_t v12 = (void *)*v12;
        unint64_t v8 = v13;
      }
      while (v12);
    }
  }
  return result;
}

void std::__hash_node_destructor<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8)) {
    std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>::destroy[abi:ne180100]<std::pair<std::string const,AMCP::Thing>>(a2 + 16);
  }
  if (a2)
  {
    uint64_t v4 = **(void **)a1;
    std::allocator_traits<std::pmr::polymorphic_allocator<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *>>>::deallocate[abi:ne180100](v4, a2);
  }
}

uint64_t std::pmr::polymorphic_allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<std::string,AMCP::Thing>,void *> *> *>::allocate[abi:ne180100](uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  unint64_t v2 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v2();
}

uint64_t AMCP::DAL::Ring_Buffer_Base::get_length_in_frames(AMCP::DAL::Ring_Buffer_Base *this, uint64_t a2)
{
  uint64_t result = *(void *)(a2 + 88);
  if (result) {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = *(_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)this = 2;
  *((void *)this + 1) = v5;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = v6;
  return result;
}

BOOL caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::intersection(uint64_t a1, void *a2, void *a3)
{
  unint64_t v3 = (AMCP::DAL::DAL_Time *)a3;
  long long v6 = (AMCP::DAL::DAL_Time *)(a3 + 5);
  BOOL result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a3, (AMCP::DAL::DAL_Time *)(a3 + 5));
  if (!result)
  {
    *(_OWORD *)a1 = *(_OWORD *)v3;
    uint64_t v13 = *((void *)v3 + 3);
    *(void *)(a1 + 16) = *((void *)v3 + 2);
    *(void *)(a1 + 24) = v13;
    uint64_t v14 = *((void *)v3 + 4);
    *(void *)(a1 + 32) = v14;
    if (v14) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v6;
    uint64_t v15 = *((void *)v6 + 2);
    uint64_t v16 = *((void *)v3 + 8);
    uint64_t v12 = *((void *)v3 + 9);
    goto LABEL_17;
  }
  BOOL result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)a2, (AMCP::DAL::DAL_Time *)(a2 + 5));
  if (!result)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v17 = a2[3];
    *(void *)(a1 + 16) = a2[2];
    *(void *)(a1 + 24) = v17;
    uint64_t v18 = a2[4];
    *(void *)(a1 + 32) = v18;
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    uint64_t v15 = a2[7];
    uint64_t v16 = a2[8];
    uint64_t v12 = a2[9];
LABEL_17:
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v16;
    goto LABEL_18;
  }
  if (AMCP::DAL::DAL_Time::operator<(v3, (AMCP::DAL::DAL_Time *)a2)) {
    unint64_t v3 = (AMCP::DAL::DAL_Time *)a2;
  }
  BOOL result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 5), v6);
  if (result) {
    unint64_t v8 = (AMCP::DAL::DAL_Time *)(a2 + 5);
  }
  else {
    unint64_t v8 = v6;
  }
  *(_OWORD *)a1 = *(_OWORD *)v3;
  uint64_t v9 = *((void *)v3 + 3);
  *(void *)(a1 + 16) = *((void *)v3 + 2);
  *(void *)(a1 + 24) = v9;
  uint64_t v10 = *((void *)v3 + 4);
  *(void *)(a1 + 32) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v8;
  uint64_t v11 = *((void *)v8 + 3);
  *(void *)(a1 + 56) = *((void *)v8 + 2);
  *(void *)(a1 + 64) = v11;
  uint64_t v12 = *((void *)v8 + 4);
LABEL_18:
  *(void *)(a1 + 72) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  unint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    unint64_t v3 = (caulk::rt_safe_memory_resource ***)result;
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    long long v6 = v1;
    if ((caulk::rt_safe_memory_resource *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range,0>(v4);
      }
      while ((caulk::rt_safe_memory_resource *)v4 != v2);
      long long v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6[2] - v5) >> 5);
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<AMCP::DAL::Buffer_Time_Translator::Translation_Range,0>(uint64_t a1)
{
  unint64_t v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x2AAAAAAAAAAAAABLL)
  {
    unint64_t v2 = result;
    BOOL result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  unint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    unint64_t v3 = (caulk::rt_safe_memory_resource ***)result;
    uint64_t v4 = v1[1];
    uint64_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    long long v6 = v1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v4 = (caulk::rt_safe_memory_resource *)((char *)v4 - 112);
        std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,0>(v4);
      }
      while (v4 != v2);
      long long v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * ((v6[2] - v5) >> 4);
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

void std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range::Direct_Write_Range,0>(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x24924924924924ALL)
  {
    unint64_t v2 = result;
    BOOL result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void AMCP::DAL::PCM_File_Handler::get_name(AMCP::DAL::PCM_File_Handler *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

__n128 AMCP::DAL::PCM_File_Handler::get_format@<Q0>(AMCP::DAL::PCM_File_Handler *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 8);
  long long v3 = *(_OWORD *)((char *)this + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *((void *)this + 5);
  return result;
}

OpaqueExtAudioFile *AMCP::DAL::PCM_File_Reader::close(AMCP::DAL::PCM_File_Reader *this)
{
  __n128 result = (OpaqueExtAudioFile *)*((void *)this + 6);
  if (result)
  {
    __n128 result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    *((void *)this + 6) = 0;
  }
  return result;
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_File_Reader::read_data@<X0>(ExtAudioFileRef *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (!a1[6])
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v46 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      long long v47 = pthread_self();
      mach_port_t v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v48;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "PCM_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 88;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::Read: m_audio_File is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v67);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"PCM_File_Reader::Read: m_audio_File is null", (uint64_t)&ioData);
    std::logic_error::logic_error((std::logic_error *)&v53, &ioData);
    v53.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v53);
    *(void *)&__p[24] = 0;
    *(void *)&__p[32] = 0;
    *(void *)&long long v71 = 0;
    DWORD2(v71) = -1;
    *(void *)long long __p = &unk_1F1489CC8;
    *(void *)&__p[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)__p);
    *(void *)&buf[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const Wri"
                          "table_Range &) const";
    *(void *)&long long v77 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
    DWORD2(v77) = 88;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v55);
    *(_OWORD *)&v61[8] = *(_OWORD *)v55;
    *(void *)int v61 = &unk_1F148AA90;
    *(void *)&long long v62 = *(void *)&v55[16];
    memset(v55, 0, sizeof(v55));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v67, a2);
  uint64_t v6 = v67;
  uint64_t v5 = v68;
  if (v67 == v68) {
    goto LABEL_43;
  }
  unsigned int v7 = 0;
  do
  {
    *(_OWORD *)os_workgroup_interval_data_opaque_s buf = *(_OWORD *)v6;
    long long v8 = *(_OWORD *)(v6 + 16);
    *(void *)&buf[32] = *(void *)(v6 + 32);
    *(_OWORD *)&buf[16] = v8;
    *(void *)&long long v77 = *(void *)(v6 + 40);
    uint64_t v9 = *(void *)(v6 + 48);
    *((void *)&v77 + 1) = v9;
    if (v9) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
    }
    long long v10 = *(_OWORD *)(v6 + 56);
    unint64_t v79 = *(std::__shared_weak_count **)(v6 + 72);
    long long v78 = v10;
    *(void *)&long long v80 = *(void *)(v6 + 80);
    uint64_t v11 = *(void *)(v6 + 88);
    *((void *)&v80 + 1) = v11;
    if (v11) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(void *)(v6 + 96);
    uint64_t v81 = v12;
    uint64_t v13 = *(std::__shared_weak_count **)(v6 + 104);
    int v82 = v13;
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v81;
      uint64_t v14 = v82;
    }
    else
    {
      uint64_t v14 = 0;
    }
    double v16 = *(double *)buf;
    double v15 = *(double *)&buf[8];
    AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list((AMCP::DAL::Writable_Range::Direct_Write_Range *)&ioData, v12, v14);
    UInt32 v17 = vcvtmd_s64_f64(v15 - v16);
    UInt32 ioNumberFrames = v17;
    uint64_t v18 = (AMCP::Log::Scope_Registry *)ExtAudioFileRead(a1[6], &ioNumberFrames, (AudioBufferList *)ioData.__r_.__value_.__l.__data_);
    if (v18)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      uint64_t v37 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        long long v38 = pthread_self();
        mach_port_t v39 = pthread_mach_thread_np(v38);
        *(_DWORD *)long long __p = 67109890;
        *(_DWORD *)&__p[4] = v39;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 98;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (the_error == noErr)";
        _os_log_error_impl(&dword_1BAA78000, v37, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Reader::PCM_File_Reader: reading the data failed", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"PCM_File_Reader::PCM_File_Reader: reading the data failed", (uint64_t)&v53);
      std::logic_error::logic_error(&v60, &v53);
      v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v61, &v60);
      long long v62 = 0uLL;
      uint64_t v63 = 0;
      int v64 = -1;
      *(void *)int v61 = &unk_1F1489CC8;
      *(void *)&v61[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)v61);
      *(void *)&__p[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const W"
                            "ritable_Range &) const";
      *(void *)&long long v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      DWORD2(v71) = 98;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v58);
      *(void *)uint64_t v55 = &unk_1F148AA90;
      *(_OWORD *)&v55[8] = v58;
      uint64_t v56 = v59;
      long long v58 = 0uLL;
      uint64_t v59 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    UInt32 v19 = ioNumberFrames;
    if (ioNumberFrames > v17)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      long long v40 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        long long v41 = pthread_self();
        mach_port_t v42 = pthread_mach_thread_np(v41);
        *(_DWORD *)long long __p = 67109890;
        *(_DWORD *)&__p[4] = v42;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 99;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (the_frames_read <= the_frames_to_read)";
        _os_log_error_impl(&dword_1BAA78000, v40, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v53);
      std::logic_error::logic_error(&v60, &v53);
      v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v61, &v60);
      long long v62 = 0uLL;
      uint64_t v63 = 0;
      int v64 = -1;
      *(void *)int v61 = &unk_1F1489CC8;
      *(void *)&v61[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)v61);
      *(void *)&__p[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const W"
                            "ritable_Range &) const";
      *(void *)&long long v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      DWORD2(v71) = 99;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v58);
      *(void *)uint64_t v55 = &unk_1F148AA90;
      *(_OWORD *)&v55[8] = v58;
      uint64_t v56 = v59;
      long long v58 = 0uLL;
      uint64_t v59 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (!ioNumberFrames)
    {
      AMCP::Log::Scope_Registry::get(v18);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      long long v43 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        long long v44 = pthread_self();
        mach_port_t v45 = pthread_mach_thread_np(v44);
        *(_DWORD *)long long __p = 67109890;
        *(_DWORD *)&__p[4] = v45;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "PCM_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 100;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (the_frames_read > 0)";
        _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v65);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v53);
      std::logic_error::logic_error(&v60, &v53);
      v60.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)v61, &v60);
      long long v62 = 0uLL;
      uint64_t v63 = 0;
      int v64 = -1;
      *(void *)int v61 = &unk_1F1489CC8;
      *(void *)&v61[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)v61);
      *(void *)&__p[32] = "virtual File_Read_Result AMCP::DAL::PCM_File_Reader::read_data(const DAL_Settings &, const W"
                            "ritable_Range &) const";
      *(void *)&long long v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Reader.cpp";
      DWORD2(v71) = 100;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v58);
      *(void *)uint64_t v55 = &unk_1F148AA90;
      *(_OWORD *)&v55[8] = v58;
      uint64_t v56 = v59;
      long long v58 = 0uLL;
      uint64_t v59 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (ioNumberFrames != v17)
    {
      *(_OWORD *)int v61 = *(_OWORD *)&buf[16];
      *(void *)&v61[16] = *(void *)&buf[32];
      long long v20 = v77;
      long long v62 = v77;
      float v21 = (std::__shared_weak_count *)*((void *)&v77 + 1);
      if (*((void *)&v77 + 1))
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v77 + 1) + 8), 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v20 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      else
      {
        *((void *)&v20 + 1) = 0;
      }
      LODWORD(v53.__r_.__value_.__l.__data_) = 2;
      *(_OWORD *)&v53.__r_.__value_.__r.__words[1] = COERCE_UNSIGNED_INT64((double)v19);
      long long v54 = v20;
      boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v55, (uint64_t)v61, (uint64_t)&v53);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)__p, (const AMCP::DAL::DAL_Time *)v61, (const AMCP::DAL::DAL_Time *)v55);
      *(_OWORD *)&buf[16] = *(_OWORD *)__p;
      *(void *)&buf[32] = *(void *)&__p[16];
      long long v22 = *(_OWORD *)&__p[24];
      *(void *)&__p[24] = 0;
      *(void *)&__p[32] = 0;
      BOOL v23 = (std::__shared_weak_count *)*((void *)&v77 + 1);
      long long v77 = v22;
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      long long v78 = v71;
      unint64_t v79 = v72;
      long long v24 = v73;
      long long v73 = 0uLL;
      unint64_t v25 = (std::__shared_weak_count *)*((void *)&v80 + 1);
      long long v80 = v24;
      if (v25)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
        if (*((void *)&v73 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v73 + 1));
        }
      }
      if (*(void *)&__p[32]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[32]);
      }
      if (v57) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v57);
      }
      if (*((void *)&v54 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v54 + 1));
      }
      if (v21) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v51, "file_reader_node");
    uint64_t v26 = v51;
    v69[0] = v52;
    *(void *)((char *)v69 + 7) = *(void *)((char *)&v52 + 7);
    char v27 = HIBYTE(v52);
    uint64_t v51 = 0;
    long long v52 = 0uLL;
    *(_DWORD *)long long __p = 0;
    *(void *)&__p[8] = v26;
    *(void *)&__p[16] = v69[0];
    *(void *)&__p[23] = *(void *)((char *)v69 + 7);
    __p[31] = v27;
    v69[0] = 0;
    *(void *)((char *)v69 + 7) = 0;
    *(void *)&__p[32] = 0;
    LODWORD(v71) = 0;
    AMCP::DAL::Writable_Range::commit_direct_write(*(void *)(a2 + 80), (uint64_t)__p, (uint64_t)buf);
    UInt32 v28 = ioNumberFrames;
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&ioData, 0);
    std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&ioData.__r_.__value_.__l.__size_);
    if (v82) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v82);
    }
    if (*((void *)&v80 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v80 + 1));
    }
    if (*((void *)&v77 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v77 + 1));
    }
    v7 += v28;
    v6 += 112;
  }
  while (v6 != v5);
  if (!v7)
  {
LABEL_43:
    *(unsigned char *)a3 = 0;
    *(unsigned char *)(a3 + 80) = 0;
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    unint64_t v29 = *(void *)(a2 + 24);
    *(void *)&__p[16] = *(void *)(a2 + 16);
    *(void *)&__p[24] = v29;
    uint64_t v30 = *(std::__shared_weak_count **)(a2 + 32);
    *(void *)&__p[32] = v30;
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v50 = v29;
      *((void *)&v50 + 1) = v30;
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v50 = v29;
    }
    LODWORD(ioData.__r_.__value_.__l.__data_) = 2;
    *(double *)&ioData.__r_.__value_.__l.__size_ = (double)v7;
    ioData.__r_.__value_.__r.__words[2] = 0;
    long long v75 = v50;
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v61, (uint64_t)__p, (uint64_t)&ioData);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)__p, (const AMCP::DAL::DAL_Time *)v61);
    if (*((void *)&v62 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
    }
    if (*((void *)&v75 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v75 + 1));
    }
    *(_OWORD *)a3 = *(_OWORD *)buf;
    uint64_t v31 = *(void *)&buf[24];
    *(void *)(a3 + 16) = *(void *)&buf[16];
    *(void *)(a3 + 24) = v31;
    uint64_t v32 = *(void *)&buf[32];
    *(void *)(a3 + 32) = *(void *)&buf[32];
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(a3 + 40) = v77;
    uint64_t v33 = *((void *)&v78 + 1);
    *(void *)(a3 + 56) = v78;
    *(void *)(a3 + 64) = v33;
    uint64_t v34 = v79;
    *(void *)(a3 + 72) = v79;
    if (v34)
    {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v35 = v79;
      *(unsigned char *)(a3 + 80) = 1;
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
    }
    else
    {
      *(unsigned char *)(a3 + 80) = 1;
    }
    if (*(void *)&buf[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
  *(void *)os_workgroup_interval_data_opaque_s buf = &v67;
  return std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1BAB6BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&a64, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](a14);
  int v66 = *(std::__shared_weak_count **)(v64 - 136);
  if (v66) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v66);
  }
  uint64_t v67 = *(std::__shared_weak_count **)(v64 - 152);
  if (v67) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v67);
  }
  uint64_t v68 = *(std::__shared_weak_count **)(v64 - 192);
  if (v68) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  }
  *(void *)(v64 - 240) = &a48;
  std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v64 - 240));
  _Unwind_Resume(a1);
}

AMCP::DAL::DAL_Time *boost::operators_impl::operator+(AMCP::DAL::DAL_Time *a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *((void *)a1 + 2) = *(void *)(a2 + 16);
  *((void *)a1 + 3) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *((void *)a1 + 4) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return AMCP::DAL::DAL_Time::operator+=(a1, a3);
}

void sub_1BAB6C11C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *__n128 result = a2;
  if (v2)
  {
    uint64_t v4 = v2;
    uint64_t v3 = result[4];
    if (!v3) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    return (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v4);
  }
  return result;
}

void *std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void AMCP::DAL::PCM_File_Reader::~PCM_File_Reader(AMCP::DAL::PCM_File_Reader *this)
{
  AMCP::DAL::PCM_File_Reader::~PCM_File_Reader(this);

  JUMPOUT(0x1C1859840);
}

{
  OpaqueExtAudioFile *v2;

  *(void *)this = &unk_1F14604B0;
  uint64_t v2 = (OpaqueExtAudioFile *)*((void *)this + 6);
  if (v2)
  {
    ExtAudioFileDispose(v2);
    *((void *)this + 6) = 0;
  }
  *(void *)this = &unk_1F1489E00;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
}

__n128 AMCP::DAL::DAL_Settings::at_or<std::string>(std::string *a1, void *a2, unsigned __int8 *a3, __n128 *a4)
{
  uint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, a3);
  if (v6)
  {
    AMCP::Thing::convert_to<std::string>(a1, (uint64_t)(v6 + 40));
  }
  else
  {
    __n128 result = *a4;
    *(__n128 *)&a1->__r_.__value_.__l.__data_ = *a4;
    a1->__r_.__value_.__r.__words[2] = a4[1].n128_u64[0];
    a4->n128_u64[1] = 0;
    a4[1].n128_u64[0] = 0;
    a4->n128_u64[0] = 0;
  }
  return result;
}

__n128 boost::enable_error_info<std::system_error>(std::runtime_error *a1, uint64_t a2)
{
  uint64_t v3 = (__n128 *)std::runtime_error::runtime_error(a1, (const std::runtime_error *)a2);
  __n128 result = *(__n128 *)(a2 + 16);
  v3[1] = result;
  v3[3].n128_u64[0] = 0;
  v3[3].n128_u64[1] = 0;
  v3[4].n128_u32[0] = -1;
  v3->n128_u64[0] = (unint64_t)&unk_1F1489DB8;
  v3[2].n128_u64[0] = (unint64_t)&unk_1F1489DE0;
  v3[2].n128_u64[1] = 0;
  return result;
}

uint64_t boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 72) = &unk_1F148A978;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 32) = &unk_1F148A9F0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_1F1489D18;
  *(void *)(a1 + 32) = &unk_1F1489D50;
  *(void *)(a1 + 72) = &unk_1F1489D88;
  uint64_t v11 = 0;
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(void *)v7 + 40))(&v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt(&v11, v10);
    boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v10);
    uint64_t v8 = v11;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::adopt((uint64_t *)(a1 + 40), v8);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&v11);
  return a1;
}

{
  std::runtime_error *v4;
  uint64_t v5;
  long long v6;

  *(void *)(a1 + 72) = &unk_1F148A978;
  uint64_t v4 = std::runtime_error::runtime_error((std::runtime_error *)a1, (const std::runtime_error *)a2);
  v4->__vftable = (std::runtime_error_vtbl *)(MEMORY[0x1E4FBA448] + 16);
  v4[1] = *(std::runtime_error *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &unk_1F148A9F0;
  *(void *)(a1 + 40) = v5;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 24))(v5);
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v6;
  *(void *)a1 = &unk_1F1489D18;
  *(void *)(a1 + 32) = &unk_1F1489D50;
  *(void *)(a1 + 72) = &unk_1F1489D88;
  return a1;
}

void sub_1BAB6C578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(v10);
  _Unwind_Resume(a1);
}

void boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>()
{
}

void sub_1BAB6C720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  boost::detail::shared_count::~shared_count((atomic_uint **)va);
  _Unwind_Resume(a1);
}

void sub_1BAB6C870(_Unwind_Exception *a1)
{
  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x1C1859840);
}

void boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
  *(void *)(a1 + 32) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));

  std::runtime_error::~runtime_error((std::runtime_error *)a1);
}

{
  uint64_t vars8;

  *(void *)(a1 + 32) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 40));
  std::runtime_error::~runtime_error((std::runtime_error *)a1);

  JUMPOUT(0x1C1859840);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(void *a1)
{
}

{
  char *v1;
  uint64_t vars8;

  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 40);
  *((void *)v1 + 4) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)v1 + 5);

  std::runtime_error::~runtime_error((std::runtime_error *)v1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(void *a1)
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::rethrow(uint64_t a1)
{
  exception = __cxa_allocate_exception(0x50uLL);
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)exception, a1);
}

void sub_1BAB6CAA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone()
{
}

void boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone()
{
}

void sub_1BAB6CCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a9);
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(&a10);
  boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(v10);
  MEMORY[0x1C1859840](v10, 0x10F1C4044841AE3);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::~clone_impl(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error(v1);
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(uint64_t a1)
{
}

void non-virtual thunk to'boost::exception_detail::error_info_injector<std::system_error>::~error_info_injector(void *a1)
{
  uint64_t v1 = (std::runtime_error *)(a1 - 4);
  *a1 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);

  std::runtime_error::~runtime_error(v1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v6 == v12)
    {
      if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

void ADS::SliderControl::SetPropertyData(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, _DWORD *a8, _DWORD *a9, unint64_t *a10, unsigned __int8 a11)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a4 == 1935962738)
  {
    if (a7 != 8)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v41 = 136315394;
        *(void *)&v41[4] = "ADS_SliderControl.cpp";
        __int16 v42 = 1024;
        int v43 = 142;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SliderControl::GetPropertyData: wrong size for the data for kAudioSliderControlPropertyRange", v41, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 561211770;
    }
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v18 = a1 + 56;
    *(void *)long long v41 = a1 + 56;
    v41[8] = (*(uint64_t (**)(uint64_t))(v19 + 16))(a1 + 56);
    *(_DWORD *)(v18 + 92) = *a8;
    *(_DWORD *)(v18 + 96) = a8[1];
    *a9 = 1;
    int v14 = *(_DWORD *)(v18 - 4);
    double v15 = (int *)a10[1];
    unint64_t v20 = a10[2];
    if ((unint64_t)v15 < v20)
    {
      int v17 = 1935962738;
      goto LABEL_9;
    }
    unint64_t v28 = 0x1555555555555555;
    BOOL v23 = (int *)*a10;
    unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - *a10) >> 2);
    unint64_t v30 = v29 + 1;
    if (v29 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v23) >> 2);
    if (2 * v31 > v30) {
      unint64_t v30 = 2 * v31;
    }
    if (v31 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v28 = v30;
    }
    if (v28)
    {
      unint64_t v28 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v28);
      BOOL v23 = (int *)*a10;
      double v15 = (int *)a10[1];
    }
    else
    {
      uint64_t v32 = 0;
    }
    uint64_t v33 = (_DWORD *)(v28 + 12 * v29);
    unint64_t v34 = v28 + 12 * v32;
    *uint64_t v33 = 1935962738;
    v33[1] = v14;
    uint64_t v33[2] = 0;
    float v21 = v33 + 3;
    if (v15 != v23)
    {
      do
      {
        uint64_t v37 = *(void *)(v15 - 3);
        v15 -= 3;
        int v38 = v15[2];
        *(void *)(v33 - 3) = v37;
        v33 -= 3;
        uint64_t v33[2] = v38;
      }
      while (v15 != v23);
      goto LABEL_34;
    }
LABEL_35:
    *a10 = (unint64_t)v33;
    a10[1] = (unint64_t)v21;
    a10[2] = v34;
    if (v23) {
      operator delete(v23);
    }
    goto LABEL_37;
  }
  if (*(_DWORD *)a4 == 1935962742)
  {
    if (a7 != 4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long v41 = 136315394;
        *(void *)&v41[4] = "ADS_SliderControl.cpp";
        __int16 v42 = 1024;
        int v43 = 128;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  ADS::SliderControl::GetPropertyData: wrong size for the data for kAudioSliderControlPropertyValue", v41, 0x12u);
      }
      mach_port_t v39 = __cxa_allocate_exception(0x10uLL);
      *(void *)mach_port_t v39 = off_1F148A5D8;
      uint64_t v39[2] = 561211770;
    }
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v12 = a1 + 56;
    *(void *)long long v41 = a1 + 56;
    v41[8] = (*(uint64_t (**)(uint64_t))(v13 + 16))(a1 + 56);
    *(_DWORD *)(v12 + 88) = *a8;
    *a9 = 1;
    int v14 = *(_DWORD *)(v12 - 4);
    double v15 = (int *)a10[1];
    unint64_t v16 = a10[2];
    if ((unint64_t)v15 < v16)
    {
      int v17 = 1935962742;
LABEL_9:
      *double v15 = v17;
      v15[1] = v14;
      uint64_t v15[2] = 0;
      float v21 = v15 + 3;
LABEL_37:
      a10[1] = (unint64_t)v21;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v41);
      return;
    }
    unint64_t v22 = 0x1555555555555555;
    BOOL v23 = (int *)*a10;
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)v15 - *a10) >> 2);
    unint64_t v25 = v24 + 1;
    if (v24 + 1 > 0x1555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v23) >> 2);
    if (2 * v26 > v25) {
      unint64_t v25 = 2 * v26;
    }
    if (v26 < 0xAAAAAAAAAAAAAAALL) {
      unint64_t v22 = v25;
    }
    if (v22)
    {
      unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AudioObjectPropertyAddress>>(v22);
      BOOL v23 = (int *)*a10;
      double v15 = (int *)a10[1];
    }
    else
    {
      uint64_t v27 = 0;
    }
    uint64_t v33 = (_DWORD *)(v22 + 12 * v24);
    unint64_t v34 = v22 + 12 * v27;
    *uint64_t v33 = 1935962742;
    v33[1] = v14;
    uint64_t v33[2] = 0;
    float v21 = v33 + 3;
    if (v15 != v23)
    {
      do
      {
        uint64_t v35 = *(void *)(v15 - 3);
        v15 -= 3;
        int v36 = v15[2];
        *(void *)(v33 - 3) = v35;
        v33 -= 3;
        uint64_t v33[2] = v36;
      }
      while (v15 != v23);
LABEL_34:
      BOOL v23 = (int *)*a10;
      goto LABEL_35;
    }
    goto LABEL_35;
  }

  ADS::BaseObject::SetPropertyData(a1, a2, a3, a4, a5, a6, a7, (uint64_t)a8, a9, a10, a11);
}

void sub_1BAB6D44C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void ADS::SliderControl::GetPropertyData(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6, unsigned int a7, unsigned int *a8, char *a9)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (a4->mSelector == 1935962738)
  {
    if (a7 > 7)
    {
      uint64_t v14 = *((void *)this + 7);
      uint64_t v13 = (char *)this + 56;
      *(void *)uint64_t v18 = (char *)this + 56;
      v18[8] = (*(uint64_t (**)(char *))(v14 + 16))((char *)this + 56);
      *(_DWORD *)a9 = *((_DWORD *)v13 + 23);
      *((_DWORD *)a9 + 1) = *((_DWORD *)v13 + 24);
      unsigned int v12 = 8;
      goto LABEL_7;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v18 = 136315394;
      *(void *)&v18[4] = "ADS_SliderControl.cpp";
      __int16 v19 = 1024;
      int v20 = 108;
      double v15 = MEMORY[0x1E4F14500];
      unint64_t v16 = "%25s:%-5d  ADS::SliderControl::GetPropertyData: not enough space for the return value of kAudioSliderControlPropertyRange";
      goto LABEL_15;
    }
LABEL_16:
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 561211770;
  }
  if (a4->mSelector == 1935962742)
  {
    if (a7 > 3)
    {
      uint64_t v11 = *((void *)this + 7);
      uint64_t v10 = (char *)this + 56;
      *(void *)uint64_t v18 = (char *)this + 56;
      v18[8] = (*(uint64_t (**)(char *))(v11 + 16))((char *)this + 56);
      *(_DWORD *)a9 = *((_DWORD *)v10 + 22);
      unsigned int v12 = 4;
LABEL_7:
      *a8 = v12;
      CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)v18);
      return;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v18 = 136315394;
      *(void *)&v18[4] = "ADS_SliderControl.cpp";
      __int16 v19 = 1024;
      int v20 = 99;
      double v15 = MEMORY[0x1E4F14500];
      unint64_t v16 = "%25s:%-5d  ADS::SliderControl::GetPropertyData: not enough space for the return value of kAudioSliderControlPropertyValue";
LABEL_15:
      _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, v16, v18, 0x12u);
      goto LABEL_16;
    }
    goto LABEL_16;
  }

  ADS::Control::GetPropertyData(this, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t ADS::SliderControl::GetPropertyDataSize(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4, unsigned int a5, const void *a6)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  uint64_t v7 = 4;
  if ((int)a4->mSelector <= 1935962737)
  {
    if (mSelector != 1667591277 && mSelector != 1668506480) {
      return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
    }
    return v7;
  }
  if (mSelector == 1935962742) {
    return v7;
  }
  if (mSelector == 1935962738) {
    return 8;
  }
  return ADS::BaseObject::GetPropertyDataSize(this, a2, a3, a4, a5, a6);
}

uint64_t ADS::SliderControl::IsPropertySettable(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935962737)
  {
    if (mSelector == 1935962738 || mSelector == 1935962742) {
      return 1;
    }
  }
  else if (mSelector == 1667591277 || mSelector == 1668506480)
  {
    return 0;
  }
  return ADS::BaseObject::IsPropertySettable(this, a2, a3, a4);
}

BOOL ADS::SliderControl::HasProperty(ADS::SliderControl *this, unsigned int a2, int a3, const AudioObjectPropertyAddress *a4)
{
  AudioObjectPropertySelector mSelector = a4->mSelector;
  if ((int)a4->mSelector > 1935962737)
  {
    BOOL v5 = mSelector == 1935962738;
    int v6 = 1935962742;
  }
  else
  {
    BOOL v5 = mSelector == 1667591277;
    int v6 = 1668506480;
  }
  return v5 || mSelector == v6 || ADS::BaseObject::HasProperty(this, a2, a3, a4);
}

void ADS::SliderControl::~SliderControl(ADS::SliderControl *this)
{
  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::SliderControl *)((char *)this + 56));
  ADS::BaseObject::~BaseObject(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1F147E368;
  CADeprecated::CAMutex::~CAMutex((ADS::SliderControl *)((char *)this + 56));

  ADS::BaseObject::~BaseObject(this);
}

semaphore_t *ca::sync::semaphore::semaphore(semaphore_t *semaphore)
{
  *semaphore_t semaphore = 0;
  *((unsigned char *)semaphore + 4) = 0;
  uint64_t v2 = (const char *)semaphore_create(*MEMORY[0x1E4F14960], semaphore, 0, 0);
  ca::mach::throw_if_mach_error((uint64_t)"semaphore_create", v2);
  *((unsigned char *)semaphore + 4) = 1;
  *((void *)semaphore + 1) = 0;
  return semaphore;
}

void ca::sync::semaphore::~semaphore(ca::sync::semaphore *this)
{
  signed int v1 = atomic_load((unsigned int *)this + 2);
  if (v1 < *((_DWORD *)this + 3)) {
    __assert_rtn("~semaphore", "semaphore.cpp", 22, "mCounter >= mOriginalCounter");
  }
  if (*((unsigned char *)this + 4))
  {
    if (*(_DWORD *)this) {
      semaphore_destroy(*MEMORY[0x1E4F14960], *(_DWORD *)this);
    }
  }
}

void AMCP::Meta::Device::~Device(std::condition_variable *this)
{
  AMCP::Meta::Device::~Device(this);

  JUMPOUT(0x1C1859840);
}

{
  std::mutex *v2;
  const void *v3;
  const void *sig;
  std::__shared_weak_count *v5;
  void *v6;
  const void *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void **v10;

  this->__cv_.__sig = (uint64_t)&unk_1F1460598;
  uint64_t v2 = (std::mutex *)&this[3].__cv_.__opaque[24];
  std::condition_variable::~condition_variable(this + 6);
  std::condition_variable::~condition_variable(this + 5);
  std::mutex::~mutex(v2);
  uint64_t v10 = (void **)&this[2].__cv_.__opaque[32];
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v10 = (void **)&this[2].__cv_.__opaque[8];
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v10);
  uint64_t v3 = *(const void **)this[2].__cv_.__opaque;
  if (v3) {
    CFRelease(v3);
  }
  sig = (const void *)this[2].__cv_.__sig;
  if (sig) {
    CFRelease(sig);
  }
  BOOL v5 = *(std::__shared_weak_count **)&this[1].__cv_.__opaque[32];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  int v6 = *(void **)this[1].__cv_.__opaque;
  if (v6)
  {
    *(void *)&this[1].__cv_.__opaque[8] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (const void *)this[1].__cv_.__sig;
  if (v7) {
    CFRelease(v7);
  }
  unint64_t v8 = *(std::__shared_weak_count **)&this->__cv_.__opaque[24];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  this->__cv_.__sig = (uint64_t)&unk_1F146D188;
  unint64_t v9 = *(std::__shared_weak_count **)&this->__cv_.__opaque[8];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void AMCP::Meta::Device::update_cached_properties_from_composition(AMCP::Meta::Device *this)
{
  uint64_t v2 = *((void *)this + 10);
  uint64_t Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  while (v4 != v5)
  {
    Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)&v44, v4);
    mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::StringRef>(Mutable, v44);
    if (cf) {
      CFRelease(cf);
    }
    if (v46) {
      CFRelease(v46);
    }
    if (v45) {
      CFRelease(v45);
    }
    if (v44) {
      CFRelease(v44);
    }
    v4 += 56;
  }
  mcp_applesauce::CF::Array_Builder::get_array((applesauce::CF::ArrayRef *)&v44, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  int v6 = (const void *)*((void *)this + 6);
  *((void *)this + 6) = v44;
  CFTypeRef v44 = v6;
  if (v6) {
    CFRelease(v6);
  }
  Aggregate_Device_Description::get_master_subdevice_uid(&v44, *(const void **)(*((void *)this + 10) + 40));
  if (v44)
  {
    CFRelease(v44);
    Aggregate_Device_Description::get_master_subdevice_uid(&v44, *(const void **)(*((void *)this + 10) + 40));
    uint64_t v7 = (const void *)*((void *)this + 12);
    *((void *)this + 12) = v44;
    CFTypeRef v44 = v7;
    if (!v7) {
      goto LABEL_22;
    }
  }
  else
  {
    CFStringRef v8 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v8) {
      goto LABEL_79;
    }
    CFStringRef v9 = v8;
    uint64_t v7 = (const void *)*((void *)this + 12);
    *((void *)this + 12) = v9;
    if (!v7) {
      goto LABEL_22;
    }
  }
  CFRelease(v7);
LABEL_22:
  Aggregate_Device_Description::get_clock_device_uid(&v44, *(const void **)(*((void *)this + 10) + 48));
  if (!v44)
  {
    CFStringRef v11 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (v11)
    {
      CFStringRef v12 = v11;
      uint64_t v10 = (const void *)*((void *)this + 13);
      *((void *)this + 13) = v12;
      if (!v10) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
LABEL_79:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
LABEL_80:
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFRelease(v44);
  Aggregate_Device_Description::get_clock_device_uid(&v44, *(const void **)(*((void *)this + 10) + 48));
  uint64_t v10 = (const void *)*((void *)this + 13);
  *((void *)this + 13) = v44;
  CFTypeRef v44 = v10;
  if (!v10) {
    goto LABEL_28;
  }
LABEL_27:
  CFRelease(v10);
LABEL_28:
  if (!*((void *)this + 12)) {
    return;
  }
  CFArrayRef v13 = (const __CFArray *)*((void *)this + 6);
  if (v13)
  {
    CFIndex Count = CFArrayGetCount(*((CFArrayRef *)this + 6));
    CFIndex v15 = Count;
    CFArrayRef v16 = (const __CFArray *)*((void *)this + 6);
    if (v16)
    {
      CFIndex v17 = CFArrayGetCount(*((CFArrayRef *)this + 6));
      if (!v15) {
        goto LABEL_72;
      }
    }
    else
    {
      CFIndex v17 = 0;
      if (!Count) {
        goto LABEL_72;
      }
    }
    for (unint64_t i = 0; i != v15; ++i)
    {
      if (v13 == v16 && i == v17) {
        break;
      }
      applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v43, v13, i);
      applesauce::CF::TypeRef::operator applesauce::CF::StringRef((applesauce::CF::StringRef *)&v42, &v43);
      CFStringRef v19 = (const __CFString *)*((void *)this + 12);
      if (!v19)
      {
        int v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v38, "Could not construct");
        __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v44, v19);
      if (!v42)
      {
        uint64_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v37, "Could not construct");
        __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)v42);
      char v20 = HIBYTE(v46);
      if (SHIBYTE(v46) >= 0) {
        CFTypeRef v21 = (CFTypeRef)HIBYTE(v46);
      }
      else {
        CFTypeRef v21 = v45;
      }
      unint64_t v22 = v41;
      int v23 = (char)v41;
      if ((v41 & 0x80u) != 0) {
        unint64_t v22 = (unint64_t)__p[1];
      }
      if (v21 == (CFTypeRef)v22)
      {
        if ((v41 & 0x80u) == 0) {
          unint64_t v24 = __p;
        }
        else {
          unint64_t v24 = (void **)__p[0];
        }
        if (SHIBYTE(v46) < 0)
        {
          BOOL v33 = memcmp(v44, v24, (size_t)v45) == 0;
          if (v23 < 0) {
            goto LABEL_66;
          }
        }
        else if (HIBYTE(v46))
        {
          uint64_t v25 = HIBYTE(v46) - 1;
          unint64_t v26 = &v44;
          do
          {
            int v28 = *(unsigned __int8 *)v26;
            unint64_t v26 = (CFTypeRef *)((char *)v26 + 1);
            int v27 = v28;
            int v30 = *(unsigned __int8 *)v24;
            unint64_t v24 = (void **)((char *)v24 + 1);
            int v29 = v30;
            BOOL v32 = v25-- != 0;
            BOOL v33 = v27 == v29;
          }
          while (v27 == v29 && v32);
          if ((char)v41 < 0)
          {
LABEL_66:
            operator delete(__p[0]);
            if ((HIBYTE(v46) & 0x80) == 0) {
              goto LABEL_58;
            }
            goto LABEL_67;
          }
        }
        else
        {
          BOOL v33 = 1;
          if ((char)v41 < 0) {
            goto LABEL_66;
          }
        }
      }
      else
      {
        BOOL v33 = 0;
        if ((char)v41 < 0) {
          goto LABEL_66;
        }
      }
      if ((v20 & 0x80) == 0) {
        goto LABEL_58;
      }
LABEL_67:
      operator delete((void *)v44);
LABEL_58:
      if (v42) {
        CFRelease(v42);
      }
      if (v43) {
        CFRelease(v43);
      }
      if (v33) {
        return;
      }
    }
  }
LABEL_72:
  CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
  if (!v34)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    goto LABEL_80;
  }
  CFStringRef v35 = v34;
  int v36 = (const void *)*((void *)this + 12);
  *((void *)this + 12) = v35;
  if (v36) {
    CFRelease(v36);
  }
}

void sub_1BAB6DF64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

void *Aggregate_Device_Description::get_master_subdevice_uid(void *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  *uint64_t v3 = a2;
  return this;
}

void *Aggregate_Device_Description::get_clock_device_uid(void *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  *uint64_t v3 = a2;
  return this;
}

CFTypeRef applesauce::CF::details::at_to<applesauce::CF::TypeRef>(void *a1, CFArrayRef theArray, unint64_t a3)
{
  if (CFArrayGetCount(theArray) <= a3
    || (ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3), (uint64_t v7 = ValueAtIndex) == 0))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  CFTypeRef result = CFRetain(ValueAtIndex);
  *a1 = v7;
  return result;
}

void sub_1BAB6E124(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::TypeRef::operator applesauce::CF::StringRef(applesauce::CF::StringRef *a1, CFTypeRef *a2)
{
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFTypeRef v5 = *a2;
    if (v5) {
      CFRetain(v5);
    }
  }
  else
  {
    CFTypeRef v5 = 0;
  }

  return applesauce::CF::StringRef::StringRef(a1, v5);
}

void sub_1BAB6E1EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >= 0x492492492492493) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    int v6 = result;
    CFTypeRef result = std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>>(a4);
    void *v6 = result;
    v6[1] = result;
    uint64_t v6[2] = &result[7 * v7];
    while (a2 != a3)
    {
      uint64_t v8 = Audio_Sub_Device_Description::Audio_Sub_Device_Description((uint64_t)result, a2);
      a2 += 56;
      CFTypeRef result = (void *)(v8 + 56);
    }
    v6[1] = result;
  }
  return result;
}

void sub_1BAB6E2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t Audio_Sub_Device_Description::Audio_Sub_Device_Description(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    CFRetain(*(CFTypeRef *)(a2 + 8));
  }
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6) {
    CFRetain(*(CFTypeRef *)(a2 + 16));
  }
  *(void *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7) {
    CFRetain(*(CFTypeRef *)(a2 + 24));
  }
  *(void *)(a1 + 24) = v7;
  long long v8 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v8;
  return a1;
}

void std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  signed int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    CFTypeRef v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        Audio_Sub_Device_Description::~Audio_Sub_Device_Description((Audio_Sub_Device_Description *)(v4 - 56));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void Audio_Sub_Device_Description::~Audio_Sub_Device_Description(Audio_Sub_Device_Description *this)
{
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 2);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = (const void *)*((void *)this + 1);
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void std::__shared_ptr_emplace<Aggregate_Device_Description>::__on_zero_shared(uint64_t a1)
{
}

void Aggregate_Device_Description::~Aggregate_Device_Description(Aggregate_Device_Description *this)
{
  uint64_t v2 = (const void *)*((void *)this + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 7);
  if (v3) {
    CFRelease(v3);
  }
  CFTypeRef v4 = (const void *)*((void *)this + 6);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = (const void *)*((void *)this + 5);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v7 = (void **)((char *)this + 16);
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100](&v7);
  uint64_t v6 = (const void *)*((void *)this + 1);
  if (v6) {
    CFRelease(v6);
  }
  if (*(void *)this) {
    CFRelease(*(CFTypeRef *)this);
  }
}

void std::__shared_ptr_emplace<Aggregate_Device_Description>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1460600;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<Aggregate_Device_Description>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1460600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::Meta::Device::update_subdevices(AMCP::Meta::Device *this)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  *((void *)this + 8) = *((void *)this + 7);
  uint64_t v2 = *((void *)this + 10);
  long long __p = &unk_1F1461470;
  *(void *)int v109 = this;
  v112[0] = &__p;
  Aggregate_Device_Description::for_each_subdevice(*(void *)(v2 + 16), *(void *)(v2 + 24), (uint64_t)&__p);
  std::__function::__value_func<void ()(Audio_Sub_Device_Description &)>::~__value_func[abi:ne180100](&__p);
  CFStringRef v3 = (const __CFString *)*((void *)this + 12);
  if (v3)
  {
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, v3);
    uint64_t v4 = *(void *)v109;
    if (v111 >= 0) {
      uint64_t v4 = HIBYTE(v111);
    }
    BOOL v5 = v4 != 0;
    if (SHIBYTE(v111) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  master_subdevice_uid = Aggregate_Device_Description::get_master_subdevice_uid(&v107, *(const void **)(*((void *)this + 10) + 40));
  std::vector<unsigned int>::pointer begin = v107.__begin_;
  if (!v107.__begin_)
  {
    BOOL v10 = 0;
LABEL_21:
    if (!v5 && !v10)
    {
      CFStringRef v12 = (unsigned int *)*((void *)this + 7);
      if (v12 != *((unsigned int **)this + 8))
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&__p, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *v12);
        if (__p)
        {
          AMCP::Core::Core::get_simple_required_property<1969841184u>(&v107, (AMCP::Core::Core *)__p);
          CFArrayRef v13 = (unsigned int *)*((void *)this + 12);
          *((void *)this + 12) = v107.__begin_;
          v107.__begin_ = v13;
          if (v13) {
            CFRelease(v13);
          }
        }
        master_subdevice_uid = *(void **)v109;
        if (*(void *)v109) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v109);
        }
      }
    }
    goto LABEL_28;
  }
  Aggregate_Device_Description::get_master_subdevice_uid(&v113, *(const void **)(*((void *)this + 10) + 40));
  std::vector<unsigned int>::pointer v8 = v113.__begin_;
  if (!v113.__begin_)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v113.__begin_);
  if (v111 >= 0) {
    uint64_t v9 = HIBYTE(v111);
  }
  else {
    uint64_t v9 = *(void *)v109;
  }
  BOOL v10 = v9 != 0;
  if (SHIBYTE(v111) < 0) {
    operator delete(__p);
  }
  CFRelease(v8);
  CFRelease(begin);
  if (v9) {
    char v11 = v5;
  }
  else {
    char v11 = 1;
  }
  if (v11) {
    goto LABEL_21;
  }
  Aggregate_Device_Description::get_master_subdevice_uid(&__p, *(const void **)(*((void *)this + 10) + 40));
  master_subdevice_uid = (void *)*((void *)this + 12);
  *((void *)this + 12) = __p;
  long long __p = master_subdevice_uid;
  if (master_subdevice_uid) {
    CFRelease(master_subdevice_uid);
  }
LABEL_28:
  if (*((void *)this + 13))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)master_subdevice_uid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = *(NSObject **)__p;
    if (*(void *)v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v109);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      int v70 = pthread_self();
      mach_port_t v71 = pthread_mach_thread_np(v70);
      CFStringRef v72 = (const __CFString *)*((void *)this + 13);
      if (!v72)
      {
        mach_port_t v96 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        applesauce::CF::construct_error(v96);
        __cxa_throw(v96, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      mach_port_t v73 = v71;
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v107, v72);
      if (SHIBYTE(v107.__end_cap_.__value_) >= 0) {
        std::vector<unsigned int>::pointer v74 = (std::vector<unsigned int>::pointer)&v107;
      }
      else {
        std::vector<unsigned int>::pointer v74 = v107.__begin_;
      }
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v73;
      *(_WORD *)int v109 = 2080;
      *(void *)&v109[2] = "Meta_Device_Core.cpp";
      __int16 v110 = 1024;
      int v111 = 454;
      LOWORD(v112[0]) = 2080;
      *(void *)((char *)v112 + 2) = v74;
      _os_log_debug_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Pick clock device. Previous clock was: %s", (uint8_t *)&__p, 0x22u);
      if (SHIBYTE(v107.__end_cap_.__value_) < 0) {
        operator delete(v107.__begin_);
      }
    }
  }
  Aggregate_Device_Description::get_clock_device_uid(&v113, *(const void **)(*((void *)this + 10) + 48));
  CFIndex v15 = (unsigned int *)*((void *)this + 12);
  if (v15) {
    CFRetain(*((CFTypeRef *)this + 12));
  }
  char v16 = 0;
  v113.__end_ = v15;
  uint64_t v17 = 1;
  uint64_t v18 = &v113;
  while (1)
  {
    char v19 = v16;
    std::vector<unsigned int>::pointer v20 = v18->__begin_;
    if (v18->__begin_) {
      break;
    }
LABEL_42:
    uint64_t v18 = (std::vector<unsigned int> *)((char *)&v113 + 8 * v17);
    char v16 = 1;
    uint64_t v17 = 2;
    if (v19) {
      goto LABEL_54;
    }
  }
  CFRetain(v18->__begin_);
  *(void *)&long long cf = v20;
  AMCP::Meta::Device::get_device_core(v105, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), (uint64_t)&cf);
  if ((void)cf) {
    CFRelease((CFTypeRef)cf);
  }
  if (!v105[0] || AMCP::Core::Core::get_simple_required_property<1668047219u>(v105[0]) == 1633773415)
  {
    if (v105[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105[1]);
    }
    goto LABEL_42;
  }
  CFTypeRef v21 = (const void *)*((void *)this + 13);
  unint64_t v22 = v18->__begin_;
  *((void *)this + 13) = v18->__begin_;
  if (v22) {
    unint64_t v22 = (void *)CFRetain(v22);
  }
  if (v21) {
    CFRelease(v21);
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v22);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
  int v23 = *(NSObject **)__p;
  if (*(void *)v109) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v109);
  }
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
  {
    int v85 = pthread_self();
    mach_port_t v86 = pthread_mach_thread_np(v85);
    CFStringRef v87 = (const __CFString *)*((void *)this + 13);
    if (!v87)
    {
      BOOL v100 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v100, "Could not construct");
      __cxa_throw(v100, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mach_port_t v88 = v86;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v107, v87);
    if (SHIBYTE(v107.__end_cap_.__value_) >= 0) {
      std::vector<unsigned int>::pointer v89 = (std::vector<unsigned int>::pointer)&v107;
    }
    else {
      std::vector<unsigned int>::pointer v89 = v107.__begin_;
    }
    LODWORD(__p) = 67109890;
    HIDWORD(__p) = v88;
    *(_WORD *)int v109 = 2080;
    *(void *)&v109[2] = "Meta_Device_Core.cpp";
    __int16 v110 = 1024;
    int v111 = 468;
    LOWORD(v112[0]) = 2080;
    *(void *)((char *)v112 + 2) = v89;
    _os_log_debug_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d New clock: %s", (uint8_t *)&__p, 0x22u);
    if (SHIBYTE(v107.__end_cap_.__value_) < 0) {
      operator delete(v107.__begin_);
    }
  }
  if (v105[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105[1]);
  }
  char v16 = 0;
LABEL_54:
  for (uint64_t i = 8; i != -8; i -= 8)
  {
    uint64_t v25 = *(std::vector<unsigned int>::pointer *)((char *)&v113.__begin_ + i);
    if (v25) {
      CFRelease(v25);
    }
  }
  if (v16)
  {
    unint64_t v26 = (unsigned int *)*((void *)this + 7);
    int v27 = (unsigned int *)*((void *)this + 8);
    while (v26 != v27)
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v113, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *v26);
      if (v113.__begin_)
      {
        AMCP::Core::Core::get_simple_required_property<1969841184u>(&__p, (AMCP::Core::Core *)v113.__begin_);
        int v28 = (void *)*((void *)this + 13);
        int v29 = __p;
        *((void *)this + 13) = __p;
        long long __p = v28;
        if (v28)
        {
          CFRelease(v28);
          int v29 = (void *)*((void *)this + 13);
        }
        if (v29)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v28);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
          int v69 = *(NSObject **)__p;
          if (*(void *)v109) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v109);
          }
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v90 = pthread_self();
            mach_port_t v91 = pthread_mach_thread_np(v90);
            CFStringRef v92 = (const __CFString *)*((void *)this + 13);
            if (!v92)
            {
              mach_port_t v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v101, "Could not construct");
              __cxa_throw(v101, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            mach_port_t v93 = v91;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v107, v92);
            if (SHIBYTE(v107.__end_cap_.__value_) >= 0) {
              std::vector<unsigned int>::pointer v94 = (std::vector<unsigned int>::pointer)&v107;
            }
            else {
              std::vector<unsigned int>::pointer v94 = v107.__begin_;
            }
            LODWORD(__p) = 67109890;
            HIDWORD(__p) = v93;
            *(_WORD *)int v109 = 2080;
            *(void *)&v109[2] = "Meta_Device_Core.cpp";
            __int16 v110 = 1024;
            int v111 = 483;
            LOWORD(v112[0]) = 2080;
            *(void *)((char *)v112 + 2) = v94;
            _os_log_debug_impl(&dword_1BAA78000, v69, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d New clock: %s", (uint8_t *)&__p, 0x22u);
            if (SHIBYTE(v107.__end_cap_.__value_) < 0) {
              operator delete(v107.__begin_);
            }
          }
          if (v113.__end_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113.__end_);
          }
          goto LABEL_74;
        }
      }
      if (v113.__end_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113.__end_);
      }
      ++v26;
    }
    int v30 = (AMCP::Log::Scope_Registry *)CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    if (!v30)
    {
      uint64_t v98 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v98, "Could not construct");
      __cxa_throw(v98, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v31 = (const void *)*((void *)this + 13);
    *((void *)this + 13) = v30;
    if (v31) {
      CFRelease(v31);
    }
    AMCP::Log::Scope_Registry::get(v30);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    BOOL v32 = *(NSObject **)__p;
    if (*(void *)v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v109);
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v81 = pthread_self();
      mach_port_t v82 = pthread_mach_thread_np(v81);
      Aggregate_Device_Description::get_uid(&v113, **((const void ***)this + 10));
      std::vector<unsigned int>::pointer v83 = v113.__begin_;
      if (!v113.__begin_)
      {
        uint64_t v99 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v99, "Could not construct");
        __cxa_throw(v99, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v107, (const __CFString *)v113.__begin_);
      if (SHIBYTE(v107.__end_cap_.__value_) >= 0) {
        std::vector<unsigned int>::pointer v84 = (std::vector<unsigned int>::pointer)&v107;
      }
      else {
        std::vector<unsigned int>::pointer v84 = v107.__begin_;
      }
      LODWORD(__p) = 67109890;
      HIDWORD(__p) = v82;
      *(_WORD *)int v109 = 2080;
      *(void *)&v109[2] = "Meta_Device_Core.cpp";
      __int16 v110 = 1024;
      int v111 = 490;
      LOWORD(v112[0]) = 2080;
      *(void *)((char *)v112 + 2) = v84;
      _os_log_debug_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d No viable clock device available for aggregate: %s", (uint8_t *)&__p, 0x22u);
      if (SHIBYTE(v107.__end_cap_.__value_) < 0) {
        operator delete(v107.__begin_);
      }
      CFRelease(v83);
    }
  }
LABEL_74:
  BOOL v33 = (unsigned int *)*((void *)this + 13);
  if (v33) {
    CFRetain(*((CFTypeRef *)this + 13));
  }
  v113.__begin_ = v33;
  AMCP::Meta::Device::get_device_core(&__p, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), (uint64_t)&v113);
  if (v113.__begin_) {
    CFRelease(v113.__begin_);
  }
  if (__p)
  {
    v107.__begin_ = (std::vector<unsigned int>::pointer)0x676C6F626E737274;
    LODWORD(v107.__end_) = 0;
    double v34 = AMCP::Core::Core::call_operation_function<double>((AMCP::Address *)__p, (unsigned int *)&v107);
    if (v34 != *((double *)this + 20)) {
      *((double *)this + 20) = v34;
    }
  }
  if (*(void *)v109) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v109);
  }
  if (*((void *)this + 7) == *((void *)this + 8))
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 14);
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 17);
    return;
  }
  Aggregate_Device_Description::is_stacked(&__p, *(const void **)(*((void *)this + 10) + 64));
  CFStringRef v35 = __p;
  if (!__p) {
    goto LABEL_93;
  }
  Aggregate_Device_Description::is_stacked(&v107, *(const void **)(*((void *)this + 10) + 64));
  std::vector<unsigned int>::pointer v36 = v107.__begin_;
  if (!v107.__begin_)
  {
    uint64_t v97 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v97, "Could not construct");
    __cxa_throw(v97, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  BOOL v37 = applesauce::CF::convert_to<BOOL,0>((const __CFBoolean *)v107.__begin_);
  CFRelease(v36);
  CFRelease(v35);
  if (!v37)
  {
LABEL_93:
    memset(&v107, 0, sizeof(v107));
    memset(&v113, 0, sizeof(v113));
    CFTypeRef v43 = (unsigned int *)*((void *)this + 7);
    CFTypeRef v44 = (unsigned int *)*((void *)this + 8);
    if (v43 == v44)
    {
      std::vector<unsigned int>::pointer end = 0;
      std::vector<unsigned int>::pointer v48 = 0;
    }
    else
    {
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&cf, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *v43);
        CFTypeRef v45 = (AMCP::Core::Core *)cf;
        AMCP::Core::Core::get_simple_required_property<1937009955u>(&__p, (AMCP::Core::Core *)cf, 1768845428);
        CFTypeRef v46 = __p;
        std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v107, v107.__end_, (char *)__p, *(char **)v109, (uint64_t)(*(void *)v109 - (void)__p) >> 2);
        AMCP::Core::Core::get_simple_required_property<1937009955u>(v105, v45, 1869968496);
        long long v47 = v105[0];
        std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v113, v113.__end_, (char *)v105[0], (char *)v105[1], (v105[1] - v105[0]) >> 2);
        if (v47) {
          operator delete(v47);
        }
        if (v46) {
          operator delete(v46);
        }
        if (*((void *)&cf + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&cf + 1));
        }
        ++v43;
      }
      while (v43 != v44);
      std::vector<unsigned int>::pointer v48 = v107.__begin_;
      std::vector<unsigned int>::pointer end = v107.__end_;
    }
    AMCP::Meta::Device::remove_meta_streams_if_not_found((void *)this + 17, v48, (uint64_t)end);
    AMCP::Meta::Device::remove_meta_streams_if_not_found((void *)this + 14, v113.__begin_, (uint64_t)v113.__end_);
    long long v50 = v107.__begin_;
    std::vector<unsigned int>::pointer v51 = v107.__end_;
    if (v107.__begin_ == v107.__end_)
    {
LABEL_128:
      std::vector<unsigned int>::pointer v59 = v113.__begin_;
      std::vector<unsigned int>::pointer v60 = v113.__end_;
      if (v113.__begin_ != v113.__end_)
      {
        int v61 = 1;
        do
        {
          int v62 = *v59;
          AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v105, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *v59);
          if (v105[0])
          {
            AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&__p, v105[0]);
            uint64_t v63 = (AMCP::Meta::Stream **)*((void *)this + 14);
            uint64_t v64 = (AMCP::Meta::Stream **)*((void *)this + 15);
            while (1)
            {
              if (v63 == v64) {
                goto LABEL_140;
              }
              if (*((_DWORD *)*v63 + 8) == v62) {
                break;
              }
              v63 += 2;
            }
            if (v63 == v64)
            {
LABEL_140:
              long long v67 = *(_OWORD *)((char *)this + 8);
              uint64_t v103 = *((void *)this + 1);
              uint64_t v68 = (std::__shared_weak_count *)*((void *)this + 2);
              if (*((void *)&v67 + 1)) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v67 + 1) + 8), 1uLL, memory_order_relaxed);
              }
              int v66 = (std::__shared_weak_count *)operator new(0x48uLL);
              v66->__shared_owners_ = 0;
              v66->__shared_weak_owners_ = 0;
              v66->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1461500;
              AMCP::Meta::Stream::Stream((uint64_t)&v66[1], v103, (uint64_t)v68, *((_DWORD *)this + 10), v62, v61, 0);
              if (v68) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v68);
              }
              *(void *)&long long cf = v66 + 1;
              *((void *)&cf + 1) = v66;
              std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)this + 112, &cf);
LABEL_145:
              std::__shared_weak_count::__release_shared[abi:ne180100](v66);
              goto LABEL_146;
            }
            char v65 = *v63;
            int v66 = (std::__shared_weak_count *)v63[1];
            if (v66) {
              atomic_fetch_add_explicit(&v66->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            *((_DWORD *)v65 + 9) = v61;
            AMCP::Meta::Stream::update_core(v65);
            if (v66) {
              goto LABEL_145;
            }
LABEL_146:
            v61 += HIDWORD(v112[0]);
          }
          if (v105[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105[1]);
          }
          ++v59;
        }
        while (v59 != v60);
        std::vector<unsigned int>::pointer v59 = v113.__begin_;
      }
      if (v59)
      {
        v113.__end_ = v59;
        operator delete(v59);
      }
      if (v107.__begin_)
      {
        v107.__end_ = v107.__begin_;
        operator delete(v107.__begin_);
      }
      return;
    }
    int v52 = 1;
    while (1)
    {
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)v105, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *v50);
      if (v105[0]) {
        break;
      }
LABEL_125:
      if (v105[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105[1]);
      }
      if (++v50 == v51) {
        goto LABEL_128;
      }
    }
    AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&__p, v105[0]);
    std::string v53 = (AMCP::Meta::Stream **)*((void *)this + 17);
    long long v54 = (AMCP::Meta::Stream **)*((void *)this + 18);
    if (v53 == v54) {
      goto LABEL_118;
    }
    while (*((_DWORD *)*v53 + 8) != *v50)
    {
      v53 += 2;
      if (v53 == v54) {
        goto LABEL_118;
      }
    }
    if (v53 == v54)
    {
LABEL_118:
      long long v57 = *(_OWORD *)((char *)this + 8);
      uint64_t v102 = *((void *)this + 1);
      long long v58 = (std::__shared_weak_count *)*((void *)this + 2);
      if (*((void *)&v57 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v57 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v56 = (std::__shared_weak_count *)operator new(0x48uLL);
      v56->__shared_owners_ = 0;
      v56->__shared_weak_owners_ = 0;
      v56->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1461500;
      AMCP::Meta::Stream::Stream((uint64_t)&v56[1], v102, (uint64_t)v58, *((_DWORD *)this + 10), *v50, v52, 1);
      if (v58) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v58);
      }
      *(void *)&long long cf = v56 + 1;
      *((void *)&cf + 1) = v56;
      std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)this + 136, &cf);
    }
    else
    {
      uint64_t v55 = *v53;
      uint64_t v56 = (std::__shared_weak_count *)v53[1];
      if (v56) {
        atomic_fetch_add_explicit(&v56->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((_DWORD *)v55 + 9) = v52;
      AMCP::Meta::Stream::update_core(v55);
      if (!v56) {
        goto LABEL_124;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v56);
LABEL_124:
    v52 += HIDWORD(v112[0]);
    goto LABEL_125;
  }
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v107, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), **((_DWORD **)this + 7));
  AMCP::Core::Core::get_simple_required_property<1937009955u>(&__p, (AMCP::Core::Core *)v107.__begin_, 1869968496);
  int v38 = __p;
  if (__p != *(void **)v109)
  {
    unsigned int v39 = *(_DWORD *)__p;
    long long v40 = operator new(4uLL);
    *long long v40 = v39;
    AMCP::Meta::Device::remove_meta_streams_if_not_found((void *)this + 14, v40, (uint64_t)(v40 + 1));
    operator delete(v40);
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v113, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), v39);
    if (v113.__begin_)
    {
      unsigned __int8 v41 = (AMCP::Meta::Stream **)*((void *)this + 14);
      CFTypeRef v42 = (AMCP::Meta::Stream **)*((void *)this + 15);
      while (1)
      {
        if (v41 == v42) {
          goto LABEL_171;
        }
        if (*((_DWORD *)*v41 + 8) == v39) {
          break;
        }
        v41 += 2;
      }
      if (v41 == v42)
      {
LABEL_171:
        long long v78 = *(_OWORD *)((char *)this + 8);
        uint64_t v104 = *((void *)this + 1);
        unint64_t v79 = (std::__shared_weak_count *)*((void *)this + 2);
        if (*((void *)&v78 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v78 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v80 = operator new(0x48uLL);
        v80[1] = 0;
        v80[2] = 0;
        *long long v80 = &unk_1F1461500;
        AMCP::Meta::Stream::Stream((uint64_t)(v80 + 3), v104, (uint64_t)v79, *((_DWORD *)this + 10), v39, 1, 0);
        if (v79) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v79);
        }
        v105[0] = (AMCP::Core::Core *)(v80 + 3);
        v105[1] = (AMCP::Core::Core *)v80;
        std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)this + 112, (long long *)v105);
        long long v77 = (std::__shared_weak_count *)v80;
        goto LABEL_176;
      }
      long long v75 = *v41;
      long long v76 = (std::__shared_weak_count *)v41[1];
      if (v76) {
        atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::Meta::Stream::update_core(v75);
      if (v76)
      {
        long long v77 = v76;
LABEL_176:
        std::__shared_weak_count::__release_shared[abi:ne180100](v77);
      }
    }
    if (v113.__end_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v113.__end_);
    }
  }
  if (v38) {
    operator delete(v38);
  }
  if (v107.__end_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v107.__end_);
  }
}

void sub_1BAB6F484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,std::__shared_weak_count *a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void *Aggregate_Device_Description::is_stacked(void *this, const void *a2)
{
  CFStringRef v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  *CFStringRef v3 = a2;
  return this;
}

void AMCP::Meta::Device::remove_meta_streams_if_not_found(void *a1, const void *a2, uint64_t a3)
{
  BOOL v5 = (void *)*a1;
  uint64_t v4 = (void *)a1[1];
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, a2, a3, (a3 - (uint64_t)a2) >> 2);
  if (v5 == v4) {
    goto LABEL_22;
  }
  uint64_t v6 = v4;
  uint64_t v7 = v5;
  while (__p != v17)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    while (*v8 != *(_DWORD *)(*v7 + 32))
    {
      if (++v8 == v17)
      {
        BOOL v5 = v7;
        goto LABEL_10;
      }
    }
    v7 += 2;
    if (v7 == v4) {
      goto LABEL_23;
    }
  }
LABEL_10:
  if (v5 != v4)
  {
    uint64_t v9 = v5 + 2;
    if (v5 + 2 != v4)
    {
      uint64_t v6 = v5;
      do
      {
        BOOL v10 = __p;
        if (__p != v17)
        {
          while (*v10 != *(_DWORD *)(*v9 + 32))
          {
            if (++v10 == v17) {
              goto LABEL_20;
            }
          }
          long long v11 = *(_OWORD *)v9;
          void *v9 = 0;
          v9[1] = 0;
          CFStringRef v12 = (std::__shared_weak_count *)v6[1];
          *(_OWORD *)uint64_t v6 = v11;
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          v6 += 2;
        }
LABEL_20:
        v9 += 2;
      }
      while (v9 != v4);
      goto LABEL_23;
    }
LABEL_22:
    uint64_t v6 = v5;
  }
LABEL_23:
  CFArrayRef v13 = (void *)a1[1];
  if (v6 != v13)
  {
    while (v13 != v6)
    {
      uint64_t v14 = (std::__shared_weak_count *)*(v13 - 1);
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      v13 -= 2;
    }
    a1[1] = v6;
  }
  CFIndex v15 = __p;
  if (__p)
  {
    operator delete(v15);
  }
}

void std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, unsigned int *__dst, char *__src, char *a4, uint64_t a5)
{
  if (a5 < 1) {
    return;
  }
  uint64_t v6 = (unsigned int *)__src;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  value = a1->__end_cap_.__value_;
  std::vector<unsigned int>::pointer end = a1->__end_;
  if (a5 > value - end)
  {
    std::vector<unsigned int>::pointer begin = a1->__begin_;
    unint64_t v13 = a5 + end - a1->__begin_;
    if (v13 >> 62) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v14 = __dst - begin;
    uint64_t v15 = (char *)value - (char *)begin;
    if (v15 >> 1 > v13) {
      unint64_t v13 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v13;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v16) {
      unint64_t v16 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v16);
    }
    else {
      uint64_t v17 = 0;
    }
    int v27 = (unsigned int *)(v16 + 4 * v14);
    __v.__first_ = (std::__split_buffer<unsigned int>::pointer)v16;
    __v.__begin_ = v27;
    __v.__end_cap_.__value_ = (unsigned int *)(v16 + 4 * v17);
    uint64_t v28 = 4 * a5;
    int v29 = &v27[a5];
    do
    {
      unsigned int v30 = *v6++;
      *v27++ = v30;
      v28 -= 4;
    }
    while (v28);
    __v.__end_ = v29;
    std::vector<unsigned int>::__swap_out_circular_buffer(a1, &__v, __dst);
    if (__v.__first_) {
      operator delete(__v.__first_);
    }
    return;
  }
  uint64_t v18 = (char *)end - (char *)__dst;
  uint64_t v19 = end - __dst;
  if (v19 >= a5)
  {
    std::vector<unsigned int>::pointer v20 = &__src[4 * a5];
    std::vector<unsigned int>::pointer v22 = a1->__end_;
LABEL_17:
    int v23 = (char *)&__dst[a5];
    std::vector<unsigned int>::pointer v24 = &v22[-a5];
    uint64_t v25 = v22;
    if (v24 < end)
    {
      uint64_t v25 = v22;
      do
      {
        unsigned int v26 = *v24++;
        *v25++ = v26;
      }
      while (v24 < end);
    }
    a1->__end_ = v25;
    if (v22 != (std::vector<unsigned int>::pointer)v23) {
      memmove(&v22[-(((char *)v22 - v23) >> 2)], __dst, (char *)v22 - v23);
    }
    if (v20 != (char *)v6)
    {
      memmove(__dst, v6, v20 - (char *)v6);
    }
    return;
  }
  std::vector<unsigned int>::pointer v20 = &__src[4 * v19];
  int64_t v21 = a4 - v20;
  if (a4 != v20) {
    memmove(a1->__end_, &__src[4 * v19], a4 - v20);
  }
  std::vector<unsigned int>::pointer v22 = (std::vector<unsigned int>::pointer)((char *)end + v21);
  a1->__end_ = (std::vector<unsigned int>::pointer)((char *)end + v21);
  if (v18 >= 1) {
    goto LABEL_17;
  }
}

__n128 AMCP::Core::Core::get_simple_required_property<1718444404u>(uint64_t a1, AMCP::Core::Core *this)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = 0x676C6F62666D6174;
  int v15 = 0;
  uint64_t has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(this, (const AMCP::Address *)&v14);
  if (!has_property) {
    goto LABEL_14;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v18, (int8x8_t *)this, (unsigned int *)&v14);
  BOOL v5 = v18;
  if (!v18) {
    goto LABEL_9;
  }
  unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
  {
    AMCP::Core::Operation::call_function<CA::StreamDescription>((uint64_t)buf, v5);
    char v7 = 0;
    LOBYTE(v5) = buf[0];
    __n128 v25 = *(__n128 *)&buf[1];
    *(_OWORD *)unsigned int v26 = *(_OWORD *)&buf[17];
    *(void *)&v26[15] = *(void *)&buf[32];
    goto LABEL_10;
  }
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
  {
    AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v5);
    AMCP::Thing::convert_to<CA::StreamDescription>((uint64_t)__p, (uint64_t)buf);
    LOBYTE(v5) = __p[0];
    __n128 v25 = *(__n128 *)&__p[1];
    *(_OWORD *)unsigned int v26 = *(_OWORD *)v17;
    *(void *)&v26[15] = *(void *)&v17[15];
    if (*(void *)&buf[32]) {
      (*(void (**)(void, unsigned char *, void, void))&buf[32])(0, buf, 0, 0);
    }
    char v7 = 0;
  }
  else
  {
LABEL_9:
    char v7 = 1;
  }
LABEL_10:
  uint64_t has_property = (AMCP::Log::Scope_Registry *)v19;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v7)
  {
LABEL_14:
    AMCP::Log::Scope_Registry::get(has_property);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v11 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      v17[6] = 4;
      strcpy(__p, "fmat");
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Core.h";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 391;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "optional_value.operator BOOL() == true";
      *(_WORD *)&buf[34] = 2080;
      *(void *)&buf[36] = __p;
      __int16 v21 = 1024;
      int v22 = 1735159650;
      __int16 v23 = 1024;
      int v24 = 0;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
      if ((v17[6] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    abort();
  }
  *(unsigned char *)a1 = (_BYTE)v5;
  __n128 result = v25;
  long long v10 = *(_OWORD *)v26;
  *(__n128 *)(a1 + 1) = v25;
  *(_OWORD *)(a1 + 17) = v10;
  *(void *)(a1 + 32) = *(void *)&v26[15];
  return result;
}

void sub_1BAB6FDC8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100](uint64_t a1, long long *a2)
{
  BOOL v5 = *(void **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v8 = *(void **)a1;
    uint64_t v9 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v8;
    if (v11 >> 3 > v10) {
      unint64_t v10 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    mach_port_t v13 = (char *)operator new(16 * v12);
    uint64_t v14 = &v13[16 * v9];
    long long v15 = *a2;
    *(_OWORD *)uint64_t v14 = *a2;
    if (*((void *)&v15 + 1))
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      unint64_t v8 = *(void **)a1;
      BOOL v5 = *(void **)(a1 + 8);
    }
    unint64_t v16 = &v13[16 * v12];
    char v7 = v14 + 16;
    if (v5 == v8)
    {
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
    }
    else
    {
      do
      {
        long long v17 = *((_OWORD *)v5 - 1);
        v5 -= 2;
        *((_OWORD *)v14 - 1) = v17;
        v14 -= 16;
        *BOOL v5 = 0;
        v5[1] = 0;
      }
      while (v5 != v8);
      unint64_t v8 = *(void **)a1;
      uint64_t v18 = *(void **)(a1 + 8);
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v7;
      *(void *)(a1 + 16) = v16;
      while (v18 != v8)
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v18 - 1);
        if (v19) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v19);
        }
        v18 -= 2;
      }
    }
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 1);
    *BOOL v5 = *(void *)a2;
    v5[1] = v6;
    if (v6) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
    }
    char v7 = v5 + 2;
  }
  *(void *)(a1 + 8) = v7;
}

uint64_t std::__shared_ptr_emplace<AMCP::Meta::Stream>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::Meta::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1461500;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Meta::Stream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1461500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Core::Operation::call_function<CA::StreamDescription>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>();
  unint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    BOOL v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::StreamDescription"
          ", Argument_Types = <>]";
    BOOL v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    unint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  BOOL v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>(),
        (unint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    BOOL v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::StreamDescription"
          ", Argument_Types = <>]";
    BOOL v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    unint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAB70448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::StreamDescription ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[340];
}

std::vector<unsigned int>::pointer std::vector<unsigned int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  std::vector<unsigned int>::pointer begin = __v->__begin_;
  std::vector<unsigned int>::pointer v6 = this->__begin_;
  char v7 = begin;
  if (this->__begin_ != __p)
  {
    std::vector<unsigned int>::pointer v8 = __p;
    char v7 = __v->__begin_;
    do
    {
      unsigned int v9 = *--v8;
      *--char v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  std::vector<unsigned int>::pointer end = this->__end_;
  std::__split_buffer<unsigned int>::pointer v11 = __v->__end_;
  int64_t v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    char v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  mach_port_t v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  long long v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

void *AMCP::Meta::Device::get_device_core(void *a1, std::__shared_mutex_base *a2, uint64_t a3)
{
  v4[4] = *MEMORY[0x1E4F143B8];
  v4[0] = &unk_1F14613F0;
  v4[1] = a3;
  void v4[3] = v4;
  AMCP::Core::Broker::fetch_first_core_if (a1, a2, (uint64_t)v4);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v4);
}

double AMCP::Core::Core::call_operation_function<double>(AMCP::Address *a1, unsigned int *a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v10 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      std::__split_buffer<unsigned int>::pointer v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)__int16 v30 = 2080;
      *(void *)&v30[2] = "Core.h";
      __int16 v31 = 1024;
      int v32 = 198;
      __int16 v33 = 2080;
      *(void *)int v34 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v27, (int8x8_t *)a1, a2);
  if (!v27)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    char v7 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      std::vector<unsigned int>::pointer v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)__int16 v30 = 2080;
      *(void *)&v30[2] = "Core.h";
      __int16 v31 = 1024;
      int v32 = 202;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *(void *)&v34[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = double, Argument_Types = <>]";
    uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v36 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  AMCP::Core::Operation::call_function<double>(v27);
  double v5 = v4;
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  return v5;
}

void sub_1BAB709E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35)
{
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device15get_device_coreEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x61646576, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F14613F0;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F14613F0;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Meta::Device::get_device_core(applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void *Aggregate_Device_Description::get_uid(void *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  *uint64_t v3 = a2;
  return this;
}

uint64_t Aggregate_Device_Description::for_each_subdevice(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v5 = result;
    do
    {
      uint64_t v6 = *(void *)(a3 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      __n128 result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v5);
      v5 += 56;
    }
    while (v5 != a2);
  }
  return result;
}

void *std::__function::__value_func<void ()(Audio_Sub_Device_Description &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device30assemble_active_subdevice_listEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  CFTypeRef v47 = v4;
  AMCP::Meta::Device::get_device_core(&v48, *(std::__shared_mutex_base **)(v3[1] + 16), (uint64_t)&v47);
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v5 = v48;
  if (v48)
  {
    if (AMCP::Core::Core::get_simple_required_property<1668047219u>(v48) != 1633773415)
    {
      int v6 = *(_DWORD *)v5;
      std::vector<unsigned int>::pointer v8 = (char *)v3[8];
      unint64_t v7 = v3[9];
      if ((unint64_t)v8 >= v7)
      {
        mach_port_t v10 = (char *)v3[7];
        uint64_t v11 = (v8 - v10) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        BOOL v14 = (unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v15 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v14) {
          unint64_t v15 = v12;
        }
        if (v15)
        {
          unint64_t v15 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v15);
          mach_port_t v10 = (char *)v3[7];
          std::vector<unsigned int>::pointer v8 = (char *)v3[8];
        }
        else
        {
          uint64_t v16 = 0;
        }
        uint64_t v17 = (_DWORD *)(v15 + 4 * v11);
        unint64_t v18 = v15 + 4 * v16;
        _DWORD *v17 = v6;
        mach_port_t v9 = v17 + 1;
        while (v8 != v10)
        {
          int v19 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *--uint64_t v17 = v19;
        }
        v3[7] = v17;
        v3[8] = v9;
        v3[9] = v18;
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)std::vector<unsigned int>::pointer v8 = v6;
        mach_port_t v9 = v8 + 4;
      }
      v3[8] = v9;
    }
    uint64_t v36 = 0x676C6F626C6E616DLL;
    int v37 = 0;
    AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, v5, (const AMCP::Address *)&v36);
    if (v46)
    {
      std::runtime_error v20 = *(const void **)(a2 + 8);
      CFTypeRef v21 = cf;
      *(void *)(a2 + 8) = cf;
      if (v21) {
        CFRetain(v21);
      }
      if (v20) {
        CFRelease(v20);
      }
    }
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v43, v5, 1768845428);
    AMCP::Core::Core::get_simple_required_property<1937009955u>(&v41, v5, 1869968496);
    uint64_t v22 = v43;
    uint64_t v23 = v44;
    if (v43 == v44)
    {
      int v24 = 0;
    }
    else
    {
      int v24 = 0;
      int v25 = v43;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v39, *(std::__shared_mutex_base **)(v3[1] + 16), *v25);
        if (v39)
        {
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v36, v39);
          v24 += v38;
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        ++v25;
      }
      while (v25 != v23);
    }
    LODWORD(v36) = v24;
    CFNumberRef v26 = CFNumberCreate(0, kCFNumberIntType, &v36);
    if (!v26)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    char v27 = *(const void **)(a2 + 16);
    *(void *)(a2 + 16) = v26;
    if (v27) {
      CFRelease(v27);
    }
    uint64_t v28 = v41;
    int v29 = v42;
    if (v41 == v42)
    {
      int v30 = 0;
    }
    else
    {
      int v30 = 0;
      __int16 v31 = v41;
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v39, *(std::__shared_mutex_base **)(v3[1] + 16), *v31);
        if (v39)
        {
          AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)&v36, v39);
          v30 += v38;
        }
        if (v40) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v40);
        }
        ++v31;
      }
      while (v31 != v29);
    }
    LODWORD(v36) = v30;
    CFNumberRef v32 = CFNumberCreate(0, kCFNumberIntType, &v36);
    if (!v32)
    {
      uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    __int16 v33 = *(const void **)(a2 + 24);
    *(void *)(a2 + 24) = v32;
    if (v33) {
      CFRelease(v33);
    }
    if (v28) {
      operator delete(v28);
    }
    if (v22) {
      operator delete(v22);
    }
    std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  }
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
}

void sub_1BAB710DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  int v24 = *(std::__shared_weak_count **)(v22 - 72);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1461470;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1461470;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0,std::allocator<AMCP::Meta::Device::assemble_active_subdevice_list(void)::$_0>,void ()(Audio_Sub_Device_Description &)>::~__func()
{
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>(uint64_t *a1, int a2, char *a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  char v8 = *a3;
  uint64_t v11 = 0;
  unint64_t v12 = &unk_1F1482AC8;
  char v13 = v8;
  BOOL v14 = &v12;
  memset(v10, 0, sizeof(v10));
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)&v12);
  uint64_t v11 = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11) {
    v11(0, (uint64_t)v10, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v12);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>(v6);
}

void sub_1BAB712D4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>(uint64_t *a1, int a2, int *a3, double a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  int v8 = *a3;
  uint64_t v11 = 0;
  unint64_t v12 = &unk_1F1477808;
  int v13 = v8;
  BOOL v14 = &v12;
  memset(v10, 0, sizeof(v10));
  std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)&v12);
  uint64_t v11 = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v10);
  if (v11) {
    v11(0, (uint64_t)v10, 0, 0);
  }
  std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](&v12);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(v6);
}

void sub_1BAB71400(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::Meta::Device::update_core_common(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  Aggregate_Device_Description::get_name(v73, *(const void **)(*(void *)(a1 + 80) + 8));
  CFTypeRef v4 = *(const void **)v73;
  if (*(void *)v73)
  {
    Aggregate_Device_Description::get_name(&cf, *(const void **)(*(void *)(a1 + 80) + 8));
    CFRelease(v4);
  }
  else
  {
    CFTypeRef cf = CFStringCreateWithBytes(0, (const UInt8 *)"Meta Device", 11, 0x8000100u, 0);
    if (!cf)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  uint64_t v78 = 0x676C6F626C6E616DLL;
  *(_DWORD *)unint64_t v79 = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v73, (uint64_t)&v78, cf);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v73 + 40), v73);
  if (*(void *)&v73[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
  }
  Aggregate_Device_Description::get_uid(v75, **(const void ***)(a1 + 80));
  uint64_t v78 = 0x676C6F6275696420;
  *(_DWORD *)unint64_t v79 = 0;
  CFTypeRef v5 = v75[0];
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)v73, (uint64_t)&v78, v75[0]);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v73 + 40), v73);
  if (*(void *)&v73[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
  }
  if (v5) {
    CFRelease(v5);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v71, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 1.5836601e190);
  uint64_t v6 = (unsigned int *)v75[0];
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<double ()(void)>>();
  long long v8 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v8;
  uint64_t v78 = (uint64_t)&unk_1F1460650;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<double ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<double ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v6, v7, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<double ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<double>((uint64_t)v6);
  unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  long long v10 = v71;
  long long v71 = 0uLL;
  *(_OWORD *)unint64_t v79 = v10;
  uint64_t v78 = (uint64_t)&unk_1F14606D0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v6, v9, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<double>((uint64_t)v6);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v6 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 1.5836601e190);
  uint64_t v11 = (unsigned int *)v75[0];
  unint64_t v12 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  long long v13 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v13;
  uint64_t v78 = (uint64_t)&unk_1F1460850;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v11, v12, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<CA::ValueRangeList ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>((uint64_t)v11);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v11 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  int v14 = *(_DWORD *)(a1 + 40);
  *(void *)mach_port_t v73 = *(void *)(*(void *)(a1 + 8) + 16);
  *(_DWORD *)&v73[8] = v14;
  *(_DWORD *)&v73[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v78, 0, (long long *)v73, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v78 + 40), &v78);
  if (*(void *)v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
  }
  int v15 = *(_DWORD *)(a1 + 40);
  *(void *)mach_port_t v73 = *(void *)(*(void *)(a1 + 8) + 16);
  *(_DWORD *)&v73[8] = v15;
  *(_OWORD *)&v73[12] = xmmword_1BAFF9410;
  *(_OWORD *)&v73[28] = xmmword_1BAFF9420;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(&v78, 0, (uint64_t *)v73, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v78 + 40), &v78);
  if (*(void *)v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
  }
  int v16 = *(_DWORD *)(a1 + 40);
  *(void *)mach_port_t v73 = *(void *)(*(void *)(a1 + 8) + 16);
  *(_DWORD *)&v73[8] = v16;
  *(_OWORD *)&v73[12] = xmmword_1BAFF9410;
  *(_OWORD *)&v73[28] = xmmword_1BAFF9430;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(&v78, 0, (uint64_t *)v73, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v78 + 40), &v78);
  if (*(void *)v79) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v79);
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 7.28117508e199);
  uint64_t v17 = (unsigned int *)v75[0];
  unint64_t v18 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  long long v19 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v19;
  uint64_t v78 = (uint64_t)&unk_1F14608D0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v17, v18, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>((uint64_t)v17);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v17 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 8.13208706e228);
  std::runtime_error v20 = (unsigned int *)v75[0];
  unint64_t v21 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
  long long v22 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v22;
  uint64_t v78 = (uint64_t)&unk_1F1460950;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v20, v21, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>((uint64_t)v20);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v20 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v70, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v69, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)&v71, 0, 1.58366008e190);
  uint64_t v23 = v71;
  unint64_t v24 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
  long long v25 = v70;
  long long v70 = 0uLL;
  *(_OWORD *)unint64_t v79 = v25;
  uint64_t v78 = (uint64_t)&unk_1F14609D0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v24, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  CFNumberRef v26 = std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::~__value_func[abi:ne180100](&v78);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v26, v23);
  uint64_t v81 = *(void *)(v23 + 40);
  int v82 = *(_DWORD *)(v23 + 48);
  unint64_t v27 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v28 = v78;
  unint64_t v29 = *(void *)v79;
  uint64_t v78 = 0;
  *(void *)unint64_t v79 = 0;
  *(void *)mach_port_t v73 = v28;
  *(void *)&v73[8] = v29;
  *(_OWORD *)&v73[16] = *(_OWORD *)&v79[8];
  *(_DWORD *)&v73[32] = v80;
  if (*(void *)&v79[16])
  {
    unint64_t v30 = *(void *)(*(void *)&v79[8] + 8);
    if ((v29 & (v29 - 1)) != 0)
    {
      if (v30 >= v29) {
        v30 %= v29;
      }
    }
    else
    {
      v30 &= v29 - 1;
    }
    *(void *)(v28 + 8 * v30) = &v73[16];
    *(_OWORD *)&v79[8] = 0uLL;
  }
  *(void *)&v73[40] = v81;
  int v74 = v82;
  std::vector<unsigned int>::pointer v84 = 0;
  __int16 v31 = operator new(0x40uLL);
  *__int16 v31 = &unk_1F1460A60;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v31 + 1), (uint64_t *)v73);
  v31[6] = *(void *)&v73[40];
  *((_DWORD *)v31 + 14) = v74;
  std::vector<unsigned int>::pointer v84 = v31;
  *(_OWORD *)long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v75, (uint64_t)&v83);
  long long v77 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v27, (AMCP *)v75);
  if (v77) {
    v77(0, (uint64_t)v75, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](&v83);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v73);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v78);
  unint64_t v32 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>();
  long long v33 = v69;
  long long v69 = 0uLL;
  *(_OWORD *)unint64_t v79 = v33;
  uint64_t v78 = (uint64_t)&unk_1F1460AE0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v32, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  int v34 = std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::~__value_func[abi:ne180100](&v78);
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)v34, v23);
  uint64_t v81 = *(void *)(v23 + 40);
  int v82 = *(_DWORD *)(v23 + 48);
  unint64_t v35 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v36 = v78;
  unint64_t v37 = *(void *)v79;
  uint64_t v78 = 0;
  *(void *)unint64_t v79 = 0;
  *(void *)mach_port_t v73 = v36;
  *(void *)&v73[8] = v37;
  *(_OWORD *)&v73[16] = *(_OWORD *)&v79[8];
  *(_DWORD *)&v73[32] = v80;
  if (*(void *)&v79[16])
  {
    unint64_t v38 = *(void *)(*(void *)&v79[8] + 8);
    if ((v37 & (v37 - 1)) != 0)
    {
      if (v38 >= v37) {
        v38 %= v37;
      }
    }
    else
    {
      v38 &= v37 - 1;
    }
    *(void *)(v36 + 8 * v38) = &v73[16];
    *(_OWORD *)&v79[8] = 0uLL;
  }
  *(void *)&v73[40] = v81;
  int v74 = v82;
  std::vector<unsigned int>::pointer v84 = 0;
  unsigned int v39 = operator new(0x40uLL);
  *unsigned int v39 = &unk_1F1460BF0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v39 + 1), (uint64_t *)v73);
  v39[6] = *(void *)&v73[40];
  *((_DWORD *)v39 + 14) = v74;
  std::vector<unsigned int>::pointer v84 = v39;
  *(_OWORD *)long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v75, (uint64_t)&v83);
  long long v77 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v23, v35, (AMCP *)v75);
  if (v77) {
    v77(0, (uint64_t)v75, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](&v83);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v73);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v78);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(v23 + 40), &v71);
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  if (*((void *)&v69 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v69 + 1));
  }
  if (*((void *)&v70 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 1.58366006e190);
  long long v40 = (unsigned int *)v75[0];
  unint64_t v41 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  long long v42 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v42;
  uint64_t v78 = (uint64_t)&unk_1F1460C70;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v40, v41, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>((uint64_t)v40);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v40 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v71, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 1.58366006e190);
  CFTypeRef v43 = (unsigned int *)v75[0];
  unint64_t v44 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  long long v45 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v45;
  uint64_t v78 = (uint64_t)&unk_1F1460CF0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v43, v44, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>((uint64_t)v43);
  unint64_t v46 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
  long long v47 = v71;
  long long v71 = 0uLL;
  *(_OWORD *)unint64_t v79 = v47;
  uint64_t v78 = (uint64_t)&unk_1F1460D70;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v43, v46, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>((uint64_t)v43);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v43 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v71, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 1.58366006e190);
  std::vector<unsigned int>::pointer v48 = (unsigned int *)v75[0];
  unint64_t v49 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  long long v50 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v50;
  uint64_t v78 = (uint64_t)&unk_1F1460E70;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v48, v49, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v48);
  unint64_t v51 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  long long v52 = v71;
  long long v71 = 0uLL;
  *(_OWORD *)unint64_t v79 = v52;
  uint64_t v78 = (uint64_t)&unk_1F1460EF0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v48, v51, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>((uint64_t)v48);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v48 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v71, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 1.58366006e190);
  std::string v53 = (unsigned int *)v75[0];
  unint64_t v54 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::StringRef ()(void)>>();
  long long v55 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v55;
  uint64_t v78 = (uint64_t)&unk_1F1460FF0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::StringRef ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v53, v54, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<applesauce::CF::StringRef ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::StringRef>((uint64_t)v53);
  unint64_t v56 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  long long v57 = v71;
  long long v71 = 0uLL;
  *(_OWORD *)unint64_t v79 = v57;
  uint64_t v78 = (uint64_t)&unk_1F1461070;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v53, v56, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>((uint64_t)v53);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v53 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v71 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v71 + 1));
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  CFBooleanRef v58 = *(const __CFBoolean **)(*(void *)(a1 + 80) + 56);
  if (v58) {
    LOBYTE(v58) = applesauce::CF::convert_to<BOOL,0>(v58);
  }
  LOBYTE(v78) = (_BYTE)v58;
  AMCP::Core::Operation_Utilities::make_typed_property<BOOL,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>((uint64_t *)v73, 0, (char *)&v78, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, (unsigned int *)(*(void *)v73 + 40), v73);
  if (*(void *)&v73[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73[8]);
  }
  AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(*(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1768845428);
  AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(*(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1869968496);
  AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(*(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1768845428);
  AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(*(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32), a2, 1869968496);
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 7.28117486e199);
  std::vector<unsigned int>::pointer v59 = (unsigned int *)v75[0];
  unint64_t v60 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  long long v61 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v61;
  uint64_t v78 = (uint64_t)&unk_1F1461270;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v59, v60, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v59);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v59 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 8.13208672e228);
  int v62 = (unsigned int *)v75[0];
  unint64_t v63 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  long long v64 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v64;
  uint64_t v78 = (uint64_t)&unk_1F14612F0;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v62, v63, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v62);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v62 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v83, *(void *)(a1 + 24), *(std::__shared_weak_count **)(a1 + 32));
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>((uint64_t *)v75, 0, 8.13208706e228);
  char v65 = (unsigned int *)v75[0];
  unint64_t v66 = AMCP::Implementation::get_type_marker<std::function<BOOL ()(void)>>();
  long long v67 = v83;
  long long v83 = 0uLL;
  *(_OWORD *)unint64_t v79 = v67;
  uint64_t v78 = (uint64_t)&unk_1F1461370;
  *(void *)&v79[16] = &v78;
  memset(v73, 0, 40);
  std::__function::__value_func<BOOL ()(void)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)&v78);
  *(void *)&v73[32] = AMCP::Implementation::In_Place_Storage<std::function<BOOL ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>((uint64_t)v65, v66, (AMCP *)v73);
  if (*(void *)&v73[32]) {
    (*(void (**)(void, unsigned char *, void, void))&v73[32])(0, v73, 0, 0);
  }
  std::__function::__value_func<BOOL ()(void)>::~__value_func[abi:ne180100](&v78);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<BOOL>((uint64_t)v65);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a2, v65 + 10, v75);
  if (v75[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v75[1]);
  }
  if (*((void *)&v83 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v83 + 1));
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB72874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  _Unwind_Resume(a1);
}

void *Aggregate_Device_Description::get_name(void *this, const void *a2)
{
  uint64_t v3 = this;
  if (a2) {
    this = CFRetain(a2);
  }
  *uint64_t v3 = a2;
  return this;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[338];
}

uint64_t std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1478CF0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB72E40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[346];
}

uint64_t std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<CA::ValueRangeList ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1479168;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB73168(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(uint64_t *a1, int a2, uint64_t *a3, double a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(a1, a2, a4);
  uint64_t v6 = *a1;
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::vector<unsigned int> ()(void)>>();
  long long v11 = *(_OWORD *)((char *)a3 + 28);
  long long v12 = *(_OWORD *)((char *)a3 + 12);
  int v16 = 0;
  uint64_t v8 = (char *)operator new(0x38uLL);
  uint64_t v9 = *a3;
  *(void *)uint64_t v8 = &unk_1F1485628;
  *((void *)v8 + 1) = v9;
  *((_DWORD *)v8 + 4) = *((_DWORD *)a3 + 2);
  *(_OWORD *)(v8 + 20) = v12;
  *(_OWORD *)(v8 + 36) = v11;
  int v16 = v8;
  memset(v13, 0, sizeof(v13));
  int v14 = 0;
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)v15);
  int v14 = AMCP::Implementation::In_Place_Storage<std::function<std::vector<unsigned int> ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v6, v7, (AMCP *)v13);
  if (v14) {
    v14(0, (uint64_t)v13, 0, 0);
  }
  std::__function::__value_func<std::vector<unsigned int> ()(void)>::~__value_func[abi:ne180100](v15);
  return AMCP::Core::Operation_Utilities::add_generic_property_getter<std::vector<unsigned int>>(v6);
}

void sub_1BAB732A8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1478E58;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB73580(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[315];
}

uint64_t std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[317];
}

uint64_t std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[350];
}

uint64_t std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F14793D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB73B80(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[352];
}

uint64_t std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F14795D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB73EA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[331];
}

uint64_t std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  uint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1473670;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  unint64_t v21 = 0;
  std::__function::__value_func<void ()(AMCP::Thing const&)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  unint64_t v21 = AMCP::Implementation::In_Place_Storage<std::function<void ()(AMCP::Thing const&)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<void ()(AMCP::Thing const&)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB741D0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(uint64_t a1, std::__shared_weak_count *this, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v12, a1, this);
  int v13 = a4;
  LODWORD(v6) = vdup_n_s32(0x6C746E63u).u32[0];
  HIDWORD(v6) = a4;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v14, 0, v6);
  uint64_t v7 = v14;
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  long long v11 = v12;
  long long v12 = 0uLL;
  int v9 = v13;
  int v19 = 0;
  uint64_t v10 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v10 = &unk_1F1461170;
  *(_OWORD *)(v10 + 8) = v11;
  *((_DWORD *)v10 + 6) = v9;
  int v19 = v10;
  memset(v16, 0, sizeof(v16));
  int v17 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v18);
  int v17 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v7, v8, (AMCP *)v16);
  if (v17) {
    v17(0, (uint64_t)v16, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v18);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v7);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v7 + 40), &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_1BAB74358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(uint64_t a1, std::__shared_weak_count *this, uint64_t a3, int a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v12, a1, this);
  int v13 = a4;
  LODWORD(v6) = vdup_n_s32(0x73616674u).u32[0];
  HIDWORD(v6) = a4;
  std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address const&,void>(&v14, 0, v6);
  uint64_t v7 = v14;
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
  long long v11 = v12;
  long long v12 = 0uLL;
  int v9 = v13;
  int v19 = 0;
  uint64_t v10 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v10 = &unk_1F14611F0;
  *(_OWORD *)(v10 + 8) = v11;
  *((_DWORD *)v10 + 6) = v9;
  int v19 = v10;
  memset(v16, 0, sizeof(v16));
  int v17 = 0;
  std::__function::__value_func<unsigned int ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, (uint64_t)v18);
  int v17 = AMCP::Implementation::In_Place_Storage<std::function<unsigned int ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v7, v8, (AMCP *)v16);
  if (v17) {
    v17(0, (uint64_t)v16, 0, 0);
  }
  std::__function::__value_func<unsigned int ()(void)>::~__value_func[abi:ne180100](v18);
  AMCP::Core::Operation_Utilities::add_generic_property_getter<unsigned int>(v7);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>(a3, (unsigned int *)(v7 + 40), &v14);
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (*((void *)&v12 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v12 + 1));
  }
}

void sub_1BAB74518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_16"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 112) != *(void *)(*(void *)(a1 + 8) + 120);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  unint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::destroy(uint64_t a1)
{
  signed int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1461370;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1461370;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1461370;
  signed int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_16>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1461370;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_15"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 112) != *(void *)(*(void *)(a1 + 8) + 120);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::destroy(uint64_t a1)
{
  signed int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14612F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14612F0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14612F0;
  signed int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_15>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14612F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_14"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 136) != *(void *)(*(void *)(a1 + 8) + 144);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::destroy(uint64_t a1)
{
  signed int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1461270;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1461270;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1461270;
  signed int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_14>,BOOL ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1461270;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device35make_clock_device_delegate_propertyILj1935763060EEEvRNS_4Core13Operation_SetEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(v2 + 104);
  if (v3) {
    CFRetain(*(CFTypeRef *)(v2 + 104));
  }
  CFTypeRef cf = v3;
  AMCP::Meta::Device::get_device_core(&v9, *(std::__shared_mutex_base **)(*(void *)(v2 + 8) + 16), (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v9)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 24);
    v7[0] = 1935763060;
    v7[1] = v4;
    void v7[2] = 0;
    uint64_t v5 = AMCP::Core::Core::call_operation_function<unsigned int>(v9, v7);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v5;
}

void sub_1BAB74C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Core::call_operation_function<unsigned int>(AMCP::Address *a1, unsigned int *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)unint64_t v29 = 2080;
      *(void *)&v29[2] = "Core.h";
      __int16 v30 = 1024;
      int v31 = 198;
      __int16 v32 = 2080;
      *(void *)long long v33 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v26, (int8x8_t *)a1, a2);
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v6 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)unint64_t v29 = 2080;
      *(void *)&v29[2] = "Core.h";
      __int16 v30 = 1024;
      int v31 = 202;
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v33[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = unsigned int, Argument_Types = <>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v35 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = AMCP::Core::Operation::call_function<unsigned int>(v26);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  return v4;
}

void sub_1BAB74F9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  char v25 = *(std::__shared_weak_count **)(v23 - 136);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  signed int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F14611F0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14611F0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14611F0;
  signed int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1935763060u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14611F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device35make_clock_device_delegate_propertyILj1819569763EEEvRNS_4Core13Operation_SetEjEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(v2 + 104);
  if (v3) {
    CFRetain(*(CFTypeRef *)(v2 + 104));
  }
  CFTypeRef cf = v3;
  AMCP::Meta::Device::get_device_core(&v9, *(std::__shared_mutex_base **)(*(void *)(v2 + 8) + 16), (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v9)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 24);
    v7[0] = 1819569763;
    v7[1] = v4;
    void v7[2] = 0;
    uint64_t v5 = AMCP::Core::Core::call_operation_function<unsigned int>(v9, v7);
  }
  else
  {
    uint64_t v5 = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v5;
}

void sub_1BAB752E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  signed int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_1F1461170;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(result + 24);
  return result;
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x20uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1461170;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

void std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1461170;
  signed int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1},std::allocator<void AMCP::Meta::Device::make_clock_device_delegate_property<1819569763u>(AMCP::Core::Operation_Set &,unsigned int)::{lambda(void)#1}>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1461170;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_13"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = (const __CFString *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v4 = a1 + 8;
  uint64_t v5 = (std::__shared_mutex_base *)(*(void *)(a1 + 8) + 176);
  CFStringRef v12 = v3;
  uint64_t v13 = v5;
  char v14 = 1;
  std::__shared_mutex_base::lock(v5);
  CFComparisonResult v6 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(*(void *)(a1 + 8) + 104), &v12);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  if (v6)
  {
    uint64_t v7 = operator new(0x20uLL);
    v7[1] = 0;
    void v7[2] = 0;
    *uint64_t v7 = &unk_1F1488C30;
    *((unsigned char *)v7 + 24) = 0;
    v16[0] = (uint64_t)(v7 + 3);
    v16[1] = (uint64_t)v7;
    int v17 = 0;
    int v18 = 0;
    uint64_t v8 = *(void *)(*(void *)(*(void *)v4 + 8) + 32);
    unsigned int v10 = *(_DWORD *)(*(void *)v4 + 40);
    unsigned int v9 = *(_DWORD *)(*(void *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)&v13, v16);
    *(void *)&long long v15 = v4;
    *((void *)&v15 + 1) = &v12;
    uint64_t v20 = 0;
    mach_port_t v11 = (char *)operator new(0x38uLL);
    *(void *)mach_port_t v11 = &unk_1F14610E0;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v11 + 8), (uint64_t *)&v13);
    *(_OWORD *)(v11 + 40) = v15;
    uint64_t v20 = v11;
    AMCP::Core::Conductor::enqueue_config_change(v8, v9, v10, 9, (uint64_t)v19);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v19);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v13);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
    CFStringRef v3 = v12;
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1BAB7568C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK4$_13clEN10applesauce2CF9StringRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
    sig = v15->__mut_.__m_.__sig;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(sig, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      LODWORD(v15) = 67109890;
      HIDWORD(v15) = v14;
      *(_WORD *)uint64_t v16 = 2080;
      *(void *)&uint64_t v16[2] = "Meta_Device_Core.cpp";
      __int16 v17 = 1024;
      int v18 = 369;
      __int16 v19 = 2080;
      uint64_t v20 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, sig, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v15, 0x22u);
    }
    abort();
  }
  long long v15 = (std::__shared_mutex_base *)(**(void **)(a1 + 40) + 176);
  v16[0] = 1;
  std::__shared_mutex_base::lock(v15);
  CFStringRef v3 = *(const void ***)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 40);
  uint64_t v5 = *(const void **)(v4 + 104);
  CFComparisonResult v6 = *v3;
  *(void *)(v4 + 104) = *v3;
  if (v6) {
    CFRetain(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v7 = **(void **)(a1 + 40);
  uint64_t v8 = *(void *)(v7 + 80);
  unsigned int v9 = *(const void **)(v7 + 104);
  if (!v9)
  {
    unsigned int v10 = *(const void **)(v8 + 48);
    *(void *)(v8 + 48) = 0;
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFRetain(*(CFTypeRef *)(v7 + 104));
  unsigned int v10 = *(const void **)(v8 + 48);
  *(void *)(v8 + 48) = v9;
  CFRetain(v9);
  if (v10) {
LABEL_10:
  }
    CFRelease(v10);
LABEL_11:
  if (v9) {
    CFRelease(v9);
  }
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
}

void sub_1BAB7592C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Meta::Device::update_core(AMCP::Meta::Device *this)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v8, *(std::__shared_mutex_base **)(*((void *)this + 1) + 16), *((_DWORD *)this + 10));
  uint64_t v2 = v8;
  if (v8)
  {
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)CFComparisonResult v6 = 0u;
    int v7 = 1065353216;
    AMCP::Meta::Device::update_core_common((uint64_t)this, (uint64_t)__p);
    uint64_t v10 = (uint64_t)(v2 + 12);
    LOBYTE(v11) = 1;
    caulk::concurrent::shared_spin_lock::lock(v2 + 12);
    CFStringRef v3 = v6[0];
    if (v6[0])
    {
      do
      {
        std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)(v2 + 2), (unsigned int *)(v3[4] + 40), v3 + 4);
        CFStringRef v3 = (void *)*v3;
      }
      while (v3);
    }
    std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100]((uint64_t)&v10);
    uint64_t v10 = 0x676C6F626F776E72;
    int v11 = 0;
    v2[1] = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)v2, (const AMCP::Address *)&v10, &AMCP::k_object_id_unknown);
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v6[0]);
    uint64_t v4 = __p[0];
    __p[0] = 0;
    if (v4) {
      operator delete(v4);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_1BAB75A64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

atomic_uint *caulk::concurrent::shared_spin_lock::lock(atomic_uint *this)
{
  int v1 = 0;
  atomic_compare_exchange_strong(this, (unsigned int *)&v1, 0x80000000);
  if (v1)
  {
    uint64_t v2 = this;
    unsigned int v3 = 0;
    do
    {
      if (v3 >= 0x65)
      {
        uint64_t v4 = mach_absolute_time();
        this = (atomic_uint *)mach_wait_until(v4 + 24000);
      }
      int v5 = 0;
      ++v3;
      atomic_compare_exchange_strong(v2, (unsigned int *)&v5, 0x80000000);
    }
    while (v5);
  }
  return this;
}

uint64_t std::unique_lock<caulk::concurrent::shared_spin_lock>::~unique_lock[abi:ne180100](uint64_t result)
{
  if (*(unsigned char *)(result + 8))
  {
    unsigned int v1 = 0x80000000;
    atomic_compare_exchange_strong(*(atomic_uint *volatile *)result, &v1, 0);
    if (v1 != 0x80000000)
    {
      _os_assert_log();
      __n128 result = _os_crash();
      __break(1u);
    }
  }
  return result;
}

void *AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2, unsigned int *a3)
{
  if (!AMCP::Core::Core::has_property(a1, a2)) {
    return (void *)*a3;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)a1, (unsigned int *)a2);
  CFComparisonResult v6 = v13;
  if (v13)
  {
    unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<unsigned int ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7))
    {
      CFComparisonResult v6 = (void *)AMCP::Core::Operation::call_function<unsigned int>(v6);
LABEL_5:
      int v8 = 0;
      goto LABEL_10;
    }
    unint64_t v9 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v9))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, v6);
      CFComparisonResult v6 = (void *)AMCP::Thing::convert_to<unsigned int>((uint64_t)v11);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      goto LABEL_5;
    }
  }
  int v8 = 1;
LABEL_10:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (v8) {
    return (void *)*a3;
  }
  return v6;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14610E0;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unsigned int v3 = (char *)operator new(0x38uLL);
  *(void *)unsigned int v3 = &unk_1F14610E0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAB75D3C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14610E0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14610E0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1461070;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1461070;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1461070;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_13>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1461070;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_12"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *(void *)(v3 + 104);
  if (v4) {
    __n128 result = CFRetain(*(CFTypeRef *)(v3 + 104));
  }
  *a2 = v4;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460FF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1460FF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460FF0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_12>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460FF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN10applesauce2CF9StringRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::Thing::convert_to<applesauce::CF::StringRef>(&cf, a2);
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const applesauce::CF::StringRef &>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v14 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v14);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    int v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const applesauce::CF::StringRef &>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v10 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v10);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    int v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v6 + 48))(v6, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB7689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1473670;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  *unint64_t v3 = &unk_1F1473670;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB76AE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1473670;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::StringRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1473670;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::StringRef const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(applesauce::CF::StringRef const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::StringRef const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      CFStringRef v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_11"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFStringRef v3 = (const __CFString *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v4 = a1 + 8;
  int v5 = (std::__shared_mutex_base *)(*(void *)(a1 + 8) + 176);
  CFStringRef v12 = v3;
  mach_port_t v13 = v5;
  char v14 = 1;
  std::__shared_mutex_base::lock(v5);
  CFComparisonResult v6 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(*(void *)(a1 + 8) + 96), &v12);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v13);
  if (v6)
  {
    unint64_t v7 = operator new(0x20uLL);
    v7[1] = 0;
    void v7[2] = 0;
    *unint64_t v7 = &unk_1F1488C30;
    *((unsigned char *)v7 + 24) = 0;
    v16[0] = (uint64_t)(v7 + 3);
    v16[1] = (uint64_t)v7;
    int v17 = 0;
    int v18 = 0;
    uint64_t v8 = *(void *)(*(void *)(*(void *)v4 + 8) + 32);
    unsigned int v10 = *(_DWORD *)(*(void *)v4 + 40);
    unsigned int v9 = *(_DWORD *)(*(void *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)&v13, v16);
    *(void *)&long long v15 = v4;
    *((void *)&v15 + 1) = &v12;
    uint64_t v20 = 0;
    int v11 = (char *)operator new(0x38uLL);
    *(void *)int v11 = &unk_1F1460F60;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v11 + 8), (uint64_t *)&v13);
    *(_OWORD *)(v11 + 40) = v15;
    uint64_t v20 = v11;
    AMCP::Core::Conductor::enqueue_config_change(v8, v9, v10, 9, (uint64_t)v19);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v19);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v13);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v16);
    CFStringRef v3 = v12;
  }
  if (v3) {
    CFRelease(v3);
  }
}

void sub_1BAB76F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK4$_11clEN10applesauce2CF9StringRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v15, "com.apple.coreaudio", "AMCP");
    sig = v15->__mut_.__m_.__sig;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(sig, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      LODWORD(v15) = 67109890;
      HIDWORD(v15) = v14;
      *(_WORD *)long long v16 = 2080;
      *(void *)&uint64_t v16[2] = "Meta_Device_Core.cpp";
      __int16 v17 = 1024;
      int v18 = 339;
      __int16 v19 = 2080;
      uint64_t v20 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, sig, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v15, 0x22u);
    }
    abort();
  }
  long long v15 = (std::__shared_mutex_base *)(**(void **)(a1 + 40) + 176);
  v16[0] = 1;
  std::__shared_mutex_base::lock(v15);
  CFStringRef v3 = *(const void ***)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 40);
  int v5 = *(const void **)(v4 + 96);
  CFComparisonResult v6 = *v3;
  *(void *)(v4 + 96) = *v3;
  if (v6) {
    CFRetain(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v7 = **(void **)(a1 + 40);
  uint64_t v8 = *(void *)(v7 + 80);
  unsigned int v9 = *(const void **)(v7 + 96);
  if (!v9)
  {
    unsigned int v10 = *(const void **)(v8 + 40);
    *(void *)(v8 + 40) = 0;
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  CFRetain(*(CFTypeRef *)(v7 + 96));
  unsigned int v10 = *(const void **)(v8 + 40);
  *(void *)(v8 + 40) = v9;
  CFRetain(v9);
  if (v10) {
LABEL_10:
  }
    CFRelease(v10);
LABEL_11:
  if (v9) {
    CFRelease(v9);
  }
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v15);
}

void sub_1BAB771D8(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1460F60;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  CFStringRef v3 = (char *)operator new(0x38uLL);
  *(void *)CFStringRef v3 = &unk_1F1460F60;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAB77318(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460F60;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11::operator() const(applesauce::CF::StringRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460F60;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460EF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1460EF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460EF0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_11>,void ()(applesauce::CF::StringRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460EF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE4$_10"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::operator()@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *(void *)(v3 + 96);
  if (v4) {
    __n128 result = CFRetain(*(CFTypeRef *)(v3 + 96));
  }
  *a2 = v4;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460E70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1460E70;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460E70;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_10>,applesauce::CF::StringRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460E70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN10applesauce2CF13DictionaryRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf, a2);
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      CFStringRef v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const applesauce::CF::DictionaryRef &>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v14 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v14);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    int v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    int v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    int v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const applesauce::CF::DictionaryRef &>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v10 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v10);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    int v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v6 + 48))(v6, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB77E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14795D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  *unint64_t v3 = &unk_1F14795D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB780C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14795D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14795D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::DictionaryRef const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(applesauce::CF::DictionaryRef const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::DictionaryRef const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      CFStringRef v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_9"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (void *)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v4 = a1 + 8;
  CFTypeRef v18 = v3;
  v24.std::string::pointer data = (char *)(*(void *)(a1 + 8) + 176);
  LOBYTE(v24.length) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)v24.data);
  uint64_t v6 = *(void *)(*(void *)(a1 + 8) + 80);
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v20 = 0u;
  if (v3)
  {
    CFRetain(v3);
    v24.isa = v3;
    BOOL v5 = applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v3, @"uid");
    if (v5)
    {
      applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)buf, (CFDictionaryRef)v3, @"uid");
      CFTypeRef v7 = cf[0];
      cf[0] = *(CFTypeRef *)buf;
      *(void *)os_workgroup_interval_data_opaque_s buf = v7;
      if (v7) {
        CFRelease(v7);
      }
      Aggregate_Device_Description::fill_out_optional_strings((Aggregate_Device_Description *)cf, (CFDictionaryRef *)&v24);
      Aggregate_Device_Description::fill_out_optional_BOOLeans((Aggregate_Device_Description *)cf, &v24);
      *(void *)os_workgroup_interval_data_opaque_s buf = 0;
      long long v27 = 0uLL;
      Aggregate_Device_Description::fill_out_subdevice_list((uint64_t *)cf, (const __CFDictionary *)v3, (uint64_t *)buf);
      v24.info = (uint64_t)buf;
      std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24.info);
      goto LABEL_13;
    }
  }
  else
  {
    v24.isa = 0;
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v8 = **(NSObject ***)buf;
  if ((void)v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v27);
  }
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    long long v16 = pthread_self();
    mach_port_t v17 = pthread_mach_thread_np(v16);
    *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v17;
    LOWORD(v27) = 2080;
    *(void *)((char *)&v27 + 2) = "Aggregate_Device_Description.cpp";
    WORD5(v27) = 1024;
    HIDWORD(v27) = 118;
    _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Unable to construct aggregate with no UID", buf, 0x18u);
    if (!v3) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v3) {
LABEL_13:
  }
    CFRelease(v3);
LABEL_14:
  Aggregate_Device_Description::get_composition_dictionary((Aggregate_Device_Description *)buf, v6);
  Aggregate_Device_Description::get_composition_dictionary((Aggregate_Device_Description *)&v24.info, (uint64_t)cf);
  info = (const void *)v24.info;
  BOOL v10 = (*(void *)buf | v24.info) == 0;
  if (*(void *)buf && v24.info)
  {
    BOOL v10 = CFEqual(*(CFTypeRef *)buf, (CFTypeRef)v24.info) != 0;
    info = (const void *)v24.info;
  }
  if (info) {
    CFRelease(info);
  }
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  Aggregate_Device_Description::~Aggregate_Device_Description((Aggregate_Device_Description *)cf);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v24.data);
  if (!v10)
  {
    int v11 = operator new(0x20uLL);
    v11[1] = 0;
    _OWORD v11[2] = 0;
    void *v11 = &unk_1F1488C30;
    *((unsigned char *)v11 + 24) = 0;
    *(void *)os_workgroup_interval_data_opaque_s buf = v11 + 3;
    *(void *)&long long v27 = v11;
    DWORD2(v27) = 0;
    int v28 = 0;
    uint64_t v12 = *(void *)(*(void *)(*(void *)v4 + 8) + 32);
    unsigned int v14 = *(_DWORD *)(*(void *)v4 + 40);
    unsigned int v13 = *(_DWORD *)(*(void *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)cf, (uint64_t *)buf);
    *(void *)&long long v21 = v4;
    *((void *)&v21 + 1) = &v18;
    uint64_t v25 = 0;
    long long v15 = (char *)operator new(0x38uLL);
    *(void *)long long v15 = &unk_1F1460DE0;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v15 + 8), (uint64_t *)cf);
    *(_OWORD *)(v15 + 40) = v21;
    uint64_t v25 = v15;
    AMCP::Core::Conductor::enqueue_config_change(v12, v13, v14, 9, (uint64_t)&v24.data);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v24.data);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)cf);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)buf);
  }
  if (v18) {
    CFRelease(v18);
  }
}

void sub_1BAB786C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,char a23)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3$_9clEN10applesauce2CF13DictionaryRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v36 = **(NSObject ***)buf;
    if (*(void *)v54) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
    }
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      uint64_t v37 = pthread_self();
      mach_port_t v38 = pthread_mach_thread_np(v37);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v38;
      *(_WORD *)unint64_t v54 = 2080;
      *(void *)&v54[2] = "Meta_Device_Core.cpp";
      __int16 v55 = 1024;
      int v56 = 310;
      __int16 v57 = 2080;
      CFBooleanRef v58 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  CFTypeRef v43 = (std::__shared_mutex_base *)(**(void **)(a1 + 40) + 176);
  char v44 = 1;
  std::__shared_mutex_base::lock(v43);
  unint64_t v3 = *(CFTypeRef **)(a1 + 48);
  uint64_t v4 = *(void *)(**(void **)(a1 + 40) + 80);
  BOOL v5 = (void *)*v3;
  if (*v3) {
    CFRetain(*v3);
  }
  memset(&v52.info, 0, 24);
  std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(&v52.info, *(void *)(v4 + 16), *(void *)(v4 + 24), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v4 + 24) - *(void *)(v4 + 16)) >> 3));
  uint64_t v7 = *(void *)(v4 + 16);
  for (uint64_t i = *(void *)(v4 + 24);
        i != v7;
  *(void *)(v4 + 24) = v7;
  if (!v5)
  {
    CFDictionaryRef v8 = 0;
    v52.isa = 0;
    goto LABEL_59;
  }
  CFRetain(v5);
  v52.isa = v5;
  CFDictionaryRef v8 = (const __CFDictionary *)v5;
  if (!applesauce::CF::details::has_key<__CFString const*&>((CFDictionaryRef)v5, @"uid")) {
    goto LABEL_59;
  }
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*&>((applesauce::CF::StringRef *)&cf, (CFDictionaryRef)v5, @"uid");
  uint64_t v9 = (AMCP::Log::Scope_Registry *)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, (const __CFString **)v4);
  if (v9)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v49, "com.apple.coreaudio", "AMCP");
    int v11 = *(_DWORD *)(v49 + 16);
    switch(v11)
    {
      case 1:
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v27 = **(NSObject ***)buf;
        if (*(void *)v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
        }
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_50;
        }
        int v28 = pthread_self();
        mach_port_t v29 = pthread_mach_thread_np(v28);
        if (!*(void *)v4)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v30 = v29;
        int v31 = v47;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v47, *(const __CFString **)v4);
        if (v48 < 0) {
          int v31 = (void **)v47[0];
        }
        if (!cf)
        {
          long long v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v42, "Could not construct");
          __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
        if (v46 >= 0) {
          __int16 v32 = __p;
        }
        else {
          __int16 v32 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v30;
        *(_WORD *)unint64_t v54 = 2080;
        *(void *)&v54[2] = "Aggregate_Device_Description.cpp";
        __int16 v55 = 1024;
        int v56 = 250;
        __int16 v57 = 2080;
        CFBooleanRef v58 = (const char *)v31;
        __int16 v59 = 2080;
        unint64_t v60 = v32;
        CFTypeRef v18 = v27;
        os_log_type_t v19 = OS_LOG_TYPE_DEFAULT;
        break;
      case 2:
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v20 = **(NSObject ***)buf;
        if (*(void *)v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
        }
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          goto LABEL_50;
        }
        long long v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        uint64_t v23 = (const __CFString **)applesauce::CF::StringRef::operator->((void *)v4);
        __CFString v24 = v47;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v47, *v23);
        if (v48 < 0) {
          __CFString v24 = (void **)v47[0];
        }
        uint64_t v25 = (const __CFString **)applesauce::CF::StringRef::operator->(&cf);
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, *v25);
        if (v46 >= 0) {
          uint64_t v26 = __p;
        }
        else {
          uint64_t v26 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v22;
        *(_WORD *)unint64_t v54 = 2080;
        *(void *)&v54[2] = "Aggregate_Device_Description.cpp";
        __int16 v55 = 1024;
        int v56 = 250;
        __int16 v57 = 2080;
        CFBooleanRef v58 = (const char *)v24;
        __int16 v59 = 2080;
        unint64_t v60 = v26;
        _os_log_debug_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Updating aggregate UID from %s to %s", buf, 0x2Cu);
        goto LABEL_46;
      case 3:
        AMCP::Log::Scope_Registry::get(v10);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v12 = **(NSObject ***)buf;
        if (*(void *)v54) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v54);
        }
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
          goto LABEL_50;
        }
        unsigned int v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        if (!*(void *)v4)
        {
          unsigned int v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        mach_port_t v15 = v14;
        long long v16 = v47;
        applesauce::CF::convert_to<std::string,0>((uint64_t)v47, *(const __CFString **)v4);
        if (v48 < 0) {
          long long v16 = (void **)v47[0];
        }
        if (!cf)
        {
          unint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)__p, (const __CFString *)cf);
        if (v46 >= 0) {
          mach_port_t v17 = __p;
        }
        else {
          mach_port_t v17 = (void **)__p[0];
        }
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v15;
        *(_WORD *)unint64_t v54 = 2080;
        *(void *)&v54[2] = "Aggregate_Device_Description.cpp";
        __int16 v55 = 1024;
        int v56 = 250;
        __int16 v57 = 2080;
        CFBooleanRef v58 = (const char *)v16;
        __int16 v59 = 2080;
        unint64_t v60 = v17;
        CFTypeRef v18 = v12;
        os_log_type_t v19 = OS_LOG_TYPE_INFO;
        break;
      default:
        goto LABEL_50;
    }
    _os_log_impl(&dword_1BAA78000, v18, v19, "%6u %32s:%-5d Updating aggregate UID from %s to %s", buf, 0x2Cu);
LABEL_46:
    if (v46 < 0) {
      operator delete(__p[0]);
    }
    if (v48 < 0) {
      operator delete(v47[0]);
    }
LABEL_50:
    if (v50) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v50);
    }
    CFStringRef v33 = *(const __CFString **)v4;
    CFTypeRef v34 = cf;
    *(void *)uint64_t v4 = cf;
    if (v34) {
      CFRetain(v34);
    }
    if (v33) {
      CFRelease(v33);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  CFDictionaryRef v8 = (const __CFDictionary *)v5;
LABEL_59:
  Aggregate_Device_Description::fill_out_optional_strings((Aggregate_Device_Description *)v4, (CFDictionaryRef *)&v52);
  Aggregate_Device_Description::fill_out_optional_BOOLeans((Aggregate_Device_Description *)v4, &v52);
  Aggregate_Device_Description::fill_out_subdevice_list((uint64_t *)v4, v8, &v52.info);
  if (v8) {
    CFRelease(v8);
  }
  *(void *)os_workgroup_interval_data_opaque_s buf = &v52.info;
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v5) {
    CFRelease(v5);
  }
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v43);
}

void sub_1BAB78EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,const void *a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,__int16 *a30)
{
  __cxa_free_exception(v31);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  applesauce::CF::StringRef::~StringRef(&a23);
  Aggregate_Description_Dictionary::~Aggregate_Description_Dictionary(&a24);
  a30 = &a25;
  std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a30);
  if (v30) {
    CFRelease(v30);
  }
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1460DE0;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v3 = &unk_1F1460DE0;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAB790D8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460DE0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9::operator() const(applesauce::CF::DictionaryRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460DE0;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460D70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1460D70;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460D70;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_9>,void ()(applesauce::CF::DictionaryRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460D70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF13DictionaryRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (void *)(a1 + 8);
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
  BOOL v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v3, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unsigned int v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __CFString v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    CFTypeRef v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Dicti"
          "onaryRef, Argument_Types = <>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v15 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v15);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    CFTypeRef v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>(),
        (BOOL v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    CFDictionaryRef v8 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __CFString v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    CFTypeRef v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Dicti"
          "onaryRef, Argument_Types = <>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v11 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v11);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    CFTypeRef v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v7 + 48))(buf);
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::DictionaryRef>::construct<applesauce::CF::DictionaryRef&>(a2, (CFTypeRef *)buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
}

void sub_1BAB79A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,std::runtime_error a23,void *a24)
{
  std::runtime_error::~runtime_error(v24);
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  *(void *)(v26 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v26 - 120));
  std::runtime_error::~runtime_error((std::runtime_error *)(v26 - 144));
  a24 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v25 + 24));
  std::runtime_error::~runtime_error(&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_free_exception(v24);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 145));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14793D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F14793D0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB79C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14793D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::DictionaryRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14793D0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::DictionaryRef ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<applesauce::CF::DictionaryRef ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::DictionaryRef ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_8"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::operator()(uint64_t a1@<X0>, Aggregate_Device_Description *a2@<X8>)
{
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460CF0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1460CF0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460CF0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_8>,applesauce::CF::DictionaryRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460CF0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_7"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(a2, *(const void **)(v2 + 56), *(void *)(v2 + 64), (uint64_t)(*(void *)(v2 + 64) - *(void *)(v2 + 56)) >> 2);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460C70;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1460C70;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460C70;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_7>,std::vector<unsigned int> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460C70;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIN10applesauce2CF8ArrayRefEEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::Thing::convert_to<applesauce::CF::ArrayRef>(&cf, a2);
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>((void *)(a1 + 8), v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __CFString v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    CFTypeRef v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const applesauce::CF::ArrayRef &>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 154;
    std::vector<void *>::vector(&v16);
    int v14 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v14);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    CFTypeRef v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  BOOL v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      CFDictionaryRef v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int v31 = 2080;
      *(void *)&uint64_t v31[2] = "Operation.h";
      __int16 v32 = 1024;
      int v33 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v21);
    std::runtime_error::runtime_error(&v22, &v21);
    std::runtime_error::runtime_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __CFString v24 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    CFTypeRef v34 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const applesauce::CF::ArrayRef &>]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v36 = 161;
    std::vector<void *>::vector(&v16);
    int v10 = backtrace((void **)v16, (*((void *)&v16 + 1) - (void)v16) >> 3);
    std::vector<void *>::resize((char **)&v16, v10);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    CFTypeRef v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v6 + 48))(v6, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAB7A9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,std::runtime_error a25,uint64_t a26)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1460BF0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  *unint64_t v3 = &unk_1F1460BF0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB7ABF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460BF0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460BF0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(applesauce::CF::ArrayRef const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(applesauce::CF::ArrayRef const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(applesauce::CF::ArrayRef const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = (unint64_t)*a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v4 = a1 + 8;
  unint64_t v14 = v3;
  uint64_t v17 = (std::__shared_mutex_base *)(*(void *)(a1 + 8) + 176);
  LOBYTE(v18) = 1;
  std::__shared_mutex_base::lock(v17);
  unint64_t v5 = *(void *)(*(void *)(a1 + 8) + 48);
  if (v3) {
    BOOL v6 = v5 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6)
  {
    int v8 = CFEqual((CFTypeRef)v5, (CFTypeRef)v3);
    std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
    if (v8)
    {
LABEL_12:
      CFRelease((CFTypeRef)v3);
      return;
    }
LABEL_11:
    uint64_t v9 = (char *)operator new(0x20uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = &unk_1F1488C30;
    v9[24] = 0;
    uint64_t v17 = (std::__shared_mutex_base *)(v9 + 24);
    CFTypeRef v18 = v9;
    int v19 = 0;
    int v20 = 0;
    uint64_t v10 = *(void *)(*(void *)(*(void *)v4 + 8) + 32);
    unsigned int v12 = *(_DWORD *)(*(void *)v4 + 40);
    unsigned int v11 = *(_DWORD *)(*(void *)v4 + 44);
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v15, (uint64_t *)&v17);
    *(void *)&long long v16 = v4;
    *((void *)&v16 + 1) = &v14;
    std::runtime_error v22 = 0;
    mach_port_t v13 = (char *)operator new(0x38uLL);
    *(void *)mach_port_t v13 = &unk_1F1460B60;
    AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v13 + 8), v15);
    *(_OWORD *)(v13 + 40) = v16;
    std::runtime_error v22 = v13;
    AMCP::Core::Conductor::enqueue_config_change(v10, v11, v12, 9, (uint64_t)v21);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v15);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)&v17);
    unint64_t v3 = v14;
    if (!v14) {
      return;
    }
    goto LABEL_12;
  }
  unint64_t v7 = v3 | v5;
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
  if (v7) {
    goto LABEL_11;
  }
}

void sub_1BAB7B068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3$_6clEN10applesauce2CF8ArrayRefEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v23 = **(NSObject ***)buf;
    if ((void)v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v33);
    }
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      __CFString v24 = pthread_self();
      mach_port_t v25 = pthread_mach_thread_np(v24);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v25;
      LOWORD(v33) = 2080;
      *(void *)((char *)&v33 + 2) = "Meta_Device_Core.cpp";
      WORD5(v33) = 1024;
      HIDWORD(v33) = 274;
      LOWORD(v34) = 2080;
      *(void *)((char *)&v34 + 2) = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v23, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  uint64_t v26 = (std::__shared_mutex_base *)(**(void **)(a1 + 40) + 176);
  char v27 = 1;
  std::__shared_mutex_base::lock(v26);
  unint64_t v3 = *(const void ***)(a1 + 48);
  uint64_t v4 = **(void **)(a1 + 40);
  unint64_t v5 = *(const void **)(v4 + 48);
  BOOL v6 = *v3;
  *(void *)(v4 + 48) = *v3;
  if (v6) {
    CFRetain(v6);
  }
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v7 = **(void **)(a1 + 40);
  uint64_t v8 = *(void *)(v7 + 80);
  CFArrayRef v9 = *(const __CFArray **)(v7 + 48);
  if (v9) {
    CFRetain(*(CFTypeRef *)(v7 + 48));
  }
  mach_port_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v10 = *(void *)(v8 + 16);
  uint64_t v11 = *(void *)(v8 + 24);
  unsigned int v12 = (uint64_t *)(v8 + 16);
  char v29 = 0;
  std::vector<Audio_Sub_Device_Description>::__init_with_size[abi:ne180100]<Audio_Sub_Device_Description*,Audio_Sub_Device_Description*>(&v29, v10, v11, 0x6DB6DB6DB6DB6DB7 * ((v11 - v10) >> 3));
  uint64_t v14 = *(void *)(v8 + 16);
  for (uint64_t i = *(void *)(v8 + 24);
        i != v14;
  *(void *)(v8 + 24) = v14;
  if (v9)
  {
    CFIndex Count = CFArrayGetCount(v9);
    CFIndex v16 = CFArrayGetCount(v9);
    if (Count)
    {
      CFIndex v17 = v16;
      for (unint64_t j = 0; j != Count; ++j)
      {
        if (j == v17) {
          break;
        }
        applesauce::CF::details::at_to<applesauce::CF::StringRef>((applesauce::CF::StringRef *)&cf, v9, j);
        int v19 = v29;
        int v20 = v30;
        if (v29 == v30) {
          goto LABEL_21;
        }
        while (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, v19))
        {
          v19 += 7;
          if (v19 == v20)
          {
            int v19 = v20;
            break;
          }
        }
        if (v19 == v30)
        {
LABEL_21:
          char v35 = 0;
          long long v33 = 0u;
          long long v34 = 0u;
          int v36 = 127;
          char v37 = 1;
          CFTypeRef v21 = cf;
          *(void *)os_workgroup_interval_data_opaque_s buf = cf;
          if (cf) {
            CFRetain(cf);
          }
          std::vector<Audio_Sub_Device_Description>::push_back[abi:ne180100](v12, (uint64_t)buf);
          if (v21) {
            CFRelease(v21);
          }
        }
        else
        {
          std::vector<Audio_Sub_Device_Description>::push_back[abi:ne180100](v12, (uint64_t)v19);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
    *(void *)os_workgroup_interval_data_opaque_s buf = &v29;
    std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    CFRelease(v9);
  }
  else
  {
    *(void *)os_workgroup_interval_data_opaque_s buf = &v29;
    std::vector<Audio_Sub_Device_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  }
  AMCP::Meta::Device::update_cached_properties_from_composition(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_subdevices(**(AMCP::Meta::Device ***)(a1 + 40));
  AMCP::Meta::Device::update_core(**(AMCP::Meta::Device ***)(a1 + 40));
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v26);
}

void sub_1BAB7B454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1460B60;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  unint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v3 = &unk_1F1460B60;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAB7B5F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460B60;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1},std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6::operator() const(applesauce::CF::ArrayRef)::{lambda(void)#1}>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460B60;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460AE0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1460AE0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460AE0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_6>,void ()(applesauce::CF::ArrayRef const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1460AE0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN10applesauce2CF8ArrayRefEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<applesauce::CF::ArrayRef>((uint64_t)&cf, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  AMCP::Implementation::In_Place_Storage<applesauce::CF::ArrayRef>::construct<applesauce::CF::ArrayRef&>(a2, &cf);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t AMCP::Core::Operation::call_function<applesauce::CF::ArrayRef>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unsigned int v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)char v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    __int16 v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Array"
          "Ref, Argument_Types = <>]";
    long long v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    CFIndex v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      CFArrayRef v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)char v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    __int16 v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = applesauce::CF::Array"
          "Ref, Argument_Types = <>]";
    long long v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    CFIndex v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAB7BD80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1460A60;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  *unint64_t v3 = &unk_1F1460A60;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB7BF38(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460A60;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<applesauce::CF::ArrayRef>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460A60;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<applesauce::CF::ArrayRef ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<applesauce::CF::ArrayRef ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<applesauce::CF::ArrayRef ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      unsigned int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_5"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::operator()@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = result[1];
  uint64_t v4 = *(void *)(v3 + 48);
  if (v4) {
    uint64_t result = CFRetain(*(CFTypeRef *)(v3 + 48));
  }
  *a2 = v4;
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14609D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14609D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14609D0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_5>,applesauce::CF::ArrayRef ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14609D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_4"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::vector<char> *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(v3 + 112);
  unint64_t v5 = *(uint64_t **)(v3 + 120);
  if (v4 == v5)
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *v4;
      uint64_t v9 = (std::__shared_weak_count *)v4[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v13, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(v8 + 24));
      if (v13)
      {
        AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)v11, v13);
        v7 += v12;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }

  return AMCP::Meta::create_layout_from_channel_count(a2, v7);
}

std::vector<char> *AMCP::Meta::create_layout_from_channel_count(std::vector<char> *this, unsigned int a2)
{
  if (a2 <= 1) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = a2;
  }
  std::vector<char>::value_type __x = 0;
  uint64_t result = std::vector<char>::vector(this, 20 * v3 + 12, &__x);
  std::vector<char>::pointer begin = result->__begin_;
  *(void *)std::vector<char>::pointer begin = 0;
  *((_DWORD *)begin + 2) = a2;
  std::vector<char>::pointer end = result->__end_;
  if (end - begin != 12)
  {
    std::vector<char>::pointer v7 = begin + 12;
    do
    {
      *(void *)std::vector<char>::pointer v7 = 0xFFFFFFFFLL;
      *((void *)v7 + 1) = 0;
      *((_DWORD *)v7 + 4) = 0;
      v7 += 20;
    }
    while (v7 != end);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460950;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1460950;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460950;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_4>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460950;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA13ChannelLayoutEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<CA::ChannelLayout>((uint64_t)&__p, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((void *)a2, __p, (uint64_t)v4, v4 - (unsigned char *)__p);
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<CA::ChannelLayout>::dispatch;
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1BAB7C7CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1478E58;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1478E58;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB7C8F8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1478E58;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ChannelLayout>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1478E58;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::ChannelLayout ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ChannelLayout ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<CA::ChannelLayout ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::ChannelLayout ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      int v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_3"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::vector<char> *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::operator()@<X0>(uint64_t a1@<X0>, std::vector<char> *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(v3 + 136);
  unint64_t v5 = *(uint64_t **)(v3 + 144);
  if (v4 == v5)
  {
    unsigned int v7 = 0;
  }
  else
  {
    unsigned int v7 = 0;
    do
    {
      uint64_t v8 = *v4;
      uint64_t v9 = (std::__shared_weak_count *)v4[1];
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v13, *(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 8) + 8) + 16), *(_DWORD *)(v8 + 24));
      if (v13)
      {
        AMCP::Core::Core::get_simple_required_property<1718444404u>((uint64_t)v11, v13);
        v7 += v12;
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      v4 += 2;
    }
    while (v4 != v5);
  }

  return AMCP::Meta::create_layout_from_channel_count(a2, v7);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14608D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F14608D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14608D0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_3>,CA::ChannelLayout ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F14608D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities47make_owned_object_with_properties_list_propertyIjJNS_7AddressENS_9DirectionEEEENSt3__110shared_ptrINS0_9OperationEEERNS0_6BrokerEjRKS3_SC_RKT_DpRKT0_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::operator()@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  void v8[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_mutex_base **)(a1 + 8);
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = operator new(0x28uLL);
  void *v6 = &unk_1F1485698;
  v6[1] = a1 + 20;
  uint64_t v6[2] = a1 + 32;
  void v6[3] = a1 + 36;
  void v6[4] = a1 + 48;
  v8[3] = v6;
  AMCP::Core::Broker::fetch_owned_object_ids_if (a2, v4, v5, (uint64_t)v8);
  return std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v8);
}

void sub_1BAB7CF3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE11target_typeEv()
{
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS_7AddressERKNS_9DirectionEENSt3__19enable_ifILb1EvEEEENS9_6vectorIjNS9_9allocatorIjEEEERNS0_6BrokerEjS5_RKT_DpOT0_EUlSK_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEEclESW_(void *a1, AMCP::Core::Core **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = (const AMCP::Address *)a1[1];
  uint64_t v4 = (_DWORD *)a1[2];
  int v5 = (const AMCP::Address *)a1[3];
  uint64_t v6 = (_DWORD *)a1[4];
  unint64_t v7 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(*a2, v3);
  if (!HIDWORD(v7)) {
    return 0;
  }
  if (*(_DWORD *)v3 == 1668047219 || *(_DWORD *)v3 == 1650682995)
  {
    if ((AMCP::is_base_of((AMCP *)*v4, v7) & 1) == 0) {
      return 0;
    }
  }
  else if (*v4 != v7)
  {
    return 0;
  }
  unint64_t v9 = AMCP::Core::Core::get_typed_property_value<AMCP::Direction,std::enable_if<true,void>>(v2, v5);
  if (HIDWORD(v9))
  {
    BOOL v10 = *(_DWORD *)v5 == 1650682995 || *(_DWORD *)v5 == 1668047219;
    if (!v10 && *v6 == v9) {
      return 1;
    }
  }
  return 0;
}

uint64_t AMCP::Core::Core::get_typed_property_value<AMCP::Direction,std::enable_if<true,void>>(AMCP::Core::Core *a1, const AMCP::Address *a2)
{
  if (!AMCP::Core::Core::has_property(a1, a2)) {
    goto LABEL_14;
  }
  AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v13, (int8x8_t *)a1, (unsigned int *)a2);
  int v5 = v13;
  if (v13)
  {
    unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v6))
    {
      LODWORD(v5) = AMCP::Core::Operation::call_function<AMCP::Direction>(v5);
LABEL_5:
      int v7 = 0;
      unsigned int v2 = v5 >> 8;
      goto LABEL_11;
    }
    unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
    if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v5, v8))
    {
      AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)v11, v5);
      LODWORD(v5) = AMCP::Thing::convert_to<AMCP::Direction>((uint64_t)v11);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      goto LABEL_5;
    }
    LOBYTE(v5) = 0;
  }
  int v7 = 1;
LABEL_11:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v7)
  {
    uint64_t v9 = 0x100000000;
    return v9 | v5 | (v2 << 8);
  }
LABEL_14:
  uint64_t v9 = 0;
  LOBYTE(v5) = 0;
  return v9 | v5 | (v2 << 8);
}

uint64_t AMCP::Core::Operation::call_function<AMCP::Direction>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>();
  uint64_t v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)int v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Direction, Argu"
          "ment_Types = <>]";
    __int16 v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>(),
        (uint64_t v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)int v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    int v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = AMCP::Direction, Argu"
          "ment_Types = <>]";
    __int16 v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    uint64_t v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB7D5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<AMCP::Direction ()(void)>>()
{
  unint64_t v0 = &AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
  {
    unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    if (v2)
    {
      unint64_t v0 = (void *)&AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>(void)::map;
    }
  }
  return v0[56];
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEPNS0_6__baseISX_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1485698;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEE7__cloneEv(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = &unk_1F1485698;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities49fetch_owned_object_ids_with_properties_and_valuesIjJRKNS2_7AddressERKNS2_9DirectionEENS_9enable_ifILb1EvEEEENS_6vectorIjNS_9allocatorIjEEEERNS3_6BrokerEjS8_RKT_DpOT0_EUlSM_E_NSF_ISQ_EEFbRKNS_10shared_ptrINS3_4CoreEEEEED0Ev()
{
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1485628;
  uint64_t v2 = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 8) = v2;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a1 + 20);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(a2 + 36) = result;
  return result;
}

__n128 std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = &unk_1F1485628;
  *((void *)v2 + 1) = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 20) = *(_OWORD *)(a1 + 20);
  __n128 result = *(__n128 *)(a1 + 36);
  *(__n128 *)(v2 + 36) = result;
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>,std::vector<unsigned int> ()(void)>::~__func()
{
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIN2CA14ValueRangeListEEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  AMCP::Core::Operation::call_function<CA::ValueRangeList>((uint64_t)&__p, (void *)(a1 + 8));
  *(void *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  std::vector<CA::ValueRange>::__init_with_size[abi:ne180100]<CA::ValueRange*,CA::ValueRange*>((void *)a2, __p, (uint64_t)v4, (v4 - (unsigned char *)__p) >> 4);
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<CA::ValueRangeList>::dispatch;
  if (__p)
  {
    uint64_t v4 = __p;
    operator delete(__p);
  }
}

void sub_1BAB7D928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Core::Operation::call_function<CA::ValueRangeList>(uint64_t a1, void *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
  uint64_t v4 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a2, v3);
  if (!v4)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 154;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    __int16 v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRangeList, A"
          "rgument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    long long v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = v4;
  if (!*((void *)v4 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>(),
        (uint64_t v4 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v5 + 7))(4, (uint64_t)v5 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v8 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)__int16 v29 = 2080;
      *(void *)&v29[2] = "Operation.h";
      __int16 v30 = 1024;
      int v31 = 161;
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    __int16 v32 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = CA::ValueRangeList, A"
          "rgument_Types = <>]";
    int v33 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v34 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    long long v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = *((void *)v4 + 3);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

void sub_1BAB7DDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1479168;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  unint64_t v3 = operator new(0x40uLL);
  *unint64_t v3 = &unk_1F1479168;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB7DF90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1479168;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<CA::ValueRangeList>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1479168;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<CA::ValueRangeList ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<CA::ValueRangeList ()(void)>>::dispatch;
LABEL_6:
      std::__function::__value_func<CA::ValueRangeList ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<CA::ValueRangeList ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_2"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::operator()(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(const void **)(v3 + 104);
  if (v4) {
    CFRetain(*(CFTypeRef *)(v3 + 104));
  }
  CFTypeRef cf = v4;
  AMCP::Meta::Device::get_device_core(&v12, *(std::__shared_mutex_base **)(*(void *)(v3 + 8) + 16), (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v12)
  {
    uint64_t v9 = 0x676C6F626E737223;
    int v10 = 0;
    operation = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, (int8x8_t *)v12, (unsigned int *)&v9);
    if (!v28)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v6 = **(NSObject ***)buf;
      if (*(void *)v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        int v7 = pthread_self();
        mach_port_t v8 = pthread_mach_thread_np(v7);
        *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v8;
        *(_WORD *)int v31 = 2080;
        *(void *)&uint64_t v31[2] = "Core.h";
        __int16 v32 = 1024;
        int v33 = 202;
        _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v19);
      std::runtime_error::runtime_error(&v20, &v19);
      std::runtime_error::runtime_error(&v21, &v20);
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      int v26 = -1;
      v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v22 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
      int v34 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = CA::ValueRangeList, Argument_Types = <>]";
      uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v36 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
      long long v17 = v14;
      uint64_t v18 = v15;
      long long v14 = 0uLL;
      uint64_t v15 = 0;
      long long v16 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    AMCP::Core::Operation::call_function<CA::ValueRangeList>(a2, v28);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
  else
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)os_workgroup_interval_data_opaque_s buf = 0;
    *(void *)int v31 = 0;
    CA::ValueRangeList::AddRange((double **)a2, (double *)buf);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void sub_1BAB7E524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,std::runtime_error a28,char a29)
{
  int v31 = *(void **)v29;
  if (*(void *)v29)
  {
    *(void *)(v29 + 8) = v31;
    operator delete(v31);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460850;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_1F1460850;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460850;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_2>,CA::ValueRangeList ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460850;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_setterIdEEvRNS0_9OperationEEUlRKNS_5ThingEE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  double v4 = AMCP::Thing::convert_to<double>(a2);
  return AMCP::Core::Operation::call_function<void,double const&>(v2, (uint64_t)&v4);
}

uint64_t AMCP::Core::Operation::call_function<void,double const&>(void *a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
  uint64_t v5 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v4);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v12 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)__int16 v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 154;
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const double &>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    long long v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v6 = v5;
  if (!*((void *)v5 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>(),
        (uint64_t v5 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v6 + 7))(4, (uint64_t)v6 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v30);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v30 = 2080;
      *(void *)&v30[2] = "Operation.h";
      __int16 v31 = 1024;
      int v32 = 161;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v28);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v20);
    std::runtime_error::runtime_error(&v21, &v20);
    std::runtime_error::runtime_error(&v22, &v21);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    int v27 = -1;
    v22.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v23 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v22);
    int v33 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Types "
          "= <const double &>]";
    int v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v35 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    long long v17 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v7 = *((void *)v5 + 3);
  if (!v7) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a2);
}

void sub_1BAB7ECBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1478CF0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x40uLL);
  *uint64_t v3 = &unk_1F1478CF0;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB7EE74(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1478CF0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_setter<double>(AMCP::Core::Operation &)::{lambda(AMCP::Thing const&)#1}>,void ()(AMCP::Thing const&)>::~__func(void *a1)
{
  *a1 = &unk_1F1478CF0;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_6;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      uint64_t v9 = *(void *)(a2 + 24);
      if (v9)
      {
        if (v9 == a2)
        {
          *((void *)a3 + 3) = a3;
          (*(void (**)(void, AMCP::Thing *))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a3);
        }
        else
        {
          *((void *)a3 + 3) = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
        }
      }
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<void ()(double const&)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<void ()(double const&)>>::dispatch;
LABEL_6:
      std::__function::__value_func<void ()(double const&)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
      uint64_t result = 0;
      *a4 = v10;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      mach_port_t v12 = 0;
      memset(v11, 0, sizeof(v11));
      AMCP::swap((AMCP::Thing *)v11, a3, a3);
      if (v12) {
        v12(0, v11, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = operator new(0x20uLL);
  uint64_t v5 = *(void *)(a1 + 8);
  v4[1] = 0;
  v4[2] = 0;
  *unint64_t v4 = &unk_1F1488C30;
  v13[1] = (uint64_t)v4;
  *((unsigned char *)v4 + 24) = 0;
  v13[0] = (uint64_t)(v4 + 3);
  int v14 = 0;
  int v15 = 0;
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 32);
  unsigned int v8 = *(_DWORD *)(v5 + 40);
  unsigned int v7 = *(_DWORD *)(v5 + 44);
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)v11, v13);
  *(void *)&long long v12 = a1 + 8;
  *((void *)&v12 + 1) = a2;
  long long v17 = 0;
  uint64_t v9 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v9 = &unk_1F1460740;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v9 + 8), v11);
  *(_OWORD *)(v9 + 40) = v12;
  long long v17 = v9;
  AMCP::Core::Conductor::enqueue_config_change(v6, v7, v8, 9, (uint64_t)v16);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v16);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v11);
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)v13);
}

void sub_1BAB7F26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)va1);
  _Unwind_Resume(a1);
}

void *_ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE11target_typeEv()
{
  return &_ZTIZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_;
}

uint64_t _ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEENK3$_1clIdEEDaRKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEEclEv(void **a1)
{
  uint64_t v21[2] = *MEMORY[0x1E4F143B8];
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 1));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if ((void)v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      LOWORD(v20) = 2080;
      *(void *)((char *)&v20 + 2) = "Meta_Device_Core.cpp";
      WORD5(v20) = 1024;
      HIDWORD(v20) = 158;
      LOWORD(v21[0]) = 2080;
      *(void *)((char *)v21 + 2) = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  long long v17 = (std::__shared_mutex_base *)(*a1[5] + 176);
  char v18 = 1;
  std::__shared_mutex_base::lock(v17);
  uint64_t v3 = (void *)*a1[5];
  uint64_t v5 = v3[1];
  unint64_t v4 = (std::__shared_weak_count *)v3[2];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v3 = (void *)*a1[5];
  }
  if (v3[13])
  {
    uint64_t v6 = *(std::__shared_mutex_base **)(v5 + 16);
    uint64_t v13 = 0x676C6F6275696420;
    int v14 = 0;
    *(void *)os_workgroup_interval_data_opaque_s buf = &unk_1F14607B0;
    *(void *)&long long v20 = &v13;
    *((void *)&v20 + 1) = v3 + 13;
    v21[0] = buf;
    AMCP::Core::Broker::fetch_first_core_if (&v15, v6, (uint64_t)buf);
    std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
    if (v15) {
      AMCP::Core::Core::set_simple_property_value<1853059700u>(v15, a1[6]);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v3 = (void *)*a1[5];
  }
  uint64_t v7 = (unsigned int *)v3[7];
  uint64_t v8 = (unsigned int *)v3[8];
  while (v7 != v8)
  {
    AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, *(std::__shared_mutex_base **)(v5 + 16), *v7);
    if (*(void *)buf) {
      AMCP::Core::Core::set_simple_property_value<1853059700u>(*(int8x8_t **)buf, a1[6]);
    }
    if ((void)v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v20);
    }
    ++v7;
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
}

void AMCP::Core::Core::set_simple_property_value<1853059700u>(int8x8_t *a1, void *a2)
{
  uint64_t v11 = 0x676C6F626E737274;
  int v12 = 0;
  if (AMCP::Core::Core::is_property_settable(a1, (const AMCP::Address *)&v11))
  {
    AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v9, a1, (unsigned int *)&v11);
    unint64_t v4 = v9;
    if (v9)
    {
      unint64_t v5 = AMCP::Implementation::get_type_marker<std::function<void ()(double const&)>>();
      if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v5))
      {
        AMCP::Core::Operation::call_function<void,double const&>(v4, (uint64_t)a2);
      }
      else
      {
        unint64_t v6 = AMCP::Implementation::get_type_marker<std::function<void ()(AMCP::Thing const&)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v4, v6))
        {
          memset(&v7[1], 0, 24);
          v7[0] = *a2;
          uint64_t v8 = AMCP::Implementation::In_Place_Storage<double>::dispatch;
          AMCP::Core::Operation::call_function<void,AMCP::Thing const&>(v4, (uint64_t)v7);
          if (v8) {
            v8(0, (uint64_t)v7, 0, 0);
          }
        }
      }
    }
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
}

void sub_1BAB7F620(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAB7F5B0);
}

void *_ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE11target_typeEv()
{
  return &_ZTIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENSt3__19enable_ifILb1EvEEEENS6_10shared_ptrINS0_4CoreEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSJ_E_;
}

uint64_t _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENSt3__19enable_ifILb1EvEEEENS6_10shared_ptrINS0_4CoreEEERNS0_6BrokerERKNS_7AddressERKT_DpOT0_EUlSJ_E_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EEclEST_(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3 = *(const AMCP::Address **)(a1 + 8);
  uint64_t v2 = *(const __CFString ***)(a1 + 16);
  AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, *a2, v3);
  BOOL v5 = 0;
  if (v8)
  {
    BOOL v4 = *(_DWORD *)v3 == 1650682995 || *(_DWORD *)v3 == 1668047219;
    if (!v4
      && applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, v2) == kCFCompareEqualTo)
    {
      BOOL v5 = 1;
    }
  }
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
  return v5;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE7__cloneEPNS0_6__baseISU_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14607B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14607B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN4AMCP4Core16Broker_Utilities43fetch_first_core_with_properties_and_valuesIN10applesauce2CF9StringRefEJENS_9enable_ifILb1EvEEEENS_10shared_ptrINS3_4CoreEEERNS3_6BrokerERKNS2_7AddressERKT_DpOT0_EUlSL_E_NS_9allocatorISP_EEFbRKSD_EED0Ev()
{
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE18destroy_deallocateEv(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE7destroyEv(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 _ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEPNS0_6__baseISH_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1460740;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *_ZNKSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v3 = &unk_1F1460740;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAB7F8C0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void _ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEED0Ev(void *a1)
{
  *a1 = &unk_1F1460740;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *_ZNSt3__110__function6__funcIZZN4AMCP4Meta6Device18update_core_commonERNS2_4Core13Operation_SetEENK3__1clIdEEDaRKT_EUlvE_NS_9allocatorISE_EEFvvEED1Ev(void *a1)
{
  *a1 = &unk_1F1460740;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14606D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14606D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14606D0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_1>,void ()(double const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14606D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device18update_core_commonERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::operator()(uint64_t a1)
{
  return *(double *)(*(void *)(a1 + 8) + 160);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1460650;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1460650;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460650;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::Meta::Device::update_core_common(AMCP::Core::Operation_Set &)::$_0>,double ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1460650;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

uint64_t AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)&v8, a1);
  uint64_t v13 = *(void *)(a1 + 40);
  int v14 = *(_DWORD *)(a1 + 48);
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
  uint64_t v3 = v8;
  unint64_t v4 = v9;
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  v15[0] = v3;
  v15[1] = v4;
  v16[0] = v10;
  v16[1] = v11;
  int v17 = v12;
  if (v11)
  {
    unint64_t v5 = *(void *)(v10 + 8);
    if ((v4 & (v4 - 1)) != 0)
    {
      if (v5 >= v4) {
        v5 %= v4;
      }
    }
    else
    {
      v5 &= v4 - 1;
    }
    *(void *)(v3 + 8 * v5) = v16;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  uint64_t v18 = v13;
  int v19 = v14;
  uint64_t v23 = 0;
  unint64_t v6 = operator new(0x40uLL);
  void *v6 = &unk_1F1477898;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v6 + 1), v15);
  void v6[6] = v18;
  *((_DWORD *)v6 + 14) = v19;
  uint64_t v23 = v6;
  memset(v20, 0, sizeof(v20));
  std::runtime_error v21 = 0;
  std::__function::__value_func<AMCP::Thing ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)v22);
  std::runtime_error v21 = AMCP::Implementation::In_Place_Storage<std::function<AMCP::Thing ()(void)>>::dispatch;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(a1, v2, (AMCP *)v20);
  if (v21) {
    v21(0, (uint64_t)v20, 0, 0);
  }
  std::__function::__value_func<AMCP::Thing ()(void)>::~__value_func[abi:ne180100](v22);
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)v15);
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)&v8);
}

void sub_1BAB7FEAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target_type()
{
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities27add_generic_property_getterIiEEvRNS0_9OperationEEUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::operator()@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3 = AMCP::Core::Operation::call_function<int>((void *)(a1 + 8));
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)a2 = v3;
  *(void *)(a2 + 32) = AMCP::Implementation::In_Place_Storage<int>::dispatch;
  return result;
}

uint64_t AMCP::Core::Operation::call_function<int>(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
  int v3 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(a1, v2);
  if (!v3)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v10 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 154;
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    __int16 v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = int, Argument_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v4 = v3;
  if (!*((void *)v3 + 7)
    || (*(void *)os_workgroup_interval_data_opaque_s buf = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>(),
        (int v3 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v4 + 7))(4, (uint64_t)v4 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)char v28 = 2080;
      *(void *)&v28[2] = "Operation.h";
      __int16 v29 = 1024;
      int v30 = 161;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v18);
    std::runtime_error::runtime_error(&v19, &v18);
    std::runtime_error::runtime_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v21 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    __int16 v31 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = int, Argument_Types = <>]";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v33 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    int v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v5 = *((void *)v3 + 3);
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v5 + 48))(v5);
}

void sub_1BAB803DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,std::runtime_error a22,char a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v25 - 128);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a23);
  std::runtime_error::~runtime_error(&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v24) {
    __cxa_free_exception(v23);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v25 - 129));
  _Unwind_Resume(a1);
}

uint64_t AMCP::Implementation::get_type_marker<std::function<int ()(void)>>()
{
  unint64_t v0 = &unk_1E9F79000;
  {
    unint64_t v0 = (void *)&unk_1E9F79000;
    if (v2)
    {
      unint64_t v0 = (void *)&unk_1E9F79000;
    }
  }
  return v0[333];
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table(a1 + 8);
}

double std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477898;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map(a2 + 8, a1 + 8);
  double result = *(double *)(a1 + 48);
  *(double *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  return result;
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  int v3 = operator new(0x40uLL);
  *int v3 = &unk_1F1477898;
  std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::unordered_map((uint64_t)(v3 + 1), v2);
  v3[6] = *(void *)(a1 + 48);
  *((_DWORD *)v3 + 14) = *(_DWORD *)(a1 + 56);
  return v3;
}

void sub_1BAB805FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1477898;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1},std::allocator<void AMCP::Core::Operation_Utilities::add_generic_property_getter<int>(AMCP::Core::Operation &)::{lambda(void)#1}>,AMCP::Thing ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1477898;
  std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

uint64_t std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

{
  uint64_t v3;

  int v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch(int a1, uint64_t a2, AMCP::Thing *a3, uint64_t *a4)
{
  uint64_t result = 0;
  switch(a1)
  {
    case 0:
      goto LABEL_4;
    case 1:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      uint64_t result = 0;
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
      break;
    case 2:
      *(_OWORD *)a3 = 0u;
      *((_OWORD *)a3 + 1) = 0u;
      std::__function::__value_func<int ()(void)>::__value_func[abi:ne180100]((uint64_t)a3, a2);
      *((void *)a3 + 4) = AMCP::Implementation::In_Place_Storage<std::function<int ()(void)>>::dispatch;
LABEL_4:
      std::__function::__value_func<int ()(void)>::~__value_func[abi:ne180100]((void *)a2);
      uint64_t result = 0;
      *(void *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      break;
    case 3:
      uint64_t v9 = AMCP::Implementation::get_type_marker<std::function<int ()(void)>>();
      uint64_t result = 0;
      *a4 = v9;
      break;
    case 4:
      if (*a4 == AMCP::Implementation::get_type_marker<std::function<int ()(void)>>()) {
        uint64_t result = a2;
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 6:
      uint64_t v11 = 0;
      memset(v10, 0, sizeof(v10));
      AMCP::swap((AMCP::Thing *)v10, a3, a3);
      if (v11) {
        v11(0, v10, 0, 0);
      }
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIiEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1477808;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

_DWORD *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F1477808;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<int>(AMCP::Address const&,int const&)::{lambda(void)#1}>,int ()(void)>::~__func()
{
}

void *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::target_type()
{
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core19Operation_Utilities22make_constant_propertyIbEENSt3__110shared_ptrINS0_9OperationEEERKNS_7AddressERKT_EUlvE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::operator()(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t result, uint64_t a2)
{
  *(void *)a2 = &unk_1F1482AC8;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

unsigned char *std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  *(void *)uint64_t result = &unk_1F1482AC8;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

void std::__function::__func<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1},std::allocator<std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<BOOL>(AMCP::Address const&,BOOL const&)::{lambda(void)#1}>,BOOL ()(void)>::~__func()
{
}

void *std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device32object_exists_and_is_a_subdeviceEjE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::operator()(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  CFTypeRef v4 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef cf = v4;
  AMCP::Meta::Device::get_device_core(&v6, *(std::__shared_mutex_base **)(*(void *)(v3 + 8) + 16), (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  if (v6 && *v6 == **(_DWORD **)(a1 + 16)) {
    **(unsigned char **)(a1 + 24) = 1;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

__n128 std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1461550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1461550;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0,std::allocator<AMCP::Meta::Device::object_exists_and_is_a_subdevice(unsigned int)::$_0>,void ()(Audio_Sub_Device_Description &)>::~__func()
{
}

void *std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Meta6Device29create_config_change_listenerEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator()(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  v27[4] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(result + 8);
  if (v4)
  {
    uint64_t v23 = v4 + 176;
    char v24 = 1;
    std::__shared_mutex_base::lock((std::__shared_mutex_base *)(v4 + 176));
    unint64_t v6 = a4[3];
    uint64_t v7 = a4[4];
    if (v6 == v7)
    {
LABEL_11:
      uint64_t v10 = *a4;
      uint64_t v11 = a4[1];
      if (*a4 == v11)
      {
LABEL_14:
        uint64_t v14 = (uint64_t *)a4[8];
        if (v14)
        {
          int v15 = *(_DWORD **)(v4 + 64);
          do
          {
            long long v16 = *(_DWORD **)(v4 + 56);
            if (v16 != v15)
            {
              long long v16 = *(_DWORD **)(v4 + 56);
              while (*v16 != *((_DWORD *)v14 + 4))
              {
                if (++v16 == v15) {
                  goto LABEL_51;
                }
              }
            }
            if (v16 != v15)
            {
              uint64_t v17 = v14 + 10;
              while (1)
              {
                uint64_t v17 = (uint64_t *)*v17;
                if (!v17) {
                  break;
                }
                int v18 = *((_DWORD *)v17 + 4);
                if (v18 > 1935763059)
                {
                  if (v18 > 1936879203)
                  {
                    if (v18 == 1936879204 || v18 == 1937009955) {
                      goto LABEL_53;
                    }
                  }
                  else if (v18 == 1935763060 || v18 == 1936487523)
                  {
                    goto LABEL_53;
                  }
                }
                else if (v18 > 1819569762)
                {
                  if (v18 == 1819569763 || v18 == 1853059700) {
                    goto LABEL_53;
                  }
                }
                else if (v18 == 1718444404 || v18 == 1718449187)
                {
                  goto LABEL_53;
                }
              }
            }
LABEL_51:
            uint64_t v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v23);
      }
      while (1)
      {
        int v26 = *v10;
        char v25 = 0;
        uint64_t v12 = *(void *)(v4 + 80);
        long long v13 = operator new(0x20uLL);
        void *v13 = &unk_1F1461550;
        v13[1] = v4;
        uint64_t v13[2] = &v26;
        void v13[3] = &v25;
        v27[3] = v13;
        Aggregate_Device_Description::for_each_subdevice(*(void *)(v12 + 16), *(void *)(v12 + 24), (uint64_t)v27);
        std::__function::__value_func<void ()(Audio_Sub_Device_Description &)>::~__value_func[abi:ne180100](v27);
        if (v25) {
          break;
        }
        if (++v10 == v11) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      uint64_t v8 = *(_DWORD **)(v4 + 64);
      while (1)
      {
        uint64_t v9 = *(_DWORD **)(v4 + 56);
        if (v9 != v8)
        {
          uint64_t v9 = *(_DWORD **)(v4 + 56);
          while (*v9 != *v6)
          {
            if (++v9 == v8) {
              goto LABEL_10;
            }
          }
        }
        if (v9 != v8) {
          break;
        }
LABEL_10:
        if (++v6 == v7) {
          goto LABEL_11;
        }
      }
    }
LABEL_53:
    AMCP::Meta::Device::update_cached_properties_from_composition((AMCP::Meta::Device *)v4);
    AMCP::Meta::Device::update_subdevices((AMCP::Meta::Device *)v4);
    AMCP::Meta::Device::update_core((AMCP::Meta::Device *)v4);
    return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v23);
  }
  return result;
}

void sub_1BAB81054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::destroy(uint64_t a1)
{
  unsigned int v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14615D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F14615D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14615D0;
  unsigned int v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::Meta::Device::create_config_change_listener(void)::$_0,std::allocator<AMCP::Meta::Device::create_config_change_listener(void)::$_0>,void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__func(void *a1)
{
  *a1 = &unk_1F14615D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::IO_Core::Device_Connection::get_device_uid(AMCP::IO_Core::Device_Connection *this, void *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)a2[1];
  if (!v2 || (v2 = std::__shared_weak_count::lock(v2), (uint64_t v4 = v2) == 0) || !*a2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)int v27 = 2080;
      *(void *)&v27[2] = "Device_Connection.cpp";
      __int16 v28 = 1024;
      int v29 = 33;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::runtime_error v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "CF::String AMCP::IO_Core::Device_Connection::get_device_uid() const";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    int v33 = 33;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v5 = *(void *)(*a2 + 96);
  if (!v5)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)os_workgroup_interval_data_opaque_s buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)int v27 = 2080;
      *(void *)&v27[2] = "Device.cpp";
      __int16 v28 = 1024;
      int v29 = 186;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (m_engine)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::runtime_error v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "CF::String AMCP::IO_Core::Device_Node_State::get_device_uid() const";
    int v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device.cpp";
    int v33 = 186;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_1BAB816F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__value_func<BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Connection27register_earliest_read_timeEjRKNS_3DAL8DAL_TimeEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 192);
  uint64_t v5 = *(std::__shared_weak_count **)(a2 + 200);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr))(*(void *)v4 + 72))(v16);
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v16);
  double v7 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v18);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (round(sample_time) >= round(v7))
  {
    double v8 = round(*(double *)(a2 + 56));
    double v9 = round(*(double *)(a2 + 64));
    double v10 = round(v3);
    if (v8 >= v9 || v10 < v8)
    {
      double v12 = v3 + 1.0;
      if (v8 < v9)
      {
        double v13 = round(v12);
        if (v10 >= v8) {
          double v14 = *(double *)(a2 + 56);
        }
        else {
          double v14 = v3;
        }
        if (v9 >= v13) {
          double v12 = *(double *)(a2 + 64);
        }
        if (v10 < v13)
        {
          double v3 = v14;
        }
        else
        {
          double v12 = *(double *)(a2 + 64);
          double v3 = *(double *)(a2 + 56);
        }
      }
      *(double *)(a2 + 56) = v3;
      *(double *)(a2 + 64) = v12;
    }
  }
  return 1;
}

void sub_1BAB81A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, void *a2)
{
  *a2 = &unk_1F1461660;
  a2[1] = *(void *)(result + 8);
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1461660;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::register_earliest_read_time(unsigned int,AMCP::DAL::DAL_Time const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
}

void AMCP::IO_Core::Device_Connection::begin_cycle(os_unfair_lock_s **a1, std::string::size_type a2, AMCP::DAL::DAL_Time_Delta *a3)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (uint64_t v4 = std::__shared_weak_count::lock(v4), (v112 = v4) == 0) || (v6 = *a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v88 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v88, OS_LOG_TYPE_ERROR))
    {
      std::vector<unsigned int>::pointer v89 = pthread_self();
      mach_port_t v90 = pthread_mach_thread_np(v89);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v90;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 102;
      LOWORD(v164) = 2080;
      *(void *)((char *)&v164 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v88, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v123);
    std::logic_error::logic_error((std::logic_error *)&inInputData, &v123);
    inInputData.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v152, (const std::logic_error *)&inInputData);
    long long v154 = 0uLL;
    mach_port_t v155 = 0;
    int v156 = -1;
    v152 = (double **)&unk_1F1489CC8;
    v153.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v152);
    *((void *)&v164 + 1) = "void AMCP::IO_Core::Device_Connection::begin_cycle(Object_ID, const Graph::IO_Proc_Cycle_In"
                             "fo &, const DAL::DAL_Time_Delta &) const";
    *(void *)&long long v165 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v165) = 102;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v146);
    *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = *(_OWORD *)v146;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v131 = *(void *)&v146[16];
    memset(v146, 0, sizeof(v146));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v7 = *(void *)&v6[24]._os_unfair_lock_opaque;
  double v8 = *(std::__shared_weak_count **)&v6[26]._os_unfair_lock_opaque;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  double v9 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 328))(v7);
  char v10 = (char)v9;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if ((v10 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v103 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
    {
      uint64_t v104 = pthread_self();
      mach_port_t v105 = pthread_mach_thread_np(v104);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v105;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 103;
      LOWORD(v164) = 2080;
      *(void *)((char *)&v164 + 2) = "not (device_state->get_engine()->has_time())";
      _os_log_error_impl(&dword_1BAA78000, v103, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v123);
    std::logic_error::logic_error((std::logic_error *)&inInputData, &v123);
    inInputData.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v152, (const std::logic_error *)&inInputData);
    long long v154 = 0uLL;
    mach_port_t v155 = 0;
    int v156 = -1;
    v152 = (double **)&unk_1F1489CC8;
    v153.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v152);
    *((void *)&v164 + 1) = "void AMCP::IO_Core::Device_Connection::begin_cycle(Object_ID, const Graph::IO_Proc_Cycle_In"
                             "fo &, const DAL::DAL_Time_Delta &) const";
    *(void *)&long long v165 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v165) = 103;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v146);
    *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = *(_OWORD *)v146;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v131 = *(void *)&v146[16];
    memset(v146, 0, sizeof(v146));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v12 = *(void *)&v6[24]._os_unfair_lock_opaque;
  mach_port_t v11 = *(std::__shared_weak_count **)&v6[26]._os_unfair_lock_opaque;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = *(unsigned int *)(a2 + 176);
  uint64_t v114 = (AMCP::DAL::DAL_Time *)(a2 + 80);
  uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
  long long v15 = *(std::__shared_weak_count **)&v6[30]._os_unfair_lock_opaque;
  v152 = *(double ***)&v6[28]._os_unfair_lock_opaque;
  v153.__vftable = (std::logic_error_vtbl *)v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&buf, a3, (uint64_t *)&v152);
  if ((buf.__r_.__value_.__s.__data_[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&buf);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v12 + 240))(v12, v13, host_time, vcvtmd_s64_f64(*(double *)&buf.__r_.__value_.__l.__size_));
  if (*((void *)&v164 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v164 + 1));
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1481C40;
  buf.__r_.__value_.__l.__size_ = a2;
  *(void *)&long long v164 = &buf;
  AMCP::IO_Core::Device_Node_State::for_each_stream_connection((uint64_t)v6, (uint64_t)&buf);
  std::__function::__value_func<void ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](&buf);
  uint64_t v16 = *(std::__shared_weak_count **)&v6[30]._os_unfair_lock_opaque;
  uint64_t v118 = *(void *)&v6[28]._os_unfair_lock_opaque;
  mach_port_t v119 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)v120, a3, &v118);
  std::string v17 = (std::__shared_weak_count *)a1[1];
  if (!v17 || (v17 = std::__shared_weak_count::lock(v17), (uint64_t v18 = v17) == 0) || (v19 = *a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    std::vector<unsigned int>::pointer v94 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
    {
      uint64_t v95 = pthread_self();
      mach_port_t v96 = pthread_mach_thread_np(v95);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v96;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 182;
      LOWORD(v164) = 2080;
      *(void *)((char *)&v164 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v94, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v123);
    std::logic_error::logic_error((std::logic_error *)&inInputData, &v123);
    inInputData.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v152, (const std::logic_error *)&inInputData);
    long long v154 = 0uLL;
    mach_port_t v155 = 0;
    int v156 = -1;
    v152 = (double **)&unk_1F1489CC8;
    v153.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v152);
    *((void *)&v164 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Graph::IO_Pr"
                             "oc_Cycle_Info &, const DAL_Time_Delta &) const";
    *(void *)&long long v165 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v165) = 182;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v146);
    *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = *(_OWORD *)v146;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v131 = *(void *)&v146[16];
    memset(v146, 0, sizeof(v146));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if ((v120[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)v120);
  }
  double v20 = v121;
  os_unfair_lock_lock(v19 + 1);
  uint64_t v21 = (std::__shared_weak_count *)a1[1];
  if (!v21 || (uint64_t v21 = std::__shared_weak_count::lock(v21), (v22 = v21) == 0) || !*a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v97 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
    {
      uint64_t v98 = pthread_self();
      mach_port_t v99 = pthread_mach_thread_np(v98);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v99;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 153;
      LOWORD(v164) = 2080;
      *(void *)((char *)&v164 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v97, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v123);
    std::logic_error::logic_error((std::logic_error *)&inInputData, &v123);
    inInputData.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v152, (const std::logic_error *)&inInputData);
    long long v154 = 0uLL;
    mach_port_t v155 = 0;
    int v156 = -1;
    v152 = (double **)&unk_1F1489CC8;
    v153.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v152);
    *((void *)&v164 + 1) = "Sample_Time_Range AMCP::IO_Core::Device_Connection::get_total_read_range() const";
    *(void *)&long long v165 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v165) = 153;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v146);
    *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = *(_OWORD *)v146;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v131 = *(void *)&v146[16];
    memset(v146, 0, sizeof(v146));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v23 = *(void **)&(*a1)[16]._os_unfair_lock_opaque;
  if (v23)
  {
    double v24 = 0.0;
    char v25 = 1;
    double v26 = 0.0;
    do
    {
      AMCP::IO_Core::Stream_Connection::get_unique_read_range((AMCP::IO_Core::Stream_Connection *)(v23 + 7));
      if (v25)
      {
        double v26 = v28;
        double v24 = v27;
      }
      else
      {
        double v29 = round(v27);
        double v30 = round(v28);
        if (v29 < v30)
        {
          double v31 = round(v24);
          double v32 = round(v26);
          if (v31 >= v29) {
            double v33 = v27;
          }
          else {
            double v33 = v24;
          }
          if (v30 >= v32) {
            double v34 = v28;
          }
          else {
            double v34 = v26;
          }
          if (v31 < v32) {
            double v26 = v34;
          }
          else {
            double v26 = v28;
          }
          if (v31 < v32) {
            double v24 = v33;
          }
          else {
            double v24 = v27;
          }
        }
      }
      char v25 = 0;
      uint64_t v23 = (void *)*v23;
    }
    while (v23);
  }
  else
  {
    double v26 = 0.0;
    double v24 = 0.0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  double v36 = v26 - v24;
  std::vector<unsigned int> v113 = v18;
  if (round(v36) > 8102.0)
  {
    AMCP::Log::Scope_Registry::get(v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v106 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      std::vector<unsigned int> v107 = pthread_self();
      mach_port_t v108 = pthread_mach_thread_np(v107);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v108;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Device_Connection.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 190;
      LOWORD(v164) = 2080;
      *(void *)((char *)&v164 + 2) = "not (total_read_range.length() <= 8102_S)";
      _os_log_error_impl(&dword_1BAA78000, v106, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outOutputData);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v123);
    std::logic_error::logic_error((std::logic_error *)&inInputData, &v123);
    inInputData.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)&v152, (const std::logic_error *)&inInputData);
    long long v154 = 0uLL;
    mach_port_t v155 = 0;
    int v156 = -1;
    v152 = (double **)&unk_1F1489CC8;
    v153.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v152);
    *((void *)&v164 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Graph::IO_Pr"
                             "oc_Cycle_Info &, const DAL_Time_Delta &) const";
    *(void *)&long long v165 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    DWORD2(v165) = 190;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v146);
    *(_OWORD *)&v130.__r_.__value_.__r.__words[1] = *(_OWORD *)v146;
    v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(void *)&long long v131 = *(void *)&v146[16];
    memset(v146, 0, sizeof(v146));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v38 = *(void *)&v19[24]._os_unfair_lock_opaque;
  uint64_t v37 = *(std::__shared_weak_count **)&v19[26]._os_unfair_lock_opaque;
  if (v37) {
    atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v39 = *(unsigned int *)(a2 + 176);
  uint64_t v40 = AMCP::DAL::DAL_Time::get_host_time(v114);
  uint64_t v109 = vcvtmd_s64_f64(v24);
  unint64_t v110 = vcvtmd_s64_f64(v36);
  unint64_t v111 = vcvtmd_s64_f64(v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(*(void *)v38 + 256))(v38, v39, v40, (double)(unint64_t)v109);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  for (uint64_t i = *(uint64_t **)&v19[16]._os_unfair_lock_opaque; i; uint64_t i = (uint64_t *)*i)
  {
    long long v117 = (AMCP::IO_Core::Stream_Connection *)(i + 7);
    AMCP::IO_Core::Stream_Connection::get_unique_read_range((AMCP::IO_Core::Stream_Connection *)(i + 7));
    double v43 = v42;
    double v45 = v44;
    if (round(v42) < round(v44))
    {
      uint64_t v48 = i[31];
      long long v47 = (std::__shared_weak_count *)i[32];
      if (v47)
      {
        char v49 = 1;
        atomic_fetch_add_explicit(&v47->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v50 = i[31];
        unint64_t v51 = (std::__shared_weak_count *)i[32];
        if (v51)
        {
          char v49 = 0;
          atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        unint64_t v51 = 0;
        char v49 = 1;
        uint64_t v50 = i[31];
      }
      AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v130, v50);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v152, (uint64_t *)&v130, v43, v45);
      (*(void (**)(std::string *__return_ptr, uint64_t, double ***))(*(void *)v48 + 160))(&buf, v48, &v152);
      if (v157) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v157);
      }
      if (*((void *)&v154 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
      }
      if (v130.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
      }
      if ((v49 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      if (v47)
      {
        std::string::size_type size = v47;
LABEL_78:
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
    }
    else
    {
      *(_OWORD *)&v130.__r_.__value_.__l.__data_ = 0uLL;
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v152, (uint64_t *)&v130, 0.0, 0.0);
      AMCP::DAL::Writable_Range::Writable_Range((uint64_t)&buf, (long long *)&v152, 0);
      if (v157) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v157);
      }
      if (*((void *)&v154 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
      }
      std::string::size_type size = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
      if (v130.__r_.__value_.__l.__size_) {
        goto LABEL_78;
      }
    }
    if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&buf, (AMCP::DAL::DAL_Time *)&v165))
    {
      AMCP::IO_Core::Stream_Connection::get_unique_read_range(v117);
      double v53 = v52;
      double v55 = v54;
      AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v150, (uint64_t)&buf);
      int v56 = v150;
      os_log_type_t v116 = v151;
      if (v150 != v151)
      {
        unint64_t v57 = vcvtmd_s64_f64(v55 - v53);
        double v58 = (double)(uint64_t)floor(v53);
        do
        {
          uint64_t v59 = i[50];
          if (v59)
          {
            AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)&v130, (uint64_t)v117);
            (*(void (**)(double ***__return_ptr))(*(void *)v130.__r_.__value_.__l.__data_ + 56))(&v152);
            uint64_t other_data_bytes = AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v152, *v56, v56[1]);
            uint64_t v149 = v60;
            if (v153.__vftable) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v153.__vftable);
            }
            uint64_t v61 = (std::__shared_weak_count *)v130.__r_.__value_.__l.__size_;
            if (!v130.__r_.__value_.__l.__size_) {
              goto LABEL_87;
            }
          }
          else
          {
            (*(void (**)(double ***__return_ptr))(*(void *)v169 + 56))(&v152);
            uint64_t other_data_bytes = AMCP::DAL::PCM_Data_Handler::get_other_data_bytes((AMCP::Log::Scope_Registry *)v152, *v56, v56[1]);
            uint64_t v149 = v73;
            uint64_t v61 = (std::__shared_weak_count *)v153.__vftable;
            if (!v153.__vftable) {
              goto LABEL_87;
            }
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v61);
LABEL_87:
          if (!other_data_bytes)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v61);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v152, "com.apple.coreaudio", "AMCP");
            mach_port_t v91 = *v152;
            if (v153.__vftable) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v153.__vftable);
            }
            if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
            {
              CFStringRef v92 = pthread_self();
              mach_port_t v93 = pthread_mach_thread_np(v92);
              LODWORD(v152) = 67109890;
              HIDWORD(v152) = v93;
              LOWORD(v153.__vftable) = 2080;
              *(std::logic_error_vtbl **)((char *)&v153.__vftable + 2) = (std::logic_error_vtbl *)"Device_Connection.cpp";
              WORD1(v153.__imp_.__imp_) = 1024;
              HIDWORD(v153.__imp_.__imp_) = 206;
              LOWORD(v154) = 2080;
              *(void *)((char *)&v154 + 2) = "not (not bytes.empty())";
              _os_log_error_impl(&dword_1BAA78000, v91, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v152, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v143);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&inInputData);
            std::logic_error::logic_error((std::logic_error *)v141, &inInputData);
            *(void *)uint64_t v141 = MEMORY[0x1E4FBA4C8] + 16;
            std::logic_error::logic_error((std::logic_error *)&v130, (const std::logic_error *)v141);
            long long v131 = 0uLL;
            *(void *)&long long v132 = 0;
            DWORD2(v132) = -1;
            v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
            v130.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v152, (uint64_t)&v130);
            *((void *)&v154 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Grap"
                                     "h::IO_Proc_Cycle_Info &, const DAL_Time_Delta &) const";
            mach_port_t v155 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
            int v156 = 206;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&outOutputData);
            *(_OWORD *)&v146[8] = outOutputData;
            *(void *)uint64_t v146 = &unk_1F148AA90;
            *(void *)&long long v147 = v159;
            long long outOutputData = 0uLL;
            uint64_t v159 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          *(void *)uint64_t v146 = &other_data_bytes;
          *(_OWORD *)&v146[8] = 0u;
          long long v147 = 0u;
          uint64_t v62 = i[31];
          unint64_t v63 = (std::__shared_weak_count *)i[32];
          if (v63) {
            atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v62 + 56))(&v130);
          uint64_t v64 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v130.__r_.__value_.__l.__data_);
          AMCP::DAL::sample_group_from_samples<float>((unint64_t *)&v152, (uint64_t **)(v64 + 56));
          char v65 = *v152;
          v153.__vftable = (std::logic_error_vtbl *)v152;
          std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)v152, (v153.__imp_.__imp_ - (const char *)v152) >> 4);
          if (v130.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
          }
          if (v63) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v63);
          }
          *(void *)&v146[8] = v65;
          *(void *)&v146[16] = v149 - (void)v65;
          *(void *)&long long v147 = other_data_bytes;
          *((void *)&v147 + 1) = v57;
          double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v56 + 2));
          int v67 = *((_DWORD *)i + 92);
          uint64_t v69 = *(void *)&v19[24]._os_unfair_lock_opaque;
          uint64_t v68 = *(std::__shared_weak_count **)&v19[26]._os_unfair_lock_opaque;
          if (v68) {
            atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v70 = *(unsigned int *)(a2 + 176);
          uint64_t v71 = AMCP::DAL::DAL_Time::get_host_time(v114);
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, unint64_t, unsigned char *, double))(*(void *)v69 + 264))(v69, v70, v71, *((unsigned int *)i + 24), v67 * vcvtmd_s64_f64(sample_time - v53), v57, v146, v58);
          if (v68) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v68);
          }
          uint64_t v18 = v113;
          if (v59)
          {
            CFStringRef v72 = (OpaqueAudioConverter *)i[50];
            AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)&v130, (uint64_t)v117);
            (*(void (**)(double ***__return_ptr))(*(void *)v130.__r_.__value_.__l.__data_ + 56))(&v152);
            if (v152)
            {
              (*((void (**)(std::string *__return_ptr, double, double))*v152 + 8))(&inInputData, *v56, v56[1]);
            }
            else
            {
              inInputData.__r_.__value_.__r.__words[0] = 0;
              uint64_t v162 = 0;
            }
            if (v153.__vftable) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v153.__vftable);
            }
            if (v130.__r_.__value_.__l.__size_) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.__r_.__value_.__l.__size_);
            }
            uint64_t v74 = i[31];
            long long v75 = (std::__shared_weak_count *)i[32];
            if (v75) {
              atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(double ***__return_ptr))(*(void *)v74 + 56))(&v152);
            if (v152)
            {
              (*((void (**)(long long *__return_ptr, double, double))*v152 + 8))(&outOutputData, *v56, v56[1]);
            }
            else
            {
              *(void *)&long long outOutputData = 0;
              uint64_t v160 = 0;
            }
            if (v153.__vftable) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v153.__vftable);
            }
            if (v75) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v75);
            }
            long long v76 = (AMCP::Log::Scope_Registry *)AudioConverterConvertComplexBuffer(v72, vcvtmd_s64_f64(v56[1] - *v56), (const AudioBufferList *)inInputData.__r_.__value_.__l.__data_, (AudioBufferList *)outOutputData);
            if (v76)
            {
              AMCP::Log::Scope_Registry::get(v76);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v152, "com.apple.coreaudio", "AMCP");
              BOOL v100 = *v152;
              if (v153.__vftable) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v153.__vftable);
              }
              if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
              {
                mach_port_t v101 = pthread_self();
                mach_port_t v102 = pthread_mach_thread_np(v101);
                LODWORD(v152) = 67109890;
                HIDWORD(v152) = v102;
                LOWORD(v153.__vftable) = 2080;
                *(std::logic_error_vtbl **)((char *)&v153.__vftable + 2) = (std::logic_error_vtbl *)"Device_Connection.cpp";
                WORD1(v153.__imp_.__imp_) = 1024;
                HIDWORD(v153.__imp_.__imp_) = 229;
                LOWORD(v154) = 2080;
                *(void *)((char *)&v154 + 2) = "not (the_error == noErr)";
                _os_log_error_impl(&dword_1BAA78000, v100, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device_Connection::read_all_input_streams: AudioConverterConvertComplexBuffer format conversion failed", (uint8_t *)&v152, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v145);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Device_Connection::read_all_input_streams: AudioConverterConvertComplexBuffer format conversion failed", (uint64_t)&v143);
              std::logic_error::logic_error(&v144, &v143);
              v144.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)&v130, &v144);
              long long v131 = 0uLL;
              *(void *)&long long v132 = 0;
              DWORD2(v132) = -1;
              v130.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
              v130.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v152, (uint64_t)&v130);
              *((void *)&v154 + 1) = "void AMCP::IO_Core::Device_Connection::read_all_input_streams(Object_ID, const Gr"
                                       "aph::IO_Proc_Cycle_Info &, const DAL_Time_Delta &) const";
              mach_port_t v155 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
              int v156 = 229;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v139);
              *(_OWORD *)&v141[8] = v139;
              *(void *)uint64_t v141 = &unk_1F148AA90;
              uint64_t v142 = v140;
              long long v139 = 0uLL;
              uint64_t v140 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&outOutputData, 0);
            std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100]((void *)&outOutputData + 1);
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&inInputData, 0);
            std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&inInputData.__r_.__value_.__l.__size_);
          }
          uint32_t os_unfair_lock_opaque = v19[22]._os_unfair_lock_opaque;
          if (*((char *)i + 39) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&v136, (const std::string::value_type *)i[2], i[3]);
          }
          else
          {
            std::logic_error v136 = (std::logic_error)*((_OWORD *)i + 1);
            *(void *)&long long v137 = i[4];
          }
          *((void *)&v137 + 1) = i[5];
          int v138 = *((_DWORD *)i + 12);
          LODWORD(v152) = os_unfair_lock_opaque;
          std::logic_error v153 = v136;
          long long v154 = v137;
          std::logic_error v136 = (std::logic_error)0;
          *(void *)&long long v137 = 0;
          LODWORD(v155) = v138;
          AMCP::DAL::Writable_Range::commit_direct_write(v169, (uint64_t)&v152, (uint64_t)v56);
          if (SBYTE7(v154) < 0) {
            operator delete(v153.__vftable);
          }
          v56 += 14;
        }
        while (v56 != v116);
      }
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&buf, (AMCP::DAL::DAL_Time *)&v165))
      {
        std::string v130 = buf;
        uint64_t v78 = (std::__shared_weak_count *)*((void *)&v164 + 1);
        uint64_t v79 = v164;
        long long v131 = v164;
        if (*((void *)&v164 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v164 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        long long v132 = v165;
        uint64_t v133 = v166;
        uint64_t v81 = v167;
        int v80 = v168;
        uint64_t v134 = v167;
        mach_port_t v135 = v168;
        if (v168) {
          atomic_fetch_add_explicit(&v168->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v82 = i[31];
        long long v83 = (std::__shared_weak_count *)i[32];
        if (v83) {
          atomic_fetch_add_explicit(&v83->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::string v123 = v130;
        uint64_t v124 = v79;
        mach_port_t v125 = v78;
        if (v78) {
          atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v126 = v132;
        uint64_t v127 = v133;
        uint64_t v128 = v81;
        unint64_t v129 = v80;
        if (v80) {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(double ***__return_ptr))(*(void *)v82 + 144))(&v152);
        if (v129) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v129);
        }
        if (v125) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v125);
        }
        if (v83) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v83);
        }
        AMCP::IO_Core::Stream_Connection::maybe_capture_audio((uint64_t)v117, (uint64_t)&v152);
        if (v157) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v157);
        }
        if (*((void *)&v154 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
        }
        if (v135) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v135);
        }
        if (*((void *)&v131 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v131 + 1));
        }
      }
      v152 = &v150;
      std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v152);
    }
    i[14] = 0;
    i[15] = 0;
    if (v168) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v168);
    }
    if (*((void *)&v164 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v164 + 1));
    }
  }
  uint64_t v85 = *(void *)&v19[24]._os_unfair_lock_opaque;
  std::vector<unsigned int>::pointer v84 = *(std::__shared_weak_count **)&v19[26]._os_unfair_lock_opaque;
  if (v84) {
    atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v86 = *(unsigned int *)(a2 + 176);
  uint64_t v87 = AMCP::DAL::DAL_Time::get_host_time(v114);
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, double))(*(void *)v85 + 272))(v85, v86, v87, v110, v111, (double)v109);
  if (v84) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v84);
  }
  os_unfair_lock_unlock(v19 + 1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  if (v122) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v122);
  }
  if (v119) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v119);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v112);
}

void sub_1BAB83580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, os_unfair_lock_s *lock, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  os_unfair_lock_unlock(lock);
  if (v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  if (a31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a31);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 60))
  {
    uint64_t v2 = result;
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void AMCP::IO_Core::Device_Connection::end_cycle(uint64_t *a1, uint64_t a2, AMCP::DAL::DAL_Time_Delta *a3)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (uint64_t v4 = std::__shared_weak_count::lock(v4), (v7 = v4) == 0) || (v8 = *a1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v15 = **(NSObject ***)buf;
    if (*(void *)v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v33);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v17;
      *(_WORD *)double v33 = 2080;
      *(void *)&uint64_t v33[2] = "Device_Connection.cpp";
      __int16 v34 = 1024;
      int v35 = 117;
      __int16 v36 = 2080;
      *(void *)uint64_t v37 = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v31);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v23);
    std::logic_error::logic_error(&v24, &v23);
    v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v25, &v24);
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    int v30 = -1;
    v25.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    double v26 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v25);
    *(void *)&v37[6] = "void AMCP::IO_Core::Device_Connection::end_cycle(const Graph::IO_Proc_Cycle_Info &, const DAL::"
                         "DAL_Time_Delta &) const";
    uint64_t v38 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    int v39 = 117;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v18);
    long long v21 = v18;
    uint64_t v22 = v19;
    long long v18 = 0uLL;
    uint64_t v19 = 0;
    double v20 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v9 = *(void *)(v8 + 120);
  v25.__vftable = *(std::logic_error_vtbl **)(v8 + 112);
  v25.__imp_.__imp_ = (const char *)v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)buf, a3, (uint64_t *)&v25);
  AMCP::IO_Core::Device_Connection::write_all_output_streams((uint64_t)a1, a2, (double *)buf);
  if (*(void *)&v37[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[6]);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v9);
  }
  uint64_t v11 = *(void *)(v8 + 96);
  char v10 = *(std::__shared_weak_count **)(v8 + 104);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = *(unsigned int *)(a2 + 176);
  uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
  uint64_t v14 = *(void *)(v8 + 120);
  v25.__vftable = *(std::logic_error_vtbl **)(v8 + 112);
  v25.__imp_.__imp_ = (const char *)v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)buf, a3, (uint64_t *)&v25);
  if ((buf[0] & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(*(void *)v11 + 248))(v11, v12, host_time, vcvtmd_s64_f64(*(double *)v33));
  if (*(void *)&v37[6]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v37[6]);
  }
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v14);
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_1BAB840A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39)
{
  if (a39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a39);
  }
  if (v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v41);
  }
  if (v40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  _Unwind_Resume(a1);
}

void AMCP::IO_Core::Device_Connection::write_all_output_streams(uint64_t a1, uint64_t a2, double *a3)
{
  uint64_t v3 = (os_unfair_lock_t *)a1;
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v4 || (uint64_t v4 = std::__shared_weak_count::lock(v4), (v6 = v4) == 0) || (v7 = *v3) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v141, "com.apple.coreaudio", "AMCP");
    uint64_t v87 = **(NSObject ***)v141;
    if (*(void *)v142) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v142);
    }
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v88 = pthread_self();
      mach_port_t v89 = pthread_mach_thread_np(v88);
      *(_DWORD *)uint64_t v141 = 67109890;
      *(_DWORD *)&v141[4] = v89;
      *(_WORD *)uint64_t v142 = 2080;
      *(void *)&v142[2] = "Device_Connection.cpp";
      __int16 v143 = 1024;
      int v144 = 252;
      LOWORD(v145) = 2080;
      *(void *)((char *)&v145 + 2) = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v87, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v141, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)inInputData);
    std::logic_error::logic_error((std::logic_error *)&v122, (const std::string *)inInputData);
    v122.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v122);
    long long v151 = 0uLL;
    *(void *)&long long v152 = 0;
    DWORD2(v152) = -1;
    *(void *)std::string buf = &unk_1F1489CC8;
    *(void *)&buf[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v141, (uint64_t)buf);
    *((void *)&v145 + 1) = "void AMCP::IO_Core::Device_Connection::write_all_output_streams(const Graph::IO_Proc_Cycle_"
                             "Info &, const DAL_Time_Delta &) const";
    uint64_t v146 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    int v147 = 252;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)outOutputData);
    *(_OWORD *)&v129[8] = *(_OWORD *)outOutputData;
    *(void *)unint64_t v129 = &unk_1F148AA90;
    uint64_t v130 = v137;
    outOutputData[0] = 0;
    outOutputData[1] = 0;
    uint64_t v137 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  os_unfair_lock_lock(*v3);
  os_unfair_lock_t lock = v7;
  uint64_t v10 = *(void *)&v7[6]._os_unfair_lock_opaque;
  os_unfair_lock_t v9 = v7 + 6;
  uint64_t v8 = v10;
  if (!v10 || AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v8 + 128), (AMCP::DAL::DAL_Time *)(v8 + 168)))
  {
    os_unfair_lock_t v11 = v3[1];
    if (!v11
      || (os_unfair_lock_t v11 = (os_unfair_lock_t)std::__shared_weak_count::lock((std::__shared_weak_count *)v11),
          (uint64_t v12 = (std::__shared_weak_count *)v11) == 0)
      || (os_unfair_lock_t v11 = *v3) == 0)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v141, "com.apple.coreaudio", "AMCP");
      mach_port_t v96 = **(NSObject ***)v141;
      if (*(void *)v142) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v142);
      }
      if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
      {
        uint64_t v97 = pthread_self();
        mach_port_t v98 = pthread_mach_thread_np(v97);
        *(_DWORD *)uint64_t v141 = 67109890;
        *(_DWORD *)&v141[4] = v98;
        *(_WORD *)uint64_t v142 = 2080;
        *(void *)&v142[2] = "Device_Connection.cpp";
        __int16 v143 = 1024;
        int v144 = 288;
        LOWORD(v145) = 2080;
        *(void *)((char *)&v145 + 2) = "not (device_state.operator BOOL())";
        _os_log_error_impl(&dword_1BAA78000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v141, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)inInputData);
      std::logic_error::logic_error((std::logic_error *)&v122, (const std::string *)inInputData);
      v122.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
      std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v122);
      long long v151 = 0uLL;
      *(void *)&long long v152 = 0;
      DWORD2(v152) = -1;
      *(void *)std::string buf = &unk_1F1489CC8;
      *(void *)&buf[16] = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v141, (uint64_t)buf);
      *((void *)&v145 + 1) = "Sample_Time_Range AMCP::IO_Core::Device_Connection::calculate_write_range() const";
      uint64_t v146 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v147 = 288;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)outOutputData);
      *(_OWORD *)&v129[8] = *(_OWORD *)outOutputData;
      *(void *)unint64_t v129 = &unk_1F148AA90;
      uint64_t v130 = v137;
      outOutputData[0] = 0;
      outOutputData[1] = 0;
      uint64_t v137 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)uint64_t v141 = &unk_1F1461770;
    *(void *)uint64_t v142 = buf;
    *(void *)&long long v145 = v141;
    AMCP::IO_Core::Device_Node_State::for_each_stream_connection((uint64_t)v11, 0, (uint64_t)v141);
    std::__function::__value_func<BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__value_func[abi:ne180100](v141);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    double v13 = *(double *)buf;
    double v14 = *(double *)&buf[8];
    if ((*(unsigned char *)a3 & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a3);
    }
    double v15 = a3[1];
    uint64_t v17 = *(void *)&lock[24]._os_unfair_lock_opaque;
    uint64_t v16 = *(std::__shared_weak_count **)&lock[26]._os_unfair_lock_opaque;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = *(unsigned int *)(a2 + 176);
    os_log_type_t v116 = (AMCP::DAL::DAL_Time *)(a2 + 80);
    mach_port_t v119 = v6;
    uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)(a2 + 80));
    unint64_t v112 = vcvtmd_s64_f64(v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, double))(*(void *)v17 + 280))(v17, v18, host_time, vcvtmd_s64_f64(v14 - v13), (double)(uint64_t)floor(v13));
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    uint64_t v114 = v3;
    double v20 = 0.0;
    double v21 = 0.0;
    while (1)
    {
      os_unfair_lock_t v9 = *(os_unfair_lock_t *)&v9->_os_unfair_lock_opaque;
      if (!v9)
      {
        uint64_t v81 = *(void *)&lock[24]._os_unfair_lock_opaque;
        int v80 = *(std::__shared_weak_count **)&lock[26]._os_unfair_lock_opaque;
        if (v80) {
          atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v82 = *(unsigned int *)(a2 + 176);
        uint64_t v83 = AMCP::DAL::DAL_Time::get_host_time(v116);
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, unint64_t, double))(*(void *)v81 + 296))(v81, v82, v83, vcvtmd_s64_f64(v21 - v20), v112, (double)(uint64_t)floor(v20));
        if (v80) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
        }
        goto LABEL_146;
      }
      uint64_t v22 = (std::__shared_weak_count *)v3[1];
      if (!v22 || (uint64_t v22 = std::__shared_weak_count::lock(v22), (v115 = v22) == 0) || (v23 = *v3) == 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v22);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v141, "com.apple.coreaudio", "AMCP");
        mach_port_t v99 = **(NSObject ***)v141;
        if (*(void *)v142) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v142);
        }
        if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
        {
          BOOL v100 = pthread_self();
          mach_port_t v101 = pthread_mach_thread_np(v100);
          *(_DWORD *)uint64_t v141 = 67109890;
          *(_DWORD *)&v141[4] = v101;
          *(_WORD *)uint64_t v142 = 2080;
          *(void *)&v142[2] = "Device_Connection.cpp";
          __int16 v143 = 1024;
          int v144 = 305;
          LOWORD(v145) = 2080;
          *(void *)((char *)&v145 + 2) = "not (device_state.operator BOOL())";
          _os_log_error_impl(&dword_1BAA78000, v99, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v141, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v127);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)inInputData);
        std::logic_error::logic_error((std::logic_error *)&v122, (const std::string *)inInputData);
        v122.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
        std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)&v122);
        long long v151 = 0uLL;
        *(void *)&long long v152 = 0;
        DWORD2(v152) = -1;
        *(void *)std::string buf = &unk_1F1489CC8;
        *(void *)&buf[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v141, (uint64_t)buf);
        *((void *)&v145 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info &, "
                                 "const Stream_Connection &, Sample_Time_Range &) const";
        uint64_t v146 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
        int v147 = 305;
        std::vector<void *>::vector(outOutputData);
        int v102 = backtrace((void **)outOutputData[0], (unint64_t)((char *)outOutputData[1] - (char *)outOutputData[0]) >> 3);
        std::vector<void *>::resize((char **)outOutputData, v102);
        *(_OWORD *)&v129[8] = *(_OWORD *)outOutputData;
        *(void *)unint64_t v129 = &unk_1F148AA90;
        uint64_t v130 = v137;
        outOutputData[0] = 0;
        outOutputData[1] = 0;
        uint64_t v137 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      std::logic_error v24 = v9 + 32;
      std::logic_error v25 = v9 + 42;
      if (!AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v9[32], (AMCP::DAL::DAL_Time *)&v9[42])) {
        break;
      }
      uint64_t v26 = *(void *)&v9[62]._os_unfair_lock_opaque;
      uint64_t v27 = *(std::__shared_weak_count **)&v9[64]._os_unfair_lock_opaque;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(unsigned char *__return_ptr))(*(void *)v26 + 72))(buf);
      BOOL v28 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v152);
      if (*((void *)&v154 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
      }
      if (*((void *)&v151 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v151 + 1));
      }
      if (v27) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v27);
      }
      unint64_t v6 = v119;
      if (!v28) {
        break;
      }
      uint64_t v29 = *(void *)&v9[62]._os_unfair_lock_opaque;
      int v30 = *(std::__shared_weak_count **)&v9[64]._os_unfair_lock_opaque;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)unint64_t v129 = *(_OWORD *)&v24->_os_unfair_lock_opaque;
      uint64_t v32 = *(void *)&v9[38]._os_unfair_lock_opaque;
      char v31 = *(std::__shared_weak_count **)&v9[40]._os_unfair_lock_opaque;
      *(void *)&v129[16] = *(void *)&v9[36]._os_unfair_lock_opaque;
      uint64_t v130 = v32;
      long long v131 = v31;
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v132 = *(_OWORD *)&v25->_os_unfair_lock_opaque;
      uint64_t v133 = *(void *)&v9[46]._os_unfair_lock_opaque;
      double v33 = *(std::__shared_weak_count **)&v9[50]._os_unfair_lock_opaque;
      uint64_t v134 = *(void *)&v9[48]._os_unfair_lock_opaque;
      mach_port_t v135 = v33;
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v29 + 144))(v141);
      if (v135) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v135);
      }
      if (v131) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v131);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      *(_OWORD *)std::string inInputData = 0uLL;
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (uint64_t *)inInputData);
      *(_OWORD *)&v24->_uint32_t os_unfair_lock_opaque = *(_OWORD *)buf;
      *(void *)&v9[36]._uint32_t os_unfair_lock_opaque = *(void *)&buf[16];
      long long v34 = v151;
      long long v151 = 0uLL;
      int v35 = *(std::__shared_weak_count **)&v9[40]._os_unfair_lock_opaque;
      *(_OWORD *)&v9[38]._uint32_t os_unfair_lock_opaque = v34;
      if (v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v35);
      }
      *(_OWORD *)&v25->_uint32_t os_unfair_lock_opaque = v152;
      *(void *)&v9[46]._uint32_t os_unfair_lock_opaque = v153;
      long long v36 = v154;
      long long v154 = 0uLL;
      uint64_t v37 = *(std::__shared_weak_count **)&v9[50]._os_unfair_lock_opaque;
      *(_OWORD *)&v9[48]._uint32_t os_unfair_lock_opaque = v36;
      unint64_t v6 = v119;
      if (v37)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        goto LABEL_47;
      }
LABEL_49:
      if (*((void *)&v151 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v151 + 1));
      }
      if (*(void *)&inInputData[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&inInputData[8]);
      }
      if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v141, (AMCP::DAL::DAL_Time *)&v146))
      {
        AMCP::DAL::DAL_Timed_Segment::translate_range(&v127, v149, (uint64_t)v141);
        uint64_t v38 = v127;
        for (uint64_t i = v128; v38 != i; v38 += 12)
        {
          int v39 = *(OpaqueAudioConverter **)&v9[100]._os_unfair_lock_opaque;
          if (v39)
          {
            uint64_t v40 = *(void *)&v9[62]._os_unfair_lock_opaque;
            unint64_t v41 = *(std::__shared_weak_count **)&v9[64]._os_unfair_lock_opaque;
            if (v41) {
              atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v40 + 56))(buf);
            if (*(void *)buf)
            {
              (*(void (**)(unsigned char *__return_ptr, double, double))(**(void **)buf + 64))(inInputData, *v38, v38[1]);
            }
            else
            {
              *(void *)std::string inInputData = 0;
              uint64_t v140 = 0;
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (v41) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v41);
            }
            AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)v129, (uint64_t)&v9[14]);
            (*(void (**)(unsigned char *__return_ptr))(**(void **)v129 + 56))(buf);
            if (*(void *)buf)
            {
              (*(void (**)(AudioBufferList **__return_ptr, double, double))(**(void **)buf + 64))(outOutputData, *v38, v38[1]);
            }
            else
            {
              outOutputData[0] = 0;
              uint64_t v138 = 0;
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (*(void *)&v129[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v129[8]);
            }
            double v44 = (AMCP::Log::Scope_Registry *)AudioConverterConvertComplexBuffer(v39, vcvtmd_s64_f64(v38[1] - *v38), *(const AudioBufferList **)inInputData, outOutputData[0]);
            if (v44)
            {
              AMCP::Log::Scope_Registry::get(v44);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              uint64_t v103 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
              {
                uint64_t v104 = pthread_self();
                mach_port_t v105 = pthread_mach_thread_np(v104);
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v105;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "Device_Connection.cpp";
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&unsigned char buf[20] = 320;
                LOWORD(v151) = 2080;
                *(void *)((char *)&v151 + 2) = "not (the_error == noErr)";
                _os_log_error_impl(&dword_1BAA78000, v103, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Device_Connection::write_stream: AudioConverterConvertComplexBuffer format conversion failed", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v126);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"Device_Connection::write_stream: AudioConverterConvertComplexBuffer format conversion failed", (uint64_t)&v124);
              std::logic_error::logic_error(&v125, &v124);
              v125.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)v129, &v125);
              uint64_t v130 = 0;
              long long v131 = 0;
              *(void *)&long long v132 = 0;
              DWORD2(v132) = -1;
              *(void *)unint64_t v129 = &unk_1F1489CC8;
              *(void *)&v129[16] = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v129);
              *((void *)&v151 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_In"
                                       "fo &, const Stream_Connection &, Sample_Time_Range &) const";
              *(void *)&long long v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
              DWORD2(v152) = 320;
              applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v120);
              v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
              *(std::logic_error *)&v122.__r_.__value_.__r.__words[1] = v120;
              uint64_t v123 = v121;
              v120.__vftable = 0;
              v120.__imp_.__imp_ = 0;
              uint64_t v121 = 0;
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)outOutputData, 0);
            std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&outOutputData[1]);
            std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)inInputData, 0);
            std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&inInputData[8]);
            AMCP::IO_Core::Stream_Connection::get_converter_buffer((AMCP::Log::Scope_Registry *)v129, (uint64_t)&v9[14]);
            (*(void (**)(unsigned char *__return_ptr))(**(void **)v129 + 56))(buf);
            if (*(void *)buf)
            {
              (*(void (**)(AudioBufferList **__return_ptr, double, double))(**(void **)buf + 144))(outOutputData, *v38, v38[1]);
            }
            else
            {
              outOutputData[0] = 0;
              outOutputData[1] = 0;
              uint64_t v137 = 0;
            }
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            double v45 = *(AMCP::Log::Scope_Registry **)&v129[8];
            if (*(void *)&v129[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v129[8]);
            }
          }
          else
          {
            uint64_t v42 = *(void *)&v9[62]._os_unfair_lock_opaque;
            double v43 = *(std::__shared_weak_count **)&v9[64]._os_unfair_lock_opaque;
            if (v43) {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(unsigned char *__return_ptr))(*(void *)v42 + 56))(buf);
            if (*(void *)buf)
            {
              (*(void (**)(AudioBufferList **__return_ptr, double, double))(**(void **)buf + 144))(outOutputData, *v38, v38[1]);
            }
            else
            {
              outOutputData[0] = 0;
              outOutputData[1] = 0;
              uint64_t v137 = 0;
            }
            double v45 = *(AMCP::Log::Scope_Registry **)&buf[8];
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (v43) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v43);
            }
          }
          if (outOutputData[0] == outOutputData[1])
          {
            AMCP::Log::Scope_Registry::get(v45);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            mach_port_t v90 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
            {
              mach_port_t v91 = pthread_self();
              mach_port_t v92 = pthread_mach_thread_np(v91);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v92;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Device_Connection.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = 324;
              LOWORD(v151) = 2080;
              *(void *)((char *)&v151 + 2) = "not (not samples.empty())";
              _os_log_error_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v122);
            std::logic_error::logic_error(&v120, &v122);
            v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error((std::logic_error *)v129, &v120);
            uint64_t v130 = 0;
            long long v131 = 0;
            *(void *)&long long v132 = 0;
            DWORD2(v132) = -1;
            *(void *)unint64_t v129 = &unk_1F1489CC8;
            *(void *)&v129[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v129);
            *((void *)&v151 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info"
                                     " &, const Stream_Connection &, Sample_Time_Range &) const";
            *(void *)&long long v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
            DWORD2(v152) = 324;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v124.__r_.__value_.__l.__data_);
            *(std::string *)&inInputData[8] = v124;
            *(void *)std::string inInputData = &unk_1F148AA90;
            memset(&v124, 0, sizeof(v124));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          if ((AudioBufferList *)((char *)outOutputData[1] - (char *)outOutputData[0]) != (AudioBufferList *)16)
          {
            AMCP::Log::Scope_Registry::get(v45);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            mach_port_t v93 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
            {
              std::vector<unsigned int>::pointer v94 = pthread_self();
              mach_port_t v95 = pthread_mach_thread_np(v94);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v95;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Device_Connection.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = 325;
              LOWORD(v151) = 2080;
              *(void *)((char *)&v151 + 2) = "not (samples.size() == 1)";
              _os_log_error_impl(&dword_1BAA78000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We only handle interleaved sample streams currently", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"We only handle interleaved sample streams currently", (uint64_t)&v122);
            std::logic_error::logic_error(&v120, &v122);
            v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error((std::logic_error *)v129, &v120);
            uint64_t v130 = 0;
            long long v131 = 0;
            *(void *)&long long v132 = 0;
            DWORD2(v132) = -1;
            *(void *)unint64_t v129 = &unk_1F1489CC8;
            *(void *)&v129[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v129);
            *((void *)&v151 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_Info"
                                     " &, const Stream_Connection &, Sample_Time_Range &) const";
            *(void *)&long long v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
            DWORD2(v152) = 325;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v124.__r_.__value_.__l.__data_);
            *(std::string *)&inInputData[8] = v124;
            *(void *)std::string inInputData = &unk_1F148AA90;
            memset(&v124, 0, sizeof(v124));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          uint64_t v46 = *(void *)outOutputData[0];
          double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v38 + 2));
          double v48 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v38 + 7));
          AMCP::DAL::DAL_Time::operator-((uint64_t)buf, (AMCP::DAL::DAL_Time *)(v38 + 7), (AMCP::DAL::DAL_Time *)(v38 + 2));
          if ((buf[0] & 2) == 0) {
            AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)buf);
          }
          double v49 = *(double *)&buf[8];
          uint64_t v50 = (AMCP::Log::Scope_Registry *)*((void *)&v151 + 1);
          if (*((void *)&v151 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v151 + 1));
          }
          double v51 = round(v20);
          double v52 = round(v21);
          if (v51 < v52)
          {
            double v54 = round(sample_time);
            double v55 = round(v48);
            if (v54 >= v51) {
              double v56 = v20;
            }
            else {
              double v56 = sample_time;
            }
            if (v52 >= v55) {
              double v57 = v21;
            }
            else {
              double v57 = v48;
            }
            if (v54 < v55)
            {
              double v21 = v57;
              double v20 = v56;
            }
            double v53 = sample_time - v20;
          }
          else
          {
            double v53 = 0.0;
            double v20 = sample_time;
            double v21 = v48;
          }
          unint64_t v58 = vcvtmd_s64_f64(v49);
          uint64_t v59 = v9 + 58;
          if (v39) {
            uint64_t v59 = v9 + 92;
          }
          uint32_t os_unfair_lock_opaque = v59->_os_unfair_lock_opaque;
          uint64_t v61 = v9 + 56;
          if (v39) {
            uint64_t v61 = v9 + 90;
          }
          if (os_unfair_lock_opaque)
          {
            uint64_t v62 = v9 + 59;
            if (v39) {
              uint64_t v62 = v9 + 93;
            }
            if (v58 * v62->_os_unfair_lock_opaque != *(void *)&outOutputData[0]->mBuffers[0].mNumberChannels)
            {
              AMCP::Log::Scope_Registry::get(v50);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              mach_port_t v106 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
              {
                std::vector<unsigned int> v107 = pthread_self();
                mach_port_t v108 = pthread_mach_thread_np(v107);
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v108;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "Device_Connection.cpp";
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&unsigned char buf[20] = 360;
                LOWORD(v151) = 2080;
                *(void *)((char *)&v151 + 2) = "not (number_of_frames * format.mChannelsPerFrame == samples[0].m_number_of_samples)";
                _os_log_error_impl(&dword_1BAA78000, v106, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The actual buffer size doesn't match the range!", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"The actual buffer size doesn't match the range!", (uint64_t)&v122);
              std::logic_error::logic_error(&v120, &v122);
              v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)v129, &v120);
              uint64_t v130 = 0;
              long long v131 = 0;
              *(void *)&long long v132 = 0;
              DWORD2(v132) = -1;
              *(void *)unint64_t v129 = &unk_1F1489CC8;
              *(void *)&v129[16] = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v129);
              *((void *)&v151 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_In"
                                       "fo &, const Stream_Connection &, Sample_Time_Range &) const";
              *(void *)&long long v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
              DWORD2(v152) = 360;
              applesauce::backtrace::snapshot_N<64>::snapshot_N(&v124.__r_.__value_.__l.__data_);
              *(std::string *)&inInputData[8] = v124;
              *(void *)std::string inInputData = &unk_1F148AA90;
              memset(&v124, 0, sizeof(v124));
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            unsigned int v63 = os_unfair_lock_opaque * v58;
            unsigned int v64 = os_unfair_lock_opaque * vcvtmd_s64_f64(v53);
          }
          else
          {
            char v65 = v9 + 57;
            if (v39) {
              char v65 = v9 + 91;
            }
            uint64_t v66 = v65->_os_unfair_lock_opaque;
            if (v58 < v66 || (unint64_t v67 = v58 / v66, v58 != v58 / v66 * v66))
            {
              AMCP::Log::Scope_Registry::get(v50);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              std::vector<unsigned int>::pointer v84 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
              {
                uint64_t v85 = pthread_self();
                mach_port_t v86 = pthread_mach_thread_np(v85);
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v86;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "Device_Connection.cpp";
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&unsigned char buf[20] = 349;
                LOWORD(v151) = 2080;
                *(void *)((char *)&v151 + 2) = "not (number_of_frames >= format.mFramesPerPacket && number_of_frames % "
                                                 "format.mFramesPerPacket == 0)";
                _os_log_error_impl(&dword_1BAA78000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The number of frames is not a multiple of the packet size!", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"The number of frames is not a multiple of the packet size!", (uint64_t)&v122);
              std::logic_error::logic_error(&v120, &v122);
              v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)v129, &v120);
              uint64_t v130 = 0;
              long long v131 = 0;
              *(void *)&long long v132 = 0;
              DWORD2(v132) = -1;
              *(void *)unint64_t v129 = &unk_1F1489CC8;
              *(void *)&v129[16] = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v129);
              *((void *)&v151 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_In"
                                       "fo &, const Stream_Connection &, Sample_Time_Range &) const";
              *(void *)&long long v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
              DWORD2(v152) = 349;
              applesauce::backtrace::snapshot_N<64>::snapshot_N(&v124.__r_.__value_.__l.__data_);
              *(std::string *)&inInputData[8] = v124;
              *(void *)std::string inInputData = &unk_1F148AA90;
              memset(&v124, 0, sizeof(v124));
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            int64_t v68 = vcvtmd_s64_f64(v53);
            uint64_t v69 = v68 / v66;
            if (v68 != v68 / v66 * v66)
            {
              AMCP::Log::Scope_Registry::get(v50);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
              uint64_t v109 = **(NSObject ***)buf;
              if (*(void *)&buf[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
              }
              if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
              {
                unint64_t v110 = pthread_self();
                mach_port_t v111 = pthread_mach_thread_np(v110);
                *(_DWORD *)std::string buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v111;
                *(_WORD *)&uint8_t buf[8] = 2080;
                *(void *)&buf[10] = "Device_Connection.cpp";
                *(_WORD *)&unsigned char buf[18] = 1024;
                *(_DWORD *)&unsigned char buf[20] = 350;
                LOWORD(v151) = 2080;
                *(void *)((char *)&v151 + 2) = "not (frame_offset.get() % format.mFramesPerPacket == 0)";
                _os_log_error_impl(&dword_1BAA78000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s The offset of this write is not a multiple of the packet size!", buf, 0x22u);
              }
              AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
              __cxa_allocate_exception(0x40uLL);
              caulk::make_string((caulk *)"The offset of this write is not a multiple of the packet size!", (uint64_t)&v122);
              std::logic_error::logic_error(&v120, &v122);
              v120.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
              std::logic_error::logic_error((std::logic_error *)v129, &v120);
              uint64_t v130 = 0;
              long long v131 = 0;
              *(void *)&long long v132 = 0;
              DWORD2(v132) = -1;
              *(void *)unint64_t v129 = &unk_1F1489CC8;
              *(void *)&v129[16] = &unk_1F1489CF0;
              boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v129);
              *((void *)&v151 + 1) = "void AMCP::IO_Core::Device_Connection::write_stream(const Graph::IO_Proc_Cycle_In"
                                       "fo &, const Stream_Connection &, Sample_Time_Range &) const";
              *(void *)&long long v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
              DWORD2(v152) = 350;
              applesauce::backtrace::snapshot_N<64>::snapshot_N(&v124.__r_.__value_.__l.__data_);
              *(std::string *)&inInputData[8] = v124;
              *(void *)std::string inInputData = &unk_1F148AA90;
              memset(&v124, 0, sizeof(v124));
              boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
            }
            uint32_t v70 = v61->_os_unfair_lock_opaque;
            unsigned int v63 = v61->_os_unfair_lock_opaque * v67;
            unsigned int v64 = v70 * v69;
          }
          uint64_t v71 = v63;
          *(void *)std::string inInputData = v63;
          *(void *)&inInputData[8] = v46;
          if (!v46 && v63) {
            std::terminate();
          }
          *(void *)std::string buf = inInputData;
          *(_OWORD *)&uint8_t buf[8] = 0u;
          long long v151 = 0u;
          uint64_t v72 = *(void *)&v9[62]._os_unfair_lock_opaque;
          uint64_t v73 = *(std::__shared_weak_count **)&v9[64]._os_unfair_lock_opaque;
          if (v73) {
            atomic_fetch_add_explicit(&v73->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(std::string *__return_ptr))(*(void *)v72 + 56))(&v122);
          uint64_t v74 = AMCP::DAL::Container::get_container_data_ptr<AMCP::DAL::PCM_Data_Handler>((uint64_t)v122.__r_.__value_.__l.__data_);
          AMCP::DAL::sample_group_from_samples<float>((unint64_t *)v129, (uint64_t **)(v74 + 56));
          uint64_t v75 = **(void **)v129;
          *(void *)&v129[8] = *(void *)v129;
          std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<float>>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)v129, (uint64_t)(*(void *)&v129[16] - *(void *)v129) >> 4);
          if (v122.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v122.__r_.__value_.__l.__size_);
          }
          if (v73) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v73);
          }
          *(void *)&uint8_t buf[8] = v75;
          *(void *)&buf[16] = (*(_DWORD *)&inInputData[8] - v75);
          *(void *)&long long v151 = v71;
          *((void *)&v151 + 1) = v58;
          uint64_t v76 = *(void *)&v23[24]._os_unfair_lock_opaque;
          long long v77 = *(std::__shared_weak_count **)&v23[26]._os_unfair_lock_opaque;
          if (v77) {
            atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v78 = *(unsigned int *)(a2 + 176);
          uint64_t v79 = AMCP::DAL::DAL_Time::get_host_time(v116);
          (*(void (**)(uint64_t, uint64_t, uint64_t, void, void, unint64_t, unsigned char *, double))(*(void *)v76 + 288))(v76, v78, v79, v9[24]._os_unfair_lock_opaque, v64, v58, buf, (double)(uint64_t)floor(sample_time));
          if (v77) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v77);
          }
          unint64_t v6 = v119;
          if (outOutputData[0])
          {
            outOutputData[1] = outOutputData[0];
            std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100]((caulk::rt_safe_memory_resource *)outOutputData[0], (int64_t)(v137 - (unint64_t)outOutputData[0]) >> 4);
          }
        }
        *(void *)std::string buf = &v127;
        std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
        uint64_t v3 = v114;
      }
      if (v148) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v148);
      }
      if (*((void *)&v145 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v145 + 1));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v115);
    }
    *(_OWORD *)std::string inInputData = 0uLL;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (uint64_t *)inInputData, 0.0, 0.0);
    AMCP::DAL::Writable_Range::Writable_Range((uint64_t)v141, (long long *)buf, 0);
LABEL_47:
    if (*((void *)&v154 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
    }
    goto LABEL_49;
  }
LABEL_146:
  os_unfair_lock_unlock(lock);

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_1BAB86058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, os_unfair_lock_s *lock, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  os_unfair_lock_unlock(lock);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples<unsigned char>>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (!(a2 >> 60))
  {
    uint64_t v2 = result;
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK4AMCP7IO_Core17Device_Connection21calculate_write_rangeEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::operator()(uint64_t a1, void *a2)
{
  uint64_t v3 = *(double **)(a1 + 8);
  uint64_t v4 = a2 + 9;
  uint64_t v5 = a2 + 14;
  if (AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a2 + 9), (AMCP::DAL::DAL_Time *)(a2 + 14)))
  {
    uint64_t v6 = a2[24];
    long long v25 = *(_OWORD *)v4;
    uint64_t v8 = a2[12];
    os_unfair_lock_t v7 = (std::__shared_weak_count *)a2[13];
    uint64_t v26 = v4[2];
    uint64_t v27 = v8;
    BOOL v28 = v7;
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v29 = *(_OWORD *)v5;
    uint64_t v10 = a2[17];
    os_unfair_lock_t v9 = (std::__shared_weak_count *)a2[18];
    uint64_t v30 = v5[2];
    uint64_t v31 = v10;
    uint64_t v32 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *__return_ptr))(*(void *)v6 + 144))(v33);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    AMCP::DAL::DAL_Timed_Segment::translate_range(&v23, v36, (uint64_t)v33);
    os_unfair_lock_t v11 = v23;
    uint64_t v12 = v24;
    if (v23 != v24)
    {
      double v14 = *v3;
      double v13 = v3[1];
      do
      {
        double v15 = (AMCP::DAL::DAL_Time *)(v11 + 2);
        if (round(v14) < round(v13))
        {
          double sample_time = AMCP::DAL::DAL_Time::get_sample_time(v15);
          double v17 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v11 + 7));
          double v14 = *v3;
          double v13 = v3[1];
          double v18 = round(*v3);
          double v19 = round(v13);
          if (v18 < v19)
          {
            double v20 = round(sample_time);
            double v21 = round(v17);
            if (v20 < v21)
            {
              if (v20 < v18) {
                double v14 = sample_time;
              }
              if (v19 < v21) {
                double v13 = v17;
              }
            }
          }
          else
          {
            double v13 = v17;
            double v14 = sample_time;
          }
        }
        else
        {
          double v14 = AMCP::DAL::DAL_Time::get_sample_time(v15);
          double v13 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v11 + 7));
        }
        *uint64_t v3 = v14;
        v3[1] = v13;
        v11 += 12;
      }
      while (v11 != v12);
    }
    uint64_t v37 = &v23;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v37);
    if (v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v35);
    }
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
  }
  return 1;
}

void sub_1BAB86918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1461770;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1461770;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::calculate_write_range(void)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
}

void *std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7IO_Core17Device_Connection31set_required_samples_for_streamEjmRKN5caulk10time_rangeINS_3DAL11Sample_TimeES5_EEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::operator()(AMCP::Log::Scope_Registry *a1, uint64_t a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a2 + 40);
  uint64_t v3 = *((void *)a1 + 1);
  if (v2 == v3)
  {
    uint64_t v4 = (double *)*((void *)a1 + 2);
    double v5 = *v4;
    if (*v4 != floor(*v4))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        double v13 = pthread_self();
        mach_port_t v14 = pthread_mach_thread_np(v13);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)int v35 = 2080;
        *(void *)&v35[2] = "Device_Connection.cpp";
        __int16 v36 = 1024;
        int v37 = 137;
        __int16 v38 = 2080;
        *(void *)int v39 = "not (required_samples.start().get_double() == required_samples.start().floor().get_double())";
        _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v25);
      std::logic_error::logic_error(&v26, &v25);
      v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v27, &v26);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      int v32 = -1;
      v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      BOOL v28 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
      *(void *)&v39[6] = "auto AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(Object_ID, size_t, con"
                           "st DAL::Sample_Time_Range &)::(anonymous class)::operator()(Stream_Connection &) const";
      uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v41 = 137;
      std::vector<void *>::vector(&v20);
      int v15 = backtrace((void **)v20, (*((void *)&v20 + 1) - (void)v20) >> 3);
      std::vector<void *>::resize((char **)&v20, v15);
      long long v23 = v20;
      uint64_t v24 = v21;
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      uint64_t v22 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    double v6 = v4[1];
    if (v6 != floor(v6))
    {
      AMCP::Log::Scope_Registry::get(a1);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v16 = **(NSObject ***)buf;
      if (*(void *)v35) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        double v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)int v35 = 2080;
        *(void *)&v35[2] = "Device_Connection.cpp";
        __int16 v36 = 1024;
        int v37 = 138;
        __int16 v38 = 2080;
        *(void *)int v39 = "not (required_samples.end().get_double() == required_samples.end().floor().get_double())";
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s We should have no fractional samples", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"We should have no fractional samples", (uint64_t)&v25);
      std::logic_error::logic_error(&v26, &v25);
      v26.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v27, &v26);
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      int v32 = -1;
      v27.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      BOOL v28 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
      *(void *)&v39[6] = "auto AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(Object_ID, size_t, con"
                           "st DAL::Sample_Time_Range &)::(anonymous class)::operator()(Stream_Connection &) const";
      uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
      int v41 = 138;
      std::vector<void *>::vector(&v20);
      int v19 = backtrace((void **)v20, (*((void *)&v20 + 1) - (void)v20) >> 3);
      std::vector<void *>::resize((char **)&v20, v19);
      long long v23 = v20;
      uint64_t v24 = v21;
      long long v20 = 0uLL;
      uint64_t v21 = 0;
      uint64_t v22 = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    double v7 = round(*(double *)(a2 + 56));
    double v8 = round(*(double *)(a2 + 64));
    if (v7 < v8)
    {
      double v9 = round(v5);
      double v10 = round(v6);
      if (v9 >= v7) {
        double v5 = *(double *)(a2 + 56);
      }
      if (v8 >= v10) {
        double v6 = *(double *)(a2 + 64);
      }
      if (v9 >= v10)
      {
        double v6 = *(double *)(a2 + 64);
        double v5 = *(double *)(a2 + 56);
      }
      *(double *)(a2 + 56) = v5;
      *(double *)(a2 + 64) = v6;
    }
    else
    {
      *(_OWORD *)(a2 + 56) = *(_OWORD *)v4;
    }
  }
  return v2 != v3;
}

void sub_1BAB8716C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,void *a26)
{
  MEMORY[0x1C18590A0](v26);
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  *(void *)(v28 - 128) = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v28 - 120));
  MEMORY[0x1C18590A0](v28 - 144);
  a26 = &unk_1F148A9F0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(v27 + 24));
  MEMORY[0x1C18590A0](&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  __cxa_free_exception(v26);
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 145));
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14616F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14616F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0,std::allocator<AMCP::IO_Core::Device_Connection::set_required_samples_for_stream(unsigned int,unsigned long,caulk::time_range<AMCP::DAL::Sample_Time,AMCP::DAL::Sample_Time> const&)::$_0>,BOOL ()(AMCP::IO_Core::Stream_Connection &)>::~__func()
{
}

void AMCP::IO_Core::Device_Connection::get_timebase(AMCP::IO_Core::Device_Connection *this, uint64_t *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3 || (v3 = std::__shared_weak_count::lock(v3)) == 0 || (uint64_t v5 = *a2) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v8 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      double v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      *(_WORD *)std::logic_error v26 = 2080;
      *(void *)&v26[2] = "Device_Connection.cpp";
      __int16 v27 = 1024;
      int v28 = 384;
      __int16 v29 = 2080;
      *(void *)uint64_t v30 = "not (device_state.operator BOOL())";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v16);
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "Timebase_Ref AMCP::IO_Core::Device_Connection::get_timebase() const";
    uint64_t v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/IO_Core/Device_Connection.cpp";
    int v32 = 384;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    double v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v7 = *(void *)(v5 + 112);
  uint64_t v6 = *(void *)(v5 + 120);
  *(void *)this = v7;
  *((void *)this + 1) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
}

void sub_1BAB875D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  _Unwind_Resume(exception_object);
}

void ADS::ObjectManager::~ObjectManager(ADS::ObjectManager *this)
{
  *(void *)this = &unk_1F14617F0;
  unsigned int v1 = (void **)((char *)this + 16);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table((uint64_t)this + 40);
  uint64_t v2 = v1;
  std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](&v2);

  JUMPOUT(0x1C1859840);
}

{
  void **v1;
  void **v2;

  *(void *)this = &unk_1F14617F0;
  unsigned int v1 = (void **)((char *)this + 16);
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table((uint64_t)this + 40);
  uint64_t v2 = v1;
  std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned int>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unsigned int v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned int>>,0>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

ADS::ObjectManager *ADS::ObjectManager::ObjectManager(ADS::ObjectManager *this)
{
  *(void *)this = &unk_1F14617F0;
  *((_DWORD *)this + 2) = 32;
  *((_OWORD *)this + 1) = 0u;
  uint64_t v2 = (uint64_t *)((char *)this + 16);
  *((_OWORD *)this + 3) = 0u;
  *((void *)this + 8) = 0;
  *((_OWORD *)this + 2) = 0u;
  *((_DWORD *)this + 18) = 1065353216;
  v4[4] = (char *)this + 32;
  v4[0] = operator new(0x2800uLL);
  v4[1] = v4[0];
  v4[2] = v4[0];
  void v4[3] = v4[0] + 10240;
  std::vector<ADS::ObjectManager::ObjectInfo>::__swap_out_circular_buffer(v2, v4);
  std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)v4);
  return this;
}

void sub_1BAB8796C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::~__hash_table(v9 + 40);
  std::vector<ADS::ObjectManager::ObjectInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<ADS::ObjectManager::ObjectInfo>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 40;
      *(_OWORD *)(v4 - 40) = *(_OWORD *)(v3 - 40);
      *(void *)(v4 - 16) = 0;
      *(void *)(v4 - 8) = 0;
      *(void *)(v4 - 24) = 0;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      v4 -= 40;
      v3 -= 40;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v6 = *result;
  *__n128 result = v5;
  a2[1] = v6;
  uint64_t v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 40;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ADS::ObjectManager::StaticInitializer(ADS::ObjectManager *this)
{
  uint64_t v1 = *MEMORY[0x1E4F143B8];
  operator new();
}

void sub_1BAB87BA8(_Unwind_Exception *a1)
{
  uint64_t v2 = v1;
  MEMORY[0x1C1859840](v2, 0x10F1C40976EDA9DLL);
  _Unwind_Resume(a1);
}

uint64_t ADS::ObjectManager::GetNextObjectID(ADS::ObjectManager *this)
{
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  char v1 = ADS::ObjectManager::sMutex;
  uint64_t v4 = ADS::ObjectManager::sMutex;
  if (ADS::ObjectManager::sMutex) {
    char v1 = (*(uint64_t (**)(uint64_t))(*(void *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
  }
  char v5 = v1;
  uint64_t v2 = *(unsigned int *)(ADS::ObjectManager::sInstance + 8);
  *(_DWORD *)(ADS::ObjectManager::sInstance + 8) = v2 + 1;
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v4);
  return v2;
}

void ADS::ObjectManager::MapObject(ADS::ObjectManager *this, uint64_t a2, ADS::BaseObject *a3)
{
  __int32 v5 = (int)this;
  v99[4] = *(void **)MEMORY[0x1E4F143B8];
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (!v5 || !a2) {
    return;
  }
  char v6 = ADS::ObjectManager::sMutex;
  uint64_t v91 = ADS::ObjectManager::sMutex;
  if (ADS::ObjectManager::sMutex) {
    char v6 = (*(uint64_t (**)(uint64_t))(*(void *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
  }
  char v92 = v6;
  uint64_t v7 = ADS::ObjectManager::sInstance;
  __int32 v97 = v5;
  uint64_t v8 = (uint64_t *)(ADS::ObjectManager::sInstance + 16);
  uint64_t v9 = std::__find_impl[abi:ne180100]<ADS::ObjectManager::ObjectInfo *,ADS::ObjectManager::ObjectInfo *,unsigned int,std::__identity>(*(void *)(ADS::ObjectManager::sInstance + 16), *(void *)(ADS::ObjectManager::sInstance + 24), &v97);
  mach_port_t v10 = (void **)v9;
  if (v9 != *(void *)(v7 + 24))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      long long v11 = *v10;
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"ADS_ObjectManager.cpp";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = 202;
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = v5;
      LOWORD(v99[0]) = 2048;
      *(void **)((char *)v99 + 2) = (void *)a2;
      WORD1(v99[1]) = 2048;
      *(void **)((char *)&v99[1] + 4) = v11;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::ObjectManager::_MapObject: %d cannot be mapped to object %p because it is already mapped to %p", (uint8_t *)&buf, 0x2Cu);
    }
    goto LABEL_147;
  }
  if (*v8 == v9)
  {
LABEL_12:
    uint64_t v12 = (void *)v9;
  }
  else
  {
    uint64_t v12 = (void *)*v8;
    while (*v12 != a2)
    {
      v12 += 5;
      if (v12 == (void *)v9) {
        goto LABEL_12;
      }
    }
  }
  int v13 = *(_DWORD *)(a2 + 12);
  if (v12 != (void *)v9)
  {
    uint64_t v14 = *v8 + 8 * (((uint64_t)v12 - *v8) >> 3);
    unint64_t v17 = *(void *)(v14 + 32);
    std::string v16 = (unint64_t *)(v14 + 32);
    unint64_t v15 = v17;
    int v19 = (__int32 **)(v16 - 1);
    std::logic_error v18 = (__int32 *)*(v16 - 1);
    if ((unint64_t)v18 >= v17)
    {
      int v23 = (void **)(v16 - 2);
      char v24 = (__int32 *)*(v16 - 2);
      uint64_t v25 = v18 - v24;
      unint64_t v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v27 = v15 - (void)v24;
      if (v27 >> 1 > v26) {
        unint64_t v26 = v27 >> 1;
      }
      BOOL v28 = (unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v28) {
        unint64_t v29 = v26;
      }
      if (v29)
      {
        unint64_t v29 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v29);
        std::logic_error v18 = *v19;
        char v24 = (__int32 *)*v23;
      }
      else
      {
        uint64_t v30 = 0;
      }
      uint64_t v40 = (__int32 *)(v29 + 4 * v25);
      unint64_t v41 = v29 + 4 * v30;
      *uint64_t v40 = v5;
      uint64_t v20 = v40 + 1;
      while (v18 != v24)
      {
        __int32 v42 = *--v18;
        *--uint64_t v40 = v42;
      }
      *int v23 = v40;
      *int v19 = v20;
      *std::string v16 = v41;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *std::logic_error v18 = v5;
      uint64_t v20 = v18 + 1;
    }
    *int v19 = v20;
    if (v13 == 1633969526 || v13 == 1633905771)
    {
      OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)&v95, *(CFTypeRef *)(a2 + 96));
      *(void *)&long long v95 = &unk_1F1489A20;
      OS::CF::String::AsStdString(&buf, (uint64_t)&v95);
      double v43 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>((void *)(v7 + 40), (unsigned __int8 *)&buf);
      double v44 = v43;
      uint64_t v46 = (char *)*((void *)v43 + 6);
      unint64_t v45 = *((void *)v43 + 7);
      if ((unint64_t)v46 >= v45)
      {
        double v48 = (char *)*((void *)v43 + 5);
        uint64_t v49 = (v46 - v48) >> 2;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v51 = v45 - (void)v48;
        if (v51 >> 1 > v50) {
          unint64_t v50 = v51 >> 1;
        }
        BOOL v28 = (unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL;
        unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
        if (!v28) {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          unint64_t v52 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v52);
          double v48 = (char *)*((void *)v44 + 5);
          uint64_t v46 = (char *)*((void *)v44 + 6);
        }
        else
        {
          uint64_t v53 = 0;
        }
        uint64_t v59 = (_DWORD *)(v52 + 4 * v49);
        unint64_t v60 = v52 + 4 * v53;
        *uint64_t v59 = v97;
        long long v47 = v59 + 1;
        while (v46 != v48)
        {
          int v61 = *((_DWORD *)v46 - 1);
          v46 -= 4;
          *--uint64_t v59 = v61;
        }
        *((void *)v44 + 5) = v59;
        *((void *)v44 + 6) = v47;
        *((void *)v44 + 7) = v60;
        if (v48) {
          operator delete(v48);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v46 = v97;
        long long v47 = v46 + 4;
      }
      *((void *)v44 + 6) = v47;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      uint64_t v62 = (OS::CF::UntypedObject *)&v95;
      goto LABEL_146;
    }
    goto LABEL_147;
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = v5;
  *(void *)&long long v95 = a2;
  *((void *)&v95 + 1) = 1;
  std::vector<unsigned int>::vector(&__p, 1uLL, (const std::vector<unsigned int>::value_type *)&buf);
  unint64_t v21 = *(void *)(v7 + 32);
  unint64_t v22 = *(void *)(v7 + 24);
  if (v22 >= v21)
  {
    unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - *v8) >> 3);
    unint64_t v32 = v31 + 1;
    if (v31 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - *v8) >> 3);
    if (2 * v33 > v32) {
      unint64_t v32 = 2 * v33;
    }
    if (v33 >= 0x333333333333333) {
      unint64_t v3 = 0x666666666666666;
    }
    else {
      unint64_t v3 = v32;
    }
    v99[1] = (void *)(v7 + 32);
    if (v3 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    long long v34 = (char *)operator new(40 * v3);
    std::string::size_type v35 = (std::string::size_type)&v34[40 * v31];
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
    buf.__r_.__value_.__l.__size_ = v35;
    long long v36 = *(_OWORD *)&__p.__begin_;
    *(_OWORD *)std::string::size_type v35 = v95;
    *(_OWORD *)(v35 + 16) = v36;
    *(void *)(v35 + 32) = __p.__end_cap_.__value_;
    memset(&__p, 0, sizeof(__p));
    buf.__r_.__value_.__r.__words[2] = v35 + 40;
    v99[0] = &v34[40 * v3];
    std::vector<ADS::ObjectManager::ObjectInfo>::__swap_out_circular_buffer(v8, &buf);
    uint64_t v37 = *(void *)(v7 + 24);
    std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)&buf);
    std::vector<char>::pointer begin = __p.__begin_;
    *(void *)(v7 + 24) = v37;
    if (begin)
    {
      __p.__end_ = begin;
      operator delete(begin);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v22 = v95;
    *(void *)(v22 + 24) = 0;
    *(void *)(v22 + 32) = 0;
    *(void *)(v22 + 16) = 0;
    *(std::vector<unsigned int> *)(v22 + 16) = __p;
    *(void *)(v7 + 24) = v22 + 40;
  }
  if (v13 != 1633969526 && v13 != 1633905771) {
    goto LABEL_147;
  }
  OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v94, *(CFTypeRef *)(a2 + 96));
  v94[0] = &unk_1F1489A20;
  OS::CF::String::AsStdString(&v93, (uint64_t)v94);
  int v39 = operator new(4uLL);
  *int v39 = v5;
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&buf, v93.__r_.__value_.__l.__data_, v93.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v93;
  }
  memset(v99, 0, 24);
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v99, v39, (uint64_t)(v39 + 1), 1uLL);
  unint64_t v54 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)&buf);
  unint64_t v55 = v54;
  unint64_t v56 = *(void *)(v7 + 48);
  if (!v56) {
    goto LABEL_82;
  }
  uint8x8_t v57 = (uint8x8_t)vcnt_s8((int8x8_t)v56);
  v57.i16[0] = vaddlv_u8(v57);
  unint64_t v58 = v57.u32[0];
  if (v57.u32[0] > 1uLL)
  {
    unint64_t v3 = v54;
    if (v54 >= v56) {
      unint64_t v3 = v54 % v56;
    }
  }
  else
  {
    unint64_t v3 = (v56 - 1) & v54;
  }
  unsigned int v63 = *(unsigned __int8 ***)(*(void *)(v7 + 40) + 8 * v3);
  if (!v63 || (unsigned int v64 = *v63) == 0)
  {
LABEL_82:
    uint64_t v66 = (char *)operator new(0x40uLL);
    unint64_t v67 = (void *)(v7 + 56);
    *(void *)&long long v95 = v66;
    *((void *)&v95 + 1) = v7 + 56;
    LOBYTE(__p.__begin_) = 0;
    *(void *)uint64_t v66 = 0;
    *((void *)v66 + 1) = v55;
    int64_t v68 = (std::string *)(v66 + 16);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v68, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v68->__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *((void *)v66 + 4) = *((void *)&buf.__r_.__value_.__l + 2);
    }
    *(_OWORD *)(v66 + 40) = *(_OWORD *)v99;
    *((void **)v66 + 7) = v99[2];
    memset(v99, 0, 24);
    LOBYTE(__p.__begin_) = 1;
    float v69 = (float)(unint64_t)(*(void *)(v7 + 64) + 1);
    float v70 = *(float *)(v7 + 72);
    if (v56 && (float)(v70 * (float)v56) >= v69)
    {
LABEL_131:
      uint64_t v87 = *(void **)(*(void *)(v7 + 40) + 8 * v3);
      uint64_t v88 = v95;
      if (v87)
      {
        *(void *)long long v95 = *v87;
      }
      else
      {
        *(void *)long long v95 = *(void *)(v7 + 56);
        *(void *)(v7 + 56) = v88;
        *(void *)(*(void *)(v7 + 40) + 8 * v3) = v67;
        if (!*(void *)v88)
        {
LABEL_140:
          *(void *)&long long v95 = 0;
          ++*(void *)(v7 + 64);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&v95);
          goto LABEL_141;
        }
        unint64_t v89 = *(void *)(*(void *)v88 + 8);
        if ((v56 & (v56 - 1)) != 0)
        {
          if (v89 >= v56) {
            v89 %= v56;
          }
        }
        else
        {
          v89 &= v56 - 1;
        }
        uint64_t v87 = (void *)(*(void *)(v7 + 40) + 8 * v89);
      }
      *uint64_t v87 = v88;
      goto LABEL_140;
    }
    BOOL v71 = 1;
    if (v56 >= 3) {
      BOOL v71 = (v56 & (v56 - 1)) != 0;
    }
    unint64_t v72 = v71 | (2 * v56);
    unint64_t v73 = vcvtps_u32_f32(v69 / v70);
    if (v72 <= v73) {
      int8x8_t prime = (int8x8_t)v73;
    }
    else {
      int8x8_t prime = (int8x8_t)v72;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    }
    unint64_t v56 = *(void *)(v7 + 48);
    if (*(void *)&prime > v56) {
      goto LABEL_97;
    }
    if (*(void *)&prime < v56)
    {
      unint64_t v81 = vcvtps_u32_f32((float)*(unint64_t *)(v7 + 64) / *(float *)(v7 + 72));
      if (v56 < 3 || (uint8x8_t v82 = (uint8x8_t)vcnt_s8((int8x8_t)v56), v82.i16[0] = vaddlv_u8(v82), v82.u32[0] > 1uLL))
      {
        unint64_t v81 = std::__next_prime(v81);
      }
      else
      {
        uint64_t v83 = 1 << -(char)__clz(v81 - 1);
        if (v81 >= 2) {
          unint64_t v81 = v83;
        }
      }
      if (*(void *)&prime <= v81) {
        int8x8_t prime = (int8x8_t)v81;
      }
      if (*(void *)&prime >= v56)
      {
        unint64_t v56 = *(void *)(v7 + 48);
      }
      else
      {
        if (prime)
        {
LABEL_97:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v75 = operator new(8 * *(void *)&prime);
          uint64_t v76 = *(void **)(v7 + 40);
          *(void *)(v7 + 40) = v75;
          if (v76) {
            operator delete(v76);
          }
          uint64_t v77 = 0;
          *(int8x8_t *)(v7 + 48) = prime;
          do
            *(void *)(*(void *)(v7 + 40) + 8 * v77++) = 0;
          while (*(void *)&prime != v77);
          uint64_t v78 = (void *)*v67;
          if (*v67)
          {
            unint64_t v79 = v78[1];
            uint8x8_t v80 = (uint8x8_t)vcnt_s8(prime);
            v80.i16[0] = vaddlv_u8(v80);
            if (v80.u32[0] > 1uLL)
            {
              if (v79 >= *(void *)&prime) {
                v79 %= *(void *)&prime;
              }
            }
            else
            {
              v79 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)(v7 + 40) + 8 * v79) = v67;
            std::vector<unsigned int>::pointer v84 = (void *)*v78;
            if (*v78)
            {
              do
              {
                unint64_t v85 = v84[1];
                if (v80.u32[0] > 1uLL)
                {
                  if (v85 >= *(void *)&prime) {
                    v85 %= *(void *)&prime;
                  }
                }
                else
                {
                  v85 &= *(void *)&prime - 1;
                }
                if (v85 != v79)
                {
                  uint64_t v86 = *(void *)(v7 + 40);
                  if (!*(void *)(v86 + 8 * v85))
                  {
                    *(void *)(v86 + 8 * v85) = v78;
                    goto LABEL_122;
                  }
                  *uint64_t v78 = *v84;
                  *std::vector<unsigned int>::pointer v84 = **(void **)(*(void *)(v7 + 40) + 8 * v85);
                  **(void **)(*(void *)(v7 + 40) + 8 * v85) = v84;
                  std::vector<unsigned int>::pointer v84 = v78;
                }
                unint64_t v85 = v79;
LABEL_122:
                uint64_t v78 = v84;
                std::vector<unsigned int>::pointer v84 = (void *)*v84;
                unint64_t v79 = v85;
              }
              while (v84);
            }
          }
          unint64_t v56 = (unint64_t)prime;
          goto LABEL_126;
        }
        mach_port_t v90 = *(void **)(v7 + 40);
        *(void *)(v7 + 40) = 0;
        if (v90) {
          operator delete(v90);
        }
        unint64_t v56 = 0;
        *(void *)(v7 + 48) = 0;
      }
    }
LABEL_126:
    if ((v56 & (v56 - 1)) != 0)
    {
      if (v55 >= v56) {
        unint64_t v3 = v55 % v56;
      }
      else {
        unint64_t v3 = v55;
      }
    }
    else
    {
      unint64_t v3 = (v56 - 1) & v55;
    }
    goto LABEL_131;
  }
  while (1)
  {
    unint64_t v65 = *((void *)v64 + 1);
    if (v65 == v55) {
      break;
    }
    if (v58 > 1)
    {
      if (v65 >= v56) {
        v65 %= v56;
      }
    }
    else
    {
      v65 &= v56 - 1;
    }
    if (v65 != v3) {
      goto LABEL_82;
    }
LABEL_81:
    unsigned int v64 = *(unsigned __int8 **)v64;
    if (!v64) {
      goto LABEL_82;
    }
  }
  if (!std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(v64 + 16, (unsigned __int8 *)&buf)) {
    goto LABEL_81;
  }
  if (v99[0]) {
    operator delete(v99[0]);
  }
LABEL_141:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  operator delete(v39);
  if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v93.__r_.__value_.__l.__data_);
  }
  uint64_t v62 = (OS::CF::UntypedObject *)v94;
LABEL_146:
  OS::CF::UntypedObject::~UntypedObject(v62);
LABEL_147:
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v91);
}

void sub_1BAB886A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a20);
  std::pair<std::string const,std::vector<unsigned int>>::~pair((uint64_t)&a26);
  operator delete(v31);
  if (a17 < 0) {
    operator delete(__p);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&a18);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__find_impl[abi:ne180100]<ADS::ObjectManager::ObjectInfo *,ADS::ObjectManager::ObjectInfo *,unsigned int,std::__identity>(uint64_t a1, uint64_t a2, __int32 *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      char v6 = *(__int32 **)(v3 + 24);
      uint64_t v7 = wmemchr(*(__int32 **)(v3 + 16), *a3, ((uint64_t)v6 - *(void *)(v3 + 16)) >> 2);
      uint64_t v8 = v7 ? v7 : v6;
      if (v8 != *(__int32 **)(v3 + 24)) {
        break;
      }
      v3 += 40;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  mach_port_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
  {
    unint64_t v12 = *((void *)i + 1);
    if (v12 == v6)
    {
      if (std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(i + 16, a2)) {
        return i;
      }
    }
    else
    {
      if (v8 > 1)
      {
        if (v12 >= *(void *)&v5) {
          v12 %= *(void *)&v5;
        }
      }
      else
      {
        v12 &= *(void *)&v5 - 1;
      }
      if (v12 != v9) {
        return 0;
      }
    }
  }
  return i;
}

uint64_t std::pair<std::string const,std::vector<unsigned int>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  char v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<unsigned int>>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

uint64_t ADS::ObjectManager::CopyObjectByObjectID(ADS::ObjectManager *this)
{
  __int32 v1 = (int)this;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (v1)
  {
    char v2 = ADS::ObjectManager::sMutex;
    uint64_t v12 = ADS::ObjectManager::sMutex;
    if (ADS::ObjectManager::sMutex) {
      char v2 = (*(uint64_t (**)(uint64_t))(*(void *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
    }
    char v13 = v2;
    uint64_t v3 = ADS::ObjectManager::sInstance;
    __int32 v14 = v1;
    uint64_t v4 = *(void *)(ADS::ObjectManager::sInstance + 16);
    int8x8_t v5 = (uint64_t *)std::__find_impl[abi:ne180100]<ADS::ObjectManager::ObjectInfo *,ADS::ObjectManager::ObjectInfo *,unsigned int,std::__identity>(v4, *(void *)(ADS::ObjectManager::sInstance + 24), &v14);
    if (v5 != *(uint64_t **)(v3 + 24))
    {
      uint64_t v6 = v4 + 8 * (((uint64_t)v5 - v4) >> 3);
      uint64_t v9 = *(void *)(v6 + 8);
      uint8x8_t v7 = (void *)(v6 + 8);
      uint64_t v8 = v9;
      if (v9 != -1)
      {
        *uint8x8_t v7 = v8 + 1;
        uint64_t v10 = *v5;
LABEL_11:
        CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v12);
        return v10;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        std::string v16 = "ADS_ObjectManager.cpp";
        __int16 v17 = 1024;
        int v18 = 280;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::ObjectManager::_CopyObjectByObjectID: not copying because the reference count is at maximum", buf, 0x12u);
      }
    }
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  return 0;
}

void ADS::ObjectManager::ReleaseObject(ADS::ObjectManager *this, ADS::BaseObject *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  pthread_once(&ADS::ObjectManager::sStaticInitializer, (void (*)(void))ADS::ObjectManager::StaticInitializer);
  if (this)
  {
    char v3 = ADS::ObjectManager::sMutex;
    uint64_t v31 = ADS::ObjectManager::sMutex;
    if (ADS::ObjectManager::sMutex) {
      char v3 = (*(uint64_t (**)(uint64_t))(*(void *)ADS::ObjectManager::sMutex + 16))(ADS::ObjectManager::sMutex);
    }
    char v32 = v3;
    uint64_t v4 = (void *)ADS::ObjectManager::sInstance;
    int8x8_t v5 = *(_OWORD **)(ADS::ObjectManager::sInstance + 16);
    uint64_t v6 = *(_OWORD **)(ADS::ObjectManager::sInstance + 24);
    uint8x8_t v7 = v5;
    if (v5 != v6)
    {
      while (*(ADS::ObjectManager **)v7 != this)
      {
        uint8x8_t v7 = (_OWORD *)((char *)v7 + 40);
        if (v7 == v6)
        {
          uint8x8_t v7 = *(_OWORD **)(ADS::ObjectManager::sInstance + 24);
          break;
        }
      }
    }
    if (v7 != v6)
    {
      uint64_t v8 = (uint64_t)v5 + 8 * (((char *)v7 - (char *)v5) >> 3);
      uint64_t v11 = *(void *)(v8 + 8);
      uint64_t v9 = (void *)(v8 + 8);
      uint64_t v10 = v11;
      if (v11)
      {
        uint64_t v12 = v10 - 1;
        void *v9 = v12;
        if (!v12)
        {
          int v13 = *((_DWORD *)this + 3);
          if (v13 == 1633969526 || v13 == 1633905771)
          {
            __int32 v14 = v4 + 5;
            OS::CF::UntypedObject::UntypedObject((OS::CF::UntypedObject *)v33, *((CFTypeRef *)this + 12));
            v33[0] = &unk_1F1489A20;
            OS::CF::String::AsStdString(&__p, (uint64_t)v33);
            unint64_t v15 = std::__hash_table<std::__hash_value_type<std::string,std::vector<unsigned int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<unsigned int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<unsigned int>>>>::find<std::string>(v4 + 5, (unsigned __int8 *)&__p);
            if (v15)
            {
              int8x8_t v16 = (int8x8_t)v4[6];
              unint64_t v17 = *((void *)v15 + 1);
              uint8x8_t v18 = (uint8x8_t)vcnt_s8(v16);
              v18.i16[0] = vaddlv_u8(v18);
              if (v18.u32[0] > 1uLL)
              {
                if (v17 >= *(void *)&v16) {
                  v17 %= *(void *)&v16;
                }
              }
              else
              {
                v17 &= *(void *)&v16 - 1;
              }
              uint64_t v19 = *(unsigned __int8 **)(*v14 + 8 * v17);
              do
              {
                uint64_t v20 = v19;
                uint64_t v19 = *(unsigned __int8 **)v19;
              }
              while (v19 != v15);
              if (v20 == (unsigned __int8 *)(v4 + 7)) {
                goto LABEL_33;
              }
              unint64_t v21 = *((void *)v20 + 1);
              if (v18.u32[0] > 1uLL)
              {
                if (v21 >= *(void *)&v16) {
                  v21 %= *(void *)&v16;
                }
              }
              else
              {
                v21 &= *(void *)&v16 - 1;
              }
              if (v21 != v17)
              {
LABEL_33:
                if (!*(void *)v15) {
                  goto LABEL_34;
                }
                unint64_t v22 = *(void *)(*(void *)v15 + 8);
                if (v18.u32[0] > 1uLL)
                {
                  if (v22 >= *(void *)&v16) {
                    v22 %= *(void *)&v16;
                  }
                }
                else
                {
                  v22 &= *(void *)&v16 - 1;
                }
                if (v22 != v17) {
LABEL_34:
                }
                  *(void *)(*v14 + 8 * v17) = 0;
              }
              uint64_t v23 = *(void *)v15;
              if (*(void *)v15)
              {
                unint64_t v24 = *(void *)(v23 + 8);
                if (v18.u32[0] > 1uLL)
                {
                  if (v24 >= *(void *)&v16) {
                    v24 %= *(void *)&v16;
                  }
                }
                else
                {
                  v24 &= *(void *)&v16 - 1;
                }
                if (v24 != v17)
                {
                  *(void *)(*v14 + 8 * v24) = v20;
                  uint64_t v23 = *(void *)v15;
                }
              }
              *(void *)uint64_t v20 = v23;
              *(void *)unint64_t v15 = 0;
              --v4[8];
              *(void *)std::string buf = v15;
              *(void *)&uint8_t buf[8] = v4 + 7;
              buf[16] = 1;
              std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<unsigned int>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v33);
            uint64_t v6 = (_OWORD *)v4[3];
          }
          uint64_t v25 = (_OWORD *)((char *)v7 + 40);
          if ((_OWORD *)((char *)v7 + 40) != v6)
          {
            do
            {
              uint8x8_t v7 = v25;
              *(_OWORD *)((char *)v25 - 40) = *v25;
              uint64_t v27 = (void *)v25 - 3;
              unint64_t v26 = (void *)*((void *)v25 - 3);
              if (v26)
              {
                *((void *)v25 - 2) = v26;
                operator delete(v26);
                *uint64_t v27 = 0;
                v27[1] = 0;
                v27[2] = 0;
              }
              *(_OWORD *)((char *)v7 - 24) = v7[1];
              *((void *)v7 - 1) = *((void *)v7 + 4);
              *((void *)v7 + 3) = 0;
              *((void *)v7 + 4) = 0;
              *((void *)v7 + 2) = 0;
              uint64_t v25 = (_OWORD *)((char *)v7 + 40);
            }
            while ((_OWORD *)((char *)v7 + 40) != v6);
            uint64_t v6 = (_OWORD *)v4[3];
          }
          while (v6 != v7)
          {
            BOOL v28 = (void *)*((void *)v6 - 3);
            if (v28)
            {
              *((void *)v6 - 2) = v28;
              operator delete(v28);
            }
            uint64_t v6 = (_OWORD *)((char *)v6 - 40);
          }
          void v4[3] = v7;
          pthread_once(&ADS::Simulator::sStaticInitializer, (void (*)(void))ADS::Simulator::StaticInitializer);
          *(void *)std::string buf = MEMORY[0x1E4F143A8];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&buf[16] = ___ZN3ADS13ObjectManager14_ReleaseObjectEPNS_10BaseObjectE_block_invoke;
          long long v36 = &__block_descriptor_tmp_3_1830;
          uint64_t v37 = v4;
          __int16 v38 = this;
          unint64_t v29 = (dispatch_queue_t *)ADS::Simulator::sServerDefaultPriorityQueue;
          if (ADS::Simulator::sServerDefaultPriorityQueue)
          {
            unsigned __int8 v30 = atomic_load((unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 32));
            if (v30) {
              atomic_store(1u, (unsigned __int8 *)(ADS::Simulator::sServerDefaultPriorityQueue + 33));
            }
            dispatch_async(*v29, buf);
          }
        }
      }
      else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = "ADS_ObjectManager.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 367;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  ADS::ObjectManager::_ReleaseObject: not releasing because the reference count is already at 0", buf, 0x12u);
      }
    }
    CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)&v31);
  }
}

void sub_1BAB88F64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CADeprecated::CAMutex::Locker::~Locker((CADeprecated::CAMutex::Locker *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN3ADS13ObjectManager14_ReleaseObjectEPNS_10BaseObjectE_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void AMCP::Graph::Manifest_Overload::~Manifest_Overload(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);

  JUMPOUT(0x1C1859840);
}

void std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::resize(char **a1, unint64_t a2)
{
  uint64_t v4 = *a1;
  char v3 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 > v5)
  {
    uint8x8_t v7 = a1[2];
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - v3) >> 3) >= v6)
    {
      bzero(a1[1], 40 * ((40 * v6 - 40) / 0x28) + 40);
      a1[1] = &v3[40 * ((40 * v6 - 40) / 0x28) + 40];
      return;
    }
    if (a2 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - v4) >> 3);
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= a2) {
      uint64_t v9 = a2;
    }
    if (v8 >= 0x333333333333333) {
      unint64_t v10 = 0x666666666666666;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10 > 0x666666666666666) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v11 = 5 * v10;
    uint64_t v12 = (char *)operator new(40 * v10);
    int v13 = &v12[40 * v5];
    __int32 v14 = &v12[8 * v11];
    size_t v15 = 40 * ((40 * v6 - 40) / 0x28) + 40;
    bzero(v13, v15);
    int8x8_t v16 = &v13[v15];
    if (v3 == v4)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (!v3) {
        return;
      }
    }
    else
    {
      do
      {
        unint64_t v17 = v13;
        *((void *)v13 - 3) = 0;
        long long v18 = *(_OWORD *)(v3 - 40);
        v3 -= 40;
        *(_OWORD *)(v13 - 40) = v18;
        v13 -= 40;
        *((void *)v17 - 3) = *((void *)v3 + 2);
        *(void *)char v3 = 0;
        *((void *)v3 + 1) = 0;
        *((void *)v3 + 2) = 0;
        *(_OWORD *)(v13 + 24) = *(_OWORD *)(v3 + 24);
        *((void *)v3 + 3) = 0;
        *((void *)v3 + 4) = 0;
      }
      while (v3 != v4);
      uint64_t v19 = *a1;
      char v3 = a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      if (v3 != v19)
      {
        do
        {
          v3 -= 40;
          std::__destroy_at[abi:ne180100]<AMCP::Graph::Manifest_Task::Terminal_Connections,0>((uint64_t)v3);
        }
        while (v3 != v19);
        char v3 = v19;
      }
      if (!v3) {
        return;
      }
    }
    operator delete(v3);
    return;
  }
  if (a2 < v5)
  {
    uint64_t v20 = &v4[40 * a2];
    while (v3 != v20)
    {
      v3 -= 40;
      std::__destroy_at[abi:ne180100]<AMCP::Graph::Manifest_Task::Terminal_Connections,0>((uint64_t)v3);
    }
    a1[1] = v20;
  }
}

void std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  __int32 v1 = *a1;
  char v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        std::__destroy_at[abi:ne180100]<AMCP::Graph::Manifest_Task::Terminal_Connections,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Graph::Manifest_Task::Terminal_Connections,0>(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (void **)a1;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t AMCP::Graph::Manifest_Task::Manifest_Task(uint64_t a1, void *a2, int a3, unint64_t a4, unint64_t a5, long long *a6, double a7)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 48) = *a2;
  *(void *)(a1 + 56) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  long long v10 = *a6;
  *(void *)(a1 + 80) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 64) = v10;
  *((void *)a6 + 1) = 0;
  *((void *)a6 + 2) = 0;
  *(void *)a6 = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(double *)(a1 + 96) = a7;
  *(void *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = a3;
  std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::resize((char **)a1, a4);
  std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::resize((char **)(a1 + 24), a5);
  return a1;
}

void sub_1BAB89354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = *(void *)(v10 + 104);
  *(void *)(v10 + 104) = 0;
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
  }
  if (*(char *)(v10 + 87) < 0) {
    operator delete(*v11);
  }
  __int32 v14 = *(std::__shared_weak_count **)(v10 + 56);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  for (uint64_t i = 24; i != -24; i -= 24)
  {
    a10 = (void **)(v10 + i);
    std::vector<AMCP::Graph::Manifest_Task::Terminal_Connections>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Task::get_nth_connection_list(AMCP::Log::Scope_Registry *a1, unint64_t a2, unsigned int a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)((char *)a1 + 24 * a3);
  unint64_t v5 = v4 + 1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4[1] - *v4) >> 3) <= a2)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint8x8_t v7 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v5 - *v4) >> 3);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)unint64_t v26 = 2080;
      *(void *)&v26[2] = "Manifest_Task.cpp";
      __int16 v27 = 1024;
      int v28 = 71;
      __int16 v29 = 2080;
      *(void *)unsigned __int8 v30 = "not (index < m_connection_group[c].size())";
      *(_WORD *)&v30[8] = 2048;
      *(void *)&unsigned char v30[10] = a2;
      *(_WORD *)&v30[18] = 2048;
      *(void *)&v30[20] = v10;
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %ld  size: %ld", buf, 0x36u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Index out of bounds - index: %ld  size: %ld", (uint64_t)&v16, a2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v5 - *v4) >> 3));
    std::logic_error::logic_error(&v17, &v16);
    v17.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v19 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "const std::vector<Manifest_Task::Connection> &AMCP::Graph::Manifest_Task::get_nth_connection_li"
                         "st(size_t, Connection_Direction) const";
    *(void *)&unsigned char v30[14] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v30[22] = 71;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    uint64_t v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return *v4 + 40 * a2;
}

void sub_1BAB896C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a11) {
    operator delete(a11);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a26);
  MEMORY[0x1C1859090](&a24);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (v27) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 129));
  _Unwind_Resume(a1);
}

void AMCP::Graph::Manifest_Task::add_connection(char *a1, int a2, unint64_t a3, void *a4)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (!*a4)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v25 = **(NSObject ***)buf;
    if ((void)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      unint64_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      uint64_t v28 = a1 + 64;
      if (a1[87] < 0) {
        uint64_t v28 = (void *)*v28;
      }
      *(_DWORD *)std::string buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = v27;
      LOWORD(v52) = 2080;
      *(void *)((char *)&v52 + 2) = "Manifest_Task.cpp";
      WORD5(v52) = 1024;
      HIDWORD(v52) = 79;
      *(_WORD *)uint64_t v53 = 2080;
      *(void *)&uint64_t v53[2] = "not (connection)";
      *(_WORD *)&v53[10] = 2080;
      *(void *)&v53[12] = v28;
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s null connection passed to add_connection in %s", buf, 0x2Cu);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    __int16 v29 = a1 + 64;
    if (a1[87] < 0) {
      __int16 v29 = (void *)*v29;
    }
    caulk::make_string((caulk *)"null connection passed to add_connection in %s", (uint64_t)&v44, v29);
    std::logic_error::logic_error(&v37, &v44);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v37);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v53[8] = "void AMCP::Graph::Manifest_Task::add_connection(Connection_Direction, size_t, Manifest_Task::Connection)";
    *(void *)&v53[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v53[24] = 79;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v41.__r_.__value_.__l.__data_);
    __int32 v42 = &unk_1F148AA90;
    std::string v43 = v41;
    memset(&v41, 0, sizeof(v41));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v6 = &a1[24 * a2];
  uint8x8_t v7 = v6 + 8;
  uint64_t v8 = *(void *)v6;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v6 + 1) - *(void *)v6) >> 3) <= a3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned __int8 v30 = **(NSObject ***)buf;
    if ((void)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
    }
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = pthread_self();
      mach_port_t v32 = pthread_mach_thread_np(v31);
      unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v7 - *(void *)v6) >> 3);
      *(_DWORD *)std::string buf = 67110402;
      *(_DWORD *)&uint8_t buf[4] = v32;
      LOWORD(v52) = 2080;
      *(void *)((char *)&v52 + 2) = "Manifest_Task.cpp";
      WORD5(v52) = 1024;
      HIDWORD(v52) = 80;
      *(_WORD *)uint64_t v53 = 2080;
      *(void *)&uint64_t v53[2] = "not (terminal_index < m_connection_group[direction].size())";
      *(_WORD *)&v53[10] = 2048;
      *(void *)&v53[12] = a3;
      *(_WORD *)&v53[20] = 2048;
      *(void *)&v53[22] = v33;
      _os_log_error_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Index out of bounds - index: %ld  size: %ld", buf, 0x36u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v39);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Index out of bounds - index: %ld  size: %ld", (uint64_t)&v44, a3, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v7 - *(void *)v6) >> 3));
    std::logic_error::logic_error(&v37, &v44);
    v37.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v37);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v53[8] = "void AMCP::Graph::Manifest_Task::add_connection(Connection_Direction, size_t, Manifest_Task::Connection)";
    *(void *)&v53[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v53[24] = 80;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v41.__r_.__value_.__l.__data_);
    __int32 v42 = &unk_1F148AA90;
    std::string v43 = v41;
    memset(&v41, 0, sizeof(v41));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  memset(&v44, 0, sizeof(v44));
  unint64_t v10 = (AMCP::Log::Scope_Registry *)std::vector<std::shared_ptr<AMCP::Graph::Manifest_Buffer>>::__init_with_size[abi:ne180100]<std::shared_ptr<AMCP::Graph::Manifest_Buffer>*,std::shared_ptr<AMCP::Graph::Manifest_Buffer>*>(&v44, *(void **)(v8 + 40 * a3), *(void **)(v8 + 40 * a3 + 8), (uint64_t)(*(void *)(v8 + 40 * a3 + 8) - *(void *)(v8 + 40 * a3)) >> 4);
  long long v11 = (void *)v44.__r_.__value_.__r.__words[0];
  if (v44.__r_.__value_.__r.__words[0] != v44.__r_.__value_.__l.__size_)
  {
    while (*a4 != *v11)
    {
      v11 += 2;
      if (v11 == (void *)v44.__r_.__value_.__l.__size_) {
        goto LABEL_8;
      }
    }
  }
  if (v11 != (void *)v44.__r_.__value_.__l.__size_)
  {
    AMCP::Log::Scope_Registry::get(v10);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v34 = **(NSObject ***)buf;
    if ((void)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v35 = pthread_self();
      mach_port_t v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v36;
      LOWORD(v52) = 2080;
      *(void *)((char *)&v52 + 2) = "Manifest_Task.cpp";
      WORD5(v52) = 1024;
      HIDWORD(v52) = 87;
      *(_WORD *)uint64_t v53 = 2080;
      *(void *)&uint64_t v53[2] = "not (iter == connection_list.end())";
      _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Duplicate connection", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Duplicate connection", (uint64_t)&v41);
    std::logic_error::logic_error(&v39, &v41);
    v39.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v45, &v39);
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
    int v50 = -1;
    v45.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v46 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v45);
    *(void *)&v53[8] = "void AMCP::Graph::Manifest_Task::add_connection(Connection_Direction, size_t, Manifest_Task::Connection)";
    *(void *)&v53[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    *(_DWORD *)&v53[24] = 87;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v37);
    __int32 v42 = &unk_1F148AA90;
    *(std::logic_error *)&v43.__r_.__value_.__l.__data_ = v37;
    v43.__r_.__value_.__r.__words[2] = v38;
    v37.__vftable = 0;
    v37.__imp_.__imp_ = 0;
    std::string::size_type v38 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
LABEL_8:
  uint64_t v12 = (void *)(*(void *)v6 + 40 * a3);
  uint64_t v13 = (void *)v12[1];
  unint64_t v14 = v12[2];
  if ((unint64_t)v13 >= v14)
  {
    uint64_t v17 = ((uint64_t)v13 - *v12) >> 4;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v19 = v14 - *v12;
    if (v19 >> 3 > v18) {
      unint64_t v18 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    *(void *)&v53[8] = v12 + 2;
    uint64_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v20);
    uint64_t v22 = &v21[16 * v17];
    *(void *)std::string buf = v21;
    *(void *)&long long v52 = v22;
    *(void *)uint64_t v53 = &v21[16 * v23];
    long long v24 = *(_OWORD *)a4;
    *(_OWORD *)uint64_t v22 = *(_OWORD *)a4;
    if (*((void *)&v24 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    *((void *)&v52 + 1) = v22 + 16;
    std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(v12, buf);
    std::string v16 = (void *)v12[1];
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)buf);
  }
  else
  {
    void *v13 = *a4;
    uint64_t v15 = a4[1];
    v13[1] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    std::string v16 = v13 + 2;
    v12[1] = v13 + 2;
  }
  v12[1] = v16;
  *(void *)std::string buf = &v44;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_1BAB89FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void **a37)
{
  a37 = &a31;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a37);
  _Unwind_Resume(a1);
}

void *std::vector<std::shared_ptr<AMCP::Graph::Manifest_Buffer>>::__init_with_size[abi:ne180100]<std::shared_ptr<AMCP::Graph::Manifest_Buffer>*,std::shared_ptr<AMCP::Graph::Manifest_Buffer>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    if (a4 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v6 = result;
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(a4);
    void *v6 = result;
    v6[1] = result;
    for (uint64_t v6[2] = &result[2 * v7]; a2 != a3; a2 += 2)
    {
      *uint64_t result = *a2;
      uint64_t v8 = a2[1];
      result[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      result += 2;
    }
    v6[1] = result;
  }
  return result;
}

void sub_1BAB8A220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void *AMCP::DAL::Fixed_Buffer::Fixed_Buffer(void *a1, uint64_t a2, long long *a3, double a4)
{
  *a1 = &unk_1F1487FC0;
  long long v7 = *a3;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 1);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v16 = 2;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  long long v19 = v7;
  long long v9 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  int v12 = 2;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  long long v15 = v9;
  unint64_t v10 = (std::__shared_weak_count *)*((void *)&v9 + 1);
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)(a1 + 1), (const AMCP::DAL::DAL_Time *)&v16, (const AMCP::DAL::DAL_Time *)&v12);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  AMCP::DAL::Container::Container(a1 + 11, a2, a4);
  return a1;
}

void sub_1BAB8A318(_Unwind_Exception *a1)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<AMCP::DAL::DAL_Buffer>::reset[abi:ne180100]<AMCP::DAL::Fixed_Buffer,void>()
{
}

void sub_1BAB8A3D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Fixed_Buffer *,std::shared_ptr<AMCP::DAL::DAL_Buffer>::__shared_ptr_default_delete<AMCP::DAL::DAL_Buffer,AMCP::DAL::Fixed_Buffer>,std::allocator<AMCP::DAL::Fixed_Buffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP3DAL10DAL_BufferEE27__shared_ptr_default_deleteIS3_NS2_12Fixed_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Fixed_Buffer *,std::shared_ptr<AMCP::DAL::DAL_Buffer>::__shared_ptr_default_delete<AMCP::DAL::DAL_Buffer,AMCP::DAL::Fixed_Buffer>,std::allocator<AMCP::DAL::Fixed_Buffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::Fixed_Buffer *,std::shared_ptr<AMCP::DAL::DAL_Buffer>::__shared_ptr_default_delete<AMCP::DAL::DAL_Buffer,AMCP::DAL::Fixed_Buffer>,std::allocator<AMCP::DAL::Fixed_Buffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::function<void ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

void AMCP::Graph::Manifest_Task::set_up_connections(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = (uint64_t)a1;
  uint64_t v258 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  BOOL v206 = (std::__shared_weak_count *)(a3 + 16);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 16) - *(void *)a3) >> 3) < v8)
  {
    if (v8 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = *(void *)(a3 + 8) - *(void *)a3;
    std::runtime_error v223 = (std::__shared_weak_count *)(a3 + 16);
    *(void *)uint64_t v221 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v8);
    *(void *)&v221[8] = *(void *)v221 + v9;
    *(void *)&v221[16] = *(void *)v221 + v9;
    uint64_t v222 = *(void *)v221 + 88 * v10;
    std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer((uint64_t *)a3, v221);
    std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer((uint64_t)v221);
  }
  unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 3);
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a4 + 16) - *(void *)a4) >> 3) < v11)
  {
    if (v11 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = *(void *)(a4 + 8) - *(void *)a4;
    std::runtime_error v223 = (std::__shared_weak_count *)(a4 + 16);
    *(void *)uint64_t v221 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v11);
    *(void *)&v221[8] = *(void *)v221 + v12;
    *(void *)&v221[16] = *(void *)v221 + v12;
    uint64_t v222 = *(void *)v221 + 88 * v13;
    std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer((uint64_t *)a4, v221);
    std::__split_buffer<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range> &>::~__split_buffer((uint64_t)v221);
  }
  uint64_t v14 = *(AMCP::DAL::DAL_Time **)v7;
  uint64_t v208 = *(AMCP::DAL::DAL_Time **)(v7 + 8);
  uint64_t v211 = v7;
  if (*(AMCP::DAL::DAL_Time **)v7 != v208)
  {
    mach_port_t v207 = (uint64_t *)a3;
    do
    {
      *(void *)&uint8_t buf[8] = 0;
      *(void *)std::string buf = 0;
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v212, (uint64_t *)buf, 0.0, 0.0);
      AMCP::DAL::Writable_Range::Writable_Range((uint64_t)v221, (long long *)&v212, 0);
      if (v219) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v219);
      }
      if (v215) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v215);
      }
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      CFTypeRef v210 = v14;
      int v16 = *(std::string ***)v14;
      long long v15 = (std::string **)*((void *)v14 + 1);
      while (v16 != v15)
      {
        uint64_t v18 = *(void *)(a2 + 24);
        uint64_t v17 = *(std::__shared_weak_count **)(a2 + 32);
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v17);
        }
        if (!v18)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v146 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR))
          {
            int v147 = pthread_self();
            mach_port_t v148 = pthread_mach_thread_np(v147);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v148;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 347;
            *(_WORD *)v251 = 2080;
            *(void *)&v251[2] = "not (execution_context.m_time_interval.get_clock() != nullptr)";
            _os_log_error_impl(&dword_1BAA78000, v146, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad time interval", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Bad time interval", (uint64_t)&v239);
          std::logic_error::logic_error(&v242, &v239);
          v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v255, &v242);
          memset(v256, 0, sizeof(v256));
          int v257 = -1;
          *(void *)uint64_t v255 = &unk_1F1489CC8;
          *(void *)&v255[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
          *(void *)&v251[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v251[24] = 347;
          std::vector<void *>::vector(&v236);
          int v149 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v149);
          *(std::string *)&v245[8] = v236;
          *(void *)uint64_t v245 = &unk_1F148AA90;
          memset(&v236, 0, sizeof(v236));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if ((*(unsigned char *)a2 & 2) == 0) {
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
        }
        if (round(*(double *)(a2 + 8)) == 0.0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v150 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
          {
            long long v151 = pthread_self();
            mach_port_t v152 = pthread_mach_thread_np(v151);
            uint64_t v153 = (void *)(v7 + 64);
            if (*(char *)(v7 + 87) < 0) {
              uint64_t v153 = (void *)*v153;
            }
            *(_DWORD *)std::string buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v152;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 348;
            *(_WORD *)v251 = 2080;
            *(void *)&v251[2] = "not (execution_context.m_time_interval.get_sample_delta() != 0_S)";
            *(_WORD *)&v251[10] = 2080;
            *(void *)&v251[12] = v153;
            _os_log_error_impl(&dword_1BAA78000, v150, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero time interval manifest task %s", buf, 0x2Cu);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
          __cxa_allocate_exception(0x40uLL);
          long long v154 = (void *)(v7 + 64);
          if (*(char *)(v7 + 87) < 0) {
            long long v154 = (void *)*v154;
          }
          caulk::make_string((caulk *)"Zero time interval manifest task %s", (uint64_t)&v239, v154);
          std::logic_error::logic_error(&v242, &v239);
          v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v255, &v242);
          memset(v256, 0, sizeof(v256));
          int v257 = -1;
          *(void *)uint64_t v255 = &unk_1F1489CC8;
          *(void *)&v255[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
          *(void *)&v251[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v251[24] = 348;
          std::vector<void *>::vector(&v236);
          int v155 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v155);
          *(std::string *)&v245[8] = v236;
          *(void *)uint64_t v245 = &unk_1F148AA90;
          memset(&v236, 0, sizeof(v236));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        long long v19 = *v16;
        std::string::size_type size = (*v16)[5].__r_.__value_.__l.__size_;
        unint64_t v20 = (std::__shared_weak_count *)(*v16)[5].__r_.__value_.__r.__words[2];
        if (v20)
        {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
          if (!size) {
            goto LABEL_275;
          }
          long long v19 = *v16;
          if (!*v16)
          {
            AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v160 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
            {
              mach_port_t v161 = pthread_self();
              mach_port_t v162 = pthread_mach_thread_np(v161);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v162;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Manifest_Task.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = 350;
              *(_WORD *)v251 = 2080;
              *(void *)&v251[2] = "not (c.get() != nullptr)";
              _os_log_error_impl(&dword_1BAA78000, v160, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v239);
            std::logic_error::logic_error(&v242, &v239);
            v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error((std::logic_error *)v255, &v242);
            memset(v256, 0, sizeof(v256));
            int v257 = -1;
            *(void *)uint64_t v255 = &unk_1F1489CC8;
            *(void *)&v255[16] = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
            *(void *)&v251[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Ex"
                                  "ecution_Context &, const Connection &)";
            *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
            *(_DWORD *)&v251[24] = 350;
            std::vector<void *>::vector(&v236);
            int v163 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
            std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v163);
            *(std::string *)&v245[8] = v236;
            *(void *)uint64_t v245 = &unk_1F148AA90;
            memset(&v236, 0, sizeof(v236));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
        }
        else if (!size)
        {
LABEL_275:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v156 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
          {
            BOOL v157 = pthread_self();
            mach_port_t v158 = pthread_mach_thread_np(v157);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v158;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 349;
            *(_WORD *)v251 = 2080;
            *(void *)&v251[2] = "not (c->get_timebase() != nullptr)";
            _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v239);
          std::logic_error::logic_error(&v242, &v239);
          v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v255, &v242);
          memset(v256, 0, sizeof(v256));
          int v257 = -1;
          *(void *)uint64_t v255 = &unk_1F1489CC8;
          *(void *)&v255[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
          *(void *)&v251[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v251[24] = 349;
          std::vector<void *>::vector(&v236);
          int v159 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v159);
          *(std::string *)&v245[8] = v236;
          *(void *)uint64_t v245 = &unk_1F148AA90;
          memset(&v236, 0, sizeof(v236));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        std::string::size_type v23 = v19[12].__r_.__value_.__r.__words[2];
        std::string::pointer data = (std::__shared_weak_count *)v19[13].__r_.__value_.__l.__data_;
        if (data)
        {
          atomic_fetch_add_explicit(&data->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](data);
        }
        if (!v23)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)data);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v164 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR))
          {
            long long v165 = pthread_self();
            mach_port_t v166 = pthread_mach_thread_np(v165);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v166;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 351;
            *(_WORD *)v251 = 2080;
            *(void *)&v251[2] = "not (c->get_buffer() != nullptr)";
            _os_log_error_impl(&dword_1BAA78000, v164, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Buffer has not been allocated in begin_processing", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Buffer has not been allocated in begin_processing", (uint64_t)&v239);
          std::logic_error::logic_error(&v242, &v239);
          v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v255, &v242);
          memset(v256, 0, sizeof(v256));
          int v257 = -1;
          *(void *)uint64_t v255 = &unk_1F1489CC8;
          *(void *)&v255[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
          *(void *)&v251[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v251[24] = 351;
          std::vector<void *>::vector(&v236);
          int v167 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v167);
          *(std::string *)&v245[8] = v236;
          *(void *)uint64_t v245 = &unk_1F148AA90;
          memset(&v236, 0, sizeof(v236));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double v24 = *(double *)&(*v16)[3].__r_.__value_.__r.__words[2];
        std::string::size_type v25 = (*v16)[5].__r_.__value_.__l.__size_;
        unint64_t v26 = (std::__shared_weak_count *)(*v16)[5].__r_.__value_.__r.__words[2];
        if (v26) {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v28 = (*(double (**)(std::string::size_type))(*(void *)v25 + 152))(v25);
        if (v26) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v26);
        }
        if (v24 != v28)
        {
          AMCP::Log::Scope_Registry::get(v27);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          CFTypeRef v168 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
          {
            uint64_t v169 = pthread_self();
            mach_port_t v170 = pthread_mach_thread_np(v169);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v170;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 352;
            *(_WORD *)v251 = 2080;
            *(void *)&v251[2] = "not (c->get_format().mSampleRate == c->get_timebase()->get_sample_rate())";
            _os_log_error_impl(&dword_1BAA78000, v168, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Unexpected sample rate for connection", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Unexpected sample rate for connection", (uint64_t)&v239);
          std::logic_error::logic_error(&v242, &v239);
          v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v255, &v242);
          memset(v256, 0, sizeof(v256));
          int v257 = -1;
          *(void *)uint64_t v255 = &unk_1F1489CC8;
          *(void *)&v255[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
          *(void *)&v251[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_read_times(const Manifest_Exec"
                                "ution_Context &, const Connection &)";
          *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v251[24] = 352;
          std::vector<void *>::vector(&v236);
          int v171 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v171);
          *(std::string *)&v245[8] = v236;
          *(void *)uint64_t v245 = &unk_1F148AA90;
          memset(&v236, 0, sizeof(v236));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(v7);
        (*(void (**)(void, uint64_t, std::string **))(**(void **)(v7 + 104) + 24))(*(void *)(v7 + 104), a2, v16);
        std::string::size_type v31 = (*v16)[5].__r_.__value_.__l.__size_;
        unsigned __int8 v30 = (std::__shared_weak_count *)(*v16)[5].__r_.__value_.__r.__words[2];
        if (v30)
        {
          long long v32 = *(_OWORD *)&(*v16)[5].__r_.__value_.__r.__words[1];
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          *(_DWORD *)std::string buf = 2;
          *(void *)&uint8_t buf[8] = v29;
          *(void *)&buf[16] = 0;
          *(_OWORD *)v251 = v32;
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        else
        {
          *(_DWORD *)std::string buf = 2;
          *(void *)&uint8_t buf[8] = v29;
          *(void *)&buf[16] = 0;
          *(_OWORD *)v251 = v31;
        }
        unint64_t v33 = *v16;
        *(_OWORD *)uint64_t v255 = *(_OWORD *)&(*v16)[7].__r_.__value_.__l.__data_;
        std::string::pointer v34 = v33[8].__r_.__value_.__l.__data_;
        *(void *)&v255[16] = *((void *)&v33[7].__r_.__value_.__l + 2);
        *(void *)unint64_t v256 = v34;
        std::string::size_type v35 = (std::__shared_weak_count *)v33[8].__r_.__value_.__l.__size_;
        *(void *)&v256[8] = v35;
        if (v35)
        {
          atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
          std::string::pointer v36 = (*v16)[8].__r_.__value_.__l.__data_;
          std::logic_error v37 = (std::__shared_weak_count *)(*v16)[8].__r_.__value_.__l.__size_;
          std::string v239 = (*v16)[7];
          std::string::pointer v240 = v36;
          uint64_t v241 = v37;
          if (v37) {
            atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
          }
        }
        else
        {
          std::logic_error v37 = 0;
          std::string v239 = v33[7];
          std::string::pointer v240 = v34;
          uint64_t v241 = 0;
        }
        boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v245, (uint64_t)&v239, (uint64_t)buf);
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v228, (const AMCP::DAL::DAL_Time *)v255, (const AMCP::DAL::DAL_Time *)v245);
        if (v246) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v246);
        }
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (v35) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v35);
        }
        uint64_t v7 = v211;
        if (*(void *)&v251[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v251[8]);
        }
        std::string::size_type v38 = *v16;
        *(_OWORD *)std::string buf = *(_OWORD *)&(*v16)[8].__r_.__value_.__r.__words[2];
        std::string::size_type v39 = v38[9].__r_.__value_.__r.__words[2];
        *(void *)&buf[16] = v38[9].__r_.__value_.__l.__size_;
        *(void *)v251 = v39;
        std::string::pointer v40 = v38[10].__r_.__value_.__l.__data_;
        *(void *)&v251[8] = v40;
        if (v40) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
        }
        BOOL v41 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)buf, (AMCP::DAL::DAL_Time *)&v232);
        __int32 v42 = *(AMCP::Log::Scope_Registry **)&v251[8];
        if (*(void *)&v251[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v251[8]);
        }
        if (v41)
        {
          AMCP::Log::Scope_Registry::get(v42);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          CFIndex v172 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
          {
            uint64_t v173 = pthread_self();
            mach_port_t v174 = pthread_mach_thread_np(v173);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v174;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Manifest_Task.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 363;
            *(_WORD *)v251 = 2080;
            *(void *)&v251[2] = "not (time_range.end() <= c->get_producer_write_position())";
            _os_log_error_impl(&dword_1BAA78000, v172, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v244);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v239);
          std::logic_error::logic_error(&v242, &v239);
          v242.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v255, &v242);
          memset(v256, 0, sizeof(v256));
          int v257 = -1;
          *(void *)uint64_t v255 = &unk_1F1489CC8;
          *(void *)&v255[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v255);
          *(void *)&v251[8] = "DAL::Readable_Range AMCP::Graph::Manifest_Task::calculate_read_times_and_create_range(co"
                                "nst Manifest_Execution_Context &, const Connection &)";
          *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          *(_DWORD *)&v251[24] = 363;
          std::vector<void *>::vector(&v236);
          int v175 = backtrace((void **)v236.__r_.__value_.__l.__data_, (v236.__r_.__value_.__l.__size_ - v236.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v236.__r_.__value_.__l.__data_, v175);
          *(std::string *)&v245[8] = v236;
          *(void *)uint64_t v245 = &unk_1F148AA90;
          memset(&v236, 0, sizeof(v236));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        std::string::size_type v43 = (*v16)[12].__r_.__value_.__r.__words[2];
        *(std::logic_error *)std::string buf = v228;
        *(void *)&buf[16] = v229;
        *(void *)v251 = v230;
        *(void *)&v251[8] = v231;
        if (v231) {
          atomic_fetch_add_explicit(&v231->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(_OWORD *)&v251[16] = v232;
        uint64_t v252 = v233;
        uint64_t v253 = v234;
        unint64_t v254 = v235;
        if (v235) {
          atomic_fetch_add_explicit(&v235->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v43 + 144))(&v212);
        if (v254) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v254);
        }
        if (*(void *)&v251[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v251[8]);
        }
        if (v235) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v235);
        }
        if (v231) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v231);
        }
        double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v224);
        double v45 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v221);
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v224);
        double v46 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v212);
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v216);
        if (round(sample_time) == 0.0 || round(v46) < round(v45))
        {
          double v47 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v216);
          if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v216) != (double)(uint64_t)floor(v47))
          {
            AMCP::Log::Scope_Registry::get(v48);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            v202 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v202, OS_LOG_TYPE_ERROR))
            {
              uint64_t v203 = pthread_self();
              mach_port_t v204 = pthread_mach_thread_np(v203);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v204;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "Manifest_Task.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = 177;
              *(_WORD *)v251 = 2080;
              *(void *)&v251[2] = "not (connection_range.get_time_range().end().get_sample_time().floor().get() == conn"
                                    "ection_range.get_time_range().end().get_sample_time().get_double())";
              _os_log_error_impl(&dword_1BAA78000, v202, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v242);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)v245);
            std::logic_error::logic_error((std::logic_error *)&v236, (const std::string *)v245);
            v236.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
            std::logic_error::logic_error(&v228, (const std::logic_error *)&v236);
            uint64_t v230 = 0;
            v231 = 0;
            *(void *)&long long v232 = 0;
            DWORD2(v232) = -1;
            v228.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            dirent v229 = &unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v228);
            *(void *)&v251[8] = "void AMCP::Graph::Manifest_Task::set_up_connections(const Manifest_Execution_Context &"
                                  ", rt_safe_vector<DAL::Readable_Range> &, rt_safe_vector<DAL::Writable_Range> &)";
            *(void *)&v251[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
            *(_DWORD *)&v251[24] = 177;
            applesauce::backtrace::snapshot_N<64>::snapshot_N(&v239.__r_.__value_.__l.__data_);
            *(_OWORD *)&v255[8] = *(_OWORD *)&v239.__r_.__value_.__l.__data_;
            *(void *)uint64_t v255 = &unk_1F148AA90;
            *(void *)unint64_t v256 = *((void *)&v239.__r_.__value_.__l + 2);
            memset(&v239, 0, sizeof(v239));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
          *(_DWORD *)uint64_t v221 = v212;
          *(_OWORD *)&v221[8] = v213;
          uint64_t v50 = (uint64_t)v214;
          uint64_t v49 = v215;
          if (v215) {
            atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v51 = v223;
          uint64_t v222 = v50;
          std::runtime_error v223 = v49;
          if (v51) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v51);
          }
          *(_DWORD *)CFStringRef v224 = v216;
          *(_OWORD *)&v224[8] = v217;
          uint64_t v53 = v218;
          long long v52 = v219;
          if (v219) {
            atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v54 = v226;
          uint64_t v225 = v53;
          uint64_t v226 = v52;
          if (v54) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v54);
          }
          uint64_t v227 = v220;
        }
        if (v219) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v219);
        }
        if (v215) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v215);
        }
        v16 += 2;
      }
      unint64_t v55 = v207[1];
      unint64_t v56 = v207[2];
      if (v55 >= v56)
      {
        uint64_t v62 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v55 - *v207) >> 3);
        unint64_t v63 = v62 + 1;
        if ((unint64_t)(v62 + 1) > 0x2E8BA2E8BA2E8BALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v64 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v56 - *v207) >> 3);
        if (2 * v64 > v63) {
          unint64_t v63 = 2 * v64;
        }
        if (v64 >= 0x1745D1745D1745DLL) {
          uint64_t v65 = 0x2E8BA2E8BA2E8BALL;
        }
        else {
          uint64_t v65 = v63;
        }
        int64x2_t v215 = v206;
        if (v65) {
          uint64_t v65 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v65);
        }
        else {
          uint64_t v66 = 0;
        }
        unint64_t v67 = (char *)(v65 + 88 * v62);
        uint64_t v212 = v65;
        *(void *)&long long v213 = v67;
        CFTypeRef v214 = (char *)(v65 + 88 * v66);
        long long v68 = *(_OWORD *)v221;
        *((void *)v67 + 2) = *(void *)&v221[16];
        *(_OWORD *)unint64_t v67 = v68;
        *((void *)v67 + 3) = v222;
        float v69 = v223;
        *((void *)v67 + 4) = v223;
        if (v69) {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v70 = *(_OWORD *)v224;
        *((void *)v67 + 7) = *(void *)&v224[16];
        *(_OWORD *)(v67 + 40) = v70;
        *((void *)v67 + 8) = v225;
        BOOL v71 = v226;
        *((void *)v67 + 9) = v226;
        if (v71) {
          atomic_fetch_add_explicit(&v71->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *((void *)v67 + 10) = v227;
        *((void *)&v213 + 1) = v67 + 88;
        std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(v207, &v212);
        uint64_t v61 = v207[1];
        std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer((uint64_t)&v212);
      }
      else
      {
        long long v57 = *(_OWORD *)v221;
        *(void *)(v55 + 16) = *(void *)&v221[16];
        *(_OWORD *)unint64_t v55 = v57;
        *(void *)(v55 + 24) = v222;
        unint64_t v58 = v223;
        *(void *)(v55 + 32) = v223;
        if (v58) {
          atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        long long v59 = *(_OWORD *)v224;
        *(void *)(v55 + 56) = *(void *)&v224[16];
        *(_OWORD *)(v55 + 40) = v59;
        *(void *)(v55 + 64) = v225;
        unint64_t v60 = v226;
        *(void *)(v55 + 72) = v226;
        if (v60) {
          atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *(void *)(v55 + 80) = v227;
        uint64_t v61 = v55 + 88;
        v207[1] = v55 + 88;
      }
      v207[1] = v61;
      if (v226) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v226);
      }
      if (v223) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v223);
      }
      uint64_t v14 = (AMCP::DAL::DAL_Time *)((char *)v210 + 40);
    }
    while ((AMCP::DAL::DAL_Time *)((char *)v210 + 40) != v208);
  }
  unint64_t v72 = *(uint64_t ***)(v7 + 24);
  BOOL v205 = *(uint64_t ***)(v7 + 32);
  if (v72 == v205) {
    return;
  }
  do
  {
    *(void *)&uint8_t buf[8] = 0;
    *(void *)std::string buf = 0;
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)&v212, (uint64_t *)buf, 0.0, 0.0);
    AMCP::DAL::Writable_Range::Writable_Range((uint64_t)v221, (long long *)&v212, 0);
    if (v219) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v219);
    }
    if (v215) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v215);
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v74 = *v72;
    unint64_t v73 = v72[1];
    CFTypeRef v209 = v73;
    while (v74 != v73)
    {
      uint64_t v76 = *(void *)(a2 + 24);
      uint64_t v75 = *(std::__shared_weak_count **)(a2 + 32);
      if (v75)
      {
        atomic_fetch_add_explicit(&v75->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
      if (!v76)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v255, "com.apple.coreaudio", "AMCP");
        int v176 = **(NSObject ***)v255;
        if (*(void *)&v255[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v255[8]);
        }
        if (os_log_type_enabled(v176, OS_LOG_TYPE_ERROR))
        {
          uint64_t v177 = pthread_self();
          mach_port_t v178 = pthread_mach_thread_np(v177);
          *(_DWORD *)uint64_t v255 = 67109890;
          *(_DWORD *)&v255[4] = v178;
          *(_WORD *)&v255[8] = 2080;
          *(void *)&v255[10] = "Manifest_Task.cpp";
          *(_WORD *)&v255[18] = 1024;
          *(_DWORD *)&v255[20] = 371;
          *(_WORD *)unint64_t v256 = 2080;
          *(void *)&v256[2] = "not (execution_context.m_time_interval.get_clock() != nullptr)";
          _os_log_error_impl(&dword_1BAA78000, v176, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Bad time interval", v255, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v249);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Bad time interval", (uint64_t)&v236);
        std::logic_error::logic_error(&v244, &v236);
        v244.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v245, &v244);
        v246 = 0;
        *(void *)&v245[24] = 0;
        uint64_t v247 = 0;
        int v248 = -1;
        *(void *)uint64_t v245 = &unk_1F1489CC8;
        *(void *)&v245[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v255, (uint64_t)v245);
        *(void *)&v256[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(void *)&v256[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v257 = 371;
        std::vector<void *>::vector(&v242);
        int v179 = backtrace((void **)&v242.~logic_error, (unint64_t)(v242.__imp_.__imp_ - (const char *)v242.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v242, v179);
        *(std::logic_error *)&v239.__r_.__value_.__r.__words[1] = v242;
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        std::string::pointer v240 = v243;
        v242.__vftable = 0;
        v242.__imp_.__imp_ = 0;
        mach_port_t v243 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if ((*(unsigned char *)a2 & 2) == 0) {
        AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)a2);
      }
      if (round(*(double *)(a2 + 8)) == 0.0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v255, "com.apple.coreaudio", "AMCP");
        uint64_t v180 = **(NSObject ***)v255;
        if (*(void *)&v255[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v255[8]);
        }
        if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
        {
          v181 = pthread_self();
          mach_port_t v182 = pthread_mach_thread_np(v181);
          CFStringRef v183 = (void *)(v7 + 64);
          if (*(char *)(v7 + 87) < 0) {
            CFStringRef v183 = (void *)*v183;
          }
          *(_DWORD *)uint64_t v255 = 67110146;
          *(_DWORD *)&v255[4] = v182;
          *(_WORD *)&v255[8] = 2080;
          *(void *)&v255[10] = "Manifest_Task.cpp";
          *(_WORD *)&v255[18] = 1024;
          *(_DWORD *)&v255[20] = 372;
          *(_WORD *)unint64_t v256 = 2080;
          *(void *)&v256[2] = "not (execution_context.m_time_interval.get_sample_delta() != 0_S)";
          *(_WORD *)&v256[10] = 2080;
          *(void *)&v256[12] = v183;
          _os_log_error_impl(&dword_1BAA78000, v180, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Zero time interval manifest task %s", v255, 0x2Cu);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v249);
        __cxa_allocate_exception(0x40uLL);
        int v184 = (void *)(v7 + 64);
        if (*(char *)(v7 + 87) < 0) {
          int v184 = (void *)*v184;
        }
        caulk::make_string((caulk *)"Zero time interval manifest task %s", (uint64_t)&v236, v184);
        std::logic_error::logic_error(&v244, &v236);
        v244.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v245, &v244);
        v246 = 0;
        *(void *)&v245[24] = 0;
        uint64_t v247 = 0;
        int v248 = -1;
        *(void *)uint64_t v245 = &unk_1F1489CC8;
        *(void *)&v245[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v255, (uint64_t)v245);
        *(void *)&v256[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(void *)&v256[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v257 = 372;
        std::vector<void *>::vector(&v242);
        int v185 = backtrace((void **)&v242.~logic_error, (unint64_t)(v242.__imp_.__imp_ - (const char *)v242.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v242, v185);
        *(std::logic_error *)&v239.__r_.__value_.__r.__words[1] = v242;
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        std::string::pointer v240 = v243;
        v242.__vftable = 0;
        v242.__imp_.__imp_ = 0;
        mach_port_t v243 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v77 = *v74;
      unint64_t v78 = *(void *)(*v74 + 232);
      unint64_t v79 = *(std::__shared_weak_count **)(*v74 + 240);
      if (v79)
      {
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v77 = *v74;
      }
      uint64_t v81 = *(void *)(v77 + 128);
      uint8x8_t v80 = *(std::__shared_weak_count **)(v77 + 136);
      if (v80) {
        atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      BOOL v82 = (v78 | v81) == 0;
      if (!v78 || !v81) {
        goto LABEL_152;
      }
      uint64_t v83 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v78 + 16))(v78);
      unint64_t v78 = (*(uint64_t (**)(uint64_t))(*(void *)v81 + 16))(v81);
      uint64_t v84 = v83[23];
      if ((v84 & 0x80u) == 0) {
        uint64_t v85 = v83[23];
      }
      else {
        uint64_t v85 = *((void *)v83 + 1);
      }
      uint64_t v86 = *(unsigned __int8 *)(v78 + 23);
      int v87 = (char)v86;
      if ((v86 & 0x80u) != 0) {
        uint64_t v86 = *(void *)(v78 + 8);
      }
      if (v85 == v86)
      {
        if (v87 >= 0) {
          uint64_t v88 = (unsigned __int8 *)v78;
        }
        else {
          uint64_t v88 = *(unsigned __int8 **)v78;
        }
        if ((v84 & 0x80) != 0)
        {
          unint64_t v78 = memcmp(*(const void **)v83, v88, *((void *)v83 + 1));
          BOOL v82 = v78 == 0;
          goto LABEL_152;
        }
        if (v83[23])
        {
          uint64_t v89 = v84 - 1;
          do
          {
            int v91 = *v83++;
            int v90 = v91;
            int v93 = *v88++;
            int v92 = v93;
            BOOL v95 = v89-- != 0;
            BOOL v82 = v90 == v92;
          }
          while (v90 == v92 && v95);
LABEL_152:
          if (!v80) {
            goto LABEL_154;
          }
LABEL_153:
          std::__shared_weak_count::__release_shared[abi:ne180100](v80);
          goto LABEL_154;
        }
        BOOL v82 = 1;
        if (v80) {
          goto LABEL_153;
        }
      }
      else
      {
        BOOL v82 = 0;
        if (v80) {
          goto LABEL_153;
        }
      }
LABEL_154:
      uint64_t v7 = v211;
      if (v79)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
        std::__shared_weak_count::__release_shared[abi:ne180100](v79);
      }
      if (!v82)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v78);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v255, "com.apple.coreaudio", "AMCP");
        CFStringRef v186 = **(NSObject ***)v255;
        if (*(void *)&v255[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v255[8]);
        }
        if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
        {
          CFStringRef v187 = pthread_self();
          mach_port_t v188 = pthread_mach_thread_np(v187);
          *(_DWORD *)uint64_t v255 = 67109890;
          *(_DWORD *)&v255[4] = v188;
          *(_WORD *)&v255[8] = 2080;
          *(void *)&v255[10] = "Manifest_Task.cpp";
          *(_WORD *)&v255[18] = 1024;
          *(_DWORD *)&v255[20] = 373;
          *(_WORD *)unint64_t v256 = 2080;
          *(void *)&v256[2] = "not (is_same_timebase(c->get_producer_write_position().get_clock(), c->get_timebase()))";
          _os_log_error_impl(&dword_1BAA78000, v186, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v255, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v249);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v236);
        std::logic_error::logic_error(&v244, &v236);
        v244.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v245, &v244);
        v246 = 0;
        *(void *)&v245[24] = 0;
        uint64_t v247 = 0;
        int v248 = -1;
        *(void *)uint64_t v245 = &unk_1F1489CC8;
        *(void *)&v245[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v255, (uint64_t)v245);
        *(void *)&v256[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(void *)&v256[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v257 = 373;
        std::vector<void *>::vector(&v242);
        int v189 = backtrace((void **)&v242.~logic_error, (unint64_t)(v242.__imp_.__imp_ - (const char *)v242.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v242, v189);
        *(std::logic_error *)&v239.__r_.__value_.__r.__words[1] = v242;
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        std::string::pointer v240 = v243;
        v242.__vftable = 0;
        v242.__imp_.__imp_ = 0;
        mach_port_t v243 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v96 = *v74;
      uint64_t v98 = *(void *)(*v74 + 128);
      __int32 v97 = *(std::__shared_weak_count **)(*v74 + 136);
      if (v97)
      {
        atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v97);
        if (!v98) {
          goto LABEL_319;
        }
        uint64_t v96 = *v74;
        if (!*v74)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v97);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v255, "com.apple.coreaudio", "AMCP");
          BOOL v194 = **(NSObject ***)v255;
          if (*(void *)&v255[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v255[8]);
          }
          if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR))
          {
            CFStringRef v195 = pthread_self();
            mach_port_t v196 = pthread_mach_thread_np(v195);
            *(_DWORD *)uint64_t v255 = 67109890;
            *(_DWORD *)&v255[4] = v196;
            *(_WORD *)&v255[8] = 2080;
            *(void *)&v255[10] = "Manifest_Task.cpp";
            *(_WORD *)&v255[18] = 1024;
            *(_DWORD *)&v255[20] = 375;
            *(_WORD *)unint64_t v256 = 2080;
            *(void *)&v256[2] = "not (c.get() != nullptr)";
            _os_log_error_impl(&dword_1BAA78000, v194, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v255, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v249);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v236);
          std::logic_error::logic_error(&v244, &v236);
          v244.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v245, &v244);
          v246 = 0;
          *(void *)&v245[24] = 0;
          uint64_t v247 = 0;
          int v248 = -1;
          *(void *)uint64_t v245 = &unk_1F1489CC8;
          *(void *)&v245[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v255, (uint64_t)v245);
          *(void *)&v256[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Exe"
                                "cution_Context &, const Connection &)";
          *(void *)&v256[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
          int v257 = 375;
          std::vector<void *>::vector(&v242);
          int v197 = backtrace((void **)&v242.~logic_error, (unint64_t)(v242.__imp_.__imp_ - (const char *)v242.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v242, v197);
          *(std::logic_error *)&v239.__r_.__value_.__r.__words[1] = v242;
          v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          std::string::pointer v240 = v243;
          v242.__vftable = 0;
          v242.__imp_.__imp_ = 0;
          mach_port_t v243 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
      }
      else if (!v98)
      {
LABEL_319:
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v97);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v255, "com.apple.coreaudio", "AMCP");
        unsigned int v190 = **(NSObject ***)v255;
        if (*(void *)&v255[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v255[8]);
        }
        if (os_log_type_enabled(v190, OS_LOG_TYPE_ERROR))
        {
          int v191 = pthread_self();
          mach_port_t v192 = pthread_mach_thread_np(v191);
          *(_DWORD *)uint64_t v255 = 67109890;
          *(_DWORD *)&v255[4] = v192;
          *(_WORD *)&v255[8] = 2080;
          *(void *)&v255[10] = "Manifest_Task.cpp";
          *(_WORD *)&v255[18] = 1024;
          *(_DWORD *)&v255[20] = 374;
          *(_WORD *)unint64_t v256 = 2080;
          *(void *)&v256[2] = "not (c->get_timebase() != nullptr)";
          _os_log_error_impl(&dword_1BAA78000, v190, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", v255, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v249);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v236);
        std::logic_error::logic_error(&v244, &v236);
        v244.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v245, &v244);
        v246 = 0;
        *(void *)&v245[24] = 0;
        uint64_t v247 = 0;
        int v248 = -1;
        *(void *)uint64_t v245 = &unk_1F1489CC8;
        *(void *)&v245[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v255, (uint64_t)v245);
        *(void *)&v256[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(void *)&v256[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v257 = 374;
        std::vector<void *>::vector(&v242);
        int v193 = backtrace((void **)&v242.~logic_error, (unint64_t)(v242.__imp_.__imp_ - (const char *)v242.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v242, v193);
        *(std::logic_error *)&v239.__r_.__value_.__r.__words[1] = v242;
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        std::string::pointer v240 = v243;
        v242.__vftable = 0;
        v242.__imp_.__imp_ = 0;
        mach_port_t v243 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v100 = *(void *)(v96 + 304);
      mach_port_t v99 = *(std::__shared_weak_count **)(v96 + 312);
      if (v99)
      {
        atomic_fetch_add_explicit(&v99->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v99);
      }
      if (!v100)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v99);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v255, "com.apple.coreaudio", "AMCP");
        CFStringRef v198 = **(NSObject ***)v255;
        if (*(void *)&v255[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v255[8]);
        }
        if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
        {
          int v199 = pthread_self();
          mach_port_t v200 = pthread_mach_thread_np(v199);
          *(_DWORD *)uint64_t v255 = 67109890;
          *(_DWORD *)&v255[4] = v200;
          *(_WORD *)&v255[8] = 2080;
          *(void *)&v255[10] = "Manifest_Task.cpp";
          *(_WORD *)&v255[18] = 1024;
          *(_DWORD *)&v255[20] = 376;
          *(_WORD *)unint64_t v256 = 2080;
          *(void *)&v256[2] = "not (c->get_buffer() != nullptr)";
          _os_log_error_impl(&dword_1BAA78000, v198, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Buffer has not been allocated in begin_processing", v255, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v249);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Buffer has not been allocated in begin_processing", (uint64_t)&v236);
        std::logic_error::logic_error(&v244, &v236);
        v244.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error((std::logic_error *)v245, &v244);
        v246 = 0;
        *(void *)&v245[24] = 0;
        uint64_t v247 = 0;
        int v248 = -1;
        *(void *)uint64_t v245 = &unk_1F1489CC8;
        *(void *)&v245[16] = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v255, (uint64_t)v245);
        *(void *)&v256[8] = "DAL::DAL_Time_Range AMCP::Graph::Manifest_Task::calculate_write_times(const Manifest_Execu"
                              "tion_Context &, const Connection &)";
        *(void *)&v256[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v257 = 376;
        std::vector<void *>::vector(&v242);
        int v201 = backtrace((void **)&v242.~logic_error, (unint64_t)(v242.__imp_.__imp_ - (const char *)v242.__vftable) >> 3);
        std::vector<void *>::resize((char **)&v242, v201);
        *(std::logic_error *)&v239.__r_.__value_.__r.__words[1] = v242;
        v239.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
        std::string::pointer v240 = v243;
        v242.__vftable = 0;
        v242.__imp_.__imp_ = 0;
        mach_port_t v243 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(v211);
      (*(void (**)(void, uint64_t, uint64_t *))(**(void **)(v211 + 104) + 32))(*(void *)(v211 + 104), a2, v74);
      unint64_t v103 = *(void *)(*v74 + 128);
      int v102 = *(std::__shared_weak_count **)(*v74 + 136);
      if (v102)
      {
        long long v104 = *(_OWORD *)(*v74 + 128);
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v102->__shared_owners_, 1uLL, memory_order_relaxed);
        *(_DWORD *)uint64_t v255 = 2;
        *(void *)&v255[8] = v101;
        *(void *)&v255[16] = 0;
        *(_OWORD *)unint64_t v256 = v104;
        std::__shared_weak_count::__release_shared[abi:ne180100](v102);
      }
      else
      {
        *(_DWORD *)uint64_t v255 = 2;
        *(void *)&v255[8] = v101;
        *(void *)&v255[16] = 0;
        *(_OWORD *)unint64_t v256 = v103;
      }
      uint64_t v105 = *v74;
      *(_OWORD *)uint64_t v245 = *(_OWORD *)(*v74 + 208);
      uint64_t v106 = *(void *)(v105 + 232);
      *(void *)&v245[16] = *(void *)(v105 + 224);
      *(void *)&v245[24] = v106;
      std::vector<unsigned int> v107 = *(std::__shared_weak_count **)(v105 + 240);
      v246 = v107;
      if (v107)
      {
        atomic_fetch_add_explicit(&v107->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v108 = *(void *)(*v74 + 232);
        uint64_t v109 = *(std::__shared_weak_count **)(*v74 + 240);
        std::string v236 = *(std::string *)(*v74 + 208);
        uint64_t v237 = v108;
        uint64_t v238 = v109;
        if (v109) {
          atomic_fetch_add_explicit(&v109->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v109 = 0;
        std::string v236 = *(std::string *)(v105 + 208);
        uint64_t v237 = v106;
        uint64_t v238 = 0;
      }
      boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v239, (uint64_t)&v236, (uint64_t)v255);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)v245, (const AMCP::DAL::DAL_Time *)&v239);
      if (v241) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v241);
      }
      if (v109) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v109);
      }
      if (v107) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v107);
      }
      if (*(void *)&v256[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v256[8]);
      }
      unint64_t v110 = *(uint64_t **)(*v74 + 304);
      mach_port_t v111 = *(std::__shared_weak_count **)(*v74 + 312);
      if (v111) {
        atomic_fetch_add_explicit(&v111->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      unint64_t v112 = v72[3];
      if (!v112)
      {
LABEL_190:
        os_log_type_t v116 = v111;
        goto LABEL_191;
      }
      uint64_t v114 = *(uint64_t **)(*v74 + 304);
      std::vector<unsigned int> v113 = *(std::__shared_weak_count **)(*v74 + 312);
      if (v113)
      {
        atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v115 = v72[3];
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
        if (v115 == v114) {
          goto LABEL_190;
        }
      }
      else if (v112 == v114)
      {
        goto LABEL_190;
      }
      unint64_t v110 = v72[3];
      os_log_type_t v116 = (std::__shared_weak_count *)v72[4];
      if (v116) {
        atomic_fetch_add_explicit(&v116->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v111) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v111);
      }
LABEL_191:
      uint64_t v117 = *v74;
      mach_port_t v119 = *(uint64_t **)(*v74 + 304);
      uint64_t v118 = *(std::__shared_weak_count **)(*v74 + 312);
      if (v118)
      {
        atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v110 == v119)
        {
          int v120 = *(_DWORD *)(v117 + 152);
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
          if (v120) {
            goto LABEL_203;
          }
        }
        else
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v118);
        }
      }
      else if (v110 == v119 && *(_DWORD *)(v117 + 152))
      {
        goto LABEL_203;
      }
      if (*(char *)(v117 + 31) < 0) {
        std::string::__init_copy_ctor_external((std::string *)v245, *(const std::string::value_type **)(v117 + 8), *(void *)(v117 + 16));
      }
      else {
        *(std::string *)uint64_t v245 = *(std::string *)(v117 + 8);
      }
      *(void *)&v245[24] = *(void *)(v117 + 32);
      LODWORD(v246) = *(_DWORD *)(v117 + 40);
      *(_DWORD *)uint64_t v255 = 0;
      *(_OWORD *)&v255[8] = *(_OWORD *)v245;
      *(void *)unint64_t v256 = *(void *)&v245[16];
      *(void *)&v256[8] = *(void *)&v245[24];
      *(_DWORD *)&v256[16] = v246;
      (*(void (**)(uint64_t *, unsigned char *, unsigned char *, void))(*v110 + 96))(v110, v255, buf, 0);
      if ((v256[7] & 0x80000000) != 0) {
        operator delete(*(void **)&v255[8]);
      }
LABEL_203:
      std::logic_error v228 = *(std::logic_error *)buf;
      dirent v229 = *(void **)&buf[16];
      uint64_t v230 = *(void *)v251;
      v231 = *(std::__shared_weak_count **)&v251[8];
      if (*(void *)&v251[8]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v251[8] + 8), 1uLL, memory_order_relaxed);
      }
      long long v232 = *(_OWORD *)&v251[16];
      uint64_t v233 = v252;
      uint64_t v234 = v253;
      mach_port_t v235 = v254;
      if (v254) {
        atomic_fetch_add_explicit(&v254->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *__return_ptr, uint64_t *, std::logic_error *))(*v110 + 160))(&v212, v110, &v228);
      if (v235) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v235);
      }
      if (v231) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v231);
      }
      if (v116) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v116);
      }
      if (v254) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v254);
      }
      if (*(void *)&v251[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v251[8]);
      }
      if (round(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v224)) == 0.0
        || (double v121 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v221),
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v224),
            double v122 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v212),
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v216),
            round(v122) < round(v121)))
      {
        *(_DWORD *)uint64_t v221 = v212;
        *(_OWORD *)&v221[8] = v213;
        uint64_t v124 = (uint64_t)v214;
        uint64_t v123 = v215;
        if (v215) {
          atomic_fetch_add_explicit(&v215->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        std::logic_error v125 = v223;
        uint64_t v222 = v124;
        std::runtime_error v223 = v123;
        if (v125) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v125);
        }
        *(_DWORD *)CFStringRef v224 = v216;
        *(_OWORD *)&v224[8] = v217;
        uint64_t v127 = v218;
        char v126 = v219;
        if (v219) {
          atomic_fetch_add_explicit(&v219->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v128 = v226;
        uint64_t v225 = v127;
        uint64_t v226 = v126;
        if (v128) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v128);
        }
        uint64_t v227 = v220;
      }
      if (v219) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v219);
      }
      if (v215) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v215);
      }
      v74 += 2;
      unint64_t v73 = v209;
    }
    unint64_t v129 = *(void *)(a4 + 8);
    unint64_t v130 = *(void *)(a4 + 16);
    if (v129 >= v130)
    {
      uint64_t v136 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v129 - *(void *)a4) >> 3);
      unint64_t v137 = v136 + 1;
      if ((unint64_t)(v136 + 1) > 0x2E8BA2E8BA2E8BALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v138 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v130 - *(void *)a4) >> 3);
      if (2 * v138 > v137) {
        unint64_t v137 = 2 * v138;
      }
      if (v138 >= 0x1745D1745D1745DLL) {
        uint64_t v139 = 0x2E8BA2E8BA2E8BALL;
      }
      else {
        uint64_t v139 = v137;
      }
      int64x2_t v215 = (std::__shared_weak_count *)(a4 + 16);
      if (v139) {
        uint64_t v139 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>((caulk::rt_safe_memory_resource *)v139);
      }
      else {
        uint64_t v140 = 0;
      }
      uint64_t v141 = (char *)(v139 + 88 * v136);
      uint64_t v212 = v139;
      *(void *)&long long v213 = v141;
      CFTypeRef v214 = (char *)(v139 + 88 * v140);
      long long v142 = *(_OWORD *)v221;
      *((void *)v141 + 2) = *(void *)&v221[16];
      *(_OWORD *)uint64_t v141 = v142;
      *((void *)v141 + 3) = v222;
      __int16 v143 = v223;
      *((void *)v141 + 4) = v223;
      if (v143) {
        atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v144 = *(_OWORD *)v224;
      *((void *)v141 + 7) = *(void *)&v224[16];
      *(_OWORD *)(v141 + 40) = v144;
      *((void *)v141 + 8) = v225;
      long long v145 = v226;
      *((void *)v141 + 9) = v226;
      if (v145) {
        atomic_fetch_add_explicit(&v145->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *((void *)v141 + 10) = v227;
      *((void *)&v213 + 1) = v141 + 88;
      std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer((uint64_t *)a4, &v212);
      unint64_t v135 = *(void *)(a4 + 8);
      std::__split_buffer<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range> &>::~__split_buffer((uint64_t)&v212);
    }
    else
    {
      long long v131 = *(_OWORD *)v221;
      *(void *)(v129 + 16) = *(void *)&v221[16];
      *(_OWORD *)unint64_t v129 = v131;
      *(void *)(v129 + 24) = v222;
      long long v132 = v223;
      *(void *)(v129 + 32) = v223;
      if (v132) {
        atomic_fetch_add_explicit(&v132->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v133 = *(_OWORD *)v224;
      *(void *)(v129 + 56) = *(void *)&v224[16];
      *(_OWORD *)(v129 + 40) = v133;
      *(void *)(v129 + 64) = v225;
      uint64_t v134 = v226;
      *(void *)(v129 + 72) = v226;
      if (v134) {
        atomic_fetch_add_explicit(&v134->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)(v129 + 80) = v227;
      unint64_t v135 = v129 + 88;
      *(void *)(a4 + 8) = v129 + 88;
    }
    *(void *)(a4 + 8) = v135;
    if (v226) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v226);
    }
    if (v223) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v223);
    }
    v72 += 5;
  }
  while (v72 != v205);
}

void sub_1BAB8E0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a30);
  }
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a41);
  }
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Unwind_Resume(a1);
}

uint64_t AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator(uint64_t this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(this + 104))
  {
    uint64_t v1 = *(uint64_t **)this;
    char v2 = *(uint64_t **)(this + 8);
    if (*(uint64_t **)this != v2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = *(uint64_t **)this;
      do
      {
        uint64_t v6 = *v4;
        uint64_t v5 = v4[1];
        v4 += 5;
        v3 += (v5 - v6) >> 4;
      }
      while (v4 != v2);
      if (v3)
      {
        do
        {
          for (uint64_t i = *v1; i != v1[1]; i += 16)
          {
            if (*(_DWORD *)(*(void *)i + 156) != 1)
            {
              int v8 = 0;
              goto LABEL_13;
            }
          }
          v1 += 5;
        }
        while (v1 != v2);
      }
    }
    int v8 = 1;
LABEL_13:
    uint64_t v9 = *(uint64_t **)(this + 24);
    uint64_t v10 = *(uint64_t **)(this + 32);
    if (v9 == v10) {
      goto LABEL_28;
    }
    uint64_t v11 = 0;
    uint64_t v12 = *(uint64_t **)(this + 24);
    do
    {
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      v12 += 5;
      v11 += (v13 - v14) >> 4;
    }
    while (v12 != v10);
    if (!v11)
    {
LABEL_28:
      if (!v8) {
        operator new();
      }
      if (!*(_DWORD *)(this + 112)) {
        operator new();
      }
    }
    else
    {
      do
      {
        for (uint64_t j = *v9; j != v9[1]; j += 16)
        {
          if (*(_DWORD *)(*(void *)j + 156) != 1) {
            goto LABEL_28;
          }
        }
        v9 += 5;
      }
      while (v9 != v10);
      if ((v8 & 1) == 0)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v16 = **(NSObject ***)buf;
        if (*(void *)v34) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v34);
        }
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        {
          uint64_t v17 = pthread_self();
          mach_port_t v18 = pthread_mach_thread_np(v17);
          *(_DWORD *)std::string buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v18;
          *(_WORD *)std::string::pointer v34 = 2080;
          *(void *)&uint64_t v34[2] = "Manifest_Task.cpp";
          __int16 v35 = 1024;
          int v36 = 585;
          __int16 v37 = 2080;
          *(void *)std::string::size_type v38 = "not (are_sources_aligned_for_input and not are_destinations_are_aligned_for_input)";
          _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v32);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v24);
        std::logic_error::logic_error(&v25, &v24);
        v25.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v26, &v25);
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        int v31 = -1;
        v26.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        mach_port_t v27 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v26);
        *(void *)&v38[6] = "void AMCP::Graph::Manifest_Task::maybe_create_data_flow_calculator()";
        std::string::size_type v39 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
        int v40 = 585;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
        long long v22 = v19;
        uint64_t v23 = v20;
        long long v19 = 0uLL;
        uint64_t v20 = 0;
        uint64_t v21 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
    }
    operator new();
  }
  return this;
}

void sub_1BAB8EB68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v26 - 128);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a24);
  MEMORY[0x1C1859090](&a22);
  if (a21 < 0) {
    operator delete(a16);
  }
  if (v25) {
    __cxa_free_exception(v24);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v26 - 129));
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Writable_Range>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0x2E8BA2E8BA2E8BBLL)
  {
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
    }
  }
  __break(1u);
  return result;
}

uint64_t *std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 88;
      long long v6 = *(_OWORD *)(v3 - 88);
      *(void *)(v4 - 72) = *(void *)(v3 - 72);
      *(_OWORD *)(v4 - 88) = v6;
      *(_OWORD *)(v4 - 64) = *(_OWORD *)(v3 - 64);
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      long long v7 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v7;
      *(_OWORD *)(v4 - 24) = *(_OWORD *)(v3 - 24);
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      v3 -= 88;
      v4 -= 88;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range,0>(i - 88);
  }
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3));
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x2E8BA2E8BA2E8BBLL)
  {
    uint64_t v2 = result;
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

uint64_t AMCP::DAL::Writable_Range::Writable_Range(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v4 = *(long long *)((char *)a2 + 24);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  long long v5 = *(long long *)((char *)a2 + 40);
  uint64_t v6 = *((void *)a2 + 7);
  long long v7 = a2[4];
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  long long v8 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v8;
  *(_OWORD *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 80) = a3;
  if (*((void *)&v4 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v4 + 1) + 8), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v4 + 1));
  }
  return a1;
}

uint64_t std::__split_buffer<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range,0>(i - 88);
  }
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Readable_Range>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3));
  }
  return a1;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Readable_Range>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0x2E8BA2E8BA2E8BBLL)
  {
    uint64_t v2 = result;
    uint64_t result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

AMCP::Log::Scope_Registry *AMCP::Graph::Manifest_Task::update_connection_write_positions(AMCP::Log::Scope_Registry *result, int a2, uint64_t *a3, void *a4)
{
  uint64_t v124 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  if (*(void *)(*((void *)result + 6) + 24))
  {
    if (0x2E8BA2E8BA2E8BA3 * ((v4 - v5) >> 3) != 0xCCCCCCCCCCCCCCCDLL
                                                  * ((uint64_t)(*((void *)result + 1) - *(void *)result) >> 3))
    {
      AMCP::Log::Scope_Registry::get(result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v90 = **(NSObject ***)buf;
      if ((void)v119) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
      }
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        int v91 = pthread_self();
        mach_port_t v92 = pthread_mach_thread_np(v91);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v92;
        LOWORD(v119) = 2080;
        *(void *)((char *)&v119 + 2) = "Manifest_Task.cpp";
        WORD5(v119) = 1024;
        HIDWORD(v119) = 203;
        LOWORD(v120) = 2080;
        *(void *)((char *)&v120 + 2) = "not (not m_handlers->m_Node_Process_Handler or incoming_connections.size() == g"
                                         "et_number_of_connection_lists(Connection_Direction::Source))";
        _os_log_error_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v101);
      std::logic_error::logic_error(&v104, &v101);
      v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v112, &v104);
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      int v117 = -1;
      v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
      *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Task::update_connection_write_positions(Object_ID, const rt_sa"
                               "fe_vector<DAL::Readable_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
      double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
      int v122 = 203;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
      uint64_t v108 = &unk_1F148AA90;
      std::string v109 = v111;
      memset(&v111, 0, sizeof(v111));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a4[1] - *a4) >> 3) != 0xCCCCCCCCCCCCCCCDLL
                                                               * ((uint64_t)(*((void *)result + 4)
                                                                          - *((void *)result + 3)) >> 3))
    {
      AMCP::Log::Scope_Registry::get(result);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v93 = **(NSObject ***)buf;
      if ((void)v119) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
      }
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        std::vector<unsigned int>::pointer v94 = pthread_self();
        mach_port_t v95 = pthread_mach_thread_np(v94);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v95;
        LOWORD(v119) = 2080;
        *(void *)((char *)&v119 + 2) = "Manifest_Task.cpp";
        WORD5(v119) = 1024;
        HIDWORD(v119) = 204;
        LOWORD(v120) = 2080;
        *(void *)((char *)&v120 + 2) = "not (not m_handlers->m_Node_Process_Handler or outgoing_connections.size() == g"
                                         "et_number_of_connection_lists(Connection_Direction::Destination))";
        _os_log_error_impl(&dword_1BAA78000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v101);
      std::logic_error::logic_error(&v104, &v101);
      v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v112, &v104);
      uint64_t v114 = 0;
      uint64_t v115 = 0;
      uint64_t v116 = 0;
      int v117 = -1;
      v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
      *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Task::update_connection_write_positions(Object_ID, const rt_sa"
                               "fe_vector<DAL::Readable_Range> &, const rt_safe_vector<DAL::Writable_Range> &)";
      double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
      int v122 = 204;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
      uint64_t v108 = &unk_1F148AA90;
      std::string v109 = v111;
      memset(&v111, 0, sizeof(v111));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  if (v4 != v5)
  {
    unint64_t v6 = 0;
    uint64_t v96 = result;
    do
    {
      nth_connection_list = (uint64_t **)AMCP::Graph::Manifest_Task::get_nth_connection_list(result, v6, 0);
      uint64_t v9 = *nth_connection_list;
      long long v8 = nth_connection_list[1];
      __int32 v97 = v8;
      while (v9 != v8)
      {
        uint64_t v10 = (uint64_t *)*v9;
        uint64_t v11 = (void *)(*a3 + 88 * v6);
        int v12 = *(_DWORD *)(*v9 + 144);
        uint64_t v14 = v11[3];
        uint64_t v13 = (std::__shared_weak_count *)v11[4];
        if (v13) {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v17 = (*(double (**)(uint64_t))(*(void *)v14 + 152))(v14);
        mach_port_t v18 = v13;
        uint64_t v19 = v10[24];
        uint64_t v20 = (std::__shared_weak_count *)v10[25];
        if (v20) {
          atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v19)
        {
          uint64_t v21 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 16))(v19);
          uint64_t v22 = v21[23];
          if ((v22 & 0x80u) == 0) {
            uint64_t v23 = v21[23];
          }
          else {
            uint64_t v23 = *((void *)v21 + 1);
          }
          uint64_t v24 = *(unsigned __int8 *)(v15 + 23);
          int v25 = (char)v24;
          if ((v24 & 0x80u) != 0) {
            uint64_t v24 = *(void *)(v15 + 8);
          }
          if (v23 == v24)
          {
            if (v25 >= 0) {
              int v16 = (unsigned __int8 *)v15;
            }
            else {
              int v16 = *(unsigned __int8 **)v15;
            }
            if ((v22 & 0x80) != 0)
            {
              uint64_t v15 = memcmp(*(const void **)v21, v16, *((void *)v21 + 1));
              LOBYTE(v19) = v15 == 0;
              if (!v15) {
                goto LABEL_33;
              }
              goto LABEL_28;
            }
            if (!v21[23])
            {
LABEL_26:
              LOBYTE(v19) = 1;
              goto LABEL_33;
            }
            while (*v21 == *v16)
            {
              ++v21;
              ++v16;
              if (!--v22) {
                goto LABEL_26;
              }
            }
          }
          LOBYTE(v19) = 0;
        }
LABEL_28:
        if (!v12)
        {
          uint64_t v26 = v10[24];
          mach_port_t v27 = (std::__shared_weak_count *)v10[25];
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          LOBYTE(v19) = v17 == (*(double (**)(uint64_t))(*(void *)v26 + 152))(v26);
          if (v27) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          }
        }
LABEL_33:
        if (v20) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v20);
        }
        if ((v19 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v62 = **(NSObject ***)buf;
          if ((void)v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
          }
          if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
          {
            unint64_t v63 = pthread_self();
            mach_port_t v64 = pthread_mach_thread_np(v63);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v64;
            LOWORD(v119) = 2080;
            *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
            WORD5(v119) = 1024;
            HIDWORD(v119) = 319;
            LOWORD(v120) = 2080;
            *(void *)((char *)&v120 + 2) = "not (is_same_timebase(read_position_clock, m_consumer_read_position.get_clo"
                                             "ck()) || (drift_correction_disabled && read_position_sr == m_consumer_read_"
                                             "position.get_clock()->get_sample_rate()))";
            _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v101);
          std::logic_error::logic_error(&v104, &v101);
          v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v112, &v104);
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = -1;
          v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
          *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          int v122 = 319;
          std::vector<void *>::vector(&v111);
          int v65 = backtrace((void **)v111.__r_.__value_.__l.__data_, (v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v111.__r_.__value_.__l.__data_, v65);
          uint64_t v108 = &unk_1F148AA90;
          std::string v109 = v111;
          memset(&v111, 0, sizeof(v111));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v28 = v10[16];
        if (v28)
        {
          uint64_t v29 = v18;
          uint64_t v30 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t, unsigned __int8 *))(*(void *)v14 + 16))(v14, v16);
          uint64_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)v10[16] + 16))(v10[16]);
          uint64_t v31 = v30[23];
          if ((v31 & 0x80u) == 0) {
            uint64_t v32 = v30[23];
          }
          else {
            uint64_t v32 = *((void *)v30 + 1);
          }
          uint64_t v33 = *(unsigned __int8 *)(v15 + 23);
          int v34 = (char)v33;
          if ((v33 & 0x80u) != 0) {
            uint64_t v33 = *(void *)(v15 + 8);
          }
          if (v32 == v33)
          {
            if (v34 >= 0) {
              int v16 = (unsigned __int8 *)v15;
            }
            else {
              int v16 = *(unsigned __int8 **)v15;
            }
            if ((v31 & 0x80) != 0)
            {
              uint64_t v15 = memcmp(*(const void **)v30, v16, *((void *)v30 + 1));
              LOBYTE(v28) = v15 == 0;
              if (!v15) {
                goto LABEL_59;
              }
              goto LABEL_56;
            }
            if (!v30[23]) {
              goto LABEL_60;
            }
            while (*v30 == *v16)
            {
              ++v30;
              ++v16;
              if (!--v31) {
                goto LABEL_60;
              }
            }
          }
          LOBYTE(v28) = 0;
        }
        else
        {
          uint64_t v29 = v18;
        }
LABEL_56:
        if (!v12)
        {
          if (v17 != (*(double (**)(uint64_t, unsigned __int8 *))(*(void *)v10[16] + 152))(v10[16], v16)) {
            goto LABEL_111;
          }
          goto LABEL_60;
        }
LABEL_59:
        if ((v28 & 1) == 0)
        {
LABEL_111:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v15);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v66 = **(NSObject ***)buf;
          if ((void)v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
          }
          if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
          {
            unint64_t v67 = pthread_self();
            mach_port_t v68 = pthread_mach_thread_np(v67);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v68;
            LOWORD(v119) = 2080;
            *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
            WORD5(v119) = 1024;
            HIDWORD(v119) = 321;
            LOWORD(v120) = 2080;
            *(void *)((char *)&v120 + 2) = "not (is_same_timebase(read_position_clock, m_timebase) || (drift_correction"
                                             "_disabled && read_position_sr == m_timebase->get_sample_rate()))";
            _os_log_error_impl(&dword_1BAA78000, v66, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v101);
          std::logic_error::logic_error(&v104, &v101);
          v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v112, &v104);
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = -1;
          v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
          *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          int v122 = 321;
          std::vector<void *>::vector(&v111);
          int v69 = backtrace((void **)v111.__r_.__value_.__l.__data_, (v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v111.__r_.__value_.__l.__data_, v69);
          uint64_t v108 = &unk_1F148AA90;
          std::string v109 = v111;
          memset(&v111, 0, sizeof(v111));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
LABEL_60:
        __int16 v35 = (AMCP::Log::Scope_Registry *)v10[38];
        if (!v35)
        {
          AMCP::Log::Scope_Registry::get(0);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v70 = **(NSObject ***)buf;
          if ((void)v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
          }
          if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR))
          {
            BOOL v71 = pthread_self();
            mach_port_t v72 = pthread_mach_thread_np(v71);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v72;
            LOWORD(v119) = 2080;
            *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
            WORD5(v119) = 1024;
            HIDWORD(v119) = 322;
            LOWORD(v120) = 2080;
            *(void *)((char *)&v120 + 2) = "not (m_buffer)";
            _os_log_error_impl(&dword_1BAA78000, v70, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v101);
          std::logic_error::logic_error(&v104, &v101);
          v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v112, &v104);
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = -1;
          v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
          *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          int v122 = 322;
          std::vector<void *>::vector(&v111);
          int v73 = backtrace((void **)v111.__r_.__value_.__l.__data_, (v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v111.__r_.__value_.__l.__data_, v73);
          uint64_t v108 = &unk_1F148AA90;
          std::string v109 = v111;
          memset(&v111, 0, sizeof(v111));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (*((_DWORD *)v10 + 38) != 3)
        {
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v35 + 64))(buf);
          BOOL v36 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v10 + 26), (AMCP::DAL::DAL_Time *)buf);
          if (v123) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v123);
          }
          __int16 v35 = (AMCP::Log::Scope_Registry *)*((void *)&v120 + 1);
          if (*((void *)&v120 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
          }
          if (v36)
          {
            AMCP::Log::Scope_Registry::get(v35);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v74 = **(NSObject ***)buf;
            if ((void)v119) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
            }
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            {
              uint64_t v75 = pthread_self();
              mach_port_t v76 = pthread_mach_thread_np(v75);
              *(_DWORD *)std::string buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v76;
              LOWORD(v119) = 2080;
              *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
              WORD5(v119) = 1024;
              HIDWORD(v119) = 325;
              LOWORD(v120) = 2080;
              *(void *)((char *)&v120 + 2) = "not (zeroed_reads or m_producer_write_position >= m_buffer->get_time_range().start())";
              _os_log_error_impl(&dword_1BAA78000, v74, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
            __cxa_allocate_exception(0x40uLL);
            caulk::make_string((caulk *)"", (uint64_t)&v101);
            std::logic_error::logic_error(&v104, &v101);
            v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
            std::logic_error::logic_error(&v112, &v104);
            uint64_t v114 = 0;
            uint64_t v115 = 0;
            uint64_t v116 = 0;
            int v117 = -1;
            v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
            std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
            *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
            double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
            int v122 = 325;
            std::vector<void *>::vector(&v111);
            int v77 = backtrace((void **)v111.__r_.__value_.__l.__data_, (v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 3);
            std::vector<void *>::resize(&v111.__r_.__value_.__l.__data_, v77);
            uint64_t v108 = &unk_1F148AA90;
            std::string v109 = v111;
            memset(&v111, 0, sizeof(v111));
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
          }
        }
        if (!v10[37])
        {
          AMCP::Log::Scope_Registry::get(v35);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unint64_t v78 = **(NSObject ***)buf;
          if ((void)v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
          }
          if (os_log_type_enabled(v78, OS_LOG_TYPE_ERROR))
          {
            unint64_t v79 = pthread_self();
            mach_port_t v80 = pthread_mach_thread_np(v79);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v80;
            LOWORD(v119) = 2080;
            *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
            WORD5(v119) = 1024;
            HIDWORD(v119) = 326;
            LOWORD(v120) = 2080;
            *(void *)((char *)&v120 + 2) = "not (is_processing())";
            _os_log_error_impl(&dword_1BAA78000, v78, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v106);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v101);
          std::logic_error::logic_error(&v104, &v101);
          v104.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v112, &v104);
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = -1;
          v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
          *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          int v122 = 326;
          std::vector<void *>::vector(&v111);
          int v81 = backtrace((void **)v111.__r_.__value_.__l.__data_, (v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 3);
          std::vector<void *>::resize(&v111.__r_.__value_.__l.__data_, v81);
          uint64_t v108 = &unk_1F148AA90;
          std::string v109 = v111;
          memset(&v111, 0, sizeof(v111));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (v29) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
        }
        double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v11 + 5));
        double v38 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v11);
        long long v39 = *((_OWORD *)v10 + 12);
        uint64_t v40 = v10[25];
        if (v40) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v40 + 8), 1uLL, memory_order_relaxed);
        }
        *(_DWORD *)std::string buf = 2;
        *(double *)&long long v119 = sample_time - v38;
        *((void *)&v119 + 1) = 0;
        long long v120 = v39;
        boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v108, (uint64_t)(v10 + 21), (uint64_t)buf);
        if (*((void *)&v120 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
        }
        BOOL v41 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v10 + 21), (AMCP::DAL::DAL_Time *)&v108);
        if (!v41)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v41);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          BOOL v82 = **(NSObject ***)buf;
          if ((void)v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
          }
          if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
          {
            uint64_t v83 = pthread_self();
            mach_port_t v84 = pthread_mach_thread_np(v83);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v84;
            LOWORD(v119) = 2080;
            *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
            WORD5(v119) = 1024;
            HIDWORD(v119) = 330;
            LOWORD(v120) = 2080;
            *(void *)((char *)&v120 + 2) = "not (new_target_position > m_consumer_read_position)";
            _os_log_error_impl(&dword_1BAA78000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v107);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v111);
          std::logic_error::logic_error(&v106, &v111);
          v106.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v112, &v106);
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = -1;
          v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
          *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          int v122 = 330;
          std::vector<void *>::vector(&v104);
          int v85 = backtrace((void **)&v104.~logic_error, (unint64_t)(v104.__imp_.__imp_ - (const char *)v104.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v104, v85);
          v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          *(std::logic_error *)&v101.__r_.__value_.__r.__words[1] = v104;
          uint64_t v102 = v105;
          v104.__vftable = 0;
          v104.__imp_.__imp_ = 0;
          uint64_t v105 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v42 = v10[41];
        if (v42)
        {
          uint64_t v43 = *v10;
          vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 21)));
          vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v108));
          AMCP::Graph::Manifest_Log::add_message(v42, 4, "Manifest_Buffer(%ld), prev position: %lld, update_read_position: %lld", v44, v45, v46, v47, v48, v43);
        }
        *((_DWORD *)v10 + 42) = v108;
        *((_OWORD *)v10 + 11) = *(_OWORD *)&v109.__r_.__value_.__l.__data_;
        std::string::size_type v50 = v109.__r_.__value_.__r.__words[2];
        uint64_t v49 = v110;
        if (v110) {
          atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t v51 = (std::__shared_weak_count *)v10[25];
        v10[24] = v50;
        v10[25] = (uint64_t)v49;
        if (v51) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v51);
        }
        double v52 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 21));
        if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v10 + 21)) != (double)(uint64_t)floor(v52))
        {
          AMCP::Log::Scope_Registry::get(v53);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v86 = **(NSObject ***)buf;
          if ((void)v119) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v119);
          }
          if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
          {
            int v87 = pthread_self();
            mach_port_t v88 = pthread_mach_thread_np(v87);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v88;
            LOWORD(v119) = 2080;
            *(void *)((char *)&v119 + 2) = "Manifest_Buffer.cpp";
            WORD5(v119) = 1024;
            HIDWORD(v119) = 341;
            LOWORD(v120) = 2080;
            *(void *)((char *)&v120 + 2) = "not (m_consumer_read_position.get_sample_time().floor().get() == m_consumer"
                                             "_read_position.get_sample_time().get_double())";
            _os_log_error_impl(&dword_1BAA78000, v86, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v107);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v111);
          std::logic_error::logic_error(&v106, &v111);
          v106.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v112, &v106);
          uint64_t v114 = 0;
          uint64_t v115 = 0;
          uint64_t v116 = 0;
          int v117 = -1;
          v112.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          std::vector<unsigned int> v113 = (std::logic_error_vtbl *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v112);
          *((void *)&v120 + 1) = "void AMCP::Graph::Manifest_Buffer::update_read_position(const AMCP::DAL::DAL_Time_Range &)";
          double v121 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
          int v122 = 341;
          std::vector<void *>::vector(&v104);
          int v89 = backtrace((void **)&v104.~logic_error, (unint64_t)(v104.__imp_.__imp_ - (const char *)v104.__vftable) >> 3);
          std::vector<void *>::resize((char **)&v104, v89);
          v101.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          *(std::logic_error *)&v101.__r_.__value_.__r.__words[1] = v104;
          uint64_t v102 = v105;
          v104.__vftable = 0;
          v104.__imp_.__imp_ = 0;
          uint64_t v105 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if (v110) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v110);
        }
        v9 += 2;
        long long v8 = v97;
      }
      ++v6;
      uint64_t result = v96;
    }
    while (v6 < 0x2E8BA2E8BA2E8BA3 * ((a3[1] - *a3) >> 3));
  }
  uint64_t v54 = *((void *)result + 3);
  uint64_t v55 = *((void *)result + 4);
  if (v54 != v55)
  {
    uint64_t v56 = 0;
    do
    {
      long long v57 = *(std::logic_error ***)v54;
      unint64_t v58 = *(std::logic_error ***)(v54 + 8);
      if (*(std::logic_error ***)v54 != v58)
      {
        do
        {
          long long v59 = *v57;
          std::logic_error v112 = (*v57)[13];
          imp = v59[14].__imp_.__imp_;
          std::vector<unsigned int> v113 = v59[14].__vftable;
          uint64_t v114 = imp;
          uint64_t v61 = (std::__shared_weak_count *)v59[15].__vftable;
          uint64_t v115 = v61;
          if (v61) {
            atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          AMCP::DAL::DAL_Time::operator-((uint64_t)&v101, (AMCP::DAL::DAL_Time *)(*a4 + 88 * v56 + 40), (AMCP::DAL::DAL_Time *)(*a4 + 88 * v56));
          boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v108, (uint64_t)&v112, (uint64_t)&v101);
          AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)&v112, (const AMCP::DAL::DAL_Time *)&v108);
          if (v110) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v110);
          }
          if (v103) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v103);
          }
          AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position((uint64_t)*v57, a2, (uint64_t *)(v54 + 24), buf);
          if (v123) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v123);
          }
          if (*((void *)&v120 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v120 + 1));
          }
          if (v61) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v61);
          }
          v57 += 2;
        }
        while (v57 != v58);
      }
      uint64_t result = *(AMCP::Log::Scope_Registry **)(v54 + 24);
      if (result) {
        uint64_t result = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *))(*(void *)result + 88))(result);
      }
      ++v56;
      v54 += 40;
    }
    while (v54 != v55);
  }
  return result;
}

void sub_1BAB909D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50)
{
  if (a40) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a40);
  }
  _Unwind_Resume(exception_object);
}

caulk::rt_safe_memory_resource *AMCP::Graph::Manifest_Task::process_once(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 88) != 3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v65, "com.apple.coreaudio", "AMCP");
    uint64_t v32 = **(NSObject ***)v65;
    if ((void)v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = pthread_self();
      mach_port_t v34 = pthread_mach_thread_np(v33);
      *(_DWORD *)int v65 = 67109890;
      *(_DWORD *)&v65[4] = v34;
      LOWORD(v66) = 2080;
      *(void *)((char *)&v66 + 2) = "Manifest_Task.cpp";
      WORD5(v66) = 1024;
      HIDWORD(v66) = 249;
      *(_WORD *)unint64_t v67 = 2080;
      *(void *)&v67[2] = "not (is_processing())";
      _os_log_error_impl(&dword_1BAA78000, v32, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s process_once() called before begin_processing()", v65, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v52);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"process_once() called before begin_processing()", (uint64_t)&v44);
    std::logic_error::logic_error((std::logic_error *)v50, &v44);
    *(void *)std::string::size_type v50 = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)buf, (const std::logic_error *)v50);
    long long v61 = 0uLL;
    *(void *)&long long v62 = 0;
    DWORD2(v62) = -1;
    *(void *)std::string buf = &unk_1F1489CC8;
    *(void *)&buf[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)v65, (uint64_t)buf);
    *(void *)&v67[8] = "void AMCP::Graph::Manifest_Task::process_once(Object_ID, const IO_Proc_Cycle_Info &, const Mani"
                         "fest_Execution_Context &, uint64_t, Process_Once_Option)";
    *(void *)&v67[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Task.cpp";
    LODWORD(v68) = 249;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v41);
    *(_OWORD *)&v54[8] = v41;
    *(void *)uint64_t v54 = &unk_1F148AA90;
    uint64_t v55 = v42;
    long long v41 = 0uLL;
    uint64_t v42 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v8 = a4;
  memset(v40, 0, sizeof(v40));
  __int16 v37 = 0;
  double v38 = 0;
  uint64_t v39 = 0;
  AMCP::Graph::Manifest_Task::set_up_connections((void *)a1, a4, (uint64_t)v40, (uint64_t)&v37);
  if (a6 == 1)
  {
    uint64_t v36 = v8;
    int v12 = v38;
    if (v37 != v38)
    {
      uint64_t v13 = v37 + 5;
      do
      {
        AMCP::DAL::DAL_Timed_Segment::get_format((AMCP::DAL::DAL_Timed_Segment *)buf, v13[5]);
        uint64_t v14 = *(v13 - 1);
        *(void *)&long long v47 = *(v13 - 2);
        *((void *)&v47 + 1) = v14;
        if (v14) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::Fixed_Buffer::Fixed_Buffer(v65, (uint64_t)buf, &v47, 4096.0);
        if (*((void *)&v47 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v47 + 1));
        }
        LODWORD(v44.__r_.__value_.__l.__data_) = a2;
        *(_OWORD *)&v44.__r_.__value_.__r.__words[1] = 0u;
        long long v45 = 0u;
        int v46 = 0;
        AMCP::DAL::Fixed_Buffer::set_range((AMCP::DAL::Fixed_Buffer *)v65, (const AMCP::DAL::DAL_Time_Range *)(v13 - 5));
        v15.n128_f64[0] = AMCP::DAL::DAL_Time::operator-((uint64_t)&v41, (AMCP::DAL::DAL_Time *)v13, (AMCP::DAL::DAL_Time *)(v13 - 5));
        if ((v41 & 2) == 0) {
          AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v41);
        }
        double v16 = *((double *)&v41 + 1);
        double v17 = v71;
        if (v71) {
          double v17 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, __n128))(*(void *)v71 + 48))(v71, v15);
        }
        else {
          double v18 = 0.0;
        }
        if (round(v18) < round(v16))
        {
          AMCP::Log::Scope_Registry::get(v17);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v28 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
          {
            uint64_t v29 = pthread_self();
            mach_port_t v30 = pthread_mach_thread_np(v29);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v30;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "Fixed_Buffer.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&unsigned char buf[20] = 197;
            LOWORD(v61) = 2080;
            *(void *)((char *)&v61 + 2) = "not (number_of_frames <= get_capacity())";
            _os_log_error_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid size in change_size", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Invalid size in change_size", (uint64_t)&v52);
          std::logic_error::logic_error(&v53, &v52);
          v53.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)v54, &v53);
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          int v58 = -1;
          *(void *)uint64_t v54 = &unk_1F1489CC8;
          *(void *)&v54[16] = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)v54);
          *((void *)&v61 + 1) = "void AMCP::DAL::Fixed_Buffer::change_size(Sample_Time)";
          *(void *)&long long v62 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Fixed_Buffer.cpp";
          DWORD2(v62) = 197;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v48);
          *(_OWORD *)&v50[8] = v48;
          uint64_t v31 = v49;
          uint64_t v49 = 0;
          *(void *)std::string::size_type v50 = &unk_1F148AA90;
          uint64_t v51 = v31;
          long long v48 = 0uLL;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v66);
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v68);
        double v20 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v66);
        AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v68);
        *(_OWORD *)uint64_t v54 = *(_OWORD *)&v67[8];
        if (*(void *)&v67[16]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v67[16] + 8), 1uLL, memory_order_relaxed);
        }
        AMCP::DAL::DAL_Time_Range::DAL_Time_Range((uint64_t)buf, (uint64_t *)v54, sample_time, v16 + v20);
        long long v66 = *(_OWORD *)buf;
        *(void *)unint64_t v67 = *(void *)&buf[16];
        long long v21 = v61;
        long long v61 = 0uLL;
        uint64_t v22 = *(std::__shared_weak_count **)&v67[16];
        *(_OWORD *)&v67[8] = v21;
        if (v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v22);
        }
        long long v68 = v62;
        uint64_t v69 = v63;
        long long v23 = v64;
        long long v64 = 0uLL;
        uint64_t v24 = (std::__shared_weak_count *)*((void *)&v70 + 1);
        long long v70 = v23;
        if (v24)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          if (*((void *)&v64 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
          }
        }
        if (*((void *)&v61 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
        }
        if (*(void *)&v54[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v54[8]);
        }
        if (v43) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v43);
        }
        AMCP::DAL::Fixed_Buffer::create_readable_range((AMCP::DAL::Fixed_Buffer *)v65, (uint64_t)buf);
        AMCP::DAL::Writable_Range::receive_data((uint64_t)(v13 - 5), (int)&v44, (AMCP::DAL::DAL_Time *)buf);
        if (*((void *)&v64 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v64 + 1));
        }
        if (*((void *)&v61 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v61 + 1));
        }
        if (SBYTE7(v45) < 0) {
          operator delete((void *)v44.__r_.__value_.__l.__size_);
        }
        *(void *)int v65 = &unk_1F1487FC0;
        if (v72) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v72);
        }
        if (*((void *)&v70 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
        }
        if (*(void *)&v67[16]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v67[16]);
        }
        int v25 = v13 + 6;
        v13 += 11;
      }
      while (v25 != v12);
    }
    uint64_t v8 = v36;
  }
  else
  {
    uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 24);
    if (v26)
    {
      *(_DWORD *)int v65 = a2;
      (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t *, uint64_t **))(*(void *)v26 + 48))(v26, v65, a3, v40, &v37);
    }
  }
  if (!*(unsigned char *)(v8 + 113) && mach_absolute_time() >= a5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, (const std::string *)(a1 + 64));
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1F1461820;
  }
  AMCP::Graph::Manifest_Task::update_connection_write_positions((AMCP::Log::Scope_Registry *)a1, a2, v40, &v37);
  *(void *)int v65 = &v37;
  std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v65);
  *(void *)int v65 = v40;
  return std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)v65);
}

void sub_1BAB915D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  __cxa_free_exception(v45);
  a45 = (uint64_t)&a13;
  std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a45);
  a45 = (uint64_t)&a16;
  std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a45);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Writable_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  uint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    uint64_t v3 = (caulk::rt_safe_memory_resource ***)result;
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    unint64_t v6 = v1;
    if ((caulk::rt_safe_memory_resource *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range,0>(v4);
      }
      while ((caulk::rt_safe_memory_resource *)v4 != v2);
      unint64_t v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((v6[2] - v5) >> 3);
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Writable_Range>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Readable_Range,caulk::rt_allocator<AMCP::DAL::Readable_Range>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  uint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    uint64_t v3 = (caulk::rt_safe_memory_resource ***)result;
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **(caulk::rt_safe_memory_resource ***)result;
    unint64_t v6 = v1;
    if ((caulk::rt_safe_memory_resource *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::__destroy_at[abi:ne180100]<AMCP::DAL::Writable_Range,0>(v4);
      }
      while ((caulk::rt_safe_memory_resource *)v4 != v2);
      unint64_t v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((v6[2] - v5) >> 3);
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Readable_Range>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

void AMCP::DAL::DAL_Timed_Segment::get_format(AMCP::DAL::DAL_Timed_Segment *this, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a2 + 56))(&v5, a2);
  uint64_t v3 = v5;
  if (v5)
  {
    long long v4 = *(_OWORD *)(v5 + 24);
    *(_OWORD *)this = *(_OWORD *)(v5 + 8);
    *((_OWORD *)this + 1) = v4;
    *((void *)this + 4) = *(void *)(v3 + 40);
  }
  else
  {
    *((void *)this + 4) = 0;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void AMCP::DAL::Fixed_Buffer::~Fixed_Buffer(AMCP::DAL::Fixed_Buffer *this)
{
  *(void *)this = &unk_1F1487FC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_1F1487FC0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  long long v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

double AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(AMCP::Graph::Manifest_Task *this, AMCP::Graph::Manifest_Task *a2)
{
  if (this == a2) {
    return 4294967300.0;
  }
  uint64_t v3 = this;
  double v4 = 4294967300.0;
  do
  {
    uint64_t v5 = *(void *)v3;
    uint64_t v6 = *((void *)v3 + 1);
    while (v5 != v6)
    {
      unint64_t v7 = *(void **)v5;
      long long v20 = *(_OWORD *)(*(void *)v5 + 208);
      uint64_t v8 = v7[29];
      uint64_t v21 = v7[28];
      uint64_t v22 = v8;
      uint64_t v9 = (std::__shared_weak_count *)v7[30];
      long long v23 = v9;
      if (v9) {
        atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v20);
      uint64_t v11 = *(void **)v5;
      long long v16 = *(_OWORD *)(*(void *)v5 + 168);
      uint64_t v12 = v11[24];
      uint64_t v17 = v11[23];
      uint64_t v18 = v12;
      uint64_t v13 = (std::__shared_weak_count *)v11[25];
      uint64_t v19 = v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      double v14 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v16);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
      if (round(sample_time - v14) < round(v4)) {
        double v4 = sample_time - v14;
      }
      v5 += 16;
    }
    uint64_t v3 = (AMCP::Graph::Manifest_Task *)((char *)v3 + 40);
  }
  while (v3 != a2);
  return v4;
}

void sub_1BAB91ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::Packetized_File_Handler::get_name(AMCP::DAL::Packetized_File_Handler *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 7), *((void *)this + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 56);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 9);
  }
}

__n128 AMCP::DAL::Packetized_File_Handler::get_format@<Q0>(AMCP::DAL::Packetized_File_Handler *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result = *(__n128 *)((char *)this + 8);
  long long v3 = *(_OWORD *)((char *)this + 24);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  *(void *)(a2 + 32) = *((void *)this + 5);
  return result;
}

OpaqueExtAudioFile *AMCP::DAL::Packetized_File_Reader::close(AMCP::DAL::Packetized_File_Reader *this)
{
  __n128 result = (OpaqueExtAudioFile *)*((void *)this + 6);
  if (result)
  {
    __n128 result = (OpaqueExtAudioFile *)ExtAudioFileDispose(result);
    *((void *)this + 6) = 0;
  }
  return result;
}

caulk::rt_safe_memory_resource *AMCP::DAL::Packetized_File_Reader::read_data@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v114 = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a1 + 48))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v74 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
    {
      uint64_t v75 = pthread_self();
      mach_port_t v76 = pthread_mach_thread_np(v75);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v76;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 214;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (m_audio_File != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v74, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Read: m_audio_File is null", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Reader::Read: m_audio_File is null", (uint64_t)&ioData);
    std::logic_error::logic_error((std::logic_error *)&v85, &ioData);
    v85.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
    std::logic_error::logic_error((std::logic_error *)__p, (const std::logic_error *)&v85);
    *(void *)&__p[24] = 0;
    *(void *)&__p[32] = 0;
    uint64_t v102 = 0;
    int v103 = -1;
    *(void *)std::string __p = &unk_1F1489CC8;
    *(void *)&__p[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)__p);
    *(void *)&buf[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings &, co"
                          "nst Writable_Range &) const";
    *(void *)&long long v107 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    DWORD2(v107) = 214;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v94);
    std::logic_error v96 = *(std::logic_error *)v94;
    mach_port_t v95 = &unk_1F148AA90;
    __int32 v97 = *(void ***)&v94[16];
    memset(v94, 0, 24);
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  (*(void (**)(unsigned char *__return_ptr))(*(void *)a1 + 40))(buf);
  unsigned int v6 = *(_DWORD *)&buf[20];
  AMCP::DAL::Writable_Range::get_direct_write_ranges((AMCP::DAL::Writable_Range *)&v91, a2);
  uint64_t v7 = v91;
  uint64_t v79 = v92;
  if (v91 == v92) {
    goto LABEL_67;
  }
  int v77 = a3;
  int v8 = 0;
  uint64_t v9 = v92;
  unsigned int v78 = v6;
  do
  {
    long long v10 = *(_OWORD *)(v7 + 16);
    *(_OWORD *)std::string buf = *(_OWORD *)v7;
    uint64_t v11 = *(void *)(v7 + 40);
    *(void *)&buf[32] = *(void *)(v7 + 32);
    *(_OWORD *)&buf[16] = v10;
    uint64_t v12 = *(void *)(v7 + 48);
    *(void *)&long long v107 = v11;
    *((void *)&v107 + 1) = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    long long v13 = *(_OWORD *)(v7 + 56);
    uint64_t v14 = *(void *)(v7 + 80);
    std::string v109 = *(std::__shared_weak_count **)(v7 + 72);
    long long v108 = v13;
    __n128 v15 = *(std::__shared_weak_count **)(v7 + 88);
    uint64_t v110 = v14;
    std::string v111 = v15;
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v16 = *(std::__shared_weak_count **)(v7 + 104);
    uint64_t v112 = *(void *)(v7 + 96);
    std::vector<unsigned int> v113 = v16;
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    double v18 = *(double *)buf;
    double v17 = *(double *)&buf[8];
    unint64_t v19 = *(void *)(a1 + 136) - *(void *)(a1 + 128);
    if (v19)
    {
      ioData.__r_.__value_.__r.__words[0] = 0;
      *((void *)&v105 + 1) = 0;
      long long v20 = AMCP::Utility::AudioBufferList_Create((AMCP::Utility *)(-1431655765 * (v19 >> 3)));
      mach_port_t v95 = &unk_1F1489E50;
      __int32 v97 = &v95;
      *(void *)std::string __p = v20;
      std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&__p[8], (uint64_t)&v95);
      std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&v95);
      std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100]((uint64_t *)&ioData, (uint64_t *)__p);
      std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)__p, 0);
      std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&__p[8]);
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      unint64_t v23 = 0;
      int v24 = *(_DWORD *)(a1 + 20);
      if ((v24 & 0x20) != 0)
      {
LABEL_12:
        if (v23 < *(unsigned int *)(a1 + 36))
        {
          int v25 = 1;
          goto LABEL_16;
        }
      }
      else
      {
        while (!v23)
        {
          int v25 = *(_DWORD *)(a1 + 36);
LABEL_16:
          std::string::size_type v26 = ioData.__r_.__value_.__r.__words[0] + v22;
          *(_DWORD *)(v26 + 8) = v25;
          mach_port_t v27 = (void *)(*(void *)(a1 + 128) + v21);
          *(_DWORD *)(v26 + 12) = v27[1];
          *(void *)(v26 + 16) = *v27;
          ++v23;
          v22 += 16;
          v21 += 24;
          if ((v24 & 0x20) != 0) {
            goto LABEL_12;
          }
        }
      }
    }
    else
    {
      AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list((AMCP::DAL::Writable_Range::Direct_Write_Range *)&ioData, v112, v113);
    }
    UInt32 v28 = vcvtmd_s64_f64(v17 - v18) / v6;
    UInt32 ioNumberFrames = v28;
    uint64_t v29 = (AMCP::Log::Scope_Registry *)ExtAudioFileRead(*(ExtAudioFileRef *)(a1 + 48), &ioNumberFrames, (AudioBufferList *)ioData.__r_.__value_.__l.__data_);
    if (v29)
    {
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
      long long v62 = **(NSObject ***)__p;
      if (*(void *)&__p[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
      }
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        uint64_t v63 = pthread_self();
        mach_port_t v64 = pthread_mach_thread_np(v63);
        *(_DWORD *)std::string __p = 67109890;
        *(_DWORD *)&__p[4] = v64;
        *(_WORD *)&__p[8] = 2080;
        *(void *)&__p[10] = "Packetized_File_Reader.cpp";
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = 227;
        *(_WORD *)&__p[24] = 2080;
        *(void *)&__p[26] = "not (the_error == noErr)";
        _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: reading the data failed", __p, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v87);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Packetized_File_Reader::Packetized_File_Reader: reading the data failed", (uint64_t)&v85);
      std::logic_error::logic_error(&v83, &v85);
      v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&v95, &v83);
      __int32 v97 = 0;
      uint64_t v98 = 0;
      uint64_t v99 = 0;
      int v100 = -1;
      mach_port_t v95 = &unk_1F1489CC8;
      v96.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v95);
      *(void *)&__p[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings &, "
                            "const Writable_Range &) const";
      uint64_t v102 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
      int v103 = 227;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v89.__r_.__value_.__l.__data_);
      *(std::string *)&v94[8] = v89;
      *(void *)std::vector<unsigned int>::pointer v94 = &unk_1F148AA90;
      memset(&v89, 0, sizeof(v89));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (ioNumberFrames)
    {
      int v30 = *(_DWORD *)(a1 + 16);
      int v31 = *(_DWORD *)(a1 + 96);
      if (v30 == v31)
      {
        uint64_t v32 = v112;
        uint64_t v33 = v113;
        if (v113) {
          atomic_fetch_add_explicit(&v113->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v32) {
          (*(void (**)(uint64_t, std::string *))(*(void *)v32 + 72))(v32, &ioData);
        }
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
      }
      else
      {
        if (v30 != 1667326771 || v31 != 1633889587)
        {
          AMCP::Log::Scope_Registry::get(v29);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          BOOL v71 = **(NSObject ***)__p;
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
          {
            mach_port_t v72 = pthread_self();
            mach_port_t v73 = pthread_mach_thread_np(v72);
            *(_DWORD *)std::string __p = 67109890;
            *(_DWORD *)&__p[4] = v73;
            *(_WORD *)&__p[8] = 2080;
            *(void *)&__p[10] = "Packetized_File_Reader.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 234;
            *(_WORD *)&__p[24] = 2080;
            *(void *)&__p[26] = "not (m_format.mFormatID == kAudioFormat60958AC3 && m_file_format.mFormatID == kAudioFormatAC3)";
            _os_log_error_impl(&dword_1BAA78000, v71, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Incorrect client format", __p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v87);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Incorrect client format", (uint64_t)&v85);
          std::logic_error::logic_error(&v83, &v85);
          v83.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v95, &v83);
          __int32 v97 = 0;
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          int v100 = -1;
          mach_port_t v95 = &unk_1F1489CC8;
          v96.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v95);
          *(void *)&__p[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings"
                                " &, const Writable_Range &) const";
          uint64_t v102 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
          int v103 = 234;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v89.__r_.__value_.__l.__data_);
          *(std::string *)&v94[8] = v89;
          *(void *)std::vector<unsigned int>::pointer v94 = &unk_1F148AA90;
          memset(&v89, 0, sizeof(v89));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        uint64_t v34 = a2;
        std::string::size_type v35 = ioData.__r_.__value_.__r.__words[0];
        AMCP::DAL::Writable_Range::Direct_Write_Range::get_audio_buffer_list((AMCP::DAL::Writable_Range::Direct_Write_Range *)v94, v112, v113);
        unsigned int v37 = *(_DWORD *)(*(void *)v94 + 12);
        uint64_t v38 = *(unsigned int *)(a1 + 24);
        if (v37 < v38) {
          goto LABEL_93;
        }
        uint64_t v39 = *(unsigned int *)(v35 + 12);
        if (v37 < v39) {
          goto LABEL_93;
        }
        int v40 = *(_DWORD *)(a1 + 96);
        long long v41 = *(unsigned __int16 **)(v35 + 16);
        if (v40 == 1667326771) {
          size_t v42 = v39 - 8;
        }
        else {
          size_t v42 = *(unsigned int *)(v35 + 12);
        }
        int v43 = v41[4 * (v40 == 1667326771)];
        if (v43 != 2935 && v43 != 30475)
        {
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          int v65 = **(NSObject ***)__p;
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          BOOL v36 = os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
          if (v36)
          {
            long long v66 = pthread_self();
            mach_port_t v67 = pthread_mach_thread_np(v66);
            *(_DWORD *)std::string __p = 67109634;
            *(_DWORD *)&__p[4] = v67;
            *(_WORD *)&__p[8] = 2080;
            *(void *)&__p[10] = "Packetized_File_Reader.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 72;
            _os_log_error_impl(&dword_1BAA78000, v65, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d convert_ac3_to_cac3: missing sync word", __p, 0x18u);
          }
LABEL_93:
          AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v36);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
          long long v68 = **(NSObject ***)__p;
          if (*(void *)&__p[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
          }
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            uint64_t v69 = pthread_self();
            mach_port_t v70 = pthread_mach_thread_np(v69);
            *(_DWORD *)std::string __p = 67109890;
            *(_DWORD *)&__p[4] = v70;
            *(_WORD *)&__p[8] = 2080;
            *(void *)&__p[10] = "Packetized_File_Reader.cpp";
            *(_WORD *)&__p[18] = 1024;
            *(_DWORD *)&__p[20] = 240;
            *(_WORD *)&__p[24] = 2080;
            *(void *)&__p[26] = "not (the_error == noErr)";
            _os_log_error_impl(&dword_1BAA78000, v68, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to convert ac3 to cac3", __p, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"Failed to convert ac3 to cac3", (uint64_t)&v89);
          std::logic_error::logic_error(&v87, &v89);
          v87.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error((std::logic_error *)&v95, &v87);
          __int32 v97 = 0;
          uint64_t v98 = 0;
          uint64_t v99 = 0;
          int v100 = -1;
          mach_port_t v95 = &unk_1F1489CC8;
          v96.__imp_.__imp_ = (const char *)&unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)&v95);
          *(void *)&__p[32] = "virtual File_Read_Result AMCP::DAL::Packetized_File_Reader::read_data(const DAL_Settings"
                                " &, const Writable_Range &) const";
          uint64_t v102 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
          int v103 = 240;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v83);
          *(std::logic_error *)&v85.__r_.__value_.__r.__words[1] = v83;
          uint64_t v86 = v84;
          v83.__vftable = 0;
          v83.__imp_.__imp_ = 0;
          uint64_t v84 = 0;
          v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        int v45 = *(_DWORD *)(a1 + 16);
        uint64_t v46 = *(void *)(*(void *)v94 + 16);
        if (v40 == 1633889587 && v45 == 1667326771)
        {
          unsigned __int16 v47 = v41[2];
          if (v43 == 30475) {
            LOBYTE(v47) = HIBYTE(v41[2]);
          }
          *(_DWORD *)uint64_t v46 = 1310718066;
          *(_WORD *)(v46 + 4) = ((v47 & 7) << 8) | 1;
          *(_WORD *)(v46 + 6) = 8 * v42;
          long long v48 = (_WORD *)(v46 + 8);
        }
        else
        {
          long long v48 = *(_WORD **)(*(void *)v94 + 16);
        }
        if (v43 == 30475)
        {
          if (v42 >= 2)
          {
            size_t v49 = v42 >> 1;
            std::string::size_type v50 = v48;
            do
            {
              unsigned int v51 = *v41++;
              *v50++ = bswap32(v51) >> 16;
              --v49;
            }
            while (v49);
          }
        }
        else
        {
          memcpy(v48, v41, v42);
        }
        if (v45 == 1667326771) {
          bzero((char *)v48 + (v42 & 0xFFFFFFFFFFFFFFFELL), v46 - ((void)v48 + (v42 & 0xFFFFFFFFFFFFFFFELL)) + v38);
        }
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)v94, 0);
        std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&v94[8]);
        a2 = v34;
        unsigned int v6 = v78;
        uint64_t v9 = v79;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v81, "packetized_file_reader_node");
    uint64_t v52 = v81;
    v93[0] = v82;
    *(void *)((char *)v93 + 7) = *(void *)((char *)&v82 + 7);
    char v53 = HIBYTE(v82);
    uint64_t v81 = 0;
    long long v82 = 0uLL;
    *(_DWORD *)std::string __p = 0;
    *(void *)&__p[8] = v52;
    *(void *)&__p[16] = v93[0];
    *(void *)&__p[23] = *(void *)((char *)v93 + 7);
    __p[31] = v53;
    v93[0] = 0;
    *(void *)((char *)v93 + 7) = 0;
    *(void *)&__p[32] = 0;
    LODWORD(v102) = 0;
    AMCP::DAL::Writable_Range::commit_direct_write(*(void *)(a2 + 80), (uint64_t)__p, (uint64_t)buf);
    if ((__p[31] & 0x80000000) != 0) {
      operator delete(*(void **)&__p[8]);
    }
    std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&ioData, 0);
    std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&ioData.__r_.__value_.__l.__size_);
    if (v113) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v113);
    }
    if (v111) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v111);
    }
    if (*((void *)&v107 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v107 + 1));
    }
    v8 += v28;
    v7 += 112;
  }
  while (v7 != v9);
  a3 = v77;
  if (!v8)
  {
LABEL_67:
    *a3 = 0;
    a3[80] = 0;
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    unint64_t v54 = *(void *)(a2 + 24);
    *(void *)&__p[16] = *(void *)(a2 + 16);
    *(void *)&__p[24] = v54;
    uint64_t v55 = *(std::__shared_weak_count **)(a2 + 32);
    *(void *)&__p[32] = v55;
    if (v55)
    {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
      *(void *)&long long v80 = v54;
      *((void *)&v80 + 1) = v55;
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v80 = v54;
    }
    LODWORD(ioData.__r_.__value_.__l.__data_) = 2;
    *(double *)&ioData.__r_.__value_.__l.__size_ = (double)(v8 * v6);
    ioData.__r_.__value_.__r.__words[2] = 0;
    long long v105 = v80;
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v95, (uint64_t)__p, (uint64_t)&ioData);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)buf, (const AMCP::DAL::DAL_Time *)__p, (const AMCP::DAL::DAL_Time *)&v95);
    if (v98) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v98);
    }
    if (*((void *)&v105 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v105 + 1));
    }
    *(_OWORD *)int v77 = *(_OWORD *)buf;
    uint64_t v56 = *(void *)&buf[24];
    *((void *)v77 + 2) = *(void *)&buf[16];
    *((void *)v77 + 3) = v56;
    uint64_t v57 = *(void *)&buf[32];
    *((void *)v77 + 4) = *(void *)&buf[32];
    if (v57) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
    }
    *(_OWORD *)(v77 + 40) = v107;
    uint64_t v58 = *((void *)&v108 + 1);
    *((void *)v77 + 7) = v108;
    *((void *)v77 + 8) = v58;
    char v59 = v109;
    *((void *)v77 + 9) = v109;
    if (v59)
    {
      atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v60 = v109;
      v77[80] = 1;
      if (v60) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
    }
    else
    {
      v77[80] = 1;
    }
    if (*(void *)&buf[32]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[32]);
    }
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
  }
  *(void *)std::string buf = &v91;
  return std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
}

void sub_1BAB92AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *__p,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&a66, 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](v66);
  uint64_t v69 = *(std::__shared_weak_count **)(v67 - 136);
  if (v69) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
  }
  mach_port_t v70 = *(std::__shared_weak_count **)(v67 - 152);
  if (v70) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v70);
  }
  BOOL v71 = *(std::__shared_weak_count **)(v67 - 192);
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  *(void *)(v67 - 240) = &a40;
  std::vector<AMCP::DAL::Writable_Range::Direct_Write_Range,caulk::rt_allocator<AMCP::DAL::Writable_Range::Direct_Write_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)(v67 - 240));
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  *long long v3 = 0;
  return a1;
}

uint64_t *std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a2 = 0;
  uint64_t v5 = a2 + 1;
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100](a1, v4);
  uint64_t v7 = (uint64_t **)(a1 + 4);
  unsigned int v6 = (uint64_t *)a1[4];
  int v8 = a1 + 1;
  a1[4] = 0;
  if (v6 == a1 + 1)
  {
    (*(void (**)(uint64_t *))(*v8 + 32))(a1 + 1);
  }
  else if (v6)
  {
    (*(void (**)(uint64_t *))(*v6 + 40))(v6);
  }
  uint64_t v11 = a2[4];
  long long v10 = a2 + 4;
  uint64_t v9 = (uint64_t *)v11;
  if (v11)
  {
    if (v9 == v5)
    {
      *uint64_t v7 = v8;
      (*(void (**)(void, uint64_t *))(*(void *)*v10 + 24))(*v10, a1 + 1);
      return a1;
    }
    *uint64_t v7 = v9;
  }
  else
  {
    long long v10 = a1 + 4;
  }
  void *v10 = 0;
  return a1;
}

void *std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7Utility10create_ablEjEUlP15AudioBufferListE_"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

caulk::rt_safe_memory_resource *std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::operator()(uint64_t a1, void **a2)
{
  __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
  if (*MEMORY[0x1E4FB7E88]) {
    return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, *a2);
  }
  __break(1u);
  return result;
}

void std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1489E50;
}

void *std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1489E50;
  return result;
}

void std::__function::__func<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1},std::allocator<AMCP::Utility::create_abl(unsigned int)::{lambda(AudioBufferList *)#1}>,void ()(AudioBufferList *)>::~__func()
{
}

void AMCP::DAL::Packetized_File_Reader::~Packetized_File_Reader(AMCP::DAL::Packetized_File_Reader *this)
{
  AMCP::DAL::Packetized_File_Reader::~Packetized_File_Reader(this);

  JUMPOUT(0x1C1859840);
}

{
  OpaqueExtAudioFile *v2;
  char *v3;

  *(void *)this = &unk_1F1461848;
  uint64_t v2 = (OpaqueExtAudioFile *)*((void *)this + 6);
  if (v2)
  {
    ExtAudioFileDispose(v2);
    *((void *)this + 6) = 0;
  }
  long long v3 = (char *)this + 128;
  std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v3);
  *(void *)this = &unk_1F1477918;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
}

caulk::rt_safe_memory_resource *std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::__destroy_vector::operator()[abi:ne180100](caulk::rt_safe_memory_resource *result)
{
  uint64_t v1 = *(caulk::rt_safe_memory_resource ***)result;
  uint64_t v2 = **(caulk::rt_safe_memory_resource ***)result;
  if (v2)
  {
    long long v3 = (caulk::rt_safe_memory_resource ***)result;
    uint64_t v4 = v1[1];
    uint64_t v5 = v2;
    unsigned int v6 = v1;
    if (v4 != v2)
    {
      do
        AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((caulk::rt_safe_memory_resource *)((char *)v4 - 24));
      while (v4 != v2);
      unsigned int v6 = *v3;
      uint64_t v5 = **v3;
    }
    v1[1] = v2;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6[2] - v5) >> 3);
    return std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::deallocate[abi:ne180100](v5, v7);
  }
  return result;
}

caulk::rt_safe_memory_resource *std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::deallocate[abi:ne180100](caulk::rt_safe_memory_resource *result, unint64_t a2)
{
  if (a2 < 0xAAAAAAAAAAAAAABLL)
  {
    uint64_t v2 = result;
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_deallocate(result, v2);
    }
  }
  __break(1u);
  return result;
}

void std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (AMCP::DAL::Audio_Samples_Data *)a1[1];
  unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v4 - *a1) >> 3);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      uint64_t v21 = (AMCP::DAL::Audio_Samples_Data *)(v3 + 24 * a2);
      while (v4 != v21)
      {
        uint64_t v4 = (AMCP::DAL::Audio_Samples_Data *)((char *)v4 - 24);
        AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data(v4);
      }
      a1[1] = (uint64_t)v21;
    }
  }
  else
  {
    uint64_t v7 = a1[2];
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)v4) >> 3) >= v6)
    {
      size_t v22 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero((void *)a1[1], v22);
      a1[1] = (uint64_t)v4 + v22;
    }
    else
    {
      if (a2 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      mach_port_t v27 = a1 + 2;
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v3) >> 3);
      uint64_t v9 = 2 * v8;
      if (2 * v8 <= a2) {
        uint64_t v9 = a2;
      }
      if (v8 >= 0x555555555555555) {
        uint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        uint64_t v10 = v9;
      }
      uint64_t v11 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>((caulk::rt_safe_memory_resource *)v10);
      uint64_t v12 = (char *)v11 + 24 * v5;
      uint64_t v14 = (char *)v11 + 24 * v13;
      size_t v15 = 24 * ((24 * v6 - 24) / 0x18) + 24;
      bzero(v12, v15);
      long long v16 = &v12[v15];
      uint64_t v18 = *a1;
      unint64_t v17 = a1[1];
      if (v17 == *a1)
      {
        int64x2_t v20 = vdupq_n_s64(v17);
      }
      else
      {
        do
        {
          long long v19 = *(_OWORD *)(v17 - 24);
          *((void *)v12 - 1) = *(void *)(v17 - 8);
          *(_OWORD *)(v12 - 24) = v19;
          v12 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        int64x2_t v20 = *(int64x2_t *)a1;
      }
      *a1 = (uint64_t)v12;
      a1[1] = (uint64_t)v16;
      int64x2_t v25 = v20;
      uint64_t v23 = a1[2];
      a1[2] = (uint64_t)v14;
      uint64_t v26 = v23;
      uint64_t v24 = v20.i64[0];
      std::__split_buffer<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data> &>::~__split_buffer((uint64_t)&v24);
    }
  }
}

caulk::rt_safe_memory_resource *std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>(caulk::rt_safe_memory_resource *result)
{
  if ((unint64_t)result < 0xAAAAAAAAAAAAAABLL)
  {
    __n128 result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
    if (*MEMORY[0x1E4FB7E88]) {
      return (caulk::rt_safe_memory_resource *)caulk::rt_safe_memory_resource::rt_allocate(result);
    }
  }
  __break(1u);
  return result;
}

uint64_t std::__split_buffer<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data> &>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 24;
    AMCP::DAL::Audio_Samples_Data::~Audio_Samples_Data((AMCP::DAL::Audio_Samples_Data *)(i - 24));
  }
  if (*(void *)a1) {
    std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::deallocate[abi:ne180100](*(caulk::rt_safe_memory_resource **)a1, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24) - *(void *)a1) >> 3));
  }
  return a1;
}

uint64_t AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(uint64_t a1, void *a2)
{
  uint64_t v88 = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1F1477918;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v4 = a1 + 8;
  *(_OWORD *)(a1 + 56) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  unint64_t v6 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  uint64_t v7 = v6;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v7) {
      goto LABEL_12;
    }
  }
  else if (!v6)
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  unint64_t v8 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v8) {
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf, (uint64_t)(v8 + 40));
  }
  else {
    cf.__vftable = 0;
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  dictionary_to_asbd((const applesauce::CF::DictionaryRef *)buf, (const __CFDictionary **)&cf);
  long long v9 = *(_OWORD *)&buf[16];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
  *(_OWORD *)(v4 + 16) = v9;
  *(void *)(v4 + 32) = *(void *)&buf[32];
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
LABEL_12:
  *(void *)a1 = &unk_1F1461848;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&cf, "name");
  std::string::basic_string[abi:ne180100]<0>(&v80, "");
  AMCP::DAL::DAL_Settings::at_or<std::string>((std::string *)buf, a2, (unsigned __int8 *)&cf, (__n128 *)&v80);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)v5);
  }
  *(_OWORD *)uint64_t v5 = *(_OWORD *)buf;
  *(void *)(v5 + 16) = *(void *)&buf[16];
  if ((v81[15] & 0x80000000) != 0) {
    operator delete(v80);
  }
  if (SBYTE7(v72) < 0) {
    operator delete(cf.__vftable);
  }
  if (*(char *)(a1 + 79) < 0)
  {
    uint64_t v11 = *(const UInt8 **)(a1 + 56);
    CFIndex v10 = *(void *)(a1 + 64);
  }
  else
  {
    CFIndex v10 = *(unsigned __int8 *)(a1 + 79);
    uint64_t v11 = (const UInt8 *)v5;
  }
  CFURLRef v12 = CFURLCreateFromFileSystemRepresentation(0, v11, v10, 0);
  CFURLRef v13 = v12;
  if (!v12)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v34 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      std::string::size_type v35 = pthread_self();
      mach_port_t v36 = pthread_mach_thread_np(v35);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v36;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 139;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not ((theURL) != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v34, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: failed to make a URL for the path", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&ioPropertyDataSize);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Packetized_File_Reader::Packetized_File_Reader: failed to make a URL for the path", (uint64_t)&v69);
    std::logic_error::logic_error(&v82, &v69);
    v82.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&cf, &v82);
    *((void *)&v72 + 1) = 0;
    mach_port_t v73 = 0;
    uint64_t v74 = 0;
    LODWORD(v75) = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
    *(void *)&long long v72 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    *(void *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    LODWORD(v85) = 139;
    std::vector<void *>::vector(&v78);
    int v37 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
    std::vector<void *>::resize((char **)&v78, v37);
    long long v80 = &unk_1F148AA90;
    *(_OWORD *)uint64_t v81 = v78;
    *(void *)&v81[16] = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v14 = (ExtAudioFileRef *)(a1 + 48);
  size_t v15 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileOpenURL(v12, (ExtAudioFileRef *)(a1 + 48));
  unsigned int v16 = v15;
  AMCP::Utility::OSStatus_Error_Category::get(v15);
  CFRelease(v13);
  if (v16)
  {
    AMCP::Log::Scope_Registry::get(v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v38 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      uint64_t v39 = pthread_self();
      mach_port_t v40 = pthread_mach_thread_np(v39);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v40;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 142;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v38, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: got an error opening the file", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v82);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v80, v16, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&cf, (const std::runtime_error *)&v80);
    long long v72 = *(_OWORD *)&v81[8];
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    int v77 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489DB8;
    mach_port_t v73 = &unk_1F1489DE0;
    uint64_t v74 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    std::string v85 = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    uint64_t v86 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    int v87 = 142;
    std::vector<void *>::vector(&v78);
    int v41 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
    std::vector<void *>::resize((char **)&v78, v41);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&v69.__r_.__value_.__r.__words[1] = v78;
    uint64_t v70 = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  iouint64_t PropertyDataSize = 40;
  Property = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(*v14, 0x66666D74u, &ioPropertyDataSize, (void *)(a1 + 88));
  unsigned int v19 = Property;
  AMCP::Utility::OSStatus_Error_Category::get(Property);
  if (v19)
  {
    AMCP::Log::Scope_Registry::get(v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    size_t v42 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      int v43 = pthread_self();
      mach_port_t v44 = pthread_mach_thread_np(v43);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v44;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 150;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: couldn't get the file's format", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v82);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v80, v19, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&cf, (const std::runtime_error *)&v80);
    long long v72 = *(_OWORD *)&v81[8];
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    int v77 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489DB8;
    mach_port_t v73 = &unk_1F1489DE0;
    uint64_t v74 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    std::string v85 = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    uint64_t v86 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    int v87 = 150;
    std::vector<void *>::vector(&v78);
    int v45 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
    std::vector<void *>::resize((char **)&v78, v45);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&v69.__r_.__value_.__r.__words[1] = v78;
    uint64_t v70 = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  uint64_t v21 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  size_t v22 = v21;
  if ((buf[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (v22) {
      goto LABEL_26;
    }
LABEL_29:
    long long v24 = *(_OWORD *)(a1 + 104);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 88);
    *(_OWORD *)(v4 + 16) = v24;
    *(void *)(v4 + 32) = *(void *)(a1 + 120);
    goto LABEL_35;
  }
  if (!v21) {
    goto LABEL_29;
  }
LABEL_26:
  std::string::basic_string[abi:ne180100]<0>(buf, "asbd");
  uint64_t v23 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
  if (v23) {
    AMCP::Thing::convert_to<applesauce::CF::DictionaryRef>(&cf, (uint64_t)(v23 + 40));
  }
  else {
    cf.__vftable = 0;
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  dictionary_to_asbd((const applesauce::CF::DictionaryRef *)buf, (const __CFDictionary **)&cf);
  long long v25 = *(_OWORD *)&buf[16];
  *(_OWORD *)uint64_t v4 = *(_OWORD *)buf;
  *(_OWORD *)(v4 + 16) = v25;
  *(void *)(v4 + 32) = *(void *)&buf[32];
  uint64_t v21 = (AMCP::Log::Scope_Registry *)cf.__vftable;
  if (cf.__vftable) {
    CFRelease(cf.__vftable);
  }
LABEL_35:
  if (*(_DWORD *)(a1 + 104) && *(_DWORD *)(a1 + 108))
  {
    AMCP::Log::Scope_Registry::get(v21);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v54 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
    {
      uint64_t v55 = pthread_self();
      mach_port_t v56 = pthread_mach_thread_np(v55);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v56;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 163;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (isFormatVBR == true)";
      _os_log_error_impl(&dword_1BAA78000, v54, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format is not packetized!", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&outPropertyData);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format is not packetized!", (uint64_t)&v69);
    std::logic_error::logic_error(&v82, &v69);
    v82.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&cf, &v82);
    *((void *)&v72 + 1) = 0;
    mach_port_t v73 = 0;
    uint64_t v74 = 0;
    LODWORD(v75) = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
    *(void *)&long long v72 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    *(void *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    LODWORD(v85) = 163;
    std::vector<void *>::vector(&v78);
    int v57 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
    std::vector<void *>::resize((char **)&v78, v57);
    long long v80 = &unk_1F148AA90;
    *(_OWORD *)uint64_t v81 = v78;
    *(void *)&v81[16] = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unsigned int outPropertyData = 0;
  iouint64_t PropertyDataSize = 4;
  uint64_t v26 = (AMCP::Utility::OSStatus_Error_Category *)ExtAudioFileGetProperty(*v14, 0x666D7073u, &ioPropertyDataSize, &outPropertyData);
  unsigned int v27 = v26;
  AMCP::Utility::OSStatus_Error_Category::get(v26);
  if (v27)
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v46 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      unsigned __int16 v47 = pthread_self();
      mach_port_t v48 = pthread_mach_thread_np(v47);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v48;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 170;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "the_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v46, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Packetized_File_Reader::Packetized_File_Reader: couldn't get file's max packet size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v82);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](&v80, v27, &AMCP::Utility::OSStatus_Error_Category::get(void)::s_category);
    std::runtime_error::runtime_error(&cf, (const std::runtime_error *)&v80);
    long long v72 = *(_OWORD *)&v81[8];
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    int v77 = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489DB8;
    mach_port_t v73 = &unk_1F1489DE0;
    uint64_t v74 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    std::string v85 = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    uint64_t v86 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    int v87 = 170;
    std::vector<void *>::vector(&v78);
    int v49 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
    std::vector<void *>::resize((char **)&v78, v49);
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&v69.__r_.__value_.__r.__words[1] = v78;
    uint64_t v70 = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  if (!outPropertyData)
  {
    AMCP::Log::Scope_Registry::get(v28);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    std::string::size_type v50 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      unsigned int v51 = pthread_self();
      mach_port_t v52 = pthread_mach_thread_np(v51);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v52;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "Packetized_File_Reader.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&unsigned char buf[20] = 172;
      *(_WORD *)&unsigned char buf[24] = 2080;
      *(void *)&buf[26] = "not (max_packet_size != 0)";
      _os_log_error_impl(&dword_1BAA78000, v50, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s zero length file", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v66);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"zero length file", (uint64_t)&v69);
    std::logic_error::logic_error(&v82, &v69);
    v82.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&cf, &v82);
    *((void *)&v72 + 1) = 0;
    mach_port_t v73 = 0;
    uint64_t v74 = 0;
    LODWORD(v75) = -1;
    cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
    *(void *)&long long v72 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
    *(void *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
    uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
    LODWORD(v85) = 172;
    std::vector<void *>::vector(&v78);
    int v53 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
    std::vector<void *>::resize((char **)&v78, v53);
    long long v80 = &unk_1F148AA90;
    *(_OWORD *)uint64_t v81 = v78;
    *(void *)&v81[16] = v79;
    long long v78 = 0uLL;
    uint64_t v79 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  int v29 = *(_DWORD *)(a1 + 16);
  int v30 = *(_DWORD *)(a1 + 96);
  if (v29 != v30)
  {
    if (v29 != 1667326771 || v30 != 1633889587)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v58 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        char v59 = pthread_self();
        mach_port_t v60 = pthread_mach_thread_np(v59);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v60;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Packetized_File_Reader.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = 176;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = "not (m_format.mFormatID == kAudioFormat60958AC3 && m_file_format.mFormatID == kAudioFormatAC3)";
        _os_log_error_impl(&dword_1BAA78000, v58, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Incorrect client format", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v66);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Incorrect client format", (uint64_t)&v69);
      std::logic_error::logic_error(&v82, &v69);
      v82.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&cf, &v82);
      *((void *)&v72 + 1) = 0;
      mach_port_t v73 = 0;
      uint64_t v74 = 0;
      LODWORD(v75) = -1;
      cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
      *(void *)&long long v72 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
      *(void *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
      uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
      LODWORD(v85) = 176;
      std::vector<void *>::vector(&v78);
      int v61 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
      std::vector<void *>::resize((char **)&v78, v61);
      long long v80 = &unk_1F148AA90;
      *(_OWORD *)uint64_t v81 = v78;
      *(void *)&v81[16] = v79;
      long long v78 = 0uLL;
      uint64_t v79 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if ((*(unsigned char *)(a1 + 100) & 0x20) != 0 && *(_DWORD *)(a1 + 116) != 1)
    {
      AMCP::Log::Scope_Registry::get(v28);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v62 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
      {
        uint64_t v63 = pthread_self();
        mach_port_t v64 = pthread_mach_thread_np(v63);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v64;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Packetized_File_Reader.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = 178;
        *(_WORD *)&unsigned char buf[24] = 2080;
        *(void *)&buf[26] = "not (num_streams == 1)";
        _os_log_error_impl(&dword_1BAA78000, v62, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Invalid number of channel streams", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v66);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Invalid number of channel streams", (uint64_t)&v69);
      std::logic_error::logic_error(&v82, &v69);
      v82.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error((std::logic_error *)&cf, &v82);
      *((void *)&v72 + 1) = 0;
      mach_port_t v73 = 0;
      uint64_t v74 = 0;
      LODWORD(v75) = -1;
      cf.__vftable = (std::runtime_error_vtbl *)&unk_1F1489CC8;
      *(void *)&long long v72 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&cf);
      *(void *)&buf[32] = "AMCP::DAL::Packetized_File_Reader::Packetized_File_Reader(const DAL_Settings &)";
      uint64_t v84 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/Packetized_File_Reader.cpp";
      LODWORD(v85) = 178;
      std::vector<void *>::vector(&v78);
      int v65 = backtrace((void **)v78, (*((void *)&v78 + 1) - (void)v78) >> 3);
      std::vector<void *>::resize((char **)&v78, v65);
      long long v80 = &unk_1F148AA90;
      *(_OWORD *)uint64_t v81 = v78;
      *(void *)&v81[16] = v79;
      long long v78 = 0uLL;
      uint64_t v79 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    std::vector<AMCP::DAL::Audio_Samples_Data,caulk::rt_allocator<AMCP::DAL::Audio_Samples_Data>>::resize((uint64_t *)(a1 + 128), 1uLL);
    uint64_t v32 = 0;
    for (char i = 1; (i & 1) != 0; char i = 0)
    {
      AMCP::DAL::Audio_Samples_Data::allocate((AMCP::DAL::Audio_Samples_Data *)(*(void *)(a1 + 128) + 24 * v32), outPropertyData);
      uint64_t v32 = 1;
    }
  }
  return a1;
}

void sub_1BAB95140(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, __int16 a17, char a18, char a19, void *a20,void *a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,CFTypeRef cf,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,std::runtime_error a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    if (*v46)
    {
      ExtAudioFileDispose(*v46);
      *uint64_t v46 = 0;
    }
    __cxa_rethrow();
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAB95738()
{
}

void sub_1BAB95744()
{
}

void AMCP::Control::~Control(AMCP::Control *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AMCP::Slider_Control::~Slider_Control(AMCP::Slider_Control *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AMCP::Level_Control::~Level_Control(AMCP::Level_Control *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AMCP::Boolean_Control::~Boolean_Control(AMCP::Boolean_Control *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AMCP::Selector_Control::~Selector_Control(AMCP::Selector_Control *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void AMCP::Stereo_Pan_Control::~Stereo_Pan_Control(AMCP::Stereo_Pan_Control *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t AMCP::Control::Control(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::Object *)AMCP::Object::Object(a1, a2, a3);
  *(void *)uint64_t v4 = &unk_1F14618B0;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x6163746C);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&_OWORD v11[2] = "Control.cpp";
      __int16 v12 = 1024;
      int v13 = 30;
      __int16 v14 = 2080;
      size_t v15 = "constructed_correct_class(k_class_id_control)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAB95D18(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Control *AMCP::Control::Control(AMCP::Control *this, const AMCP::Device *a2, int a3, int a4, int a5, int a6)
{
  _OWORD v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *((void *)a2 + 4);
  int v13 = *(std::__shared_mutex_base **)(**(void **)v12 + 16);
  __int16 v14 = operator new(0x20uLL);
  *__int16 v14 = &unk_1F1461A00;
  v14[1] = a2;
  *((_DWORD *)v14 + 4) = a3;
  *((_DWORD *)v14 + 5) = a4;
  *((_DWORD *)v14 + 6) = a5;
  *((_DWORD *)v14 + 7) = a6;
  v25[0] = v14;
  unsigned int first_object_id_if = AMCP::Core::Broker::fetch_first_object_id_if (v13, (uint64_t)&v21);
  AMCP::Object::Object((uint64_t)this, v12, first_object_id_if);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](&v21);
  *(void *)this = &unk_1F14618B0;
  uint64_t v16 = AMCP::Object::constructed_correct_class(this, (AMCP *)0x6163746C);
  if ((v16 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = *v21;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unsigned int v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      LODWORD(v21) = 67109890;
      HIDWORD(v21) = v20;
      *(_WORD *)size_t v22 = 2080;
      *(void *)&uint64_t v22[2] = "Control.cpp";
      __int16 v23 = 1024;
      int v24 = 60;
      LOWORD(v25[0]) = 2080;
      *(void *)((char *)v25 + 2) = "constructed_correct_class(k_class_id_control)";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v21, 0x22u);
    }
    abort();
  }
  return this;
}