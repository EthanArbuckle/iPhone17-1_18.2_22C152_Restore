void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_volume_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

float std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::operator()(uint64_t a1)
{
  v1 = *(void **)(a1 + 8);
  int v2 = **(_DWORD **)(a1 + 24);
  int v3 = *(_DWORD *)(*v1 + 4);
  float result = 0.0;
  if (v2 > v3)
  {
    int v5 = *(_DWORD *)(v1[1] - 4);
    float result = 1.0;
    if (v5 > v2) {
      return (float)(v2 - v3) / (float)(v5 - v3);
    }
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_2>,float ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = &unk_1F1482E38;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::__clone(void *a1)
{
  float result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *float result = &unk_1F1482E38;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482E38;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_volume_control_value(AMCP::Core::Operation_Set &)::$_0>,float ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482E38;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1482D90;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1482D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1::~$_1(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_slider_control_valueERNS_4Core13Operation_SetEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2)
{
  mach_port_t v3 = *(_DWORD *)(a1 + 24);
  if (!v3)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "cannot create io_connect_proxy from null io_object");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::iokit::call_method_struct<applesauce::iokit::ReplyScalar<1>,unsigned int const&,unsigned int const&>((uint64_t)&__p, v3, *(_DWORD *)(a1 + 32), *a2);
  uint64_t v5 = *a2;
  v6 = __p;
  if (*(void *)__p == v5)
  {
    **(_DWORD **)(a1 + 8) = v5;
    AMCP::Core::Conductor::notify_control_value_observers(*(dispatch_object_t **)(*(void *)(a1 + 40) + 32), *(_DWORD *)(a1 + 28));
  }

  operator delete(v6);
}

void sub_1BAEFC92C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 16));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1482938;
  return std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_connect_t v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  uint64_t v6 = IOConnectAddRef(v5);
  if (v6)
  {
    uint64_t v9 = v6;
    exception = __cxa_allocate_exception(0x20uLL);
    v11 = std::system_category();
    MEMORY[0x1C1859250](exception, v9, v11, "Error on IOConnectAddRef");
    __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
  }
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_1BAEFCAD4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_1F1482938;
  std::__compressed_pair_elem<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAEFCB50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1482938;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_1>,void ()(unsigned int const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1482938;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  IOConnectRelease(*(_DWORD *)(a1 + 24));
  mach_port_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio27Control27update_slider_control_valueERNS_4Core13Operation_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::operator()(uint64_t a1)
{
  return **(unsigned int **)(a1 + 8);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1482848;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::__clone(uint64_t a1)
{
  float result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *float result = &unk_1F1482848;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482848;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0,std::allocator<AMCP::IOAudio2::Control::update_slider_control_value(AMCP::Core::Operation_Set &)::$_0>,unsigned int ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1482848;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void AMCP::IOAudio2::Control::create_from_dictionary_list(AMCP::IOAudio2::Control *this, AMCP::IOAudio2::Device *a2, CFArrayRef *a3)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  CFArrayRef v3 = *a3;
  if (*a3)
  {
    CFIndex Count = CFArrayGetCount(*a3);
    CFIndex v8 = Count;
    CFArrayRef v9 = *a3;
    if (*a3)
    {
      CFIndex v42 = CFArrayGetCount(*a3);
      if (!v8) {
        return;
      }
      goto LABEL_6;
    }
    CFIndex v42 = 0;
    if (Count)
    {
LABEL_6:
      unint64_t v10 = 0;
      while (1)
      {
        if (v3 == v9 && v42 == v10) {
          return;
        }
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>((applesauce::CF::DictionaryRef *)&cf, v3, v10);
        v11 = (char *)operator new(0x58uLL);
        *((void *)v11 + 1) = 0;
        *((void *)v11 + 2) = 0;
        *(void *)v11 = &unk_1F14827A8;
        CFTypeRef v12 = cf;
        if (cf) {
          CFRetain(cf);
        }
        v13 = v11 + 24;
        v45[0] = v12;
        v45[5] = 0;
        AMCP::IOAudio2::Device_Sub_Object::Device_Sub_Object((uint64_t)(v11 + 24), (uint64_t)a2, @"control ID", (CFDictionaryRef *)v45);
        if (v45[0]) {
          CFRelease(v45[0]);
        }
        *((void *)v11 + 3) = &unk_1F1482728;
        CFDictionaryRef v14 = (const __CFDictionary *)*((void *)v11 + 8);
        if (!v14)
        {
          exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(exception, "Could not construct");
          __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v46, v14, @"class");
        if (!v46)
        {
          v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v37, "Could not construct");
          __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v15 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v46);
        if (v46) {
          CFRelease(v46);
        }
        *((_DWORD *)v11 + 18) = v15;
        CFDictionaryRef v16 = (const __CFDictionary *)*((void *)v11 + 8);
        if (!v16)
        {
          v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v35, "Could not construct");
          __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v46, v16, @"base class");
        if (!v46)
        {
          v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v38, "Could not construct");
          __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v17 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v46);
        if (v46) {
          CFRelease(v46);
        }
        *((_DWORD *)v11 + 19) = v17;
        CFDictionaryRef v18 = (const __CFDictionary *)*((void *)v11 + 8);
        if (!v18)
        {
          v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v36, "Could not construct");
          __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v46, v18, @"scope");
        if (!v46)
        {
          v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v39, "Could not construct");
          __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v19 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v46);
        if (v46) {
          CFRelease(v46);
        }
        *((_DWORD *)v11 + 20) = v19;
        CFDictionaryRef v20 = (const __CFDictionary *)*((void *)v11 + 8);
        if (!v20)
        {
          v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v40, "Could not construct");
          __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::details::find_at_key<applesauce::CF::NumberRef,__CFString const*>((applesauce::CF::NumberRef *)&v46, v20, @"element");
        if (!v46)
        {
          v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v41, "Could not construct");
          __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        int v21 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v46);
        if (v46) {
          CFRelease(v46);
        }
        *((_DWORD *)v11 + 21) = v21;
        v22 = (std::__shared_weak_count *)*((void *)v11 + 5);
        if (!v22) {
          break;
        }
        if (v22->__shared_owners_ == -1)
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
          atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
          *((void *)v11 + 4) = v13;
          *((void *)v11 + 5) = v11;
          std::__shared_weak_count::__release_weak(v22);
LABEL_33:
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v11);
        }
        *(void *)&long long v23 = v11 + 24;
        *((void *)&v23 + 1) = v11;
        v25 = (_OWORD *)*((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        if ((unint64_t)v25 >= v24)
        {
          long long v43 = v23;
          uint64_t v27 = ((uint64_t)v25 - *(void *)this) >> 4;
          if ((unint64_t)(v27 + 1) >> 60) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v28 = v24 - *(void *)this;
          uint64_t v29 = v28 >> 3;
          if (v28 >> 3 <= (unint64_t)(v27 + 1)) {
            uint64_t v29 = v27 + 1;
          }
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v30 = v29;
          }
          v45[4] = (char *)this + 16;
          v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v30);
          v32 = &v31[16 * v27];
          v45[0] = v31;
          v45[1] = v32;
          v45[3] = &v31[16 * v33];
          *(_OWORD *)v32 = v43;
          v45[2] = v32 + 16;
          std::vector<std::shared_ptr<DSP_Host_Types::FormatDescription>>::__swap_out_circular_buffer(this, v45);
          v26 = (_OWORD *)*((void *)this + 1);
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v45);
        }
        else
        {
          _OWORD *v25 = v23;
          v26 = v25 + 1;
        }
        *((void *)this + 1) = v26;
        if (cf) {
          CFRelease(cf);
        }
        if (v8 == ++v10) {
          return;
        }
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 1, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v11 + 2, 1uLL, memory_order_relaxed);
      *((void *)v11 + 4) = v13;
      *((void *)v11 + 5) = v11;
      goto LABEL_33;
    }
  }
}

void sub_1BAEFD358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  CFArrayRef v9 = va_arg(va1, const void *);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  va_copy(va2, va1);
  CFDictionaryRef v16 = va_arg(va2, const void *);
  applesauce::CF::NumberRef::~NumberRef((const void **)va2);
  AMCP::IOAudio2::Device_Sub_Object::~Device_Sub_Object(v6);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  std::__shared_weak_count::~__shared_weak_count(v5);
  operator delete(v8);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<AMCP::IOAudio2::Control>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Control>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14827A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio2::Control>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14827A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void *DSP_HAL_BypassCallbacks::onClientIO(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[0] = a3;
  v7[1] = a4;
  v7[2] = a5;
  v7[3] = a6;
  v7[4] = a7;
  if (!*((unsigned char *)result + 317)) {
    return DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::set_output<char>((uint64_t)v7);
  }
  if (a6 && a4 && a5)
  {
    if (a7) {
      return DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::copy_input_to_output<float,(DSP_HAL_Bypass_Utils::AMCP_IOData_Helper<(DSP_HAL_Bypass_Utils::InterleavePolicy)0>::CopyStrategy)0>(v7);
    }
  }
  return result;
}

BOOL DSP_HAL_BypassCallbacks::expectFormat(DSP_HAL_BypassCallbacks *this, const DSP_Host_Types::AdaptRequest *a2)
{
  *((unsigned char *)this + 317) = 0;
  if (*((void *)a2 + 14)) {
    unsigned int v4 = *(_DWORD *)(*((void *)a2 + 12) + 28);
  }
  else {
    unsigned int v4 = 1;
  }
  if (*((void *)a2 + 82) != *((void *)a2 + 83))
  {
    DSP_Host_Types::AdaptRequest::AdaptRequest((DSP_Host_Types::AdaptRequest *)&v17, a2);
    io_connect_t v5 = (void *)*((void *)a2 + 82);
    uint64_t v6 = (void *)*v5;
    uint64_t v7 = (std::__shared_weak_count *)v5[1];
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v8 = 0;
    if (v4 <= 9)
    {
      if (((1 << v4) & 0x1CE) != 0)
      {
LABEL_9:
        CFArrayRef v9 = (uint64_t *)v6[83];
        unint64_t v10 = (uint64_t *)v6[84];
        goto LABEL_13;
      }
      if (((1 << v4) & 0x30) != 0)
      {
        CFArrayRef v9 = (uint64_t *)v6[86];
        unint64_t v10 = (uint64_t *)v6[87];
LABEL_13:
        if (v9 == v10) {
          goto LABEL_22;
        }
        goto LABEL_14;
      }
      if (v4 == 9)
      {
        CFArrayRef v9 = (uint64_t *)v6[89];
        if (v9 != (uint64_t *)v6[90])
        {
LABEL_14:
          uint64_t v12 = *v9;
          if (DSP_Dictionariable::DictionarySet::has_all_values(*(DSP_Dictionariable::DictionarySet **)(*v9 + 240), *(DSP_Dictionariable::DictionarySet **)(*v9 + 248)))
          {
            if (!*(unsigned char *)(v12 + 236)) {
              goto LABEL_55;
            }
            if (*(_DWORD *)(v12 + 232) == 1)
            {
              if (*(unsigned char *)(v12 + 209))
              {
                if (*(unsigned char *)(v12 + 208))
                {
LABEL_21:
                  uint64_t v8 = v12 + 112;
                  goto LABEL_23;
                }
                if (*(unsigned char *)(v12 + 188))
                {
                  if (*(_DWORD *)(v12 + 184) == 1) {
                    goto LABEL_21;
                  }
                  goto LABEL_22;
                }
              }
LABEL_55:
              std::__throw_bad_optional_access[abi:ne180100]();
            }
          }
LABEL_22:
          uint64_t v8 = 0;
          goto LABEL_23;
        }
        goto LABEL_9;
      }
    }
LABEL_23:
    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    if (!v8) {
      goto LABEL_47;
    }
    DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 8, v8);
    DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 160, v8);
    if ((v4 & 0xFFFFFFFE) == 4
      && DSP_Dictionariable::DictionarySet::has_all_values(*((DSP_Dictionariable::DictionarySet **)a2 + 31), *((DSP_Dictionariable::DictionarySet **)a2 + 32))&& DSP_Dictionariable::DictionarySet::has_all_values(*((DSP_Dictionariable::DictionarySet **)a2 + 31), *((DSP_Dictionariable::DictionarySet **)a2 + 32)))
    {
      if (!*((unsigned char *)a2 + 244)) {
        goto LABEL_54;
      }
      if (*((_DWORD *)a2 + 60) == 1)
      {
        if (!*((unsigned char *)a2 + 217)) {
          goto LABEL_54;
        }
        if (*((unsigned char *)a2 + 216)) {
          goto LABEL_35;
        }
        if (!*((unsigned char *)a2 + 196)) {
          goto LABEL_54;
        }
        if (*((_DWORD *)a2 + 48) == 1) {
LABEL_35:
        }
          DSP_Host_Types::FormatDescription::operator=((uint64_t)this + 8, (uint64_t)a2 + 120);
      }
    }
    if (*((unsigned char *)a2 + 444)) {
      int v13 = *((_DWORD *)a2 + 110);
    }
    else {
      int v13 = 0;
    }
    *((_DWORD *)this + 78) = v13;
    int v14 = *((unsigned __int8 *)this + 132);
    if (*((unsigned char *)this + 132)) {
      int v14 = *((_DWORD *)this + 32);
    }
    int v15 = *((unsigned __int8 *)this + 284);
    if (*((unsigned char *)this + 284)) {
      int v15 = *((_DWORD *)this + 70);
    }
    if (v14 != v15) {
      goto LABEL_47;
    }
    if (*((unsigned char *)this + 56) && *((unsigned char *)this + 208))
    {
      if (*((double *)this + 6) == *((double *)this + 25))
      {
        BOOL v11 = 1;
        *((unsigned char *)this + 317) = 1;
        goto LABEL_48;
      }
LABEL_47:
      BOOL v11 = *((unsigned char *)this + 317) != 0;
LABEL_48:
      int v17 = &unk_1F14867D0;
      long long v23 = (void **)&v22;
      std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v23);
      DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)&v21);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v20);
      DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v19);
      int v17 = &unk_1F1486820;
      std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v18);
      return v11;
    }
LABEL_54:
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  return 0;
}

void sub_1BAEFD844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  DSP_HAL_BypassCallbacks::expectFormat(DSP_Host_Types::AdaptRequest const&)::$_1::~$_1((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t DSP_HAL_BypassCallbacks::expectFormat(DSP_Host_Types::AdaptRequest const&)::$_1::~$_1(uint64_t a1)
{
  *(void *)(a1 + 8) = &unk_1F14867D0;
  CFArrayRef v3 = (void **)(a1 + 664);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v3);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)(a1 + 80));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 56));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 32));
  *(void *)(a1 + 8) = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](a1 + 16);
  return a1;
}

void DSP_HAL_BypassCallbacks::~DSP_HAL_BypassCallbacks(DSP_HAL_BypassCallbacks *this)
{
  *(void *)this = &unk_1F1483C38;
  uint64_t v1 = (void *)((char *)this + 8);
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((void *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);

  JUMPOUT(0x1C1859840);
}

{
  void *v1;

  *(void *)this = &unk_1F1483C38;
  uint64_t v1 = (void *)((char *)this + 8);
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((void *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
}

{
  void *v1;

  *(void *)this = &unk_1F1483C38;
  uint64_t v1 = (void *)((char *)this + 8);
  atomic_load((unsigned __int8 *)this + 316);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus((void *)this + 20);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
}

void *DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(void *a1)
{
  *a1 = &unk_1F1486968;
  uint64_t v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 13));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 10));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 7));
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)(a1 + 3));
  *a1 = &unk_1F14869A8;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void DSP_HAL_BypassCallbacks::DSP_HAL_BypassCallbacks(DSP_HAL_BypassCallbacks *this, HAL_DSP_IOCallbacks *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1483C38;
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_HAL_BypassCallbacks *)((char *)this + 8), "");
  *((void *)this + 1) = &unk_1F1483CE8;
  DSP_Host_Types::FormatDescription::FormatDescription((DSP_HAL_BypassCallbacks *)((char *)this + 160), "");
  *((void *)this + 20) = &unk_1F1483CE8;
  *((unsigned char *)this + 316) = 0;
  atomic_store(0, (unsigned __int8 *)this + 316);
  io_connect_t v5 = DSP_HAL_BypassCallbacks::onRegisterClient;
  uint64_t v6 = 0;
  uint64_t v7 = this;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(a2, (uint64_t)&v5);
  unsigned int v4 = operator new(0x20uLL);
  *unsigned int v4 = &unk_1F1483E18;
  v4[1] = DSP_HAL_BypassCallbacks::onClientIO;
  v4[2] = 0;
  v4[3] = this;
  uint64_t v8 = v4;
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::swap[abi:ne180100](&v5, (void *)a2 + 4);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](&v5);
  io_connect_t v5 = DSP_HAL_BypassCallbacks::onUnregisterClient;
  uint64_t v6 = 0;
  uint64_t v7 = this;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>((void *)a2 + 8, (uint64_t)&v5);
  io_connect_t v5 = DSP_HAL_BypassCallbacks::onBeginProcessing;
  uint64_t v6 = 0;
  uint64_t v7 = this;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>((void *)a2 + 12, (uint64_t)&v5);
  io_connect_t v5 = DSP_HAL_BypassCallbacks::onEndProcessing;
  uint64_t v6 = 0;
  uint64_t v7 = this;
  std::function<void ()>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>((void *)a2 + 16, (uint64_t)&v5);
}

void sub_1BAEFDC48(_Unwind_Exception *a1)
{
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v2);
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(v1);
  _Unwind_Resume(a1);
}

void sub_1BAEFDC74()
{
}

void *std::function<void ()(unsigned int)>::operator=<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,void>(void *a1, uint64_t a2)
{
  v6[4] = *MEMORY[0x1E4F143B8];
  unsigned int v4 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v4 = &unk_1F1483D58;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)a2;
  *((void *)v4 + 3) = *(void *)(a2 + 16);
  v6[3] = v4;
  std::__function::__value_func<void ()>::swap[abi:ne180100](v6, a1);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v6);
  return a1;
}

uint64_t DSP_HAL_BypassCallbacks::onEndProcessing(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t DSP_HAL_BypassCallbacks::onBeginProcessing(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 32))();
}

uint64_t DSP_HAL_BypassCallbacks::onUnregisterClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 56))();
}

void *std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIM23DSP_HAL_BypassCallbacksFvjRKN4AMCP15Proc_Cycle_InfoEmPNS2_11Proc_StreamEmS7_EJPS1_RKNS_12placeholders4__phILi1EEERKNSC_ILi2EEERKNSC_ILi3EEERKNSC_ILi4EEERKNSC_ILi5EEERKNSC_ILi6EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::operator()(void *a1, unsigned int *a2, uint64_t a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v7 = a1[2];
  uint64_t v8 = (uint64_t (*)(void *, void, uint64_t, void, void, void, void))a1[1];
  uint64_t v9 = (void *)(a1[3] + (v7 >> 1));
  if (v7) {
    uint64_t v8 = *(uint64_t (**)(void *, void, uint64_t, void, void, void, void))(*v9 + v8);
  }
  return v8(v9, *a2, a3, *a4, *a5, *a6, *a7);
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1483E18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&,std::placeholders::__ph<2> const&,std::placeholders::__ph<3> const&,std::placeholders::__ph<4> const&,std::placeholders::__ph<5> const&,std::placeholders::__ph<6> const&>>,void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__func()
{
}

uint64_t DSP_HAL_BypassCallbacks::onClientIO(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 40))();
}

void *std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__16__bindIM23DSP_HAL_BypassCallbacksFvjEJPS1_RKNS_12placeholders4__phILi1EEEEEE"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::operator()(void *a1, unsigned int *a2)
{
  uint64_t v2 = a1[2];
  CFArrayRef v3 = (uint64_t (*)(void *, void))a1[1];
  unsigned int v4 = (void *)(a1[3] + (v2 >> 1));
  if (v2) {
    CFArrayRef v3 = *(uint64_t (**)(void *, void))(*v4 + v3);
  }
  return v3(v4, *a2);
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1483D58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1483D58;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (DSP_HAL_BypassCallbacks::*)(unsigned int),DSP_HAL_BypassCallbacks*,std::placeholders::__ph<1> const&>>,void ()(unsigned int)>::~__func()
{
}

uint64_t DSP_HAL_BypassCallbacks::onRegisterClient(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 24))();
}

void DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(void *a1)
{
  DSP_HAL_BypassCallbacks::FormatPlus<BOOL>::~FormatPlus(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_PDPEngine::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)a6) {
    uint64_t v7 = *(void *)a6 + *(unsigned int *)(a6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, double, double))(*(void *)(a1 + 1128)
                                                                                                + 120))(*(unsigned int *)(*(void *)(a1 + 1120) + 16), *(unsigned int *)(a3 + 8), a5, a4 + 144, v7, *(double *)(a4 + 208), *(double *)(a4 + 216));
  if (result)
  {
    v11[0] = BYTE3(result);
    v11[1] = BYTE2(result);
    v11[2] = BYTE1(result);
    int v10 = result;
    v11[3] = result;
    v11[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      int v13 = "HALS_PDPUCPlugIn.cpp";
      __int16 v14 = 1024;
      int v15 = 189;
      __int16 v16 = 1024;
      int v17 = v10;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::WriteToStream: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v10;
  }
  return result;
}

void sub_1BAEFE26C(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAEFE154);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPEngine::_ReadFromStream_Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (*(void *)a6) {
    uint64_t v7 = *(void *)a6 + *(unsigned int *)(a6 + 8);
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void, void, uint64_t, uint64_t, uint64_t, double, double))(*(void *)(a1 + 1128)
                                                                                                + 112))(*(unsigned int *)(*(void *)(a1 + 1120) + 16), *(unsigned int *)(a3 + 8), a5, a4 + 80, v7, *(double *)(a4 + 208), *(double *)(a4 + 216));
  if (result)
  {
    v11[0] = BYTE3(result);
    v11[1] = BYTE2(result);
    v11[2] = BYTE1(result);
    int v10 = result;
    v11[3] = result;
    v11[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      int v13 = "HALS_PDPUCPlugIn.cpp";
      __int16 v14 = 1024;
      int v15 = 183;
      __int16 v16 = 1024;
      int v17 = v10;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::ReadFromStream: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v10;
  }
  return result;
}

uint64_t HALS_PDPEngine::_EndIOCycle(HALS_PDPEngine *this, const BOOL *a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  HALS_IOEngine2::_EndIOCycle(this, a2, a3);
  uint64_t result = (*(uint64_t (**)(void, void, char *, char *, double, double))(*((void *)this + 141) + 136))(*(unsigned int *)(*((void *)this + 140) + 16), *((unsigned int *)a3 + 110), (char *)a3 + 512, (char *)a3 + 576, *((double *)a3 + 80), *((double *)a3 + 81));
  if (result)
  {
    v8[0] = BYTE3(result);
    v8[1] = BYTE2(result);
    v8[2] = BYTE1(result);
    int v6 = result;
    v8[3] = result;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      int v10 = "HALS_PDPUCPlugIn.cpp";
      __int16 v11 = 1024;
      int v12 = 201;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      __int16 v16 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::EndIOCycle: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v6;
  }
  return result;
}

void sub_1BAEFE5B4(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAEFE4A0);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPEngine::_BeginIOCycle(HALS_PDPEngine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  HALS_IOEngine2::_BeginIOCycle(this, a2, a3);
  uint64_t result = (*(uint64_t (**)(void, void, char *, char *, double, double))(*((void *)this + 141) + 96))(*(unsigned int *)(*((void *)this + 140) + 16), *((unsigned int *)a3 + 110), (char *)a3 + 512, (char *)a3 + 576, *((double *)a3 + 80), *((double *)a3 + 81));
  if (result)
  {
    v8[0] = BYTE3(result);
    v8[1] = BYTE2(result);
    v8[2] = BYTE1(result);
    int v6 = result;
    v8[3] = result;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      int v10 = "HALS_PDPUCPlugIn.cpp";
      __int16 v11 = 1024;
      int v12 = 169;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      __int16 v16 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::BeginIOCycle: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v6;
  }
  return result;
}

void sub_1BAEFE758(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAEFE644);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_PDPEngine::_TellHardwareToStop(uint64_t a1)
{
  int v5 = 0;
  uint64_t v1 = *(void *)(a1 + 1128);
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 1120) + 16);
  *(void *)&v4.mSelector = 0x676C6F62676F696ELL;
  v4.mElement = 0;
  return HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(v1 + 80), v2, &v4, 0, 0, 4, &v5);
}

void sub_1BAEFE7E4(void *a1)
{
}

uint64_t HALS_PDPEngine::_TellHardwareToStart(uint64_t a1)
{
  v4.mElement = 0;
  int v5 = 1;
  uint64_t v1 = *(void *)(a1 + 1128);
  uint64_t v2 = *(unsigned int *)(*(void *)(a1 + 1120) + 16);
  *(void *)&v4.mSelector = 0x676C6F62676F696ELL;
  HALS_PDPUCPlugIn::ObjectSetPropertyData(*(HALS_PDPUCPlugIn **)(v1 + 80), v2, &v4, 0, 0, 4, &v5);
  return 0;
}

void sub_1BAEFE854(void *a1)
{
}

uint64_t HALS_PDPEngine::GetZeroTimeStamp(HALS_PDPEngine *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t result = (*(uint64_t (**)(void, double *, unint64_t *, unint64_t *))(*((void *)this + 141)
                                                                                               + 88))(*(unsigned int *)(*((void *)this + 140) + 16), a3, a4, a5);
  if (result)
  {
    v8[0] = BYTE3(result);
    v8[1] = BYTE2(result);
    v8[2] = BYTE1(result);
    int v6 = result;
    v8[3] = result;
    v8[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      int v10 = "HALS_PDPUCPlugIn.cpp";
      __int16 v11 = 1024;
      int v12 = 163;
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      __int16 v16 = v8;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PDPUCPlugIn::GetZeroTimeStamp: got an error from the plug-in, Error: %d (%s)", buf, 0x22u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v6;
  }
  return result;
}

void sub_1BAEFE9E0(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAEFE8CCLL);
  }
  _Unwind_Resume(a1);
}

void HALS_PDPEngine::~HALS_PDPEngine(HALS_PDPEngine *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::Utility::Mach_Port::reset(AMCP::Utility::Mach_Port *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  m = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  CFArrayRef v3 = *((void *)this + 9);
  if (!v3) {
    goto LABEL_9;
  }
  v13.__cv_.__sig = 1018212795;
  memset(v13.__cv_.__opaque, 0, sizeof(v13.__cv_.__opaque));
  char v8 = 0;
  AudioObjectPropertyAddress v4 = operator new(0x20uLL);
  *AudioObjectPropertyAddress v4 = &unk_1F14846F8;
  v4[1] = &v13;
  v4[2] = &v8;
  v4[3] = this;
  v12[3] = v4;
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN4AMCP7Utility9Mach_Port21reset_receive_handlerEv_block_invoke;
  handler[3] = &__block_descriptor_tmp_10_16961;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)v12);
  dispatch_source_set_cancel_handler(v3, handler);
  dispatch_source_cancel(*((dispatch_source_t *)this + 9));
  while (!v8)
    std::condition_variable::wait(&v13, &__lk);
  int v5 = *((void *)this + 9);
  *((void *)this + 9) = 0;
  if (v5) {
    dispatch_release(v5);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v12);
  std::condition_variable::~condition_variable(&v13);
  if (__lk.__owns_)
  {
    m = __lk.__m_;
LABEL_9:
    std::mutex::unlock(m);
  }
  mach_port_name_t v6 = *(_DWORD *)this;
  if (*(_DWORD *)this)
  {
    uint64_t v7 = (ipc_space_t *)MEMORY[0x1E4F14960];
    if (!*((unsigned char *)this + 4) || (mach_port_deallocate(*MEMORY[0x1E4F14960], v6), (mach_port_name_t v6 = *(_DWORD *)this) != 0))
    {
      if (*((unsigned char *)this + 5)) {
        mach_port_mod_refs(*v7, v6, 1u, -1);
      }
    }
  }
  *(_DWORD *)this = 0;
  *((_WORD *)this + 2) = 0;
}

void sub_1BAEFEC2C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN4AMCP7Utility9Mach_Port21reset_receive_handlerEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

void *std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP7Utility9Mach_Port21reset_receive_handlerEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = (std::mutex *)(*(void *)(a1 + 24) + 8);
  std::mutex::lock(v2);
  CFArrayRef v3 = *(std::condition_variable **)(a1 + 8);
  **(unsigned char **)(a1 + 16) = 1;
  std::condition_variable::notify_all(v3);

  std::mutex::unlock(v2);
}

__n128 std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14846F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F14846F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0,std::allocator<AMCP::Utility::Mach_Port::reset_receive_handler(void)::$_0>,void ()(void)>::~__func()
{
}

uint64_t AMCP::Utility::Mach_Port::create_port(AMCP::Utility::Mach_Port *this)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  mach_port_name_t name = 0;
  uint64_t v1 = (ipc_space_t *)MEMORY[0x1E4F14960];
  uint64_t v2 = (AMCP::Utility::Kernel_Error_Category *)mach_port_allocate(*MEMORY[0x1E4F14960], 1u, &name);
  unsigned int v3 = v2;
  AMCP::Utility::Kernel_Error_Category::get(v2);
  if (v3)
  {
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v10 = *buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      __int16 v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v12;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&v28[2] = "Mach_Port.cpp";
      __int16 v29 = 1024;
      int v30 = 69;
      __int16 v31 = 2080;
      v32 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to allocate the mach port", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v17);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](v24, v3, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    boost::enable_error_info<std::system_error>(v25, (uint64_t)v24);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)&buf, (uint64_t)v25);
    uint64_t v33 = "static mach_port_t AMCP::Utility::Mach_Port::create_port(mach_port_msgcount_t)";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Mach_Port.cpp";
    int v35 = 69;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    uint64_t v21 = &unk_1F148AA90;
    long long v22 = v19;
    uint64_t v23 = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  int v17 = MEMORY[0x1C18597F0]();
  p_mach_port_name_t name = &name;
  inserted = (AMCP::Utility::Kernel_Error_Category *)mach_port_insert_right(*v1, name, name, 0x14u);
  unsigned int v6 = inserted;
  AMCP::Utility::Kernel_Error_Category::get(inserted);
  if (v6)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    std::condition_variable v13 = *buf;
    if (*(void *)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v28);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      LODWORD(buf) = 67109890;
      HIDWORD(buf) = v15;
      *(_WORD *)uint64_t v28 = 2080;
      *(void *)&v28[2] = "Mach_Port.cpp";
      __int16 v29 = 1024;
      int v30 = 85;
      __int16 v31 = 2080;
      v32 = "kernel_error.operator BOOL()";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to create the send right", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v16);
    __cxa_allocate_exception(0x50uLL);
    MEMORY[0x1C1859240](v24, v6, &AMCP::Utility::Kernel_Error_Category::get(void)::s_category);
    boost::enable_error_info<std::system_error>(v25, (uint64_t)v24);
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>::clone_impl((uint64_t)&buf, (uint64_t)v25);
    uint64_t v33 = "static mach_port_t AMCP::Utility::Mach_Port::create_port(mach_port_msgcount_t)";
    v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Mach_Port.cpp";
    int v35 = 85;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v19);
    uint64_t v21 = &unk_1F148AA90;
    long long v22 = v19;
    uint64_t v23 = v20;
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::system_error>>>();
  }
  uint64_t v8 = name;
  applesauce::raii::v1::detail::ScopeGuard<AMCP::Utility::Mach_Port::create_port::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard((uint64_t)&v17);
  return v8;
}

void sub_1BAEFF1E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,std::runtime_error a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::Utility::Mach_Port::create_port(unsigned int)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    mach_port_deallocate(*MEMORY[0x1E4F14960], **(_DWORD **)(a1 + 8));
  }
  return a1;
}

void AMCP::Utility::Mach_Port::set_receive_handler(unsigned int *a1, dispatch_queue_t *a2, uint64_t a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!*a1)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)__int16 v31 = 2080;
      *(void *)&v31[2] = "Mach_Port.cpp";
      __int16 v32 = 1024;
      int v33 = 123;
      __int16 v34 = 2080;
      *(void *)int v35 = "m_port != MACH_PORT_NULL";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  unsigned int v6 = (std::mutex *)(a1 + 2);
  std::mutex::lock((std::mutex *)(a1 + 2));
  uint64_t v7 = dispatch_source_create(MEMORY[0x1E4F14458], *a1, 0, *a2);
  uint64_t v8 = *((void *)a1 + 9);
  *((void *)a1 + 9) = v7;
  if (v8)
  {
    dispatch_release(v8);
    uint64_t v7 = *((void *)a1 + 9);
  }
  if (!v7)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v12 = **(NSObject ***)buf;
    if (*(void *)v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v31);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      std::condition_variable v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)__int16 v31 = 2080;
      *(void *)&v31[2] = "Mach_Port.cpp";
      __int16 v32 = 1024;
      int v33 = 127;
      __int16 v34 = 2080;
      *(void *)int v35 = "!m_receive_source";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s failed to allocate the dispatch source", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v20, "failed to allocate the dispatch source");
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    long long v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v35[6] = "void AMCP::Utility::Mach_Port::set_receive_handler(const applesauce::dispatch::queue &, Receive_Handler)";
    uint64_t v36 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Utility/Mach_Port.cpp";
    int v37 = 127;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v15);
    int v17 = &unk_1F148AA90;
    long long v18 = v15;
    uint64_t v19 = v16;
    long long v15 = 0uLL;
    uint64_t v16 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  handler[0] = MEMORY[0x1E4F143A8];
  handler[1] = 1174405120;
  handler[2] = ___ZN4AMCP7Utility9Mach_Port19set_receive_handlerERKN10applesauce8dispatch2v15queueENSt3__18functionIFvvEEE_block_invoke;
  handler[3] = &__block_descriptor_tmp_16981;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v29, a3);
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume(*((dispatch_object_t *)a1 + 9));
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v29);
  std::mutex::unlock(v6);
}

void sub_1BAEFF6F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  std::mutex::unlock(v28);
  _Unwind_Resume(a1);
}

uint64_t ___ZN4AMCP7Utility9Mach_Port19set_receive_handlerERKN10applesauce8dispatch2v15queueENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  if (!v1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);

  return v2();
}

uint64_t AMCP::Utility::Mach_Port::receive_message(mach_port_name_t rcv_name, mach_msg_size_t rcv_size, mach_msg_header_t *msg, mach_msg_header_t *a4)
{
  if (!rcv_name) {
    return 268451842;
  }
  if (a4) {
    mach_msg_option_t v5 = 258;
  }
  else {
    mach_msg_option_t v5 = 2;
  }
  *(void *)&msg->msgh_bits = 0;
  *(void *)&msg->msgh_remote_port = 0;
  *(void *)&msg->msgh_voucher_port = 0;
  return mach_msg(msg, v5, 0, rcv_size, rcv_name, 0, 0);
}

void AMCP::Time_Stamp_Historian::clear_time_stamp_buffer(AMCP::Time_Stamp_Historian *this)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 60);
  os_unfair_lock_lock((os_unfair_lock_t)this + 15);
  uint64_t v3 = *((void *)this + 12);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 10);
    do
    {
      v4 += 24;
      if (v4 == *((void *)this + 9)) {
        uint64_t v4 = *((void *)this + 8);
      }
      --v3;
    }
    while (v3);
    *((void *)this + 10) = v4;
  }
  *((void *)this + 12) = 0;
  long long v24 = 0uLL;
  int v5 = 3;
  uint64_t v25 = 0;
  do
  {
    unsigned int v6 = boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 8, &v24);
    --v5;
  }
  while (v5);
  *((_DWORD *)this + 6) = 0;
  if (*((void *)this + 12) != 3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)char v27 = 2080;
      *(void *)&v27[2] = "Time_Stamp_Historian.cpp";
      __int16 v28 = 1024;
      int v29 = 85;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "not (m_time_stamp_buffer.size() == k_time_stamp_history_buffer_size)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v23);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v15);
    std::logic_error::logic_error(&v16, &v15);
    v16.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v17, &v16);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    int v22 = -1;
    v17.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    long long v18 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v17);
    *(void *)&v31[6] = "void AMCP::Time_Stamp_Historian::clear_time_stamp_buffer()";
    __int16 v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
    int v33 = 85;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v10);
    mach_port_t v12 = &unk_1F148AA90;
    long long v13 = v10;
    uint64_t v14 = v11;
    long long v10 = 0uLL;
    uint64_t v11 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }

  os_unfair_lock_unlock(v2);
}

void sub_1BAEFFB38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  os_unfair_lock_unlock(v28);
  _Unwind_Resume(a1);
}

void AMCP::Time_Stamp_Historian::clear_time_stamp_deltas(AMCP::Time_Stamp_Historian *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (os_unfair_lock_s *)((char *)this + 104);
  os_unfair_lock_lock((os_unfair_lock_t)this + 26);
  uint64_t v3 = *((void *)this + 18);
  if (v3)
  {
    uint64_t v4 = *((void *)this + 16);
    do
    {
      v4 += 24;
      if (v4 == *((void *)this + 15)) {
        uint64_t v4 = *((void *)this + 14);
      }
      --v3;
    }
    while (v3);
    *((void *)this + 16) = v4;
  }
  *((void *)this + 18) = 0;
  long long v23 = 0uLL;
  uint64_t v24 = 0;
  boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 14, &v23);
  int v5 = boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 14, &v23);
  if (*((void *)this + 18) != 2)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v6 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)int v26 = 2080;
      *(void *)&v26[2] = "Time_Stamp_Historian.cpp";
      __int16 v27 = 1024;
      int v28 = 104;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = "not (m_time_stamp_delta_buffer.size() == k_time_stamp_history_buffer_size - 1)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v22);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v14);
    std::logic_error::logic_error(&v15, &v14);
    v15.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v16, &v15);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    int v21 = -1;
    v16.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    std::logic_error v17 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v16);
    *(void *)&v30[6] = "void AMCP::Time_Stamp_Historian::clear_time_stamp_deltas()";
    __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Clock/Time_Stamp_Historian.cpp";
    int v32 = 104;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v9);
    uint64_t v11 = &unk_1F148AA90;
    long long v12 = v9;
    uint64_t v13 = v10;
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }

  os_unfair_lock_unlock(v2);
}

void sub_1BAEFFECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,char a28)
{
  os_unfair_lock_unlock(v28);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::destroy(void **a1)
{
  uint64_t v1 = (char *)a1[4];
  if (v1)
  {
    uint64_t v2 = (char *)a1[2];
    do
    {
      v2 += 24;
      if (v2 == a1[1]) {
        uint64_t v2 = (char *)*a1;
      }
      --v1;
    }
    while (v1);
    a1[2] = v2;
  }
  uint64_t v3 = *a1;
  if (v3) {
    operator delete(v3);
  }
}

uint64_t *boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>(uint64_t *result, long long *a2)
{
  uint64_t v2 = result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - *result) >> 3) == result[4])
  {
    if (v2 != *result)
    {
      uint64_t v3 = result[3];
      long long v4 = *a2;
      *(void *)(v3 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v3 = v4;
      uint64_t v5 = result[3] + 24;
      result[3] = v5;
      if (v5 == result[1])
      {
        uint64_t v5 = *result;
        result[3] = *result;
      }
      result[2] = v5;
    }
  }
  else
  {
    uint64_t v6 = result[3];
    long long v7 = *a2;
    *(void *)(v6 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v6 = v7;
    uint64_t v8 = result[3] + 24;
    result[3] = v8;
    if (v8 == result[1]) {
      result[3] = *result;
    }
    ++result[4];
  }
  return result;
}

void AMCP::Time_Stamp_Historian::calculate_and_save_delta(AMCP::Time_Stamp_Historian *this)
{
  if (*((void *)this + 12) >= 2uLL)
  {
    uint64_t v2 = (void *)((char *)this + 64);
    uint64_t v3 = boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at((void *)this + 8, 2);
    uint64_t v4 = boost::circular_buffer<AMCP::Zero_Time_Stamp,std::allocator<AMCP::Zero_Time_Stamp>>::at(v2, 1);
    uint64_t v5 = *(void *)(v4 + 16);
    uint64_t v6 = *(void *)(v3 + 8) - *(void *)(v4 + 8);
    *(double *)&long long v7 = *(double *)v3 - *(double *)v4;
    *((void *)&v7 + 1) = v6;
    uint64_t v8 = v5;
    os_unfair_lock_lock((os_unfair_lock_t)this + 26);
    boost::circular_buffer<AMCP::Zero_Time_Stamp_Delta,std::allocator<AMCP::Zero_Time_Stamp_Delta>>::push_back_impl<AMCP::Zero_Time_Stamp_Delta const&>((uint64_t *)this + 14, &v7);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 26);
  }
}

void HALS_IOProc::~HALS_IOProc(HALS_IOProc *this)
{
  uint64_t v2 = *((void *)this + 2);
  if (v2) {
    dispatch_release(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 3);
  if (v3) {
    _Block_release(v3);
  }
}

uint64_t HALS_MultiTap_Engine::_SetAudioCaptureMode(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 704);
  if (a2)
  {
    *(_DWORD *)(result + 704) = v2 + 1;
    if (v2) {
      return result;
    }
LABEL_7:
    *(_DWORD *)(*(void *)(result + 712) + 512) = a2;
    return result;
  }
  if (v2)
  {
    int v3 = v2 - 1;
    *(_DWORD *)(result + 704) = v3;
    if (!v3)
    {
      a2 = 0;
      goto LABEL_7;
    }
  }
  return result;
}

BOOL HALS_MultiTap_Engine::_IsCaptureFileEnabled(HALS_MultiTap_Engine *this)
{
  return *((_DWORD *)this + 176) != 0;
}

uint64_t HALS_MultiTap_Engine::NotifyWaitingTapThatIOHasFullyStarted(HALS_MultiTap_Engine *this)
{
  uint64_t v1 = *((void *)this + 89);
  int v2 = *(unsigned int ***)(v1 + 328);
  int v3 = *(unsigned int ***)(v1 + 336);
  while (v2 != v3)
  {
    uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**v2);
    uint64_t v6 = v4;
    if (v4)
    {
      if (((*(uint64_t (**)(void))(**(void **)(v4 + 96) + 152))(*(void *)(v4 + 96)) & 1) == 0) {
        (*(void (**)(void, void))(**(void **)(v6 + 96) + 768))(*(void *)(v6 + 96), *(unsigned int *)(v6 + 16));
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v5);
    v2 += 2;
  }
  return 0;
}

void sub_1BAF0024C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_MultiTap_Engine::CanSkipBeginEndIOOperation(HALS_MultiTap_Engine *this)
{
  return 1;
}

double HALS_MultiTap_Engine::GetEarliestCurrentPositionForOutputStream(HALS_MultiTap_Engine *this)
{
  return 0.0;
}

uint64_t HALS_MultiTap_Engine::ProcessOutputStreamData(HALS_MultiTap_Engine *this, HALS_IOContext *a2, unsigned int a3, const HALS_IOEngineInfo *a4, unsigned __int8 *a5)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::ProcessInputStreamData(HALS_MultiTap_Engine *this, HALS_IOContext *a2, unsigned int a3, const HALS_IOEngineInfo *a4, unsigned __int8 *a5)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HandleOverload()
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndWriting(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::WriteToStream_CommitTrailingSilence()
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::WriteToStream()
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::BeginWriting(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndReading(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::ReadFromStream(uint64_t *a1, unsigned int a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v12 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(a1 + 91, a2);
  uint64_t result = 1852797029;
  if (!a3 && v12)
  {
    std::string v14 = (void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
    uint64_t v15 = a1[89];
    double v16 = *(double *)(a5 + 512);
    HALS_MultiTap::fetch_reader_state((HALS_MultiTap *)&v23, v15, a2);
    if (*(void *)&v23.mSampleTime)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v15 + 408));
      read_from_dal_buffer(a4, (uint64_t)v16, v15 + 24, *(void *)(v15 + 520), (uint64_t **)(v15 + 528), (uint64_t *)(v15 + 536), v14);
      os_unfair_lock_unlock((os_unfair_lock_t)(v15 + 408));
    }
    if (v23.mHostTime) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v23.mHostTime);
    }
    HALS_MultiTap::fetch_reader_state((HALS_MultiTap *)&v24, a1[89], a2);
    if (v24)
    {
      std::logic_error v17 = *(atomic_uint **)(v24 + 8);
      if (v17)
      {
        if ((*(unsigned int (**)(uint64_t *))(*a1 + 888))(a1))
        {
          long long v18 = *(_OWORD *)(a5 + 528);
          *(_OWORD *)&v23.mSampleTime = *(_OWORD *)(a5 + 512);
          *(_OWORD *)&v23.mRateScalar = v18;
          long long v19 = *(_OWORD *)(a5 + 560);
          *(_OWORD *)&v23.mSMPTETime.mSubframes = *(_OWORD *)(a5 + 544);
          *(_OWORD *)&v23.mSMPTETime.mHours = v19;
          v23.mFlags = DWORD2(v19) | 6;
          HALS_IOClock::TranslateTime(*(void *)(a5 + 288), (const AudioTimeStamp *)(a5 + 512), &v23);
          uint64_t v20 = *(HALS_IOClock **)(a5 + 288);
          v22[0] = 0;
          v22[1] = 0;
          double v21 = 0.0;
          HALS_IOClock::GetRaw0Time(v20, &v21, v22);
          HALB_CaptureFile::Write(v17, a5 + 448, &v23.mSampleTime, (uint64_t)&v21, a4, (uint64_t)v14);
        }
      }
    }
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
    return 0;
  }
  return result;
}

void sub_1BAF00474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap::fetch_reader_state(HALS_MultiTap *this, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = (os_unfair_lock_s *)(a2 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 360));
  unint64_t v7 = *(void *)(a2 + 376);
  if (!v7) {
    goto LABEL_17;
  }
  uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = a3;
    if (v7 <= a3) {
      unint64_t v9 = a3 % v7;
    }
  }
  else
  {
    unint64_t v9 = (v7 - 1) & a3;
  }
  uint64_t v10 = *(uint64_t ***)(*(void *)(a2 + 368) + 8 * v9);
  if (!v10 || (uint64_t v11 = *v10) == 0)
  {
LABEL_17:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
    goto LABEL_18;
  }
  while (1)
  {
    unint64_t v12 = v11[1];
    if (v12 == a3) {
      break;
    }
    if (v8.u32[0] > 1uLL)
    {
      if (v12 >= v7) {
        v12 %= v7;
      }
    }
    else
    {
      v12 &= v7 - 1;
    }
    if (v12 != v9) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v11 = (uint64_t *)*v11;
    if (!v11) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v11 + 4) != a3) {
    goto LABEL_16;
  }
  uint64_t v13 = v11[4];
  *(void *)this = v11[3];
  *((void *)this + 1) = v13;
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
LABEL_18:

  os_unfair_lock_unlock(v6);
}

uint64_t HALS_MultiTap_Engine::BeginReading(HALS_MultiTap_Engine *this, unsigned int a2, unsigned int a3, const HALS_IOEngineInfo *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndIOCycle(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::BeginIOCycle(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::EndIOThread(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::BeginIOThread(HALS_MultiTap_Engine *this, unsigned int a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  return 0;
}

void HALS_MultiTap_Engine::StopIO(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(a1 + 728), *(_DWORD *)(a2 + 16));
  os_unfair_lock_unlock(v4);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 712);
    unsigned int v7 = *(_DWORD *)(a2 + 16);
    HALS_MultiTap::fetch_reader_state((HALS_MultiTap *)&v19, v6, v7);
    if (v19)
    {
      HALS_MultiTap::stop((os_unfair_lock_s *)v6);
      os_unfair_lock_lock((os_unfair_lock_t)(v6 + 360));
      uint8x8_t v8 = (void *)(v6 + 368);
      unint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v6 + 368), v7);
      if (v9)
      {
        int8x8_t v10 = *(int8x8_t *)(v6 + 376);
        unint64_t v11 = v9[1];
        uint8x8_t v12 = (uint8x8_t)vcnt_s8(v10);
        v12.i16[0] = vaddlv_u8(v12);
        if (v12.u32[0] > 1uLL)
        {
          if (v11 >= *(void *)&v10) {
            v11 %= *(void *)&v10;
          }
        }
        else
        {
          v11 &= *(void *)&v10 - 1;
        }
        uint64_t v13 = *(uint64_t **)(*v8 + 8 * v11);
        do
        {
          std::string v14 = v13;
          uint64_t v13 = (uint64_t *)*v13;
        }
        while (v13 != v9);
        if (v14 == (uint64_t *)(v6 + 384)) {
          goto LABEL_22;
        }
        unint64_t v15 = v14[1];
        if (v12.u32[0] > 1uLL)
        {
          if (v15 >= *(void *)&v10) {
            v15 %= *(void *)&v10;
          }
        }
        else
        {
          v15 &= *(void *)&v10 - 1;
        }
        if (v15 != v11)
        {
LABEL_22:
          if (!*v9) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(*v9 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v16 >= *(void *)&v10) {
              v16 %= *(void *)&v10;
            }
          }
          else
          {
            v16 &= *(void *)&v10 - 1;
          }
          if (v16 != v11) {
LABEL_23:
          }
            *(void *)(*v8 + 8 * v11) = 0;
        }
        uint64_t v17 = *v9;
        if (*v9)
        {
          unint64_t v18 = *(void *)(v17 + 8);
          if (v12.u32[0] > 1uLL)
          {
            if (v18 >= *(void *)&v10) {
              v18 %= *(void *)&v10;
            }
          }
          else
          {
            v18 &= *(void *)&v10 - 1;
          }
          if (v18 != v11)
          {
            *(void *)(*v8 + 8 * v18) = v14;
            uint64_t v17 = *v9;
          }
        }
        *std::string v14 = v17;
        *unint64_t v9 = 0;
        --*(void *)(v6 + 392);
        std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v9);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 360));
      if (*(unsigned char *)(v6 + 464)) {
        std::function<void ()(HALS_MultiTap::Reader_Action_State)>::operator()(*(void *)(v6 + 456), 1);
      }
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    kdebug_trace();
  }
}

void HALS_MultiTap::stop(os_unfair_lock_s *this)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v2 = this + 30;
  os_unfair_lock_lock(this + 30);
  uint64_t v3 = *(void *)&this[32]._os_unfair_lock_opaque;
  if (!v3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(void *)&this[32]._os_unfair_lock_opaque = -1;
      goto LABEL_9;
    }
    int v6 = 136315394;
    unsigned int v7 = "HALS_MultiTap.cpp";
    __int16 v8 = 1024;
    int v9 = 886;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::stop: too many stops", (uint8_t *)&v6, 0x12u);
    uint64_t v3 = *(void *)&this[32]._os_unfair_lock_opaque;
  }
  uint64_t v4 = v3 - 1;
  *(void *)&this[32]._os_unfair_lock_opaque = v4;
  if (!v4)
  {
    *(void *)&this[34]._os_unfair_lock_opaque = 0;
    os_unfair_lock_lock(this + 102);
    uint64_t v5 = *(void *)&this[130]._os_unfair_lock_opaque;
    *(void *)&this[130]._os_unfair_lock_opaque = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)&this[104]._os_unfair_lock_opaque = (uint64_t)(*(double *)&this[6]._os_unfair_lock_opaque * 0.25);
    *(void *)&this[106]._os_unfair_lock_opaque = 0;
    os_unfair_lock_unlock(this + 102);
  }
LABEL_9:
  os_unfair_lock_unlock(v2);
}

uint64_t std::function<void ()(HALS_MultiTap::Reader_Action_State)>::operator()(uint64_t a1, int a2)
{
  int v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t HALS_MultiTap_Engine::StartIO(os_unfair_lock_s *this, HALS_IOContext *a2)
{
  uint64_t v4 = this + 177;
  os_unfair_lock_lock(this + 177);
  uint64_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(&this[182]._os_unfair_lock_opaque, *((_DWORD *)a2 + 4));
  os_unfair_lock_unlock(v4);
  if (!v5) {
    return 1852797029;
  }
  kdebug_trace();
  uint64_t v6 = *(void *)&this[178]._os_unfair_lock_opaque;
  unsigned int v16 = *((_DWORD *)a2 + 4);
  unsigned int v7 = v16;
  os_unfair_lock_lock((os_unfair_lock_t)(v6 + 360));
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v6 + 368), v16))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 360));
  }
  else
  {
    int v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    *int v9 = &unk_1F1484DF8;
    *((_DWORD *)v9 + 6) = v7;
    v9[4] = 0;
    uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)(v6 + 368), v7, &v16);
    unint64_t v11 = (std::__shared_weak_count *)v10[4];
    v10[3] = v9 + 3;
    v10[4] = v9;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (*(_DWORD *)(v6 + 512)
      && !*(void *)(std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t *)(v6 + 368), v7, &v16)[3]+ 8)&& *(_DWORD *)(v6 + 32) == 1819304813)
    {
      memset(v15, 0, sizeof(v15));
      std::string::basic_string[abi:ne180100]<0>(__p, "MultiTap");
      HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)0>(v15, (uint64_t)__p);
      HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)4>(v15, &v16);
      int v12 = 1;
      HALB_CaptureFile_NameBuilder::Add<(HALB_CaptureFile_NameBuilder_Label)2>(v15, &v12);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      operator new();
    }
    os_unfair_lock_unlock((os_unfair_lock_t)(v6 + 360));
    HALS_MultiTap::start((os_unfair_lock_s *)v6);
    if (*(unsigned char *)(v6 + 464)) {
      std::function<void ()(HALS_MultiTap::Reader_Action_State)>::operator()(*(void *)(v6 + 456), 0);
    }
  }
  return 0;
}

void sub_1BAF00BF4(void *a1)
{
  MEMORY[0x1C1859840](v1, 0x1020C40C1DD3C34);
  __clang_call_terminate(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<HALS_MultiTap_Reader_State>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = a1[1];
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    int v9 = *(void ***)(*a1 + 8 * v3);
    if (v9)
    {
      uint64_t v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  int v12 = a1 + 2;
  uint64_t v10 = operator new(0x28uLL);
  *uint64_t v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  v10[3] = 0;
  v10[4] = 0;
  float v13 = (float)(unint64_t)(a1[3] + 1);
  float v14 = *((float *)a1 + 8);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    int8x8_t prime = (int8x8_t)v17;
  }
  else {
    int8x8_t prime = (int8x8_t)v16;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = a1[1];
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v25 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
    if (v7 < 3 || (uint8x8_t v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
    {
      unint64_t v25 = std::__next_prime(v25);
    }
    else
    {
      uint64_t v27 = 1 << -(char)__clz(v25 - 1);
      if (v25 >= 2) {
        unint64_t v25 = v27;
      }
    }
    if (*(void *)&prime <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = a1[1];
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v34 = (void *)*a1;
      *a1 = 0;
      if (v34) {
        operator delete(v34);
      }
      unint64_t v7 = 0;
      a1[1] = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v19 = operator new(8 * *(void *)&prime);
  uint64_t v20 = (void *)*a1;
  *a1 = (uint64_t)v19;
  if (v20) {
    operator delete(v20);
  }
  uint64_t v21 = 0;
  a1[1] = (uint64_t)prime;
  do
    *(void *)(*a1 + 8 * v21++) = 0;
  while (*(void *)&prime != v21);
  char v22 = (void *)*v12;
  if (*v12)
  {
    unint64_t v23 = v22[1];
    uint8x8_t v24 = (uint8x8_t)vcnt_s8(prime);
    v24.i16[0] = vaddlv_u8(v24);
    if (v24.u32[0] > 1uLL)
    {
      if (v23 >= *(void *)&prime) {
        v23 %= *(void *)&prime;
      }
    }
    else
    {
      v23 &= *(void *)&prime - 1;
    }
    *(void *)(*a1 + 8 * v23) = v12;
    int v28 = (void *)*v22;
    if (*v22)
    {
      do
      {
        unint64_t v29 = v28[1];
        if (v24.u32[0] > 1uLL)
        {
          if (v29 >= *(void *)&prime) {
            v29 %= *(void *)&prime;
          }
        }
        else
        {
          v29 &= *(void *)&prime - 1;
        }
        if (v29 != v23)
        {
          if (!*(void *)(*a1 + 8 * v29))
          {
            *(void *)(*a1 + 8 * v29) = v22;
            goto LABEL_56;
          }
          void *v22 = *v28;
          *int v28 = **(void **)(*a1 + 8 * v29);
          **(void **)(*a1 + 8 * v29) = v28;
          int v28 = v22;
        }
        unint64_t v29 = v23;
LABEL_56:
        char v22 = v28;
        int v28 = (void *)*v28;
        unint64_t v23 = v29;
      }
      while (v28);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v30 = *a1;
  __int16 v31 = *(void **)(*a1 + 8 * v6);
  if (v31)
  {
    *uint64_t v10 = *v31;
LABEL_72:
    void *v31 = v10;
    goto LABEL_73;
  }
  *uint64_t v10 = *v12;
  *int v12 = v10;
  *(void *)(v30 + 8 * v6) = v12;
  if (*v10)
  {
    unint64_t v32 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7) {
        v32 %= v7;
      }
    }
    else
    {
      v32 &= v7 - 1;
    }
    __int16 v31 = (void *)(*a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++a1[3];
  return v10;
}

void sub_1BAF01004(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap::start(os_unfair_lock_s *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  int v2 = this + 30;
  os_unfair_lock_lock(this + 30);
  uint64_t v3 = *(void *)&this[32]._os_unfair_lock_opaque;
  if (v3 == -1)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(void *)&this[32]._os_unfair_lock_opaque = 0;
      goto LABEL_7;
    }
    int v4 = 136315394;
    uint64_t v5 = "HALS_MultiTap.cpp";
    __int16 v6 = 1024;
    int v7 = 870;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::start: too many starts", (uint8_t *)&v4, 0x12u);
    uint64_t v3 = *(void *)&this[32]._os_unfair_lock_opaque;
  }
  *(void *)&this[32]._os_unfair_lock_opaque = v3 + 1;
  if (!v3)
  {
    *(void *)&this[34]._os_unfair_lock_opaque = mach_absolute_time();
    os_unfair_lock_lock(this + 102);
    HALS_MultiTap::_allocate_ring_buffer((HALS_MultiTap *)this);
  }
LABEL_7:
  os_unfair_lock_unlock(v2);
}

void sub_1BAF0113C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    os_unfair_lock_unlock(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap::_allocate_ring_buffer(HALS_MultiTap *this)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  double v2 = *((double *)this + 3);
  *((void *)this + 52) = (uint64_t)(v2 * 0.25);
  *((void *)this + 53) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v10, "tap timebase ");
  std::to_string(&v9, 5);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v3 = &v9;
  }
  else {
    uint64_t v3 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = std::string::append(&v10, (const std::string::value_type *)v3, size);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  int v7 = std::string::append(&v13, ":", 1uLL);
  std::string __p = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  AMCP::Graph::make_mock_timebase(&v12, 0x17395u, 0, (uint64_t)&__p, v2);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 68);
  *(_OWORD *)((char *)this + 536) = v12;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  operator new();
}

void sub_1BAF013C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,long long buf,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a2)
  {
    MEMORY[0x1C1859840](v34, 0x10A1C404618BBCFLL);
    if (a33) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a33);
    }
    __cxa_begin_catch(exception_object);
    uint64_t v36 = *(void *)(v33 + 520);
    *(void *)(v33 + 520) = 0;
    if (v36) {
      (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315394;
      *(void *)((char *)&buf + 4) = "HALS_MultiTap.cpp";
      WORD6(buf) = 1024;
      *(_DWORD *)((char *)&buf + 14) = 937;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::_allocate_ring_buffer: failed to allocate Mixing_Ring_Buffer", (uint8_t *)&buf, 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAF01394);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 **std::__shared_ptr_emplace<HALS_MultiTap_Reader_State>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<HALB_CaptureFile>::reset[abi:ne180100]((unsigned __int8 ***)(a1 + 32), 0);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Reader_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1484DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Reader_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1484DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL HALS_MultiTap_Engine::IsIORunningForReferenceStream(HALS_MultiTap_Engine *this)
{
  uint64_t v1 = *((void *)this + 89);
  double v2 = (os_unfair_lock_s *)(v1 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 360));
  BOOL v3 = *(void *)(v1 + 392) != 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

BOOL HALS_MultiTap_Engine::IsIORunning(HALS_MultiTap_Engine *this)
{
  uint64_t v1 = *((void *)this + 89);
  double v2 = (os_unfair_lock_s *)(v1 + 360);
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 360));
  BOOL v3 = *(void *)(v1 + 392) != 0;
  os_unfair_lock_unlock(v2);
  return v3;
}

uint64_t HALS_MultiTap_Engine::RegisterIOBuffer(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int a5, void *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::Unregister_IOThread(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::Register_IOThread(HALS_MultiTap_Engine *this, double a2)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetZeroTimeStamp(HALS_MultiTap_Engine *this, unsigned int a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v9 = *((void *)this + 89);
  uint64_t v10 = mach_absolute_time();
  os_unfair_lock_lock((os_unfair_lock_t)(v9 + 120));
  unint64_t v11 = *(void *)(v9 + 136);
  double v12 = *(double *)(v9 + 144);
  os_unfair_lock_unlock((os_unfair_lock_t)(v9 + 120));
  if (v11)
  {
    double v13 = -(double)(v11 - v10);
    if (v10 >= v11) {
      double v13 = (double)(v10 - v11);
    }
    double v14 = round(v13 / v12);
  }
  else
  {
    double v14 = 0.0;
  }
  uint64_t v15 = *((void *)this + 89);
  uint64_t v16 = *(void *)(v15 + 416);
  memset(&v20.mHostTime, 0, 48);
  *(void *)&v20.mFlags = 1;
  Float64 v17 = floor(v14 / (double)v16) * (double)v16;
  memset(&v19, 0, 56);
  *(void *)&v19.mFlags = 2;
  v20.mSampleTime = v17;
  HALS_MultiTap::translate_time((os_unfair_lock_s *)v15, &v20, &v19);
  *a3 = v17;
  *a4 = v19.mHostTime;
  *a5 = 1;
  return 0;
}

void HALS_MultiTap::translate_time(os_unfair_lock_s *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  AudioTimeStampFlags mFlags = a3->mFlags;
  if (mFlags)
  {
    os_unfair_lock_lock(this + 30);
    UInt64 v7 = *(void *)&this[34]._os_unfair_lock_opaque;
    double v8 = *(double *)&this[36]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(this + 30);
    AudioTimeStampFlags v9 = a2->mFlags;
    if (v9)
    {
      double mSampleTime = a2->mSampleTime;
    }
    else
    {
      double mSampleTime = 0.0;
      if (v7 && (v9 & 2) != 0)
      {
        UInt64 mHostTime = a2->mHostTime;
        double v12 = -(double)(v7 - mHostTime);
        BOOL v13 = mHostTime >= v7;
        unint64_t v14 = mHostTime - v7;
        if (v13) {
          double v12 = (double)v14;
        }
        double mSampleTime = round(v12 / v8);
      }
    }
    a3->double mSampleTime = mSampleTime;
    AudioTimeStampFlags mFlags = a3->mFlags;
    if ((mFlags & 2) == 0)
    {
LABEL_3:
      if ((mFlags & 4) == 0) {
        return;
      }
      goto LABEL_4;
    }
  }
  else if ((mFlags & 2) == 0)
  {
    goto LABEL_3;
  }
  os_unfair_lock_lock(this + 30);
  uint64_t v15 = *(void *)&this[34]._os_unfair_lock_opaque;
  double v16 = *(double *)&this[36]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(this + 30);
  AudioTimeStampFlags v17 = a2->mFlags;
  if ((v17 & 2) != 0)
  {
    UInt64 v18 = a2->mHostTime;
  }
  else
  {
    UInt64 v18 = 0;
    if (v15 && (v17 & 1) != 0)
    {
      double v19 = a2->mSampleTime;
      if (a2->mSampleTime >= 0.0) {
        UInt64 v18 = v15 + vcvtad_u64_f64(v16 * v19);
      }
      else {
        UInt64 v18 = v15 - vcvtad_u64_f64(v16 * (0.0 - v19));
      }
    }
  }
  a3->UInt64 mHostTime = v18;
  if ((a3->mFlags & 4) != 0) {
LABEL_4:
  }
    a3->mRateScalar = 1.0;
}

void HALS_MultiTap_Engine::SetAudioCaptureMode(uint64_t a1, int a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN20HALS_MultiTap_Engine19SetAudioCaptureModeE17AudioCapturerMode_block_invoke;
  v3[3] = &__block_descriptor_tmp_19_17098;
  v3[4] = a1;
  int v4 = a2;
  double v2 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t ___ZN20HALS_MultiTap_Engine19SetAudioCaptureModeE17AudioCapturerMode_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 896))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

uint64_t HALS_MultiTap_Engine::IsCaptureFileEnabled(HALS_MultiTap_Engine *this)
{
  uint64_t v5 = 0;
  long long v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK20HALS_MultiTap_Engine20IsCaptureFileEnabledEv_block_invoke;
  v4[3] = &unk_1E62357D0;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_MultiTap_Engine *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF01A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK20HALS_MultiTap_Engine20IsCaptureFileEnabledEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 888))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t HALS_MultiTap_Engine::HasDSPParameterForStreamAtIndex(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDSPParameterForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, float *a5)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::SetDSPParameterForStreamAtIndex(HALS_MultiTap_Engine *this, float a2)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasDSPPropertyForStreamAtIndex(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDSPPropertyForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int *a5, void *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetDSPPropertyInfoForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int *a5, BOOL *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::SetDSPPropertyForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, unsigned int a4, unsigned int a5, const void *a6)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasSoftwareReferenceStream(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasSoftwareReferenceStreamAtIndex(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::SetDSPForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, const HALS_DSPSettings *a4)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetStartSample(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::HasAnyNonMixableFormats(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::CalculateBufferByteSizeForStreamAtIndex(HALS_MultiTap_Engine *this, BOOL a2, unsigned int a3, int a4)
{
  return (*(_DWORD *)(*((void *)this + 89) + 48) * a4);
}

__n128 HALS_MultiTap_Engine::GetPhysicalFormatForStreamAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 712);
  __n128 result = *(__n128 *)(v4 + 24);
  long long v6 = *(_OWORD *)(v4 + 40);
  *(void *)(a4 + 32) = *(void *)(v4 + 56);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v6;
  return result;
}

__n128 HALS_MultiTap_Engine::GetVirtualFormatForStreamAtIndex(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 712);
  __n128 result = *(__n128 *)(v4 + 24);
  long long v6 = *(_OWORD *)(v4 + 40);
  *(void *)(a4 + 32) = *(void *)(v4 + 56);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v6;
  return result;
}

uint64_t HALS_MultiTap_Engine::GetStartingChannelForStreamAtIndex(HALS_MultiTap_Engine *this, uint64_t a2)
{
  return a2;
}

uint64_t HALS_MultiTap_Engine::IsStreamAtIndexActive(HALS_MultiTap_Engine *this)
{
  return 1;
}

uint64_t HALS_MultiTap_Engine::GetNumberStreamsVisibleToClient(HALS_MultiTap_Engine *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 400))();
}

uint64_t HALS_MultiTap_Engine::GetNumberStreams(HALS_MultiTap_Engine *this, uint64_t a2)
{
  return a2;
}

uint64_t HALS_MultiTap_Engine::GetDataStartByteOffset(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::UseClockBoundsCheck(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::IsClockStable(HALS_MultiTap_Engine *this)
{
  return 1;
}

uint64_t HALS_MultiTap_Engine::GetClockAlgorithm(HALS_MultiTap_Engine *this)
{
  return 1918990199;
}

uint64_t HALS_MultiTap_Engine::GetLatency(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::GetSafetyOffset(HALS_MultiTap_Engine *this)
{
  return *(unsigned int *)(*((void *)this + 89) + 68);
}

uint64_t HALS_MultiTap_Engine::GetRingBufferFrameSize(HALS_MultiTap_Engine *this)
{
  return *(unsigned int *)(*((void *)this + 89) + 416);
}

double HALS_MultiTap_Engine::GetNominalSampleRate(HALS_MultiTap_Engine *this)
{
  return *(double *)(*((void *)this + 89) + 24);
}

uint64_t HALS_MultiTap_Engine::GetOwningDevice(HALS_MultiTap_Engine *this)
{
  return 0;
}

uint64_t HALS_MultiTap_Engine::NeedNoDisplaySleepPowerAssertion(HALS_MultiTap_Engine *this)
{
  return 0;
}

float HALS_MultiTap_Engine::GetCombinedIOContextVolumeScalarForClient(HALS_MultiTap_Engine *this)
{
  return 1.0;
}

void HALS_MultiTap_Engine::CopyAllContexts(uint64_t a1, char **a2)
{
  a2[1] = *a2;
  uint64_t v4 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  uint64_t v5 = *(uint64_t **)(a1 + 744);
  uint8x8_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v25 = 0;
  unint64_t v6 = 0;
  if (v5)
  {
    uint64_t v7 = v5;
    do
    {
      ++v6;
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v25, v5, v6);
  char v8 = v25;
  AudioTimeStampFlags v9 = v26;
  os_unfair_lock_unlock(v4);
  if (v8 != v9)
  {
    uint64_t v10 = v8;
    do
    {
      uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v10);
      uint64_t v12 = v11;
      if (v11)
      {
        unint64_t v14 = (uint64_t *)a2[1];
        unint64_t v13 = (unint64_t)a2[2];
        if ((unint64_t)v14 >= v13)
        {
          uint64_t v16 = ((char *)v14 - *a2) >> 3;
          if ((unint64_t)(v16 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v17 = v13 - (void)*a2;
          uint64_t v18 = v17 >> 2;
          if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
            uint64_t v18 = v16 + 1;
          }
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v19 = v18;
          }
          if (v19) {
            unint64_t v19 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v19);
          }
          else {
            uint64_t v20 = 0;
          }
          uint64_t v21 = (uint64_t *)(v19 + 8 * v16);
          *uint64_t v21 = v12;
          uint64_t v15 = (char *)(v21 + 1);
          unint64_t v23 = *a2;
          char v22 = a2[1];
          if (v22 != *a2)
          {
            do
            {
              uint64_t v24 = *((void *)v22 - 1);
              v22 -= 8;
              *--uint64_t v21 = v24;
            }
            while (v22 != v23);
            char v22 = *a2;
          }
          *a2 = (char *)v21;
          a2[1] = v15;
          a2[2] = (char *)(v19 + 8 * v20);
          if (v22) {
            operator delete(v22);
          }
        }
        else
        {
          *unint64_t v14 = v11;
          uint64_t v15 = (char *)(v14 + 1);
        }
        a2[1] = v15;
      }
      ++v10;
    }
    while (v10 != v9);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1BAF01DF0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::AssessAllContexts(os_unfair_lock_s *this, const AudioObjectPropertyAddress **a2)
{
  uint64_t v4 = this + 177;
  os_unfair_lock_lock(this + 177);
  uint64_t v5 = *(uint64_t **)&this[186]._os_unfair_lock_opaque;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t v17 = 0;
  unint64_t v6 = 0;
  if (v5)
  {
    uint64_t v7 = v5;
    do
    {
      ++v6;
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v17, v5, v6);
  char v8 = (unsigned int *)v17;
  AudioTimeStampFlags v9 = v18;
  os_unfair_lock_unlock(v4);
  uint64_t v17 = 0x676C6F6261657245;
  LODWORD(v18) = 0;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (*a2 == v12)
  {
    uint64_t v12 = *a2;
  }
  else
  {
    while (!CAPropertyAddress::IsCongruentAddress((CAPropertyAddress *)&v17, v11, v10))
    {
      if (++v11 == v12)
      {
        uint64_t v11 = v12;
        break;
      }
    }
  }
  if (v8 != v9)
  {
    unint64_t v13 = v8;
    do
    {
      uint64_t v14 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v13);
      uint64_t v16 = (HALS_ObjectMap *)v14;
      if (v14)
      {
        if (v11 != v12) {
          (*(void (**)(void))(**(void **)(v14 + 96) + 224))(*(void *)(v14 + 96));
        }
        (*(void (**)(void *))(**((void **)v16 + 12) + 216))(*((void **)v16 + 12));
      }
      HALS_ObjectMap::ReleaseObject(v16, v15);
      ++v13;
    }
    while (v13 != v9);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1BAF01F98(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::ResumeAllContexts(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  BOOL v3 = *(uint64_t **)(a1 + 744);
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v12 = 0;
  unint64_t v4 = 0;
  if (v3)
  {
    uint64_t v5 = v3;
    do
    {
      ++v4;
      uint64_t v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v12, v3, v4);
  unint64_t v6 = v12;
  uint64_t v7 = v13;
  os_unfair_lock_unlock(v2);
  if (v6 != v7)
  {
    char v8 = v6;
    do
    {
      uint64_t v9 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v8);
      uint64_t v11 = (HALS_ObjectMap *)v9;
      if (v9) {
        (*(void (**)(void, void))(**(void **)(v9 + 96) + 200))(*(void *)(v9 + 96), *(unsigned int *)(a1 + 16));
      }
      HALS_ObjectMap::ReleaseObject(v11, v10);
      ++v8;
    }
    while (v8 != v7);
  }
  if (v6)
  {
    operator delete(v6);
  }
}

void sub_1BAF020E0(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::PauseAllContexts(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (os_unfair_lock_s *)(a1 + 708);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 708));
  uint64_t v5 = *(uint64_t **)(a1 + 744);
  uint8x8_t v26 = 0;
  uint64_t v27 = 0;
  unint64_t v25 = 0;
  unint64_t v6 = 0;
  if (v5)
  {
    uint64_t v7 = v5;
    do
    {
      ++v6;
      uint64_t v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>,std::__hash_const_iterator<std::__hash_node<unsigned int,void *> *>>((char *)&v25, v5, v6);
  char v8 = v25;
  uint64_t v9 = v26;
  os_unfair_lock_unlock(v4);
  if (v8 != v9)
  {
    uint64_t v10 = v8;
    do
    {
      unsigned int v11 = *v10;
      uint64_t v12 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v10);
      uint64_t v14 = (HALS_ObjectMap *)v12;
      if (v12
        && (*(unsigned int (**)(void, void))(**(void **)(v12 + 96) + 192))(*(void *)(v12 + 96), *(unsigned int *)(a1 + 16)))
      {
        uint64_t v16 = *(unsigned int **)(a2 + 8);
        unint64_t v15 = *(void *)(a2 + 16);
        if ((unint64_t)v16 >= v15)
        {
          uint64_t v18 = *(unsigned int **)a2;
          uint64_t v19 = ((uint64_t)v16 - *(void *)a2) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v21 = v15 - (void)v18;
          if (v21 >> 1 > v20) {
            unint64_t v20 = v21 >> 1;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v20;
          }
          if (v22)
          {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v22);
            uint64_t v18 = *(unsigned int **)a2;
            uint64_t v16 = *(unsigned int **)(a2 + 8);
          }
          else
          {
            unint64_t v13 = 0;
          }
          unint64_t v23 = (unsigned int *)(v22 + 4 * v19);
          *unint64_t v23 = v11;
          uint64_t v17 = v23 + 1;
          while (v16 != v18)
          {
            unsigned int v24 = *--v16;
            *--unint64_t v23 = v24;
          }
          *(void *)a2 = v23;
          *(void *)(a2 + 8) = v17;
          *(void *)(a2 + 16) = v22 + 4 * (void)v13;
          if (v18) {
            operator delete(v18);
          }
        }
        else
        {
          *uint64_t v16 = v11;
          uint64_t v17 = v16 + 1;
        }
        *(void *)(a2 + 8) = v17;
      }
      HALS_ObjectMap::ReleaseObject(v14, v13);
      ++v10;
    }
    while (v10 != v9);
  }
  if (v8)
  {
    operator delete(v8);
  }
}

void sub_1BAF022F8(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::UnregisterIOContext(os_unfair_lock_s *this, HALS_IOContext *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = *((_DWORD *)a2 + 4);
    int v9 = 136315650;
    uint64_t v10 = "HALS_MultiTap.cpp";
    __int16 v11 = 1024;
    int v12 = 1213;
    __int16 v13 = 1024;
    unsigned int v14 = v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Engine::UnregisterIOContext: unregistering IOContext %d", (uint8_t *)&v9, 0x18u);
  }
  uint64_t v5 = this + 177;
  os_unfair_lock_lock(this + 177);
  unint64_t v6 = this + 182;
  unsigned int v7 = *((_DWORD *)a2 + 4);
  char v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, v7);
  if (v8)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v6, v8);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 136315650;
    uint64_t v10 = "HALS_MultiTap.cpp";
    __int16 v11 = 1024;
    int v12 = 1223;
    __int16 v13 = 1024;
    unsigned int v14 = v7;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Engine::UnregisterIOContext: unregistering IOContext %d, but it wasn't registered", (uint8_t *)&v9, 0x18u);
  }
  os_unfair_lock_unlock(v5);
}

void HALS_MultiTap_Engine::RegisterIOContext(os_unfair_lock_s *this, HALS_IOContext *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((_DWORD *)a2 + 4);
    int v5 = 136315650;
    unint64_t v6 = "HALS_MultiTap.cpp";
    __int16 v7 = 1024;
    int v8 = 1205;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Engine::RegisterIOContext: registering IOContext %d", (uint8_t *)&v5, 0x18u);
  }
  os_unfair_lock_lock(this + 177);
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int>((uint64_t)&this[182], *((_DWORD *)a2 + 4), *((_DWORD *)a2 + 4));
  os_unfair_lock_unlock(this + 177);
}

void sub_1BAF025A4(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

void HALS_MultiTap_Engine::~HALS_MultiTap_Engine(HALS_MultiTap_Engine *this)
{
  HALS_MultiTap_Engine::~HALS_MultiTap_Engine(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F14848B0;
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)this + 728);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 90);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  HALS_IOEngine::~HALS_IOEngine(this);
}

void HALS_MultiTap_Writer_State::initialize(HALS_MultiTap_Writer_State *this)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  long long v1 = *((_OWORD *)this + 12);
  long long v2 = *((_OWORD *)this + 11);
  long long v3 = v1;
  uint64_t v4 = *((void *)this + 26);
  *(void *)&long long v2 = **((void **)this + 1);
  operator new();
}

void sub_1BAF029BC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(exception_object);
    *(void *)(v2 + 152) = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)(v3 - 64) = 136315394;
      *(void *)(v3 - 60) = "HALS_MultiTap.cpp";
      *(_WORD *)(v3 - 52) = 1024;
      *(_DWORD *)(v3 - 50) = 128;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap_Writer_State::initialize: HALB_IOBufferManager_Server::AllocateBuffer failed for m_corrected_buffer", (uint8_t *)(v3 - 64), 0x12u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAF02988);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap_Writer_State::teardown(HALS_MultiTap_Writer_State *this)
{
  uint64_t v2 = *((void *)this + 16);
  *((void *)this + 16) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (HALB_IOBufferManager_Server *)*((void *)this + 18);
  if (v3)
  {
    HALB_IOBufferManager_Server::FreeBuffer(v3, *((_DWORD *)this + 50) * *((_DWORD *)this + 34));
    *((void *)this + 18) = 0;
  }
  uint64_t v4 = (HALB_IOBufferManager_Server *)*((void *)this + 19);
  if (v4)
  {
    HALB_IOBufferManager_Server::FreeBuffer(v4, *((_DWORD *)this + 50) * *((_DWORD *)this + 34));
    *((void *)this + 19) = 0;
  }
  *((void *)this + 17) = 0;
  *((void *)this + 20) = 0;
}

uint64_t HALS_MultiTap::copy_engine(HALS_MultiTap *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  long long v1 = (HALS_ObjectMap *)*((unsigned int *)this + 4);
  if (!v1) {
    operator new();
  }
  return HALS_ObjectMap::CopyObjectByObjectID(v1);
}

void sub_1BAF02D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(v13);
    uint64_t v15 = (std::__shared_weak_count *)*((void *)v12 + 90);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    HALS_IOEngine::~HALS_IOEngine(v12);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_MultiTap::register_meta_device(os_unfair_lock_s *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315650;
    __int16 v7 = "HALS_MultiTap.cpp";
    __int16 v8 = 1024;
    int v9 = 211;
    __int16 v10 = 1024;
    unsigned int v11 = a2;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::register_meta_device: registering IOContext %d", (uint8_t *)&v6, 0x18u);
  }
  uint64_t v4 = this + 18;
  os_unfair_lock_lock(this + 18);
  uint64_t v5 = this + 20;
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2)&& os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    __int16 v7 = "HALS_MultiTap.cpp";
    __int16 v8 = 1024;
    int v9 = 214;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::register_meta_device: meta device already is already registered", (uint8_t *)&v6, 0x12u);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v5, a2, a2);
  os_unfair_lock_unlock(v4);
}

void sub_1BAF02F3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_MultiTap::unregister_meta_device(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315650;
    __int16 v8 = "HALS_MultiTap.cpp";
    __int16 v9 = 1024;
    int v10 = 220;
    __int16 v11 = 1024;
    unsigned int v12 = a2;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::unregister_meta_device: unregistering IOContext %d", (uint8_t *)&v7, 0x18u);
  }
  uint64_t v4 = a1 + 18;
  os_unfair_lock_lock(a1 + 18);
  uint64_t v5 = a1 + 20;
  int v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2);
  if (v6)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v5, v6);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    __int16 v8 = "HALS_MultiTap.cpp";
    __int16 v9 = 1024;
    int v10 = 223;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::unregister_meta_device: meta device already is not registered", (uint8_t *)&v7, 0x12u);
  }
  os_unfair_lock_unlock(v4);
}

void HALS_MultiTap::set_format(HALS_MultiTap *this, long long *a2, uint64_t a3)
{
  int v3 = a3;
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if ((a3 & 0xFF00000000) == 0) {
    int v3 = *((_DWORD *)this + 16);
  }
  if (v3 == 1)
  {
    if (*((_DWORD *)a2 + 7) != 2)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v43 = **(NSObject ***)buf;
      if ((void)v66) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
      }
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        v44 = pthread_self();
        mach_port_t v45 = pthread_mach_thread_np(v44);
        *(_DWORD *)buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v45;
        LOWORD(v66) = 2080;
        *(void *)((char *)&v66 + 2) = "HALS_MultiTap.cpp";
        WORD5(v66) = 1024;
        HIDWORD(v66) = 439;
        LOWORD(v67) = 2080;
        *(void *)((char *)&v67 + 2) = "not (format.mChannelsPerFrame == 2)";
        _os_log_error_impl(&dword_1BAA78000, v43, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format must be stereo for stereo mixdown", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Format must be stereo for stereo mixdown", (uint64_t)&v54);
      std::logic_error::logic_error(&v55, &v54);
      v55.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v56, &v55);
      uint64_t v58 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      int v61 = -1;
      v56.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      v57 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
      *((void *)&v67 + 1) = "void HALS_MultiTap::set_format(const CA::StreamDescription &, std::optional<HALS_MultiChan"
                              "nelMixer::Mixdown>)";
      v68 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
      int v69 = 439;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v49);
      long long v52 = v49;
      uint64_t v53 = v50;
      long long v49 = 0uLL;
      uint64_t v50 = 0;
      std::string __p = &unk_1F148AA90;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
  }
  else if (!v3 && *((_DWORD *)a2 + 7) != 1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v6 = **(NSObject ***)buf;
    if ((void)v66) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      LOWORD(v66) = 2080;
      *(void *)((char *)&v66 + 2) = "HALS_MultiTap.cpp";
      WORD5(v66) = 1024;
      HIDWORD(v66) = 436;
      LOWORD(v67) = 2080;
      *(void *)((char *)&v67 + 2) = "not (format.mChannelsPerFrame == 1)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Format must be mono for mono mixdown", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v62);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Format must be mono for mono mixdown", (uint64_t)&v54);
    std::logic_error::logic_error(&v55, &v54);
    v55.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v56, &v55);
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v60 = 0;
    int v61 = -1;
    v56.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    v57 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v56);
    *((void *)&v67 + 1) = "void HALS_MultiTap::set_format(const CA::StreamDescription &, std::optional<HALS_MultiChanne"
                            "lMixer::Mixdown>)";
    v68 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_MultiTap.cpp";
    int v69 = 436;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v49);
    long long v52 = v49;
    uint64_t v53 = v50;
    long long v49 = 0uLL;
    uint64_t v50 = 0;
    std::string __p = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v9 = HALS_MultiTap::copy_engine(this);
  int v10 = (HALS_ObjectMap *)v9;
  v56.__vftable = 0;
  v56.__imp_.__imp_ = 0;
  v57 = 0;
  if (v9) {
    (*(void (**)(uint64_t, std::logic_error *))(*(void *)v9 + 216))(v9, &v56);
  }
  *(void *)buf = (char *)this + 152;
  LOBYTE(v66) = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 152));
  os_unfair_lock_lock((os_unfair_lock_t)this + 30);
  os_unfair_lock_lock((os_unfair_lock_t)this + 102);
  uint64_t v11 = *((void *)this + 65);
  *((void *)this + 65) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  unsigned int v12 = (long long *)((char *)this + 24);
  *((void *)this + 52) = (uint64_t)(*((double *)this + 3) * 0.25);
  *((void *)this + 53) = 0;
  uint64_t v13 = (HALS_MultiTap_Writer_State **)*((void *)this + 41);
  unsigned int v14 = (HALS_MultiTap_Writer_State **)*((void *)this + 42);
  while (v13 != v14)
  {
    uint64_t v15 = *v13;
    v13 += 2;
    HALS_MultiTap_Writer_State::teardown(v15);
  }
  long long v16 = *a2;
  long long v17 = a2[1];
  *((void *)this + 7) = *((void *)a2 + 4);
  *unsigned int v12 = v16;
  *(_OWORD *)((char *)this + 40) = v17;
  *((_DWORD *)this + 16) = v3;
  *(void *)&long long v16 = *((void *)this + 3);
  *((double *)this + 18) = 24000000.0 / *(double *)&v16;
  *((void *)this + 17) = 0;
  *((void *)this + 52) = (uint64_t)(*(double *)&v16 * 0.25);
  if (*((void *)this + 16))
  {
    *((void *)this + 17) = mach_absolute_time();
    HALS_MultiTap::_allocate_ring_buffer(this);
  }
  uint64_t v18 = (uint64_t *)*((void *)this + 41);
  if (v18 != *((uint64_t **)this + 42))
  {
    uint64_t v19 = *v18;
    int v20 = *((_DWORD *)this + 16);
    long long v21 = *v12;
    long long v22 = *(_OWORD *)((char *)this + 40);
    *(void *)(v19 + 208) = *((void *)this + 7);
    *(_OWORD *)(v19 + 176) = v21;
    *(_OWORD *)(v19 + 192) = v22;
    int v23 = *(_DWORD *)(v19 + 40);
    long long v24 = *v12;
    long long v25 = *(_OWORD *)((char *)this + 40);
    *(void *)(v19 + 104) = *((void *)this + 7);
    *(_OWORD *)(v19 + 88) = v25;
    *(_OWORD *)(v19 + 72) = v24;
    if (v20 == 2 || v23 != v20)
    {
      *(_DWORD *)(v19 + 40) = v20;
      uint64_t v26 = *(void *)(v19 + 48);
      if (*(void *)(v19 + 56) != v26)
      {
        unint64_t v27 = 0;
        uint64_t v28 = 56;
        do
        {
          std::vector<std::vector<std::byte>>::__clear[abi:ne180100]((uint64_t *)(v26 + v28));
          HALS_MultiChannelMixer::SetupGainTable((HALS_MultiChannelMixer *)(v19 + 40), v27++);
          uint64_t v26 = *(void *)(v19 + 48);
          v28 += 80;
        }
        while (v27 < 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(v19 + 56) - v26) >> 4));
      }
    }
    HALS_MultiTap_Writer_State::initialize((HALS_MultiTap_Writer_State *)v19);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)this + 102);
  os_unfair_lock_unlock((os_unfair_lock_t)this + 30);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)buf);
  if (v10)
  {
    std::string __p = 0;
    long long v52 = 0uLL;
    (*(void (**)(HALS_ObjectMap *, void **))(*(void *)v10 + 240))(v10, &__p);
    uint64_t v30 = (HALS_IOContext **)__p;
    unint64_t v29 = (HALS_IOContext **)v52;
    if (__p != (void *)v52)
    {
      do
      {
        __int16 v31 = *v30;
        CFDictionaryRef v32 = (const __CFDictionary *)(*(uint64_t (**)(void))(**((void **)*v30 + 12) + 568))(*((void *)*v30 + 12));
        uint64_t v33 = (AMCP::Log::Scope_Registry *)HALS_IOContext::SetComposition(v31, v32);
        int v34 = (int)v33;
        if (v33)
        {
          AMCP::Log::Scope_Registry::get(v33);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v35 = **(NSObject ***)buf;
          if ((void)v66) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v66);
          }
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            uint64_t v36 = pthread_self();
            mach_port_t v37 = pthread_mach_thread_np(v36);
            *(_DWORD *)buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v37;
            LOWORD(v66) = 2080;
            *(void *)((char *)&v66 + 2) = "HALS_MultiTap.cpp";
            WORD5(v66) = 1024;
            HIDWORD(v66) = 498;
            LOWORD(v67) = 1024;
            *(_DWORD *)((char *)&v67 + 2) = v34;
            _os_log_error_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_IOContext::SetComposition returned an error during tap sample rate change: %u", buf, 0x1Eu);
          }
        }
        ++v30;
      }
      while (v30 != v29);
    }
    (*(void (**)(HALS_ObjectMap *, std::logic_error *))(*(void *)v10 + 224))(v10, &v56);
    if (__p)
    {
      *(void *)&long long v52 = __p;
      operator delete(__p);
    }
  }
  uint64_t v38 = (os_unfair_lock_s *)((char *)this + 72);
  os_unfair_lock_lock((os_unfair_lock_t)this + 18);
  if (*((void *)this + 13))
  {
    uint64_t v47 = 0;
    v48 = 0;
    HALS_System::GetInstance(&__p, 0, &v47);
    v39 = __p;
    std::unordered_set<unsigned int>::unordered_set((uint64_t)v46, (uint64_t)this + 80);
    v64 = 0;
    v40 = operator new(0x30uLL);
    void *v40 = &unk_1F1484C78;
    std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::__hash_table((uint64_t)(v40 + 1), v46);
    v64 = v40;
    *(void *)buf = MEMORY[0x1E4F143A8];
    *(void *)&long long v66 = 1174405120;
    *((void *)&v66 + 1) = ___ZN11HALS_System31ServerHighPriorityAsyncDispatchENSt3__18functionIFvvEEE_block_invoke;
    *(void *)&long long v67 = &__block_descriptor_tmp_187;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v67 + 8, (uint64_t)v63);
    unsigned __int8 v41 = atomic_load((unsigned __int8 *)v39 + 928);
    if (v41) {
      atomic_store(1u, (unsigned __int8 *)v39 + 929);
    }
    dispatch_async(*((dispatch_queue_t *)v39 + 112), buf);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)&v67 + 1);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v63);
    std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v46);
    if ((void)v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v52);
    }
    if (v48) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v48);
    }
  }
  os_unfair_lock_unlock(v38);
  if (v56.__vftable)
  {
    v56.__imp_.__imp_ = (const char *)v56.__vftable;
    operator delete(v56.__vftable);
  }
  HALS_ObjectMap::ReleaseObject(v10, v42);
}

void sub_1BAF03A08(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN13HALS_MultiTap10set_formatERKN2CA17StreamDescriptionENSt3__18optionalIN22HALS_MultiChannelMixer7MixdownEEEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  long long v1 = (uint64_t **)(a1 + 24);
  while (1)
  {
    long long v1 = (uint64_t **)*v1;
    if (!v1) {
      break;
    }
    uint64_t v2 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v1 + 4));
    uint64_t v4 = (unsigned int *)v2;
    if (v2)
    {
      uint64_t v26 = 0;
      unint64_t v27 = &v26;
      uint64_t v28 = 0x4802000000;
      unint64_t v29 = __Block_byref_object_copy__5289;
      uint64_t v30 = __Block_byref_object_dispose__5290;
      long long __p = 0u;
      long long v32 = 0u;
      uint64_t v20 = 0;
      long long v21 = &v20;
      uint64_t v22 = 0x4002000000;
      int v23 = __Block_byref_object_copy__1;
      long long v24 = __Block_byref_object_dispose__2;
      memset(v25, 0, sizeof(v25));
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = ___ZN15HALS_MetaDevice25HandleTapSampleRateChangeEv_block_invoke;
      v19[3] = &unk_1E6231C98;
      v19[5] = &v20;
      v19[6] = v2;
      v19[4] = &v26;
      uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 56))(v2);
      HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v19);
      int v6 = (const AudioObjectPropertyAddress *)v27[5];
      int v7 = (const AudioObjectPropertyAddress *)v27[6];
      if (v6 != v7) {
        HALS_Object::PropertiesChanged((HALS_Object *)v4, (HALS_NotificationManager *)v4[4], 0, -1431655765 * ((unint64_t)((char *)v7 - (char *)v6) >> 2), v6);
      }
      uint64_t v8 = v21[5];
      uint64_t v9 = v21[6];
      if (((v9 - v8) & 0x1FFFFFFFE0) != 0)
      {
        if (v9 == v8) {
LABEL_21:
        }
          std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        while (1)
        {
          uint64_t v12 = v8 + v10;
          uint64_t v13 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(v8 + v10 + 24));
          uint64_t v15 = (HALS_ObjectMap *)v13;
          uint64_t v16 = *(void *)(v12 + 8);
          if (*(void *)v12 != v16 && v13 != 0) {
            HALS_Object::PropertiesChanged((HALS_Object *)v4, (HALS_NotificationManager *)*(unsigned int *)(v13 + 16), 0, -1431655765 * ((unint64_t)(v16 - *(void *)v12) >> 2), *(const AudioObjectPropertyAddress **)v12);
          }
          HALS_ObjectMap::ReleaseObject(v15, v14);
          ++v11;
          uint64_t v8 = v21[5];
          uint64_t v18 = v21[6] - v8;
          if (v11 >= ((unint64_t)v18 >> 5)) {
            break;
          }
          v10 += 32;
          if (v11 >= v18 >> 5) {
            goto LABEL_21;
          }
        }
      }
      _Block_object_dispose(&v20, 8);
      uint64_t v33 = (void **)v25;
      std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100](&v33);
      _Block_object_dispose(&v26, 8);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v4, v3);
  }
}

void sub_1BAF03D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36)
{
  _Block_object_dispose(&a22, 8);
  *(void *)(v38 - 128) = v37;
  std::vector<CAPropertyAddressList>::__destroy_vector::operator()[abi:ne180100]((void ***)(v38 - 128));
  _Block_object_dispose(&a30, 8);
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  HALS_ObjectMap::ReleaseObject(v36, v40);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 8);
}

uint64_t std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1484C78;
  return std::unordered_set<unsigned int>::unordered_set((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  *uint64_t v2 = &unk_1F1484C78;
  std::unordered_set<unsigned int>::unordered_set((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAF03E60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1484C78;
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0,std::allocator<HALS_MultiTap::set_format(CA::StreamDescription const&,std::optional<HALS_MultiChannelMixer::Mixdown>)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1484C78;
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)(a1 + 1));
  return a1;
}

void HALS_MultiTap::fetch_writer_state(HALS_MultiTap *this, uint64_t a2, unsigned int a3)
{
  int v6 = (os_unfair_lock_s *)(a2 + 320);
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 320));
  int v7 = *(char **)(a2 + 328);
  uint64_t v8 = *(char **)(a2 + 336);
  if (v8 == v7) {
    goto LABEL_11;
  }
  unint64_t v9 = (v8 - v7) >> 4;
  do
  {
    unint64_t v10 = v9 >> 1;
    unint64_t v11 = &v7[16 * (v9 >> 1)];
    uint64_t v13 = *(unsigned int **)v11;
    uint64_t v12 = v11 + 16;
    v9 += ~(v9 >> 1);
    if (*v13 < a3) {
      int v7 = v12;
    }
    else {
      unint64_t v9 = v10;
    }
  }
  while (v9);
  if (v8 == v7 || (unsigned int v14 = *(_DWORD **)v7, **(_DWORD **)v7 != a3))
  {
LABEL_11:
    *(void *)this = 0;
    *((void *)this + 1) = 0;
  }
  else
  {
    uint64_t v15 = *((void *)v7 + 1);
    *(void *)this = v14;
    *((void *)this + 1) = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
  }

  os_unfair_lock_unlock(v6);
}

BOOL AMCP::Utility::Sorted_Vector<std::shared_ptr<HALS_MultiTap_Writer_State>,HALS_MultiTap_Writer_State_Ptr_Extract_Key,std::less<unsigned int>,std::allocator<std::shared_ptr<HALS_MultiTap_Writer_State>>>::find(_DWORD **a1, _DWORD **a2, unsigned int a3)
{
  if (a2 == a1)
  {
    int v3 = a2;
  }
  else
  {
    int v3 = a1;
    unint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
    do
    {
      unint64_t v5 = v4 >> 1;
      int v6 = &v3[2 * (v4 >> 1)];
      uint64_t v8 = *v6;
      int v7 = v6 + 2;
      v4 += ~(v4 >> 1);
      if (*v8 < a3) {
        int v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return v3 != a2 && **v3 == a3;
}

void std::__shared_ptr_emplace<HALS_MultiTap_Writer_State>::__on_zero_shared(uint64_t a1)
{
  HALS_MultiTap_Writer_State::teardown((HALS_MultiTap_Writer_State *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v4 = (void **)(a1 + 72);
  std::vector<HALS_MultiChannelMixer::StreamInfo>::__destroy_vector::operator()[abi:ne180100](&v4);
  int v3 = *(void **)(a1 + 32);
  if (v3)
  {
    *(void *)(a1 + 40) = v3;
    operator delete(v3);
  }
}

void std::__shared_ptr_emplace<HALS_MultiTap_Writer_State>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1484CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_MultiTap_Writer_State>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1484CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t HALS_MultiTap::writer_stop(HALS_MultiTap *this, unsigned int a2)
{
  uint64_t v18 = (char *)this + 152;
  char v19 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)((char *)this + 152));
  HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v16, (uint64_t)this, a2);
  if (v16)
  {
    HALS_MultiTap::stop((os_unfair_lock_s *)this);
    os_unfair_lock_lock((os_unfair_lock_t)this + 80);
    unint64_t v4 = (char *)*((void *)this + 42);
    if (AMCP::Utility::Sorted_Vector<std::shared_ptr<HALS_MultiTap_Writer_State>,HALS_MultiTap_Writer_State_Ptr_Extract_Key,std::less<unsigned int>,std::allocator<std::shared_ptr<HALS_MultiTap_Writer_State>>>::find(*((_DWORD ***)this + 41), (_DWORD **)v4, a2))
    {
      int v6 = v5;
      int v7 = v5 + 16;
      while (v7 != v4)
      {
        uint64_t v8 = *(_DWORD **)v7;
        v7 += 16;
        if (*v8 != a2)
        {
          unint64_t v9 = v7 - 16;
          goto LABEL_8;
        }
      }
      unint64_t v9 = v4;
LABEL_8:
      if (v9 != v5)
      {
        if (v9 != v4)
        {
          uint64_t v10 = 16 * ((v9 - v5) >> 4);
          do
          {
            unint64_t v11 = &v6[v10];
            long long v12 = *(_OWORD *)&v6[v10];
            *(void *)unint64_t v11 = 0;
            *((void *)v11 + 1) = 0;
            uint64_t v13 = (std::__shared_weak_count *)*((void *)v6 + 1);
            *(_OWORD *)int v6 = v12;
            if (v13) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            }
            v6 += 16;
          }
          while (&v6[v10] != v4);
          unint64_t v4 = (char *)*((void *)this + 42);
        }
        while (v4 != v6)
        {
          unsigned int v14 = (std::__shared_weak_count *)*((void *)v4 - 1);
          if (v14) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v14);
          }
          v4 -= 16;
        }
        *((void *)this + 42) = v6;
      }
    }
    os_unfair_lock_unlock((os_unfair_lock_t)this + 80);
    kdebug_trace();
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v18);
}

uint64_t HALS_MultiTap::writer_anchor_time(HALS_MultiTap *this, unsigned int a2, const AudioTimeStamp *a3)
{
  uint64_t v13 = (char *)this + 152;
  BOOL v6 = std::__shared_mutex_base::try_lock_shared((std::__shared_mutex_base *)((char *)this + 152));
  BOOL v14 = v6;
  if (v6)
  {
    HALS_MultiTap::fetch_writer_state((HALS_MultiTap *)&v11, (uint64_t)this, a2);
    uint64_t v7 = v11;
    if (v11)
    {
      *(void *)(v11 + 280) = 0;
      UInt64 mHostTime = a3->mHostTime;
      v10.double mSampleTime = 0.0;
      v10.UInt64 mHostTime = mHostTime;
      memset(&v10.mRateScalar, 0, 40);
      *(void *)&v10.AudioTimeStampFlags mFlags = 2;
      *(_DWORD *)(v7 + 272) = 3;
      HALS_MultiTap::translate_time((os_unfair_lock_s *)this, &v10, (AudioTimeStamp *)(v7 + 216));
      *(double *)(v7 + 216) = floor(*(double *)(v7 + 216) * (**(double **)(v7 + 8) / *((double *)this + 3)));
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v13);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_MultiTap::write clip resampler output frames from %u to %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF044E8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_0,std::tuple<unsigned int,char const*,int>>::perform(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    LODWORD(v8) = 67109634;
    HIDWORD(v8) = v4;
    *(_WORD *)unint64_t v9 = 2080;
    *(void *)&v9[2] = v5;
    __int16 v10 = 1024;
    int v11 = v6;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d HALS_MultiTap::write clip resampler input frames 0", (uint8_t *)&v8, 0x18u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF04668(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<HALS_MultiTap::write(unsigned int,long long,AudioBufferList const*,AudioTimeStamp const*)::$_0,std::tuple<unsigned int,char const*,int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__value_func<void ()(HALS_MultiTap::Reader_Action_State)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void HALS_MultiTap::register_autostart_context(os_unfair_lock_s *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315650;
    int v7 = "HALS_MultiTap.cpp";
    __int16 v8 = 1024;
    int v9 = 1058;
    __int16 v10 = 1024;
    unsigned int v11 = a2;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::register_autostart_context: registering IOContext %d", (uint8_t *)&v6, 0x18u);
  }
  int v4 = this + 18;
  os_unfair_lock_lock(this + 18);
  uint64_t v5 = this + 118;
  if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2)&& os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    int v7 = "HALS_MultiTap.cpp";
    __int16 v8 = 1024;
    int v9 = 1061;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::register_autostart_context: context already is already registered", (uint8_t *)&v6, 0x12u);
  }
  std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t)v5, a2, a2);
  os_unfair_lock_unlock(v4);
}

void sub_1BAF048B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_MultiTap::unregister_autostart_context(os_unfair_lock_s *this, unsigned int a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315650;
    __int16 v8 = "HALS_MultiTap.cpp";
    __int16 v9 = 1024;
    int v10 = 1069;
    __int16 v11 = 1024;
    unsigned int v12 = a2;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_MultiTap::unregister_autostart_context: unregistering IOContext %d", (uint8_t *)&v7, 0x18u);
  }
  int v4 = this + 18;
  os_unfair_lock_lock(this + 18);
  uint64_t v5 = this + 118;
  int v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v5, a2);
  if (v6)
  {
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v5, v6);
  }
  else if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v7 = 136315394;
    __int16 v8 = "HALS_MultiTap.cpp";
    __int16 v9 = 1024;
    int v10 = 1072;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_MultiTap::unregister_autostart_context: context is not registered", (uint8_t *)&v7, 0x12u);
  }
  os_unfair_lock_unlock(v4);
}

uint64_t HALB_IOThread::DispatchPThread(HALB_IOThread *this, void *(__cdecl *a2)(void *), void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = (pthread_t *)((char *)this + 8);
  if (*((void *)this + 1))
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 37;
    }
    LODWORD(buf.__sig) = 136315394;
    *(uint64_t *)((char *)&buf.__sig + 4) = (uint64_t)"HALB_IOThread.cpp";
    *(_WORD *)&buf.__opaque[4] = 1024;
    *(_DWORD *)&buf.__opaque[6] = 326;
    int v4 = MEMORY[0x1E4F14500];
    uint64_t v5 = "%25s:%-5d  HALB_IOThread::_Start: there already is a thread";
LABEL_4:
    _os_log_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, v5, (uint8_t *)&buf, 0x12u);
    return 37;
  }
  if (*((_DWORD *)this + 40) != 1735552612 && *((_DWORD *)this + 40) != 2002872692)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      return 37;
    }
    LODWORD(buf.__sig) = 136315394;
    *(uint64_t *)((char *)&buf.__sig + 4) = (uint64_t)"HALB_IOThread.cpp";
    *(_WORD *)&buf.__opaque[4] = 1024;
    *(_DWORD *)&buf.__opaque[6] = 327;
    int v4 = MEMORY[0x1E4F14500];
    uint64_t v5 = "%25s:%-5d  HALB_IOThread::_Start: the state is not the ground or waiting state";
    goto LABEL_4;
  }
  uint64_t v11 = pthread_attr_init(&buf);
  if (!v11)
  {
    uint64_t v12 = pthread_attr_setdetachstate(&buf, 2);
    if (v12)
    {
      uint64_t v6 = v12;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)char v19 = 136315394;
        uint64_t v20 = "HALB_IOThread.cpp";
        __int16 v21 = 1024;
        int v22 = 334;
        uint64_t v13 = MEMORY[0x1E4F14500];
        __int16 v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to set the detached attribute";
LABEL_29:
        _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, v14, v19, 0x12u);
      }
    }
    else
    {
      uint64_t v15 = pthread_attr_getschedparam(&buf, &v18);
      if (v15)
      {
        uint64_t v6 = v15;
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)char v19 = 136315394;
          uint64_t v20 = "HALB_IOThread.cpp";
          __int16 v21 = 1024;
          int v22 = 339;
          uint64_t v13 = MEMORY[0x1E4F14500];
          __int16 v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to get the default scheduling parameters";
          goto LABEL_29;
        }
      }
      else
      {
        v18.sched_priority = 63;
        uint64_t v16 = pthread_attr_setschedparam(&buf, &v18);
        if (v16)
        {
          uint64_t v6 = v16;
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)char v19 = 136315394;
            uint64_t v20 = "HALB_IOThread.cpp";
            __int16 v21 = 1024;
            int v22 = 343;
            uint64_t v13 = MEMORY[0x1E4F14500];
            __int16 v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to set the priority";
            goto LABEL_29;
          }
        }
        else
        {
          uint64_t v17 = pthread_attr_setschedpolicy(&buf, 4);
          if (v17)
          {
            uint64_t v6 = v17;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v19 = 136315394;
              uint64_t v20 = "HALB_IOThread.cpp";
              __int16 v21 = 1024;
              int v22 = 346;
              uint64_t v13 = MEMORY[0x1E4F14500];
              __int16 v14 = "%25s:%-5d  HALB_IOThread::_Start: failed to set the scheduling policy";
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v6 = pthread_create(v3, &buf, a2, a3);
            if (!v6)
            {
              if (*v3)
              {
                uint64_t v6 = 0;
                *((_DWORD *)this + 40) = 1937011316;
                goto LABEL_30;
              }
              uint64_t v6 = 35;
            }
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v19 = 136315394;
              uint64_t v20 = "HALB_IOThread.cpp";
              __int16 v21 = 1024;
              int v22 = 354;
              uint64_t v13 = MEMORY[0x1E4F14500];
              __int16 v14 = "%25s:%-5d  HALB_IOThread::_Start: could not create a thread";
              goto LABEL_29;
            }
          }
        }
      }
    }
LABEL_30:
    pthread_attr_destroy(&buf);
    return v6;
  }
  uint64_t v6 = v11;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)char v19 = 136315394;
    uint64_t v20 = "HALB_IOThread.cpp";
    __int16 v21 = 1024;
    int v22 = 330;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_Start: the attributes could not be created", v19, 0x12u);
  }
  return v6;
}

uint64_t HALB_IOThread::ConfigureThreadForRealtimePriority(_opaque_pthread_t **this, _opaque_pthread_t *a2, int a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315394;
    __int16 v9 = "HALB_IOThread.cpp";
    __int16 v10 = 1024;
    int v11 = 57;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForRealtimePriority - must be called from on the thread", (uint8_t *)&v8, 0x12u);
  }
  uint64_t v6 = this[11];
  if (v6 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v8 = 136315394;
    __int16 v9 = "HALB_IOThread.cpp";
    __int16 v10 = 1024;
    int v11 = 58;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForRealtimePriority - this thread ought to lock the lock", (uint8_t *)&v8, 0x12u);
  }
  AMCP::Utility::configure_thread_for_realtime(this[1], a2, a3);
  return 0;
}

BOOL HALB_IOThread::IsCurrentThread(HALB_IOThread *this, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    uint64_t v3 = (_opaque_pthread_t *)*((void *)this + 11);
    if (v3 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315394;
      int v8 = "HALB_IOThread.cpp";
      __int16 v9 = 1024;
      int v10 = 46;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::IsCurrentThread: this thread ought to lock the lock", (uint8_t *)&v7, 0x12u);
    }
  }
  int v4 = (_opaque_pthread_t *)*((void *)this + 1);
  uint64_t v5 = pthread_self();
  return pthread_equal(v4, v5) != 0;
}

AMCP::Log::Scope_Registry *HALB_IOThread::ConfigureThreadForNormalPriority(_opaque_pthread_t **this)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!HALB_IOThread::IsCurrentThread((HALB_IOThread *)this, 1)
    && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    uint64_t v6 = "HALB_IOThread.cpp";
    __int16 v7 = 1024;
    int v8 = 72;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForNormalPriority - must be called from on the thread", (uint8_t *)&v5, 0x12u);
  }
  uint64_t v2 = this[11];
  if (v2 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v5 = 136315394;
    uint64_t v6 = "HALB_IOThread.cpp";
    __int16 v7 = 1024;
    int v8 = 73;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::ConfigureThreadForNormalPriority - this thread ought to lock the lock", (uint8_t *)&v5, 0x12u);
  }
  return AMCP::Utility::configure_thread_for_normal_priority(this[1], v3);
}

uint64_t HALB_IOThread::WaitForState(HALB_IOThread *this, int a2)
{
  uint64_t v6 = (HALB_IOThread *)((char *)this + 16);
  int v7 = HALB_Mutex::Lock((HALB_IOThread *)((char *)this + 16));
  uint64_t v4 = HALB_IOThread::_WaitForState(this, a2);
  HALB_Guard::Locker::~Locker(&v6);
  return v4;
}

void sub_1BAF0524C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
}

uint64_t HALB_IOThread::_WaitForState(HALB_IOThread *this, int a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (_opaque_pthread_t *)*((void *)this + 11);
  if (v4 != pthread_self())
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v13 = 136315394;
      __int16 v14 = "HALB_IOThread.cpp";
      __int16 v15 = 1024;
      int v16 = 184;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::_WaitForState: this thread ought to lock the lock", (uint8_t *)&v13, 0x12u);
    }
    return 1;
  }
  if (*((_DWORD *)this + 40) != a2)
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    while (1)
    {
      unsigned int v9 = v8;
      if (*((_DWORD *)this + 40) == 1735552612 && *((_DWORD *)this + 42) != 1735552612) {
        break;
      }
      unsigned int v7 = HALB_Guard::WaitFor((HALB_IOThread *)((char *)this + 16), 0x3B9ACA00uLL);
      if ((v7 == 60 || v7 == 0) && v9 < 0xE)
      {
        unsigned int v8 = v9 + 1;
        if (*((_DWORD *)this + 40) != a2) {
          continue;
        }
      }
      ++v9;
      break;
    }
    uint64_t v6 = (unsigned int *)((char *)this + 164);
    if (!*((_DWORD *)this + 41))
    {
      if (v9 >= 0xF && *((_DWORD *)this + 40) != a2) {
        return 60;
      }
      goto LABEL_25;
    }
    return *v6;
  }
  uint64_t v6 = (unsigned int *)((char *)this + 164);
  if (*((_DWORD *)this + 41)) {
    return *v6;
  }
  unsigned int v7 = 0;
LABEL_25:
  if (*((_DWORD *)this + 40) == 1735552612 && *((_DWORD *)this + 40) != a2) {
    return 89;
  }
  uint64_t v5 = 0;
  if (v7 && v7 != 60)
  {
    if (*((_DWORD *)this + 40) == a2) {
      return 0;
    }
    else {
      return v7;
    }
  }
  return v5;
}

void HALB_IOThread::PostStateChange(HALB_IOThread *this, int a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (!HALB_IOThread::IsCurrentThread(this, 1) && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    unsigned int v7 = "HALB_IOThread.cpp";
    __int16 v8 = 1024;
    int v9 = 143;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::PostStateChange: must be called from on the thread", (uint8_t *)&v6, 0x12u);
  }
  uint64_t v4 = (_opaque_pthread_t *)*((void *)this + 11);
  if (v4 != pthread_self() && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    int v6 = 136315394;
    unsigned int v7 = "HALB_IOThread.cpp";
    __int16 v8 = 1024;
    int v9 = 144;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_IOThread::PostStateChange: this thread ought to lock the lock", (uint8_t *)&v6, 0x12u);
  }
  if (HALB_IOThread::IsCurrentThread(this, 1))
  {
    uint64_t v5 = (_opaque_pthread_t *)*((void *)this + 11);
    if (v5 == pthread_self())
    {
      *((_DWORD *)this + 42) = *((_DWORD *)this + 40);
      *((_DWORD *)this + 40) = a2;
      HALB_Guard::NotifyAll((pthread_cond_t *)((char *)this + 16));
    }
  }
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionRelease(AMCP::Log::Scope_Registry *a1, AMCP::Log::Scope_Registry *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2 != a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      unint64_t v6 = 0;
      unsigned int v7 = 0;
      int v8 = 47;
      do
      {
        int v9 = &aLibraryCachesC_166[v6];
        if (v8 == 47) {
          unsigned int v7 = &aLibraryCachesC_166[v6];
        }
        int v8 = v9[1];
        if (!v9[1]) {
          break;
        }
      }
      while (v6++ < 0xFFF);
      if (v7) {
        uint64_t v11 = v7 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)unint64_t v27 = 2080;
      *(void *)&v27[2] = v11;
      __int16 v28 = 1024;
      int v29 = 232;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionRelease(IOPMConnection)";
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v33 = 232;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    __int16 v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return 0;
}

void sub_1BAF05840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *Mock_Power_Manager_System_Interface::PMConnectionSetDispatchQueue(AMCP::Log::Scope_Registry *result, AMCP::Log::Scope_Registry *a2, uint64_t a3)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2 != result)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      unint64_t v6 = 0;
      unsigned int v7 = 0;
      int v8 = 47;
      do
      {
        int v9 = &aLibraryCachesC_166[v6];
        if (v8 == 47) {
          unsigned int v7 = &aLibraryCachesC_166[v6];
        }
        int v8 = v9[1];
        if (!v9[1]) {
          break;
        }
      }
      while (v6++ < 0xFFF);
      if (v7) {
        uint64_t v11 = v7 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&v27[2] = v11;
      __int16 v28 = 1024;
      int v29 = 224;
      __int16 v30 = 2080;
      *(void *)__int16 v31 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "virtual void Mock_Power_Manager_System_Interface::PMConnectionSetDispatchQueue(IOPMConnection, "
                         "dispatch_queue_t)";
    long long v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v33 = 224;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    __int16 v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *((void *)a2 + 5) = a3;
  return result;
}

void sub_1BAF05B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionSetNotification(AMCP::Log::Scope_Registry *a1, AMCP::Log::Scope_Registry *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (a2 != a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v5 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      unint64_t v8 = 0;
      int v9 = 0;
      int v10 = 47;
      do
      {
        uint64_t v11 = &aLibraryCachesC_166[v8];
        if (v10 == 47) {
          int v9 = &aLibraryCachesC_166[v8];
        }
        int v10 = v11[1];
        if (!v11[1]) {
          break;
        }
      }
      while (v8++ < 0xFFF);
      if (v9) {
        uint64_t v13 = v9 + 1;
      }
      else {
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = v13;
      __int16 v30 = 1024;
      int v31 = 215;
      __int16 v32 = 2080;
      *(void *)int v33 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionSetNotification(IOPMConnectio"
                         "n, void *, IOPMEventHandlerType)";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v35 = 215;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *((void *)a2 + 7) = a4;
  return 0;
}

void sub_1BAF05E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionAcknowledgeEvent(AMCP::Log::Scope_Registry *a1, AMCP::Log::Scope_Registry *a2)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (a2 != a1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      unint64_t v6 = 0;
      mach_port_t v7 = 0;
      int v8 = 47;
      do
      {
        int v9 = &aLibraryCachesC_166[v6];
        if (v8 == 47) {
          mach_port_t v7 = &aLibraryCachesC_166[v6];
        }
        int v8 = v9[1];
        if (!v9[1]) {
          break;
        }
      }
      while (v6++ < 0xFFF);
      if (v7) {
        uint64_t v11 = v7 + 1;
      }
      else {
        uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v5;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&v27[2] = v11;
      __int16 v28 = 1024;
      int v29 = 207;
      __int16 v30 = 2080;
      *(void *)int v31 = "connection != reinterpret_cast<__IOPMConnection*>(this)";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::runtime_error::runtime_error(&v18, &v17);
    std::runtime_error::runtime_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v20 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionAcknowledgeEvent(IOPMConnecti"
                         "on, IOPMConnectionMessageToken)";
    __int16 v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v33 = 207;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    long long v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return 0;
}

void sub_1BAF0618C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionCreate(AMCP::Log::Scope_Registry *a1, uint64_t a2, uint64_t a3, AMCP::Log::Scope_Registry **a4)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  if (!a4)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v5 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      unint64_t v6 = pthread_self();
      mach_port_t v7 = pthread_mach_thread_np(v6);
      unint64_t v8 = 0;
      int v9 = 0;
      int v10 = 47;
      do
      {
        uint64_t v11 = &aLibraryCachesC_166[v8];
        if (v10 == 47) {
          int v9 = &aLibraryCachesC_166[v8];
        }
        int v10 = v11[1];
        if (!v11[1]) {
          break;
        }
      }
      while (v8++ < 0xFFF);
      if (v9) {
        uint64_t v13 = v9 + 1;
      }
      else {
        uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)int v29 = 2080;
      *(void *)&v29[2] = v13;
      __int16 v30 = 1024;
      int v31 = 198;
      __int16 v32 = 2080;
      *(void *)int v33 = "(connection) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v27);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v19);
    std::runtime_error::runtime_error(&v20, &v19);
    std::runtime_error::runtime_error(&v21, &v20);
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    int v26 = -1;
    v21.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v22 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v21);
    *(void *)&v33[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMConnectionCreate(CFStringRef, IOPMCapab"
                         "ilityBits, IOPMConnection *)";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v35 = 198;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v14);
    long long v17 = v14;
    uint64_t v18 = v15;
    long long v14 = 0uLL;
    uint64_t v15 = 0;
    uint64_t v16 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *a4 = a1;
  return 0;
}

void sub_1BAF064A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMConnectionGetSystemCapabilities(Mock_Power_Manager_System_Interface *this)
{
  return 3;
}

uint64_t Mock_Power_Manager_System_Interface::CancelPowerChange(Mock_Power_Manager_System_Interface *this)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::AllowPowerChange(Mock_Power_Manager_System_Interface *this)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::ServiceClose(Mock_Power_Manager_System_Interface *this)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::DeregisterForSystemPower(Mock_Power_Manager_System_Interface *this, unsigned int *a2)
{
  return 0;
}

uint64_t Mock_Power_Manager_System_Interface::NotificationPortSetDispatchQueue(uint64_t this, IONotificationPort *a2, dispatch_queue_s *a3)
{
  *(void *)(this + 40) = a3;
  return this;
}

uint64_t Mock_Power_Manager_System_Interface::RegisterForSystemPower(Mock_Power_Manager_System_Interface *this, void *a2, IONotificationPort **a3, void (*a4)(void *, unsigned int, unsigned int, void *), unsigned int *a5)
{
  *((void *)this + 4) = a4;
  *a3 = (IONotificationPort *)&Mock_Power_Manager_System_Interface::RegisterForSystemPower(void *,IONotificationPort **,void (*)(void *,unsigned int,unsigned int,void *),unsigned int *)::dummy;
  *a5 = 1;
  return 1;
}

AMCP::Log::Scope_Registry *Mock_Power_Manager_System_Interface::PMUnregisterNotification(AMCP::Log::Scope_Registry *this, uint64_t a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (a2 != 1)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v26);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      unint64_t v5 = 0;
      unint64_t v6 = 0;
      int v7 = 47;
      do
      {
        unint64_t v8 = &aLibraryCachesC_166[v5];
        if (v7 == 47) {
          unint64_t v6 = &aLibraryCachesC_166[v5];
        }
        int v7 = v8[1];
        if (!v8[1]) {
          break;
        }
      }
      while (v5++ < 0xFFF);
      if (v6) {
        int v10 = v6 + 1;
      }
      else {
        int v10 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)int v26 = 2080;
      *(void *)&v26[2] = v10;
      __int16 v27 = 1024;
      int v28 = 128;
      __int16 v29 = 2080;
      *(void *)__int16 v30 = "(handle == 1) == false";
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s FAILURE: Expected NotificationHandle with value of 1", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v24);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"FAILURE: Expected NotificationHandle with value of 1", (uint64_t)&v16);
    std::runtime_error::runtime_error(&v17, &v16);
    std::runtime_error::runtime_error(&v18, &v17);
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    int v23 = -1;
    v18.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::string v19 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v18);
    *(void *)&v30[6] = "virtual void Mock_Power_Manager_System_Interface::PMUnregisterNotification(IOPMNotificationHandle)";
    int v31 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v32 = 128;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v11);
    long long v14 = v11;
    uint64_t v15 = v12;
    long long v11 = 0uLL;
    uint64_t v12 = 0;
    uint64_t v13 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  return this;
}

void sub_1BAF0680C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::PMScheduleUserActivityLevelNotification(uint64_t a1, uint64_t a2, void *aBlock)
{
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 24) = _Block_copy(aBlock);
  return 1;
}

uint64_t Mock_Power_Manager_System_Interface::PMGetUserActivityLevel(Mock_Power_Manager_System_Interface *this, unint64_t *a2, unint64_t *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (!a2)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v4 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      unint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      unint64_t v7 = 0;
      unint64_t v8 = 0;
      int v9 = 47;
      do
      {
        int v10 = &aLibraryCachesC_166[v7];
        if (v9 == 47) {
          unint64_t v8 = &aLibraryCachesC_166[v7];
        }
        int v9 = v10[1];
        if (!v10[1]) {
          break;
        }
        BOOL v11 = v7++ >= 0xFFF;
      }
      while (!v11);
      if (v8) {
        uint64_t v12 = v8 + 1;
      }
      else {
        uint64_t v12 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)uint64_t v36 = 2080;
      *(void *)&v36[2] = v12;
      __int16 v37 = 1024;
      int v38 = 105;
      __int16 v39 = 2080;
      *(void *)v40 = "(outUserActive) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::runtime_error::runtime_error(&v27, &v26);
    std::runtime_error::runtime_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v29 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMGetUserActivityLevel(uint64_t *, uint64_t *)";
    unsigned __int8 v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v42 = 105;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (!a3)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      long long v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      unint64_t v16 = 0;
      std::runtime_error v17 = 0;
      int v18 = 47;
      do
      {
        std::string v19 = &aLibraryCachesC_166[v16];
        if (v18 == 47) {
          std::runtime_error v17 = &aLibraryCachesC_166[v16];
        }
        int v18 = v19[1];
        if (!v19[1]) {
          break;
        }
        BOOL v11 = v16++ >= 0xFFF;
      }
      while (!v11);
      if (v17) {
        uint64_t v20 = v17 + 1;
      }
      else {
        uint64_t v20 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
      }
      *(_DWORD *)pthread_attr_t buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)uint64_t v36 = 2080;
      *(void *)&v36[2] = v20;
      __int16 v37 = 1024;
      int v38 = 106;
      __int16 v39 = 2080;
      *(void *)v40 = "(mostSignificantActivity) == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v26);
    std::runtime_error::runtime_error(&v27, &v26);
    std::runtime_error::runtime_error(&v28, &v27);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    int v33 = -1;
    v28.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    __int16 v29 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
    *(void *)&v40[6] = "virtual IOReturn Mock_Power_Manager_System_Interface::PMGetUserActivityLevel(uint64_t *, uint64_t *)";
    unsigned __int8 v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Test/AHAL/Utility/Mock_Power_Manager_System_Interface.cpp";
    int v42 = 106;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    int v23 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  *a2 = *((void *)this + 2);
  *a3 = *((void *)this + 2);
  return 0;
}

void sub_1BAF06D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,std::runtime_error a25,char a26)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl(v27 - 112);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a26);
  std::runtime_error::~runtime_error(&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v26);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v27 - 113));
  _Unwind_Resume(a1);
}

uint64_t Mock_Power_Manager_System_Interface::set_power_manager(uint64_t result, uint64_t a2)
{
  *(void *)(result + 8) = a2;
  return result;
}

void Mock_Power_Manager_System_Interface::~Mock_Power_Manager_System_Interface(const void **this)
{
  Mock_Power_Manager_System_Interface::~Mock_Power_Manager_System_Interface(this);

  JUMPOUT(0x1C1859840);
}

{
  *this = &unk_1F1484E90;
  _Block_release(this[3]);
}

void HALS_IOA2Manager::_CopyDeviceList(HALS_IOA2Manager *this, HALS_DeviceManager::BasicDeviceList *a2)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 93);
  uint64_t v3 = (HALS_ObjectMap **)*((void *)this + 94);
  if (v2 != v3)
  {
    mach_port_t v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      unint64_t v5 = *v2;
      unint64_t v7 = (HALS_ObjectMap **)*((void *)v4 + 1);
      unint64_t v6 = *((void *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((uint64_t)v7 - *(void *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - *(void *)v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        uint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        NSObject *v13 = v5;
        unint64_t v8 = v13 + 1;
        mach_port_t v15 = *(char **)v4;
        long long v14 = (char *)*((void *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            unint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          long long v14 = *(char **)v4;
        }
        *(void *)mach_port_t v4 = v13;
        *((void *)v4 + 1) = v8;
        *((void *)v4 + 2) = v12 + 8 * (void)a2;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        unint64_t v8 = v7 + 1;
      }
      *((void *)v4 + 1) = v8;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

void HALS_IOA2Manager::_CopyIODeviceList(HALS_IOA2Manager *this, HALS_DeviceManager::BasicIODeviceList *a2)
{
  uint64_t v2 = (HALS_ObjectMap **)*((void *)this + 93);
  uint64_t v3 = (HALS_ObjectMap **)*((void *)this + 94);
  if (v2 != v3)
  {
    mach_port_t v4 = a2;
    do
    {
      HALS_ObjectMap::RetainObject(*v2, a2);
      unint64_t v5 = *v2;
      unint64_t v7 = (HALS_ObjectMap **)*((void *)v4 + 1);
      unint64_t v6 = *((void *)v4 + 2);
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((uint64_t)v7 - *(void *)v4) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v6 - *(void *)v4;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          unint64_t v12 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
        }
        else {
          a2 = 0;
        }
        uint64_t v13 = (HALS_ObjectMap **)(v12 + 8 * v9);
        NSObject *v13 = v5;
        unint64_t v8 = v13 + 1;
        mach_port_t v15 = *(char **)v4;
        long long v14 = (char *)*((void *)v4 + 1);
        if (v14 != *(char **)v4)
        {
          do
          {
            unint64_t v16 = (HALS_ObjectMap *)*((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          long long v14 = *(char **)v4;
        }
        *(void *)mach_port_t v4 = v13;
        *((void *)v4 + 1) = v8;
        *((void *)v4 + 2) = v12 + 8 * (void)a2;
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *unint64_t v7 = v5;
        unint64_t v8 = v7 + 1;
      }
      *((void *)v4 + 1) = v8;
      v2 += 2;
    }
    while (v2 != v3);
  }
}

uint64_t HALS_IOA2Manager::GetMIGDispatchQueue(HALS_IOA2Manager *this)
{
  return (uint64_t)this + 424;
}

{
  return (uint64_t)this + 424;
}

uint64_t HALS_IOA2Manager::GetCommandGate(HALS_IOA2Manager *this)
{
  return (uint64_t)this + 328;
}

{
  return (uint64_t)this + 328;
}

void HALS_IOA2Manager::_Deactivate(HALS_IOA2Manager *this)
{
  *((_DWORD *)this + 2) = 0;
  io_object_t v2 = *((_DWORD *)this + 194);
  if (v2)
  {
    IOObjectRelease(v2);
    *((_DWORD *)this + 194) = 0;
  }
  uint64_t v3 = (IONotificationPort *)*((void *)this + 96);
  if (v3)
  {
    IONotificationPortDestroy(v3);
    *((void *)this + 96) = 0;
  }
}

void HALS_IOA2Manager::~HALS_IOA2Manager(HALS_IOA2Manager *this)
{
  HALS_IOA2Manager::~HALS_IOA2Manager(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1484F50;
  io_object_t v2 = (void *)*((void *)this + 93);
  if (v2)
  {
    *((void *)this + 94) = v2;
    operator delete(v2);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_IOA2Manager *)((char *)this + 424));
  HALB_Mutex::~HALB_Mutex((HALS_IOA2Manager *)((char *)this + 328));
  *(void *)this = &unk_1F14725F8;
  CACFString::~CACFString((HALS_IOA2Manager *)((char *)this + 48));

  HALS_Object::~HALS_Object(this);
}

void HALS_IOA2Manager::Activate(io_iterator_t *this, HALS_Object *a2)
{
  kern_return_t v3;
  IONotificationPortRef v4;
  CFMutableDictionaryRef v5;
  IONotificationPort *v6;
  CFDictionaryRef v7;
  kern_return_t v8;
  IONotificationPort *v9;
  dispatch_queue_t *v10;
  kern_return_t v11;
  _DWORD *exception;
  _DWORD *v13;
  kern_return_t v14;
  _DWORD *v15;
  CFDictionaryRef v16;
  __int16 v17;
  mach_port_t mainPort;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  kern_return_t v24;
  uint64_t v25;

  uint64_t v25 = *MEMORY[0x1E4F143B8];
  HALS_Object::Activate((HALS_Object *)this, a2);
  mainPort = 0;
  uint64_t v3 = MEMORY[0x1C18588D0](*MEMORY[0x1E4F14638], &mainPort);
  if (v3)
  {
    uint64_t v11 = v3;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v20 = "HALS_IOA2Manager.cpp";
      long long v21 = 1024;
      uint64_t v22 = 70;
      int v23 = 1024;
      long long v24 = v11;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::Activate: IOMainPort failed, Error: 0x%X", buf, 0x18u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = v11;
  }
  mach_port_t v4 = IONotificationPortCreate(mainPort);
  *((void *)this + 96) = v4;
  if (!v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315394;
      uint64_t v20 = "HALS_IOA2Manager.cpp";
      long long v21 = 1024;
      uint64_t v22 = 74;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::Activate: IONotificationPortCreate failed", buf, 0x12u);
    }
    uint64_t v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v13 = off_1F148A5D8;
    v13[2] = 2003329396;
  }
  unint64_t v5 = IOServiceMatching("IOAudio2Device");
  unint64_t v16 = v5;
  std::runtime_error v17 = 257;
  unint64_t v6 = (IONotificationPort *)*((void *)this + 96);
  if (v5)
  {
    CFRetain(v5);
    unint64_t v7 = v16;
  }
  else
  {
    unint64_t v7 = 0;
  }
  unint64_t v8 = IOServiceAddMatchingNotification(v6, "IOServiceFirstPublish", v7, (IOServiceMatchingCallback)HALS_IOA2Manager::IOServiceMatchingHandler, (void *)this[4], this + 194);
  if (v8)
  {
    long long v14 = v8;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)pthread_attr_t buf = 136315650;
      uint64_t v20 = "HALS_IOA2Manager.cpp";
      long long v21 = 1024;
      uint64_t v22 = 81;
      int v23 = 1024;
      long long v24 = v14;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::Activate: IOServiceAddMatchingNotification failed, Error: 0x%X", buf, 0x18u);
    }
    mach_port_t v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)mach_port_t v15 = off_1F148A5D8;
    v15[2] = v14;
  }
  HALS_IOA2Manager::IOServiceMatchingHandler((HALS_IOA2Manager *)this[4], (void *)this[194]);
  uint64_t v9 = (IONotificationPort *)*((void *)this + 96);
  uint64_t v10 = (dispatch_queue_t *)(*(uint64_t (**)(io_iterator_t *))(*(void *)this + 64))(this);
  IONotificationPortSetDispatchQueue(v9, *v10);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v16);
}

void sub_1BAF07550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)va);
  _Unwind_Resume(a1);
}

void HALS_IOA2Manager::IOServiceMatchingHandler(HALS_IOA2Manager *this, void *a2)
{
  io_iterator_t v2 = a2;
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = 0;
  std::string v26 = 0;
  uint64_t v27 = 0;
  long long v24 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(this);
  if (!v24)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v28 = 136315394;
      __int16 v29 = "HALS_IOA2Manager.cpp";
      __int16 v30 = 1024;
      int v31 = 243;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::IOServiceMatchingHandler: no device manager object", (uint8_t *)&v28, 0x12u);
    }
    exception = __cxa_allocate_exception(0x10uLL);
    *(void *)exception = off_1F148A5D8;
    exception[2] = 1852797029;
  }
  io_iterator_t iterator = v2;
  char v23 = 0;
  mach_port_t v15 = (void (**)(void **))&unk_1F1471D40;
  io_object_t object = IOIteratorNext(v2);
  io_connect_t connect = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  __int16 v19 = 257;
  __int16 v20 = 1;
  char v21 = 1;
  for (io_object_t i = object; i; LOBYTE(v20) = 1)
  {
    if (IOObjectConformsTo(i, "IOAudio2Device"))
    {
      CFStringRef v13 = (const __CFString *)HALS_IOA2UCDevice::CopyDeviceUID((HALS_IOA2UCDevice *)object);
      char v14 = 1;
      unint64_t v6 = HALS_DeviceManager::CopyDeviceByUID(v24, v13, 0);
      if (v6)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v7 = (char *)(*(uint64_t (**)(HALS_Device *))(*(void *)v6 + 216))(v6);
          LODWORD(buf.isa) = 136315650;
          *(void **)((char *)&buf.isa + 4) = "HALS_IOA2Manager.cpp";
          WORD2(buf.info) = 1024;
          *(_DWORD *)((char *)&buf.info + 6) = 258;
          WORD1(buf.data) = 2082;
          *(char **)((char *)&buf.data + 4) = v7;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Manager::IOServiceMatchingHandler: device already exists for uid: %{public}s", (uint8_t *)&buf, 0x1Cu);
        }
        *((unsigned char *)v6 + 1842) = 0;
        HALS_System::DeviceDied(*((HALS_System **)v24 + 40), v6);
        (*(void (**)(HALS_Device *))(*(void *)v6 + 456))(v6);
        (*(void (**)(HALS_Device *))(*(void *)v6 + 8))(v6);
        HALS_IOA2Manager::RemoveDevice(v24, v6);
        HALS_ObjectMap::ObjectIsDead(v6, v8);
      }
      LOBYTE(buf.isa) = 0;
      HALB_UCObject::CopyProperty_BOOL((HALB_UCObject *)object, @"is private", &buf, v5);
      if (!LOBYTE(buf.isa)) {
        operator new();
      }
      CACFString::~CACFString((CACFString *)&v13);
    }
    io_object_t i = IOIteratorNext(iterator);
    if (connect)
    {
      IOServiceClose(connect);
      io_connect_t connect = 0;
    }
    v15[5]((void **)&v15);
    io_object_t object = i;
    char v21 = 1;
  }
  uint64_t v9 = v25;
  if (v25 != v26)
  {
    uint64_t v10 = (HALS_NotificationManager *)*((unsigned int *)v24 + 4);
    strcpy((char *)&buf, "#vedbolg");
    BYTE1(buf.info) = 0;
    WORD1(buf.info) = 0;
    HALS_NotificationManager::PropertiesChanged(v10, 0, 1u, (const AudioObjectPropertyAddress *)&buf, v3);
    HALS_System::CheckForDefaultDeviceChanges(*((HALS_PlatformBehaviors **)v24 + 40), (uint64_t)&v25);
  }
  HALB_UCObject::~HALB_UCObject((HALB_UCObject *)&v15);
  HALB_UCIterator::~HALB_UCIterator(&iterator);
  HALS_ObjectMap::ReleaseObject(v24, v11);
  if (v9) {
    operator delete(v9);
  }
}

void sub_1BAF081D4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF081DCLL);
  }
  __clang_call_terminate(a1);
}

void sub_1BAF081EC(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,HALS_ObjectMap *a26,void *__p)
{
  if (a2)
  {
    HALS_ObjectMap::ReleaseObject(a26, a2);
    if (__p) {
      operator delete(__p);
    }
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAF080DCLL);
  }
  _Unwind_Resume(v27);
}

void sub_1BAF0828C()
{
  _Unwind_Resume(v0);
}

void HALS_IOA2Manager::RemoveDevice(HALS_IOA2Manager *this, HALS_IOA2Device *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN16HALS_IOA2Manager12RemoveDeviceEP15HALS_IOA2Device_block_invoke;
  v3[3] = &__block_descriptor_tmp_7_17359;
  v3[4] = this;
  void v3[5] = a2;
  io_iterator_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IOA2Manager *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_3,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    HALS_System::DeviceDied(*(HALS_System **)(**(void **)(a1 + 8) + 320), **(HALS_Device ***)(a1 + 16));
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_2,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    HALS_IOA2Manager::RemoveDevice(**(HALS_IOA2Manager ***)(a1 + 8), **(HALS_IOA2Device ***)(a1 + 16));
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_1,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    (*(void (**)(void))(***(void ***)(a1 + 8) + 8))(**(void **)(a1 + 8));
  }
  return a1;
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<HALS_IOA2Manager::IOServiceMatchingHandler(void *,unsigned int)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1) {
    HALS_ObjectMap::ReleaseObject(**(HALS_ObjectMap ***)(a1 + 8), v2);
  }
  return a1;
}

void ___ZN16HALS_IOA2Manager9AddDeviceEP15HALS_IOA2Device_block_invoke(void *a1)
{
  kern_return_t v7;
  IONotificationPort *v8;
  dispatch_queue_t *v9;
  _OWORD *v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  kern_return_t v25;
  _DWORD *exception;
  long long v27;
  CFStringRef v28;
  char v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  int v33;
  __int16 v34;
  kern_return_t v35;
  uint64_t v36;

  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1[5];
  uint64_t v3 = (io_service_t *)a1[6];
  int v28 = (const __CFString *)(*(uint64_t (**)(io_service_t *))(*(void *)v3 + 208))(v3);
  __int16 v29 = 1;
  mach_port_t v4 = HALS_DeviceManager::CopyDeviceByUID((HALS_DeviceManager *)v2, v28, 0);
  if (v4)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__CFString buf = 136315394;
      int v31 = "HALS_IOA2Manager.cpp";
      uint64_t v32 = 1024;
      uint64_t v33 = 186;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_IOA2Manager::_AddDevice: there is already a device with this UID", buf, 0x12u);
    }
    HALS_ObjectMap::ReleaseObject(v4, v5);
    int v6 = 1852797029;
  }
  else
  {
    *(void *)&uint64_t v27 = v3;
    DWORD2(v27) = 0;
    unint64_t v7 = IOServiceAddInterestNotification(*(IONotificationPortRef *)(v2 + 768), v3[454], "IOGeneralInterest", (IOServiceInterestCallback)HALS_IOA2Manager::IOServiceInterestHandler, (void *)*(unsigned int *)(v2 + 16), (io_object_t *)&v27 + 2);
    if (v7)
    {
      uint64_t v25 = v7;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__CFString buf = 136315650;
        int v31 = "HALS_IOA2Manager.cpp";
        uint64_t v32 = 1024;
        uint64_t v33 = 176;
        char v34 = 1024;
        int v35 = v25;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::_AddDevice: Cannot add an interest callback., Error: 0x%X", buf, 0x18u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = v25;
    }
    unint64_t v8 = *(IONotificationPort **)(v2 + 768);
    uint64_t v9 = (dispatch_queue_t *)(*(uint64_t (**)(uint64_t))(*(void *)v2 + 64))(v2);
    IONotificationPortSetDispatchQueue(v8, *v9);
    uint64_t v10 = *(_OWORD **)(v2 + 752);
    uint64_t v11 = *(void *)(v2 + 760);
    if ((unint64_t)v10 >= v11)
    {
      CFStringRef v13 = *(void *)(v2 + 744);
      char v14 = ((uint64_t)v10 - v13) >> 4;
      mach_port_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = v11 - v13;
      if (v16 >> 3 > v15) {
        mach_port_t v15 = v16 >> 3;
      }
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
        std::runtime_error v17 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        std::runtime_error v17 = v15;
      }
      if (v17) {
        std::runtime_error v17 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v17);
      }
      else {
        int v18 = 0;
      }
      __int16 v19 = v17 + 16 * v14;
      __int16 v20 = v17 + 16 * v18;
      *(_OWORD *)__int16 v19 = v27;
      unint64_t v12 = (_OWORD *)(v19 + 16);
      char v21 = *(_DWORD **)(v2 + 752);
      uint64_t v22 = *(_DWORD **)(v2 + 744);
      if (v21 != v22)
      {
        do
        {
          char v23 = *((void *)v21 - 2);
          v21 -= 4;
          long long v24 = v21[2];
          *(void *)(v19 - 16) = v23;
          v19 -= 16;
          *(_DWORD *)(v19 + 8) = v24;
        }
        while (v21 != v22);
        char v21 = *(_DWORD **)(v2 + 744);
      }
      *(void *)(v2 + 744) = v19;
      *(void *)(v2 + 752) = v12;
      *(void *)(v2 + 760) = v20;
      if (v21) {
        operator delete(v21);
      }
    }
    else
    {
      *uint64_t v10 = v27;
      unint64_t v12 = v10 + 1;
    }
    int v6 = 0;
    *(void *)(v2 + 752) = v12;
  }
  CACFString::~CACFString((CACFString *)&v28);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v6;
}

void sub_1BAF08794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
  {
    CACFString::~CACFString((CACFString *)&a11);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF08698);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOA2Manager::IOServiceInterestHandler(HALS_IOA2Manager *this, HALS_IOA2UCDevice *a2, int a3, unsigned int a4, void *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if ((a2 - 1) <= 0xFFFFFFFD && a3 == -536870896)
  {
    uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(this);
    if (!v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        v14.mSelector = 136315394;
        *(void *)&v14.mScope = "HALS_IOA2Manager.cpp";
        __int16 v15 = 1024;
        int v16 = 341;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_IOA2Manager::IOServiceInterestHandler: no device manager object", (uint8_t *)&v14, 0x12u);
      }
      exception = __cxa_allocate_exception(0x10uLL);
      *(void *)exception = off_1F148A5D8;
      exception[2] = 1852797029;
    }
    *(void *)&v14.mSelector = HALS_IOA2UCDevice::CopyDeviceUID(a2);
    LOBYTE(v14.mElement) = 1;
    unint64_t v8 = HALS_DeviceManager::CopyDeviceByUID((HALS_DeviceManager *)v7, *(const __CFString **)&v14.mSelector, 0);
    CACFString::~CACFString((CACFString *)&v14);
    if (v8)
    {
      *((unsigned char *)v8 + 1842) = 0;
      HALS_System::DeviceDied(*(HALS_System **)(v7 + 320), v8);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v8 + 456))(v8);
      (*(void (**)(HALS_ObjectMap *))(*(void *)v8 + 8))(v8);
      HALS_IOA2Manager::RemoveDevice((HALS_IOA2Manager *)v7, v8);
      uint64_t v10 = (HALS_NotificationManager *)*(unsigned int *)(v7 + 16);
      *(void *)&v14.mSelector = 0x676C6F6264657623;
      v14.mElement = 0;
      HALS_NotificationManager::PropertiesChanged(v10, 0, 1u, &v14, v11);
      HALS_System::CheckForDefaultDeviceChanges(*(HALS_System **)(v7 + 320));
    }
    HALS_ObjectMap::ReleaseObject(v8, v9);
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v7, v12);
  }
}

void sub_1BAF08A24(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAF08A40(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2)
  {
    CACFString::~CACFString((CACFString *)&a9);
    HALS_ObjectMap::ReleaseObject(v9, v11);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAF08940);
  }
  JUMPOUT(0x1BAF08A30);
}

void sub_1BAF08AA0()
{
}

void ___ZN16HALS_IOA2Manager12RemoveDeviceEP15HALS_IOA2Device_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (HALS_ObjectMap **)v1[93];
  uint64_t v3 = (HALS_ObjectMap **)v1[94];
  if (v2 == v3) {
    return;
  }
  mach_port_t v4 = *(HALS_ObjectMap **)(a1 + 40);
  while (*v2 != v4)
  {
    v2 += 2;
    if (v2 == v3) {
      return;
    }
  }
  IOObjectRelease(*((_DWORD *)v2 + 2));
  *((_DWORD *)v2 + 2) = 0;
  *uint64_t v2 = 0;
  unint64_t v5 = v2 + 2;
  int v6 = (HALS_ObjectMap **)v1[94];
  int64_t v7 = (char *)v6 - (char *)(v2 + 2);
  if (v6 != v2 + 2) {
    memmove(v2, v5, v7 - 4);
  }
  unint64_t v8 = (char *)v1[93];
  uint64_t v9 = (char *)v2 + v7;
  v1[94] = (char *)v2 + v7;
  uint64_t v10 = v1[95];
  if ((((char *)v2 + v7 - v8) >> 4) + 20 < (unint64_t)((v10 - (uint64_t)v8) >> 4))
  {
    unint64_t v11 = (v9 - v8) >> 4;
    if (v11 < (v10 - (uint64_t)v8) >> 4)
    {
      if (v9 == v8)
      {
        __int16 v15 = 0;
        uint64_t v14 = 16 * v11;
      }
      else
      {
        unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>((v9 - v8) >> 4);
        unint64_t v8 = (char *)v1[94];
        CFStringRef v13 = (char *)v1[93];
        uint64_t v14 = (uint64_t)&v12[16 * v11];
        __int16 v15 = &v12[16 * (void)v5];
        if (v8 != v13)
        {
          uint64_t v16 = v14;
          do
          {
            uint64_t v17 = *((void *)v8 - 2);
            v8 -= 16;
            int v18 = *((_DWORD *)v8 + 2);
            *(void *)(v16 - 16) = v17;
            v16 -= 16;
            *(_DWORD *)(v16 + 8) = v18;
          }
          while (v8 != v13);
          unint64_t v8 = (char *)v1[93];
LABEL_17:
          v1[93] = v16;
          v1[94] = v14;
          v1[95] = v15;
          if (v8) {
            operator delete(v8);
          }
          goto LABEL_19;
        }
      }
      uint64_t v16 = v14;
      goto LABEL_17;
    }
  }
LABEL_19:

  HALS_ObjectMap::ReleaseObject(v4, (HALS_Object *)v5);
}

void sub_1BAF08BF8(void *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Connection_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79E38 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_ConnectionRequired");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79E10 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_ConnectionTransient");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79E10 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF08D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79E10 = (uint64_t)algn_1E9F79E28;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79E20 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79E30 = 0;
  qword_1E9F79E38 = (uint64_t)algn_1E9F79E28;
  qword_1E9F79E40 = (uint64_t)algn_1E9F79E28;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  mach_port_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  int v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    int v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      uint64_t v10 = v26 - 7;
    }
    else {
      uint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    uint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF09008(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0901C(_Unwind_Exception *a1)
{
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link(unint64_t *result, int a2, unint64_t *a3, unint64_t *a4)
{
  unint64_t v5 = result;
  if (a2)
  {
    a3[2] = (unint64_t)result;
    int v6 = a4 + 2;
    unint64_t v7 = (unint64_t *)a4[2];
    goto LABEL_5;
  }
  a3[1] = (unint64_t)result;
  if (a3 != a4)
  {
    int v6 = a4 + 1;
    unint64_t v7 = (unint64_t *)a4[1];
LABEL_5:
    if (v7 != a3) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  *a3 = *a3 & 1 | (unint64_t)result;
  int v6 = a3 + 2;
LABEL_8:
  void *v6 = result;
LABEL_9:
  result[1] = 0;
  result[2] = 0;
  unint64_t v8 = (unint64_t)a3 & 0xFFFFFFFFFFFFFFFELL;
  *__n128 result = (unint64_t)a3 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v9 = *a4 & 0xFFFFFFFFFFFFFFFELL;
  if ((unint64_t *)v9 == result) {
    goto LABEL_29;
  }
  while (1)
  {
    unint64_t v10 = *(void *)v8;
    if (*(void *)v8) {
      break;
    }
    uint64_t v11 = *(void **)((v10 & 0xFFFFFFFFFFFFFFFELL) + 8);
    if (v11 == (void *)v8)
    {
      uint64_t v11 = *(void **)((v10 & 0xFFFFFFFFFFFFFFFELL) + 16);
      if (v11 && (*(unsigned char *)v11 & 1) == 0)
      {
LABEL_18:
        *(void *)unint64_t v8 = v10 | 1;
        *v11 |= 1uLL;
        *(void *)(*(void *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        unint64_t v5 = (unint64_t *)(*(void *)(*v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
        goto LABEL_25;
      }
      if (v5 == *(unint64_t **)(v8 + 16))
      {
        uint64_t v19 = a4;
        boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left((unint64_t *)v8, &v19);
        CFStringRef v13 = (unint64_t *)(*(void *)v8 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v10 = *v13;
        unint64_t v5 = (unint64_t *)v8;
      }
      else
      {
        CFStringRef v13 = (unint64_t *)v8;
        unint64_t v8 = (unint64_t)v5;
      }
      unint64_t *v13 = v10 | 1;
      *(void *)(*(void *)(*(void *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      __int16 v15 = (unint64_t *)(*(void *)(*(void *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
      uint64_t v18 = a4;
      __n128 result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(v15, &v18);
    }
    else
    {
      if (v11 && (*(unsigned char *)v11 & 1) == 0) {
        goto LABEL_18;
      }
      if (v5 == *(unint64_t **)(v8 + 8))
      {
        int v17 = a4;
        boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right((unint64_t *)v8, &v17);
        unint64_t v12 = (unint64_t *)(*(void *)v8 & 0xFFFFFFFFFFFFFFFELL);
        unint64_t v10 = *v12;
        unint64_t v5 = (unint64_t *)v8;
      }
      else
      {
        unint64_t v12 = (unint64_t *)v8;
        unint64_t v8 = (unint64_t)v5;
      }
      *unint64_t v12 = v10 | 1;
      *(void *)(*(void *)(*(void *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
      int v14 = (unint64_t *)(*(void *)(*(void *)v8 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL);
      unint64_t v16 = a4;
      __n128 result = boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(v14, &v16);
    }
LABEL_25:
    unint64_t v9 = *a4 & 0xFFFFFFFFFFFFFFFELL;
    if (v5 == (unint64_t *)v9) {
      goto LABEL_28;
    }
    unint64_t v8 = *v5 & 0xFFFFFFFFFFFFFFFELL;
  }
  unint64_t v5 = (unint64_t *)v9;
LABEL_28:
  unint64_t v8 = *v5;
LABEL_29:
  *unint64_t v5 = v8 | 1;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_left(unint64_t *result, unint64_t **a2)
{
  unint64_t v2 = result[2];
  result[2] = *(void *)(v2 + 8);
  uint64_t v3 = *(unint64_t **)(v2 + 8);
  if (v3) {
    *uint64_t v3 = *v3 & 1 | (unint64_t)result;
  }
  *(void *)unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(void *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    unint64_t v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 8) == result) {
      *(void *)(v5 + 8) = v2;
    }
    else {
      *(void *)(v5 + 16) = v2;
    }
  }
  *(void *)(v2 + 8) = result;
  *__n128 result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::rotate_right(unint64_t *result, unint64_t **a2)
{
  unint64_t v2 = result[1];
  result[1] = *(void *)(v2 + 16);
  uint64_t v3 = *(unint64_t **)(v2 + 16);
  if (v3) {
    *uint64_t v3 = *v3 & 1 | (unint64_t)result;
  }
  *(void *)unint64_t v2 = *result & 0xFFFFFFFFFFFFFFFELL | *(void *)v2 & 1;
  if ((unint64_t *)(**a2 & 0xFFFFFFFFFFFFFFFELL) == result)
  {
    **a2 = **a2 & 1 | v2;
    uint64_t v4 = *result;
  }
  else
  {
    uint64_t v4 = *result;
    unint64_t v5 = *result & 0xFFFFFFFFFFFFFFFELL;
    if (*(unint64_t **)(v5 + 16) == result) {
      *(void *)(v5 + 16) = v2;
    }
    else {
      *(void *)(v5 + 8) = v2;
    }
  }
  *(void *)(v2 + 16) = result;
  *__n128 result = v4 & 1 | v2;
  return result;
}

unint64_t *boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement(unint64_t *result)
{
  int v1 = (void *)*result;
  uint64_t v2 = *(void *)*result;
  if ((v2 & 1) == 0 && v1 == (void *)(*(void *)(v2 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL))
  {
    unint64_t v4 = v1[2];
  }
  else
  {
    unint64_t v3 = v1[1];
    if (v3)
    {
      do
      {
        unint64_t v4 = v3;
        unint64_t v3 = *(void *)(v3 + 16);
      }
      while (v3);
    }
    else
    {
      unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFFELL;
      if (v1 == *(void **)(v4 + 8))
      {
        unint64_t v5 = (void *)v4;
        do
        {
          *__n128 result = (unint64_t)v5;
          unint64_t v4 = *v5 & 0xFFFFFFFFFFFFFFFELL;
          BOOL v6 = v5 == *(void **)(v4 + 8);
          unint64_t v5 = (void *)v4;
        }
        while (v6);
      }
    }
  }
  *__n128 result = v4;
  return result;
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Resampler_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79E80 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_NeverResample");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79E58 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_ResampleIfRequired");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79E58 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0954C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79E58 = (uint64_t)&unk_1E9F79E70;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79E68 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79E78 = 0;
  qword_1E9F79E80 = (uint64_t)&unk_1E9F79E70;
  qword_1E9F79E88 = (uint64_t)&unk_1E9F79E70;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF097FC(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF09810(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Format_Conversion_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79EC8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_NeverConvertFormat");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79EA0 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_ConvertFormatIfRequired");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79EA0 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF09974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79EA0 = (uint64_t)algn_1E9F79EB8;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79EB0 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79EC0 = 0;
  qword_1E9F79EC8 = (uint64_t)algn_1E9F79EB8;
  qword_1E9F79ED0 = (uint64_t)algn_1E9F79EB8;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF09C24(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF09C38(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Drift_Correction_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79F10 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_NeverDriftCorrect");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79EE8 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_ShouldDriftCorrect");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79EE8 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF09D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79EE8 = (uint64_t)&unk_1E9F79F00;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79EF8 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79F08 = 0;
  qword_1E9F79F10 = (uint64_t)&unk_1E9F79F00;
  qword_1E9F79F18 = (uint64_t)&unk_1E9F79F00;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0A04C(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0A060(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Wire_Latency_Correction_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79F58 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_NeverLatencyCorrect");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79F30 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_ShouldLatencyCorrect");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79F30 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0A1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79F30 = (uint64_t)algn_1E9F79F48;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79F40 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79F50 = 0;
  qword_1E9F79F58 = (uint64_t)algn_1E9F79F48;
  qword_1E9F79F60 = (uint64_t)algn_1E9F79F48;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0A474(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0A488(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Node_Clock_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79FA0 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "IsCalculatedFromTerminals");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79F78 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "IsSetFromClockUID");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79F78 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "IsAClockSource");
    int v1 = 2;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79F78 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0A660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79F78 = (uint64_t)&unk_1E9F79F90;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79F88 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79F98 = 0;
  qword_1E9F79FA0 = (uint64_t)&unk_1E9F79F90;
  qword_1E9F79FA8 = (uint64_t)&unk_1E9F79F90;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0A918(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0A92C(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Node_Thread_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F79FE8 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Node_Is_Used_By_One_Thread");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79FC0 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Node_Is_Shared_Across_Threads");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F79FC0 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0AA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F79FC0 = (uint64_t)algn_1E9F79FD8;
  __n128 result = operator new(0x50uLL);
  qword_1E9F79FD0 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F79FE0 = 0;
  qword_1E9F79FE8 = (uint64_t)algn_1E9F79FD8;
  qword_1E9F79FF0 = (uint64_t)algn_1E9F79FD8;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0AD40(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0AD54(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F7A030 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Favor_Input_Buffer_Alignment");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A008 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Favor_Output_Buffer_Alignment");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A008 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0AEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F7A008 = (uint64_t)&unk_1E9F7A020;
  __n128 result = operator new(0x50uLL);
  qword_1E9F7A018 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F7A028 = 0;
  qword_1E9F7A030 = (uint64_t)&unk_1E9F7A020;
  qword_1E9F7A038 = (uint64_t)&unk_1E9F7A020;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0B168(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0B17C(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Direction>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F7A078 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Out");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A050 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "In");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A050 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0B2E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F7A050 = (uint64_t)algn_1E9F7A068;
  __n128 result = operator new(0x50uLL);
  qword_1E9F7A060 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F7A070 = 0;
  qword_1E9F7A078 = (uint64_t)algn_1E9F7A068;
  qword_1E9F7A080 = (uint64_t)algn_1E9F7A068;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  unsigned int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      unsigned int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (unsigned int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    unsigned int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0B590(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0B5A4(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Node_Type>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F7A0C0 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "IOContextNode");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A098 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "DSPNode");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A098 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "ReflectorNode");
    int v1 = 2;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A098 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "DeviceNode");
    int v1 = 3;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A098 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0B7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F7A098 = (uint64_t)&unk_1E9F7A0B0;
  __n128 result = operator new(0x50uLL);
  qword_1E9F7A0A8 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F7A0B8 = 0;
  qword_1E9F7A0C0 = (uint64_t)&unk_1E9F7A0B0;
  qword_1E9F7A0C8 = (uint64_t)&unk_1E9F7A0B0;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0BAB0(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0BAC4(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Terminal_Source_Mix_Policy>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F7A108 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_SingleSource");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A0E0 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Wire_MultiSource");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A0E0 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0BC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F7A0E0 = (uint64_t)algn_1E9F7A0F8;
  __n128 result = operator new(0x50uLL);
  qword_1E9F7A0F0 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F7A100 = 0;
  qword_1E9F7A108 = (uint64_t)algn_1E9F7A0F8;
  qword_1E9F7A110 = (uint64_t)algn_1E9F7A0F8;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0BED8(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0BEEC(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Resampler_Type>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F7A150 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "RamstadSRC");
    int v1 = 2;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A128 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Resampler2");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A128 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "STLI");
    int v1 = 1;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A128 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0C0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F7A128 = (uint64_t)&unk_1E9F7A140;
  __n128 result = operator new(0x50uLL);
  qword_1E9F7A138 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F7A148 = 0;
  qword_1E9F7A150 = (uint64_t)&unk_1E9F7A140;
  qword_1E9F7A158 = (uint64_t)&unk_1E9F7A140;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0C37C(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0C390(_Unwind_Exception *a1)
{
}

void AMCP::get_enum_string_bimap<AMCP::Resampler_Quality>()
{
  {
    applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>();
  }
  if (!*(void *)(qword_1E9F7A198 + 8))
  {
    std::string::basic_string[abi:ne180100]<0>(&v0, "Min");
    int v1 = 0;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A170 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Low");
    int v1 = 32;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A170 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Medium");
    int v1 = 64;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A170 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "High");
    int v1 = 96;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A170 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v0, "Max");
    int v1 = 127;
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&__p, v0.__r_.__value_.__l.__data_, v0.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v0;
    }
    boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(qword_1E9F7A170 - 16, &v1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v0.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v0.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1BAF0C650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
}

void *applesauce::indestructible<boost::bimaps::bimap<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>>::indestructible<>()
{
  qword_1E9F7A170 = (uint64_t)algn_1E9F7A188;
  __n128 result = operator new(0x50uLL);
  qword_1E9F7A180 = (uint64_t)result;
  result[4] = 0;
  result[7] = 0;
  result[5] = result + 4;
  result[6] = result + 4;
  result[8] = result + 7;
  result[9] = result + 7;
  qword_1E9F7A190 = 0;
  qword_1E9F7A198 = (uint64_t)algn_1E9F7A188;
  qword_1E9F7A1A0 = (uint64_t)algn_1E9F7A188;
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::insert_<boost::multi_index::detail::lvalue_tag>(uint64_t result, int *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = a2 + 2;
  unint64_t v5 = *(void **)(result + 8);
  BOOL v6 = v5;
  unint64_t v7 = v5[7] & 0xFFFFFFFFFFFFFFFELL;
  if (!v7) {
    goto LABEL_8;
  }
  do
  {
    BOOL v6 = (void *)(v7 - 56);
    __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4, (void *)(v7 - 48));
    if ((result & 0x80u) == 0) {
      uint64_t v8 = 9;
    }
    else {
      uint64_t v8 = 8;
    }
    unint64_t v7 = v6[v8];
  }
  while (v7);
  if ((char)result < 0)
  {
LABEL_8:
    uint64_t v11 = v5[8];
    if (v11) {
      unint64_t v12 = (void *)(v11 - 56);
    }
    else {
      unint64_t v12 = 0;
    }
    CFStringRef v13 = v6 + 7;
    if (v6 == v12)
    {
      int v9 = 0;
      goto LABEL_20;
    }
    std::string v26 = v6 + 7;
    boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v9 = 0;
    if (v26) {
      unint64_t v10 = v26 - 7;
    }
    else {
      unint64_t v10 = 0;
    }
  }
  else
  {
    int v9 = 1;
    unint64_t v10 = v6;
  }
  __n128 result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10 + 1, v4);
  if ((result & 0x80) == 0)
  {
    if (v10) {
      return result;
    }
    goto LABEL_42;
  }
  CFStringRef v13 = v6 + 7;
LABEL_20:
  int v14 = *a2;
  __int16 v15 = v5;
  unint64_t v16 = v5[4] & 0xFFFFFFFFFFFFFFFELL;
  if (v16)
  {
    do
    {
      __int16 v15 = (void *)(v16 - 32);
      int v17 = *(_DWORD *)(v16 - 32);
      if (v17 <= v14) {
        uint64_t v18 = 6;
      }
      else {
        uint64_t v18 = 5;
      }
      unint64_t v16 = v15[v18];
    }
    while (v16);
    if (v17 <= v14)
    {
      int v22 = 1;
LABEL_35:
      if (v17 >= v14) {
        return result;
      }
      char v21 = v15 + 4;
      goto LABEL_38;
    }
  }
  uint64_t v19 = v5[5];
  if (v19) {
    __int16 v20 = (void *)(v19 - 32);
  }
  else {
    __int16 v20 = 0;
  }
  char v21 = v15 + 4;
  if (v15 != v20)
  {
    std::string v26 = v15 + 4;
    __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::decrement((unint64_t *)&v26);
    int v22 = 0;
    if (v26) {
      char v23 = (int *)(v26 - 4);
    }
    else {
      char v23 = 0;
    }
    int v17 = *v23;
    goto LABEL_35;
  }
  int v22 = 0;
LABEL_38:
  long long v24 = (char *)operator new(0x50uLL);
  *(_DWORD *)long long v24 = v14;
  uint64_t v25 = (std::string *)(v24 + 8);
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v25, *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    *((void *)v24 + 3) = v4[2];
  }
  boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 4, v22, v21, (unint64_t *)(*(void *)(v3 + 8) + 32));
  __n128 result = (uint64_t)boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::link((unint64_t *)v24 + 7, v9, v13, (unint64_t *)(*(void *)(v3 + 8) + 56));
LABEL_42:
  ++*(void *)(v3 + 24);
  return result;
}

void sub_1BAF0C918(void *a1)
{
  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1BAF0C92C(_Unwind_Exception *a1)
{
}

uint64_t minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>(uint64_t result, char *a2, uint64_t a3)
{
  if (*(_DWORD *)(result + 4) != 2)
  {
    unint64_t v5 = (minijson::writer *)result;
    minijson::writer::next_field(v5);
    if (a2) {
      minijson::writer::write_field_name((uint64_t **)v5, a2);
    }
    BOOL v6 = (uint64_t *)*((void *)v5 + 1);
    if (*(char *)(a3 + 23) >= 0) {
      unint64_t v7 = (unsigned __int8 *)a3;
    }
    else {
      unint64_t v7 = *(unsigned __int8 **)a3;
    }
  }
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F7A070;
  unint64_t v4 = (void *)qword_1E9F7A060;
  uint64_t v117 = qword_1E9F7A070;
  uint64_t v118 = qword_1E9F7A070;
  if (qword_1E9F7A070)
  {
    if ((unint64_t)qword_1E9F7A070 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v5 = operator new(16 * qword_1E9F7A070);
  }
  else
  {
    unint64_t v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      unint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *unint64_t v10 = *(_DWORD *)v7;
      uint64_t v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    unint64_t v4 = (void *)qword_1E9F7A060;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  unint64_t v16 = v2 + 7;
  if (v15 > 1)
  {
    *unint64_t v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    int v22 = v121;
    char v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          int v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      char v23 = (void *)(v24 + 8);
    }
    *unint64_t v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    int v31 = (void *)(v30 - 56);
    if (!v30) {
      int v31 = 0;
    }
    uint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          uint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          __int16 v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      uint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    v40 = (void *)(v39 - 56);
    if (!v39) {
      v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    int v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          CFTypeRef v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      int v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      long long v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        uint64_t v50 = (void *)v49[1];
        long long v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          std::logic_error v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              uint64_t v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              int v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            std::logic_error v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  long long v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *long long v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    v71 = v121;
    v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      v72 = (void *)(v73 + 8);
    }
    *long long v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    v80 = (void *)(v79 - 32);
    if (!v79) {
      v80 = 0;
    }
    v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      v89 = (void *)(v88 - 32);
    }
    else {
      v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      v99 = (void *)(v90 + 16 * v91);
      v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        v101 = (void *)v100[1];
        v103 = (void *)(*v100 + 32);
        v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F7A070;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF0D040()
{
}

void sub_1BAF0D068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 56);
  uint64_t v3 = a1 + 16;
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v4 = (v2 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v4 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v3, v4);
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 64);
    if (v4) {
      uint64_t v5 = v4 - 56;
    }
    else {
      uint64_t v5 = 0;
    }
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(a1, v5);
    uint64_t v6 = *(void *)(a2 + 72);
    if (v6) {
      uint64_t v7 = v6 - 56;
    }
    else {
      uint64_t v7 = 0;
    }
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(a1, v7);
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    operator delete((void *)a2);
  }
}

uint64_t boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment(uint64_t result)
{
  int v1 = *(void **)result;
  uint64_t v2 = *(void *)(*(void *)result + 16);
  if (v2)
  {
    do
    {
      *(void *)__n128 result = v2;
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2);
  }
  else
  {
    uint64_t v3 = (void *)(*v1 & 0xFFFFFFFFFFFFFFFELL);
    if (v1 == (void *)v3[2])
    {
      do
      {
        uint64_t v5 = v3;
        *(void *)__n128 result = v3;
        uint64_t v3 = (void *)(*v3 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v5 == (void *)v3[2]);
      uint64_t v4 = (void *)v5[2];
    }
    else
    {
      uint64_t v4 = 0;
    }
    if (v4 != v3) {
      *(void *)__n128 result = v3;
    }
  }
  return result;
}

uint64_t boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 64) && *(void *)(a1 + 40))
  {
    unint64_t v2 = 0;
    uint64_t v3 = 8;
    do
    {
      uint64_t v4 = *(void *)(*(void *)(a1 + 32) + v3);
      if (*(char *)(v4 + 31) < 0)
      {
        operator delete(*(void **)(v4 + 8));
        uint64_t v4 = *(void *)(*(void *)(a1 + 32) + v3);
      }
      operator delete((void *)v4);
      ++v2;
      v3 += 16;
    }
    while (v2 < *(void *)(a1 + 40));
  }
  if (*(void *)(a1 + 24)) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    uint64_t v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        long long v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    long long v49 = v12;
LABEL_79:
                    *long long v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      uint64_t v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)uint64_t v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  long long v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *long long v66 = (__n128)v85;
                }
                else
                {
                  *long long v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        long long v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          unint64_t v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)unint64_t v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        int v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          int v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

long long *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(long long *result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3 = *a2;
  unint64_t v4 = *a3;
  if (*a2 >= *(void *)result)
  {
    if (v4 < v3)
    {
      long long v6 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)a3 = v6;
      if (*a2 < *(void *)result)
      {
        long long v7 = *result;
        *__n128 result = *(_OWORD *)a2;
        *(_OWORD *)a2 = v7;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      long long v8 = *result;
      *__n128 result = *(_OWORD *)a2;
      *(_OWORD *)a2 = v8;
      if (*a3 >= *a2) {
        return result;
      }
      long long v5 = *(_OWORD *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
    }
    else
    {
      long long v5 = *result;
      *__n128 result = *(_OWORD *)a3;
    }
    *(_OWORD *)a3 = v5;
  }
  return result;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3, _OWORD *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, a2, a3);
  if (*(void *)a4 < *a3)
  {
    __n128 result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < *a2)
    {
      __n128 result = *(__n128 *)a2;
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(__n128 *)a3 = result;
      if (*a2 < *(void *)a1)
      {
        __n128 result = (__n128)*a1;
        *a1 = *(_OWORD *)a2;
        *(__n128 *)a2 = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(long long *a1, unint64_t *a2, unint64_t *a3, __n128 *a4, __n128 *a5)
{
  result.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, a2, a3, a4).n128_u64[0];
  if (a5->n128_u64[0] < a4->n128_u64[0])
  {
    __n128 result = *a4;
    *a4 = *a5;
    *a5 = result;
    if (a4->n128_u64[0] < *a3)
    {
      __n128 result = *(__n128 *)a3;
      *(__n128 *)a3 = *a4;
      *a4 = result;
      if (*a3 < *a2)
      {
        __n128 result = *(__n128 *)a2;
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(__n128 *)a3 = result;
        if (*a2 < *(void *)a1)
        {
          __n128 result = (__n128)*a1;
          *a1 = *(_OWORD *)a2;
          *(__n128 *)a2 = result;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      long long v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      long long v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          unint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      unint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *unint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    long long v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void minijson::detail::anonymous namespace'::adjust_stream_settings(uint64_t *a1)
{
  unint64_t v2 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  unint64_t v3 = std::locale::classic();
  std::ios_base::getloc(v2);
  std::ios_base::imbue(v2, v3);
  std::locale::~locale(&v9);
  rd__CFString buf = (std::locale *)v2->__rdbuf_;
  if (rdbuf)
  {
    (*((void (**)(std::locale *, const std::locale *))rdbuf->__locale_ + 2))(rdbuf, v3);
    long long v5 = rdbuf + 1;
    std::locale::locale(&v8, v5);
    std::locale::operator=(v5, v3);
    std::locale::~locale(&v8);
  }
  std::locale::~locale(&v7);
  uint64_t v6 = *a1;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) &= 0xFFFFF3FF;
  *(_DWORD *)((char *)a1 + *(void *)(v6 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v6 - 24) + 8) & 0xFFFFFFB5 | 2;
  *(uint64_t *)((char *)a1 + *(void *)(v6 - 24) + 24) = 0;
}

void sub_1BAF0DE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t minijson::writer::next_field(minijson::writer *this)
{
  int v2 = *((_DWORD *)this + 1);
  if (v2 == 1)
  {
    unint64_t v3 = (void *)*((void *)this + 1);
    char v5 = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
  }
  else if (!v2)
  {
    minijson::writer::write_opening_bracket((minijson::writer *)*(unsigned __int8 *)this, *((void **)this + 1));
  }
  uint64_t result = minijson::writer::write_pretty_print_token((uint64_t)this, 0);
  *((_DWORD *)this + 1) = 1;
  return result;
}

uint64_t minijson::writer::write_field_name(uint64_t **this, char *a2)
{
  unint64_t v3 = this[1];
  char v5 = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v5, 1);
  return minijson::writer::write_pretty_print_token((uint64_t)this, 1);
}

uint64_t minijson::detail::anonymous namespace'::write_quoted_string(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *a1;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)a1 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(v4 - 24) + 8) & 0xFFFFFF4F | 0x80;
  unint64_t v12 = std::operator<<[abi:ne180100]<std::char_traits<char>>(a1, 48);
  uint64_t v5 = 1;
  uint64_t v14 = 1;
  char v13 = 34;
  unsigned __int8 v6 = *a2;
  if (!*a2) {
    goto LABEL_25;
  }
  std::locale v7 = a2 + 1;
  do
  {
    if ((char)v6 <= 12)
    {
      if (v6 == 9)
      {
        std::locale v8 = "\\t";
        goto LABEL_14;
      }
      if (v6 == 10)
      {
        std::locale v8 = "\\n";
        goto LABEL_14;
      }
    }
    else
    {
      switch(v6)
      {
        case 0xDu:
          std::locale v8 = "\\r";
          goto LABEL_14;
        case 0x5Cu:
          std::locale v8 = "\\\\"";
          goto LABEL_14;
        case 0x22u:
          std::locale v8 = "\\\"";
LABEL_14:
          minijson::detail::buffered_writer<128ul>::operator<<<3ul>((uint64_t)&v12, (uint64_t)v8);
          goto LABEL_15;
      }
    }
    if (v6 < 0x20u || v6 == 127)
    {
      minijson::detail::buffered_writer<128ul>::operator<<<3ul>((uint64_t)&v12, (uint64_t)"\\u");
      std::ostream::write();
      uint64_t v14 = 0;
      *(uint64_t *)((char *)a1 + *(void *)(*a1 - 24) + 24) = 4;
      std::ostream::operator<<();
    }
    else
    {
      uint64_t v10 = v14;
      if (v14 == 128)
      {
        std::ostream::write();
        uint64_t v10 = 0;
      }
      uint64_t v14 = v10 + 1;
      *((unsigned char *)&v12 + v10 + 8) = v6;
    }
LABEL_15:
    int v9 = *v7++;
    unsigned __int8 v6 = v9;
  }
  while (v9);
  uint64_t v5 = v14;
  if (v14 == 128)
  {
    std::ostream::write();
    uint64_t v5 = 0;
  }
LABEL_25:
  uint64_t v14 = v5 + 1;
  *((unsigned char *)&v12 + v5 + 8) = 34;
  uint64_t result = std::ostream::write();
  uint64_t v14 = 0;
  *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 8) = *(_DWORD *)((unsigned char *)a1 + *(void *)(*a1 - 24) + 8) & 0xFFFFFFB5 | 2;
  return result;
}

uint64_t minijson::writer::write_pretty_print_token(uint64_t result, int a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(result + 24))
  {
    uint64_t v2 = result;
    uint64_t v8 = *(void *)(result + 8);
    uint64_t v10 = 0;
    if (a2)
    {
      if (a2 == 1)
      {
        uint64_t v10 = 1;
        char v9 = 32;
      }
      else if (a2 == 2 && *(_DWORD *)(result + 4))
      {
        goto LABEL_6;
      }
      return std::ostream::write();
    }
LABEL_6:
    int v3 = *(unsigned __int8 *)(result + 40);
    uint64_t v4 = *(void *)(result + 16);
    if (!a2) {
      ++v4;
    }
    if (!*(unsigned char *)(result + 40)) {
      v4 *= *(void *)(result + 32);
    }
    uint64_t v10 = 1;
    char v9 = 10;
    if (v4)
    {
      uint64_t v5 = v4 - 1;
      uint64_t v6 = 1;
      while (1)
      {
        char v7 = v3 ? 9 : 32;
        if (v6 == 16)
        {
          std::ostream::write();
          uint64_t v6 = 0;
        }
        uint64_t v10 = v6 + 1;
        *((unsigned char *)&v8 + v6 + 8) = v7;
        if (!v5) {
          break;
        }
        uint64_t v6 = v10;
        int v3 = *(unsigned __int8 *)(v2 + 40);
        --v5;
      }
    }
    return std::ostream::write();
  }
  return result;
}

uint64_t minijson::detail::buffered_writer<128ul>::operator<<<3ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  char v5 = 1;
  do
  {
    char v6 = v5;
    char v7 = *(unsigned char *)(a2 + v4);
    uint64_t v8 = *(void *)(a1 + 136);
    if (v8 == 128)
    {
      std::ostream::write();
      uint64_t v8 = 0;
    }
    char v5 = 0;
    *(void *)(a1 + 136) = v8 + 1;
    *(unsigned char *)(a1 + v8 + 8) = v7;
    uint64_t v4 = 1;
  }
  while ((v6 & 1) != 0);
  return a1;
}

void *minijson::writer::write_opening_bracket(minijson::writer *this, void *a2)
{
  if ((_BYTE)this)
  {
    char v5 = 91;
    int v3 = &v5;
  }
  else
  {
    char v6 = 123;
    int v3 = &v6;
  }
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)v3, 1);
}

uint64_t minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>(uint64_t result, char *a2)
{
  if (*(_DWORD *)(result + 4) != 2)
  {
    int v3 = (minijson::writer *)result;
    minijson::writer::next_field(v3);
    if (a2) {
      minijson::writer::write_field_name((uint64_t **)v3, a2);
    }
    return std::ostream::operator<<();
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v6 = a1;
    v307 = (long long *)(a2 - 104);
    v304 = (uint64_t *)(a2 - 16);
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v6;
        uint64_t v8 = a2 - v6;
        uint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v6) >> 3);
        a1 = v7;
        if (v5 || !v4)
        {
          switch(v9)
          {
            case 0:
            case 1:
              return;
            case 2:
              *(void *)&long long v328 = a2 - 104;
              *((void *)&v328 + 1) = a2 - 64;
              *(void *)&long long v329 = a2 - 16;
              *((void *)&v329 + 1) = a2 - 12;
              v330 = (unsigned char *)(a2 - 8);
              uint64_t v143 = v7 + 88;
              *(void *)&long long v322 = v7;
              *((void *)&v322 + 1) = v7 + 40;
              *(void *)&long long v323 = v7 + 88;
              *((void *)&v323 + 1) = v7 + 92;
              v324 = (char *)(v7 + 96);
              if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v322) & 0x80) != 0)
              {
                uint64_t v144 = 0;
                long long v145 = *(_OWORD *)v7;
                long long v146 = *(_OWORD *)(v7 + 16);
                v330 = *(unsigned char **)(v7 + 32);
                long long v328 = v145;
                long long v329 = v146;
                do
                {
                  v147 = (char *)&v328 + v144;
                  v148 = (void *)(v7 + v144);
                  *((void *)v147 + 6) = 0;
                  *((void *)v147 + 7) = 0;
                  *(_OWORD *)(v147 + 40) = *(_OWORD *)(v7 + v144 + 40);
                  *((void *)v147 + 7) = *(void *)(v7 + v144 + 56);
                  v148[5] = 0;
                  v148[6] = 0;
                  v148[7] = 0;
                  v144 += 24;
                }
                while (v144 != 48);
                uint64_t v149 = 0;
                uint64_t v150 = *(void *)v143;
                char v333 = *(unsigned char *)(v7 + 96);
                uint64_t v332 = v150;
                long long v151 = *v307;
                long long v152 = *(_OWORD *)(a2 - 88);
                *(void *)(v7 + 32) = *(void *)(a2 - 72);
                *(_OWORD *)uint64_t v7 = v151;
                *(_OWORD *)(v7 + 16) = v152;
                do
                {
                  uint64_t v153 = a1 + v149;
                  uint64_t v154 = a2 + v149;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v149 + 40));
                  *(_OWORD *)(v153 + 40) = *(_OWORD *)(a2 + v149 - 64);
                  *(void *)(v153 + 56) = *(void *)(a2 + v149 - 48);
                  *(void *)(v154 - 64) = 0;
                  *(void *)(v154 - 56) = 0;
                  *(void *)(v154 - 48) = 0;
                  v149 += 24;
                }
                while (v149 != 48);
                uint64_t v155 = 0;
                uint64_t v156 = *v304;
                *(unsigned char *)(v143 + 8) = *(unsigned char *)(a2 - 8);
                *(void *)uint64_t v143 = v156;
                long long v157 = v328;
                long long v158 = v329;
                *(void *)(a2 - 72) = v330;
                long long *v307 = v157;
                *(_OWORD *)(a2 - 88) = v158;
                do
                {
                  uint64_t v159 = a2 + v155;
                  v160 = (void *)((char *)&v328 + v155);
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v155 - 64));
                  *(_OWORD *)(v159 - 64) = *(_OWORD *)&v331[v155];
                  *(void *)(v159 - 48) = *(void *)&v331[v155 + 16];
                  v160[5] = 0;
                  v160[6] = 0;
                  v160[7] = 0;
                  v155 += 24;
                }
                while (v155 != 48);
                uint64_t v161 = v332;
                *(unsigned char *)(a2 - 8) = v333;
                uint64_t *v304 = v161;
                for (uint64_t i = 64; i != 16; i -= 24)
                {
                  *(void *)&long long v322 = (char *)&v328 + i;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v322);
                }
              }
              break;
            case 3:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)v7, (long long *)(v7 + 104), v307);
              break;
            case 4:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v7, v7 + 104, v7 + 208, (uint64_t)v307);
              break;
            case 5:
              std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v7, v7 + 104, v7 + 208, v7 + 312, (uint64_t)v307);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v8 <= 2495)
        {
          if (a4)
          {
            if (v7 != a2)
            {
              uint64_t v163 = v7 + 104;
              if (v7 + 104 != a2)
              {
                uint64_t v164 = 0;
                uint64_t v165 = v7;
                do
                {
                  *(void *)&long long v328 = v163;
                  *((void *)&v328 + 1) = v165 + 144;
                  *(void *)&long long v329 = v165 + 192;
                  *((void *)&v329 + 1) = v165 + 196;
                  v330 = (unsigned char *)(v165 + 200);
                  *(void *)&long long v322 = v165;
                  *((void *)&v322 + 1) = v165 + 40;
                  *(void *)&long long v323 = v165 + 88;
                  *((void *)&v323 + 1) = v165 + 92;
                  v324 = (char *)(v165 + 96);
                  unint64_t v166 = a2;
                  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v322) & 0x80) != 0)
                  {
                    uint64_t v167 = 0;
                    long long v168 = *(_OWORD *)v163;
                    long long v169 = *(_OWORD *)(v163 + 16);
                    v330 = *(unsigned char **)(v163 + 32);
                    long long v328 = v168;
                    long long v329 = v169;
                    do
                    {
                      v170 = (char *)&v328 + v167;
                      v171 = (void *)(v165 + v167);
                      *((void *)v170 + 7) = 0;
                      *(_OWORD *)(v170 + 40) = *(_OWORD *)(v165 + v167 + 144);
                      *((void *)v170 + 7) = *(void *)(v165 + v167 + 160);
                      v171[18] = 0;
                      v171[19] = 0;
                      v171[20] = 0;
                      v167 += 24;
                    }
                    while (v167 != 48);
                    uint64_t v332 = *(void *)(v165 + 192);
                    char v333 = *(unsigned char *)(v165 + 200);
                    uint64_t v312 = v164;
                    uint64_t v172 = v165;
                    uint64_t v173 = v163;
                    while (1)
                    {
                      uint64_t v174 = v172;
                      long long v175 = *(_OWORD *)(v172 + 16);
                      *(_OWORD *)uint64_t v173 = *(_OWORD *)v172;
                      *(_OWORD *)(v173 + 16) = v175;
                      *(void *)(v173 + 32) = *(void *)(v172 + 32);
                      uint64_t v176 = v164;
                      uint64_t v177 = 2;
                      do
                      {
                        uint64_t v178 = a1 + v176;
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v176 + 144));
                        *(_OWORD *)(v178 + 144) = *(_OWORD *)(v178 + 40);
                        *(void *)(v178 + 160) = *(void *)(v178 + 56);
                        *(void *)(v178 + 48) = 0;
                        *(void *)(v178 + 56) = 0;
                        *(void *)(v178 + 40) = 0;
                        v176 += 24;
                        --v177;
                      }
                      while (v177);
                      *(void *)(v173 + 88) = *(void *)(v174 + 88);
                      *(unsigned char *)(v173 + 96) = *(unsigned char *)(v174 + 96);
                      if (v174 == a1) {
                        break;
                      }
                      uint64_t v172 = v174 - 104;
                      *(void *)&long long v322 = &v328;
                      *((void *)&v322 + 1) = v331;
                      *(void *)&long long v323 = &v332;
                      *((void *)&v323 + 1) = (char *)&v332 + 4;
                      v324 = &v333;
                      v334 = (void **)(v174 - 104);
                      v335 = (char *)(v174 - 64);
                      v336 = (uint64_t *)(v174 - 16);
                      v337 = (char *)(v174 - 12);
                      v338 = (char *)(v174 - 8);
                      v164 -= 104;
                      uint64_t v173 = v174;
                      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v322, (uint64_t *)&v334) & 0x80) == 0)
                      {
                        uint64_t v179 = v174;
                        goto LABEL_117;
                      }
                    }
                    uint64_t v179 = a1;
LABEL_117:
                    unint64_t v166 = a2;
                    uint64_t v180 = 0;
                    long long v181 = v328;
                    long long v182 = v329;
                    *(void *)(v179 + 32) = v330;
                    *(_OWORD *)uint64_t v179 = v181;
                    *(_OWORD *)(v179 + 16) = v182;
                    do
                    {
                      uint64_t v183 = v174 + v180;
                      v184 = (void *)((char *)&v328 + v180);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v174 + v180 + 40));
                      *(_OWORD *)(v183 + 40) = *(_OWORD *)&v331[v180];
                      *(void *)(v183 + 56) = *(void *)&v331[v180 + 16];
                      v184[5] = 0;
                      v184[6] = 0;
                      v184[7] = 0;
                      v180 += 24;
                    }
                    while (v180 != 48);
                    uint64_t v185 = v332;
                    *(unsigned char *)(v174 + 96) = v333;
                    *(void *)(v174 + 88) = v185;
                    for (uint64_t j = 64; j != 16; j -= 24)
                    {
                      *(void *)&long long v322 = (char *)&v328 + j;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v322);
                    }
                    uint64_t v164 = v312;
                  }
                  v163 += 104;
                  v165 += 104;
                  v164 += 104;
                }
                while (v163 != v166);
              }
            }
          }
          else if (v7 != a2)
          {
            uint64_t v282 = v7 + 104;
            if (a1 + 104 != a2)
            {
              do
              {
                uint64_t v283 = a1;
                *(void *)&long long v328 = v282;
                *((void *)&v328 + 1) = a1 + 144;
                *(void *)&long long v329 = a1 + 192;
                *((void *)&v329 + 1) = a1 + 196;
                v330 = (unsigned char *)(a1 + 200);
                *(void *)&long long v322 = a1;
                *((void *)&v322 + 1) = a1 + 40;
                *(void *)&long long v323 = a1 + 88;
                *((void *)&v323 + 1) = a1 + 92;
                v324 = (char *)(a1 + 96);
                if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v322) & 0x80) != 0)
                {
                  uint64_t v284 = 0;
                  long long v285 = *(_OWORD *)v282;
                  long long v286 = *(_OWORD *)(v282 + 16);
                  v330 = *(unsigned char **)(v282 + 32);
                  long long v328 = v285;
                  long long v329 = v286;
                  do
                  {
                    v287 = (char *)&v328 + v284;
                    v288 = (void *)(a1 + v284);
                    *((void *)v287 + 7) = 0;
                    *(_OWORD *)(v287 + 40) = *(_OWORD *)(a1 + v284 + 144);
                    *((void *)v287 + 7) = *(void *)(a1 + v284 + 160);
                    v288[18] = 0;
                    v288[19] = 0;
                    v288[20] = 0;
                    v284 += 24;
                  }
                  while (v284 != 48);
                  uint64_t v332 = *(void *)(a1 + 192);
                  char v333 = *(unsigned char *)(a1 + 200);
                  uint64_t v289 = a1;
                  uint64_t v320 = v282;
                  uint64_t v290 = v282;
                  do
                  {
                    uint64_t v291 = 0;
                    uint64_t v292 = v289;
                    long long v293 = *(_OWORD *)(v289 + 16);
                    *(_OWORD *)uint64_t v290 = *(_OWORD *)v289;
                    *(_OWORD *)(v290 + 16) = v293;
                    *(void *)(v290 + 32) = *(void *)(v289 + 32);
                    do
                    {
                      uint64_t v294 = v292 + v291;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v292 + v291 + 144));
                      *(_OWORD *)(v294 + 144) = *(_OWORD *)(v294 + 40);
                      *(void *)(v294 + 160) = *(void *)(v294 + 56);
                      *(void *)(v294 + 48) = 0;
                      *(void *)(v294 + 56) = 0;
                      *(void *)(v294 + 40) = 0;
                      v291 += 24;
                    }
                    while (v291 != 48);
                    uint64_t v295 = v292 + 88;
                    *(void *)(v290 + 88) = *(void *)(v292 + 88);
                    *(unsigned char *)(v290 + 96) = *(unsigned char *)(v292 + 96);
                    uint64_t v289 = v292 - 104;
                    *(void *)&long long v322 = &v328;
                    *((void *)&v322 + 1) = v331;
                    *(void *)&long long v323 = &v332;
                    *((void *)&v323 + 1) = (char *)&v332 + 4;
                    v324 = &v333;
                    v334 = (void **)(v292 - 104);
                    v335 = (char *)(v292 - 64);
                    v336 = (uint64_t *)(v292 - 16);
                    v337 = (char *)(v292 - 12);
                    v338 = (char *)(v292 - 8);
                    uint64_t v290 = v292;
                  }
                  while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v322, (uint64_t *)&v334) & 0x80) != 0);
                  uint64_t v296 = 0;
                  long long v297 = v328;
                  long long v298 = v329;
                  *(void *)(v292 + 32) = v330;
                  *(_OWORD *)uint64_t v292 = v297;
                  *(_OWORD *)(v292 + 16) = v298;
                  do
                  {
                    uint64_t v299 = v289 + v296;
                    v300 = (void *)((char *)&v328 + v296);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v289 + v296 + 144));
                    *(_OWORD *)(v299 + 144) = *(_OWORD *)&v331[v296];
                    *(void *)(v299 + 160) = *(void *)&v331[v296 + 16];
                    v300[5] = 0;
                    v300[6] = 0;
                    v300[7] = 0;
                    v296 += 24;
                  }
                  while (v296 != 48);
                  uint64_t v301 = v332;
                  *(unsigned char *)(v295 + 8) = v333;
                  *(void *)uint64_t v295 = v301;
                  for (uint64_t k = 64; k != 16; k -= 24)
                  {
                    *(void *)&long long v322 = (char *)&v328 + k;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v322);
                  }
                  uint64_t v283 = a1;
                  uint64_t v282 = v320;
                }
                v282 += 104;
                a1 = v283 + 104;
              }
              while (v282 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            int64_t v187 = (unint64_t)(v9 - 2) >> 1;
            uint64_t v188 = v7 + 104 * v187;
            int64_t v319 = v187;
            uint64_t v303 = v8;
            do
            {
              int64_t v189 = v187;
              if (v319 >= v187)
              {
                uint64_t v190 = (2 * v187) | 1;
                uint64_t v191 = v7 + 104 * v190;
                if (2 * v187 + 2 < v9)
                {
                  uint64_t v192 = v7 + 104 * v190;
                  *(void *)&long long v328 = v192;
                  *((void *)&v328 + 1) = v192 + 40;
                  *(void *)&long long v329 = v192 + 88;
                  *((void *)&v329 + 1) = v192 + 92;
                  v330 = (unsigned char *)(v192 + 96);
                  *(void *)&long long v322 = v191 + 104;
                  *((void *)&v322 + 1) = v191 + 144;
                  *(void *)&long long v323 = v191 + 192;
                  *((void *)&v323 + 1) = v191 + 196;
                  v324 = (char *)(v191 + 200);
                  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v322) & 0x80u) != 0)
                  {
                    v191 += 104;
                    uint64_t v190 = 2 * v189 + 2;
                  }
                }
                uint64_t v193 = v7 + 104 * v189;
                *(void *)&long long v328 = v191;
                *((void *)&v328 + 1) = v191 + 40;
                *(void *)&long long v329 = v191 + 88;
                *((void *)&v329 + 1) = v191 + 92;
                v330 = (unsigned char *)(v191 + 96);
                *(void *)&long long v322 = v193;
                *((void *)&v322 + 1) = v193 + 40;
                *(void *)&long long v323 = v193 + 88;
                *((void *)&v323 + 1) = v193 + 92;
                v324 = (char *)(v193 + 96);
                if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v322) & 0x80) == 0)
                {
                  int64_t v306 = v189;
                  uint64_t v194 = 0;
                  long long v195 = *(_OWORD *)v193;
                  long long v196 = *(_OWORD *)(v193 + 16);
                  v330 = *(unsigned char **)(v193 + 32);
                  long long v328 = v195;
                  long long v329 = v196;
                  do
                  {
                    v197 = (char *)&v328 + v194;
                    v198 = (void *)(v188 + v194);
                    *((void *)v197 + 6) = 0;
                    *((void *)v197 + 7) = 0;
                    *(_OWORD *)(v197 + 40) = *(_OWORD *)(v188 + v194 + 40);
                    *((void *)v197 + 7) = *(void *)(v188 + v194 + 56);
                    v198[5] = 0;
                    v198[6] = 0;
                    v198[7] = 0;
                    v194 += 24;
                  }
                  while (v194 != 48);
                  uint64_t v308 = v188;
                  uint64_t v199 = *(void *)(v193 + 88);
                  char v333 = *(unsigned char *)(v193 + 96);
                  uint64_t v332 = v199;
                  do
                  {
                    uint64_t v200 = 0;
                    uint64_t v201 = v191;
                    long long v202 = *(_OWORD *)v191;
                    long long v203 = *(_OWORD *)(v191 + 16);
                    *(void *)(v193 + 32) = *(void *)(v191 + 32);
                    *(_OWORD *)uint64_t v193 = v202;
                    *(_OWORD *)(v193 + 16) = v203;
                    do
                    {
                      uint64_t v204 = v193 + v200;
                      v205 = (void *)(v191 + v200);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v193 + v200 + 40));
                      *(_OWORD *)(v204 + 40) = *(_OWORD *)(v191 + v200 + 40);
                      *(void *)(v204 + 56) = *(void *)(v191 + v200 + 56);
                      v205[5] = 0;
                      v205[6] = 0;
                      v205[7] = 0;
                      v200 += 24;
                    }
                    while (v200 != 48);
                    uint64_t v206 = *(void *)(v191 + 88);
                    *(unsigned char *)(v193 + 96) = *(unsigned char *)(v191 + 96);
                    *(void *)(v193 + 88) = v206;
                    if (v319 < v190) {
                      break;
                    }
                    uint64_t v207 = (2 * v190) | 1;
                    uint64_t v191 = a1 + 104 * v207;
                    if (2 * v190 + 2 < v9)
                    {
                      uint64_t v208 = a1 + 104 * v207;
                      *(void *)&long long v322 = v208;
                      *((void *)&v322 + 1) = v208 + 40;
                      *(void *)&long long v323 = v208 + 88;
                      *((void *)&v323 + 1) = v208 + 92;
                      v324 = (char *)(v208 + 96);
                      v334 = (void **)(v191 + 104);
                      v335 = (char *)(v191 + 144);
                      v336 = (uint64_t *)(v191 + 192);
                      v337 = (char *)(v191 + 196);
                      v338 = (char *)(v191 + 200);
                      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v322, (uint64_t *)&v334) & 0x80u) != 0)
                      {
                        v191 += 104;
                        uint64_t v207 = 2 * v190 + 2;
                      }
                    }
                    *(void *)&long long v322 = v191;
                    *((void *)&v322 + 1) = v191 + 40;
                    *(void *)&long long v323 = v191 + 88;
                    *((void *)&v323 + 1) = v191 + 92;
                    v324 = (char *)(v191 + 96);
                    v334 = (void **)&v328;
                    v335 = v331;
                    v336 = &v332;
                    v337 = (char *)&v332 + 4;
                    v338 = &v333;
                    uint64_t v193 = v201;
                    uint64_t v190 = v207;
                  }
                  while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v322, (uint64_t *)&v334) & 0x80) == 0);
                  uint64_t v209 = 0;
                  long long v210 = v328;
                  long long v211 = v329;
                  *(void *)(v201 + 32) = v330;
                  *(_OWORD *)uint64_t v201 = v210;
                  *(_OWORD *)(v201 + 16) = v211;
                  do
                  {
                    uint64_t v212 = v201 + v209;
                    v213 = (void *)((char *)&v328 + v209);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v201 + v209 + 40));
                    *(_OWORD *)(v212 + 40) = *(_OWORD *)&v331[v209];
                    *(void *)(v212 + 56) = *(void *)&v331[v209 + 16];
                    v213[5] = 0;
                    v213[6] = 0;
                    v213[7] = 0;
                    v209 += 24;
                  }
                  while (v209 != 48);
                  uint64_t v214 = v332;
                  *(unsigned char *)(v201 + 96) = v333;
                  *(void *)(v201 + 88) = v214;
                  uint64_t v215 = 64;
                  uint64_t v188 = v308;
                  do
                  {
                    *(void *)&long long v322 = (char *)&v328 + v215;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v322);
                    v215 -= 24;
                  }
                  while (v215 != 16);
                  uint64_t v7 = a1;
                  uint64_t v8 = v303;
                  int64_t v189 = v306;
                }
              }
              int64_t v187 = v189 - 1;
              v188 -= 104;
            }
            while (v189);
            int64_t v216 = v8 / 0x68uLL;
            uint64_t v309 = v7 + 88;
            do
            {
              unint64_t v217 = a2;
              if (v216 >= 2)
              {
                uint64_t v218 = 0;
                uint64_t v219 = a1;
                long long v220 = *(_OWORD *)a1;
                long long v221 = *(_OWORD *)(a1 + 16);
                v324 = *(char **)(a1 + 32);
                long long v322 = v220;
                long long v323 = v221;
                do
                {
                  v222 = (char *)&v322 + v218;
                  v223 = (void *)(a1 + v218);
                  *((void *)v222 + 6) = 0;
                  *((void *)v222 + 7) = 0;
                  *(_OWORD *)(v222 + 40) = *(_OWORD *)(a1 + v218 + 40);
                  *((void *)v222 + 7) = *(void *)(a1 + v218 + 56);
                  v223[5] = 0;
                  v223[6] = 0;
                  v223[7] = 0;
                  v218 += 24;
                }
                while (v218 != 48);
                uint64_t v224 = 0;
                uint64_t v225 = *(void *)v309;
                v327[0] = *(unsigned char *)(v309 + 8);
                uint64_t v326 = v225;
                do
                {
                  uint64_t v226 = v224 + 1;
                  uint64_t v227 = v219 + 104 * (v224 + 1);
                  uint64_t v228 = 2 * v224;
                  uint64_t v224 = (2 * v224) | 1;
                  uint64_t v229 = v228 + 2;
                  if (v228 + 2 < v216)
                  {
                    uint64_t v230 = v219 + 104 * v226;
                    *(void *)&long long v328 = v227;
                    *((void *)&v328 + 1) = v230 + 40;
                    *(void *)&long long v329 = v230 + 88;
                    *((void *)&v329 + 1) = v230 + 92;
                    v330 = (unsigned char *)(v230 + 96);
                    v334 = (void **)(v227 + 104);
                    v335 = (char *)(v227 + 144);
                    v336 = (uint64_t *)(v227 + 192);
                    v337 = (char *)(v227 + 196);
                    v338 = (char *)(v227 + 200);
                    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80u) != 0)
                    {
                      v227 += 104;
                      uint64_t v224 = v229;
                    }
                  }
                  uint64_t v231 = 0;
                  long long v232 = *(_OWORD *)v227;
                  long long v233 = *(_OWORD *)(v227 + 16);
                  *(void *)(v219 + 32) = *(void *)(v227 + 32);
                  *(_OWORD *)uint64_t v219 = v232;
                  *(_OWORD *)(v219 + 16) = v233;
                  do
                  {
                    uint64_t v234 = v219 + v231;
                    v235 = (void *)(v227 + v231);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v219 + v231 + 40));
                    *(_OWORD *)(v234 + 40) = *(_OWORD *)(v227 + v231 + 40);
                    *(void *)(v234 + 56) = *(void *)(v227 + v231 + 56);
                    v235[5] = 0;
                    v235[6] = 0;
                    v235[7] = 0;
                    v231 += 24;
                  }
                  while (v231 != 48);
                  v237 = (uint64_t *)(v227 + 88);
                  uint64_t v236 = *(void *)(v227 + 88);
                  *(unsigned char *)(v219 + 96) = *(unsigned char *)(v227 + 96);
                  *(void *)(v219 + 88) = v236;
                  uint64_t v219 = v227;
                }
                while (v224 <= (uint64_t)((unint64_t)(v216 - 2) >> 1));
                unint64_t v217 = a2;
                v238 = (long long *)(a2 - 104);
                if (v227 == a2 - 104)
                {
                  uint64_t v274 = 0;
                  long long v275 = v322;
                  long long v276 = v323;
                  *(void *)(v227 + 32) = v324;
                  *(_OWORD *)uint64_t v227 = v275;
                  *(_OWORD *)(v227 + 16) = v276;
                  do
                  {
                    uint64_t v277 = v227 + v274;
                    v278 = (void *)((char *)&v322 + v274);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v227 + v274 + 40));
                    *(_OWORD *)(v277 + 40) = *(_OWORD *)&v325[v274];
                    *(void *)(v277 + 56) = *(void *)&v325[v274 + 16];
                    v278[5] = 0;
                    v278[6] = 0;
                    v278[7] = 0;
                    v274 += 24;
                  }
                  while (v274 != 48);
                  uint64_t v279 = v326;
                  *(unsigned char *)(v227 + 96) = v327[0];
                  uint64_t *v237 = v279;
                }
                else
                {
                  uint64_t v239 = 0;
                  long long v240 = *v238;
                  long long v241 = *(_OWORD *)(a2 - 88);
                  *(void *)(v227 + 32) = *(void *)(a2 - 72);
                  *(_OWORD *)uint64_t v227 = v240;
                  *(_OWORD *)(v227 + 16) = v241;
                  do
                  {
                    uint64_t v242 = v227 + v239;
                    uint64_t v243 = a2 + v239;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v227 + v239 + 40));
                    *(_OWORD *)(v242 + 40) = *(_OWORD *)(a2 + v239 - 64);
                    *(void *)(v242 + 56) = *(void *)(a2 + v239 - 48);
                    *(void *)(v243 - 64) = 0;
                    *(void *)(v243 - 56) = 0;
                    *(void *)(v243 - 48) = 0;
                    v239 += 24;
                  }
                  while (v239 != 48);
                  uint64_t v244 = 0;
                  uint64_t v245 = *(void *)(a2 - 16);
                  *(unsigned char *)(v227 + 96) = *(unsigned char *)(a2 - 8);
                  uint64_t *v237 = v245;
                  long long v246 = v322;
                  long long v247 = v323;
                  *(void *)(a2 - 72) = v324;
                  long long *v238 = v246;
                  *(_OWORD *)(a2 - 88) = v247;
                  do
                  {
                    uint64_t v248 = a2 + v244;
                    v249 = (void *)((char *)&v322 + v244);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v244 - 64));
                    *(_OWORD *)(v248 - 64) = *(_OWORD *)&v325[v244];
                    *(void *)(v248 - 48) = *(void *)&v325[v244 + 16];
                    v249[5] = 0;
                    v249[6] = 0;
                    v249[7] = 0;
                    v244 += 24;
                  }
                  while (v244 != 48);
                  uint64_t v250 = v326;
                  *(unsigned char *)(a2 - 8) = v327[0];
                  *(void *)(a2 - 16) = v250;
                  uint64_t v251 = v227 - a1 + 104;
                  if (v251 >= 105)
                  {
                    unint64_t v252 = (unint64_t)(0x4EC4EC4EC4EC4EC5 * (v251 >> 3) - 2) >> 1;
                    unint64_t v253 = a1 + 104 * v252;
                    *(void *)&long long v328 = v253;
                    *((void *)&v328 + 1) = v253 + 40;
                    *(void *)&long long v329 = v253 + 88;
                    *((void *)&v329 + 1) = v253 + 92;
                    v330 = (unsigned char *)(v253 + 96);
                    v334 = (void **)v227;
                    v335 = (char *)(v227 + 40);
                    v336 = (uint64_t *)(v227 + 88);
                    v337 = (char *)(v227 + 92);
                    v338 = (char *)(v227 + 96);
                    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) != 0)
                    {
                      uint64_t v254 = 0;
                      long long v255 = *(_OWORD *)v227;
                      long long v256 = *(_OWORD *)(v227 + 16);
                      v330 = *(unsigned char **)(v227 + 32);
                      long long v328 = v255;
                      long long v329 = v256;
                      do
                      {
                        v257 = (char *)&v328 + v254;
                        v258 = (void *)(v227 + v254);
                        *((void *)v257 + 6) = 0;
                        *((void *)v257 + 7) = 0;
                        *(_OWORD *)(v257 + 40) = *(_OWORD *)(v227 + v254 + 40);
                        *((void *)v257 + 7) = *(void *)(v227 + v254 + 56);
                        v258[5] = 0;
                        v258[6] = 0;
                        v258[7] = 0;
                        v254 += 24;
                      }
                      while (v254 != 48);
                      uint64_t v259 = *v237;
                      char v333 = *(unsigned char *)(v227 + 96);
                      uint64_t v332 = v259;
                      do
                      {
                        uint64_t v260 = 0;
                        unint64_t v261 = v253;
                        long long v262 = *(_OWORD *)v253;
                        long long v263 = *(_OWORD *)(v253 + 16);
                        *(void *)(v227 + 32) = *(void *)(v253 + 32);
                        *(_OWORD *)uint64_t v227 = v262;
                        *(_OWORD *)(v227 + 16) = v263;
                        do
                        {
                          uint64_t v264 = v227 + v260;
                          v265 = (void *)(v261 + v260);
                          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v227 + v260 + 40));
                          *(_OWORD *)(v264 + 40) = *(_OWORD *)(v261 + v260 + 40);
                          *(void *)(v264 + 56) = *(void *)(v261 + v260 + 56);
                          v265[5] = 0;
                          v265[6] = 0;
                          v265[7] = 0;
                          v260 += 24;
                        }
                        while (v260 != 48);
                        uint64_t v266 = *(void *)(v261 + 88);
                        *(unsigned char *)(v227 + 96) = *(unsigned char *)(v261 + 96);
                        *(void *)(v227 + 88) = v266;
                        if (!v252) {
                          break;
                        }
                        unint64_t v252 = (v252 - 1) >> 1;
                        unint64_t v253 = a1 + 104 * v252;
                        v334 = (void **)v253;
                        v335 = (char *)(v253 + 40);
                        v336 = (uint64_t *)(v253 + 88);
                        v337 = (char *)(v253 + 92);
                        v338 = (char *)(v253 + 96);
                        v321[0] = (uint64_t)&v328;
                        v321[1] = (uint64_t)v331;
                        v321[2] = (uint64_t)&v332;
                        v321[3] = (uint64_t)&v332 + 4;
                        v321[4] = (uint64_t)&v333;
                        uint64_t v227 = v261;
                      }
                      while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v334, v321) & 0x80) != 0);
                      uint64_t v267 = 0;
                      long long v268 = v328;
                      long long v269 = v329;
                      *(void *)(v261 + 32) = v330;
                      *(_OWORD *)unint64_t v261 = v268;
                      *(_OWORD *)(v261 + 16) = v269;
                      do
                      {
                        uint64_t v270 = v261 + v267;
                        v271 = (void *)((char *)&v328 + v267);
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v261 + v267 + 40));
                        *(_OWORD *)(v270 + 40) = *(_OWORD *)&v331[v267];
                        *(void *)(v270 + 56) = *(void *)&v331[v267 + 16];
                        v271[5] = 0;
                        v271[6] = 0;
                        v271[7] = 0;
                        v267 += 24;
                      }
                      while (v267 != 48);
                      uint64_t v272 = v332;
                      *(unsigned char *)(v261 + 96) = v333;
                      *(void *)(v261 + 88) = v272;
                      for (uint64_t m = 64; m != 16; m -= 24)
                      {
                        v334 = (void **)((char *)&v328 + m);
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v334);
                      }
                      unint64_t v217 = a2;
                    }
                  }
                }
                for (uint64_t n = 64; n != 16; n -= 24)
                {
                  *(void *)&long long v328 = (char *)&v322 + n;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v328);
                }
              }
              a2 = v217 - 104;
            }
            while ((unint64_t)v216-- > 2);
          }
          return;
        }
        unint64_t v10 = (unint64_t)v9 >> 1;
        unint64_t v11 = v7 + 104 * ((unint64_t)v9 >> 1);
        if ((unint64_t)v8 < 0x3401)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)v11, (long long *)v7, v307);
        }
        else
        {
          unint64_t v12 = (long long *)v7;
          unint64_t v13 = v10;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v12, (long long *)v11, v307);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)(a1 + 104), (long long *)(104 * v13 + a1 - 104), (long long *)(a2 - 208));
          uint64_t v14 = (long long *)(a1 + 104 + 104 * v13);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)(a1 + 208), v14, (long long *)(a2 - 312));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)(104 * v13 + a1 - 104), (long long *)v11, v14);
          uint64_t v15 = 0;
          long long v16 = *(_OWORD *)a1;
          long long v17 = *(_OWORD *)(a1 + 16);
          v330 = *(unsigned char **)(a1 + 32);
          long long v328 = v16;
          long long v329 = v17;
          unint64_t v18 = v13;
          do
          {
            BOOL v19 = (char *)&v328 + v15;
            unint64_t v20 = (void *)(a1 + v15);
            *((void *)v19 + 6) = 0;
            *((void *)v19 + 7) = 0;
            *(_OWORD *)(v19 + 40) = *(_OWORD *)(a1 + v15 + 40);
            *((void *)v19 + 7) = *(void *)(a1 + v15 + 56);
            v20[5] = 0;
            v20[6] = 0;
            v20[7] = 0;
            v15 += 24;
          }
          while (v15 != 48);
          uint64_t v21 = 0;
          uint64_t v22 = *(void *)(a1 + 88);
          unint64_t v313 = v18;
          char v333 = *(unsigned char *)(a1 + 96);
          uint64_t v332 = v22;
          long long v23 = *(_OWORD *)v11;
          long long v24 = *(_OWORD *)(v11 + 16);
          *(void *)(a1 + 32) = *(void *)(v11 + 32);
          *(_OWORD *)a1 = v23;
          *(_OWORD *)(a1 + 16) = v24;
          uint64_t v25 = a1 + 104 * v18;
          do
          {
            uint64_t v26 = a1 + v21;
            long long v27 = (void *)(v25 + v21);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v21 + 40));
            *(_OWORD *)(v26 + 40) = *(_OWORD *)(v25 + v21 + 40);
            *(void *)(v26 + 56) = *(void *)(v25 + v21 + 56);
            v27[5] = 0;
            v27[6] = 0;
            v27[7] = 0;
            v21 += 24;
          }
          while (v21 != 48);
          uint64_t v28 = 0;
          uint64_t v29 = a1 + 104 * v313;
          uint64_t v30 = *(void *)(v29 + 88);
          *(unsigned char *)(a1 + 96) = *(unsigned char *)(v29 + 96);
          *(void *)(a1 + 88) = v30;
          unint64_t v31 = v330;
          long long v32 = v329;
          *(_OWORD *)unint64_t v11 = v328;
          *(_OWORD *)(v11 + 16) = v32;
          *(void *)(v11 + 32) = v31;
          do
          {
            uint64_t v33 = v29 + v28;
            unint64_t v34 = (void *)((char *)&v328 + v28);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v29 + v28 + 40));
            *(_OWORD *)(v33 + 40) = *(_OWORD *)&v331[v28];
            *(void *)(v33 + 56) = *(void *)&v331[v28 + 16];
            v34[5] = 0;
            v34[6] = 0;
            v34[7] = 0;
            v28 += 24;
          }
          while (v28 != 48);
          uint64_t v35 = v332;
          *(unsigned char *)(v29 + 96) = v333;
          *(void *)(v29 + 88) = v35;
          for (iuint64_t i = 64; ii != 16; ii -= 24)
          {
            *(void *)&long long v322 = (char *)&v328 + ii;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v322);
          }
          uint64_t v7 = a1;
        }
        --a3;
        if (a4) {
          break;
        }
        *(void *)&long long v328 = v7 - 104;
        *((void *)&v328 + 1) = v7 - 64;
        *(void *)&long long v329 = v7 - 16;
        *((void *)&v329 + 1) = v7 - 12;
        v330 = (unsigned char *)(v7 - 8);
        *(void *)&long long v322 = v7;
        *((void *)&v322 + 1) = v7 + 40;
        *(void *)&long long v323 = v7 + 88;
        *((void *)&v323 + 1) = v7 + 92;
        v324 = (char *)(v7 + 96);
        if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v322) & 0x80) != 0)break; {
        uint64_t v91 = 0;
        }
        long long v92 = *(_OWORD *)v7;
        long long v93 = *(_OWORD *)(v7 + 16);
        v324 = *(char **)(v7 + 32);
        long long v322 = v92;
        long long v323 = v93;
        do
        {
          unint64_t v94 = (char *)&v322 + v91;
          v95 = (void *)(v7 + v91);
          *((void *)v94 + 6) = 0;
          *((void *)v94 + 7) = 0;
          *(_OWORD *)(v94 + 40) = *(_OWORD *)(v7 + v91 + 40);
          *((void *)v94 + 7) = *(void *)(v7 + v91 + 56);
          v95[5] = 0;
          v95[6] = 0;
          v95[7] = 0;
          v91 += 24;
        }
        while (v91 != 48);
        uint64_t v96 = *(void *)(v7 + 88);
        uint64_t v311 = v7 + 88;
        v327[0] = *(unsigned char *)(v7 + 96);
        uint64_t v326 = v96;
        *(void *)&long long v328 = &v322;
        *((void *)&v328 + 1) = v325;
        *(void *)&long long v329 = &v326;
        *((void *)&v329 + 1) = (char *)&v326 + 4;
        v330 = v327;
        v334 = (void **)(a2 - 104);
        v335 = (char *)(a2 - 64);
        v336 = (uint64_t *)(a2 - 16);
        v337 = (char *)(a2 - 12);
        v338 = (char *)(a2 - 8);
        if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) != 0)
        {
          do
          {
            unint64_t v6 = v7 + 104;
            *(void *)&long long v328 = &v322;
            *((void *)&v328 + 1) = v325;
            *(void *)&long long v329 = &v326;
            *((void *)&v329 + 1) = (char *)&v326 + 4;
            v330 = v327;
            v334 = (void **)(v7 + 104);
            v335 = (char *)(v7 + 144);
            v336 = (uint64_t *)(v7 + 192);
            v337 = (char *)(v7 + 196);
            v338 = (char *)(v7 + 200);
            v7 += 104;
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) == 0);
        }
        else
        {
          unint64_t v97 = (char *)(v7 + 200);
          do
          {
            unint64_t v6 = (unint64_t)(v97 - 96);
            if ((unint64_t)(v97 - 96) >= a2) {
              break;
            }
            *(void *)&long long v328 = &v322;
            *((void *)&v328 + 1) = v325;
            *(void *)&long long v329 = &v326;
            *((void *)&v329 + 1) = (char *)&v326 + 4;
            v330 = v327;
            v334 = (void **)(v97 - 96);
            v335 = v97 - 56;
            v336 = (uint64_t *)(v97 - 8);
            v337 = v97 - 4;
            v338 = v97;
            v97 += 104;
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) == 0);
        }
        unint64_t v98 = a2;
        if (v6 < a2)
        {
          unint64_t v99 = a2;
          do
          {
            unint64_t v98 = v99 - 104;
            *(void *)&long long v328 = &v322;
            *((void *)&v328 + 1) = v325;
            *(void *)&long long v329 = &v326;
            *((void *)&v329 + 1) = (char *)&v326 + 4;
            v330 = v327;
            v334 = (void **)(v99 - 104);
            v335 = (char *)(v99 - 64);
            v336 = (uint64_t *)(v99 - 16);
            v337 = (char *)(v99 - 12);
            v338 = (char *)(v99 - 8);
            char v100 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334);
            unint64_t v99 = v98;
          }
          while (v100 < 0);
        }
        while (v6 < v98)
        {
          uint64_t v101 = 0;
          long long v102 = *(_OWORD *)v6;
          long long v103 = *(_OWORD *)(v6 + 16);
          v330 = *(unsigned char **)(v6 + 32);
          long long v328 = v102;
          long long v329 = v103;
          do
          {
            v104 = (char *)&v328 + v101;
            uint64_t v105 = (void *)(v6 + v101);
            *((void *)v104 + 6) = 0;
            *((void *)v104 + 7) = 0;
            *(_OWORD *)(v104 + 40) = *(_OWORD *)(v6 + v101 + 40);
            *((void *)v104 + 7) = *(void *)(v6 + v101 + 56);
            v105[5] = 0;
            v105[6] = 0;
            v105[7] = 0;
            v101 += 24;
          }
          while (v101 != 48);
          uint64_t v106 = 0;
          uint64_t v107 = *(void *)(v6 + 88);
          char v333 = *(unsigned char *)(v6 + 96);
          uint64_t v332 = v107;
          long long v108 = *(_OWORD *)v98;
          long long v109 = *(_OWORD *)(v98 + 16);
          *(void *)(v6 + 32) = *(void *)(v98 + 32);
          *(_OWORD *)unint64_t v6 = v108;
          *(_OWORD *)(v6 + 16) = v109;
          do
          {
            uint64_t v110 = v6 + v106;
            v111 = (void *)(v98 + v106);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + v106 + 40));
            *(_OWORD *)(v110 + 40) = *(_OWORD *)(v98 + v106 + 40);
            *(void *)(v110 + 56) = *(void *)(v98 + v106 + 56);
            v111[5] = 0;
            v111[6] = 0;
            v111[7] = 0;
            v106 += 24;
          }
          while (v106 != 48);
          uint64_t v112 = 0;
          uint64_t v113 = *(void *)(v98 + 88);
          *(unsigned char *)(v6 + 96) = *(unsigned char *)(v98 + 96);
          *(void *)(v6 + 88) = v113;
          long long v114 = v328;
          long long v115 = v329;
          *(void *)(v98 + 32) = v330;
          *(_OWORD *)unint64_t v98 = v114;
          *(_OWORD *)(v98 + 16) = v115;
          do
          {
            uint64_t v116 = v98 + v112;
            uint64_t v117 = (void *)((char *)&v328 + v112);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v98 + v112 + 40));
            *(_OWORD *)(v116 + 40) = *(_OWORD *)&v331[v112];
            *(void *)(v116 + 56) = *(void *)&v331[v112 + 16];
            v117[5] = 0;
            v117[6] = 0;
            v117[7] = 0;
            v112 += 24;
          }
          while (v112 != 48);
          uint64_t v118 = v332;
          *(unsigned char *)(v98 + 96) = v333;
          *(void *)(v98 + 88) = v118;
          for (uint64_t jj = 64; jj != 16; jj -= 24)
          {
            v334 = (void **)((char *)&v328 + jj);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v334);
          }
          do
          {
            *(void *)&long long v328 = &v322;
            *((void *)&v328 + 1) = v325;
            uint64_t v120 = (char *)(v6 + 144);
            v121 = (uint64_t *)(v6 + 192);
            v122 = (char *)(v6 + 196);
            char v123 = (char *)(v6 + 200);
            v6 += 104;
            *(void *)&long long v329 = &v326;
            *((void *)&v329 + 1) = (char *)&v326 + 4;
            v330 = v327;
            v334 = (void **)v6;
            v335 = v120;
            v336 = v121;
            v337 = v122;
            v338 = v123;
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) == 0);
          do
          {
            *(void *)&long long v328 = &v322;
            *((void *)&v328 + 1) = v325;
            uint64_t v124 = (char *)(v98 - 64);
            v125 = (uint64_t *)(v98 - 16);
            v126 = (char *)(v98 - 12);
            v127 = (char *)(v98 - 8);
            v98 -= 104;
            *(void *)&long long v329 = &v326;
            *((void *)&v329 + 1) = (char *)&v326 + 4;
            v330 = v327;
            v334 = (void **)v98;
            v335 = v124;
            v336 = v125;
            v337 = v126;
            v338 = v127;
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) != 0);
        }
        v128 = (long long *)(v6 - 104);
        uint64_t v129 = a1;
        if (v6 - 104 != a1)
        {
          uint64_t v130 = 0;
          long long v131 = *v128;
          long long v132 = *(_OWORD *)(v6 - 88);
          *(void *)(a1 + 32) = *(void *)(v6 - 72);
          *(_OWORD *)a1 = v131;
          *(_OWORD *)(a1 + 16) = v132;
          do
          {
            uint64_t v133 = v129 + v130;
            uint64_t v134 = v6 + v130;
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v129 + v130 + 40));
            *(_OWORD *)(v133 + 40) = *(_OWORD *)(v6 + v130 - 64);
            *(void *)(v133 + 56) = *(void *)(v6 + v130 - 48);
            *(void *)(v134 - 64) = 0;
            *(void *)(v134 - 56) = 0;
            *(void *)(v134 - 48) = 0;
            uint64_t v129 = a1;
            v130 += 24;
          }
          while (v130 != 48);
          uint64_t v135 = *(void *)(v6 - 16);
          *(unsigned char *)(v311 + 8) = *(unsigned char *)(v6 - 8);
          *(void *)uint64_t v311 = v135;
        }
        uint64_t v136 = 0;
        long long v137 = v322;
        long long v138 = v323;
        *(void *)(v6 - 72) = v324;
        long long *v128 = v137;
        *(_OWORD *)(v6 - 88) = v138;
        do
        {
          uint64_t v139 = v6 + v136;
          v140 = (void *)((char *)&v322 + v136);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + v136 - 64));
          *(_OWORD *)(v139 - 64) = *(_OWORD *)&v325[v136];
          *(void *)(v139 - 48) = *(void *)&v325[v136 + 16];
          v140[5] = 0;
          v140[6] = 0;
          v140[7] = 0;
          v136 += 24;
        }
        while (v136 != 48);
        uint64_t v141 = v326;
        *(unsigned char *)(v6 - 8) = v327[0];
        *(void *)(v6 - 16) = v141;
        for (kk = 64; kk != 16; BOOL v5 = kk == 16)
        {
          *(void *)&long long v328 = (char *)&v322 + kk;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v328);
          kk -= 24;
          BOOL v4 = kk >= 0x10;
        }
LABEL_86:
        a4 = 0;
      }
      uint64_t v37 = 0;
      long long v38 = *(_OWORD *)v7;
      long long v39 = *(_OWORD *)(v7 + 16);
      v324 = *(char **)(v7 + 32);
      long long v322 = v38;
      long long v323 = v39;
      do
      {
        v40 = (char *)&v322 + v37;
        BOOL v41 = (void *)(v7 + v37);
        *((void *)v40 + 6) = 0;
        *((void *)v40 + 7) = 0;
        *(_OWORD *)(v40 + 40) = *(_OWORD *)(v7 + v37 + 40);
        *((void *)v40 + 7) = *(void *)(v7 + v37 + 56);
        v41[5] = 0;
        v41[6] = 0;
        v41[7] = 0;
        v37 += 24;
      }
      while (v37 != 48);
      uint64_t v42 = 0;
      uint64_t v43 = *(void *)(v7 + 88);
      uint64_t v310 = v7 + 88;
      v327[0] = *(unsigned char *)(v7 + 96);
      uint64_t v326 = v43;
      do
      {
        *(void *)&long long v328 = v7 + v42 + 104;
        *((void *)&v328 + 1) = v7 + v42 + 144;
        *(void *)&long long v329 = v7 + v42 + 192;
        *((void *)&v329 + 1) = v7 + v42 + 196;
        v330 = (unsigned char *)(v7 + v42 + 200);
        v334 = (void **)&v322;
        v335 = v325;
        v336 = &v326;
        v337 = (char *)&v326 + 4;
        v338 = v327;
        v42 += 104;
      }
      while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) != 0);
      unint64_t v6 = v7 + v42;
      unint64_t v44 = a2;
      if (v7 + v42 - 104 == v7)
      {
        unint64_t v47 = a2;
        while (v6 < v47)
        {
          unint64_t v45 = v47 - 104;
          *(void *)&long long v328 = v47 - 104;
          *((void *)&v328 + 1) = v47 - 64;
          *(void *)&long long v329 = v47 - 16;
          *((void *)&v329 + 1) = v47 - 12;
          v330 = (unsigned char *)(v47 - 8);
          v334 = (void **)&v322;
          v335 = v325;
          v336 = &v326;
          v337 = (char *)&v326 + 4;
          v338 = v327;
          char v48 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334);
          unint64_t v47 = v45;
          if (v48 < 0) {
            goto LABEL_31;
          }
        }
        unint64_t v45 = v47;
      }
      else
      {
        do
        {
          unint64_t v45 = v44 - 104;
          *(void *)&long long v328 = v44 - 104;
          *((void *)&v328 + 1) = v44 - 64;
          *(void *)&long long v329 = v44 - 16;
          *((void *)&v329 + 1) = v44 - 12;
          v330 = (unsigned char *)(v44 - 8);
          v334 = (void **)&v322;
          v335 = v325;
          v336 = &v326;
          v337 = (char *)&v326 + 4;
          v338 = v327;
          char v46 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334);
          unint64_t v44 = v45;
        }
        while ((v46 & 0x80) == 0);
      }
LABEL_31:
      unint64_t v314 = v45;
      unint64_t v315 = v7 + v42;
      while (v6 < v45)
      {
        uint64_t v49 = 0;
        long long v50 = *(_OWORD *)v6;
        long long v51 = *(_OWORD *)(v6 + 16);
        v330 = *(unsigned char **)(v6 + 32);
        long long v328 = v50;
        long long v329 = v51;
        do
        {
          int64_t v52 = (char *)&v328 + v49;
          uint64_t v53 = (void *)(v6 + v49);
          *((void *)v52 + 6) = 0;
          *((void *)v52 + 7) = 0;
          *(_OWORD *)(v52 + 40) = *(_OWORD *)(v6 + v49 + 40);
          *((void *)v52 + 7) = *(void *)(v6 + v49 + 56);
          v53[5] = 0;
          v53[6] = 0;
          v53[7] = 0;
          v49 += 24;
        }
        while (v49 != 48);
        uint64_t v54 = 0;
        uint64_t v55 = *(void *)(v6 + 88);
        char v333 = *(unsigned char *)(v6 + 96);
        uint64_t v332 = v55;
        long long v56 = *(_OWORD *)v45;
        long long v57 = *(_OWORD *)(v45 + 16);
        *(void *)(v6 + 32) = *(void *)(v45 + 32);
        *(_OWORD *)unint64_t v6 = v56;
        *(_OWORD *)(v6 + 16) = v57;
        do
        {
          uint64_t v58 = v6 + v54;
          unint64_t v59 = (void *)(v45 + v54);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + v54 + 40));
          *(_OWORD *)(v58 + 40) = *(_OWORD *)(v45 + v54 + 40);
          *(void *)(v58 + 56) = *(void *)(v45 + v54 + 56);
          v59[5] = 0;
          v59[6] = 0;
          v59[7] = 0;
          v54 += 24;
        }
        while (v54 != 48);
        uint64_t v60 = 0;
        uint64_t v61 = *(void *)(v45 + 88);
        *(unsigned char *)(v6 + 96) = *(unsigned char *)(v45 + 96);
        *(void *)(v6 + 88) = v61;
        long long v62 = v328;
        long long v63 = v329;
        *(void *)(v45 + 32) = v330;
        *(_OWORD *)unint64_t v45 = v62;
        *(_OWORD *)(v45 + 16) = v63;
        do
        {
          uint64_t v64 = v45 + v60;
          uint64_t v65 = (void *)((char *)&v328 + v60);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v45 + v60 + 40));
          *(_OWORD *)(v64 + 40) = *(_OWORD *)&v331[v60];
          *(void *)(v64 + 56) = *(void *)&v331[v60 + 16];
          v65[5] = 0;
          v65[6] = 0;
          v65[7] = 0;
          v60 += 24;
        }
        while (v60 != 48);
        uint64_t v66 = v332;
        *(unsigned char *)(v45 + 96) = v333;
        *(void *)(v45 + 88) = v66;
        for (uint64_t mm = 64; mm != 16; mm -= 24)
        {
          v334 = (void **)((char *)&v328 + mm);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v334);
        }
        do
        {
          unint64_t v68 = v6 + 144;
          unint64_t v69 = v6 + 192;
          unint64_t v70 = v6 + 196;
          v71 = (unsigned char *)(v6 + 200);
          v6 += 104;
          *(void *)&long long v328 = v6;
          *((void *)&v328 + 1) = v68;
          *(void *)&long long v329 = v69;
          *((void *)&v329 + 1) = v70;
          v330 = v71;
          v334 = (void **)&v322;
          v335 = v325;
          v336 = &v326;
          v337 = (char *)&v326 + 4;
          v338 = v327;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) != 0);
        do
        {
          unint64_t v72 = v45 - 64;
          unint64_t v73 = v45 - 16;
          unint64_t v74 = v45 - 12;
          unint64_t v75 = (unsigned char *)(v45 - 8);
          v45 -= 104;
          *(void *)&long long v328 = v45;
          *((void *)&v328 + 1) = v72;
          *(void *)&long long v329 = v73;
          *((void *)&v329 + 1) = v74;
          v330 = v75;
          v334 = (void **)&v322;
          v335 = v325;
          v336 = &v326;
          v337 = (char *)&v326 + 4;
          v338 = v327;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v328, (uint64_t *)&v334) & 0x80) == 0);
      }
      unint64_t v76 = v6 - 104;
      if (v6 - 104 != a1)
      {
        uint64_t v77 = 0;
        long long v78 = *(_OWORD *)v76;
        long long v79 = *(_OWORD *)(v6 - 88);
        *(void *)(a1 + 32) = *(void *)(v6 - 72);
        *(_OWORD *)a1 = v78;
        *(_OWORD *)(a1 + 16) = v79;
        do
        {
          uint64_t v80 = a1 + v77;
          uint64_t v81 = v6 + v77;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v77 + 40));
          *(_OWORD *)(v80 + 40) = *(_OWORD *)(v6 + v77 - 64);
          *(void *)(v80 + 56) = *(void *)(v6 + v77 - 48);
          *(void *)(v81 - 64) = 0;
          *(void *)(v81 - 56) = 0;
          *(void *)(v81 - 48) = 0;
          v77 += 24;
        }
        while (v77 != 48);
        uint64_t v82 = *(void *)(v6 - 16);
        *(unsigned char *)(v310 + 8) = *(unsigned char *)(v6 - 8);
        *(void *)uint64_t v310 = v82;
        unint64_t v76 = v6 - 104;
      }
      uint64_t v83 = 0;
      long long v84 = v322;
      long long v85 = v323;
      *(void *)(v76 + 32) = v324;
      *(_OWORD *)unint64_t v76 = v84;
      *(_OWORD *)(v76 + 16) = v85;
      do
      {
        uint64_t v86 = v6 + v83;
        unint64_t v87 = (void *)((char *)&v322 + v83);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v6 + v83 - 64));
        *(_OWORD *)(v86 - 64) = *(_OWORD *)&v325[v83];
        *(void *)(v86 - 48) = *(void *)&v325[v83 + 16];
        v87[5] = 0;
        v87[6] = 0;
        v87[7] = 0;
        v83 += 24;
      }
      while (v83 != 48);
      uint64_t v88 = v326;
      *(unsigned char *)(v6 - 8) = v327[0];
      *(void *)(v6 - 16) = v88;
      for (uint64_t nn = 64; nn != 16; nn -= 24)
      {
        *(void *)&long long v328 = (char *)&v322 + nn;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v328);
      }
      if (v315 < v314)
      {
LABEL_54:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>(a1, v6 - 104, a3, a4 & 1);
        goto LABEL_86;
      }
      BOOL v90 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, v6 - 104);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(v6, a2))
      {
        break;
      }
      if (!v90) {
        goto LABEL_54;
      }
    }
    a2 = v6 - 104;
    if (!v90) {
      continue;
    }
    break;
  }
}

void *AMCP::write_json_object_array<AMCP::Terminal_Description>(uint64_t a1, char *a2, uint64_t *a3)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  if (a2[23] >= 0) {
    BOOL v5 = a2;
  }
  else {
    BOOL v5 = *(char **)a2;
  }
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v5);
  uint64_t v7 = *(uint64_t **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  long long v34 = *(_OWORD *)(a1 + 24);
  uint64_t v35 = *(void *)(a1 + 40);
  LOBYTE(v31) = 1;
  HIDWORD(v31) = 0;
  long long v32 = v7;
  uint64_t v33 = v6 + 1;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      minijson::writer::next_field((minijson::writer *)&v31);
      uint64_t v7 = v32;
      long long v29 = v34;
      uint64_t v30 = v35;
      LOBYTE(v26) = 0;
      HIDWORD(v26) = 0;
      long long v27 = v32;
      uint64_t v28 = v33 + 1;
      std::string::basic_string[abi:ne180100]<0>(buf, "Format");
      if (v61 >= 0) {
        unint64_t v10 = (char *)buf;
      }
      else {
        unint64_t v10 = *(char **)buf;
      }
      minijson::writer::next_field((minijson::writer *)&v26);
      minijson::writer::write_field_name(&v26, v10);
      long long v54 = v29;
      uint64_t v55 = v30;
      LOBYTE(v51) = 0;
      HIDWORD(v51) = 0;
      int64_t v52 = v27;
      uint64_t v53 = v28 + 1;
      minijson::writer::next_field((minijson::writer *)&v51);
      minijson::writer::write_field_name(&v51, "SampleRate");
      if ((*(void *)v8 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000) {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"null", 4);
      }
      else {
        std::ostream::operator<<();
      }
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "FormatID");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "FormatFlags");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "BytesPerPacket");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "FramesPerPacket");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "BytesPerFrame");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "ChannelsPerFrame");
      minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v51, "BitsPerChannel");
      minijson::writer::close(&v51);
      if (SHIBYTE(v61) < 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(&v51, "PublishTags");
      AMCP::write_json_array<std::string>((uint64_t)&v26, (char *)&v51, (uint64_t *)(v8 + 40));
      if (SHIBYTE(v53) < 0) {
        operator delete(v51);
      }
      std::string::basic_string[abi:ne180100]<0>(&v51, "SubscribeToTags");
      AMCP::write_json_array<std::string>((uint64_t)&v26, (char *)&v51, (uint64_t *)(v8 + 64));
      if (SHIBYTE(v53) < 0) {
        operator delete(v51);
      }
      AMCP::get_enum_string_bimap<AMCP::Terminal_Source_Mix_Policy>();
      int64_t v52 = (void *)&v54 + 1;
      unint64_t v11 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v53);
      long long v56 = (char *)&v54 + 8;
      long long v57 = (char *)&v54 + 8;
      uint64_t v12 = v54;
      unint64_t v13 = *(void *)(v54 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v13) {
        goto LABEL_38;
      }
      int v14 = *(_DWORD *)(v8 + 88);
      uint64_t v15 = (_DWORD *)v54;
      do
      {
        while (*(_DWORD *)(v13 - 32) < v14)
        {
          unint64_t v13 = *(void *)(v13 + 16);
          if (!v13) {
            goto LABEL_23;
          }
        }
        uint64_t v15 = (_DWORD *)(v13 - 32);
        unint64_t v13 = *(void *)(v13 + 8);
      }
      while (v13);
LABEL_23:
      if (v15 == (_DWORD *)v54 || (v14 >= *v15 ? (long long v16 = v15) : (long long v16 = (_DWORD *)v54), (_DWORD *)v54 == v16))
      {
LABEL_38:
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v21 = **(NSObject ***)buf;
        if (*(void *)v59) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v59);
        }
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v22 = pthread_self();
          mach_port_t v23 = pthread_mach_thread_np(v22);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v23;
          *(_WORD *)unint64_t v59 = 2080;
          *(void *)&v59[2] = "Graph_Description_Internal.h";
          __int16 v60 = 1024;
          int v61 = 42;
          __int16 v62 = 2080;
          *(void *)long long v63 = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v50);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v42);
        std::logic_error::logic_error(&v43, &v42);
        v43.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v44, &v43);
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v48 = 0;
        int v49 = -1;
        v44.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        unint64_t v45 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v44);
        *(void *)&v63[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Terminal_Source_Mix_Policy]";
        uint64_t v64 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v65 = 42;
        std::vector<void *>::vector(&v37);
        int v24 = backtrace((void **)v37, (*((void *)&v37 + 1) - (void)v37) >> 3);
        std::vector<void *>::resize((char **)&v37, v24);
        long long v40 = v37;
        uint64_t v25 = v38;
        uint64_t v38 = 0;
        long long v39 = &unk_1F148AA90;
        uint64_t v41 = v25;
        long long v37 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((char *)v16 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v36, *((const std::string::value_type **)v16 + 1), *((void *)v16 + 2));
        uint64_t v12 = v54;
      }
      else
      {
        long long v17 = *(_OWORD *)(v16 + 2);
        v36.__r_.__value_.__r.__words[2] = *((void *)v16 + 3);
        *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v17;
      }
      uint64_t v18 = *(void *)(v12 + 56);
      if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v19 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v54 + 8, v19);
      operator delete((void *)v54);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v26, "SourceMixPolicy", (uint64_t)&v36);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>((uint64_t)&v26, "LatencyAdjustment");
      minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)&v26, "EnableFileWriter", (unsigned char *)(v8 + 96));
      minijson::writer::close(&v26);
      v8 += 104;
    }
    while (v8 != v9);
  }
  return minijson::writer::close(&v31);
}

void sub_1BAF10710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45)
{
  uint64_t v48 = *(void *)(*(void *)(v46 - 216) + 56);
  if ((v48 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v49 = (v48 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v49 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v45, v49);
  operator delete(*(void **)(v46 - 216));
  _Unwind_Resume(a1);
}

void *minijson::writer::close(void *this)
{
  if (*((_DWORD *)this + 1) != 2)
  {
    int v1 = (unsigned __int8 *)this;
    if (!*((_DWORD *)v1 + 1)) {
      minijson::writer::write_opening_bracket((minijson::writer *)*v1, *((void **)v1 + 1));
    }
    minijson::writer::write_pretty_print_token((uint64_t)v1, 2);
    uint64_t v2 = (void *)*((void *)v1 + 1);
    if (*v1)
    {
      char v4 = 93;
      int v3 = &v4;
    }
    else
    {
      char v5 = 125;
      int v3 = &v5;
    }
    this = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, 1);
    *((_DWORD *)v1 + 1) = 2;
  }
  return this;
}

void *AMCP::write_json_array<std::string>(uint64_t a1, char *a2, uint64_t *a3)
{
  if (a2[23] >= 0) {
    char v5 = a2;
  }
  else {
    char v5 = *(char **)a2;
  }
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  long long v12 = *(_OWORD *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 40);
  LOBYTE(v11[0]) = 1;
  HIDWORD(v11[0]) = 0;
  v11[1] = v6;
  v11[2] = v7 + 1;
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  while (v8 != v9)
  {
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v11, 0, v8);
    v8 += 24;
  }
  return minijson::writer::close(v11);
}

uint64_t minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>(uint64_t result, char *a2)
{
  if (*(_DWORD *)(result + 4) != 2)
  {
    int v3 = (minijson::writer *)result;
    minijson::writer::next_field(v3);
    if (a2) {
      minijson::writer::write_field_name((uint64_t **)v3, a2);
    }
    return std::ostream::operator<<();
  }
  return result;
}

minijson::writer *minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>(minijson::writer *result, char *a2, unsigned char *a3)
{
  if (*((_DWORD *)result + 1) != 2)
  {
    char v5 = result;
    minijson::writer::next_field(v5);
    if (a2) {
      minijson::writer::write_field_name((uint64_t **)v5, a2);
    }
    uint64_t v6 = (void *)*((void *)v5 + 1);
    if (*a3)
    {
      uint64_t v7 = "true";
      uint64_t v8 = 4;
    }
    else
    {
      uint64_t v7 = "false";
      uint64_t v8 = 5;
    }
    return (minijson::writer *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  }
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F7A100;
  char v4 = (void *)qword_1E9F7A0F0;
  uint64_t v117 = qword_1E9F7A100;
  uint64_t v118 = qword_1E9F7A100;
  if (qword_1E9F7A100)
  {
    if ((unint64_t)qword_1E9F7A100 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    char v5 = operator new(16 * qword_1E9F7A100);
  }
  else
  {
    char v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      unint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *unint64_t v10 = *(_DWORD *)v7;
      unint64_t v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    char v4 = (void *)qword_1E9F7A0F0;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    uint64_t v22 = v121;
    mach_port_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          uint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      mach_port_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    uint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      uint64_t v31 = 0;
    }
    long long v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          std::string v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          long long v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      long long v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    long long v40 = (void *)(v39 - 56);
    if (!v39) {
      long long v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    std::string v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          uint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      std::string v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      uint64_t v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        char v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          long long v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              __int16 v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              int v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            long long v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          unint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          uint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    uint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      uint64_t v80 = 0;
    }
    uint64_t v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      uint64_t v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      v89 = (void *)(v88 - 32);
    }
    else {
      v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      unint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      unint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      char v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        uint64_t v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F7A100;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF11164()
{
}

void sub_1BAF1118C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unint64_t v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        uint64_t v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v12;
LABEL_79:
                    *uint64_t v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                unint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      __int16 v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)__int16 v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        uint64_t v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  unsigned int v6 = *(_DWORD *)(*a1 + 8);
  BOOL v7 = v6 != 0;
  unsigned int v8 = *(_DWORD *)(*a2 + 8);
  if (!v6)
  {
    char v13 = 0;
LABEL_22:
    BOOL v9 = v6 == 1819304813;
    BOOL v11 = v8 == 1819304813;
    goto LABEL_23;
  }
  BOOL v9 = v6 == 1819304813;
  if (v8) {
    BOOL v10 = v6 == v8;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    BOOL v15 = v8 != 1819304813 && v6 < v8;
    char v13 = v6 == 1819304813 || v15;
    goto LABEL_22;
  }
  BOOL v11 = v8 == 1819304813;
  if (v6 == 1819304813 && v8 == 1819304813)
  {
    int v49 = *(_DWORD *)(v5 + 12);
    char v13 = (v49 & 0x40) == 0;
    if ((*(unsigned char *)(v4 + 12) & 0x40) != 0)
    {
      BOOL v11 = 1;
      BOOL v9 = 1;
      BOOL v7 = (v49 & 0x40) == 0;
    }
    else
    {
      if ((v49 & 0x40) != 0) {
        goto LABEL_53;
      }
      char v13 = 0;
      BOOL v7 = 0;
      BOOL v11 = 1;
      BOOL v9 = 1;
    }
  }
  else
  {
    char v13 = 0;
    BOOL v7 = 0;
  }
LABEL_23:
  BOOL v17 = !v9 || v7 || !v11;
  if (!v17 && (*(_DWORD *)(v4 + 12) & 1) != (*(_DWORD *)(v5 + 12) & 1))
  {
    char v13 = *(_DWORD *)(v5 + 12);
    LOBYTE(v7) = 1;
  }
  if (!v7)
  {
    unsigned int v18 = *(_DWORD *)(v4 + 32);
    if (!v18 || ((unsigned int v19 = *(_DWORD *)(v5 + 32)) != 0 ? (v20 = v18 == v19) : (v20 = 1), v20))
    {
      double v21 = *(double *)v4;
      if (*(double *)v4 != 0.0 && *(double *)v5 != 0.0 && v21 != *(double *)v5)
      {
        if (v21 > *(double *)v5) {
          return 255;
        }
        goto LABEL_52;
      }
      unsigned int v23 = *(_DWORD *)(v4 + 28);
      if (v23)
      {
        unsigned int v24 = *(_DWORD *)(v5 + 28);
        BOOL v10 = v23 == v24;
        BOOL v25 = v23 < v24;
        if (!v10 && v24 != 0) {
          char v13 = v25;
        }
        if (v13) {
          return 255;
        }
        goto LABEL_52;
      }
    }
    else
    {
      char v13 = v18 > v19;
    }
  }
  if (v13) {
    return 255;
  }
LABEL_52:
  if (!v8)
  {
    BOOL v32 = 0;
    char v31 = 0;
LABEL_73:
    BOOL v27 = v8 == 1819304813;
    BOOL v29 = v6 == 1819304813;
    goto LABEL_74;
  }
LABEL_53:
  BOOL v27 = v8 == 1819304813;
  if (v6) {
    BOOL v28 = v8 == v6;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28)
  {
    BOOL v34 = v6 != 1819304813 && v8 < v6;
    BOOL v32 = 1;
    char v31 = v8 == 1819304813 || v34;
    goto LABEL_73;
  }
  BOOL v10 = v6 == 1819304813;
  BOOL v29 = v6 == 1819304813;
  if (v10 && v8 == 1819304813)
  {
    int v51 = *(_DWORD *)(v4 + 12);
    char v31 = (v51 & 0x40) == 0;
    if ((*(unsigned char *)(v5 + 12) & 0x40) != 0)
    {
      BOOL v29 = 1;
      BOOL v27 = 1;
      BOOL v32 = (v51 & 0x40) == 0;
    }
    else
    {
      if ((v51 & 0x40) != 0) {
        goto LABEL_120;
      }
      char v31 = 0;
      BOOL v32 = 0;
      BOOL v29 = 1;
      BOOL v27 = 1;
    }
  }
  else
  {
    char v31 = 0;
    BOOL v32 = 0;
  }
LABEL_74:
  if (v29 && v27 && !v32)
  {
    if ((*(_DWORD *)(v5 + 12) & 1) == (*(_DWORD *)(v4 + 12) & 1))
    {
      char v38 = v32;
    }
    else
    {
      char v31 = *(_DWORD *)(v4 + 12);
      char v38 = 1;
    }
    BOOL v37 = v31;
    if (v38) {
      goto LABEL_118;
    }
  }
  else
  {
    BOOL v37 = v31;
    if (v32) {
      goto LABEL_118;
    }
  }
  unsigned int v39 = *(_DWORD *)(v5 + 32);
  if (!v39 || (v40 = *(_DWORD *)(v4 + 32), v41 = v39 == v40, BOOL v37 = v39 > v40, !v40) || v41)
  {
    double v42 = *(double *)v5;
    if (*(double *)v5 == 0.0
      || ((v37 = v42 > *(double *)v4, *(double *)v4 != 0.0) ? (BOOL v43 = v42 == *(double *)v4) : (BOOL v43 = 1), v43))
    {
      unsigned int v44 = *(_DWORD *)(v5 + 28);
      if (v44)
      {
        unsigned int v45 = *(_DWORD *)(v4 + 28);
        BOOL v10 = v44 == v45;
        BOOL v46 = v44 < v45;
        if (v10 || v45 == 0) {
          char v48 = v31;
        }
        else {
          char v48 = v46;
        }
        if (v48) {
          return 1;
        }
        goto LABEL_120;
      }
      BOOL v37 = v31;
    }
  }
LABEL_118:
  if (v37) {
    return 1;
  }
LABEL_120:
  uint64_t v52 = 0;
  uint64_t v53 = a1[1];
  uint64_t v54 = a2[1];
  do
  {
    char v55 = std::operator<=>[abi:ne180100]<std::string,std::allocator<std::string>>(*(void **)(v53 + v52), *(void *)(v53 + v52 + 8), *(void **)(v54 + v52), *(void *)(v54 + v52 + 8));
    if (v55) {
      BOOL v56 = 1;
    }
    else {
      BOOL v56 = v52 == 24;
    }
    v52 += 24;
  }
  while (!v56);
  if (v55) {
    return (v55 >> 31) | 1u;
  }
  int v57 = *(_DWORD *)a1[2];
  int v58 = *(_DWORD *)a2[2];
  if (v57 < v58) {
    uint64_t result = 0xFFFFFFFFLL;
  }
  else {
    uint64_t result = 1;
  }
  if (v57 == v58)
  {
    int v59 = *(_DWORD *)a1[3];
    int v60 = *(_DWORD *)a2[3];
    uint64_t result = v59 < v60 ? 0xFFFFFFFFLL : 1;
    if (v59 == v60)
    {
      unsigned int v61 = *(unsigned __int8 *)a1[4];
      unsigned int v62 = *(unsigned __int8 *)a2[4];
      BOOL v63 = v61 == v62;
      if (v61 < v62) {
        unsigned int v64 = -1;
      }
      else {
        unsigned int v64 = 1;
      }
      if (v63) {
        return 0;
      }
      else {
        return v64;
      }
    }
  }
  return result;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(long long *a1, long long *a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a2 + 40;
  *(void *)&long long v100 = a2;
  *((void *)&v100 + 1) = (char *)a2 + 40;
  BOOL v7 = (uint64_t *)a2 + 11;
  uint64_t v8 = (uint64_t)a2 + 92;
  BOOL v9 = a2 + 6;
  *(void *)&long long v101 = (char *)a2 + 88;
  *((void *)&v101 + 1) = (char *)a2 + 92;
  uint64_t v102 = a2 + 6;
  v95 = (void **)a1;
  uint64_t v96 = (uint64_t)a1 + 40;
  uint64_t v88 = (uint64_t)a1 + 92;
  uint64_t v89 = (uint64_t)a1 + 40;
  unint64_t v94 = (uint64_t *)a1 + 11;
  unint64_t v97 = (uint64_t *)a1 + 11;
  uint64_t v98 = (uint64_t)a1 + 92;
  unint64_t v87 = a1 + 6;
  unint64_t v99 = a1 + 6;
  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
  {
    *(void *)&long long v100 = a3;
    *((void *)&v100 + 1) = (char *)a3 + 40;
    unint64_t v93 = (uint64_t *)a3 + 11;
    *(void *)&long long v101 = (char *)a3 + 88;
    *((void *)&v101 + 1) = (char *)a3 + 92;
    uint64_t v102 = a3 + 6;
    v95 = (void **)a2;
    uint64_t v96 = v6;
    uint64_t v86 = v6;
    unint64_t v97 = v7;
    uint64_t v98 = v8;
    uint64_t v85 = v8;
    unint64_t v99 = v9;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
    {
      uint64_t v70 = 0;
      long long v71 = a1[1];
      long long v100 = *a1;
      long long v101 = v71;
      uint64_t v102 = (long long *)*((void *)a1 + 4);
      do
      {
        unint64_t v72 = (char *)&v100 + v70;
        unint64_t v73 = (void *)((char *)a1 + v70);
        *(_OWORD *)(v72 + 40) = *(long long *)((char *)a1 + v70 + 40);
        *((void *)v72 + 7) = *(void *)((char *)a1 + v70 + 56);
        v73[5] = 0;
        v73[6] = 0;
        v73[7] = 0;
        v70 += 24;
      }
      while (v70 != 48);
      uint64_t v74 = 0;
      uint64_t v104 = *v94;
      char v105 = *((unsigned char *)v94 + 8);
      uint64_t v75 = *((void *)a3 + 4);
      long long v76 = a3[1];
      *a1 = *a3;
      a1[1] = v76;
      *((void *)a1 + 4) = v75;
      do
      {
        uint64_t v77 = (uint64_t)a1 + v74;
        unint64_t v78 = (void *)((char *)a3 + v74);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a1 + v74 + 40));
        *(_OWORD *)(v77 + 40) = *(long long *)((char *)a3 + v74 + 40);
        *(void *)(v77 + 56) = *(void *)((char *)a3 + v74 + 56);
        v78[5] = 0;
        v78[6] = 0;
        v78[7] = 0;
        v74 += 24;
      }
      while (v74 != 48);
      uint64_t v79 = 0;
      uint64_t v80 = *v93;
      *((unsigned char *)v94 + 8) = *((unsigned char *)a3 + 96);
      *unint64_t v94 = v80;
      long long v81 = v101;
      *a3 = v100;
      a3[1] = v81;
      *((void *)a3 + 4) = v102;
      do
      {
        uint64_t v82 = (uint64_t)a3 + v79;
        long long v83 = (void *)((char *)&v100 + v79);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a3 + v79 + 40));
        *(_OWORD *)(v82 + 40) = *(_OWORD *)&v103[v79];
        *(void *)(v82 + 56) = *(void *)&v103[v79 + 16];
        v83[6] = 0;
        v83[7] = 0;
        v83[5] = 0;
        v79 += 24;
      }
      while (v79 != 48);
      *unint64_t v93 = v104;
      *((unsigned char *)a3 + 96) = v105;
      for (uint64_t i = 64; i != 16; i -= 24)
      {
        v95 = (void **)((char *)&v100 + i);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
      }
    }
    else
    {
      uint64_t v91 = v7;
      uint64_t v40 = 0;
      long long v41 = a1[1];
      long long v100 = *a1;
      long long v101 = v41;
      uint64_t v102 = (long long *)*((void *)a1 + 4);
      do
      {
        double v42 = (char *)&v100 + v40;
        BOOL v43 = (void *)((char *)a1 + v40);
        *(_OWORD *)(v42 + 40) = *(long long *)((char *)a1 + v40 + 40);
        *((void *)v42 + 7) = *(void *)((char *)a1 + v40 + 56);
        v43[5] = 0;
        v43[6] = 0;
        v43[7] = 0;
        v40 += 24;
      }
      while (v40 != 48);
      uint64_t v44 = 0;
      uint64_t v104 = *v94;
      char v105 = *((unsigned char *)v94 + 8);
      uint64_t v45 = *((void *)a2 + 4);
      long long v46 = a2[1];
      *a1 = *a2;
      a1[1] = v46;
      *((void *)a1 + 4) = v45;
      do
      {
        uint64_t v47 = (uint64_t)a1 + v44;
        char v48 = (void *)((char *)a2 + v44);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a1 + v44 + 40));
        *(_OWORD *)(v47 + 40) = *(long long *)((char *)a2 + v44 + 40);
        *(void *)(v47 + 56) = *(void *)((char *)a2 + v44 + 56);
        v48[5] = 0;
        v48[6] = 0;
        v48[7] = 0;
        v44 += 24;
      }
      while (v44 != 48);
      uint64_t v49 = 0;
      uint64_t v50 = *v91;
      *((unsigned char *)v94 + 8) = *((unsigned char *)v91 + 8);
      *unint64_t v94 = v50;
      long long v51 = v101;
      *a2 = v100;
      a2[1] = v51;
      *((void *)a2 + 4) = v102;
      do
      {
        uint64_t v52 = (uint64_t)a2 + v49;
        uint64_t v53 = (void *)((char *)&v100 + v49);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v49 + 40));
        *(_OWORD *)(v52 + 40) = *(_OWORD *)&v103[v49];
        *(void *)(v52 + 56) = *(void *)&v103[v49 + 16];
        v53[6] = 0;
        v53[7] = 0;
        v53[5] = 0;
        v49 += 24;
      }
      while (v49 != 48);
      *uint64_t v91 = v104;
      *((unsigned char *)v91 + 8) = v105;
      for (uint64_t j = 64; j != 16; j -= 24)
      {
        v95 = (void **)((char *)&v100 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
      }
      *(void *)&long long v100 = a3;
      *((void *)&v100 + 1) = (char *)a3 + 40;
      *(void *)&long long v101 = (char *)a3 + 88;
      *((void *)&v101 + 1) = (char *)a3 + 92;
      uint64_t v102 = a3 + 6;
      v95 = (void **)a2;
      uint64_t v96 = v86;
      unint64_t v97 = v91;
      uint64_t v98 = v85;
      unint64_t v99 = v9;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
      {
        uint64_t v55 = 0;
        long long v56 = a2[1];
        long long v100 = *a2;
        long long v101 = v56;
        uint64_t v102 = (long long *)*((void *)a2 + 4);
        do
        {
          int v57 = (char *)&v100 + v55;
          int v58 = (void *)((char *)a2 + v55);
          *(_OWORD *)(v57 + 40) = *(long long *)((char *)a2 + v55 + 40);
          *((void *)v57 + 7) = *(void *)((char *)a2 + v55 + 56);
          v58[5] = 0;
          v58[6] = 0;
          v58[7] = 0;
          v55 += 24;
        }
        while (v55 != 48);
        uint64_t v59 = 0;
        uint64_t v104 = *v91;
        char v105 = *((unsigned char *)v91 + 8);
        uint64_t v60 = *((void *)a3 + 4);
        long long v61 = a3[1];
        *a2 = *a3;
        a2[1] = v61;
        *((void *)a2 + 4) = v60;
        do
        {
          uint64_t v62 = (uint64_t)a2 + v59;
          BOOL v63 = (void *)((char *)a3 + v59);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v59 + 40));
          *(_OWORD *)(v62 + 40) = *(long long *)((char *)a3 + v59 + 40);
          *(void *)(v62 + 56) = *(void *)((char *)a3 + v59 + 56);
          v63[5] = 0;
          v63[6] = 0;
          v63[7] = 0;
          v59 += 24;
        }
        while (v59 != 48);
        uint64_t v64 = 0;
        uint64_t v65 = *v93;
        *((unsigned char *)v91 + 8) = *((unsigned char *)a3 + 96);
        *uint64_t v91 = v65;
        long long v66 = v101;
        *a3 = v100;
        a3[1] = v66;
        *((void *)a3 + 4) = v102;
        do
        {
          uint64_t v67 = (uint64_t)a3 + v64;
          uint64_t v68 = (void *)((char *)&v100 + v64);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a3 + v64 + 40));
          *(_OWORD *)(v67 + 40) = *(_OWORD *)&v103[v64];
          *(void *)(v67 + 56) = *(void *)&v103[v64 + 16];
          v68[6] = 0;
          v68[7] = 0;
          v68[5] = 0;
          v64 += 24;
        }
        while (v64 != 48);
        *unint64_t v93 = v104;
        *((unsigned char *)a3 + 96) = v105;
        for (uint64_t k = 64; k != 16; k -= 24)
        {
          v95 = (void **)((char *)&v100 + k);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
        }
      }
    }
  }
  else
  {
    *(void *)&long long v100 = a3;
    *((void *)&v100 + 1) = (char *)a3 + 40;
    *(void *)&long long v101 = (char *)a3 + 88;
    *((void *)&v101 + 1) = (char *)a3 + 92;
    uint64_t v102 = a3 + 6;
    v95 = (void **)a2;
    uint64_t v96 = v6;
    unint64_t v97 = v7;
    uint64_t v98 = v8;
    unint64_t v99 = v9;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
    {
      unint64_t v92 = (uint64_t *)a3 + 11;
      uint64_t v10 = 0;
      long long v11 = a2[1];
      long long v100 = *a2;
      long long v101 = v11;
      uint64_t v102 = (long long *)*((void *)a2 + 4);
      do
      {
        unint64_t v12 = (char *)&v100 + v10;
        char v13 = (void *)((char *)a2 + v10);
        *(_OWORD *)(v12 + 40) = *(long long *)((char *)a2 + v10 + 40);
        *((void *)v12 + 7) = *(void *)((char *)a2 + v10 + 56);
        v13[5] = 0;
        v13[6] = 0;
        v13[7] = 0;
        v10 += 24;
      }
      while (v10 != 48);
      uint64_t v14 = 0;
      uint64_t v104 = *v7;
      char v105 = *((unsigned char *)v7 + 8);
      uint64_t v15 = *((void *)a3 + 4);
      long long v16 = a3[1];
      *a2 = *a3;
      a2[1] = v16;
      *((void *)a2 + 4) = v15;
      do
      {
        uint64_t v17 = (uint64_t)a2 + v14;
        unsigned int v18 = (void *)((char *)a3 + v14);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v14 + 40));
        *(_OWORD *)(v17 + 40) = *(long long *)((char *)a3 + v14 + 40);
        *(void *)(v17 + 56) = *(void *)((char *)a3 + v14 + 56);
        v18[5] = 0;
        v18[6] = 0;
        v18[7] = 0;
        v14 += 24;
      }
      while (v14 != 48);
      uint64_t v19 = 0;
      uint64_t v20 = *v92;
      *((unsigned char *)v7 + 8) = *((unsigned char *)a3 + 96);
      unint64_t v90 = v7;
      *BOOL v7 = v20;
      long long v21 = v101;
      *a3 = v100;
      a3[1] = v21;
      *((void *)a3 + 4) = v102;
      do
      {
        uint64_t v22 = (uint64_t)a3 + v19;
        unsigned int v23 = (void *)((char *)&v100 + v19);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a3 + v19 + 40));
        *(_OWORD *)(v22 + 40) = *(_OWORD *)&v103[v19];
        *(void *)(v22 + 56) = *(void *)&v103[v19 + 16];
        v23[6] = 0;
        v23[7] = 0;
        v23[5] = 0;
        v19 += 24;
      }
      while (v19 != 48);
      *unint64_t v92 = v104;
      *((unsigned char *)a3 + 96) = v105;
      for (uint64_t m = 64; m != 16; m -= 24)
      {
        v95 = (void **)((char *)&v100 + m);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
      }
      *(void *)&long long v100 = a2;
      *((void *)&v100 + 1) = v6;
      *(void *)&long long v101 = v90;
      *((void *)&v101 + 1) = v8;
      uint64_t v102 = v9;
      v95 = (void **)a1;
      uint64_t v96 = v89;
      unint64_t v97 = v94;
      uint64_t v98 = v88;
      unint64_t v99 = v87;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v100, (uint64_t *)&v95) & 0x80) != 0)
      {
        uint64_t v25 = 0;
        long long v26 = a1[1];
        long long v100 = *a1;
        long long v101 = v26;
        uint64_t v102 = (long long *)*((void *)a1 + 4);
        do
        {
          BOOL v27 = (char *)&v100 + v25;
          BOOL v28 = (void *)((char *)a1 + v25);
          *(_OWORD *)(v27 + 40) = *(long long *)((char *)a1 + v25 + 40);
          *((void *)v27 + 7) = *(void *)((char *)a1 + v25 + 56);
          v28[5] = 0;
          v28[6] = 0;
          v28[7] = 0;
          v25 += 24;
        }
        while (v25 != 48);
        uint64_t v29 = 0;
        uint64_t v104 = *v94;
        char v105 = *((unsigned char *)v94 + 8);
        uint64_t v30 = *((void *)a2 + 4);
        long long v31 = a2[1];
        *a1 = *a2;
        a1[1] = v31;
        *((void *)a1 + 4) = v30;
        do
        {
          uint64_t v32 = (uint64_t)a1 + v29;
          unint64_t v33 = (void *)((char *)a2 + v29);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a1 + v29 + 40));
          *(_OWORD *)(v32 + 40) = *(long long *)((char *)a2 + v29 + 40);
          *(void *)(v32 + 56) = *(void *)((char *)a2 + v29 + 56);
          v33[5] = 0;
          v33[6] = 0;
          v33[7] = 0;
          v29 += 24;
        }
        while (v29 != 48);
        uint64_t v34 = 0;
        uint64_t v35 = *v90;
        *((unsigned char *)v94 + 8) = *((unsigned char *)v90 + 8);
        *unint64_t v94 = v35;
        long long v36 = v101;
        *a2 = v100;
        a2[1] = v36;
        *((void *)a2 + 4) = v102;
        do
        {
          uint64_t v37 = (uint64_t)a2 + v34;
          char v38 = (void *)((char *)&v100 + v34);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)((char *)a2 + v34 + 40));
          *(_OWORD *)(v37 + 40) = *(_OWORD *)&v103[v34];
          *(void *)(v37 + 56) = *(void *)&v103[v34 + 16];
          v38[6] = 0;
          v38[7] = 0;
          v38[5] = 0;
          v34 += 24;
        }
        while (v34 != 48);
        *unint64_t v90 = v104;
        *((unsigned char *)v90 + 8) = v105;
        for (uint64_t n = 64; n != 16; n -= 24)
        {
          v95 = (void **)((char *)&v100 + n);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v95);
        }
      }
    }
  }
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)a1, (long long *)a2, (long long *)a3);
  uint64_t v8 = (uint64_t *)(a4 + 88);
  *(void *)&long long v62 = a4;
  *((void *)&v62 + 1) = a4 + 40;
  *(void *)&long long v63 = a4 + 88;
  *((void *)&v63 + 1) = a4 + 92;
  uint64_t v64 = a4 + 96;
  BOOL v9 = (uint64_t *)(a3 + 88);
  int v57 = (void **)a3;
  uint64_t v58 = a3 + 40;
  uint64_t v59 = a3 + 88;
  uint64_t v60 = a3 + 92;
  uint64_t v61 = a3 + 96;
  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v62, (uint64_t *)&v57) & 0x80) != 0)
  {
    uint64_t v10 = 0;
    long long v11 = *(_OWORD *)(a3 + 16);
    long long v62 = *(_OWORD *)a3;
    long long v63 = v11;
    uint64_t v64 = *(void *)(a3 + 32);
    do
    {
      unint64_t v12 = (char *)&v62 + v10;
      char v13 = (void *)(a3 + v10);
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a3 + v10 + 40);
      *((void *)v12 + 7) = *(void *)(a3 + v10 + 56);
      v13[5] = 0;
      v13[6] = 0;
      v13[7] = 0;
      v10 += 24;
    }
    while (v10 != 48);
    uint64_t v14 = 0;
    uint64_t v66 = *v9;
    char v67 = *(unsigned char *)(a3 + 96);
    uint64_t v15 = *(void *)(a4 + 32);
    long long v16 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v16;
    *(void *)(a3 + 32) = v15;
    do
    {
      uint64_t v17 = a3 + v14;
      unsigned int v18 = (void *)(a4 + v14);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v14 + 40));
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(a4 + v14 + 40);
      *(void *)(v17 + 56) = *(void *)(a4 + v14 + 56);
      v18[5] = 0;
      v18[6] = 0;
      v18[7] = 0;
      v14 += 24;
    }
    while (v14 != 48);
    uint64_t v19 = 0;
    uint64_t v20 = *v8;
    *(unsigned char *)(a3 + 96) = *(unsigned char *)(a4 + 96);
    *BOOL v9 = v20;
    long long v21 = v63;
    *(_OWORD *)a4 = v62;
    *(_OWORD *)(a4 + 16) = v21;
    *(void *)(a4 + 32) = v64;
    do
    {
      uint64_t v22 = a4 + v19;
      unsigned int v23 = (void *)((char *)&v62 + v19);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a4 + v19 + 40));
      *(_OWORD *)(v22 + 40) = *(_OWORD *)&v65[v19];
      *(void *)(v22 + 56) = *(void *)&v65[v19 + 16];
      v23[6] = 0;
      v23[7] = 0;
      v23[5] = 0;
      v19 += 24;
    }
    while (v19 != 48);
    *uint64_t v8 = v66;
    *(unsigned char *)(a4 + 96) = v67;
    for (uint64_t i = 64; i != 16; i -= 24)
    {
      int v57 = (void **)((char *)&v62 + i);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v57);
    }
    *(void *)&long long v62 = a3;
    *((void *)&v62 + 1) = a3 + 40;
    *(void *)&long long v63 = a3 + 88;
    *((void *)&v63 + 1) = a3 + 92;
    uint64_t v64 = a3 + 96;
    uint64_t v25 = (uint64_t *)(a2 + 88);
    int v57 = (void **)a2;
    uint64_t v58 = a2 + 40;
    uint64_t v59 = a2 + 88;
    uint64_t v60 = a2 + 92;
    uint64_t v61 = a2 + 96;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v62, (uint64_t *)&v57) & 0x80) != 0)
    {
      uint64_t v26 = 0;
      long long v27 = *(_OWORD *)(a2 + 16);
      long long v62 = *(_OWORD *)a2;
      long long v63 = v27;
      uint64_t v64 = *(void *)(a2 + 32);
      do
      {
        BOOL v28 = (char *)&v62 + v26;
        uint64_t v29 = (void *)(a2 + v26);
        *(_OWORD *)(v28 + 40) = *(_OWORD *)(a2 + v26 + 40);
        *((void *)v28 + 7) = *(void *)(a2 + v26 + 56);
        v29[5] = 0;
        v29[6] = 0;
        v29[7] = 0;
        v26 += 24;
      }
      while (v26 != 48);
      uint64_t v30 = 0;
      uint64_t v66 = *v25;
      char v67 = *(unsigned char *)(a2 + 96);
      uint64_t v31 = *(void *)(a3 + 32);
      long long v32 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v32;
      *(void *)(a2 + 32) = v31;
      do
      {
        uint64_t v33 = a2 + v30;
        uint64_t v34 = (void *)(a3 + v30);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v30 + 40));
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(a3 + v30 + 40);
        *(void *)(v33 + 56) = *(void *)(a3 + v30 + 56);
        v34[5] = 0;
        v34[6] = 0;
        v34[7] = 0;
        v30 += 24;
      }
      while (v30 != 48);
      uint64_t v35 = 0;
      uint64_t v36 = *v9;
      *(unsigned char *)(a2 + 96) = *(unsigned char *)(a3 + 96);
      uint64_t *v25 = v36;
      long long v37 = v63;
      *(_OWORD *)a3 = v62;
      *(_OWORD *)(a3 + 16) = v37;
      *(void *)(a3 + 32) = v64;
      do
      {
        uint64_t v38 = a3 + v35;
        unsigned int v39 = (void *)((char *)&v62 + v35);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v35 + 40));
        *(_OWORD *)(v38 + 40) = *(_OWORD *)&v65[v35];
        *(void *)(v38 + 56) = *(void *)&v65[v35 + 16];
        v39[6] = 0;
        v39[7] = 0;
        v39[5] = 0;
        v35 += 24;
      }
      while (v35 != 48);
      *BOOL v9 = v66;
      *(unsigned char *)(a3 + 96) = v67;
      for (uint64_t j = 64; j != 16; j -= 24)
      {
        int v57 = (void **)((char *)&v62 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v57);
      }
      *(void *)&long long v62 = a2;
      *((void *)&v62 + 1) = a2 + 40;
      *(void *)&long long v63 = a2 + 88;
      *((void *)&v63 + 1) = a2 + 92;
      uint64_t v64 = a2 + 96;
      long long v41 = (uint64_t *)(a1 + 88);
      int v57 = (void **)a1;
      uint64_t v58 = a1 + 40;
      uint64_t v59 = a1 + 88;
      uint64_t v60 = a1 + 92;
      uint64_t v61 = a1 + 96;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v62, (uint64_t *)&v57) & 0x80) != 0)
      {
        uint64_t v42 = 0;
        long long v43 = *(_OWORD *)(a1 + 16);
        long long v62 = *(_OWORD *)a1;
        long long v63 = v43;
        uint64_t v64 = *(void *)(a1 + 32);
        do
        {
          uint64_t v44 = (char *)&v62 + v42;
          uint64_t v45 = (void *)(a1 + v42);
          *(_OWORD *)(v44 + 40) = *(_OWORD *)(a1 + v42 + 40);
          *((void *)v44 + 7) = *(void *)(a1 + v42 + 56);
          v45[5] = 0;
          CFTypeRef v45[6] = 0;
          v45[7] = 0;
          v42 += 24;
        }
        while (v42 != 48);
        uint64_t v46 = 0;
        uint64_t v66 = *v41;
        char v67 = *(unsigned char *)(a1 + 96);
        uint64_t v47 = *(void *)(a2 + 32);
        long long v48 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v48;
        *(void *)(a1 + 32) = v47;
        do
        {
          uint64_t v49 = a1 + v46;
          uint64_t v50 = (void *)(a2 + v46);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v46 + 40));
          *(_OWORD *)(v49 + 40) = *(_OWORD *)(a2 + v46 + 40);
          *(void *)(v49 + 56) = *(void *)(a2 + v46 + 56);
          v50[5] = 0;
          v50[6] = 0;
          v50[7] = 0;
          v46 += 24;
        }
        while (v46 != 48);
        uint64_t v51 = 0;
        uint64_t v52 = *v25;
        *((unsigned char *)v41 + 8) = *(unsigned char *)(a2 + 96);
        uint64_t *v41 = v52;
        long long v53 = v63;
        *(_OWORD *)a2 = v62;
        *(_OWORD *)(a2 + 16) = v53;
        *(void *)(a2 + 32) = v64;
        do
        {
          uint64_t v54 = a2 + v51;
          uint64_t v55 = (void *)((char *)&v62 + v51);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v51 + 40));
          *(_OWORD *)(v54 + 40) = *(_OWORD *)&v65[v51];
          *(void *)(v54 + 56) = *(void *)&v65[v51 + 16];
          v55[6] = 0;
          v55[7] = 0;
          v55[5] = 0;
          v51 += 24;
        }
        while (v51 != 48);
        uint64_t *v25 = v66;
        *(unsigned char *)(a2 + 96) = v67;
        for (uint64_t k = 64; k != 16; k -= 24)
        {
          int v57 = (void **)((char *)&v62 + k);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v57);
        }
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, a2, a3, a4);
  uint64_t v8 = (uint64_t *)(a5 + 88);
  *(void *)&long long v80 = a5;
  *((void *)&v80 + 1) = a5 + 40;
  *(void *)&long long v81 = a5 + 88;
  *((void *)&v81 + 1) = a5 + 92;
  uint64_t v82 = a5 + 96;
  BOOL v9 = (uint64_t *)(a4 + 88);
  uint64_t v75 = (void **)a4;
  uint64_t v76 = a4 + 40;
  uint64_t v77 = a4 + 88;
  uint64_t v78 = a4 + 92;
  uint64_t v79 = a4 + 96;
  if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
  {
    uint64_t v10 = 0;
    long long v11 = *(_OWORD *)(a4 + 16);
    long long v80 = *(_OWORD *)a4;
    long long v81 = v11;
    uint64_t v82 = *(void *)(a4 + 32);
    do
    {
      unint64_t v12 = (char *)&v80 + v10;
      char v13 = (void *)(a4 + v10);
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a4 + v10 + 40);
      *((void *)v12 + 7) = *(void *)(a4 + v10 + 56);
      v13[5] = 0;
      v13[6] = 0;
      v13[7] = 0;
      v10 += 24;
    }
    while (v10 != 48);
    uint64_t v14 = 0;
    uint64_t v84 = *v9;
    char v85 = *(unsigned char *)(a4 + 96);
    uint64_t v15 = *(void *)(a5 + 32);
    long long v16 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v16;
    *(void *)(a4 + 32) = v15;
    do
    {
      uint64_t v17 = a4 + v14;
      unsigned int v18 = (void *)(a5 + v14);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a4 + v14 + 40));
      *(_OWORD *)(v17 + 40) = *(_OWORD *)(a5 + v14 + 40);
      *(void *)(v17 + 56) = *(void *)(a5 + v14 + 56);
      v18[5] = 0;
      v18[6] = 0;
      v18[7] = 0;
      v14 += 24;
    }
    while (v14 != 48);
    uint64_t v19 = 0;
    uint64_t v20 = *v8;
    *(unsigned char *)(a4 + 96) = *(unsigned char *)(a5 + 96);
    *BOOL v9 = v20;
    long long v21 = v81;
    *(_OWORD *)a5 = v80;
    *(_OWORD *)(a5 + 16) = v21;
    *(void *)(a5 + 32) = v82;
    do
    {
      uint64_t v22 = a5 + v19;
      unsigned int v23 = (void *)((char *)&v80 + v19);
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a5 + v19 + 40));
      *(_OWORD *)(v22 + 40) = *(_OWORD *)&v83[v19];
      *(void *)(v22 + 56) = *(void *)&v83[v19 + 16];
      v23[6] = 0;
      v23[7] = 0;
      v23[5] = 0;
      v19 += 24;
    }
    while (v19 != 48);
    *uint64_t v8 = v84;
    *(unsigned char *)(a5 + 96) = v85;
    for (uint64_t i = 64; i != 16; i -= 24)
    {
      uint64_t v75 = (void **)((char *)&v80 + i);
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
    }
    *(void *)&long long v80 = a4;
    *((void *)&v80 + 1) = a4 + 40;
    *(void *)&long long v81 = a4 + 88;
    *((void *)&v81 + 1) = a4 + 92;
    uint64_t v82 = a4 + 96;
    uint64_t v25 = (uint64_t *)(a3 + 88);
    uint64_t v75 = (void **)a3;
    uint64_t v76 = a3 + 40;
    uint64_t v77 = a3 + 88;
    uint64_t v78 = a3 + 92;
    uint64_t v79 = a3 + 96;
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
    {
      uint64_t v26 = 0;
      long long v27 = *(_OWORD *)(a3 + 16);
      long long v80 = *(_OWORD *)a3;
      long long v81 = v27;
      uint64_t v82 = *(void *)(a3 + 32);
      do
      {
        BOOL v28 = (char *)&v80 + v26;
        uint64_t v29 = (void *)(a3 + v26);
        *(_OWORD *)(v28 + 40) = *(_OWORD *)(a3 + v26 + 40);
        *((void *)v28 + 7) = *(void *)(a3 + v26 + 56);
        v29[5] = 0;
        v29[6] = 0;
        v29[7] = 0;
        v26 += 24;
      }
      while (v26 != 48);
      uint64_t v30 = 0;
      uint64_t v84 = *v25;
      char v85 = *(unsigned char *)(a3 + 96);
      uint64_t v31 = *(void *)(a4 + 32);
      long long v32 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v32;
      *(void *)(a3 + 32) = v31;
      do
      {
        uint64_t v33 = a3 + v30;
        uint64_t v34 = (void *)(a4 + v30);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v30 + 40));
        *(_OWORD *)(v33 + 40) = *(_OWORD *)(a4 + v30 + 40);
        *(void *)(v33 + 56) = *(void *)(a4 + v30 + 56);
        v34[5] = 0;
        v34[6] = 0;
        v34[7] = 0;
        v30 += 24;
      }
      while (v30 != 48);
      uint64_t v35 = 0;
      uint64_t v36 = *v9;
      *(unsigned char *)(a3 + 96) = *(unsigned char *)(a4 + 96);
      uint64_t *v25 = v36;
      long long v37 = v81;
      *(_OWORD *)a4 = v80;
      *(_OWORD *)(a4 + 16) = v37;
      *(void *)(a4 + 32) = v82;
      do
      {
        uint64_t v38 = a4 + v35;
        unsigned int v39 = (void *)((char *)&v80 + v35);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a4 + v35 + 40));
        *(_OWORD *)(v38 + 40) = *(_OWORD *)&v83[v35];
        *(void *)(v38 + 56) = *(void *)&v83[v35 + 16];
        v39[6] = 0;
        v39[7] = 0;
        v39[5] = 0;
        v35 += 24;
      }
      while (v35 != 48);
      *BOOL v9 = v84;
      *(unsigned char *)(a4 + 96) = v85;
      for (uint64_t j = 64; j != 16; j -= 24)
      {
        uint64_t v75 = (void **)((char *)&v80 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
      }
      *(void *)&long long v80 = a3;
      *((void *)&v80 + 1) = a3 + 40;
      *(void *)&long long v81 = a3 + 88;
      *((void *)&v81 + 1) = a3 + 92;
      uint64_t v82 = a3 + 96;
      long long v41 = (uint64_t *)(a2 + 88);
      uint64_t v75 = (void **)a2;
      uint64_t v76 = a2 + 40;
      uint64_t v77 = a2 + 88;
      uint64_t v78 = a2 + 92;
      uint64_t v79 = a2 + 96;
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
      {
        uint64_t v42 = 0;
        long long v43 = *(_OWORD *)(a2 + 16);
        long long v80 = *(_OWORD *)a2;
        long long v81 = v43;
        uint64_t v82 = *(void *)(a2 + 32);
        do
        {
          uint64_t v44 = (char *)&v80 + v42;
          uint64_t v45 = (void *)(a2 + v42);
          *(_OWORD *)(v44 + 40) = *(_OWORD *)(a2 + v42 + 40);
          *((void *)v44 + 7) = *(void *)(a2 + v42 + 56);
          v45[5] = 0;
          CFTypeRef v45[6] = 0;
          v45[7] = 0;
          v42 += 24;
        }
        while (v42 != 48);
        uint64_t v46 = 0;
        uint64_t v84 = *v41;
        char v85 = *(unsigned char *)(a2 + 96);
        uint64_t v47 = *(void *)(a3 + 32);
        long long v48 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v48;
        *(void *)(a2 + 32) = v47;
        do
        {
          uint64_t v49 = a2 + v46;
          uint64_t v50 = (void *)(a3 + v46);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v46 + 40));
          *(_OWORD *)(v49 + 40) = *(_OWORD *)(a3 + v46 + 40);
          *(void *)(v49 + 56) = *(void *)(a3 + v46 + 56);
          v50[5] = 0;
          v50[6] = 0;
          v50[7] = 0;
          v46 += 24;
        }
        while (v46 != 48);
        uint64_t v51 = 0;
        uint64_t v52 = *v25;
        *(unsigned char *)(a2 + 96) = *(unsigned char *)(a3 + 96);
        uint64_t *v41 = v52;
        long long v53 = v81;
        *(_OWORD *)a3 = v80;
        *(_OWORD *)(a3 + 16) = v53;
        *(void *)(a3 + 32) = v82;
        do
        {
          uint64_t v54 = a3 + v51;
          uint64_t v55 = (void *)((char *)&v80 + v51);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a3 + v51 + 40));
          *(_OWORD *)(v54 + 40) = *(_OWORD *)&v83[v51];
          *(void *)(v54 + 56) = *(void *)&v83[v51 + 16];
          v55[6] = 0;
          v55[7] = 0;
          v55[5] = 0;
          v51 += 24;
        }
        while (v51 != 48);
        uint64_t *v25 = v84;
        *(unsigned char *)(a3 + 96) = v85;
        for (uint64_t k = 64; k != 16; k -= 24)
        {
          uint64_t v75 = (void **)((char *)&v80 + k);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
        }
        *(void *)&long long v80 = a2;
        *((void *)&v80 + 1) = a2 + 40;
        *(void *)&long long v81 = a2 + 88;
        *((void *)&v81 + 1) = a2 + 92;
        uint64_t v82 = a2 + 96;
        int v57 = (uint64_t *)(a1 + 88);
        uint64_t v75 = (void **)a1;
        uint64_t v76 = a1 + 40;
        uint64_t v77 = a1 + 88;
        uint64_t v78 = a1 + 92;
        uint64_t v79 = a1 + 96;
        if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v80, (uint64_t *)&v75) & 0x80) != 0)
        {
          uint64_t v58 = 0;
          long long v59 = *(_OWORD *)(a1 + 16);
          long long v80 = *(_OWORD *)a1;
          long long v81 = v59;
          uint64_t v82 = *(void *)(a1 + 32);
          do
          {
            uint64_t v60 = (char *)&v80 + v58;
            uint64_t v61 = (void *)(a1 + v58);
            *(_OWORD *)(v60 + 40) = *(_OWORD *)(a1 + v58 + 40);
            *((void *)v60 + 7) = *(void *)(a1 + v58 + 56);
            v61[5] = 0;
            v61[6] = 0;
            v61[7] = 0;
            v58 += 24;
          }
          while (v58 != 48);
          uint64_t v62 = 0;
          uint64_t v84 = *v57;
          char v85 = *(unsigned char *)(a1 + 96);
          uint64_t v63 = *(void *)(a2 + 32);
          long long v64 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v64;
          *(void *)(a1 + 32) = v63;
          do
          {
            uint64_t v65 = a1 + v62;
            uint64_t v66 = (void *)(a2 + v62);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v62 + 40));
            *(_OWORD *)(v65 + 40) = *(_OWORD *)(a2 + v62 + 40);
            *(void *)(v65 + 56) = *(void *)(a2 + v62 + 56);
            v66[5] = 0;
            v66[6] = 0;
            v66[7] = 0;
            v62 += 24;
          }
          while (v62 != 48);
          uint64_t v67 = 0;
          uint64_t v68 = *v41;
          *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
          uint64_t *v57 = v68;
          long long v69 = v81;
          *(_OWORD *)a2 = v80;
          *(_OWORD *)(a2 + 16) = v69;
          *(void *)(a2 + 32) = v82;
          do
          {
            uint64_t v70 = a2 + v67;
            long long v71 = (void *)((char *)&v80 + v67);
            std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a2 + v67 + 40));
            *(_OWORD *)(v70 + 40) = *(_OWORD *)&v83[v67];
            *(void *)(v70 + 56) = *(void *)&v83[v67 + 16];
            v71[6] = 0;
            v71[7] = 0;
            v71[5] = 0;
            v67 += 24;
          }
          while (v67 != 48);
          uint64_t *v41 = v84;
          *(unsigned char *)(a2 + 96) = v85;
          for (uint64_t m = 64; m != 16; m -= 24)
          {
            uint64_t v75 = (void **)((char *)&v80 + m);
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v75);
          }
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(0x4EC4EC4EC4EC4EC5 * v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v6 = (_OWORD *)(a2 - 104);
      BOOL v7 = (uint64_t *)(a2 - 16);
      *(void *)&long long v60 = a2 - 104;
      *((void *)&v60 + 1) = a2 - 64;
      *(void *)&long long v61 = a2 - 16;
      *((void *)&v61 + 1) = a2 - 12;
      uint64_t v62 = a2 - 8;
      uint64_t v8 = a1 + 88;
      uint64_t v55 = (void **)a1;
      long long v56 = (unsigned char *)(a1 + 40);
      int v57 = (uint64_t *)(a1 + 88);
      uint64_t v58 = (char *)(a1 + 92);
      long long v59 = (char *)(a1 + 96);
      if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v60, (uint64_t *)&v55) & 0x80) != 0)
      {
        uint64_t v9 = 0;
        long long v10 = *(_OWORD *)(a1 + 16);
        long long v60 = *(_OWORD *)a1;
        long long v61 = v10;
        uint64_t v62 = *(void *)(a1 + 32);
        do
        {
          long long v11 = (char *)&v60 + v9;
          unint64_t v12 = (void *)(a1 + v9);
          *(_OWORD *)(v11 + 40) = *(_OWORD *)(a1 + v9 + 40);
          *((void *)v11 + 7) = *(void *)(a1 + v9 + 56);
          v12[5] = 0;
          v12[6] = 0;
          v12[7] = 0;
          v9 += 24;
        }
        while (v9 != 48);
        uint64_t v13 = 0;
        uint64_t v64 = *(void *)v8;
        char v65 = *(unsigned char *)(a1 + 96);
        uint64_t v14 = *(void *)(v2 - 72);
        long long v15 = *(_OWORD *)(v2 - 88);
        *(_OWORD *)a1 = *v6;
        *(_OWORD *)(a1 + 16) = v15;
        *(void *)(a1 + 32) = v14;
        do
        {
          uint64_t v16 = a1 + v13;
          uint64_t v17 = v2 + v13;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v13 + 40));
          *(_OWORD *)(v16 + 40) = *(_OWORD *)(v2 + v13 - 64);
          *(void *)(v16 + 56) = *(void *)(v2 + v13 - 48);
          *(void *)(v17 - 64) = 0;
          *(void *)(v17 - 56) = 0;
          *(void *)(v17 - 48) = 0;
          v13 += 24;
        }
        while (v13 != 48);
        uint64_t v18 = 0;
        uint64_t v19 = *v7;
        *(unsigned char *)(v8 + 8) = *(unsigned char *)(v2 - 8);
        *(void *)uint64_t v8 = v19;
        long long v20 = v61;
        _OWORD *v6 = v60;
        *(_OWORD *)(v2 - 88) = v20;
        *(void *)(v2 - 72) = v62;
        do
        {
          uint64_t v21 = v2 + v18;
          uint64_t v22 = (void *)((char *)&v60 + v18);
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v2 + v18 - 64));
          *(_OWORD *)(v21 - 64) = *(_OWORD *)&v63[v18];
          *(void *)(v21 - 48) = *(void *)&v63[v18 + 16];
          v22[6] = 0;
          v22[7] = 0;
          v22[5] = 0;
          v18 += 24;
        }
        while (v18 != 48);
        *BOOL v7 = v64;
        *(unsigned char *)(v2 - 8) = v65;
        for (uint64_t i = 64; i != 16; i -= 24)
        {
          uint64_t v55 = (void **)((char *)&v60 + i);
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
        }
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)a1, (long long *)(a1 + 104), (long long *)(a2 - 104));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, a1 + 104, a1 + 208, a2 - 104);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>(a1, a1 + 104, a1 + 208, a1 + 312, a2 - 104);
      return 1;
    default:
      uint64_t v24 = a1 + 208;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *>((long long *)a1, (long long *)(a1 + 104), (long long *)(a1 + 208));
      uint64_t v25 = a1 + 312;
      if (a1 + 312 == v2) {
        return 1;
      }
      uint64_t v26 = 0;
      int v27 = 0;
      uint64_t v28 = a1;
      uint64_t v51 = v2;
      break;
  }
  while (1)
  {
    *(void *)&long long v60 = v25;
    *((void *)&v60 + 1) = v25 + 40;
    *(void *)&long long v61 = v25 + 88;
    *((void *)&v61 + 1) = v25 + 92;
    uint64_t v62 = v25 + 96;
    uint64_t v55 = (void **)v24;
    long long v56 = (unsigned char *)(v24 + 40);
    int v57 = (uint64_t *)(v24 + 88);
    uint64_t v58 = (char *)(v24 + 92);
    long long v59 = (char *)(v24 + 96);
    if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v60, (uint64_t *)&v55) & 0x80) != 0)
    {
      int v52 = v27;
      uint64_t v29 = 0;
      long long v30 = *(_OWORD *)(v25 + 16);
      long long v60 = *(_OWORD *)v25;
      long long v61 = v30;
      uint64_t v62 = *(void *)(v25 + 32);
      do
      {
        uint64_t v31 = (char *)&v60 + v29;
        long long v32 = (void *)(v28 + v29);
        *(_OWORD *)(v31 + 40) = *(_OWORD *)(v28 + v29 + 352);
        *((void *)v31 + 7) = *(void *)(v28 + v29 + 368);
        v32[44] = 0;
        v32[45] = 0;
        v32[46] = 0;
        v29 += 24;
      }
      while (v29 != 48);
      uint64_t v64 = *(void *)(v25 + 88);
      char v65 = *(unsigned char *)(v25 + 96);
      uint64_t v53 = v26;
      uint64_t v33 = v26;
      uint64_t v34 = v25;
      while (1)
      {
        uint64_t v35 = v24;
        uint64_t v36 = v33;
        long long v37 = *(_OWORD *)(v24 + 16);
        *(_OWORD *)uint64_t v34 = *(_OWORD *)v24;
        *(_OWORD *)(v34 + 16) = v37;
        *(void *)(v34 + 32) = *(void *)(v24 + 32);
        uint64_t v38 = v33;
        uint64_t v39 = 2;
        do
        {
          uint64_t v40 = a1 + v38;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v38 + 352));
          *(_OWORD *)(v40 + 352) = *(_OWORD *)(v40 + 248);
          *(void *)(v40 + 368) = *(void *)(v40 + 264);
          *(void *)(v40 + 256) = 0;
          *(void *)(v40 + 264) = 0;
          *(void *)(v40 + 248) = 0;
          v38 += 24;
          --v39;
        }
        while (v39);
        uint64_t v41 = v35 + 88;
        *(void *)(v34 + 88) = *(void *)(v35 + 88);
        *(unsigned char *)(v34 + 96) = *(unsigned char *)(v35 + 96);
        if (v35 == a1) {
          break;
        }
        uint64_t v24 = v35 - 104;
        uint64_t v55 = (void **)&v60;
        long long v56 = v63;
        int v57 = &v64;
        uint64_t v58 = (char *)&v64 + 4;
        long long v59 = &v65;
        v54[0] = v35 - 104;
        v54[1] = v35 - 64;
        v54[2] = v35 - 16;
        v54[3] = v35 - 12;
        v54[4] = v35 - 8;
        char v42 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>((uint64_t *)&v55, v54);
        uint64_t v33 = v36 - 104;
        uint64_t v34 = v35;
        if ((v42 & 0x80) == 0) {
          goto LABEL_24;
        }
      }
      uint64_t v35 = a1;
LABEL_24:
      uint64_t v43 = 0;
      long long v44 = v60;
      long long v45 = v61;
      *(void *)(v35 + 32) = v62;
      *(_OWORD *)uint64_t v35 = v44;
      *(_OWORD *)(v35 + 16) = v45;
      uint64_t v46 = a1 + v36;
      do
      {
        uint64_t v47 = v46 + v43;
        long long v48 = (void *)((char *)&v60 + v43);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v46 + v43 + 248));
        *(_OWORD *)(v47 + 248) = *(_OWORD *)&v63[v43];
        *(void *)(v47 + 264) = *(void *)&v63[v43 + 16];
        v48[6] = 0;
        v48[7] = 0;
        v48[5] = 0;
        v43 += 24;
      }
      while (v43 != 48);
      uint64_t v49 = v64;
      *(unsigned char *)(v41 + 8) = v65;
      *(void *)uint64_t v41 = v49;
      int v27 = v52 + 1;
      for (uint64_t j = 64; j != 16; j -= 24)
      {
        uint64_t v55 = (void **)((char *)&v60 + j);
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v55);
      }
      uint64_t v2 = v51;
      uint64_t v26 = v53;
      if (v52 == 7) {
        return v25 + 104 == v51;
      }
    }
    uint64_t v24 = v25;
    v28 += 104;
    v26 += 104;
    v25 += 104;
    if (v25 == v2) {
      return 1;
    }
  }
}

uint64_t std::operator<=>[abi:ne180100]<std::string,std::allocator<std::string>>(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  int64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3);
  uint64_t v5 = (a4 - (uint64_t)a3) >> 3;
  int64_t v6 = 0xAAAAAAAAAAAAAAABLL * v5;
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * v5) >= v4) {
    int64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)a1) >> 3);
  }
  else {
    int64_t v7 = 0xAAAAAAAAAAAAAAABLL * v5;
  }
  if (v7 < 1)
  {
LABEL_8:
    if (v4 < v6) {
      unsigned int v11 = -1;
    }
    else {
      unsigned int v11 = 1;
    }
    if (v4 == v6) {
      return 0;
    }
    else {
      return v11;
    }
  }
  else
  {
    uint64_t v8 = a3;
    uint64_t v9 = a1;
    while (1)
    {
      uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, v8);
      if ((_BYTE)result) {
        break;
      }
      v9 += 3;
      v8 += 3;
      if (!--v7) {
        goto LABEL_8;
      }
    }
  }
  return result;
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79F98;
  int64_t v4 = (void *)qword_1E9F79F88;
  uint64_t v117 = qword_1E9F79F98;
  uint64_t v118 = qword_1E9F79F98;
  if (qword_1E9F79F98)
  {
    if ((unint64_t)qword_1E9F79F98 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v5 = operator new(16 * qword_1E9F79F98);
  }
  else
  {
    uint64_t v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      long long v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *long long v10 = *(_DWORD *)v7;
      unsigned int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    int64_t v4 = (void *)qword_1E9F79F88;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  uint64_t v16 = v2 + 7;
  if (v15 > 1)
  {
    *uint64_t v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    uint64_t v22 = v121;
    unsigned int v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          int v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          uint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unsigned int v23 = (void *)(v24 + 8);
    }
    *uint64_t v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    uint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      uint64_t v31 = 0;
    }
    long long v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          uint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          long long v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      long long v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    char v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          uint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      char v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      uint64_t v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        uint64_t v50 = (void *)v49[1];
        int v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          long long v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              long long v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            long long v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          uint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    long long v80 = (void *)(v79 - 32);
    if (!v79) {
      long long v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          char v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79F98;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF13D18()
{
}

void sub_1BAF13D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    unsigned int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        uint64_t v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v12;
LABEL_79:
                    *uint64_t v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)uint64_t v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        uint64_t v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F7A028;
  uint64_t v4 = (void *)qword_1E9F7A018;
  uint64_t v117 = qword_1E9F7A028;
  uint64_t v118 = qword_1E9F7A028;
  if (qword_1E9F7A028)
  {
    if ((unint64_t)qword_1E9F7A028 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F7A028);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F7A018;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  uint64_t v16 = v2 + 7;
  if (v15 > 1)
  {
    *uint64_t v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    uint64_t v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *uint64_t v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      uint64_t v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F7A028;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF14C64()
{
}

void sub_1BAF14C8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        uint64_t v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v12;
LABEL_79:
                    *uint64_t v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)uint64_t v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        uint64_t v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79FE0;
  uint64_t v4 = (void *)qword_1E9F79FD0;
  uint64_t v117 = qword_1E9F79FE0;
  uint64_t v118 = qword_1E9F79FE0;
  if (qword_1E9F79FE0)
  {
    if ((unint64_t)qword_1E9F79FE0 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F79FE0);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F79FD0;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  uint64_t v16 = v2 + 7;
  if (v15 > 1)
  {
    *uint64_t v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    uint64_t v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *uint64_t v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      uint64_t v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79FE0;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF15BB0()
{
}

void sub_1BAF15BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        uint64_t v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v12;
LABEL_79:
                    *uint64_t v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)uint64_t v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        uint64_t v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F7A0B8;
  uint64_t v4 = (void *)qword_1E9F7A0A8;
  uint64_t v117 = qword_1E9F7A0B8;
  uint64_t v118 = qword_1E9F7A0B8;
  if (qword_1E9F7A0B8)
  {
    if ((unint64_t)qword_1E9F7A0B8 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F7A0B8);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F7A0A8;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  uint64_t v16 = v2 + 7;
  if (v15 > 1)
  {
    *uint64_t v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    uint64_t v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *uint64_t v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      uint64_t v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F7A0B8;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF16AFC()
{
}

void sub_1BAF16B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        uint64_t v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    uint64_t v49 = v12;
LABEL_79:
                    *uint64_t v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          uint64_t v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)uint64_t v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        uint64_t v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          uint64_t v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          uint64_t v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      uint64_t v16 = (unint64_t *)a1;
LABEL_12:
      *uint64_t v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void *AMCP::write_json_object<AMCP::Terminal_Identifier>(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (a2[23] >= 0) {
    BOOL v5 = a2;
  }
  else {
    BOOL v5 = *(char **)a2;
  }
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v5);
  BOOL v6 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  long long v25 = *(_OWORD *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 40);
  LOBYTE(v22) = 0;
  HIDWORD(v22) = 0;
  unint64_t v23 = v6;
  uint64_t v24 = v7 + 1;
  minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v22, "node", a3);
  if (HIDWORD(v22) != 2)
  {
    minijson::writer::next_field((minijson::writer *)&v22);
    minijson::writer::write_field_name(&v22, "terminal_index");
    std::ostream::operator<<();
  }
  AMCP::get_enum_string_bimap<AMCP::Direction>();
  uint64_t v42 = v45;
  unint64_t v8 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v43);
  v45[2] = v45;
  v45[3] = v45;
  unint64_t v9 = v44;
  unint64_t v10 = *((void *)v44 + 4) & 0xFFFFFFFFFFFFFFFELL;
  if (!v10) {
    goto LABEL_26;
  }
  unsigned int v11 = *(_DWORD *)(a3 + 32);
  unint64_t v12 = v44;
  do
  {
    while (*(_DWORD *)(v10 - 32) < v11)
    {
      unint64_t v10 = *(void *)(v10 + 16);
      if (!v10) {
        goto LABEL_12;
      }
    }
    unint64_t v12 = (char *)(v10 - 32);
    unint64_t v10 = *(void *)(v10 + 8);
  }
  while (v10);
LABEL_12:
  if (v12 == v44 || (v11 >= *(_DWORD *)v12 ? (unint64_t v13 = v12) : (unint64_t v13 = v44), v44 == v13))
  {
LABEL_26:
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v18 = **(NSObject ***)buf;
    if (*(void *)v47) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v47);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      BOOL v19 = pthread_self();
      mach_port_t v20 = pthread_mach_thread_np(v19);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v20;
      *(_WORD *)uint64_t v47 = 2080;
      *(void *)&v47[2] = "Graph_Description_Internal.h";
      __int16 v48 = 1024;
      int v49 = 42;
      __int16 v50 = 2080;
      *(void *)int64_t v51 = "not (found != map.left.end())";
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v41);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v33);
    std::logic_error::logic_error(&v34, &v33);
    v34.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v35, &v34);
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    int v40 = -1;
    v35.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unint64_t v36 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v35);
    *(void *)&v51[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Direction]";
    int64_t v52 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    int v53 = 42;
    std::vector<void *>::vector(&v28);
    int v21 = backtrace((void **)v28, (*((void *)&v28 + 1) - (void)v28) >> 3);
    std::vector<void *>::resize((char **)&v28, v21);
    long long v31 = v28;
    uint64_t v32 = v29;
    long long v28 = 0uLL;
    uint64_t v29 = 0;
    BOOL v30 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v13[31] < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *((const std::string::value_type **)v13 + 1), *((void *)v13 + 2));
    unint64_t v9 = v44;
  }
  else
  {
    long long v14 = *(_OWORD *)(v13 + 8);
    v27.__r_.__value_.__r.__words[2] = *((void *)v13 + 3);
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
  }
  uint64_t v15 = *((void *)v9 + 7);
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v16 = (v15 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v16 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v45, v16);
  operator delete(v44);
  minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v22, "wire_direction", (uint64_t)&v27);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  return minijson::writer::close(&v22);
}

void sub_1BAF17910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39)
{
  uint64_t v42 = *(void *)(*(void *)(v40 - 200) + 56);
  if ((v42 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v43 = (v42 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v43 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes(v39, v43);
  operator delete(*(void **)(v40 - 200));
  _Unwind_Resume(a1);
}

void AMCP::enum_to_string<AMCP::Resampler_Type>(std::string *a1, int *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Type>();
  BOOL v30 = v33;
  uint64_t v4 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v31);
  v33[2] = v33;
  v33[3] = v33;
  BOOL v5 = __p;
  unint64_t v6 = *((void *)__p + 4) & 0xFFFFFFFFFFFFFFFELL;
  if (!v6) {
    goto LABEL_19;
  }
  int v7 = *a2;
  unint64_t v8 = (char *)__p;
  do
  {
    while (*(_DWORD *)(v6 - 32) < v7)
    {
      unint64_t v6 = *(void *)(v6 + 16);
      if (!v6) {
        goto LABEL_7;
      }
    }
    unint64_t v8 = (char *)(v6 - 32);
    unint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6);
LABEL_7:
  if (v8 == __p || (v7 >= *(_DWORD *)v8 ? (unint64_t v9 = v8) : (unint64_t v9 = (char *)__p), __p == v9))
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      long long v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)std::logic_error v35 = 2080;
      *(void *)&v35[2] = "Graph_Description_Internal.h";
      __int16 v36 = 1024;
      int v37 = 42;
      __int16 v38 = 2080;
      *(void *)uint64_t v39 = "not (found != map.left.end())";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v24 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(void *)&v39[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Resampler_Type]";
    uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    int v41 = 42;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    unint64_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v9[31] < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v9 + 1), *((void *)v9 + 2));
    BOOL v5 = __p;
  }
  else
  {
    long long v10 = *(_OWORD *)(v9 + 8);
    a1->__r_.__value_.__r.__words[2] = *((void *)v9 + 3);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = v5[7];
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v12 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v33, v12);
  operator delete(__p);
}

void sub_1BAF17D94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v34);
  _Unwind_Resume(a1);
}

void AMCP::enum_to_string<AMCP::Resampler_Quality>(std::string *a1, int *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Quality>();
  BOOL v30 = v33;
  uint64_t v4 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v31);
  v33[2] = v33;
  v33[3] = v33;
  BOOL v5 = __p;
  unint64_t v6 = *((void *)__p + 4) & 0xFFFFFFFFFFFFFFFELL;
  if (!v6) {
    goto LABEL_19;
  }
  int v7 = *a2;
  unint64_t v8 = (char *)__p;
  do
  {
    while (*(_DWORD *)(v6 - 32) < v7)
    {
      unint64_t v6 = *(void *)(v6 + 16);
      if (!v6) {
        goto LABEL_7;
      }
    }
    unint64_t v8 = (char *)(v6 - 32);
    unint64_t v6 = *(void *)(v6 + 8);
  }
  while (v6);
LABEL_7:
  if (v8 == __p || (v7 >= *(_DWORD *)v8 ? (unint64_t v9 = v8) : (unint64_t v9 = (char *)__p), __p == v9))
  {
LABEL_19:
    AMCP::Log::Scope_Registry::get(v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v13 = **(NSObject ***)buf;
    if (*(void *)v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      long long v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)std::logic_error v35 = 2080;
      *(void *)&v35[2] = "Graph_Description_Internal.h";
      __int16 v36 = 1024;
      int v37 = 42;
      __int16 v38 = 2080;
      *(void *)uint64_t v39 = "not (found != map.left.end())";
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v29);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v21);
    std::logic_error::logic_error(&v22, &v21);
    v22.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v23, &v22);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    int v28 = -1;
    v23.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v24 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v23);
    *(void *)&v39[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Resampler_Quality]";
    uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    int v41 = 42;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    long long v19 = v16;
    uint64_t v20 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    unint64_t v18 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v9[31] < 0)
  {
    std::string::__init_copy_ctor_external(a1, *((const std::string::value_type **)v9 + 1), *((void *)v9 + 2));
    BOOL v5 = __p;
  }
  else
  {
    long long v10 = *(_OWORD *)(v9 + 8);
    a1->__r_.__value_.__r.__words[2] = *((void *)v9 + 3);
    *(_OWORD *)&a1->__r_.__value_.__l.__data_ = v10;
  }
  uint64_t v11 = v5[7];
  if ((v11 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v12 = (v11 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v12 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v33, v12);
  operator delete(__p);
}

void sub_1BAF18170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v34);
  _Unwind_Resume(a1);
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F7A190;
  uint64_t v4 = (void *)qword_1E9F7A180;
  uint64_t v117 = qword_1E9F7A190;
  uint64_t v118 = qword_1E9F7A190;
  if (qword_1E9F7A190)
  {
    if ((unint64_t)qword_1E9F7A190 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F7A190);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      long long v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *long long v10 = *(_DWORD *)v7;
      uint64_t v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F7A180;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    std::logic_error v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          uint64_t v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          int v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      std::logic_error v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    uint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      uint64_t v31 = 0;
    }
    uint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          __int16 v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          int v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      uint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        __int16 v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        int v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *int v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *int v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F7A190;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF18884()
{
}

void sub_1BAF188AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    uint64_t v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F7A148;
  uint64_t v4 = (void *)qword_1E9F7A138;
  uint64_t v117 = qword_1E9F7A148;
  uint64_t v118 = qword_1E9F7A148;
  if (qword_1E9F7A148)
  {
    if ((unint64_t)qword_1E9F7A148 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F7A148);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F7A138;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F7A148;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF197D0()
{
}

void sub_1BAF197F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79F50;
  uint64_t v4 = (void *)qword_1E9F79F40;
  uint64_t v117 = qword_1E9F79F50;
  uint64_t v118 = qword_1E9F79F50;
  if (qword_1E9F79F50)
  {
    if ((unint64_t)qword_1E9F79F50 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F79F50);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F79F40;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79F50;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF1A71C()
{
}

void sub_1BAF1A744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79F08;
  uint64_t v4 = (void *)qword_1E9F79EF8;
  uint64_t v117 = qword_1E9F79F08;
  uint64_t v118 = qword_1E9F79F08;
  if (qword_1E9F79F08)
  {
    if ((unint64_t)qword_1E9F79F08 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F79F08);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F79EF8;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79F08;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF1B668()
{
}

void sub_1BAF1B690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79EC0;
  uint64_t v4 = (void *)qword_1E9F79EB0;
  uint64_t v117 = qword_1E9F79EC0;
  uint64_t v118 = qword_1E9F79EC0;
  if (qword_1E9F79EC0)
  {
    if ((unint64_t)qword_1E9F79EC0 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F79EC0);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F79EB0;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79EC0;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF1C5B4()
{
}

void sub_1BAF1C5DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79E78;
  uint64_t v4 = (void *)qword_1E9F79E68;
  uint64_t v117 = qword_1E9F79E78;
  uint64_t v118 = qword_1E9F79E78;
  if (qword_1E9F79E78)
  {
    if ((unint64_t)qword_1E9F79E78 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F79E78);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F79E68;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79E78;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF1D500()
{
}

void sub_1BAF1D528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container(uint64_t a1)
{
  uint64_t v2 = operator new(0x50uLL);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 24) = 0;
  unint64_t v3 = qword_1E9F79E30;
  uint64_t v4 = (void *)qword_1E9F79E20;
  uint64_t v117 = qword_1E9F79E30;
  uint64_t v118 = qword_1E9F79E30;
  if (qword_1E9F79E30)
  {
    if ((unint64_t)qword_1E9F79E30 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    BOOL v5 = operator new(16 * qword_1E9F79E30);
  }
  else
  {
    BOOL v5 = 0;
  }
  v119 = v5;
  uint64_t v120 = 0;
  v121 = v4;
  v122 = v2;
  char v123 = 0;
  uint64_t v6 = v4[8];
  if (v6) {
    uint64_t v7 = v6 - 56;
  }
  else {
    uint64_t v7 = 0;
  }
  if ((void *)v7 == v4)
  {
    unint64_t v8 = 0;
  }
  else
  {
    unint64_t v8 = 0;
    do
    {
      unint64_t v9 = (unint64_t)v119;
      v119[2 * v8] = v7;
      uint64_t v10 = operator new(0x50uLL);
      *(void *)(v9 + 16 * v8 + 8) = v10;
      *uint64_t v10 = *(_DWORD *)v7;
      int v11 = (std::string *)(v10 + 2);
      if (*(char *)(v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
        unint64_t v8 = v120;
        unint64_t v3 = v117;
      }
      else
      {
        __n128 v12 = *(__n128 *)(v7 + 8);
        v11->__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
        *(__n128 *)&v11->__r_.__value_.__l.__data_ = v12;
      }
      uint64_t v120 = ++v8;
      if (v8 == v3)
      {
        unint64_t v13 = 126 - 2 * __clz(v3);
        if (v3) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>((unint64_t)v119, &v119[2 * v3], v14, 1, v12);
      }
      uint64_t v124 = v7 + 56;
      boost::multi_index::detail::ordered_index_node_impl<boost::multi_index::detail::null_augment_policy,std::allocator<char>>::increment((uint64_t)&v124);
      if (v124) {
        uint64_t v7 = v124 - 56;
      }
      else {
        uint64_t v7 = 0;
      }
    }
    while ((void *)v7 != v4);
    uint64_t v4 = (void *)qword_1E9F79E20;
    uint64_t v2 = *(void **)(a1 + 8);
  }
  unint64_t v15 = v4[7];
  long long v16 = v2 + 7;
  if (v15 > 1)
  {
    *long long v16 = *v16 & 0xFFFFFFFFFFFFFFFELL | v4[7] & 1;
    uint64_t v17 = v4[7];
    unint64_t v18 = (v17 & 0xFFFFFFFFFFFFFFFELL) - 56;
    BOOL v19 = (v17 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v20 = v15 & 1;
    if (v19) {
      unint64_t v21 = 0;
    }
    else {
      unint64_t v21 = v18;
    }
    std::logic_error v22 = v121;
    unint64_t v23 = &v122;
    if (v121 != (void *)v21)
    {
      unint64_t v24 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v25 = v8;
        do
        {
          unint64_t v26 = v25 >> 1;
          long long v27 = (unint64_t *)(v24 + 16 * (v25 >> 1));
          unint64_t v29 = *v27;
          unint64_t v28 = v27 + 2;
          v25 += ~(v25 >> 1);
          if (v29 < v21) {
            unint64_t v24 = (unint64_t)v28;
          }
          else {
            unint64_t v25 = v26;
          }
        }
        while (v25);
      }
      unint64_t v23 = (void *)(v24 + 8);
    }
    *long long v16 = v20 | (*v23 + 56);
    uint64_t v30 = v4[8];
    unint64_t v31 = (void *)(v30 - 56);
    if (!v30) {
      unint64_t v31 = 0;
    }
    unint64_t v32 = &v122;
    if (v22 != v31)
    {
      unint64_t v33 = (unint64_t)v119;
      if (v8)
      {
        unint64_t v34 = v8;
        do
        {
          unint64_t v35 = v34 >> 1;
          unint64_t v36 = (unint64_t *)(v33 + 16 * (v34 >> 1));
          unint64_t v38 = *v36;
          unint64_t v37 = v36 + 2;
          v34 += ~(v34 >> 1);
          if (v38 < (unint64_t)v31) {
            unint64_t v33 = (unint64_t)v37;
          }
          else {
            unint64_t v34 = v35;
          }
        }
        while (v34);
      }
      unint64_t v32 = (void *)(v33 + 8);
    }
    v2[8] = *v32 + 56;
    uint64_t v39 = v4[9];
    uint64_t v40 = (void *)(v39 - 56);
    if (!v39) {
      uint64_t v40 = 0;
    }
    unint64_t v41 = (unint64_t)v119;
    uint64_t v42 = &v122;
    if (v22 != v40)
    {
      if (v8)
      {
        unint64_t v43 = (unint64_t)v119;
        unint64_t v44 = v8;
        do
        {
          unint64_t v45 = v44 >> 1;
          unint64_t v46 = (unint64_t *)(v43 + 16 * (v44 >> 1));
          unint64_t v48 = *v46;
          uint64_t v47 = v46 + 2;
          v44 += ~(v44 >> 1);
          if (v48 < (unint64_t)v40) {
            unint64_t v43 = (unint64_t)v47;
          }
          else {
            unint64_t v44 = v45;
          }
        }
        while (v44);
      }
      else
      {
        unint64_t v43 = (unint64_t)v119;
      }
      uint64_t v42 = (void *)(v43 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 72) = *v42 + 56;
    if (v8)
    {
      int v49 = (void *)v41;
      do
      {
        uint64_t v51 = *v49;
        int64_t v50 = (void *)v49[1];
        int64_t v52 = (void *)(*v49 + 56);
        uint64_t v53 = v50 + 7;
        uint64_t v54 = *v52 & 1;
        v50[7] = v50[7] & 0xFFFFFFFFFFFFFFFELL | v54;
        unint64_t v55 = *v52 & 0xFFFFFFFFFFFFFFFELL;
        if (v55)
        {
          unint64_t v56 = (uint64_t *)&v122;
          if (v22 != (void *)(v55 - 56))
          {
            unint64_t v57 = v41;
            unint64_t v58 = v8;
            do
            {
              unint64_t v59 = v58 >> 1;
              long long v60 = (unint64_t *)(v57 + 16 * (v58 >> 1));
              unint64_t v62 = *v60;
              uint64_t v61 = v60 + 2;
              v58 += ~(v58 >> 1);
              if (v62 < v55 - 56) {
                unint64_t v57 = (unint64_t)v61;
              }
              else {
                unint64_t v58 = v59;
              }
            }
            while (v58);
            unint64_t v56 = (uint64_t *)(v57 + 8);
          }
          uint64_t v63 = *v56;
          *uint64_t v53 = v54 | (*v56 + 56);
          if (*(void **)(v55 + 8) == v52)
          {
            *(void *)(v63 + 64) = v53;
          }
          else if (*(void **)(v55 + 16) == v52)
          {
            *(void *)(v63 + 72) = v53;
          }
        }
        else
        {
          *uint64_t v53 = v54;
        }
        if (!*(void *)(v51 + 64)) {
          v50[8] = 0;
        }
        if (!*(void *)(v51 + 72)) {
          v50[9] = 0;
        }
        v49 += 2;
      }
      while (v49 != (void *)(v41 + 16 * v8));
    }
  }
  else
  {
    v2[7] = 0;
    v2[8] = v16;
    *(void *)(*(void *)(a1 + 8) + 72) = *(void *)(a1 + 8) + 56;
  }
  unint64_t v64 = v4[4];
  uint64_t v65 = *(void *)(a1 + 8);
  uint64_t v66 = (unint64_t *)(v65 + 32);
  if (v64 > 1)
  {
    *uint64_t v66 = *v66 & 0xFFFFFFFFFFFFFFFELL | v4[4] & 1;
    uint64_t v67 = v4[4];
    unint64_t v68 = (v67 & 0xFFFFFFFFFFFFFFFELL) - 32;
    BOOL v19 = (v67 & 0xFFFFFFFFFFFFFFFELL) == 0;
    unint64_t v69 = v64 & 1;
    if (v19) {
      unint64_t v70 = 0;
    }
    else {
      unint64_t v70 = v68;
    }
    long long v71 = v121;
    unint64_t v72 = &v122;
    if (v121 != (void *)v70)
    {
      unint64_t v73 = (unint64_t)v119;
      unint64_t v74 = v120;
      if (v120)
      {
        do
        {
          unint64_t v75 = v74 >> 1;
          uint64_t v76 = (unint64_t *)(v73 + 16 * (v74 >> 1));
          unint64_t v78 = *v76;
          unint64_t v77 = v76 + 2;
          v74 += ~(v74 >> 1);
          if (v78 < v70) {
            unint64_t v73 = (unint64_t)v77;
          }
          else {
            unint64_t v74 = v75;
          }
        }
        while (v74);
      }
      unint64_t v72 = (void *)(v73 + 8);
    }
    *uint64_t v66 = v69 | (*v72 + 32);
    uint64_t v79 = v4[5];
    unint64_t v80 = (void *)(v79 - 32);
    if (!v79) {
      unint64_t v80 = 0;
    }
    long long v81 = &v122;
    if (v71 != v80)
    {
      unint64_t v82 = (unint64_t)v119;
      unint64_t v83 = v120;
      if (v120)
      {
        do
        {
          unint64_t v84 = v83 >> 1;
          long long v85 = (unint64_t *)(v82 + 16 * (v83 >> 1));
          unint64_t v87 = *v85;
          uint64_t v86 = v85 + 2;
          v83 += ~(v83 >> 1);
          if (v87 < (unint64_t)v80) {
            unint64_t v82 = (unint64_t)v86;
          }
          else {
            unint64_t v83 = v84;
          }
        }
        while (v83);
      }
      long long v81 = (void *)(v82 + 8);
    }
    *(void *)(v65 + 40) = *v81 + 32;
    uint64_t v88 = v4[6];
    if (v88) {
      uint64_t v89 = (void *)(v88 - 32);
    }
    else {
      uint64_t v89 = 0;
    }
    if (v121 == v89)
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      uint64_t v98 = &v122;
    }
    else
    {
      unint64_t v90 = (unint64_t)v119;
      uint64_t v91 = v120;
      if (v120)
      {
        unint64_t v92 = (unint64_t)v119;
        unint64_t v93 = v120;
        do
        {
          unint64_t v94 = v93 >> 1;
          v95 = (unint64_t *)(v92 + 16 * (v93 >> 1));
          unint64_t v97 = *v95;
          uint64_t v96 = v95 + 2;
          v93 += ~(v93 >> 1);
          if (v97 < (unint64_t)v89) {
            unint64_t v92 = (unint64_t)v96;
          }
          else {
            unint64_t v93 = v94;
          }
        }
        while (v93);
      }
      else
      {
        unint64_t v92 = (unint64_t)v119;
      }
      uint64_t v98 = (void *)(v92 + 8);
    }
    *(void *)(*(void *)(a1 + 8) + 48) = *v98 + 32;
    if (v91)
    {
      unint64_t v99 = (void *)(v90 + 16 * v91);
      long long v100 = (void *)v90;
      do
      {
        uint64_t v102 = *v100;
        long long v101 = (void *)v100[1];
        long long v103 = (void *)(*v100 + 32);
        uint64_t v104 = v101 + 4;
        uint64_t v105 = *v103 & 1;
        v101[4] = v101[4] & 0xFFFFFFFFFFFFFFFELL | v105;
        unint64_t v106 = *v103 & 0xFFFFFFFFFFFFFFFELL;
        if (v106)
        {
          uint64_t v107 = (uint64_t *)&v122;
          if (v121 != (void *)(v106 - 32))
          {
            unint64_t v108 = v120;
            if (v120)
            {
              unint64_t v109 = v90;
              do
              {
                unint64_t v110 = v108 >> 1;
                v111 = (unint64_t *)(v109 + 16 * (v108 >> 1));
                unint64_t v113 = *v111;
                uint64_t v112 = v111 + 2;
                v108 += ~(v108 >> 1);
                if (v113 < v106 - 32) {
                  unint64_t v109 = (unint64_t)v112;
                }
                else {
                  unint64_t v108 = v110;
                }
              }
              while (v108);
            }
            else
            {
              unint64_t v109 = v90;
            }
            uint64_t v107 = (uint64_t *)(v109 + 8);
          }
          uint64_t v114 = *v107;
          uint64_t *v104 = v105 | (*v107 + 32);
          if (*(void **)(v106 + 8) == v103)
          {
            *(void *)(v114 + 40) = v104;
          }
          else if (*(void **)(v106 + 16) == v103)
          {
            *(void *)(v114 + 48) = v104;
          }
        }
        else
        {
          uint64_t *v104 = v105;
        }
        if (!*(void *)(v102 + 40)) {
          v101[5] = 0;
        }
        if (!*(void *)(v102 + 48)) {
          v101[6] = 0;
        }
        v100 += 2;
      }
      while (v100 != v99);
    }
  }
  else
  {
    *(void *)(v65 + 32) = 0;
    *(void *)(v65 + 40) = v66;
    *(void *)(*(void *)(a1 + 8) + 48) = *(void *)(a1 + 8) + 32;
  }
  char v123 = 1;
  *(void *)(a1 + 24) = qword_1E9F79E30;
  boost::multi_index::detail::copy_map<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~copy_map((uint64_t)&v116);
  return a1;
}

void sub_1BAF1E44C()
{
}

void sub_1BAF1E474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(unint64_t a1, unint64_t *a2, uint64_t a3, char a4, __n128 a5)
{
  while (2)
  {
    int v11 = (long long *)(a2 - 2);
    __n128 v12 = (unint64_t *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = ((char *)a2 - (char *)v12) >> 4;
          if (v6 || !v5)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return a5.n128_f64[0];
              case 2uLL:
                if (*(void *)v11 < *v12)
                {
                  long long v84 = *(_OWORD *)v12;
                  *(_OWORD *)__n128 v12 = *v11;
                  a5.n128_u64[0] = v84;
                  long long *v11 = v84;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, a2 - 2);
                break;
              case 4uLL:
                a5.n128_u64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (_OWORD *)a2 - 1).n128_u64[0];
                break;
              case 5uLL:
                a5.n128_u64[0] = std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v12, v12 + 2, v12 + 4, (__n128 *)v12 + 3, (__n128 *)a2 - 1).n128_u64[0];
                break;
              default:
                JUMPOUT(0);
            }
            return a5.n128_f64[0];
          }
          if (v13 <= 383)
          {
            n128_u64 = v12 + 2;
            BOOL v41 = v12 == a2 || n128_u64 == a2;
            if (a4)
            {
              if (!v41)
              {
                uint64_t v42 = 0;
                unint64_t v43 = v12;
                do
                {
                  unint64_t v44 = n128_u64;
                  unint64_t v45 = v43[2];
                  if (v45 < *v43)
                  {
                    unint64_t v46 = v43[3];
                    uint64_t v47 = v42;
                    while (1)
                    {
                      a5 = *(__n128 *)((char *)v12 + v47);
                      *(__n128 *)((char *)v12 + v47 + 16) = a5;
                      if (!v47) {
                        break;
                      }
                      unint64_t v48 = *(unint64_t *)((char *)v12 + v47 - 16);
                      v47 -= 16;
                      if (v45 >= v48)
                      {
                        int v49 = (unint64_t *)((char *)v12 + v47 + 16);
                        goto LABEL_79;
                      }
                    }
                    int v49 = v12;
LABEL_79:
                    *int v49 = v45;
                    v49[1] = v46;
                  }
                  n128_u64 = v44 + 2;
                  v42 += 16;
                  unint64_t v43 = v44;
                }
                while (v44 + 2 != a2);
              }
            }
            else if (!v41)
            {
              do
              {
                uint64_t v76 = (__n128 *)n128_u64;
                unint64_t v77 = *(void *)(a1 + 16);
                if (v77 < *(void *)a1)
                {
                  unint64_t v78 = *(void *)(a1 + 24);
                  uint64_t v79 = v76;
                  do
                  {
                    a5 = v79[-1];
                    *uint64_t v79 = a5;
                    unint64_t v80 = v79[-2].n128_u64[0];
                    --v79;
                  }
                  while (v77 < v80);
                  v79->n128_u64[0] = v77;
                  v79->n128_u64[1] = v78;
                }
                n128_u64 = v76[1].n128_u64;
                a1 = (unint64_t)v76;
              }
              while (&v76[1] != (__n128 *)a2);
            }
            return a5.n128_f64[0];
          }
          if (!a3)
          {
            if (v12 != a2)
            {
              int64_t v50 = (v14 - 2) >> 1;
              int64_t v51 = v50;
              do
              {
                int64_t v52 = v51;
                if (v50 >= v51)
                {
                  uint64_t v53 = (2 * v51) | 1;
                  uint64_t v54 = &v12[2 * v53];
                  if (2 * v52 + 2 < (uint64_t)v14)
                  {
                    unint64_t v56 = v54[2];
                    BOOL v55 = *v54 >= v56;
                    if (*v54 < v56) {
                      v54 += 2;
                    }
                    else {
                      unint64_t v56 = *v54;
                    }
                    if (!v55) {
                      uint64_t v53 = 2 * v52 + 2;
                    }
                  }
                  else
                  {
                    unint64_t v56 = *v54;
                  }
                  unint64_t v57 = &v12[2 * v52];
                  unint64_t v58 = *v57;
                  if (v56 >= *v57)
                  {
                    unint64_t v59 = v57[1];
                    do
                    {
                      long long v60 = v57;
                      unint64_t v57 = v54;
                      *(_OWORD *)long long v60 = *(_OWORD *)v54;
                      if (v50 < v53) {
                        break;
                      }
                      uint64_t v61 = (2 * v53) | 1;
                      uint64_t v54 = &v12[2 * v61];
                      uint64_t v53 = 2 * v53 + 2;
                      if (v53 < (uint64_t)v14)
                      {
                        unint64_t v62 = *v54;
                        if (*v54 >= v54[2])
                        {
                          uint64_t v53 = v61;
                        }
                        else
                        {
                          unint64_t v62 = v54[2];
                          v54 += 2;
                        }
                      }
                      else
                      {
                        unint64_t v62 = *v54;
                        uint64_t v53 = v61;
                      }
                    }
                    while (v62 >= v58);
                    unint64_t *v57 = v58;
                    v57[1] = v59;
                  }
                }
                int64_t v51 = v52 - 1;
              }
              while (v52);
              uint64_t v63 = (unint64_t)v13 >> 4;
              do
              {
                uint64_t v64 = 0;
                long long v85 = *(_OWORD *)v12;
                uint64_t v65 = (__n128 *)v12;
                do
                {
                  uint64_t v66 = &v65[v64 + 1];
                  uint64_t v67 = (2 * v64) | 1;
                  uint64_t v68 = 2 * v64 + 2;
                  if (v68 < v63 && v66->n128_u64[0] < v66[1].n128_u64[0])
                  {
                    ++v66;
                    uint64_t v67 = v68;
                  }
                  *uint64_t v65 = *v66;
                  uint64_t v65 = v66;
                  uint64_t v64 = v67;
                }
                while (v67 <= (uint64_t)((unint64_t)(v63 - 2) >> 1));
                a2 -= 2;
                if (v66 == (__n128 *)a2)
                {
                  a5.n128_u64[0] = v85;
                  *uint64_t v66 = (__n128)v85;
                }
                else
                {
                  *uint64_t v66 = *(__n128 *)a2;
                  a5.n128_u64[0] = v85;
                  *(_OWORD *)a2 = v85;
                  uint64_t v69 = (char *)v66 - (char *)v12 + 16;
                  if (v69 >= 17)
                  {
                    unint64_t v70 = (((unint64_t)v69 >> 4) - 2) >> 1;
                    long long v71 = (__n128 *)&v12[2 * v70];
                    unint64_t v72 = v66->n128_u64[0];
                    if (v71->n128_u64[0] < v66->n128_u64[0])
                    {
                      unint64_t v73 = v66->n128_u64[1];
                      do
                      {
                        unint64_t v74 = v66;
                        uint64_t v66 = v71;
                        a5 = *v71;
                        *unint64_t v74 = *v71;
                        if (!v70) {
                          break;
                        }
                        unint64_t v70 = (v70 - 1) >> 1;
                        long long v71 = (__n128 *)&v12[2 * v70];
                      }
                      while (v71->n128_u64[0] < v72);
                      v66->n128_u64[0] = v72;
                      v66->n128_u64[1] = v73;
                    }
                  }
                }
              }
              while (v63-- > 2);
            }
            return a5.n128_f64[0];
          }
          unint64_t v15 = v14 >> 1;
          long long v16 = &v12[2 * (v14 >> 1)];
          if ((unint64_t)v13 >= 0x801)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16 * (v14 >> 1)), a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16), v16 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 32), (unint64_t *)(a1 + 16 + 16 * v15), a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)v16 - 1, v16, (unint64_t *)(a1 + 16 + 16 * v15));
            long long v82 = *(_OWORD *)a1;
            *(_OWORD *)a1 = *(_OWORD *)v16;
            *(_OWORD *)long long v16 = v82;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)(a1 + 16 * (v14 >> 1)), (unint64_t *)a1, a2 - 2);
          }
          --a3;
          if ((a4 & 1) != 0 || *(void *)(a1 - 16) < *(void *)a1) {
            break;
          }
          a5 = *(__n128 *)a1;
          unint64_t v31 = *(void *)a1;
          if (*(void *)a1 >= *(void *)v11)
          {
            unint64_t v33 = a1 + 16;
            do
            {
              __n128 v12 = (unint64_t *)v33;
              if (v33 >= (unint64_t)a2) {
                break;
              }
              v33 += 16;
            }
            while (v31 >= *v12);
          }
          else
          {
            __n128 v12 = (unint64_t *)a1;
            do
            {
              unint64_t v32 = v12[2];
              v12 += 2;
            }
            while (v31 >= v32);
          }
          unint64_t v34 = a2;
          if (v12 < a2)
          {
            unint64_t v34 = a2;
            do
            {
              unint64_t v35 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v35);
          }
          while (v12 < v34)
          {
            long long v83 = *(_OWORD *)v12;
            *(_OWORD *)__n128 v12 = *(_OWORD *)v34;
            *(_OWORD *)unint64_t v34 = v83;
            do
            {
              unint64_t v36 = v12[2];
              v12 += 2;
            }
            while (v31 >= v36);
            do
            {
              unint64_t v37 = *(v34 - 2);
              v34 -= 2;
            }
            while (v31 < v37);
          }
          unint64_t v38 = v12 - 2;
          BOOL v5 = (unint64_t)(v12 - 2) >= a1;
          BOOL v6 = v12 - 2 == (unint64_t *)a1;
          if (v12 - 2 != (unint64_t *)a1) {
            *(_OWORD *)a1 = *(_OWORD *)v38;
          }
          a4 = 0;
          *(__n128 *)unint64_t v38 = a5;
        }
        long long v17 = *(_OWORD *)a1;
        unint64_t v18 = *(void *)a1;
        BOOL v19 = (unint64_t *)a1;
        do
        {
          unint64_t v20 = v19;
          unint64_t v21 = v19[2];
          v19 += 2;
        }
        while (v21 < v18);
        std::logic_error v22 = a2;
        if (v20 == (unint64_t *)a1)
        {
          std::logic_error v22 = a2;
          do
          {
            if (v19 >= v22) {
              break;
            }
            unint64_t v24 = *(v22 - 2);
            v22 -= 2;
          }
          while (v24 >= v18);
        }
        else
        {
          do
          {
            unint64_t v23 = *(v22 - 2);
            v22 -= 2;
          }
          while (v23 >= v18);
        }
        if (v19 < v22)
        {
          unint64_t v25 = v19;
          unint64_t v26 = v22;
          do
          {
            long long v27 = *(_OWORD *)v25;
            *(_OWORD *)unint64_t v25 = *(_OWORD *)v26;
            *(_OWORD *)unint64_t v26 = v27;
            do
            {
              unint64_t v20 = v25;
              unint64_t v28 = v25[2];
              v25 += 2;
            }
            while (v28 < v18);
            do
            {
              unint64_t v29 = *(v26 - 2);
              v26 -= 2;
            }
            while (v29 >= v18);
          }
          while (v25 < v26);
        }
        if (v20 != (unint64_t *)a1) {
          *(_OWORD *)a1 = *(_OWORD *)v20;
        }
        *(_OWORD *)unint64_t v20 = v17;
        if (v19 >= v22) {
          break;
        }
LABEL_30:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *,false>(a1, v20, a3, a4 & 1);
        a4 = 0;
        __n128 v12 = v20 + 2;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(a1, v20);
      __n128 v12 = v20 + 2;
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((uint64_t)(v20 + 2), a2))
      {
        break;
      }
      if (!v30) {
        goto LABEL_30;
      }
    }
    a2 = v20;
    if (!v30) {
      continue;
    }
    return a5.n128_f64[0];
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      BOOL v6 = (long long *)(a2 - 2);
      if (*(a2 - 2) < *(void *)a1)
      {
        long long v7 = *(_OWORD *)a1;
        *(_OWORD *)a1 = *v6;
        long long *v6 = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (_OWORD *)a2 - 1);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32), (__n128 *)(a1 + 48), (__n128 *)a2 - 1);
      return 1;
    default:
      unint64_t v8 = (unint64_t *)(a1 + 32);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,boost::multi_index::detail::copy_map_entry<boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::ordered_index_node<boost::multi_index::detail::null_augment_policy,boost::multi_index::detail::index_node_base<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>>>> *>((long long *)a1, (unint64_t *)(a1 + 16), (unint64_t *)(a1 + 32));
      unint64_t v9 = (unint64_t *)(a1 + 48);
      if ((unint64_t *)(a1 + 48) == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    unint64_t v12 = *v9;
    if (*v9 < *v8)
    {
      unint64_t v13 = v9[1];
      uint64_t v14 = v10;
      while (1)
      {
        *(_OWORD *)(a1 + v14 + 48) = *(_OWORD *)(a1 + v14 + 32);
        if (v14 == -32) {
          break;
        }
        unint64_t v15 = *(void *)(a1 + v14 + 16);
        v14 -= 16;
        if (v12 >= v15)
        {
          long long v16 = (unint64_t *)(a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      long long v16 = (unint64_t *)a1;
LABEL_12:
      *long long v16 = v12;
      v16[1] = v13;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    unint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void AMCP::write_json(uint64_t a1, uint64_t *a2)
{
  uint64_t v199 = *MEMORY[0x1E4F143B8];
  v160 = 0;
  uint64_t v161 = 0;
  uint64_t v162 = 0;
  std::vector<AMCP::Node_Description>::__init_with_size[abi:ne180100]<AMCP::Node_Description*,AMCP::Node_Description*>(&v160, *a2, a2[1], 0xEEEEEEEEEEEEEEEFLL * ((a2[1] - *a2) >> 3));
  unint64_t v4 = 126 - 2 * __clz(0xEEEEEEEEEEEEEEEFLL * (((char *)v161 - (char *)v160) >> 3));
  if (v161 == v160) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v4;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *,false>((uint64_t)v160, v161, v5, 1);
  p_p = (char *)&__p;
  std::string::basic_string[abi:ne180100]<0>(&__p, "nodes");
  if (v159 < 0) {
    p_p = (char *)__p;
  }
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, p_p);
  unint64_t v8 = *(uint64_t **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  long long v169 = *(_OWORD *)(a1 + 24);
  uint64_t v170 = *(void *)(a1 + 40);
  LOBYTE(v167) = 1;
  HIDWORD(v167) = 0;
  *(void *)&long long v168 = v8;
  *((void *)&v168 + 1) = v7 + 1;
  uint64_t v10 = v160;
  for (uint64_t i = v161; v10 != i; v10 += 30)
  {
    minijson::writer::next_field((minijson::writer *)&v167);
    unint64_t v8 = (uint64_t *)v168;
    long long v165 = v169;
    uint64_t v166 = v170;
    LOBYTE(v163) = 0;
    HIDWORD(v163) = 0;
    long long v164 = v168 + __PAIR128__(1, 0);
    AMCP::get_enum_string_bimap<AMCP::Node_Type>();
    v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
    int v11 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
    int64_t v189 = (char *)&v187 + 8;
    uint64_t v190 = (char *)&v187 + 8;
    uint64_t v12 = v187;
    unint64_t v13 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v13) {
      goto LABEL_229;
    }
    int v14 = *v10;
    unint64_t v15 = (int *)v187;
    do
    {
      while (*(_DWORD *)(v13 - 32) < v14)
      {
        unint64_t v13 = *(void *)(v13 + 16);
        if (!v13) {
          goto LABEL_13;
        }
      }
      unint64_t v15 = (int *)(v13 - 32);
      unint64_t v13 = *(void *)(v13 + 8);
    }
    while (v13);
LABEL_13:
    if (v15 == (int *)v187 || (v14 >= *v15 ? (long long v16 = v15) : (long long v16 = (int *)v187), (int *)v187 == v16))
    {
LABEL_229:
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v109 = **(NSObject ***)buf;
      if (*(void *)v192) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
      }
      if (os_log_type_enabled(v109, OS_LOG_TYPE_ERROR))
      {
        unint64_t v110 = pthread_self();
        mach_port_t v111 = pthread_mach_thread_np(v110);
        *(_DWORD *)__CFString buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v111;
        *(_WORD *)uint64_t v192 = 2080;
        *(void *)&v192[2] = "Graph_Description_Internal.h";
        __int16 v193 = 1024;
        int v194 = 42;
        __int16 v195 = 2080;
        *(void *)long long v196 = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1BAA78000, v109, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v177);
      std::logic_error::logic_error(&v155, &v177);
      v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v179, &v155);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v180 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Type]";
      v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      int v198 = 42;
      std::vector<void *>::vector(&v172);
      int v112 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
      std::vector<void *>::resize((char **)&v172, v112);
      long long v175 = v172;
      uint64_t v113 = v173;
      uint64_t v173 = 0;
      uint64_t v174 = &unk_1F148AA90;
      uint64_t v176 = v113;
      long long v172 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (*((char *)v16 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v16 + 1), *((void *)v16 + 2));
      uint64_t v12 = v187;
    }
    else
    {
      long long v17 = *(_OWORD *)(v16 + 2);
      v171.__r_.__value_.__r.__words[2] = *((void *)v16 + 3);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v17;
    }
    uint64_t v18 = *(void *)(v12 + 56);
    if ((v18 & 0xFFFFFFFFFFFFFFFELL) != 0) {
      uint64_t v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) - 56;
    }
    else {
      uint64_t v19 = 0;
    }
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v19);
    operator delete((void *)v187);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "NodeType", (uint64_t)&v171);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "UID", (uint64_t)(v10 + 2));
    AMCP::get_enum_string_bimap<AMCP::Node_Thread_Policy>();
    v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
    unint64_t v20 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
    int64_t v189 = (char *)&v187 + 8;
    uint64_t v190 = (char *)&v187 + 8;
    uint64_t v21 = v187;
    unint64_t v22 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v22) {
      goto LABEL_234;
    }
    int v23 = v10[8];
    unint64_t v24 = (int *)v187;
    do
    {
      while (*(_DWORD *)(v22 - 32) < v23)
      {
        unint64_t v22 = *(void *)(v22 + 16);
        if (!v22) {
          goto LABEL_32;
        }
      }
      unint64_t v24 = (int *)(v22 - 32);
      unint64_t v22 = *(void *)(v22 + 8);
    }
    while (v22);
LABEL_32:
    if (v24 == (int *)v187 || (v23 >= *v24 ? (unint64_t v25 = v24) : (unint64_t v25 = (int *)v187), (int *)v187 == v25))
    {
LABEL_234:
      AMCP::Log::Scope_Registry::get(v20);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v114 = **(NSObject ***)buf;
      if (*(void *)v192) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
      }
      if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
      {
        long long v115 = pthread_self();
        mach_port_t v116 = pthread_mach_thread_np(v115);
        *(_DWORD *)__CFString buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v116;
        *(_WORD *)uint64_t v192 = 2080;
        *(void *)&v192[2] = "Graph_Description_Internal.h";
        __int16 v193 = 1024;
        int v194 = 42;
        __int16 v195 = 2080;
        *(void *)long long v196 = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1BAA78000, v114, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v177);
      std::logic_error::logic_error(&v155, &v177);
      v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v179, &v155);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v180 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Thread_Policy]";
      v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      int v198 = 42;
      std::vector<void *>::vector(&v172);
      int v117 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
      std::vector<void *>::resize((char **)&v172, v117);
      long long v175 = v172;
      uint64_t v118 = v173;
      uint64_t v173 = 0;
      uint64_t v174 = &unk_1F148AA90;
      uint64_t v176 = v118;
      long long v172 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (*((char *)v25 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v25 + 1), *((void *)v25 + 2));
      uint64_t v21 = v187;
    }
    else
    {
      long long v26 = *(_OWORD *)(v25 + 2);
      v171.__r_.__value_.__r.__words[2] = *((void *)v25 + 3);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v26;
    }
    uint64_t v27 = *(void *)(v21 + 56);
    if ((v27 & 0xFFFFFFFFFFFFFFFELL) != 0) {
      uint64_t v28 = (v27 & 0xFFFFFFFFFFFFFFFELL) - 56;
    }
    else {
      uint64_t v28 = 0;
    }
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v28);
    operator delete((void *)v187);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ThreadPolicy", (uint64_t)&v171);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>();
    v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
    unint64_t v29 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
    int64_t v189 = (char *)&v187 + 8;
    uint64_t v190 = (char *)&v187 + 8;
    uint64_t v30 = v187;
    unint64_t v31 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v31) {
      goto LABEL_239;
    }
    int v32 = v10[9];
    unint64_t v33 = (int *)v187;
    do
    {
      while (*(_DWORD *)(v31 - 32) < v32)
      {
        unint64_t v31 = *(void *)(v31 + 16);
        if (!v31) {
          goto LABEL_51;
        }
      }
      unint64_t v33 = (int *)(v31 - 32);
      unint64_t v31 = *(void *)(v31 + 8);
    }
    while (v31);
LABEL_51:
    if (v33 == (int *)v187 || (v32 >= *v33 ? (unint64_t v34 = v33) : (unint64_t v34 = (int *)v187), (int *)v187 == v34))
    {
LABEL_239:
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      v119 = **(NSObject ***)buf;
      if (*(void *)v192) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
      }
      if (os_log_type_enabled(v119, OS_LOG_TYPE_ERROR))
      {
        uint64_t v120 = pthread_self();
        mach_port_t v121 = pthread_mach_thread_np(v120);
        *(_DWORD *)__CFString buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v121;
        *(_WORD *)uint64_t v192 = 2080;
        *(void *)&v192[2] = "Graph_Description_Internal.h";
        __int16 v193 = 1024;
        int v194 = 42;
        __int16 v195 = 2080;
        *(void *)long long v196 = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1BAA78000, v119, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v177);
      std::logic_error::logic_error(&v155, &v177);
      v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v179, &v155);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v180 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Buffer_Size_Change_Policy]";
      v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      int v198 = 42;
      std::vector<void *>::vector(&v172);
      int v122 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
      std::vector<void *>::resize((char **)&v172, v122);
      long long v175 = v172;
      uint64_t v123 = v173;
      uint64_t v173 = 0;
      uint64_t v174 = &unk_1F148AA90;
      uint64_t v176 = v123;
      long long v172 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (*((char *)v34 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v34 + 1), *((void *)v34 + 2));
      uint64_t v30 = v187;
    }
    else
    {
      long long v35 = *(_OWORD *)(v34 + 2);
      v171.__r_.__value_.__r.__words[2] = *((void *)v34 + 3);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v35;
    }
    uint64_t v36 = *(void *)(v30 + 56);
    if ((v36 & 0xFFFFFFFFFFFFFFFELL) != 0) {
      uint64_t v37 = (v36 & 0xFFFFFFFFFFFFFFFELL) - 56;
    }
    else {
      uint64_t v37 = 0;
    }
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v37);
    operator delete((void *)v187);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "SizeChangePolicy", (uint64_t)&v171);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ClockUID", (uint64_t)(v10 + 10));
    AMCP::get_enum_string_bimap<AMCP::Node_Clock_Policy>();
    v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
    unint64_t v38 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
    int64_t v189 = (char *)&v187 + 8;
    uint64_t v190 = (char *)&v187 + 8;
    uint64_t v39 = v187;
    unint64_t v40 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (!v40) {
      goto LABEL_244;
    }
    int v41 = v10[16];
    uint64_t v42 = (int *)v187;
    do
    {
      while (*(_DWORD *)(v40 - 32) < v41)
      {
        unint64_t v40 = *(void *)(v40 + 16);
        if (!v40) {
          goto LABEL_70;
        }
      }
      uint64_t v42 = (int *)(v40 - 32);
      unint64_t v40 = *(void *)(v40 + 8);
    }
    while (v40);
LABEL_70:
    if (v42 == (int *)v187 || (v41 >= *v42 ? (unint64_t v43 = v42) : (unint64_t v43 = (int *)v187), (int *)v187 == v43))
    {
LABEL_244:
      AMCP::Log::Scope_Registry::get(v38);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v124 = **(NSObject ***)buf;
      if (*(void *)v192) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
      }
      if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
      {
        v125 = pthread_self();
        mach_port_t v126 = pthread_mach_thread_np(v125);
        *(_DWORD *)__CFString buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v126;
        *(_WORD *)uint64_t v192 = 2080;
        *(void *)&v192[2] = "Graph_Description_Internal.h";
        __int16 v193 = 1024;
        int v194 = 42;
        __int16 v195 = 2080;
        *(void *)long long v196 = "not (found != map.left.end())";
        _os_log_error_impl(&dword_1BAA78000, v124, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v178);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"", (uint64_t)&v177);
      std::logic_error::logic_error(&v155, &v177);
      v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
      std::logic_error::logic_error(&v179, &v155);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
      uint64_t v180 = &unk_1F1489CF0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Node_Clock_Policy]";
      v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
      int v198 = 42;
      std::vector<void *>::vector(&v172);
      int v127 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
      std::vector<void *>::resize((char **)&v172, v127);
      long long v175 = v172;
      uint64_t v128 = v173;
      uint64_t v173 = 0;
      uint64_t v174 = &unk_1F148AA90;
      uint64_t v176 = v128;
      long long v172 = 0uLL;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
    }
    if (*((char *)v43 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v43 + 1), *((void *)v43 + 2));
      uint64_t v39 = v187;
    }
    else
    {
      long long v44 = *(_OWORD *)(v43 + 2);
      v171.__r_.__value_.__r.__words[2] = *((void *)v43 + 3);
      *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v44;
    }
    uint64_t v45 = *(void *)(v39 + 56);
    if ((v45 & 0xFFFFFFFFFFFFFFFELL) != 0) {
      uint64_t v46 = (v45 & 0xFFFFFFFFFFFFFFFELL) - 56;
    }
    else {
      uint64_t v46 = 0;
    }
    boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v46);
    operator delete((void *)v187);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ClockPolicy", (uint64_t)&v171);
    if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v171.__r_.__value_.__l.__data_);
    }
    minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v163, "BlockSize");
    memset(&v186, 0, sizeof(v186));
    std::vector<AMCP::Terminal_Description>::__init_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>(&v186, *((long long **)v10 + 12), *((long long **)v10 + 13), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)v10 + 13) - *((void *)v10 + 12)) >> 3));
    unint64_t v47 = 126
        - 2
        * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 3));
    if (v186.__r_.__value_.__l.__size_ == v186.__r_.__value_.__r.__words[0]) {
      uint64_t v48 = 0;
    }
    else {
      uint64_t v48 = v47;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>((uint64_t)v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_, v48, 1);
    std::string::basic_string[abi:ne180100]<0>(buf, "InputTerminals");
    AMCP::write_json_object_array<AMCP::Terminal_Description>((uint64_t)&v163, (char *)buf, (uint64_t *)&v186);
    if (SHIBYTE(v194) < 0) {
      operator delete(*(void **)buf);
    }
    if (&v186 != (std::string *)(v10 + 18)) {
      std::vector<AMCP::Terminal_Description>::__assign_with_size[abi:ne180100]<AMCP::Terminal_Description*,AMCP::Terminal_Description*>((uint64_t *)&v186, *((long long **)v10 + 9), *((long long **)v10 + 10), 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(*((void *)v10 + 10) - *((void *)v10 + 9)) >> 3));
    }
    unint64_t v49 = 126
        - 2
        * __clz(0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 3));
    if (v186.__r_.__value_.__l.__size_ == v186.__r_.__value_.__r.__words[0]) {
      uint64_t v50 = 0;
    }
    else {
      uint64_t v50 = v49;
    }
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Terminal_Description *,false>((uint64_t)v186.__r_.__value_.__l.__data_, v186.__r_.__value_.__l.__size_, v50, 1);
    std::string::basic_string[abi:ne180100]<0>(buf, "OutputTerminals");
    AMCP::write_json_object_array<AMCP::Terminal_Description>((uint64_t)&v163, (char *)buf, (uint64_t *)&v186);
    if (SHIBYTE(v194) < 0) {
      operator delete(*(void **)buf);
    }
    *(void *)__CFString buf = &v186;
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    minijson::writer::close(&v163);
  }
  minijson::writer::close(&v167);
  if (SHIBYTE(v159) < 0) {
    operator delete(__p);
  }
  std::string __p = 0;
  long long v158 = 0;
  uint64_t v159 = 0;
  std::vector<AMCP::Wire_Description>::__init_with_size[abi:ne180100]<AMCP::Wire_Description*,AMCP::Wire_Description*>(&__p, a2[3], a2[4], 0xAAAAAAAAAAAAAAABLL * ((a2[4] - a2[3]) >> 6));
  unint64_t v51 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v158 - (unsigned char *)__p) >> 6));
  if (v158 == __p) {
    uint64_t v52 = 0;
  }
  else {
    uint64_t v52 = v51;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *,false>((unint64_t)__p, (unint64_t)v158, v52, 1);
  uint64_t v53 = (char *)&v155;
  std::string::basic_string[abi:ne180100]<0>(&v155, "wires");
  if (v156 < 0) {
    uint64_t v53 = (char *)v155.__vftable;
  }
  minijson::writer::next_field((minijson::writer *)a1);
  minijson::writer::write_field_name((uint64_t **)a1, v53);
  BOOL v55 = *(uint64_t **)(a1 + 8);
  uint64_t v54 = *(void *)(a1 + 16);
  long long v169 = *(_OWORD *)(a1 + 24);
  uint64_t v170 = *(void *)(a1 + 40);
  LOBYTE(v167) = 1;
  HIDWORD(v167) = 0;
  *(void *)&long long v168 = v55;
  *((void *)&v168 + 1) = v54 + 1;
  unint64_t v56 = (char *)__p;
  uint64_t v154 = v158;
  if (__p != v158)
  {
    do
    {
      minijson::writer::next_field((minijson::writer *)&v167);
      BOOL v55 = (uint64_t *)v168;
      long long v165 = v169;
      uint64_t v166 = v170;
      LOBYTE(v163) = 0;
      HIDWORD(v163) = 0;
      long long v164 = v168 + __PAIR128__(1, 0);
      std::string::basic_string[abi:ne180100]<0>(&v186, "Source");
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)&v163, (char *)&v186, (uint64_t)v56);
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v186, "Destination");
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)&v163, (char *)&v186, (uint64_t)(v56 + 40));
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "ChannelMap");
      if (v194 >= 0) {
        unint64_t v57 = (char *)buf;
      }
      else {
        unint64_t v57 = *(char **)buf;
      }
      minijson::writer::next_field((minijson::writer *)&v163);
      minijson::writer::write_field_name(&v163, v57);
      unint64_t v58 = (uint64_t *)v164;
      long long v187 = v165;
      uint64_t v188 = v166;
      v186.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v186.__r_.__value_.__r.__words[0]) = 0;
      *(_OWORD *)&v186.__r_.__value_.__r.__words[1] = v164 + __PAIR128__(1, 0);
      uint64_t v59 = *((void *)v56 + 10);
      uint64_t v60 = *((void *)v56 + 11);
      while (v59 != v60)
      {
        minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>((uint64_t)&v186, 0);
        v59 += 4;
      }
      minijson::writer::close(&v186);
      if (SHIBYTE(v194) < 0) {
        operator delete(*(void **)buf);
      }
      std::string::basic_string[abi:ne180100]<0>(buf, "MonoMixMap");
      if (v194 >= 0) {
        uint64_t v61 = (char *)buf;
      }
      else {
        uint64_t v61 = *(char **)buf;
      }
      minijson::writer::next_field((minijson::writer *)&v163);
      minijson::writer::write_field_name(&v163, v61);
      long long v187 = v165;
      uint64_t v188 = v166;
      v186.__r_.__value_.__s.__data_[0] = 1;
      HIDWORD(v186.__r_.__value_.__r.__words[0]) = 0;
      *(_OWORD *)&v186.__r_.__value_.__r.__words[1] = v164 + __PAIR128__(1, 0);
      uint64_t v62 = *((void *)v56 + 13);
      uint64_t v63 = *((void *)v56 + 14);
      while (v62 != v63)
      {
        minijson::writer::write_helper<unsigned int,minijson::default_value_writer<unsigned int,void>>((uint64_t)&v186, 0);
        v62 += 4;
      }
      minijson::writer::close(&v186);
      if (SHIBYTE(v194) < 0) {
        operator delete(*(void **)buf);
      }
      minijson::writer::write_helper<int,minijson::default_value_writer<int,void>>((uint64_t)&v163, "LatencyAdjustment");
      AMCP::get_enum_string_bimap<AMCP::Wire_Connection_Policy>();
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
      uint64_t v64 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
      int64_t v189 = (char *)&v187 + 8;
      uint64_t v190 = (char *)&v187 + 8;
      uint64_t v65 = v187;
      unint64_t v66 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v66) {
        goto LABEL_249;
      }
      int v67 = *((_DWORD *)v56 + 33);
      uint64_t v68 = (_DWORD *)v187;
      do
      {
        while (*(_DWORD *)(v66 - 32) < v67)
        {
          unint64_t v66 = *(void *)(v66 + 16);
          if (!v66) {
            goto LABEL_130;
          }
        }
        uint64_t v68 = (_DWORD *)(v66 - 32);
        unint64_t v66 = *(void *)(v66 + 8);
      }
      while (v66);
LABEL_130:
      if (v68 == (_DWORD *)v187 || (v67 >= *v68 ? (uint64_t v69 = v68) : (uint64_t v69 = (_DWORD *)v187), (_DWORD *)v187 == v69))
      {
LABEL_249:
        AMCP::Log::Scope_Registry::get(v64);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v129 = **(NSObject ***)buf;
        if (*(void *)v192) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
        }
        if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
        {
          uint64_t v130 = pthread_self();
          mach_port_t v131 = pthread_mach_thread_np(v130);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v131;
          *(_WORD *)uint64_t v192 = 2080;
          *(void *)&v192[2] = "Graph_Description_Internal.h";
          __int16 v193 = 1024;
          int v194 = 42;
          __int16 v195 = 2080;
          *(void *)long long v196 = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1BAA78000, v129, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v177);
        std::logic_error::logic_error(&v178, &v177);
        v178.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v179, &v178);
        uint64_t v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        int v184 = -1;
        v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v180 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
        *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Connection_Policy]";
        v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v198 = 42;
        std::vector<void *>::vector(&v172);
        int v132 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
        std::vector<void *>::resize((char **)&v172, v132);
        long long v175 = v172;
        uint64_t v133 = v173;
        uint64_t v173 = 0;
        uint64_t v174 = &unk_1F148AA90;
        uint64_t v176 = v133;
        long long v172 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((char *)v69 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v69 + 1), *((void *)v69 + 2));
        uint64_t v65 = v187;
      }
      else
      {
        long long v70 = *(_OWORD *)(v69 + 2);
        v171.__r_.__value_.__r.__words[2] = *((void *)v69 + 3);
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v70;
      }
      uint64_t v71 = *(void *)(v65 + 56);
      if ((v71 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v72 = (v71 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v72 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v72);
      operator delete((void *)v187);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ConnectionPolicy", (uint64_t)&v171);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      AMCP::get_enum_string_bimap<AMCP::Wire_Resampler_Policy>();
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
      unint64_t v73 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
      int64_t v189 = (char *)&v187 + 8;
      uint64_t v190 = (char *)&v187 + 8;
      uint64_t v74 = v187;
      unint64_t v75 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v75) {
        goto LABEL_254;
      }
      int v76 = *((_DWORD *)v56 + 34);
      unint64_t v77 = (_DWORD *)v187;
      do
      {
        while (*(_DWORD *)(v75 - 32) < v76)
        {
          unint64_t v75 = *(void *)(v75 + 16);
          if (!v75) {
            goto LABEL_149;
          }
        }
        unint64_t v77 = (_DWORD *)(v75 - 32);
        unint64_t v75 = *(void *)(v75 + 8);
      }
      while (v75);
LABEL_149:
      if (v77 == (_DWORD *)v187 || (v76 >= *v77 ? (unint64_t v78 = v77) : (unint64_t v78 = (_DWORD *)v187), (_DWORD *)v187 == v78))
      {
LABEL_254:
        AMCP::Log::Scope_Registry::get(v73);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v134 = **(NSObject ***)buf;
        if (*(void *)v192) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
        }
        if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR))
        {
          uint64_t v135 = pthread_self();
          mach_port_t v136 = pthread_mach_thread_np(v135);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v136;
          *(_WORD *)uint64_t v192 = 2080;
          *(void *)&v192[2] = "Graph_Description_Internal.h";
          __int16 v193 = 1024;
          int v194 = 42;
          __int16 v195 = 2080;
          *(void *)long long v196 = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1BAA78000, v134, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v177);
        std::logic_error::logic_error(&v178, &v177);
        v178.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v179, &v178);
        uint64_t v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        int v184 = -1;
        v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v180 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
        *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Resampler_Policy]";
        v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v198 = 42;
        std::vector<void *>::vector(&v172);
        int v137 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
        std::vector<void *>::resize((char **)&v172, v137);
        long long v175 = v172;
        uint64_t v138 = v173;
        uint64_t v173 = 0;
        uint64_t v174 = &unk_1F148AA90;
        uint64_t v176 = v138;
        long long v172 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((char *)v78 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v78 + 1), *((void *)v78 + 2));
        uint64_t v74 = v187;
      }
      else
      {
        long long v79 = *(_OWORD *)(v78 + 2);
        v171.__r_.__value_.__r.__words[2] = *((void *)v78 + 3);
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v79;
      }
      uint64_t v80 = *(void *)(v74 + 56);
      if ((v80 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v81 = (v80 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v81 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v81);
      operator delete((void *)v187);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ResamplerPolicy", (uint64_t)&v171);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      AMCP::get_enum_string_bimap<AMCP::Wire_Format_Conversion_Policy>();
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
      long long v82 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
      int64_t v189 = (char *)&v187 + 8;
      uint64_t v190 = (char *)&v187 + 8;
      uint64_t v83 = v187;
      unint64_t v84 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v84) {
        goto LABEL_259;
      }
      int v85 = *((_DWORD *)v56 + 35);
      uint64_t v86 = (_DWORD *)v187;
      do
      {
        while (*(_DWORD *)(v84 - 32) < v85)
        {
          unint64_t v84 = *(void *)(v84 + 16);
          if (!v84) {
            goto LABEL_168;
          }
        }
        uint64_t v86 = (_DWORD *)(v84 - 32);
        unint64_t v84 = *(void *)(v84 + 8);
      }
      while (v84);
LABEL_168:
      if (v86 == (_DWORD *)v187 || (v85 >= *v86 ? (unint64_t v87 = v86) : (unint64_t v87 = (_DWORD *)v187), (_DWORD *)v187 == v87))
      {
LABEL_259:
        AMCP::Log::Scope_Registry::get(v82);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v139 = **(NSObject ***)buf;
        if (*(void *)v192) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
        }
        if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
        {
          v140 = pthread_self();
          mach_port_t v141 = pthread_mach_thread_np(v140);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v141;
          *(_WORD *)uint64_t v192 = 2080;
          *(void *)&v192[2] = "Graph_Description_Internal.h";
          __int16 v193 = 1024;
          int v194 = 42;
          __int16 v195 = 2080;
          *(void *)long long v196 = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1BAA78000, v139, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v177);
        std::logic_error::logic_error(&v178, &v177);
        v178.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v179, &v178);
        uint64_t v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        int v184 = -1;
        v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v180 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
        *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Format_Conversion_Policy]";
        v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v198 = 42;
        std::vector<void *>::vector(&v172);
        int v142 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
        std::vector<void *>::resize((char **)&v172, v142);
        long long v175 = v172;
        uint64_t v143 = v173;
        uint64_t v173 = 0;
        uint64_t v174 = &unk_1F148AA90;
        uint64_t v176 = v143;
        long long v172 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((char *)v87 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v87 + 1), *((void *)v87 + 2));
        uint64_t v83 = v187;
      }
      else
      {
        long long v88 = *(_OWORD *)(v87 + 2);
        v171.__r_.__value_.__r.__words[2] = *((void *)v87 + 3);
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v88;
      }
      uint64_t v89 = *(void *)(v83 + 56);
      if ((v89 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v90 = (v89 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v90 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v90);
      operator delete((void *)v187);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "FormatConversionPolicy", (uint64_t)&v171);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      AMCP::get_enum_string_bimap<AMCP::Wire_Drift_Correction_Policy>();
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
      uint64_t v91 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
      int64_t v189 = (char *)&v187 + 8;
      uint64_t v190 = (char *)&v187 + 8;
      uint64_t v92 = v187;
      unint64_t v93 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v93) {
        goto LABEL_264;
      }
      int v94 = *((_DWORD *)v56 + 36);
      v95 = (_DWORD *)v187;
      do
      {
        while (*(_DWORD *)(v93 - 32) < v94)
        {
          unint64_t v93 = *(void *)(v93 + 16);
          if (!v93) {
            goto LABEL_187;
          }
        }
        v95 = (_DWORD *)(v93 - 32);
        unint64_t v93 = *(void *)(v93 + 8);
      }
      while (v93);
LABEL_187:
      if (v95 == (_DWORD *)v187 || (v94 >= *v95 ? (uint64_t v96 = v95) : (uint64_t v96 = (_DWORD *)v187), (_DWORD *)v187 == v96))
      {
LABEL_264:
        AMCP::Log::Scope_Registry::get(v91);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v144 = **(NSObject ***)buf;
        if (*(void *)v192) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
        }
        if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
        {
          long long v145 = pthread_self();
          mach_port_t v146 = pthread_mach_thread_np(v145);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v146;
          *(_WORD *)uint64_t v192 = 2080;
          *(void *)&v192[2] = "Graph_Description_Internal.h";
          __int16 v193 = 1024;
          int v194 = 42;
          __int16 v195 = 2080;
          *(void *)long long v196 = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1BAA78000, v144, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v177);
        std::logic_error::logic_error(&v178, &v177);
        v178.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v179, &v178);
        uint64_t v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        int v184 = -1;
        v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v180 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
        *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Drift_Correction_Policy]";
        v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v198 = 42;
        std::vector<void *>::vector(&v172);
        int v147 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
        std::vector<void *>::resize((char **)&v172, v147);
        long long v175 = v172;
        uint64_t v148 = v173;
        uint64_t v173 = 0;
        uint64_t v174 = &unk_1F148AA90;
        uint64_t v176 = v148;
        long long v172 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((char *)v96 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v96 + 1), *((void *)v96 + 2));
        uint64_t v92 = v187;
      }
      else
      {
        long long v97 = *(_OWORD *)(v96 + 2);
        v171.__r_.__value_.__r.__words[2] = *((void *)v96 + 3);
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v97;
      }
      uint64_t v98 = *(void *)(v92 + 56);
      if ((v98 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v99 = (v98 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v99 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v99);
      operator delete((void *)v187);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "DriftCorrectionPolicy", (uint64_t)&v171);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      AMCP::get_enum_string_bimap<AMCP::Wire_Latency_Correction_Policy>();
      v186.__r_.__value_.__l.__size_ = (std::string::size_type)&v187 + 8;
      long long v100 = (AMCP::Log::Scope_Registry *)boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v186.__r_.__value_.__r.__words[2]);
      int64_t v189 = (char *)&v187 + 8;
      uint64_t v190 = (char *)&v187 + 8;
      uint64_t v101 = v187;
      unint64_t v102 = *(void *)(v187 + 32) & 0xFFFFFFFFFFFFFFFELL;
      if (!v102) {
        goto LABEL_269;
      }
      int v103 = *((_DWORD *)v56 + 37);
      uint64_t v104 = (_DWORD *)v187;
      do
      {
        while (*(_DWORD *)(v102 - 32) < v103)
        {
          unint64_t v102 = *(void *)(v102 + 16);
          if (!v102) {
            goto LABEL_206;
          }
        }
        uint64_t v104 = (_DWORD *)(v102 - 32);
        unint64_t v102 = *(void *)(v102 + 8);
      }
      while (v102);
LABEL_206:
      if (v104 == (_DWORD *)v187 || (v103 >= *v104 ? (uint64_t v105 = v104) : (uint64_t v105 = (_DWORD *)v187), (_DWORD *)v187 == v105))
      {
LABEL_269:
        AMCP::Log::Scope_Registry::get(v100);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v149 = **(NSObject ***)buf;
        if (*(void *)v192) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v192);
        }
        if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
        {
          uint64_t v150 = pthread_self();
          mach_port_t v151 = pthread_mach_thread_np(v150);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v151;
          *(_WORD *)uint64_t v192 = 2080;
          *(void *)&v192[2] = "Graph_Description_Internal.h";
          __int16 v193 = 1024;
          int v194 = 42;
          __int16 v195 = 2080;
          *(void *)long long v196 = "not (found != map.left.end())";
          _os_log_error_impl(&dword_1BAA78000, v149, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v185);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v177);
        std::logic_error::logic_error(&v178, &v177);
        v178.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v179, &v178);
        uint64_t v181 = 0;
        uint64_t v182 = 0;
        uint64_t v183 = 0;
        int v184 = -1;
        v179.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v180 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
        *(void *)&v196[6] = "std::string AMCP::enum_to_string(const T &) [T = AMCP::Wire_Latency_Correction_Policy]";
        v197 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v198 = 42;
        std::vector<void *>::vector(&v172);
        int v152 = backtrace((void **)v172, (*((void *)&v172 + 1) - (void)v172) >> 3);
        std::vector<void *>::resize((char **)&v172, v152);
        long long v175 = v172;
        uint64_t v153 = v173;
        uint64_t v173 = 0;
        uint64_t v174 = &unk_1F148AA90;
        uint64_t v176 = v153;
        long long v172 = 0uLL;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      if (*((char *)v105 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v171, *((const std::string::value_type **)v105 + 1), *((void *)v105 + 2));
        uint64_t v101 = v187;
      }
      else
      {
        long long v106 = *(_OWORD *)(v105 + 2);
        v171.__r_.__value_.__r.__words[2] = *((void *)v105 + 3);
        *(_OWORD *)&v171.__r_.__value_.__l.__data_ = v106;
      }
      uint64_t v107 = *(void *)(v101 + 56);
      if ((v107 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v108 = (v107 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v108 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&v187 + 8, v108);
      operator delete((void *)v187);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "LatencyCorrectionPolicy", (uint64_t)&v171);
      if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v171.__r_.__value_.__l.__data_);
      }
      AMCP::enum_to_string<AMCP::Resampler_Type>(&v186, (int *)v56 + 38);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ResamplerType", (uint64_t)&v186);
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      AMCP::enum_to_string<AMCP::Resampler_Quality>(&v186, (int *)v56 + 39);
      minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)&v163, "ResamplerQuality", (uint64_t)&v186);
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v186, "MatchedTags");
      AMCP::write_json_array<std::string>((uint64_t)&v163, (char *)&v186, (uint64_t *)v56 + 21);
      if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v186.__r_.__value_.__l.__data_);
      }
      minijson::writer::close(&v163);
      v56 += 192;
    }
    while (v56 != v154);
  }
  minijson::writer::close(&v167);
  if (v156 < 0) {
    operator delete(v155.__vftable);
  }
  v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
  v186.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v186);
}

void sub_1BAF21830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,char a59,uint64_t a60,char *a61,uint64_t a62,uint64_t a63)
{
  a61 = (char *)&a18;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  a61 = &a24;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *,false>(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v217 = a2 - 30;
    unint64_t v8 = (int *)a1;
    while (1)
    {
      while (1)
      {
        a1 = (uint64_t)v8;
        uint64_t v9 = (char *)a2 - (char *)v8;
        unint64_t v10 = 0xEEEEEEEEEEEEEEEFLL * (((char *)a2 - (char *)v8) >> 3);
        if (v5 || !v4)
        {
          switch(v10)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v217, a1))
              {
                std::swap[abi:ne180100]<AMCP::Node_Description>((int *)a1, v217);
              }
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)a1, (int *)(a1 + 120), v217);
              break;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)a1, (int *)(a1 + 120), (int *)(a1 + 240), v217);
              break;
            case 5uLL:
              std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)a1, (int *)(a1 + 120), (int *)(a1 + 240), (int *)(a1 + 360), v217);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v9 <= 2879)
        {
          if (a4)
          {
            if ((int *)a1 != a2)
            {
              uint64_t v66 = a1 + 120;
              if ((int *)(a1 + 120) != a2)
              {
                uint64_t v67 = 0;
                uint64_t v68 = a1;
                do
                {
                  uint64_t v69 = a2;
                  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v66, v68))
                  {
                    uint64_t v70 = 0;
                    LODWORD(v233) = *(_DWORD *)v66;
                    uint64_t v71 = *(void *)(v68 + 152);
                    uint64_t v235 = *(void *)(v68 + 144);
                    uint64_t v72 = *(void *)(v68 + 184);
                    uint64_t v238 = *(void *)(v68 + 176);
                    uint64_t v236 = v71;
                    uint64_t v239 = v72;
                    long long v234 = *(_OWORD *)(v68 + 128);
                    *(void *)(v68 + 128) = 0;
                    *(void *)(v68 + 136) = 0;
                    *(void *)(v68 + 144) = 0;
                    long long __p = *(_OWORD *)(v68 + 160);
                    *(void *)(v68 + 160) = 0;
                    *(void *)(v68 + 168) = 0;
                    *(void *)(v68 + 176) = 0;
                    do
                    {
                      unint64_t v73 = (void ***)&(&v233)[v70];
                      uint64_t v74 = (void *)(v68 + v70 * 8);
                      v73[11] = 0;
                      *(_OWORD *)(v73 + 9) = *(_OWORD *)(v68 + v70 * 8 + 192);
                      v73[11] = *(void ***)(v68 + v70 * 8 + 208);
                      v74[24] = 0;
                      v74[25] = 0;
                      v74[26] = 0;
                      v70 += 3;
                    }
                    while (v70 != 6);
                    uint64_t v218 = v66;
                    uint64_t v219 = v67;
                    unint64_t v75 = (_DWORD *)v68;
                    while (1)
                    {
                      int v76 = v75;
                      unint64_t v77 = v75 + 2;
                      *(_DWORD *)uint64_t v66 = *v75;
                      unint64_t v78 = (void **)(v66 + 8);
                      if (*(char *)(v66 + 31) < 0) {
                        operator delete(*v78);
                      }
                      *(_OWORD *)unint64_t v78 = *(_OWORD *)v77;
                      *(void *)(v66 + 24) = *((void *)v77 + 2);
                      *((unsigned char *)v76 + 31) = 0;
                      *((unsigned char *)v76 + 8) = 0;
                      *(void *)(v66 + 32) = *((void *)v76 + 4);
                      long long v79 = (void **)(v66 + 40);
                      if (*(char *)(v66 + 63) < 0) {
                        operator delete(*v79);
                      }
                      uint64_t v80 = (void **)(v76 + 10);
                      *(_OWORD *)long long v79 = *(_OWORD *)(v76 + 10);
                      *(void *)(v66 + 56) = *((void *)v76 + 7);
                      *((unsigned char *)v76 + 63) = 0;
                      *((unsigned char *)v76 + 40) = 0;
                      *(void *)(v66 + 64) = *((void *)v76 + 8);
                      uint64_t v81 = v67;
                      uint64_t v82 = 2;
                      do
                      {
                        uint64_t v83 = a1 + v81;
                        std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(a1 + v81 + 192));
                        *(_OWORD *)(v83 + 192) = *(_OWORD *)(v83 + 72);
                        *(void *)(v83 + 208) = *(void *)(v83 + 88);
                        *(void *)(v83 + 80) = 0;
                        *(void *)(v83 + 88) = 0;
                        *(void *)(v83 + 72) = 0;
                        v81 += 24;
                        --v82;
                      }
                      while (v82);
                      if (v76 == (_DWORD *)a1) {
                        break;
                      }
                      unint64_t v75 = v76 - 30;
                      v67 -= 120;
                      uint64_t v66 = (uint64_t)v76;
                      if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)(v76 - 30)) & 1) == 0)
                      {
                        uint64_t v84 = (uint64_t)v76;
                        goto LABEL_122;
                      }
                    }
                    uint64_t v84 = a1;
LABEL_122:
                    uint64_t v66 = v218;
                    *(_DWORD *)uint64_t v84 = v233;
                    if (*(char *)(v84 + 31) < 0) {
                      operator delete(*(void **)v77);
                    }
                    long long v85 = v234;
                    *((void *)v77 + 2) = v235;
                    *(_OWORD *)unint64_t v77 = v85;
                    HIBYTE(v235) = 0;
                    LOBYTE(v234) = 0;
                    *(void *)(v84 + 32) = v236;
                    if (*(char *)(v84 + 63) < 0) {
                      operator delete(*v80);
                    }
                    unint64_t v86 = 0;
                    long long v87 = __p;
                    *((void *)v76 + 7) = v238;
                    *(_OWORD *)uint64_t v80 = v87;
                    HIBYTE(v238) = 0;
                    LOBYTE(__p) = 0;
                    *(void *)(v84 + 64) = v239;
                    uint64_t v69 = a2;
                    do
                    {
                      long long v88 = &v76[v86 / 4];
                      uint64_t v89 = (void ***)&(&v233)[v86 / 8];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v76[v86 / 4 + 18]);
                      *(_OWORD *)(v88 + 18) = *(_OWORD *)&v240[v86];
                      *((void *)v88 + 11) = *(void *)&v240[v86 + 16];
                      v89[9] = 0;
                      v89[10] = 0;
                      v89[11] = 0;
                      v86 += 24;
                    }
                    while (v86 != 48);
                    for (uint64_t i = 12; i != 6; i -= 3)
                    {
                      uint64_t v224 = (void ***)&(&v233)[i];
                      std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
                    }
                    uint64_t v67 = v219;
                    if (SHIBYTE(v238) < 0) {
                      operator delete((void *)__p);
                    }
                    if (SHIBYTE(v235) < 0) {
                      operator delete((void *)v234);
                    }
                  }
                  v66 += 120;
                  v68 += 120;
                  v67 += 120;
                }
                while ((int *)v66 != v69);
              }
            }
          }
          else if ((int *)a1 != a2)
          {
            uint64_t v190 = (int *)(a1 + 120);
            if ((int *)(a1 + 120) != a2)
            {
              do
              {
                uint64_t v191 = a2;
                if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v190, a1))
                {
                  uint64_t v192 = 0;
                  LODWORD(v233) = *v190;
                  uint64_t v193 = *(void *)(a1 + 152);
                  uint64_t v235 = *(void *)(a1 + 144);
                  uint64_t v194 = *(void *)(a1 + 184);
                  uint64_t v238 = *(void *)(a1 + 176);
                  uint64_t v236 = v193;
                  uint64_t v239 = v194;
                  long long v234 = *(_OWORD *)(a1 + 128);
                  *(void *)(a1 + 128) = 0;
                  *(void *)(a1 + 136) = 0;
                  *(void *)(a1 + 144) = 0;
                  long long __p = *(_OWORD *)(a1 + 160);
                  *(void *)(a1 + 160) = 0;
                  *(void *)(a1 + 168) = 0;
                  *(void *)(a1 + 176) = 0;
                  do
                  {
                    __int16 v195 = (void ***)&(&v233)[v192];
                    long long v196 = (void *)(a1 + v192 * 8);
                    v195[11] = 0;
                    *(_OWORD *)(v195 + 9) = *(_OWORD *)(a1 + v192 * 8 + 192);
                    v195[11] = *(void ***)(a1 + v192 * 8 + 208);
                    v196[24] = 0;
                    v196[25] = 0;
                    v196[26] = 0;
                    v192 += 3;
                  }
                  while (v192 != 6);
                  v197 = (_DWORD *)a1;
                  int v198 = v190;
                  do
                  {
                    uint64_t v199 = v197;
                    uint64_t v200 = v197 + 2;
                    int *v198 = *v197;
                    uint64_t v201 = (void **)(v198 + 2);
                    if (*((char *)v198 + 31) < 0) {
                      operator delete(*v201);
                    }
                    *(_OWORD *)uint64_t v201 = *(_OWORD *)v200;
                    *((void *)v198 + 3) = *((void *)v200 + 2);
                    *((unsigned char *)v199 + 31) = 0;
                    *((unsigned char *)v199 + 8) = 0;
                    *((void *)v198 + 4) = *((void *)v199 + 4);
                    long long v202 = (void **)(v198 + 10);
                    if (*((char *)v198 + 63) < 0) {
                      operator delete(*v202);
                    }
                    uint64_t v203 = 0;
                    uint64_t v204 = (void **)(v199 + 10);
                    *(_OWORD *)long long v202 = *(_OWORD *)(v199 + 10);
                    *((void *)v198 + 7) = *((void *)v199 + 7);
                    *((unsigned char *)v199 + 63) = 0;
                    *((unsigned char *)v199 + 40) = 0;
                    *((void *)v198 + 8) = *((void *)v199 + 8);
                    do
                    {
                      v205 = &v199[v203];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v199[v203 + 48]);
                      *((_OWORD *)v205 + 12) = *(_OWORD *)(v205 + 18);
                      *((void *)v205 + 26) = *((void *)v205 + 11);
                      *((void *)v205 + 10) = 0;
                      *((void *)v205 + 11) = 0;
                      *((void *)v205 + 9) = 0;
                      v203 += 6;
                    }
                    while (v203 != 12);
                    v197 = v199 - 30;
                    int v198 = v199;
                  }
                  while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)(v199 - 30)) & 1) != 0);
                  *uint64_t v199 = v233;
                  if (*((char *)v199 + 31) < 0) {
                    operator delete(*(void **)v200);
                  }
                  long long v206 = v234;
                  *((void *)v200 + 2) = v235;
                  *(_OWORD *)uint64_t v200 = v206;
                  HIBYTE(v235) = 0;
                  LOBYTE(v234) = 0;
                  *((void *)v199 + 4) = v236;
                  if (*((char *)v199 + 63) < 0) {
                    operator delete(*v204);
                  }
                  unint64_t v207 = 0;
                  long long v208 = __p;
                  *((void *)v199 + 7) = v238;
                  *(_OWORD *)uint64_t v204 = v208;
                  HIBYTE(v238) = 0;
                  LOBYTE(__p) = 0;
                  *((void *)v199 + 8) = v239;
                  do
                  {
                    uint64_t v209 = &v197[v207 / 4];
                    long long v210 = (void ***)&(&v233)[v207 / 8];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v197[v207 / 4 + 48]);
                    *((_OWORD *)v209 + 12) = *(_OWORD *)&v240[v207];
                    *((void *)v209 + 26) = *(void *)&v240[v207 + 16];
                    v210[9] = 0;
                    v210[10] = 0;
                    v210[11] = 0;
                    v207 += 24;
                  }
                  while (v207 != 48);
                  uint64_t v211 = 12;
                  uint64_t v191 = a2;
                  do
                  {
                    uint64_t v224 = (void ***)&(&v233)[v211];
                    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
                    v211 -= 3;
                  }
                  while (v211 != 6);
                  if (SHIBYTE(v238) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v235) < 0) {
                    operator delete((void *)v234);
                  }
                }
                v190 += 30;
                a1 += 120;
              }
              while (v190 != v191);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((int *)a1 != a2)
          {
            int64_t v91 = (v10 - 2) >> 1;
            uint64_t v92 = a1 + 120 * v91;
            int64_t v222 = v91;
            uint64_t v212 = v9;
            do
            {
              int64_t v93 = v91;
              if (v222 >= v91)
              {
                int64_t v220 = v91;
                uint64_t v94 = (2 * v91) | 1;
                v95 = (_DWORD *)(a1 + 120 * v94);
                uint64_t v96 = 2 * v91 + 2;
                if (v96 < (uint64_t)v10
                  && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(a1 + 120 * v94, (uint64_t)(v95 + 30)))
                {
                  v95 += 30;
                  uint64_t v94 = v96;
                }
                int64_t v93 = v220;
                uint64_t v97 = a1 + 120 * v220;
                if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v95, v97) & 1) == 0)
                {
                  uint64_t v98 = 0;
                  LODWORD(v233) = *(_DWORD *)v97;
                  uint64_t v99 = a1 + 120 * v220;
                  long long v100 = *(_OWORD *)(v99 + 8);
                  uint64_t v235 = *(void *)(v99 + 24);
                  long long v234 = v100;
                  *(void *)(v99 + 16) = 0;
                  *(void *)(v99 + 24) = 0;
                  *(void *)(v99 + 8) = 0;
                  uint64_t v236 = *(void *)(v99 + 32);
                  long long v101 = *(_OWORD *)(v99 + 40);
                  uint64_t v238 = *(void *)(v99 + 56);
                  long long __p = v101;
                  *(void *)(v99 + 48) = 0;
                  *(void *)(v99 + 56) = 0;
                  *(void *)(v99 + 40) = 0;
                  uint64_t v239 = *(void *)(v99 + 64);
                  do
                  {
                    unint64_t v102 = (void ***)&(&v233)[v98];
                    int v103 = (void *)(v92 + v98 * 8);
                    v102[10] = 0;
                    v102[11] = 0;
                    *(_OWORD *)(v102 + 9) = *(_OWORD *)(v92 + v98 * 8 + 72);
                    v102[11] = *(void ***)(v92 + v98 * 8 + 88);
                    v103[9] = 0;
                    v103[10] = 0;
                    v103[11] = 0;
                    v98 += 3;
                  }
                  while (v98 != 6);
                  uint64_t v213 = v92;
                  do
                  {
                    uint64_t v104 = v95;
                    uint64_t v105 = v95 + 2;
                    *(_DWORD *)uint64_t v97 = *v95;
                    long long v106 = (void **)(v97 + 8);
                    if (*(char *)(v97 + 31) < 0) {
                      operator delete(*v106);
                    }
                    long long v107 = *(_OWORD *)v105;
                    *(void *)(v97 + 24) = *((void *)v105 + 2);
                    *(_OWORD *)long long v106 = v107;
                    *((unsigned char *)v104 + 31) = 0;
                    *((unsigned char *)v104 + 8) = 0;
                    *(void *)(v97 + 32) = *((void *)v104 + 4);
                    uint64_t v108 = (void **)(v97 + 40);
                    if (*(char *)(v97 + 63) < 0) {
                      operator delete(*v108);
                    }
                    uint64_t v109 = 0;
                    unint64_t v110 = (void **)(v104 + 10);
                    long long v111 = *(_OWORD *)(v104 + 10);
                    *(void *)(v97 + 56) = *((void *)v104 + 7);
                    *(_OWORD *)uint64_t v108 = v111;
                    *((unsigned char *)v104 + 63) = 0;
                    *((unsigned char *)v104 + 40) = 0;
                    *(void *)(v97 + 64) = *((void *)v104 + 8);
                    do
                    {
                      uint64_t v112 = v97 + v109 * 4;
                      uint64_t v113 = &v104[v109];
                      std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v97 + v109 * 4 + 72));
                      *(_OWORD *)(v112 + 72) = *(_OWORD *)&v104[v109 + 18];
                      *(void *)(v112 + 88) = *(void *)&v104[v109 + 22];
                      v113[9] = 0;
                      v113[10] = 0;
                      v113[11] = 0;
                      v109 += 6;
                    }
                    while (v109 != 12);
                    if (v222 < v94) {
                      break;
                    }
                    uint64_t v114 = (2 * v94) | 1;
                    v95 = (_DWORD *)(a1 + 120 * v114);
                    uint64_t v115 = 2 * v94 + 2;
                    if (v115 < (uint64_t)v10
                      && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(a1 + 120 * v114, (uint64_t)(v95 + 30)))
                    {
                      v95 += 30;
                      uint64_t v114 = v115;
                    }
                    uint64_t v97 = (uint64_t)v104;
                    uint64_t v94 = v114;
                  }
                  while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v95, (uint64_t)&v233));
                  _DWORD *v104 = v233;
                  if (*((char *)v104 + 31) < 0) {
                    operator delete(*(void **)v105);
                  }
                  long long v116 = v234;
                  *((void *)v105 + 2) = v235;
                  *(_OWORD *)uint64_t v105 = v116;
                  HIBYTE(v235) = 0;
                  LOBYTE(v234) = 0;
                  *((void *)v104 + 4) = v236;
                  uint64_t v9 = v212;
                  if (*((char *)v104 + 63) < 0) {
                    operator delete(*v110);
                  }
                  unint64_t v117 = 0;
                  long long v118 = __p;
                  *((void *)v104 + 7) = v238;
                  *(_OWORD *)unint64_t v110 = v118;
                  HIBYTE(v238) = 0;
                  LOBYTE(__p) = 0;
                  *((void *)v104 + 8) = v239;
                  do
                  {
                    v119 = &v104[v117 / 4];
                    uint64_t v120 = (void ***)&(&v233)[v117 / 8];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v104[v117 / 4 + 18]);
                    *(_OWORD *)(v119 + 18) = *(_OWORD *)&v240[v117];
                    *((void *)v119 + 11) = *(void *)&v240[v117 + 16];
                    v120[9] = 0;
                    v120[10] = 0;
                    v120[11] = 0;
                    v117 += 24;
                  }
                  while (v117 != 48);
                  for (uint64_t j = 12; j != 6; j -= 3)
                  {
                    uint64_t v224 = (void ***)&(&v233)[j];
                    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
                  }
                  uint64_t v92 = v213;
                  int64_t v93 = v220;
                  if (SHIBYTE(v238) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v235) < 0) {
                    operator delete((void *)v234);
                  }
                }
              }
              int64_t v91 = v93 - 1;
              v92 -= 120;
            }
            while (v93);
            int64_t v122 = v9 / 0x78uLL;
            uint64_t v214 = (long long *)(a1 + 40);
            int64_t v216 = (long long *)(a1 + 8);
            do
            {
              unint64_t v123 = v122 - 2;
              uint64_t v124 = a2;
              if (v122 >= 2)
              {
                uint64_t v223 = v122;
                uint64_t v125 = 0;
                LODWORD(v224) = *(_DWORD *)a1;
                uint64_t v126 = *(void *)(a1 + 24);
                long long v225 = *v216;
                uint64_t v226 = v126;
                *(void *)(a1 + 16) = 0;
                *(void *)(a1 + 24) = 0;
                *(void *)int64_t v216 = 0;
                uint64_t v127 = *(void *)(a1 + 32);
                long long v128 = *v214;
                uint64_t v229 = *(void *)(a1 + 56);
                long long v228 = v128;
                *(void *)(a1 + 48) = 0;
                *(void *)(a1 + 56) = 0;
                *(void *)uint64_t v214 = 0;
                uint64_t v129 = *(void *)(a1 + 64);
                uint64_t v227 = v127;
                uint64_t v230 = v129;
                do
                {
                  uint64_t v130 = (void ***)&(&v224)[v125];
                  mach_port_t v131 = (void *)(a1 + v125 * 8);
                  v130[10] = 0;
                  v130[11] = 0;
                  *(_OWORD *)(v130 + 9) = *(_OWORD *)(a1 + v125 * 8 + 72);
                  v130[11] = *(void ***)(a1 + v125 * 8 + 88);
                  v131[9] = 0;
                  v131[10] = 0;
                  v131[11] = 0;
                  v125 += 3;
                }
                while (v125 != 6);
                uint64_t v132 = 0;
                uint64_t v133 = v123 >> 1;
                uint64_t v134 = a1;
                do
                {
                  uint64_t v135 = v134 + 120 * v132 + 120;
                  uint64_t v136 = 2 * v132;
                  uint64_t v132 = (2 * v132) | 1;
                  uint64_t v137 = v136 + 2;
                  if (v136 + 2 < v223
                    && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v135, v135 + 120))
                  {
                    v135 += 120;
                    uint64_t v132 = v137;
                  }
                  uint64_t v138 = (void **)(v135 + 8);
                  *(_DWORD *)uint64_t v134 = *(_DWORD *)v135;
                  uint64_t v139 = (void **)(v134 + 8);
                  if (*(char *)(v134 + 31) < 0) {
                    operator delete(*v139);
                  }
                  long long v140 = *(_OWORD *)v138;
                  *(void *)(v134 + 24) = *(void *)(v135 + 24);
                  *(_OWORD *)uint64_t v139 = v140;
                  *(unsigned char *)(v135 + 31) = 0;
                  *(unsigned char *)(v135 + 8) = 0;
                  *(void *)(v134 + 32) = *(void *)(v135 + 32);
                  mach_port_t v141 = (void **)(v134 + 40);
                  if (*(char *)(v134 + 63) < 0) {
                    operator delete(*v141);
                  }
                  uint64_t v142 = 0;
                  uint64_t v143 = (void **)(v135 + 40);
                  long long v144 = *(_OWORD *)(v135 + 40);
                  *(void *)(v134 + 56) = *(void *)(v135 + 56);
                  *(_OWORD *)mach_port_t v141 = v144;
                  *(unsigned char *)(v135 + 63) = 0;
                  *(unsigned char *)(v135 + 40) = 0;
                  *(void *)(v134 + 64) = *(void *)(v135 + 64);
                  do
                  {
                    uint64_t v145 = v134 + v142;
                    mach_port_t v146 = (void *)(v135 + v142);
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v134 + v142 + 72));
                    *(_OWORD *)(v145 + 72) = *(_OWORD *)(v135 + v142 + 72);
                    *(void *)(v145 + 88) = *(void *)(v135 + v142 + 88);
                    v146[9] = 0;
                    v146[10] = 0;
                    v146[11] = 0;
                    v142 += 24;
                  }
                  while (v142 != 48);
                  uint64_t v134 = v135;
                }
                while (v132 <= v133);
                uint64_t v124 = a2;
                if ((int *)v135 == a2 - 30)
                {
                  *(_DWORD *)uint64_t v135 = v224;
                  if (*(char *)(v135 + 31) < 0) {
                    operator delete(*v138);
                  }
                  long long v183 = v225;
                  *(void *)(v135 + 24) = v226;
                  *(_OWORD *)uint64_t v138 = v183;
                  HIBYTE(v226) = 0;
                  LOBYTE(v225) = 0;
                  *(void *)(v135 + 32) = v227;
                  if (*(char *)(v135 + 63) < 0) {
                    operator delete(*v143);
                  }
                  unint64_t v184 = 0;
                  long long v185 = v228;
                  *(void *)(v135 + 56) = v229;
                  *(_OWORD *)uint64_t v143 = v185;
                  HIBYTE(v229) = 0;
                  LOBYTE(v228) = 0;
                  *(void *)(v135 + 64) = v230;
                  do
                  {
                    unint64_t v186 = v135 + v184;
                    long long v187 = (void ***)&(&v224)[v184 / 8];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v135 + v184 + 72));
                    *(_OWORD *)(v186 + 72) = *(_OWORD *)&v231[v184];
                    *(void *)(v186 + 88) = *(void *)&v231[v184 + 16];
                    v187[9] = 0;
                    v187[10] = 0;
                    v187[11] = 0;
                    v184 += 24;
                  }
                  while (v184 != 48);
                }
                else
                {
                  *(_DWORD *)uint64_t v135 = *(a2 - 30);
                  if (*(char *)(v135 + 31) < 0) {
                    operator delete(*v138);
                  }
                  int v147 = (void **)(a2 - 28);
                  long long v148 = *((_OWORD *)a2 - 7);
                  *(void *)(v135 + 24) = *((void *)a2 - 12);
                  *(_OWORD *)uint64_t v138 = v148;
                  *((unsigned char *)a2 - 89) = 0;
                  *((unsigned char *)a2 - 112) = 0;
                  *(void *)(v135 + 32) = *((void *)a2 - 11);
                  if (*(char *)(v135 + 63) < 0) {
                    operator delete(*v143);
                  }
                  uint64_t v149 = 0;
                  uint64_t v150 = (void **)(a2 - 20);
                  long long v151 = *((_OWORD *)a2 - 5);
                  *(void *)(v135 + 56) = *((void *)a2 - 8);
                  *(_OWORD *)uint64_t v143 = v151;
                  *((unsigned char *)a2 - 57) = 0;
                  *((unsigned char *)a2 - 80) = 0;
                  *(void *)(v135 + 64) = *((void *)a2 - 7);
                  do
                  {
                    uint64_t v152 = v135 + v149 * 4;
                    uint64_t v153 = &a2[v149];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v135 + v149 * 4 + 72));
                    *(_OWORD *)(v152 + 72) = *(_OWORD *)&a2[v149 - 12];
                    *(void *)(v152 + 88) = *(void *)&a2[v149 - 8];
                    *((void *)v153 - 6) = 0;
                    *((void *)v153 - 5) = 0;
                    *((void *)v153 - 4) = 0;
                    v149 += 6;
                  }
                  while (v149 != 12);
                  *(a2 - 30) = (int)v224;
                  if (*((char *)a2 - 89) < 0) {
                    operator delete(*v147);
                  }
                  long long v154 = v225;
                  *((void *)a2 - 12) = v226;
                  *(_OWORD *)int v147 = v154;
                  HIBYTE(v226) = 0;
                  LOBYTE(v225) = 0;
                  *((void *)a2 - 11) = v227;
                  if (*((char *)a2 - 57) < 0) {
                    operator delete(*v150);
                  }
                  unint64_t v155 = 0;
                  uint64_t v156 = v135 + 120;
                  long long v157 = v228;
                  *((void *)a2 - 8) = v229;
                  *(_OWORD *)uint64_t v150 = v157;
                  HIBYTE(v229) = 0;
                  LOBYTE(v228) = 0;
                  *((void *)a2 - 7) = v230;
                  do
                  {
                    long long v158 = &a2[v155 / 4];
                    uint64_t v159 = (void ***)&(&v224)[v155 / 8];
                    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&a2[v155 / 4 - 12]);
                    *((_OWORD *)v158 - 3) = *(_OWORD *)&v231[v155];
                    *((void *)v158 - 4) = *(void *)&v231[v155 + 16];
                    v159[9] = 0;
                    v159[10] = 0;
                    v159[11] = 0;
                    v155 += 24;
                  }
                  while (v155 != 48);
                  if (v156 - a1 >= 121)
                  {
                    unint64_t v160 = (unint64_t)(-2 - 0x1111111111111111 * ((v156 - a1) >> 3)) >> 1;
                    uint64_t v161 = (_DWORD *)(a1 + 120 * v160);
                    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v161, v135))
                    {
                      uint64_t v162 = 0;
                      LODWORD(v233) = *(_DWORD *)v135;
                      long long v163 = *(_OWORD *)v138;
                      uint64_t v235 = *(void *)(v135 + 24);
                      long long v234 = v163;
                      *(void *)(v135 + 16) = 0;
                      *(void *)(v135 + 24) = 0;
                      *uint64_t v138 = 0;
                      uint64_t v236 = *(void *)(v135 + 32);
                      long long v164 = *(_OWORD *)v143;
                      uint64_t v238 = *(void *)(v135 + 56);
                      long long __p = v164;
                      *(void *)(v135 + 48) = 0;
                      *(void *)(v135 + 56) = 0;
                      *uint64_t v143 = 0;
                      uint64_t v239 = *(void *)(v135 + 64);
                      do
                      {
                        long long v165 = (void ***)&(&v233)[v162];
                        uint64_t v166 = (void *)(v135 + v162 * 8);
                        v165[10] = 0;
                        v165[11] = 0;
                        *(_OWORD *)(v165 + 9) = *(_OWORD *)(v135 + v162 * 8 + 72);
                        v165[11] = *(void ***)(v135 + v162 * 8 + 88);
                        v166[9] = 0;
                        v166[10] = 0;
                        v166[11] = 0;
                        v162 += 3;
                      }
                      while (v162 != 6);
                      do
                      {
                        uint64_t v167 = v161;
                        long long v168 = v161 + 2;
                        *(_DWORD *)uint64_t v135 = *v161;
                        long long v169 = (void **)(v135 + 8);
                        if (*(char *)(v135 + 31) < 0) {
                          operator delete(*v169);
                        }
                        long long v170 = *(_OWORD *)v168;
                        *(void *)(v135 + 24) = *((void *)v168 + 2);
                        *(_OWORD *)long long v169 = v170;
                        *((unsigned char *)v167 + 31) = 0;
                        *((unsigned char *)v167 + 8) = 0;
                        *(void *)(v135 + 32) = *((void *)v167 + 4);
                        std::string v171 = (void **)(v135 + 40);
                        if (*(char *)(v135 + 63) < 0) {
                          operator delete(*v171);
                        }
                        uint64_t v172 = 0;
                        uint64_t v173 = (void **)(v167 + 10);
                        long long v174 = *(_OWORD *)(v167 + 10);
                        *(void *)(v135 + 56) = *((void *)v167 + 7);
                        *(_OWORD *)std::string v171 = v174;
                        *((unsigned char *)v167 + 63) = 0;
                        *((unsigned char *)v167 + 40) = 0;
                        *(void *)(v135 + 64) = *((void *)v167 + 8);
                        do
                        {
                          uint64_t v175 = v135 + v172 * 4;
                          uint64_t v176 = &v167[v172];
                          std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(v135 + v172 * 4 + 72));
                          *(_OWORD *)(v175 + 72) = *(_OWORD *)&v167[v172 + 18];
                          *(void *)(v175 + 88) = *(void *)&v167[v172 + 22];
                          v176[9] = 0;
                          v176[10] = 0;
                          v176[11] = 0;
                          v172 += 6;
                        }
                        while (v172 != 12);
                        if (!v160) {
                          break;
                        }
                        unint64_t v160 = (v160 - 1) >> 1;
                        uint64_t v161 = (_DWORD *)(a1 + 120 * v160);
                        uint64_t v135 = (uint64_t)v167;
                      }
                      while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v161, (uint64_t)&v233) & 1) != 0);
                      *uint64_t v167 = v233;
                      if (*((char *)v167 + 31) < 0) {
                        operator delete(*(void **)v168);
                      }
                      long long v177 = v234;
                      *((void *)v168 + 2) = v235;
                      *(_OWORD *)long long v168 = v177;
                      HIBYTE(v235) = 0;
                      LOBYTE(v234) = 0;
                      *((void *)v167 + 4) = v236;
                      if (*((char *)v167 + 63) < 0) {
                        operator delete(*v173);
                      }
                      unint64_t v178 = 0;
                      long long v179 = __p;
                      *((void *)v167 + 7) = v238;
                      *(_OWORD *)uint64_t v173 = v179;
                      HIBYTE(v238) = 0;
                      LOBYTE(__p) = 0;
                      *((void *)v167 + 8) = v239;
                      do
                      {
                        uint64_t v180 = &v167[v178 / 4];
                        uint64_t v181 = (void ***)&(&v233)[v178 / 8];
                        std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v167[v178 / 4 + 18]);
                        *(_OWORD *)(v180 + 18) = *(_OWORD *)&v240[v178];
                        *((void *)v180 + 11) = *(void *)&v240[v178 + 16];
                        v181[9] = 0;
                        v181[10] = 0;
                        v181[11] = 0;
                        v178 += 24;
                      }
                      while (v178 != 48);
                      uint64_t v182 = 12;
                      uint64_t v124 = a2;
                      do
                      {
                        long long v232 = (void ***)&(&v233)[v182];
                        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v232);
                        v182 -= 3;
                      }
                      while (v182 != 6);
                      if (SHIBYTE(v238) < 0) {
                        operator delete((void *)__p);
                      }
                      if (SHIBYTE(v235) < 0) {
                        operator delete((void *)v234);
                      }
                    }
                  }
                }
                for (uint64_t k = 12; k != 6; k -= 3)
                {
                  long long v233 = (void ***)&(&v224)[k];
                  std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v233);
                }
                if (SHIBYTE(v229) < 0) {
                  operator delete((void *)v228);
                }
                if (SHIBYTE(v226) < 0) {
                  operator delete((void *)v225);
                }
                int64_t v122 = v223;
              }
              a2 = v124 - 30;
            }
            while ((unint64_t)v122-- > 2);
          }
          return;
        }
        int v11 = (int *)(a1 + 120 * (v10 >> 1));
        if ((unint64_t)v9 >= 0x3C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)a1, (int *)(a1 + 120 * (v10 >> 1)), v217);
          uint64_t v12 = 120 * (v10 >> 1);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(a1 + 120), (int *)(v12 + a1 - 120), a2 - 60);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(a1 + 240), (int *)(a1 + 120 + v12), a2 - 90);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(v12 + a1 - 120), v11, (int *)(a1 + 120 + v12));
          std::swap[abi:ne180100]<AMCP::Node_Description>((int *)a1, v11);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)(a1 + 120 * (v10 >> 1)), (int *)a1, v217);
        }
        --a3;
        if ((a4 & 1) != 0
          || (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(a1 - 120, a1) & 1) != 0)
        {
          break;
        }
        uint64_t v41 = 0;
        LODWORD(v233) = *(_DWORD *)a1;
        uint64_t v42 = *(void *)(a1 + 24);
        uint64_t v43 = *(void *)(a1 + 32);
        long long v234 = *(_OWORD *)(a1 + 8);
        uint64_t v235 = v42;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        long long v44 = *(_OWORD *)(a1 + 40);
        uint64_t v45 = *(void *)(a1 + 64);
        uint64_t v238 = *(void *)(a1 + 56);
        uint64_t v46 = (void **)(a1 + 8);
        long long __p = v44;
        *(void *)(a1 + 48) = 0;
        *(void *)(a1 + 56) = 0;
        *(void *)(a1 + 40) = 0;
        uint64_t v236 = v43;
        uint64_t v239 = v45;
        unint64_t v47 = (void **)(a1 + 40);
        do
        {
          uint64_t v48 = (void ***)&(&v233)[v41];
          unint64_t v49 = (void *)(a1 + v41 * 8);
          v48[10] = 0;
          v48[11] = 0;
          *(_OWORD *)(v48 + 9) = *(_OWORD *)(a1 + v41 * 8 + 72);
          v48[11] = *(void ***)(a1 + v41 * 8 + 88);
          v49[9] = 0;
          v49[10] = 0;
          v49[11] = 0;
          v41 += 3;
        }
        while (v41 != 6);
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)v217))
        {
          unint64_t v8 = (int *)a1;
          do
            v8 += 30;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)v8) & 1) == 0);
        }
        else
        {
          unint64_t v50 = a1 + 120;
          do
          {
            unint64_t v8 = (int *)v50;
            if (v50 >= (unint64_t)a2) {
              break;
            }
            int v51 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, v50);
            unint64_t v50 = (unint64_t)(v8 + 30);
          }
          while (!v51);
        }
        uint64_t v52 = a2;
        if (v8 < a2)
        {
          uint64_t v52 = a2;
          do
            v52 -= 30;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)v52) & 1) != 0);
        }
        while (v8 < v52)
        {
          std::swap[abi:ne180100]<AMCP::Node_Description>(v8, v52);
          do
            v8 += 30;
          while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)v8));
          do
            v52 -= 30;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)&v233, (uint64_t)v52) & 1) != 0);
        }
        if (v8 - 30 != (int *)a1)
        {
          *(_DWORD *)a1 = *(v8 - 30);
          if (*(char *)(a1 + 31) < 0) {
            operator delete(*v46);
          }
          long long v53 = *((_OWORD *)v8 - 7);
          *(void *)(a1 + 24) = *((void *)v8 - 12);
          *(_OWORD *)uint64_t v46 = v53;
          *((unsigned char *)v8 - 89) = 0;
          *((unsigned char *)v8 - 112) = 0;
          *(void *)(a1 + 32) = *((void *)v8 - 11);
          if (*(char *)(a1 + 63) < 0) {
            operator delete(*v47);
          }
          uint64_t v54 = 0;
          long long v55 = *((_OWORD *)v8 - 5);
          *(void *)(a1 + 56) = *((void *)v8 - 8);
          *(_OWORD *)unint64_t v47 = v55;
          *((unsigned char *)v8 - 57) = 0;
          *((unsigned char *)v8 - 80) = 0;
          *(void *)(a1 + 64) = *((void *)v8 - 7);
          do
          {
            uint64_t v56 = a1 + v54 * 4;
            unint64_t v57 = &v8[v54];
            std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(a1 + v54 * 4 + 72));
            *(_OWORD *)(v56 + 72) = *(_OWORD *)&v8[v54 - 12];
            *(void *)(v56 + 88) = *(void *)&v8[v54 - 8];
            *((void *)v57 - 6) = 0;
            *((void *)v57 - 5) = 0;
            *((void *)v57 - 4) = 0;
            v54 += 6;
          }
          while (v54 != 12);
        }
        *(v8 - 30) = (int)v233;
        unint64_t v58 = (void **)(v8 - 28);
        if (*((char *)v8 - 89) < 0) {
          operator delete(*v58);
        }
        long long v59 = v234;
        *((void *)v8 - 12) = v235;
        *(_OWORD *)unint64_t v58 = v59;
        HIBYTE(v235) = 0;
        LOBYTE(v234) = 0;
        *((void *)v8 - 11) = v236;
        uint64_t v60 = (void **)(v8 - 20);
        if (*((char *)v8 - 57) < 0) {
          operator delete(*v60);
        }
        unint64_t v61 = 0;
        long long v62 = __p;
        *((void *)v8 - 8) = v238;
        *(_OWORD *)uint64_t v60 = v62;
        HIBYTE(v238) = 0;
        LOBYTE(__p) = 0;
        *((void *)v8 - 7) = v239;
        do
        {
          uint64_t v63 = &v8[v61 / 4];
          uint64_t v64 = (void ***)&(&v233)[v61 / 8];
          std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v8[v61 / 4 - 12]);
          *((_OWORD *)v63 - 3) = *(_OWORD *)&v240[v61];
          *((void *)v63 - 4) = *(void *)&v240[v61 + 16];
          v64[9] = 0;
          v64[10] = 0;
          v64[11] = 0;
          v61 += 24;
        }
        while (v61 != 48);
        for (m = 12; m != 6; BOOL v5 = m == 6)
        {
          uint64_t v224 = (void ***)&(&v233)[m];
          std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
          m -= 3;
          BOOL v4 = m >= 6;
        }
        if (SHIBYTE(v238) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v235) < 0) {
          operator delete((void *)v234);
        }
LABEL_50:
        a4 = 0;
      }
      uint64_t v13 = 0;
      LODWORD(v233) = *(_DWORD *)a1;
      uint64_t v14 = *(void *)(a1 + 24);
      uint64_t v15 = *(void *)(a1 + 32);
      long long v234 = *(_OWORD *)(a1 + 8);
      uint64_t v235 = v14;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = 0;
      long long v16 = *(_OWORD *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 64);
      uint64_t v238 = *(void *)(a1 + 56);
      uint64_t v18 = (void **)(a1 + 8);
      long long __p = v16;
      *(void *)(a1 + 48) = 0;
      *(void *)(a1 + 56) = 0;
      *(void *)(a1 + 40) = 0;
      uint64_t v236 = v15;
      uint64_t v239 = v17;
      uint64_t v19 = (void **)(a1 + 40);
      do
      {
        unint64_t v20 = (void ***)&(&v233)[v13];
        uint64_t v21 = (void *)(a1 + v13 * 8);
        v20[10] = 0;
        v20[11] = 0;
        *(_OWORD *)(v20 + 9) = *(_OWORD *)(a1 + v13 * 8 + 72);
        v20[11] = *(void ***)(a1 + v13 * 8 + 88);
        v21[9] = 0;
        v21[10] = 0;
        v21[11] = 0;
        v13 += 3;
      }
      while (v13 != 6);
      unint64_t v22 = a1;
      do
      {
        unint64_t v23 = v22;
        v22 += 120;
      }
      while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v22, (uint64_t)&v233) & 1) != 0);
      unint64_t v24 = (unint64_t)a2;
      if (v23 == a1)
      {
        unint64_t v24 = (unint64_t)a2;
        do
        {
          if (v22 >= v24) {
            break;
          }
          v24 -= 120;
        }
        while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v24, (uint64_t)&v233) & 1) == 0);
      }
      else
      {
        do
          v24 -= 120;
        while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v24, (uint64_t)&v233));
      }
      unint64_t v8 = (int *)v22;
      if (v22 < v24)
      {
        unint64_t v25 = (int *)v24;
        do
        {
          std::swap[abi:ne180100]<AMCP::Node_Description>(v8, v25);
          do
            v8 += 30;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v8, (uint64_t)&v233) & 1) != 0);
          do
            v25 -= 30;
          while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v25, (uint64_t)&v233));
        }
        while (v8 < v25);
      }
      uint64_t v26 = a3;
      if (v8 - 30 != (int *)a1)
      {
        *(_DWORD *)a1 = *(v8 - 30);
        if (*(char *)(a1 + 31) < 0) {
          operator delete(*v18);
        }
        long long v27 = *((_OWORD *)v8 - 7);
        *(void *)(a1 + 24) = *((void *)v8 - 12);
        *(_OWORD *)uint64_t v18 = v27;
        *((unsigned char *)v8 - 89) = 0;
        *((unsigned char *)v8 - 112) = 0;
        *(void *)(a1 + 32) = *((void *)v8 - 11);
        if (*(char *)(a1 + 63) < 0) {
          operator delete(*v19);
        }
        uint64_t v28 = 0;
        long long v29 = *((_OWORD *)v8 - 5);
        *(void *)(a1 + 56) = *((void *)v8 - 8);
        *(_OWORD *)uint64_t v19 = v29;
        *((unsigned char *)v8 - 57) = 0;
        *((unsigned char *)v8 - 80) = 0;
        *(void *)(a1 + 64) = *((void *)v8 - 7);
        do
        {
          uint64_t v30 = a1 + v28 * 4;
          unint64_t v31 = &v8[v28];
          std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)(a1 + v28 * 4 + 72));
          *(_OWORD *)(v30 + 72) = *(_OWORD *)&v8[v28 - 12];
          *(void *)(v30 + 88) = *(void *)&v8[v28 - 8];
          *((void *)v31 - 6) = 0;
          *((void *)v31 - 5) = 0;
          *((void *)v31 - 4) = 0;
          v28 += 6;
        }
        while (v28 != 12);
      }
      *(v8 - 30) = (int)v233;
      int v32 = (void **)(v8 - 28);
      if (*((char *)v8 - 89) < 0) {
        operator delete(*v32);
      }
      long long v33 = v234;
      *((void *)v8 - 12) = v235;
      *(_OWORD *)int v32 = v33;
      HIBYTE(v235) = 0;
      LOBYTE(v234) = 0;
      *((void *)v8 - 11) = v236;
      unint64_t v34 = (void **)(v8 - 20);
      if (*((char *)v8 - 57) < 0) {
        operator delete(*v34);
      }
      unint64_t v35 = 0;
      long long v36 = __p;
      *((void *)v8 - 8) = v238;
      *(_OWORD *)unint64_t v34 = v36;
      HIBYTE(v238) = 0;
      LOBYTE(__p) = 0;
      *((void *)v8 - 7) = v239;
      do
      {
        uint64_t v37 = &v8[v35 / 4];
        unint64_t v38 = (void ***)&(&v233)[v35 / 8];
        std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v8[v35 / 4 - 12]);
        *((_OWORD *)v37 - 3) = *(_OWORD *)&v240[v35];
        *((void *)v37 - 4) = *(void *)&v240[v35 + 16];
        v38[9] = 0;
        v38[10] = 0;
        v38[11] = 0;
        v35 += 24;
      }
      while (v35 != 48);
      for (uint64_t n = 12; n != 6; n -= 3)
      {
        uint64_t v224 = (void ***)&(&v233)[n];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v224);
      }
      a3 = v26;
      if (SHIBYTE(v238) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v235) < 0) {
        operator delete((void *)v234);
      }
      if (v22 < v24)
      {
LABEL_49:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *,false>(a1, v8 - 30, v26, a4 & 1);
        goto LABEL_50;
      }
      BOOL v40 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>((int *)a1, v8 - 30);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(v8, a2))
      {
        break;
      }
      if (!v40) {
        goto LABEL_49;
      }
    }
    a2 = v8 - 30;
    if (!v40) {
      continue;
    }
    break;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *,false>(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v295 = (long long *)(a2 - 192);
    v287 = (long long *)(a2 - 576);
    uint64_t v289 = (long long *)(a2 - 384);
    unint64_t v9 = a1;
    unint64_t v303 = a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = v9;
        uint64_t v11 = a2 - v9;
        unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 6);
        if (v5 || !v4)
        {
          switch(v12)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v295, v9))
              {
                std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v9, v295);
              }
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v9, (long long *)(v9 + 192), v295);
              break;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v9, (long long *)(v9 + 192), (long long *)(v9 + 384), v295);
              break;
            case 5uLL:
              std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v9, (long long *)(v9 + 192), (long long *)(v9 + 384), (long long *)(v9 + 576), v295);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        uint64_t v305 = v9;
        if (v11 <= 4607)
        {
          if (a4)
          {
            if (v9 != a2)
            {
              uint64_t v82 = v9 + 192;
              if (v9 + 192 != a2)
              {
                uint64_t v83 = 0;
                uint64_t v84 = v9;
                do
                {
                  uint64_t v85 = v82;
                  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v82, v84))
                  {
                    long long v86 = *(_OWORD *)v85;
                    uint64_t v325 = *(void *)(v85 + 16);
                    *(_OWORD *)v324 = v86;
                    *(void *)(v85 + 8) = 0;
                    *(void *)(v85 + 16) = 0;
                    *(void *)uint64_t v85 = 0;
                    uint64_t v326 = *(void *)(v84 + 216);
                    int v327 = *(_DWORD *)(v84 + 224);
                    uint64_t v87 = *(void *)(v84 + 256);
                    uint64_t v329 = *(void *)(v84 + 248);
                    long long v328 = *(_OWORD *)(v84 + 232);
                    *(void *)(v84 + 232) = 0;
                    *(void *)(v84 + 240) = 0;
                    *(void *)(v84 + 248) = 0;
                    uint64_t v330 = v87;
                    int v331 = *(_DWORD *)(v84 + 264);
                    *(_OWORD *)uint64_t v332 = *(_OWORD *)(v84 + 272);
                    uint64_t v333 = *(void *)(v84 + 288);
                    *(void *)(v84 + 280) = 0;
                    *(void *)(v84 + 288) = 0;
                    *(void *)(v84 + 272) = 0;
                    long long __p = *(_OWORD *)(v84 + 296);
                    uint64_t v335 = *(void *)(v84 + 312);
                    *(void *)(v84 + 296) = 0;
                    *(void *)(v84 + 304) = 0;
                    *(void *)(v84 + 312) = 0;
                    long long v88 = *(_OWORD *)(v84 + 336);
                    long long v336 = *(_OWORD *)(v84 + 320);
                    long long v337 = v88;
                    char v338 = *(unsigned char *)(v84 + 352);
                    long long v339 = *(_OWORD *)(v84 + 360);
                    uint64_t v340 = *(void *)(v84 + 376);
                    *(void *)(v84 + 360) = 0;
                    *(void *)(v84 + 368) = 0;
                    uint64_t v89 = v83;
                    *(void *)(v84 + 376) = 0;
                    while (1)
                    {
                      uint64_t v90 = v89;
                      uint64_t v91 = v10 + v89;
                      uint64_t v92 = (void **)(v91 + 192);
                      if (*(char *)(v91 + 215) < 0) {
                        operator delete(*v92);
                      }
                      *(_OWORD *)uint64_t v92 = *(_OWORD *)v91;
                      uint64_t v93 = *(void *)(v91 + 24);
                      *(void *)(v91 + 208) = *(void *)(v91 + 16);
                      *(unsigned char *)(v91 + 23) = 0;
                      *(unsigned char *)uint64_t v91 = 0;
                      *(void *)(v91 + 216) = v93;
                      *(_DWORD *)(v91 + 224) = *(_DWORD *)(v91 + 32);
                      uint64_t v94 = v91 + 232;
                      if (*(char *)(v91 + 255) < 0) {
                        operator delete(*(void **)v94);
                      }
                      uint64_t v95 = v10 + v90;
                      *(_OWORD *)uint64_t v94 = *(_OWORD *)(v10 + v90 + 40);
                      uint64_t v96 = *(void *)(v10 + v90 + 64);
                      *(void *)(v94 + 16) = *(void *)(v10 + v90 + 56);
                      *(unsigned char *)(v95 + 63) = 0;
                      *(unsigned char *)(v95 + 40) = 0;
                      *(void *)(v95 + 256) = v96;
                      *(_DWORD *)(v95 + 264) = *(_DWORD *)(v10 + v90 + 72);
                      uint64_t v97 = *(void **)(v10 + v90 + 272);
                      if (v97)
                      {
                        *(void *)(v95 + 280) = v97;
                        operator delete(v97);
                        *(void *)(v95 + 288) = 0;
                      }
                      *(_OWORD *)(v95 + 272) = *(_OWORD *)(v95 + 80);
                      *(void *)(v95 + 288) = *(void *)(v95 + 96);
                      *(void *)(v95 + 80) = 0;
                      *(void *)(v95 + 88) = 0;
                      *(void *)(v95 + 96) = 0;
                      uint64_t v98 = *(void **)(v95 + 296);
                      if (v98)
                      {
                        *(void *)(v10 + v90 + 304) = v98;
                        operator delete(v98);
                        *(void *)(v10 + v90 + 312) = 0;
                      }
                      uint64_t v99 = (void *)(v95 + 104);
                      *(_OWORD *)(v95 + 296) = *(_OWORD *)(v95 + 104);
                      uint64_t v100 = v10 + v90;
                      *(void *)(v100 + 312) = *(void *)(v10 + v90 + 120);
                      void *v99 = 0;
                      v99[1] = 0;
                      v99[2] = 0;
                      long long v101 = *(_OWORD *)(v10 + v90 + 144);
                      *(_OWORD *)(v100 + 320) = *(_OWORD *)(v10 + v90 + 128);
                      *(_OWORD *)(v100 + 336) = v101;
                      *(unsigned char *)(v100 + 352) = *(unsigned char *)(v10 + v90 + 160);
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + v90 + 360));
                      *(_OWORD *)(v10 + v90 + 360) = *(_OWORD *)(v10 + v90 + 168);
                      *(void *)(v100 + 376) = *(void *)(v100 + 184);
                      *(void *)(v100 + 176) = 0;
                      *(void *)(v100 + 184) = 0;
                      *(void *)(v100 + 168) = 0;
                      if (!v90) {
                        break;
                      }
                      uint64_t v89 = v90 - 192;
                      if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, v90 - 192 + v10) & 1) == 0)
                      {
                        uint64_t v102 = v10 + v90;
                        int v103 = (std::vector<std::string> *)(v10 + v90);
                        uint64_t v104 = v10 + v90 + 24;
                        uint64_t v105 = v10 + v90 + 40;
                        uint64_t v106 = v10 + v90 + 64;
                        uint64_t v107 = v10 + v90 + 80;
                        p_end = &v103[4].__end_;
                        uint64_t v109 = &v103[5].__end_;
                        unint64_t v110 = v103 + 7;
                        goto LABEL_133;
                      }
                    }
                    uint64_t v104 = v100 + 24;
                    uint64_t v105 = v100 + 40;
                    uint64_t v106 = v100 + 64;
                    uint64_t v111 = v10;
                    uint64_t v107 = v100 + 80;
                    p_end = (std::vector<std::string>::pointer *)(v100 + 104);
                    uint64_t v109 = (std::vector<std::string>::pointer *)(v100 + 128);
                    unint64_t v110 = (std::vector<std::string> *)(v100 + 168);
                    uint64_t v102 = v111;
LABEL_133:
                    if (*(char *)(v102 + 23) < 0) {
                      operator delete(*(void **)v102);
                    }
                    long long v112 = *(_OWORD *)v324;
                    *(void *)(v102 + 16) = v325;
                    *(_OWORD *)uint64_t v102 = v112;
                    HIBYTE(v325) = 0;
                    LOBYTE(v324[0]) = 0;
                    uint64_t v113 = v326;
                    *(_DWORD *)(v104 + 8) = v327;
                    *(void *)uint64_t v104 = v113;
                    if (*(char *)(v102 + 63) < 0) {
                      operator delete(*(void **)v105);
                    }
                    long long v114 = v328;
                    *(void *)(v105 + 16) = v329;
                    *(_OWORD *)uint64_t v105 = v114;
                    HIBYTE(v329) = 0;
                    LOBYTE(v328) = 0;
                    int v115 = v331;
                    *(void *)uint64_t v106 = v330;
                    *(_DWORD *)(v106 + 8) = v115;
                    long long v116 = *(void **)v107;
                    if (*(void *)v107)
                    {
                      *(void *)(v102 + 88) = v116;
                      operator delete(v116);
                      *(void *)uint64_t v107 = 0;
                      *(void *)(v107 + 8) = 0;
                      *(void *)(v107 + 16) = 0;
                    }
                    *(void **)uint64_t v107 = v332[0];
                    *(void **)(v102 + 88) = v332[1];
                    *(void *)(v102 + 96) = v333;
                    v332[0] = 0;
                    v332[1] = 0;
                    uint64_t v333 = 0;
                    std::vector<std::string>::pointer v117 = *p_end;
                    if (*p_end)
                    {
                      *(void *)(v102 + 112) = v117;
                      operator delete(v117);
                      std::vector<std::string>::pointer *p_end = 0;
                      p_end[1] = 0;
                      p_end[2] = 0;
                    }
                    std::vector<std::string>::pointer *p_end = (std::vector<std::string>::pointer)__p;
                    *(void *)(v102 + 112) = *((void *)&__p + 1);
                    *(void *)(v102 + 120) = v335;
                    long long __p = 0uLL;
                    uint64_t v335 = 0;
                    long long v118 = v336;
                    long long v119 = v337;
                    *((unsigned char *)v109 + 32) = v338;
                    *(_OWORD *)uint64_t v109 = v118;
                    *((_OWORD *)v109 + 1) = v119;
                    std::vector<std::string>::__vdeallocate(v110);
                    v110->__begin_ = (std::vector<std::string>::pointer)v339;
                    *(void *)(v102 + 176) = *((void *)&v339 + 1);
                    *(void *)(v102 + 184) = v340;
                    long long v339 = 0uLL;
                    uint64_t v340 = 0;
                    v306[0] = &v339;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
                    uint64_t v10 = v305;
                    if ((void)__p)
                    {
                      *((void *)&__p + 1) = __p;
                      operator delete((void *)__p);
                    }
                    if (v332[0])
                    {
                      v332[1] = v332[0];
                      operator delete(v332[0]);
                    }
                    if (SHIBYTE(v329) < 0) {
                      operator delete((void *)v328);
                    }
                    if (SHIBYTE(v325) < 0) {
                      operator delete(v324[0]);
                    }
                  }
                  uint64_t v82 = v85 + 192;
                  v83 += 192;
                  uint64_t v84 = v85;
                }
                while (v85 + 192 != v303);
              }
            }
          }
          else if (v9 != a2)
          {
            uint64_t v252 = v9 + 192;
            if (v9 + 192 != a2)
            {
              unint64_t v253 = v9 + 96;
              do
              {
                uint64_t v254 = v252;
                if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v252, v10))
                {
                  long long v255 = *(_OWORD *)v254;
                  uint64_t v325 = *(void *)(v254 + 16);
                  *(_OWORD *)v324 = v255;
                  *(void *)(v254 + 8) = 0;
                  *(void *)(v254 + 16) = 0;
                  *(void *)uint64_t v254 = 0;
                  uint64_t v326 = *(void *)(v10 + 216);
                  int v327 = *(_DWORD *)(v10 + 224);
                  uint64_t v256 = *(void *)(v10 + 256);
                  uint64_t v329 = *(void *)(v10 + 248);
                  long long v328 = *(_OWORD *)(v10 + 232);
                  *(void *)(v10 + 232) = 0;
                  *(void *)(v10 + 240) = 0;
                  *(void *)(v10 + 248) = 0;
                  uint64_t v330 = v256;
                  int v331 = *(_DWORD *)(v10 + 264);
                  *(_OWORD *)uint64_t v332 = *(_OWORD *)(v10 + 272);
                  uint64_t v333 = *(void *)(v10 + 288);
                  *(void *)(v10 + 280) = 0;
                  *(void *)(v10 + 288) = 0;
                  *(void *)(v10 + 272) = 0;
                  long long __p = *(_OWORD *)(v10 + 296);
                  uint64_t v335 = *(void *)(v10 + 312);
                  *(void *)(v10 + 296) = 0;
                  *(void *)(v10 + 304) = 0;
                  *(void *)(v10 + 312) = 0;
                  long long v257 = *(_OWORD *)(v10 + 336);
                  long long v336 = *(_OWORD *)(v10 + 320);
                  long long v337 = v257;
                  char v338 = *(unsigned char *)(v10 + 352);
                  long long v339 = *(_OWORD *)(v10 + 360);
                  uint64_t v340 = *(void *)(v10 + 376);
                  *(void *)(v10 + 360) = 0;
                  *(void *)(v10 + 368) = 0;
                  unint64_t v258 = v253;
                  *(void *)(v10 + 376) = 0;
                  do
                  {
                    unint64_t v259 = v258;
                    unint64_t v260 = v258 + 96;
                    if (*(char *)(v258 + 119) < 0) {
                      operator delete(*(void **)v260);
                    }
                    *(_OWORD *)unint64_t v260 = *(_OWORD *)(v259 - 96);
                    *(void *)(v260 + 16) = *(void *)(v259 - 80);
                    *(unsigned char *)(v259 - 73) = 0;
                    *(unsigned char *)(v259 - 96) = 0;
                    *(void *)(v259 + 120) = *(void *)(v259 - 72);
                    *(_DWORD *)(v259 + 128) = *(_DWORD *)(v259 - 64);
                    unint64_t v261 = (void **)(v259 + 136);
                    if (*(char *)(v259 + 159) < 0) {
                      operator delete(*v261);
                    }
                    *(_OWORD *)unint64_t v261 = *(_OWORD *)(v259 - 56);
                    uint64_t v262 = *(void *)(v259 - 32);
                    *(void *)(v259 + 152) = *(void *)(v259 - 40);
                    *(unsigned char *)(v259 - 33) = 0;
                    *(unsigned char *)(v259 - 56) = 0;
                    *(void *)(v259 + 160) = v262;
                    *(_DWORD *)(v259 + 168) = *(_DWORD *)(v259 - 24);
                    long long v263 = *(void **)(v259 + 176);
                    if (v263)
                    {
                      *(void *)(v259 + 184) = v263;
                      operator delete(v263);
                      *(void *)(v259 + 192) = 0;
                    }
                    uint64_t v264 = (void *)(v259 - 16);
                    *(_OWORD *)(v259 + 176) = *(_OWORD *)(v259 - 16);
                    *(void *)(v259 + 192) = *(void *)v259;
                    v264[1] = 0;
                    *(void *)unint64_t v259 = 0;
                    *uint64_t v264 = 0;
                    v265 = *(void **)(v259 + 200);
                    if (v265)
                    {
                      *(void *)(v259 + 208) = v265;
                      operator delete(v265);
                      *(void *)(v259 + 216) = 0;
                    }
                    uint64_t v266 = (void **)(v259 + 8);
                    *(_OWORD *)(v259 + 200) = *(_OWORD *)(v259 + 8);
                    *(void *)(v259 + 216) = *(void *)(v259 + 24);
                    *(void *)(v259 + 16) = 0;
                    *(void *)(v259 + 24) = 0;
                    *(void *)(v259 + 8) = 0;
                    long long v267 = *(_OWORD *)(v259 + 48);
                    *(_OWORD *)(v259 + 224) = *(_OWORD *)(v259 + 32);
                    *(_OWORD *)(v259 + 240) = v267;
                    *(unsigned char *)(v259 + 256) = *(unsigned char *)(v259 + 64);
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v259 + 264));
                    long long v268 = (std::vector<std::string> *)(v259 + 72);
                    *(_OWORD *)(v259 + 264) = *(_OWORD *)(v259 + 72);
                    *(void *)(v259 + 280) = *(void *)(v259 + 88);
                    *(void *)(v259 + 72) = 0;
                    *(void *)(v259 + 80) = 0;
                    *(void *)(v259 + 88) = 0;
                    char v269 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, v259 - 288);
                    unint64_t v258 = v259 - 192;
                  }
                  while ((v269 & 1) != 0);
                  uint64_t v270 = (void **)(v259 - 96);
                  if (*(char *)(v259 - 73) < 0) {
                    operator delete(*v270);
                  }
                  unint64_t v271 = v259 - 72;
                  uint64_t v272 = (void **)(v259 - 56);
                  long long v273 = *(_OWORD *)v324;
                  *(void *)(v259 - 80) = v325;
                  *(_OWORD *)uint64_t v270 = v273;
                  HIBYTE(v325) = 0;
                  LOBYTE(v324[0]) = 0;
                  int v274 = v327;
                  *(void *)unint64_t v271 = v326;
                  *(_DWORD *)(v271 + 8) = v274;
                  if (*(char *)(v259 - 33) < 0) {
                    operator delete(*v272);
                  }
                  unint64_t v275 = v259 - 32;
                  long long v276 = (void *)(v259 - 16);
                  long long v277 = v328;
                  *(void *)(v259 - 40) = v329;
                  *(_OWORD *)uint64_t v272 = v277;
                  HIBYTE(v329) = 0;
                  LOBYTE(v328) = 0;
                  int v278 = v331;
                  *(void *)unint64_t v275 = v330;
                  *(_DWORD *)(v275 + 8) = v278;
                  uint64_t v279 = *(void **)(v259 - 16);
                  if (v279)
                  {
                    *(void *)(v259 - 8) = v279;
                    operator delete(v279);
                    *long long v276 = 0;
                    *(void *)(v259 - 8) = 0;
                    *(void *)unint64_t v259 = 0;
                  }
                  *(_OWORD *)long long v276 = *(_OWORD *)v332;
                  *(void *)unint64_t v259 = v333;
                  v332[0] = 0;
                  v332[1] = 0;
                  uint64_t v333 = 0;
                  v280 = *v266;
                  if (*v266)
                  {
                    *(void *)(v259 + 16) = v280;
                    operator delete(v280);
                    *uint64_t v266 = 0;
                    *(void *)(v259 + 16) = 0;
                    *(void *)(v259 + 24) = 0;
                  }
                  *(_OWORD *)uint64_t v266 = __p;
                  *(void *)(v259 + 24) = v335;
                  long long __p = 0uLL;
                  uint64_t v335 = 0;
                  long long v281 = v336;
                  long long v282 = v337;
                  *(unsigned char *)(v259 + 64) = v338;
                  *(_OWORD *)(v259 + 32) = v281;
                  *(_OWORD *)(v259 + 48) = v282;
                  std::vector<std::string>::__vdeallocate(v268);
                  *(_OWORD *)&v268->__begin_ = v339;
                  *(void *)(v259 + 88) = v340;
                  long long v339 = 0uLL;
                  uint64_t v340 = 0;
                  v306[0] = &v339;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
                  if ((void)__p)
                  {
                    *((void *)&__p + 1) = __p;
                    operator delete((void *)__p);
                  }
                  if (v332[0])
                  {
                    v332[1] = v332[0];
                    operator delete(v332[0]);
                  }
                  if (SHIBYTE(v329) < 0) {
                    operator delete((void *)v328);
                  }
                  if (SHIBYTE(v325) < 0) {
                    operator delete(v324[0]);
                  }
                }
                uint64_t v252 = v254 + 192;
                v253 += 192;
                uint64_t v10 = v254;
              }
              while (v254 + 192 != v303);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            int64_t v302 = (v12 - 2) >> 1;
            int64_t v120 = v302;
            uint64_t v286 = a2 - v9;
            int64_t v301 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v9) >> 6);
            do
            {
              int64_t v121 = v120;
              if (v11 >= 384 && v302 >= v120)
              {
                uint64_t v122 = (2 * v120) | 1;
                uint64_t v123 = v10 + 192 * v122;
                if (2 * v120 + 2 < (uint64_t)v12
                  && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v10 + 192 * v122, v123 + 192))
                {
                  v123 += 192;
                  uint64_t v122 = 2 * v121 + 2;
                }
                uint64_t v124 = v10 + 192 * v121;
                if ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v123, v124) & 1) == 0)
                {
                  long long v125 = *(_OWORD *)v124;
                  uint64_t v325 = *(void *)(v124 + 16);
                  *(_OWORD *)v324 = v125;
                  *(void *)(v124 + 8) = 0;
                  *(void *)(v124 + 16) = 0;
                  *(void *)uint64_t v124 = 0;
                  uint64_t v126 = *(void *)(v124 + 24);
                  int v327 = *(_DWORD *)(v124 + 32);
                  uint64_t v326 = v126;
                  uint64_t v127 = v10 + 192 * v121;
                  long long v128 = *(_OWORD *)(v127 + 40);
                  uint64_t v329 = *(void *)(v127 + 56);
                  long long v328 = v128;
                  *(void *)(v127 + 48) = 0;
                  *(void *)(v127 + 56) = 0;
                  *(void *)(v127 + 40) = 0;
                  uint64_t v129 = *(void *)(v127 + 64);
                  int v331 = *(_DWORD *)(v127 + 72);
                  uint64_t v330 = v129;
                  *(_OWORD *)uint64_t v332 = *(_OWORD *)(v127 + 80);
                  uint64_t v333 = *(void *)(v127 + 96);
                  *(void *)(v127 + 80) = 0;
                  *(void *)(v127 + 88) = 0;
                  *(void *)(v127 + 96) = 0;
                  long long __p = *(_OWORD *)(v127 + 104);
                  uint64_t v335 = *(void *)(v127 + 120);
                  *(void *)(v127 + 104) = 0;
                  *(void *)(v127 + 112) = 0;
                  *(void *)(v127 + 120) = 0;
                  long long v130 = *(_OWORD *)(v127 + 128);
                  long long v131 = *(_OWORD *)(v127 + 144);
                  char v338 = *(unsigned char *)(v127 + 160);
                  long long v336 = v130;
                  long long v337 = v131;
                  long long v339 = *(_OWORD *)(v127 + 168);
                  uint64_t v340 = *(void *)(v127 + 184);
                  *(void *)(v127 + 168) = 0;
                  *(void *)(v127 + 176) = 0;
                  *(void *)(v127 + 184) = 0;
                  do
                  {
                    uint64_t v132 = v123;
                    if (*(char *)(v124 + 23) < 0) {
                      operator delete(*(void **)v124);
                    }
                    long long v133 = *(_OWORD *)v123;
                    *(void *)(v124 + 16) = *(void *)(v123 + 16);
                    *(_OWORD *)uint64_t v124 = v133;
                    *(unsigned char *)(v123 + 23) = 0;
                    uint64_t v134 = *(void *)(v123 + 24);
                    *(unsigned char *)uint64_t v123 = 0;
                    int v135 = *(_DWORD *)(v123 + 32);
                    *(void *)(v124 + 24) = v134;
                    *(_DWORD *)(v124 + 32) = v135;
                    uint64_t v136 = (void **)(v124 + 40);
                    if (*(char *)(v124 + 63) < 0) {
                      operator delete(*v136);
                    }
                    long long v137 = *(_OWORD *)(v123 + 40);
                    *(void *)(v124 + 56) = *(void *)(v123 + 56);
                    *(_OWORD *)uint64_t v136 = v137;
                    uint64_t v139 = (void *)(v123 + 64);
                    uint64_t v138 = *(void *)(v123 + 64);
                    *(unsigned char *)(v123 + 63) = 0;
                    *(unsigned char *)(v123 + 40) = 0;
                    int v140 = *(_DWORD *)(v123 + 72);
                    mach_port_t v141 = *(void **)(v124 + 80);
                    *(void *)(v124 + 64) = v138;
                    *(_DWORD *)(v124 + 72) = v140;
                    if (v141)
                    {
                      *(void *)(v124 + 88) = v141;
                      operator delete(v141);
                      *(void *)(v124 + 80) = 0;
                      *(void *)(v124 + 88) = 0;
                      *(void *)(v124 + 96) = 0;
                    }
                    uint64_t v142 = (void **)(v123 + 80);
                    *(_OWORD *)(v124 + 80) = *(_OWORD *)(v123 + 80);
                    *(void *)(v124 + 96) = *(void *)(v123 + 96);
                    *(void *)(v123 + 80) = 0;
                    *(void *)(v123 + 88) = 0;
                    *(void *)(v123 + 96) = 0;
                    uint64_t v143 = *(void **)(v124 + 104);
                    if (v143)
                    {
                      *(void *)(v124 + 112) = v143;
                      operator delete(v143);
                      *(void *)(v124 + 104) = 0;
                      *(void *)(v124 + 112) = 0;
                      *(void *)(v124 + 120) = 0;
                    }
                    *(_OWORD *)(v124 + 104) = *(_OWORD *)(v123 + 104);
                    *(void *)(v124 + 120) = *(void *)(v123 + 120);
                    *(void *)(v123 + 104) = 0;
                    *(void *)(v123 + 112) = 0;
                    *(void *)(v123 + 120) = 0;
                    long long v144 = *(_OWORD *)(v123 + 128);
                    long long v145 = *(_OWORD *)(v123 + 144);
                    *(unsigned char *)(v124 + 160) = *(unsigned char *)(v123 + 160);
                    *(_OWORD *)(v124 + 128) = v144;
                    *(_OWORD *)(v124 + 144) = v145;
                    std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v124 + 168));
                    *(_OWORD *)(v124 + 168) = *(_OWORD *)(v123 + 168);
                    *(void *)(v124 + 184) = *(void *)(v123 + 184);
                    *(void *)(v123 + 168) = 0;
                    *(void *)(v123 + 176) = 0;
                    *(void *)(v123 + 184) = 0;
                    if (v302 < v122) {
                      break;
                    }
                    uint64_t v146 = (2 * v122) | 1;
                    uint64_t v123 = v305 + 192 * v146;
                    uint64_t v147 = 2 * v122 + 2;
                    if (v147 < v301
                      && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v305 + 192 * v146, v123 + 192))
                    {
                      v123 += 192;
                      uint64_t v146 = v147;
                    }
                    uint64_t v124 = v132;
                    uint64_t v122 = v146;
                  }
                  while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v123, (uint64_t)v324));
                  if (*(char *)(v132 + 23) < 0) {
                    operator delete(*(void **)v132);
                  }
                  long long v148 = (void **)(v132 + 40);
                  long long v149 = *(_OWORD *)v324;
                  *(void *)(v132 + 16) = v325;
                  *(_OWORD *)uint64_t v132 = v149;
                  HIBYTE(v325) = 0;
                  LOBYTE(v324[0]) = 0;
                  int v150 = v327;
                  *(void *)(v132 + 24) = v326;
                  *(_DWORD *)(v132 + 32) = v150;
                  if (*(char *)(v132 + 63) < 0) {
                    operator delete(*v148);
                  }
                  long long v151 = v328;
                  *(void *)(v132 + 56) = v329;
                  *(_OWORD *)long long v148 = v151;
                  HIBYTE(v329) = 0;
                  LOBYTE(v328) = 0;
                  int v152 = v331;
                  *uint64_t v139 = v330;
                  *(_DWORD *)(v132 + 72) = v152;
                  uint64_t v153 = *v142;
                  uint64_t v10 = v305;
                  if (*v142)
                  {
                    *(void *)(v132 + 88) = v153;
                    operator delete(v153);
                    *uint64_t v142 = 0;
                    *(void *)(v132 + 88) = 0;
                    *(void *)(v132 + 96) = 0;
                  }
                  *(_OWORD *)(v132 + 80) = *(_OWORD *)v332;
                  *(void *)(v132 + 96) = v333;
                  v332[0] = 0;
                  v332[1] = 0;
                  uint64_t v333 = 0;
                  long long v154 = *(void **)(v132 + 104);
                  if (v154)
                  {
                    *(void *)(v132 + 112) = v154;
                    operator delete(v154);
                    *(void *)(v132 + 104) = 0;
                    *(void *)(v132 + 112) = 0;
                    *(void *)(v132 + 120) = 0;
                  }
                  *(_OWORD *)(v132 + 104) = __p;
                  *(void *)(v132 + 120) = v335;
                  long long __p = 0uLL;
                  uint64_t v335 = 0;
                  char v155 = v338;
                  long long v156 = v337;
                  *(_OWORD *)(v132 + 128) = v336;
                  *(_OWORD *)(v132 + 144) = v156;
                  *(unsigned char *)(v132 + 160) = v155;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v132 + 168));
                  *(_OWORD *)(v132 + 168) = v339;
                  *(void *)(v132 + 184) = v340;
                  long long v339 = 0uLL;
                  uint64_t v340 = 0;
                  v306[0] = &v339;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
                  unint64_t v12 = v301;
                  if ((void)__p)
                  {
                    *((void *)&__p + 1) = __p;
                    operator delete((void *)__p);
                  }
                  a2 = v303;
                  uint64_t v11 = v286;
                  if (v332[0])
                  {
                    v332[1] = v332[0];
                    operator delete(v332[0]);
                  }
                  if (SHIBYTE(v329) < 0) {
                    operator delete((void *)v328);
                  }
                  if (SHIBYTE(v325) < 0) {
                    operator delete(v324[0]);
                  }
                }
              }
              int64_t v120 = v121 - 1;
            }
            while (v121);
            int64_t v157 = v11 / 0xC0uLL;
            uint64_t v291 = v10 + 40;
            uint64_t v292 = v10 + 24;
            uint64_t v290 = v10 + 64;
            v288 = (void *)(v10 + 80);
            uint64_t v284 = v10 + 128;
            long long v285 = (void *)(v10 + 104);
            uint64_t v283 = (void *)(v10 + 168);
            do
            {
              if (v157 >= 2)
              {
                unint64_t v304 = a2;
                uint64_t v158 = 0;
                long long v159 = *(_OWORD *)v10;
                uint64_t v307 = *(void *)(v10 + 16);
                *(_OWORD *)int64_t v306 = v159;
                *(void *)(v10 + 8) = 0;
                *(void *)(v10 + 16) = 0;
                *(void *)uint64_t v10 = 0;
                int v160 = *(_DWORD *)(v292 + 8);
                uint64_t v308 = *(void *)v292;
                int v309 = v160;
                uint64_t v161 = *(void *)(v291 + 16);
                long long v310 = *(_OWORD *)v291;
                uint64_t v311 = v161;
                *(void *)(v291 + 8) = 0;
                *(void *)(v291 + 16) = 0;
                *(void *)uint64_t v291 = 0;
                uint64_t v162 = *(void *)v290;
                int v313 = *(_DWORD *)(v290 + 8);
                uint64_t v312 = v162;
                *(_OWORD *)unint64_t v314 = *(_OWORD *)(v10 + 80);
                uint64_t v315 = *(void *)(v10 + 96);
                void *v288 = 0;
                v288[1] = 0;
                v288[2] = 0;
                long long v316 = *(_OWORD *)(v10 + 104);
                uint64_t v317 = *(void *)(v10 + 120);
                *long long v285 = 0;
                v285[1] = 0;
                v285[2] = 0;
                long long v163 = *(_OWORD *)v284;
                long long v164 = *(_OWORD *)(v284 + 16);
                char v320 = *(unsigned char *)(v284 + 32);
                long long v318 = v163;
                long long v319 = v164;
                long long v321 = *(_OWORD *)(v10 + 168);
                uint64_t v322 = *(void *)(v10 + 184);
                *uint64_t v283 = 0;
                v283[1] = 0;
                uint64_t v165 = v10;
                v283[2] = 0;
                do
                {
                  uint64_t v166 = v165 + 192 * v158 + 192;
                  uint64_t v167 = 2 * v158;
                  uint64_t v158 = (2 * v158) | 1;
                  uint64_t v168 = v167 + 2;
                  if (v167 + 2 < v157
                    && std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v166, v166 + 192))
                  {
                    v166 += 192;
                    uint64_t v158 = v168;
                  }
                  if (*(char *)(v165 + 23) < 0) {
                    operator delete(*(void **)v165);
                  }
                  long long v169 = *(_OWORD *)v166;
                  *(void *)(v165 + 16) = *(void *)(v166 + 16);
                  *(_OWORD *)uint64_t v165 = v169;
                  *(unsigned char *)(v166 + 23) = 0;
                  std::string v171 = (uint64_t *)(v166 + 24);
                  uint64_t v170 = *(void *)(v166 + 24);
                  *(unsigned char *)uint64_t v166 = 0;
                  int v172 = *(_DWORD *)(v166 + 32);
                  *(void *)(v165 + 24) = v170;
                  *(_DWORD *)(v165 + 32) = v172;
                  uint64_t v173 = (void **)(v165 + 40);
                  if (*(char *)(v165 + 63) < 0) {
                    operator delete(*v173);
                  }
                  long long v174 = *(_OWORD *)(v166 + 40);
                  *(void *)(v165 + 56) = *(void *)(v166 + 56);
                  *(_OWORD *)uint64_t v173 = v174;
                  uint64_t v176 = (uint64_t *)(v166 + 64);
                  uint64_t v175 = *(void *)(v166 + 64);
                  *(unsigned char *)(v166 + 63) = 0;
                  *(unsigned char *)(v166 + 40) = 0;
                  int v177 = *(_DWORD *)(v166 + 72);
                  unint64_t v178 = *(void **)(v165 + 80);
                  *(void *)(v165 + 64) = v175;
                  *(_DWORD *)(v165 + 72) = v177;
                  if (v178)
                  {
                    *(void *)(v165 + 88) = v178;
                    operator delete(v178);
                    *(void *)(v165 + 80) = 0;
                    *(void *)(v165 + 88) = 0;
                    *(void *)(v165 + 96) = 0;
                  }
                  long long v179 = (void **)(v166 + 80);
                  *(_OWORD *)(v165 + 80) = *(_OWORD *)(v166 + 80);
                  *(void *)(v165 + 96) = *(void *)(v166 + 96);
                  *(void *)(v166 + 80) = 0;
                  *(void *)(v166 + 88) = 0;
                  *(void *)(v166 + 96) = 0;
                  uint64_t v180 = *(void **)(v165 + 104);
                  if (v180)
                  {
                    *(void *)(v165 + 112) = v180;
                    operator delete(v180);
                    *(void *)(v165 + 104) = 0;
                    *(void *)(v165 + 112) = 0;
                    *(void *)(v165 + 120) = 0;
                  }
                  uint64_t v181 = (void *)(v166 + 104);
                  *(_OWORD *)(v165 + 104) = *(_OWORD *)(v166 + 104);
                  *(void *)(v165 + 120) = *(void *)(v166 + 120);
                  *(void *)(v166 + 104) = 0;
                  *(void *)(v166 + 112) = 0;
                  *(void *)(v166 + 120) = 0;
                  long long v182 = *(_OWORD *)(v166 + 128);
                  long long v183 = *(_OWORD *)(v166 + 144);
                  *(unsigned char *)(v165 + 160) = *(unsigned char *)(v166 + 160);
                  *(_OWORD *)(v165 + 128) = v182;
                  *(_OWORD *)(v165 + 144) = v183;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v165 + 168));
                  *(_OWORD *)(v165 + 168) = *(_OWORD *)(v166 + 168);
                  *(void *)(v165 + 184) = *(void *)(v166 + 184);
                  *(void *)(v166 + 168) = 0;
                  *(void *)(v166 + 176) = 0;
                  *(void *)(v166 + 184) = 0;
                  uint64_t v165 = v166;
                }
                while (v158 <= (uint64_t)((unint64_t)(v157 - 2) >> 1));
                uint64_t v184 = v166 + 40;
                long long v185 = (_OWORD *)(v166 + 128);
                int v186 = *(char *)(v166 + 23);
                uint64_t v299 = (long long *)(v166 + 40);
                if (v166 == v304 - 192)
                {
                  if (v186 < 0)
                  {
                    operator delete(*(void **)v166);
                    uint64_t v184 = v166 + 40;
                  }
                  long long v243 = *(_OWORD *)v306;
                  *(void *)(v166 + 16) = v307;
                  *(_OWORD *)uint64_t v166 = v243;
                  HIBYTE(v307) = 0;
                  LOBYTE(v306[0]) = 0;
                  uint64_t v244 = v308;
                  *(_DWORD *)(v166 + 32) = v309;
                  uint64_t *v171 = v244;
                  if (*(char *)(v166 + 63) < 0)
                  {
                    operator delete(*(void **)v184);
                    uint64_t v184 = v166 + 40;
                  }
                  long long v245 = v310;
                  *(void *)(v184 + 16) = v311;
                  *(_OWORD *)uint64_t v184 = v245;
                  HIBYTE(v311) = 0;
                  LOBYTE(v310) = 0;
                  int v246 = v313;
                  *uint64_t v176 = v312;
                  *(_DWORD *)(v166 + 72) = v246;
                  long long v247 = *v179;
                  if (*v179)
                  {
                    *(void *)(v166 + 88) = v247;
                    operator delete(v247);
                    *long long v179 = 0;
                    *(void *)(v166 + 88) = 0;
                    *(void *)(v166 + 96) = 0;
                  }
                  *(_OWORD *)(v166 + 80) = *(_OWORD *)v314;
                  *(void *)(v166 + 96) = v315;
                  v314[0] = 0;
                  v314[1] = 0;
                  uint64_t v315 = 0;
                  uint64_t v248 = *(void **)(v166 + 104);
                  if (v248)
                  {
                    *(void *)(v166 + 112) = v248;
                    operator delete(v248);
                    *uint64_t v181 = 0;
                    *(void *)(v166 + 112) = 0;
                    *(void *)(v166 + 120) = 0;
                  }
                  *(_OWORD *)(v166 + 104) = v316;
                  *(void *)(v166 + 120) = v317;
                  long long v316 = 0uLL;
                  uint64_t v317 = 0;
                  long long v249 = v318;
                  long long v250 = v319;
                  *(unsigned char *)(v166 + 160) = v320;
                  *long long v185 = v249;
                  *(_OWORD *)(v166 + 144) = v250;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v166 + 168));
                  *(_OWORD *)(v166 + 168) = v321;
                  *(void *)(v166 + 184) = v322;
                  long long v321 = 0uLL;
                  uint64_t v322 = 0;
                }
                else
                {
                  if (v186 < 0)
                  {
                    operator delete(*(void **)v166);
                    uint64_t v184 = v166 + 40;
                  }
                  long long v187 = *(_OWORD *)(v304 - 192);
                  uint64_t v296 = (void **)(v304 - 192);
                  *(void *)(v166 + 16) = *(void *)(v304 - 176);
                  *(_OWORD *)uint64_t v166 = v187;
                  uint64_t v188 = *(void *)(v304 - 168);
                  *(unsigned char *)(v304 - 169) = 0;
                  *(unsigned char *)(v304 - 192) = 0;
                  int v189 = *(_DWORD *)(v304 - 160);
                  uint64_t *v171 = v188;
                  *(_DWORD *)(v166 + 32) = v189;
                  if (*(char *)(v166 + 63) < 0)
                  {
                    operator delete(*(void **)v184);
                    uint64_t v184 = v166 + 40;
                  }
                  long long v190 = *(_OWORD *)(v304 - 152);
                  *(void *)(v184 + 16) = *(void *)(v304 - 136);
                  *(_OWORD *)uint64_t v184 = v190;
                  uint64_t v191 = *(void *)(v304 - 128);
                  *(unsigned char *)(v304 - 129) = 0;
                  *(unsigned char *)(v304 - 152) = 0;
                  int v192 = *(_DWORD *)(v304 - 120);
                  *uint64_t v176 = v191;
                  *(_DWORD *)(v166 + 72) = v192;
                  uint64_t v193 = *v179;
                  if (*v179)
                  {
                    *(void *)(v166 + 88) = v193;
                    operator delete(v193);
                    *long long v179 = 0;
                    *(void *)(v166 + 88) = 0;
                    *(void *)(v166 + 96) = 0;
                  }
                  *(_OWORD *)(v166 + 80) = *(_OWORD *)(v304 - 112);
                  *(void *)(v166 + 96) = *(void *)(v304 - 96);
                  *(void *)(v304 - 112) = 0;
                  *(void *)(v304 - 104) = 0;
                  uint64_t v294 = (void **)(v304 - 112);
                  *(void *)(v304 - 96) = 0;
                  uint64_t v194 = *(void **)(v166 + 104);
                  if (v194)
                  {
                    *(void *)(v166 + 112) = v194;
                    operator delete(v194);
                    *uint64_t v181 = 0;
                    *(void *)(v166 + 112) = 0;
                    *(void *)(v166 + 120) = 0;
                  }
                  __int16 v195 = (void *)(v304 - 88);
                  *(_OWORD *)(v166 + 104) = *(_OWORD *)(v304 - 88);
                  *(void *)(v166 + 120) = *(void *)(v304 - 72);
                  *__int16 v195 = 0;
                  v195[1] = 0;
                  v195[2] = 0;
                  long long v196 = *(_OWORD *)(v304 - 64);
                  long long v197 = *(_OWORD *)(v304 - 48);
                  *(unsigned char *)(v166 + 160) = *(unsigned char *)(v304 - 32);
                  *long long v185 = v196;
                  *(_OWORD *)(v166 + 144) = v197;
                  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v166 + 168));
                  int v198 = (std::vector<std::string> *)(v304 - 24);
                  *(_OWORD *)(v166 + 168) = *(_OWORD *)(v304 - 24);
                  *(void *)(v166 + 184) = *(void *)(v304 - 8);
                  v198->__begin_ = 0;
                  v198->__end_ = 0;
                  v198->__end_cap_.__value_ = 0;
                  if (*(char *)(v304 - 169) < 0) {
                    operator delete(*v296);
                  }
                  uint64_t v199 = (void **)(v304 - 152);
                  long long v200 = *(_OWORD *)v306;
                  *(void *)(v304 - 176) = v307;
                  *(_OWORD *)uint64_t v296 = v200;
                  HIBYTE(v307) = 0;
                  LOBYTE(v306[0]) = 0;
                  int v201 = v309;
                  *(void *)(v304 - 168) = v308;
                  *(_DWORD *)(v304 - 160) = v201;
                  if (*(char *)(v304 - 129) < 0) {
                    operator delete(*v199);
                  }
                  long long v202 = v310;
                  *(void *)(v304 - 136) = v311;
                  *(_OWORD *)uint64_t v199 = v202;
                  HIBYTE(v311) = 0;
                  LOBYTE(v310) = 0;
                  int v203 = v313;
                  *(void *)(v304 - 128) = v312;
                  *(_DWORD *)(v304 - 120) = v203;
                  uint64_t v204 = *v294;
                  if (*v294)
                  {
                    *(void *)(v304 - 104) = v204;
                    operator delete(v204);
                    *uint64_t v294 = 0;
                    *(void *)(v304 - 104) = 0;
                    *(void *)(v304 - 96) = 0;
                  }
                  *(_OWORD *)(v304 - 112) = *(_OWORD *)v314;
                  *(void *)(v304 - 96) = v315;
                  v314[0] = 0;
                  v314[1] = 0;
                  uint64_t v315 = 0;
                  v205 = *(void **)(v304 - 88);
                  if (v205)
                  {
                    *(void *)(v304 - 80) = v205;
                    operator delete(v205);
                    *(void *)(v304 - 88) = 0;
                    *(void *)(v304 - 80) = 0;
                    *(void *)(v304 - 72) = 0;
                  }
                  unint64_t v206 = v304 - 64;
                  *(_OWORD *)(v304 - 88) = v316;
                  *(void *)(v304 - 72) = v317;
                  long long v316 = 0uLL;
                  uint64_t v317 = 0;
                  long long v207 = v318;
                  long long v208 = v319;
                  *(unsigned char *)(v206 + 32) = v320;
                  *(_OWORD *)unint64_t v206 = v207;
                  *(_OWORD *)(v206 + 16) = v208;
                  std::vector<std::string>::__vdeallocate(v198);
                  *(_OWORD *)(v304 - 24) = v321;
                  *(void *)(v304 - 8) = v322;
                  long long v321 = 0uLL;
                  uint64_t v322 = 0;
                  uint64_t v209 = v166 + 192 - v305;
                  if (v209 >= 193)
                  {
                    unint64_t v210 = (unint64_t)(-2 - 0x5555555555555555 * (v209 >> 6)) >> 1;
                    uint64_t v211 = v305 + 192 * v210;
                    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v211, v166))
                    {
                      long long v212 = *(_OWORD *)v166;
                      uint64_t v325 = *(void *)(v166 + 16);
                      *(_OWORD *)v324 = v212;
                      *(void *)(v166 + 8) = 0;
                      *(void *)(v166 + 16) = 0;
                      *(void *)uint64_t v166 = 0;
                      uint64_t v213 = *v171;
                      int v327 = *(_DWORD *)(v166 + 32);
                      uint64_t v326 = v213;
                      long long v214 = *v299;
                      uint64_t v329 = *(void *)(v166 + 56);
                      long long v328 = v214;
                      *(void *)(v166 + 48) = 0;
                      *(void *)(v166 + 56) = 0;
                      *(void *)uint64_t v299 = 0;
                      uint64_t v215 = *v176;
                      int v331 = *(_DWORD *)(v166 + 72);
                      uint64_t v330 = v215;
                      *(_OWORD *)uint64_t v332 = *(_OWORD *)(v166 + 80);
                      uint64_t v333 = *(void *)(v166 + 96);
                      *long long v179 = 0;
                      *(void *)(v166 + 88) = 0;
                      *(void *)(v166 + 96) = 0;
                      long long __p = *(_OWORD *)(v166 + 104);
                      uint64_t v335 = *(void *)(v166 + 120);
                      *uint64_t v181 = 0;
                      *(void *)(v166 + 112) = 0;
                      *(void *)(v166 + 120) = 0;
                      long long v216 = *(_OWORD *)(v166 + 128);
                      long long v217 = *(_OWORD *)(v166 + 144);
                      char v338 = *(unsigned char *)(v166 + 160);
                      long long v336 = v216;
                      long long v337 = v217;
                      long long v339 = *(_OWORD *)(v166 + 168);
                      uint64_t v340 = *(void *)(v166 + 184);
                      *(void *)(v166 + 168) = 0;
                      *(void *)(v166 + 176) = 0;
                      *(void *)(v166 + 184) = 0;
                      do
                      {
                        uint64_t v218 = v211;
                        if (*(char *)(v166 + 23) < 0) {
                          operator delete(*(void **)v166);
                        }
                        long long v219 = *(_OWORD *)v211;
                        *(void *)(v166 + 16) = *(void *)(v211 + 16);
                        *(_OWORD *)uint64_t v166 = v219;
                        *(unsigned char *)(v211 + 23) = 0;
                        long long v221 = (void *)(v211 + 24);
                        uint64_t v220 = *(void *)(v211 + 24);
                        *(unsigned char *)uint64_t v211 = 0;
                        int v222 = *(_DWORD *)(v211 + 32);
                        *(void *)(v166 + 24) = v220;
                        *(_DWORD *)(v166 + 32) = v222;
                        uint64_t v223 = (void **)(v166 + 40);
                        if (*(char *)(v166 + 63) < 0) {
                          operator delete(*v223);
                        }
                        long long v224 = *(_OWORD *)(v211 + 40);
                        *(void *)(v166 + 56) = *(void *)(v211 + 56);
                        *(_OWORD *)uint64_t v223 = v224;
                        uint64_t v226 = (void *)(v211 + 64);
                        uint64_t v225 = *(void *)(v211 + 64);
                        *(unsigned char *)(v211 + 63) = 0;
                        *(unsigned char *)(v211 + 40) = 0;
                        int v227 = *(_DWORD *)(v211 + 72);
                        long long v228 = *(void **)(v166 + 80);
                        *(void *)(v166 + 64) = v225;
                        *(_DWORD *)(v166 + 72) = v227;
                        if (v228)
                        {
                          *(void *)(v166 + 88) = v228;
                          operator delete(v228);
                          *(void *)(v166 + 80) = 0;
                          *(void *)(v166 + 88) = 0;
                          *(void *)(v166 + 96) = 0;
                        }
                        uint64_t v229 = (void **)(v211 + 80);
                        *(_OWORD *)(v166 + 80) = *(_OWORD *)(v211 + 80);
                        *(void *)(v166 + 96) = *(void *)(v211 + 96);
                        *(void *)(v211 + 80) = 0;
                        *(void *)(v211 + 88) = 0;
                        *(void *)(v211 + 96) = 0;
                        uint64_t v230 = *(void **)(v166 + 104);
                        if (v230)
                        {
                          *(void *)(v166 + 112) = v230;
                          operator delete(v230);
                          *(void *)(v166 + 104) = 0;
                          *(void *)(v166 + 112) = 0;
                          *(void *)(v166 + 120) = 0;
                        }
                        uint64_t v231 = (void *)(v211 + 104);
                        *(_OWORD *)(v166 + 104) = *(_OWORD *)(v211 + 104);
                        *(void *)(v166 + 120) = *(void *)(v211 + 120);
                        *(void *)(v211 + 104) = 0;
                        *(void *)(v211 + 112) = 0;
                        *(void *)(v211 + 120) = 0;
                        long long v232 = *(_OWORD *)(v211 + 128);
                        long long v233 = *(_OWORD *)(v211 + 144);
                        *(unsigned char *)(v166 + 160) = *(unsigned char *)(v211 + 160);
                        *(_OWORD *)(v166 + 128) = v232;
                        *(_OWORD *)(v166 + 144) = v233;
                        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v166 + 168));
                        *(_OWORD *)(v166 + 168) = *(_OWORD *)(v211 + 168);
                        *(void *)(v166 + 184) = *(void *)(v211 + 184);
                        *(void *)(v211 + 168) = 0;
                        *(void *)(v211 + 176) = 0;
                        *(void *)(v211 + 184) = 0;
                        if (!v210) {
                          break;
                        }
                        unint64_t v210 = (v210 - 1) >> 1;
                        uint64_t v211 = v305 + 192 * v210;
                        uint64_t v166 = v218;
                      }
                      while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v211, (uint64_t)v324) & 1) != 0);
                      if (*(char *)(v218 + 23) < 0) {
                        operator delete(*(void **)v218);
                      }
                      long long v234 = (void **)(v218 + 40);
                      long long v235 = *(_OWORD *)v324;
                      *(void *)(v218 + 16) = v325;
                      *(_OWORD *)uint64_t v218 = v235;
                      HIBYTE(v325) = 0;
                      LOBYTE(v324[0]) = 0;
                      int v236 = v327;
                      *long long v221 = v326;
                      *(_DWORD *)(v218 + 32) = v236;
                      if (*(char *)(v218 + 63) < 0) {
                        operator delete(*v234);
                      }
                      long long v237 = v328;
                      *(void *)(v218 + 56) = v329;
                      *(_OWORD *)long long v234 = v237;
                      HIBYTE(v329) = 0;
                      LOBYTE(v328) = 0;
                      int v238 = v331;
                      *uint64_t v226 = v330;
                      *(_DWORD *)(v218 + 72) = v238;
                      uint64_t v239 = *v229;
                      if (*v229)
                      {
                        *(void *)(v218 + 88) = v239;
                        operator delete(v239);
                        *uint64_t v229 = 0;
                        v226[3] = 0;
                        v226[4] = 0;
                      }
                      *(_OWORD *)(v218 + 80) = *(_OWORD *)v332;
                      *(void *)(v218 + 96) = v333;
                      v332[0] = 0;
                      v332[1] = 0;
                      uint64_t v333 = 0;
                      long long v240 = *(void **)(v218 + 104);
                      if (v240)
                      {
                        *(void *)(v218 + 112) = v240;
                        operator delete(v240);
                        *uint64_t v231 = 0;
                        *(void *)(v218 + 112) = 0;
                        *(void *)(v218 + 120) = 0;
                      }
                      *(_OWORD *)(v218 + 104) = __p;
                      *(void *)(v218 + 120) = v335;
                      long long __p = 0uLL;
                      uint64_t v335 = 0;
                      char v241 = v338;
                      long long v242 = v337;
                      *(_OWORD *)(v218 + 128) = v336;
                      *(_OWORD *)(v218 + 144) = v242;
                      *(unsigned char *)(v218 + 160) = v241;
                      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v218 + 168));
                      *(_OWORD *)(v218 + 168) = v339;
                      *(void *)(v218 + 184) = v340;
                      long long v339 = 0uLL;
                      uint64_t v340 = 0;
                      long long v323 = (void **)&v339;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v323);
                      if ((void)__p)
                      {
                        *((void *)&__p + 1) = __p;
                        operator delete((void *)__p);
                      }
                      if (v332[0])
                      {
                        v332[1] = v332[0];
                        operator delete(v332[0]);
                      }
                      if (SHIBYTE(v329) < 0) {
                        operator delete((void *)v328);
                      }
                      if (SHIBYTE(v325) < 0) {
                        operator delete(v324[0]);
                      }
                    }
                  }
                }
                v324[0] = &v321;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v324);
                if ((void)v316)
                {
                  *((void *)&v316 + 1) = v316;
                  operator delete((void *)v316);
                }
                a2 = v304;
                uint64_t v10 = v305;
                if (v314[0])
                {
                  v314[1] = v314[0];
                  operator delete(v314[0]);
                }
                if (SHIBYTE(v311) < 0) {
                  operator delete((void *)v310);
                }
                if (SHIBYTE(v307) < 0) {
                  operator delete(v306[0]);
                }
              }
              a2 -= 192;
            }
            while ((unint64_t)v157-- > 2);
          }
          return;
        }
        if ((unint64_t)v11 > 0x6000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v9, (long long *)(v9 + 192 * (v12 >> 1)), v295);
          uint64_t v13 = (long long *)(v9 + 192 * (v12 >> 1) - 192);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)(v10 + 192), v13, v289);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)(v10 + 384), (long long *)(v10 + 192 + 192 * (v12 >> 1)), v287);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)v13, (long long *)(v10 + 192 * (v12 >> 1)), (long long *)(v10 + 192 + 192 * (v12 >> 1)));
          std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v10, (long long *)(v10 + 192 * (v12 >> 1)));
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)(v9 + 192 * (v12 >> 1)), (long long *)v9, v295);
        }
        --a3;
        if ((a4 & 1) != 0
          || (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v10 - 192, v10) & 1) != 0)
        {
          break;
        }
        long long v51 = *(_OWORD *)v10;
        uint64_t v325 = *(void *)(v10 + 16);
        *(_OWORD *)v324 = v51;
        *(void *)(v10 + 8) = 0;
        *(void *)(v10 + 16) = 0;
        *(void *)uint64_t v10 = 0;
        int v52 = *(_DWORD *)(v10 + 32);
        uint64_t v326 = *(void *)(v10 + 24);
        int v327 = v52;
        uint64_t v53 = *(void *)(v10 + 56);
        long long v328 = *(_OWORD *)(v10 + 40);
        uint64_t v329 = v53;
        *(void *)(v10 + 48) = 0;
        *(void *)(v10 + 56) = 0;
        *(void *)(v10 + 40) = 0;
        uint64_t v54 = *(void *)(v10 + 64);
        int v331 = *(_DWORD *)(v10 + 72);
        uint64_t v330 = v54;
        long long v55 = (void **)(v10 + 80);
        *(_OWORD *)uint64_t v332 = *(_OWORD *)(v10 + 80);
        uint64_t v333 = *(void *)(v10 + 96);
        *(void *)(v10 + 80) = 0;
        *(void *)(v10 + 88) = 0;
        *(void *)(v10 + 96) = 0;
        long long __p = *(_OWORD *)(v10 + 104);
        uint64_t v335 = *(void *)(v10 + 120);
        *(void *)(v10 + 104) = 0;
        *(void *)(v10 + 112) = 0;
        *(void *)(v10 + 120) = 0;
        long long v56 = *(_OWORD *)(v10 + 128);
        long long v57 = *(_OWORD *)(v10 + 144);
        char v338 = *(unsigned char *)(v10 + 160);
        long long v336 = v56;
        long long v337 = v57;
        long long v339 = *(_OWORD *)(v10 + 168);
        uint64_t v340 = *(void *)(v10 + 184);
        *(void *)(v10 + 168) = 0;
        *(void *)(v10 + 176) = 0;
        *(void *)(v10 + 184) = 0;
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, (uint64_t)v295))
        {
          unint64_t v9 = v10;
          do
            v9 += 192;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, v9) & 1) == 0);
        }
        else
        {
          unint64_t v58 = v10 + 192;
          do
          {
            unint64_t v9 = v58;
            if (v58 >= v303) {
              break;
            }
            int v59 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, v58);
            unint64_t v58 = v9 + 192;
          }
          while (!v59);
        }
        uint64_t v60 = (long long *)v303;
        if (v9 < v303)
        {
          uint64_t v60 = (long long *)v303;
          do
            v60 -= 12;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, (uint64_t)v60) & 1) != 0);
        }
        while (v9 < (unint64_t)v60)
        {
          std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v9, v60);
          do
            v9 += 192;
          while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, v9));
          do
            v60 -= 12;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v324, (uint64_t)v60) & 1) != 0);
        }
        unint64_t v61 = (void **)(v9 - 192);
        if (v9 - 192 != v10)
        {
          if (*(char *)(v10 + 23) < 0) {
            operator delete(*(void **)v10);
          }
          long long v62 = (void **)(v10 + 40);
          long long v63 = *(_OWORD *)v61;
          *(void *)(v10 + 16) = *(void *)(v9 - 176);
          *(_OWORD *)uint64_t v10 = v63;
          *(unsigned char *)(v9 - 169) = 0;
          *(unsigned char *)(v9 - 192) = 0;
          int v64 = *(_DWORD *)(v9 - 160);
          *(void *)(v10 + 24) = *(void *)(v9 - 168);
          *(_DWORD *)(v10 + 32) = v64;
          if (*(char *)(v10 + 63) < 0) {
            operator delete(*v62);
          }
          long long v65 = *(_OWORD *)(v9 - 152);
          *(void *)(v10 + 56) = *(void *)(v9 - 136);
          *(_OWORD *)long long v62 = v65;
          *(unsigned char *)(v9 - 129) = 0;
          *(unsigned char *)(v9 - 152) = 0;
          int v66 = *(_DWORD *)(v9 - 120);
          *(void *)(v10 + 64) = *(void *)(v9 - 128);
          *(_DWORD *)(v10 + 72) = v66;
          uint64_t v67 = *v55;
          if (*v55)
          {
            *(void *)(v10 + 88) = v67;
            operator delete(v67);
            *long long v55 = 0;
            *(void *)(v10 + 88) = 0;
            *(void *)(v10 + 96) = 0;
          }
          uint64_t v68 = (void *)(v9 - 112);
          *(_OWORD *)(v10 + 80) = *(_OWORD *)(v9 - 112);
          *(void *)(v10 + 96) = *(void *)(v9 - 96);
          void *v68 = 0;
          v68[1] = 0;
          v68[2] = 0;
          uint64_t v69 = *(void **)(v10 + 104);
          if (v69)
          {
            *(void *)(v10 + 112) = v69;
            operator delete(v69);
            *(void *)(v10 + 104) = 0;
            *(void *)(v10 + 112) = 0;
            *(void *)(v10 + 120) = 0;
          }
          uint64_t v70 = (void *)(v9 - 88);
          *(_OWORD *)(v10 + 104) = *(_OWORD *)(v9 - 88);
          *(void *)(v10 + 120) = *(void *)(v9 - 72);
          *uint64_t v70 = 0;
          v70[1] = 0;
          v70[2] = 0;
          long long v71 = *(_OWORD *)(v9 - 64);
          long long v72 = *(_OWORD *)(v9 - 48);
          *(unsigned char *)(v10 + 160) = *(unsigned char *)(v9 - 32);
          *(_OWORD *)(v10 + 128) = v71;
          *(_OWORD *)(v10 + 144) = v72;
          std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v10 + 168));
          *(_OWORD *)(v10 + 168) = *(_OWORD *)(v9 - 24);
          *(void *)(v10 + 184) = *(void *)(v9 - 8);
          *(void *)(v9 - 24) = 0;
          *(void *)(v9 - 16) = 0;
          *(void *)(v9 - 8) = 0;
        }
        if (*(char *)(v9 - 169) < 0) {
          operator delete(*v61);
        }
        long long v73 = *(_OWORD *)v324;
        *(void *)(v9 - 176) = v325;
        *(_OWORD *)unint64_t v61 = v73;
        HIBYTE(v325) = 0;
        LOBYTE(v324[0]) = 0;
        int v74 = v327;
        *(void *)(v9 - 168) = v326;
        *(_DWORD *)(v9 - 160) = v74;
        unint64_t v75 = (void **)(v9 - 152);
        a2 = v303;
        if (*(char *)(v9 - 129) < 0) {
          operator delete(*v75);
        }
        long long v76 = v328;
        *(void *)(v9 - 136) = v329;
        *(_OWORD *)unint64_t v75 = v76;
        HIBYTE(v329) = 0;
        LOBYTE(v328) = 0;
        int v77 = v331;
        unint64_t v78 = *(void **)(v9 - 112);
        *(void *)(v9 - 128) = v330;
        *(_DWORD *)(v9 - 120) = v77;
        if (v78)
        {
          *(void *)(v9 - 104) = v78;
          operator delete(v78);
          *(void *)(v9 - 112) = 0;
          *(void *)(v9 - 104) = 0;
          *(void *)(v9 - 96) = 0;
        }
        *(_OWORD *)(v9 - 112) = *(_OWORD *)v332;
        *(void *)(v9 - 96) = v333;
        v332[0] = 0;
        v332[1] = 0;
        uint64_t v333 = 0;
        long long v79 = *(void **)(v9 - 88);
        if (v79)
        {
          *(void *)(v9 - 80) = v79;
          operator delete(v79);
          *(void *)(v9 - 88) = 0;
          *(void *)(v9 - 80) = 0;
          *(void *)(v9 - 72) = 0;
        }
        *(_OWORD *)(v9 - 88) = __p;
        *(void *)(v9 - 72) = v335;
        long long __p = 0uLL;
        uint64_t v335 = 0;
        long long v80 = v336;
        long long v81 = v337;
        *(unsigned char *)(v9 - 32) = v338;
        *(_OWORD *)(v9 - 64) = v80;
        *(_OWORD *)(v9 - 48) = v81;
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v9 - 24));
        *(_OWORD *)(v9 - 24) = v339;
        *(void *)(v9 - 8) = v340;
        long long v339 = 0uLL;
        uint64_t v340 = 0;
        v306[0] = &v339;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
        if ((void)__p)
        {
          *((void *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        if (v332[0])
        {
          v332[1] = v332[0];
          operator delete(v332[0]);
        }
        if (SHIBYTE(v329) < 0) {
          operator delete((void *)v328);
        }
        if (SHIBYTE(v325) < 0) {
          operator delete(v324[0]);
        }
LABEL_56:
        a4 = 0;
      }
      uint64_t v300 = a3;
      long long v14 = *(_OWORD *)v10;
      uint64_t v325 = *(void *)(v10 + 16);
      *(_OWORD *)v324 = v14;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      uint64_t v15 = v10 + 24;
      int v16 = *(_DWORD *)(v10 + 32);
      uint64_t v326 = *(void *)(v10 + 24);
      int v327 = v16;
      uint64_t v297 = v10 + 40;
      uint64_t v17 = *(void *)(v10 + 56);
      long long v328 = *(_OWORD *)(v10 + 40);
      uint64_t v329 = v17;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      *(void *)(v10 + 40) = 0;
      unint64_t v18 = v10;
      uint64_t v20 = *(void *)(v10 + 64);
      uint64_t v19 = v10 + 64;
      int v331 = *(_DWORD *)(v18 + 72);
      uint64_t v330 = v20;
      unint64_t v21 = v18 + 80;
      *(_OWORD *)uint64_t v332 = *(_OWORD *)(v18 + 80);
      uint64_t v333 = *(void *)(v18 + 96);
      *(void *)(v18 + 80) = 0;
      unint64_t v22 = (void *)(v18 + 104);
      long long v23 = *(_OWORD *)(v18 + 104);
      *(void *)(v18 + 88) = 0;
      *(void *)(v18 + 96) = 0;
      long long __p = v23;
      uint64_t v335 = *(void *)(v18 + 120);
      *(void *)(v18 + 104) = 0;
      *(void *)(v18 + 112) = 0;
      *(void *)(v18 + 120) = 0;
      unint64_t v298 = v18 + 128;
      long long v24 = *(_OWORD *)(v18 + 128);
      long long v25 = *(_OWORD *)(v18 + 144);
      char v338 = *(unsigned char *)(v18 + 160);
      long long v336 = v24;
      long long v337 = v25;
      uint64_t v26 = (std::vector<std::string> *)(v18 + 168);
      long long v339 = *(_OWORD *)(v18 + 168);
      uint64_t v340 = *(void *)(v18 + 184);
      *(void *)(v18 + 168) = 0;
      *(void *)(v18 + 176) = 0;
      *(void *)(v18 + 184) = 0;
      do
      {
        unint64_t v27 = v18;
        v18 += 192;
      }
      while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v18, (uint64_t)v324) & 1) != 0);
      unint64_t v28 = v303;
      if (v27 == v305)
      {
        unint64_t v28 = v303;
        do
        {
          if (v18 >= v28) {
            break;
          }
          v28 -= 192;
        }
        while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v28, (uint64_t)v324) & 1) == 0);
      }
      else
      {
        do
          v28 -= 192;
        while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v28, (uint64_t)v324));
      }
      unint64_t v9 = v18;
      if (v18 < v28)
      {
        long long v29 = (long long *)v28;
        do
        {
          std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)v9, v29);
          do
            v9 += 192;
          while ((std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v9, (uint64_t)v324) & 1) != 0);
          do
            v29 -= 12;
          while (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v29, (uint64_t)v324));
        }
        while (v9 < (unint64_t)v29);
      }
      uint64_t v30 = (void **)(v9 - 192);
      if (v9 - 192 != v305)
      {
        if (*(char *)(v305 + 23) < 0) {
          operator delete(*(void **)v305);
        }
        long long v31 = *(_OWORD *)v30;
        *(void *)(v305 + 16) = *(void *)(v9 - 176);
        *(_OWORD *)uint64_t v305 = v31;
        *(unsigned char *)(v9 - 169) = 0;
        *(unsigned char *)(v9 - 192) = 0;
        int v32 = *(_DWORD *)(v9 - 160);
        *(void *)uint64_t v15 = *(void *)(v9 - 168);
        *(_DWORD *)(v15 + 8) = v32;
        if (*(char *)(v305 + 63) < 0) {
          operator delete(*(void **)v297);
        }
        long long v33 = *(_OWORD *)(v9 - 152);
        *(void *)(v297 + 16) = *(void *)(v9 - 136);
        *(_OWORD *)uint64_t v297 = v33;
        *(unsigned char *)(v9 - 129) = 0;
        *(unsigned char *)(v9 - 152) = 0;
        int v34 = *(_DWORD *)(v9 - 120);
        *(void *)uint64_t v19 = *(void *)(v9 - 128);
        *(_DWORD *)(v19 + 8) = v34;
        unint64_t v35 = *(void **)v21;
        if (*(void *)v21)
        {
          *(void *)(v305 + 88) = v35;
          operator delete(v35);
          *(void *)unint64_t v21 = 0;
          *(void *)(v21 + 8) = 0;
          *(void *)(v21 + 16) = 0;
        }
        long long v36 = (void *)(v9 - 112);
        *(_OWORD *)(v305 + 80) = *(_OWORD *)(v9 - 112);
        *(void *)(v305 + 96) = *(void *)(v9 - 96);
        void *v36 = 0;
        v36[1] = 0;
        v36[2] = 0;
        uint64_t v37 = *(void **)(v305 + 104);
        if (v37)
        {
          *(void *)(v305 + 112) = v37;
          operator delete(v37);
          void *v22 = 0;
          v22[1] = 0;
          unint64_t v22[2] = 0;
        }
        unint64_t v38 = (void *)(v9 - 88);
        *(_OWORD *)(v305 + 104) = *(_OWORD *)(v9 - 88);
        *(void *)(v305 + 120) = *(void *)(v9 - 72);
        void *v38 = 0;
        v38[1] = 0;
        v38[2] = 0;
        long long v39 = *(_OWORD *)(v9 - 64);
        long long v40 = *(_OWORD *)(v9 - 48);
        *(unsigned char *)(v298 + 32) = *(unsigned char *)(v9 - 32);
        *(_OWORD *)unint64_t v298 = v39;
        *(_OWORD *)(v298 + 16) = v40;
        std::vector<std::string>::__vdeallocate(v26);
        *(_OWORD *)(v305 + 168) = *(_OWORD *)(v9 - 24);
        *(void *)(v305 + 184) = *(void *)(v9 - 8);
        *(void *)(v9 - 24) = 0;
        *(void *)(v9 - 16) = 0;
        *(void *)(v9 - 8) = 0;
      }
      if (*(char *)(v9 - 169) < 0) {
        operator delete(*v30);
      }
      long long v41 = *(_OWORD *)v324;
      *(void *)(v9 - 176) = v325;
      *(_OWORD *)uint64_t v30 = v41;
      HIBYTE(v325) = 0;
      LOBYTE(v324[0]) = 0;
      int v42 = v327;
      *(void *)(v9 - 168) = v326;
      *(_DWORD *)(v9 - 160) = v42;
      uint64_t v43 = (void **)(v9 - 152);
      a2 = v303;
      a1 = v305;
      if (*(char *)(v9 - 129) < 0) {
        operator delete(*v43);
      }
      long long v44 = v328;
      *(void *)(v9 - 136) = v329;
      *(_OWORD *)uint64_t v43 = v44;
      HIBYTE(v329) = 0;
      LOBYTE(v328) = 0;
      int v45 = v331;
      uint64_t v46 = *(void **)(v9 - 112);
      *(void *)(v9 - 128) = v330;
      *(_DWORD *)(v9 - 120) = v45;
      if (v46)
      {
        *(void *)(v9 - 104) = v46;
        operator delete(v46);
        *(void *)(v9 - 112) = 0;
        *(void *)(v9 - 104) = 0;
        *(void *)(v9 - 96) = 0;
      }
      *(_OWORD *)(v9 - 112) = *(_OWORD *)v332;
      *(void *)(v9 - 96) = v333;
      v332[0] = 0;
      v332[1] = 0;
      uint64_t v333 = 0;
      unint64_t v47 = *(void **)(v9 - 88);
      if (v47)
      {
        *(void *)(v9 - 80) = v47;
        operator delete(v47);
        *(void *)(v9 - 88) = 0;
        *(void *)(v9 - 80) = 0;
        *(void *)(v9 - 72) = 0;
      }
      *(_OWORD *)(v9 - 88) = __p;
      *(void *)(v9 - 72) = v335;
      long long __p = 0uLL;
      uint64_t v335 = 0;
      long long v48 = v336;
      long long v49 = v337;
      *(unsigned char *)(v9 - 32) = v338;
      *(_OWORD *)(v9 - 64) = v48;
      *(_OWORD *)(v9 - 48) = v49;
      std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(v9 - 24));
      *(_OWORD *)(v9 - 24) = v339;
      *(void *)(v9 - 8) = v340;
      long long v339 = 0uLL;
      uint64_t v340 = 0;
      v306[0] = &v339;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v306);
      if ((void)__p)
      {
        *((void *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      if (v332[0])
      {
        v332[1] = v332[0];
        operator delete(v332[0]);
      }
      if (SHIBYTE(v329) < 0) {
        operator delete((void *)v328);
      }
      if (SHIBYTE(v325) < 0) {
        operator delete(v324[0]);
      }
      BOOL v4 = v18 >= v28;
      a3 = v300;
      if (!v4)
      {
LABEL_55:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *,false>(v305, v9 - 192, v300, a4 & 1);
        goto LABEL_56;
      }
      BOOL v50 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(v305, v9 - 192);
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(v9, v303))
      {
        break;
      }
      if (!v50) {
        goto LABEL_55;
      }
    }
    a2 = v9 - 192;
    if (!v50) {
      continue;
    }
    break;
  }
}

uint64_t std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a1, a2);
  if ((_BYTE)v4) {
    return (v4 >> 7) & 1;
  }
  unsigned int v4 = std::__synth_three_way[abi:ne180100]<AMCP::Terminal_Identifier,AMCP::Terminal_Identifier>(a1 + 40, a2 + 40);
  if ((_BYTE)v4) {
    return (v4 >> 7) & 1;
  }
  char v5 = *(_DWORD **)(a1 + 80);
  BOOL v6 = *(_DWORD **)(a2 + 80);
  uint64_t v7 = *(void *)(a1 + 88) - (void)v5;
  uint64_t v8 = v7 >> 2;
  uint64_t v9 = (uint64_t)(*(void *)(a2 + 88) - (void)v6) >> 2;
  if (v9 >= v7 >> 2) {
    uint64_t v10 = v7 >> 2;
  }
  else {
    uint64_t v10 = (uint64_t)(*(void *)(a2 + 88) - (void)v6) >> 2;
  }
  if (v10 < 1)
  {
LABEL_9:
    BOOL v11 = v8 < v9;
    if (v8 == v9)
    {
      unint64_t v12 = *(_DWORD **)(a1 + 104);
      uint64_t v13 = *(_DWORD **)(a2 + 104);
      uint64_t v14 = *(void *)(a1 + 112) - (void)v12;
      uint64_t v15 = v14 >> 2;
      uint64_t v16 = (uint64_t)(*(void *)(a2 + 112) - (void)v13) >> 2;
      if (v16 >= v14 >> 2) {
        uint64_t v17 = v14 >> 2;
      }
      else {
        uint64_t v17 = (uint64_t)(*(void *)(a2 + 112) - (void)v13) >> 2;
      }
      if (v17 >= 1)
      {
        while (*v12 == *v13)
        {
          ++v12;
          ++v13;
          if (!--v17) {
            goto LABEL_16;
          }
        }
        if (*v12 < *v13) {
          unsigned int v4 = -1;
        }
        else {
          unsigned int v4 = 1;
        }
        return (v4 >> 7) & 1;
      }
LABEL_16:
      BOOL v11 = v15 < v16;
      if (v15 == v16)
      {
        int v18 = *(_DWORD *)(a1 + 128);
        int v19 = *(_DWORD *)(a2 + 128);
        if (v18 < v19) {
          unsigned int v4 = -1;
        }
        else {
          unsigned int v4 = 1;
        }
        if (v18 == v19)
        {
          int v20 = *(_DWORD *)(a1 + 132);
          int v21 = *(_DWORD *)(a2 + 132);
          unsigned int v4 = v20 < v21 ? -1 : 1;
          if (v20 == v21)
          {
            int v22 = *(_DWORD *)(a1 + 136);
            int v23 = *(_DWORD *)(a2 + 136);
            unsigned int v4 = v22 < v23 ? -1 : 1;
            if (v22 == v23)
            {
              int v24 = *(_DWORD *)(a1 + 152);
              int v25 = *(_DWORD *)(a2 + 152);
              unsigned int v4 = v24 < v25 ? -1 : 1;
              if (v24 == v25)
              {
                int v26 = *(_DWORD *)(a1 + 156);
                int v27 = *(_DWORD *)(a2 + 156);
                unsigned int v4 = v26 < v27 ? -1 : 1;
                if (v26 == v27)
                {
                  int v28 = *(_DWORD *)(a1 + 140);
                  int v29 = *(_DWORD *)(a2 + 140);
                  unsigned int v4 = v28 < v29 ? -1 : 1;
                  if (v28 == v29)
                  {
                    int v30 = *(_DWORD *)(a1 + 144);
                    int v31 = *(_DWORD *)(a2 + 144);
                    unsigned int v4 = v30 < v31 ? -1 : 1;
                    if (v30 == v31)
                    {
                      int v32 = *(_DWORD *)(a1 + 148);
                      int v33 = *(_DWORD *)(a2 + 148);
                      unsigned int v4 = v32 < v33 ? -1 : 1;
                      if (v32 == v33)
                      {
                        unsigned int v34 = *(unsigned __int8 *)(a1 + 160);
                        unsigned int v35 = *(unsigned __int8 *)(a2 + 160);
                        if (v34 < v35) {
                          unsigned int v4 = -1;
                        }
                        else {
                          unsigned int v4 = 1;
                        }
                        if (v34 == v35)
                        {
                          char v36 = std::operator<=>[abi:ne180100]<std::string,std::allocator<std::string>>(*(void **)(a1 + 168), *(void *)(a1 + 176), *(void **)(a2 + 168), *(void *)(a2 + 176));
                          if (v36) {
                            unsigned int v4 = (v36 >> 7) | 1;
                          }
                          else {
                            unsigned int v4 = 0;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return (v4 >> 7) & 1;
      }
    }
    char v37 = !v11;
    if (v37) {
      unsigned int v4 = 1;
    }
    else {
      unsigned int v4 = -1;
    }
    return (v4 >> 7) & 1;
  }
  while (*v5 == *v6)
  {
    ++v5;
    ++v6;
    if (!--v10) {
      goto LABEL_9;
    }
  }
  if (*v5 < *v6) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = 1;
  }
  return (v4 >> 7) & 1;
}

void std::swap[abi:ne180100]<AMCP::Wire_Description>(std::vector<std::string> *this, long long *a2)
{
  *(_OWORD *)char v37 = *(_OWORD *)&this->__begin_;
  value = this->__end_cap_.__value_;
  begiuint64_t n = this[1].__begin_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this->__begin_ = 0;
  unint64_t v38 = value;
  std::vector<std::string>::pointer v39 = begin;
  int end = (int)this[1].__end_;
  p_end_cap = &this[1].__end_cap_;
  *(_OWORD *)long long v41 = *(_OWORD *)&this[1].__end_cap_.__value_;
  std::vector<std::string>::pointer v7 = this[2].__end_;
  this[2].__begin_ = 0;
  this[2].__end_ = 0;
  this[1].__end_cap_.__value_ = 0;
  uint64_t v8 = &this[2].__end_cap_;
  int v44 = (int)this[3].__begin_;
  std::vector<std::string>::pointer v42 = v7;
  uint64_t v43 = this[2].__end_cap_.__value_;
  p_int end = &this[3].__end_;
  std::vector<std::string>::pointer v10 = this[4].__begin_;
  int v29 = this[3].__end_cap_.__value_;
  std::vector<std::string>::pointer v30 = this[3].__end_;
  this[3].__end_ = 0;
  this[3].__end_cap_.__value_ = 0;
  this[4].__begin_ = 0;
  BOOL v11 = &this[4].__end_;
  std::vector<std::string>::pointer v28 = v10;
  std::vector<std::string>::pointer v35 = this[4].__end_;
  int v33 = this[4].__end_cap_.__value_;
  std::vector<std::string>::pointer v31 = this[5].__begin_;
  this[4].__end_ = 0;
  this[4].__end_cap_.__value_ = 0;
  this[5].__begin_ = 0;
  char v47 = (char)this[6].__end_cap_.__value_;
  long long v45 = *(_OWORD *)&this[5].__end_;
  long long v46 = *(_OWORD *)&this[6].__begin_;
  unint64_t v12 = this + 7;
  std::vector<std::string>::pointer v13 = this[7].__end_;
  uint64_t v14 = this[7].__end_cap_.__value_;
  std::vector<std::string>::pointer v36 = this[7].__begin_;
  std::vector<std::string>::pointer v48 = v36;
  std::vector<std::string>::pointer v49 = v13;
  std::vector<std::string>::pointer v34 = v13;
  int v32 = v14;
  BOOL v50 = v14;
  this[7].__begin_ = 0;
  this[7].__end_ = 0;
  this[7].__end_cap_.__value_ = 0;
  long long v15 = *a2;
  this->__end_cap_.__value_ = (std::string *)*((void *)a2 + 2);
  *(_OWORD *)&this->__begin_ = v15;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v16 = (uint64_t)a2 + 24;
  LODWORD(v13) = *((_DWORD *)a2 + 8);
  this[1].__begin_ = (std::vector<std::string>::pointer)*((void *)a2 + 3);
  LODWORD(this[1].__end_) = v13;
  if (SHIBYTE(this[2].__end_) < 0) {
    operator delete(p_end_cap->__value_);
  }
  long long v17 = *(long long *)((char *)a2 + 40);
  p_end_cap[2].__value_ = *(std::string **)((char *)a2 + 56);
  *(_OWORD *)&p_end_cap->__value_ = v17;
  int v18 = (std::string *)*((void *)a2 + 8);
  *((unsigned char *)a2 + 63) = 0;
  *((unsigned char *)a2 + 40) = 0;
  int v19 = *((_DWORD *)a2 + 18);
  v8->__value_ = v18;
  LODWORD(v8[1].__value_) = v19;
  int v20 = *p_end;
  if (*p_end)
  {
    this[3].__end_cap_.__value_ = v20;
    operator delete(v20);
    std::vector<std::string>::pointer *p_end = 0;
    p_end[1] = 0;
    p_end[2] = 0;
  }
  *(_OWORD *)&this[3].__end_ = a2[5];
  this[4].__begin_ = (std::vector<std::string>::pointer)*((void *)a2 + 12);
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  int v27 = (void **)(a2 + 5);
  *((void *)a2 + 12) = 0;
  int v21 = this[4].__end_;
  if (v21)
  {
    this[4].__end_cap_.__value_ = v21;
    operator delete(v21);
    std::vector<std::string>::pointer *v11 = 0;
    v11[1] = 0;
    v11[2] = 0;
  }
  *(_OWORD *)&this[4].__end_ = *(long long *)((char *)a2 + 104);
  this[5].__begin_ = (std::vector<std::string>::pointer)*((void *)a2 + 15);
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  *((void *)a2 + 15) = 0;
  long long v22 = a2[8];
  long long v23 = a2[9];
  LOBYTE(this[6].__end_cap_.__value_) = *((unsigned char *)a2 + 160);
  *(_OWORD *)&this[5].__end_ = v22;
  *(_OWORD *)&this[6].__begin_ = v23;
  std::vector<std::string>::__vdeallocate(v12);
  *(_OWORD *)&this[7].__begin_ = *(long long *)((char *)a2 + 168);
  this[7].__end_cap_.__value_ = (std::string *)*((void *)a2 + 23);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  int v24 = (void **)a2 + 5;
  *a2 = *(_OWORD *)v37;
  *((void *)a2 + 2) = v38;
  *(void *)uint64_t v16 = v39;
  *(_DWORD *)(v16 + 8) = end;
  if (*((char *)a2 + 63) < 0) {
    operator delete(*v24);
  }
  *(_OWORD *)int v24 = *(_OWORD *)v41;
  *((void *)a2 + 7) = v42;
  *((void *)a2 + 8) = v43;
  *((_DWORD *)a2 + 18) = v44;
  int v25 = *v27;
  if (*v27)
  {
    *((void *)a2 + 11) = v25;
    operator delete(v25);
  }
  *((void *)a2 + 10) = v30;
  *((void *)a2 + 11) = v29;
  *((void *)a2 + 12) = v28;
  int v26 = (void *)*((void *)a2 + 13);
  if (v26)
  {
    *((void *)a2 + 14) = v26;
    operator delete(v26);
  }
  *((void *)a2 + 13) = v35;
  *((void *)a2 + 14) = v33;
  *((void *)a2 + 15) = v31;
  a2[8] = v45;
  a2[9] = v46;
  *((unsigned char *)a2 + 160) = v47;
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)a2 + 7);
  *((void *)a2 + 21) = v36;
  *((void *)a2 + 22) = v34;
  *((void *)a2 + 23) = v32;
  std::vector<std::string>::pointer v49 = 0;
  BOOL v50 = 0;
  std::vector<std::string>::pointer v48 = 0;
  long long v51 = &v48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(std::vector<std::string> *a1, long long *a2, long long *a3)
{
  char v6 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1);
  int v7 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2);
  if (v6)
  {
    if (v7)
    {
      uint64_t v8 = a1;
    }
    else
    {
      std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
      if (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2))return; {
      uint64_t v8 = (std::vector<std::string> *)a2;
      }
    }
    uint64_t v9 = a3;
  }
  else
  {
    if (!v7) {
      return;
    }
    std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a2, a3);
    if (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1))return; {
    uint64_t v8 = a1;
    }
    uint64_t v9 = a2;
  }

  std::swap[abi:ne180100]<AMCP::Wire_Description>(v8, v9);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(std::vector<std::string> *a1, long long *a2, long long *a3, long long *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(a1, a2, a3);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a4, (uint64_t)a3))
  {
    std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a3, a4);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2))
    {
      std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a2, a3);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1))
      {
        std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(std::vector<std::string> *a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(a1, a2, a3, a4);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a5, (uint64_t)a4))
  {
    std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a4, a5);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a4, (uint64_t)a3))
    {
      std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a3, a4);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a3, (uint64_t)a2))
      {
        std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a2, a3);
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)a2, (uint64_t)a1))
        {
          std::swap[abi:ne180100]<AMCP::Wire_Description>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (a2 - a1) >> 6;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = (long long *)(a2 - 192);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(a2 - 192, a1))std::swap[abi:ne180100]<AMCP::Wire_Description>((std::vector<std::string> *)a1, v6); {
      return 1;
      }
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (long long *)(a1 + 192), (long long *)(a2 - 192));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (long long *)(a1 + 192), (long long *)(a1 + 384), (long long *)(a2 - 192));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (long long *)(a1 + 192), (long long *)(a1 + 384), (long long *)(a1 + 576), (long long *)(a2 - 192));
      return 1;
    default:
      uint64_t v7 = a1 + 384;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Description *>((std::vector<std::string> *)a1, (long long *)(a1 + 192), (long long *)(a1 + 384));
      uint64_t v8 = a1 + 576;
      if (a1 + 576 == v2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      uint64_t v45 = v2;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>(v8, v7))
    {
      *(_OWORD *)std::vector<std::string>::pointer v48 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v8 + 24);
      uint64_t v49 = *(void *)(v8 + 16);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)uint64_t v8 = 0;
      uint64_t v50 = v11;
      int v51 = *(_DWORD *)(v8 + 32);
      long long v52 = *(_OWORD *)(v8 + 40);
      unint64_t v12 = *(std::string **)(v8 + 64);
      uint64_t v53 = *(void *)(v8 + 56);
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 40) = 0;
      int v55 = *(_DWORD *)(v8 + 72);
      uint64_t v54 = v12;
      *(_OWORD *)long long v56 = *(_OWORD *)(v8 + 80);
      uint64_t v57 = *(void *)(v8 + 96);
      *(void *)(v8 + 80) = 0;
      *(void *)(v8 + 88) = 0;
      *(_OWORD *)long long __p = *(_OWORD *)(v8 + 104);
      uint64_t v59 = *(void *)(v8 + 120);
      *(void *)(v8 + 96) = 0;
      *(void *)(v8 + 104) = 0;
      *(void *)(v8 + 112) = 0;
      *(void *)(v8 + 120) = 0;
      long long v13 = *(_OWORD *)(v8 + 128);
      long long v14 = *(_OWORD *)(v8 + 144);
      char v62 = *(unsigned char *)(v8 + 160);
      long long v60 = v13;
      long long v61 = v14;
      long long v63 = *(_OWORD *)(v8 + 168);
      uint64_t v64 = *(void *)(v8 + 184);
      *(void *)(v8 + 168) = 0;
      *(void *)(v8 + 176) = 0;
      uint64_t v15 = v9;
      *(void *)(v8 + 184) = 0;
      int v47 = v10;
      while (1)
      {
        uint64_t v16 = v15;
        uint64_t v17 = a1 + v15;
        uint64_t v18 = a1 + v15 + 576;
        if (*(char *)(a1 + v15 + 599) < 0) {
          operator delete(*(void **)v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 384);
        *(void *)(v18 + 16) = *(void *)(v17 + 400);
        *(unsigned char *)(v17 + 407) = 0;
        *(unsigned char *)(v17 + 384) = 0;
        *(void *)(v17 + 600) = *(void *)(v17 + 408);
        *(_DWORD *)(v17 + 608) = *(_DWORD *)(v17 + 416);
        uint64_t v19 = v17 + 616;
        if (*(char *)(v17 + 639) < 0) {
          operator delete(*(void **)v19);
        }
        uint64_t v20 = a1 + v16;
        uint64_t v21 = *(void *)(a1 + v16 + 448);
        *(void *)(v19 + 16) = *(void *)(a1 + v16 + 440);
        *(_OWORD *)uint64_t v19 = *(_OWORD *)(a1 + v16 + 424);
        *(unsigned char *)(v20 + 447) = 0;
        *(unsigned char *)(v20 + 424) = 0;
        *(void *)(v20 + 640) = v21;
        *(_DWORD *)(v20 + 648) = *(_DWORD *)(a1 + v16 + 456);
        long long v22 = *(void **)(a1 + v16 + 656);
        if (v22)
        {
          *(void *)(v20 + 664) = v22;
          operator delete(v22);
          *(void *)(v20 + 672) = 0;
        }
        *(_OWORD *)(v20 + 656) = *(_OWORD *)(v20 + 464);
        *(void *)(v20 + 672) = *(void *)(v20 + 480);
        *(void *)(v20 + 464) = 0;
        *(void *)(v20 + 472) = 0;
        *(void *)(v20 + 480) = 0;
        long long v23 = *(void **)(v20 + 680);
        if (v23)
        {
          *(void *)(a1 + v16 + 688) = v23;
          operator delete(v23);
          *(void *)(a1 + v16 + 696) = 0;
        }
        uint64_t v24 = v20 + 488;
        *(_OWORD *)(v20 + 680) = *(_OWORD *)(v20 + 488);
        uint64_t v25 = a1 + v16;
        *(void *)(v25 + 696) = *(void *)(a1 + v16 + 504);
        *(_OWORD *)uint64_t v24 = 0u;
        *(void *)(v24 + 16) = 0;
        long long v26 = *(_OWORD *)(a1 + v16 + 528);
        *(_OWORD *)(v25 + 704) = *(_OWORD *)(a1 + v16 + 512);
        *(_OWORD *)(v25 + 720) = v26;
        *(unsigned char *)(v25 + 736) = *(unsigned char *)(a1 + v16 + 544);
        int v27 = (std::vector<std::string> *)(a1 + v16 + 552);
        std::vector<std::string>::__vdeallocate((std::vector<std::string> *)(a1 + v16 + 744));
        *(_OWORD *)(a1 + v16 + 744) = *(_OWORD *)&v27->__begin_;
        *(void *)(v25 + 760) = *(void *)(v25 + 568);
        *(void *)(v25 + 568) = 0;
        *(_OWORD *)&v27->__begin_ = 0u;
        if (v16 == -384) {
          break;
        }
        char v28 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Wire_Description,AMCP::Wire_Description>((uint64_t)v48, v25 + 192);
        uint64_t v15 = v16 - 192;
        if ((v28 & 1) == 0)
        {
          int v29 = (std::vector<std::string> *)(a1 + v16);
          uint64_t v30 = a1 + v16 + 408;
          uint64_t v31 = a1 + v16 + 424;
          uint64_t v32 = a1 + v15 + 576;
          int v27 = v29 + 23;
          p_int end = &v29[21].__end_;
          p_end_cap = &v29[18].__end_cap_;
          std::vector<std::string>::pointer v34 = &v29[20].__end_;
          std::vector<std::string>::pointer v35 = &v29[19].__end_;
          goto LABEL_20;
        }
      }
      uint64_t v30 = v25 + 408;
      uint64_t v31 = v25 + 424;
      p_int end = (std::vector<std::string>::pointer *)(v25 + 512);
      p_end_cap = (std::__compressed_pair<std::string *> *)(v25 + 448);
      std::vector<std::string>::pointer v34 = (std::vector<std::string>::pointer *)(v25 + 488);
      std::vector<std::string>::pointer v35 = (std::vector<std::string>::pointer *)(v25 + 464);
      uint64_t v32 = a1;
LABEL_20:
      if (*(char *)(v32 + 23) < 0) {
        operator delete(*(void **)v32);
      }
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v48;
      *(void *)(v32 + 16) = v49;
      HIBYTE(v49) = 0;
      LOBYTE(v48[0]) = 0;
      *(void *)uint64_t v30 = v50;
      *(_DWORD *)(v30 + 8) = v51;
      if (*(char *)(v32 + 63) < 0) {
        operator delete(*(void **)v31);
      }
      *(_OWORD *)uint64_t v31 = v52;
      *(void *)(v31 + 16) = v53;
      HIBYTE(v53) = 0;
      LOBYTE(v52) = 0;
      p_end_cap->__value_ = v54;
      LODWORD(p_end_cap[1].__value_) = v55;
      std::vector<std::string>::pointer v36 = *v35;
      if (*v35)
      {
        *(void *)(v32 + 88) = v36;
        operator delete(v36);
        std::vector<std::string>::pointer *v35 = 0;
        v35[1] = 0;
        v35[2] = 0;
      }
      char v37 = v56[1];
      std::vector<std::string>::pointer *v35 = (std::vector<std::string>::pointer)v56[0];
      uint64_t v38 = v57;
      *(void *)(v32 + 88) = v37;
      *(void *)(v32 + 96) = v38;
      v56[1] = 0;
      uint64_t v57 = 0;
      v56[0] = 0;
      std::vector<std::string>::pointer v39 = *v34;
      uint64_t v2 = v45;
      if (*v34)
      {
        *(void *)(v32 + 112) = v39;
        operator delete(v39);
        std::vector<std::string>::pointer *v34 = 0;
        v34[1] = 0;
        v34[2] = 0;
      }
      long long v40 = __p[1];
      std::vector<std::string>::pointer *v34 = (std::vector<std::string>::pointer)__p[0];
      uint64_t v41 = v59;
      *(void *)(v32 + 112) = v40;
      *(void *)(v32 + 120) = v41;
      __p[1] = 0;
      uint64_t v59 = 0;
      __p[0] = 0;
      long long v42 = v61;
      *(_OWORD *)p_int end = v60;
      *((_OWORD *)p_end + 1) = v42;
      *((unsigned char *)p_end + 32) = v62;
      std::vector<std::string>::__vdeallocate(v27);
      uint64_t v43 = *((void *)&v63 + 1);
      v27->__begin_ = (std::vector<std::string>::pointer)v63;
      uint64_t v44 = v64;
      *(void *)(v32 + 176) = v43;
      *(void *)(v32 + 184) = v44;
      uint64_t v64 = 0;
      long long v63 = 0uLL;
      long long v65 = (void **)&v63;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v65);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (v56[0])
      {
        v56[1] = v56[0];
        operator delete(v56[0]);
      }
      if (SHIBYTE(v53) < 0) {
        operator delete((void *)v52);
      }
      if (SHIBYTE(v49) < 0) {
        operator delete(v48[0]);
      }
      int v10 = v47 + 1;
      if (v47 == 7) {
        return v8 + 192 == v45;
      }
    }
    uint64_t v7 = v8;
    v9 += 192;
    v8 += 192;
    if (v8 == v2) {
      return 1;
    }
  }
}

uint64_t std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 72);
  unint64_t v3 = (uint64_t *)(a2 + 72);
  if (*(_DWORD *)a1 < *(_DWORD *)a2) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = 1;
  }
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
    char v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 8), (void *)(a2 + 8));
    if (v7)
    {
LABEL_6:
      unsigned int v4 = (v7 >> 7) | 1;
      return (v4 >> 7) & 1;
    }
    int v8 = *(_DWORD *)(a1 + 32);
    int v9 = *(_DWORD *)(a2 + 32);
    BOOL v10 = v8 == v9;
    if (v8 < v9) {
      unsigned int v4 = -1;
    }
    else {
      unsigned int v4 = 1;
    }
    if (v10)
    {
      int v11 = *(_DWORD *)(a1 + 36);
      int v12 = *(_DWORD *)(a2 + 36);
      BOOL v13 = v11 == v12;
      unsigned int v4 = v11 < v12 ? -1 : 1;
      if (v13)
      {
        char v7 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 40), (void *)(a2 + 40));
        if (v7) {
          goto LABEL_6;
        }
        int v14 = *(_DWORD *)(a1 + 64);
        int v15 = *(_DWORD *)(a2 + 64);
        BOOL v16 = v14 == v15;
        if (v14 < v15) {
          unsigned int v4 = -1;
        }
        else {
          unsigned int v4 = 1;
        }
        if (v16)
        {
          uint64_t v17 = 0;
          while (1)
          {
            uint64_t v18 = *v2;
            uint64_t v19 = *v3;
            uint64_t v20 = 0x4EC4EC4EC4EC4EC5 * ((v2[1] - *v2) >> 3);
            uint64_t v21 = (v3[1] - *v3) >> 3;
            uint64_t v22 = 0x4EC4EC4EC4EC4EC5 * v21;
            uint64_t v23 = 0x4EC4EC4EC4EC4EC5 * v21 >= v20
                ? 0x4EC4EC4EC4EC4EC5 * ((v2[1] - *v2) >> 3)
                : 0x4EC4EC4EC4EC4EC5 * v21;
            if (v23 >= 1) {
              break;
            }
LABEL_31:
            v2 += 3;
            v3 += 3;
            ++v17;
            if (v20 != v22 || v17 == 2)
            {
              if (v20 < v22) {
                unsigned int v4 = -1;
              }
              else {
                unsigned int v4 = 1;
              }
              if (v20 == v22)
              {
                unsigned int v28 = *(_DWORD *)(a1 + 68);
                unsigned int v29 = *(_DWORD *)(a2 + 68);
                BOOL v30 = v28 == v29;
                if (v28 < v29) {
                  unsigned int v4 = -1;
                }
                else {
                  unsigned int v4 = 1;
                }
                if (v30) {
                  unsigned int v4 = 0;
                }
              }
              return (v4 >> 7) & 1;
            }
          }
          while (1)
          {
            uint64_t v37 = v18;
            uint64_t v38 = v18 + 40;
            uint64_t v39 = v18 + 88;
            uint64_t v40 = v18 + 92;
            uint64_t v24 = v18 + 96;
            uint64_t v41 = v18 + 96;
            uint64_t v32 = v19;
            uint64_t v33 = v19 + 40;
            uint64_t v34 = v19 + 88;
            uint64_t v35 = v19 + 92;
            uint64_t v25 = v19 + 96;
            uint64_t v36 = v19 + 96;
            if ((std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>(&v37, &v32) & 0x80) != 0)
            {
              unsigned int v4 = 255;
              return (v4 >> 7) & 1;
            }
            uint64_t v37 = v25 - 96;
            uint64_t v38 = v25 - 56;
            uint64_t v39 = v25 - 8;
            uint64_t v40 = v25 - 4;
            uint64_t v41 = v25;
            uint64_t v32 = v24 - 96;
            uint64_t v33 = v24 - 56;
            uint64_t v34 = v24 - 8;
            uint64_t v35 = v24 - 4;
            uint64_t v36 = v24;
            char v26 = std::__tuple_compare_three_way[abi:ne180100]<CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,CA::StreamDescription const&,AMCP::Index_Group<std::vector<std::string>,AMCP::Terminal_Tag_Type> const&,AMCP::Terminal_Source_Mix_Policy const&,int const&,BOOL const&,0ul,1ul,2ul,3ul,4ul>(&v37, &v32);
            if (v26 < 0) {
              break;
            }
            uint64_t v18 = v24 + 8;
            uint64_t v19 = v25 + 8;
            if (!--v23) {
              goto LABEL_31;
            }
          }
          unsigned int v4 = (v26 >> 7) & 1;
        }
      }
    }
  }
  return (v4 >> 7) & 1;
}

void std::swap[abi:ne180100]<AMCP::Node_Description>(int *a1, int *a2)
{
  uint64_t v4 = 0;
  int v5 = *a1;
  v24[0] = *a1;
  *(_OWORD *)uint64_t v25 = *(_OWORD *)(a1 + 2);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = *((void *)a1 + 4);
  *((void *)a1 + 3) = 0;
  uint64_t v26 = v6;
  uint64_t v27 = v7;
  int v8 = a1 + 10;
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 10);
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  uint64_t v9 = *((void *)a1 + 7);
  uint64_t v10 = *((void *)a1 + 8);
  *((void *)a1 + 7) = 0;
  uint64_t v29 = v9;
  uint64_t v30 = v10;
  do
  {
    int v11 = &v24[v4];
    int v12 = &a1[v4];
    *(_OWORD *)(v11 + 18) = *(_OWORD *)&a1[v4 + 18];
    *((void *)v11 + 11) = *(void *)&a1[v4 + 22];
    *((void *)v12 + 9) = 0;
    *((void *)v12 + 10) = 0;
    *((void *)v12 + 11) = 0;
    v4 += 6;
  }
  while (v4 != 12);
  *a1 = *a2;
  long long v13 = *(_OWORD *)(a2 + 2);
  *((void *)a1 + 3) = *((void *)a2 + 3);
  *(_OWORD *)(a1 + 2) = v13;
  *((unsigned char *)a2 + 31) = 0;
  *((unsigned char *)a2 + 8) = 0;
  *((void *)a1 + 4) = *((void *)a2 + 4);
  int v14 = (void **)(a2 + 10);
  if (*((char *)a1 + 63) < 0) {
    operator delete(*(void **)v8);
  }
  uint64_t v15 = 0;
  BOOL v16 = (void **)(a2 + 2);
  long long v17 = *(_OWORD *)v14;
  *((void *)v8 + 2) = *((void *)a2 + 7);
  *(_OWORD *)int v8 = v17;
  *((unsigned char *)a2 + 63) = 0;
  *((unsigned char *)a2 + 40) = 0;
  *((void *)a1 + 8) = *((void *)a2 + 8);
  do
  {
    uint64_t v18 = &a1[v15];
    uint64_t v19 = &a2[v15];
    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&a1[v15 + 18]);
    *(_OWORD *)(v18 + 18) = *(_OWORD *)&a2[v15 + 18];
    *((void *)v18 + 11) = *(void *)&a2[v15 + 22];
    *((void *)v19 + 9) = 0;
    *((void *)v19 + 10) = 0;
    *((void *)v19 + 11) = 0;
    v15 += 6;
  }
  while (v15 != 12);
  *a2 = v5;
  if (*((char *)a2 + 31) < 0) {
    operator delete(*v16);
  }
  *(_OWORD *)BOOL v16 = *(_OWORD *)v25;
  *((void *)a2 + 3) = v26;
  HIBYTE(v26) = 0;
  LOBYTE(v25[0]) = 0;
  *((void *)a2 + 4) = v7;
  if (*((char *)a2 + 63) < 0) {
    operator delete(*v14);
  }
  unint64_t v20 = 0;
  *(_OWORD *)int v14 = *(_OWORD *)__p;
  *((void *)a2 + 7) = v29;
  HIBYTE(v29) = 0;
  LOBYTE(__p[0]) = 0;
  *((void *)a2 + 8) = v10;
  do
  {
    uint64_t v21 = &a2[v20];
    uint64_t v22 = &v24[v20];
    std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&a2[v20 + 18]);
    *(_OWORD *)(v21 + 18) = *(_OWORD *)&v31[v20 * 4];
    *((void *)v21 + 11) = *(void *)&v31[v20 * 4 + 16];
    v22[10] = 0;
    v22[11] = 0;
    v22[9] = 0;
    v20 += 6;
  }
  while (v20 != 12);
  for (uint64_t i = 24; i != 12; i -= 6)
  {
    uint64_t v32 = (void **)&v24[i];
    std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v32);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2, int *a3)
{
  char v6 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1);
  int v7 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2);
  if (v6)
  {
    if (v7)
    {
      int v8 = a1;
    }
    else
    {
      std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
      if (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2))return; {
      int v8 = a2;
      }
    }
    uint64_t v9 = a3;
  }
  else
  {
    if (!v7) {
      return;
    }
    std::swap[abi:ne180100]<AMCP::Node_Description>(a2, a3);
    if (!std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1))return; {
    int v8 = a1;
    }
    uint64_t v9 = a2;
  }

  std::swap[abi:ne180100]<AMCP::Node_Description>(v8, v9);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2, int *a3, int *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a2, a3);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a4, (uint64_t)a3))
  {
    std::swap[abi:ne180100]<AMCP::Node_Description>(a3, a4);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2))
    {
      std::swap[abi:ne180100]<AMCP::Node_Description>(a2, a3);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1))
      {
        std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a2, a3, a4);
  if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a5, (uint64_t)a4))
  {
    std::swap[abi:ne180100]<AMCP::Node_Description>(a4, a5);
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a4, (uint64_t)a3))
    {
      std::swap[abi:ne180100]<AMCP::Node_Description>(a3, a4);
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a3, (uint64_t)a2))
      {
        std::swap[abi:ne180100]<AMCP::Node_Description>(a2, a3);
        if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)a2, (uint64_t)a1))
        {
          std::swap[abi:ne180100]<AMCP::Node_Description>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(int *a1, int *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xEEEEEEEEEEEEEEEFLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      char v6 = a2 - 30;
      if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)(a2 - 30), (uint64_t)a1))std::swap[abi:ne180100]<AMCP::Node_Description>(a1, v6); {
      return 1;
      }
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a2 - 30);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a1 + 60, a2 - 30);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a1 + 60, a1 + 90, a2 - 30);
      return 1;
    default:
      uint64_t v7 = (uint64_t)(a1 + 60);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Node_Description *>(a1, a1 + 30, a1 + 60);
      uint64_t v8 = (uint64_t)(a1 + 90);
      if (a1 + 90 == v2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      uint64_t v36 = v2;
      int v11 = a1;
      break;
  }
  while (1)
  {
    if (std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>(v8, v7))
    {
      int v38 = v10;
      uint64_t v12 = 0;
      v41[0] = *(_DWORD *)v8;
      uint64_t v13 = *(void *)(v8 + 32);
      uint64_t v43 = *(void *)(v8 + 24);
      uint64_t v14 = *(void *)(v8 + 64);
      uint64_t v46 = *(void *)(v8 + 56);
      uint64_t v44 = v13;
      uint64_t v47 = v14;
      long long v42 = *(_OWORD *)(v8 + 8);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)(v8 + 24) = 0;
      long long __p = *(_OWORD *)(v8 + 40);
      *(void *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 56) = 0;
      do
      {
        uint64_t v15 = &v41[v12];
        BOOL v16 = &v11[v12];
        *(_OWORD *)(v15 + 18) = *(_OWORD *)&v11[v12 + 108];
        *((void *)v15 + 11) = *(void *)&v11[v12 + 112];
        *((void *)v16 + 54) = 0;
        *((void *)v16 + 55) = 0;
        *((void *)v16 + 56) = 0;
        v12 += 6;
      }
      while (v12 != 12);
      uint64_t v37 = v11;
      uint64_t v39 = v9;
      uint64_t v40 = v8;
      uint64_t v17 = v9;
      while (1)
      {
        uint64_t v18 = v7;
        uint64_t v19 = v17;
        uint64_t v20 = v7 + 8;
        *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
        uint64_t v21 = (void **)(v8 + 8);
        if (*(char *)(v8 + 31) < 0) {
          operator delete(*v21);
        }
        *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
        *(void *)(v8 + 24) = *(void *)(v7 + 24);
        *(unsigned char *)(v7 + 31) = 0;
        *(unsigned char *)(v7 + 8) = 0;
        *(void *)(v8 + 32) = *(void *)(v7 + 32);
        uint64_t v22 = (void **)(v8 + 40);
        if (*(char *)(v8 + 63) < 0) {
          operator delete(*v22);
        }
        uint64_t v23 = v18 + 40;
        *(_OWORD *)uint64_t v22 = *(_OWORD *)(v18 + 40);
        *(void *)(v8 + 56) = *(void *)(v18 + 56);
        *(unsigned char *)(v18 + 63) = 0;
        *(unsigned char *)(v18 + 40) = 0;
        *(void *)(v8 + 64) = *(void *)(v18 + 64);
        uint64_t v24 = v19;
        uint64_t v25 = 2;
        do
        {
          uint64_t v26 = (char *)a1 + v24;
          std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)((char *)a1 + v24 + 432));
          *((_OWORD *)v26 + 27) = *(_OWORD *)((char *)a1 + v24 + 312);
          *((void *)v26 + 56) = *((void *)v26 + 41);
          *((void *)v26 + 40) = 0;
          *((void *)v26 + 41) = 0;
          *((void *)v26 + 39) = 0;
          v24 += 24;
          --v25;
        }
        while (v25);
        if ((int *)v18 == a1) {
          break;
        }
        uint64_t v7 = v18 - 120;
        char v27 = std::__less<void,void>::operator()[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description>((uint64_t)v41, v18 - 120);
        uint64_t v17 = v19 - 120;
        uint64_t v8 = v18;
        if ((v27 & 1) == 0) {
          goto LABEL_20;
        }
      }
      uint64_t v18 = (uint64_t)a1;
LABEL_20:
      *(_DWORD *)uint64_t v18 = v41[0];
      if (*(char *)(v18 + 31) < 0) {
        operator delete(*(void **)v20);
      }
      long long v28 = v42;
      *(void *)(v20 + 16) = v43;
      *(_OWORD *)uint64_t v20 = v28;
      HIBYTE(v43) = 0;
      LOBYTE(v42) = 0;
      *(void *)(v18 + 32) = v44;
      if (*(char *)(v18 + 63) < 0) {
        operator delete(*(void **)v23);
      }
      unint64_t v29 = 0;
      long long v30 = __p;
      *(void *)(v23 + 16) = v46;
      *(_OWORD *)uint64_t v23 = v30;
      HIBYTE(v46) = 0;
      LOBYTE(__p) = 0;
      *(void *)(v18 + 64) = v47;
      uint64_t v31 = (char *)a1 + v19 + 328;
      uint64_t v32 = (char *)a1 + v19;
      do
      {
        uint64_t v33 = &v41[v29 / 4];
        std::vector<AMCP::Terminal_Description>::__vdeallocate((uint64_t *)&v32[v29 + 312]);
        long long v34 = *(_OWORD *)&v48[v29];
        *(void *)&v31[v29] = *(void *)&v48[v29 + 16];
        *(_OWORD *)&v32[v29 + 312] = v34;
        v33[10] = 0;
        v33[11] = 0;
        v33[9] = 0;
        v29 += 24;
      }
      while (v29 != 48);
      int v10 = v38 + 1;
      uint64_t v35 = 24;
      int v11 = v37;
      do
      {
        uint64_t v49 = (void **)&v41[v35];
        std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v49);
        v35 -= 6;
      }
      while (v35 != 12);
      uint64_t v9 = v39;
      uint64_t v8 = v40;
      if (SHIBYTE(v46) < 0) {
        operator delete((void *)__p);
      }
      uint64_t v2 = v36;
      if (SHIBYTE(v43) < 0) {
        operator delete((void *)v42);
      }
      if (v38 == 7) {
        return v40 + 120 == (void)v36;
      }
    }
    uint64_t v7 = v8;
    v11 += 30;
    v9 += 120;
    v8 += 120;
    if ((int *)v8 == v2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *,false>(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  v189[2] = *MEMORY[0x1E4F143B8];
LABEL_2:
  unint64_t v8 = (unint64_t)a1;
  uint64_t v170 = a1 + 16;
  std::string v171 = a1 + 8;
  uint64_t v9 = a1 + 3;
  uint64_t v168 = a1 + 4;
  long long v169 = (void **)(a1 + 1);
  int v10 = a1 + 6;
  uint64_t v166 = a1 - 5;
  uint64_t v167 = a1 - 8;
  while (1)
  {
    uint64_t v11 = a2 - v8;
    unint64_t v12 = (uint64_t)(a2 - v8) >> 6;
    if (v5 || !v4)
    {
      switch(v12)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)(a2 - 64), (void *)(a2 - 40), (void *)v8, (void *)(v8 + 24)) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>((uint64_t *)v8, (long long *)(a2 - 64)); {
          break;
          }
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)v8, (void *)(v8 + 64), (long long *)(a2 - 64));
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)v8, (uint64_t *)(v8 + 64), v8 + 128, a2 - 64);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)v8, (uint64_t *)(v8 + 64), (uint64_t *)(v8 + 128), (uint64_t *)(v8 + 192), a2 - 64);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v11 <= 1535) {
      break;
    }
    unint64_t v178 = (uint64_t *)a2;
    if (!a3)
    {
      if (v8 != a2)
      {
        int64_t v176 = (v12 - 2) >> 1;
        int64_t v85 = v176;
        do
        {
          int64_t v86 = v85;
          if (v176 >= v85)
          {
            uint64_t v87 = (2 * v85) | 1;
            unint64_t v88 = v8 + (v87 << 6);
            uint64_t v89 = 2 * v85 + 2;
            int64_t v173 = v85;
            if (v89 < (uint64_t)v12)
            {
              char v90 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)(v8 + (v87 << 6)), (void *)(v88 + 24), (void *)(v88 + 64), (void *)(v88 + 88));
              int64_t v86 = v173;
              if (v90 < 0)
              {
                v88 += 64;
                uint64_t v87 = v89;
              }
            }
            unint64_t v91 = v8 + (v86 << 6);
            uint64_t v92 = (long long *)(v91 + 24);
            char v93 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)v88, (void *)(v88 + 24), (void *)v91, (void *)(v91 + 24));
            int64_t v86 = v173;
            if ((v93 & 0x80) == 0)
            {
              long long v94 = *(_OWORD *)v91;
              uint64_t v186 = *(void *)(v91 + 16);
              *(_OWORD *)long long v185 = v94;
              *(void *)(v91 + 8) = 0;
              *(void *)(v91 + 16) = 0;
              *(void *)unint64_t v91 = 0;
              long long v95 = *v92;
              uint64_t v188 = *(void *)(v91 + 40);
              long long __p = v95;
              *(void *)(v91 + 32) = 0;
              *(void *)(v91 + 40) = 0;
              *(void *)uint64_t v92 = 0;
              uint64_t v96 = *(void *)(v91 + 48);
              *(void *)((char *)v189 + 7) = *(void *)(v91 + 55);
              v189[0] = v96;
              do
              {
                unint64_t v97 = v88;
                if (*(char *)(v91 + 23) < 0) {
                  operator delete(*(void **)v91);
                }
                long long v98 = *(_OWORD *)v88;
                *(void *)(v91 + 16) = *(void *)(v88 + 16);
                *(_OWORD *)unint64_t v91 = v98;
                *(unsigned char *)(v88 + 23) = 0;
                *(unsigned char *)unint64_t v88 = 0;
                uint64_t v99 = (void **)(v91 + 24);
                if (*(char *)(v91 + 47) < 0) {
                  operator delete(*v99);
                }
                long long v100 = *(_OWORD *)(v88 + 24);
                *(void *)(v91 + 40) = *(void *)(v88 + 40);
                *(_OWORD *)uint64_t v99 = v100;
                uint64_t v102 = (void *)(v88 + 48);
                uint64_t v101 = *(void *)(v88 + 48);
                *(unsigned char *)(v88 + 47) = 0;
                *(unsigned char *)(v88 + 24) = 0;
                *(void *)(v91 + 55) = *(void *)(v88 + 55);
                *(void *)(v91 + 48) = v101;
                if (v176 < v87) {
                  break;
                }
                uint64_t v103 = (2 * v87) | 1;
                unint64_t v88 = v8 + (v103 << 6);
                uint64_t v104 = 2 * v87 + 2;
                if (v104 < (uint64_t)v12
                  && (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)(v8 + (v103 << 6)), (void *)(v88 + 24), (void *)(v88 + 64), (void *)(v88 + 88)) & 0x80u) != 0)
                {
                  v88 += 64;
                  uint64_t v103 = v104;
                }
                unint64_t v91 = v97;
                uint64_t v87 = v103;
                a2 = (unint64_t)v178;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)v88, (void *)(v88 + 24), v185, &__p) & 0x80) == 0);
              if (*(char *)(v97 + 23) < 0) {
                operator delete(*(void **)v97);
              }
              uint64_t v105 = (void **)(v97 + 24);
              long long v106 = *(_OWORD *)v185;
              *(void *)(v97 + 16) = v186;
              *(_OWORD *)unint64_t v97 = v106;
              HIBYTE(v186) = 0;
              LOBYTE(v185[0]) = 0;
              if (*(char *)(v97 + 47) < 0)
              {
                operator delete(*v105);
                int v109 = SHIBYTE(v186);
                long long v110 = __p;
                *(void *)(v97 + 40) = v188;
                *(_OWORD *)uint64_t v105 = v110;
                HIBYTE(v188) = 0;
                LOBYTE(__p) = 0;
                uint64_t v111 = v189[0];
                *(void *)(v97 + 55) = *(void *)((char *)v189 + 7);
                *uint64_t v102 = v111;
                if (v109 < 0) {
                  operator delete(v185[0]);
                }
              }
              else
              {
                long long v107 = __p;
                *(void *)(v97 + 40) = v188;
                *(_OWORD *)uint64_t v105 = v107;
                uint64_t v108 = v189[0];
                *(void *)(v97 + 55) = *(void *)((char *)v189 + 7);
                *uint64_t v102 = v108;
              }
              int64_t v86 = v173;
            }
          }
          int64_t v85 = v86 - 1;
        }
        while (v86);
        uint64_t v112 = (unint64_t)v11 >> 6;
        do
        {
          if (v112 >= 2)
          {
            uint64_t v113 = 0;
            char v114 = *(unsigned char *)v8;
            *(void *)&v184[14] = *(void *)(v8 + 15);
            *(_OWORD *)uint64_t v184 = *(_OWORD *)(v8 + 1);
            char v174 = *(unsigned char *)(v8 + 23);
            *(void *)(v8 + 8) = 0;
            *(void *)(v8 + 16) = 0;
            *(void *)unint64_t v8 = 0;
            char v177 = *(unsigned char *)(v8 + 24);
            *(void *)&v182[14] = *(void *)(v8 + 39);
            *(_OWORD *)long long v182 = *(_OWORD *)(v8 + 25);
            char v179 = *(unsigned char *)(v8 + 47);
            *(void *)(v8 + 32) = 0;
            *(void *)(v8 + 40) = 0;
            *(void *)&v180[7] = *(void *)(v8 + 55);
            *(void *)uint64_t v180 = *(void *)(v8 + 48);
            unint64_t v115 = v8;
            *(void *)(v8 + 24) = 0;
            do
            {
              unint64_t v116 = v115 + ((v113 + 1) << 6);
              uint64_t v117 = 2 * v113;
              uint64_t v113 = (2 * v113) | 1;
              uint64_t v118 = v117 + 2;
              if (v117 + 2 < v112
                && (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)v116, (void *)(v116 + 24), (void *)(v116 + 64), (void *)(v116 + 88)) & 0x80u) != 0)
              {
                v116 += 64;
                uint64_t v113 = v118;
              }
              if (*(char *)(v115 + 23) < 0) {
                operator delete(*(void **)v115);
              }
              long long v119 = *(_OWORD *)v116;
              *(void *)(v115 + 16) = *(void *)(v116 + 16);
              *(_OWORD *)unint64_t v115 = v119;
              *(unsigned char *)(v116 + 23) = 0;
              *(unsigned char *)unint64_t v116 = 0;
              int64_t v120 = (void **)(v115 + 24);
              if (*(char *)(v115 + 47) < 0) {
                operator delete(*v120);
              }
              long long v121 = *(_OWORD *)(v116 + 24);
              *(void *)(v115 + 40) = *(void *)(v116 + 40);
              *(_OWORD *)int64_t v120 = v121;
              uint64_t v123 = (uint64_t *)(v116 + 48);
              uint64_t v122 = *(void *)(v116 + 48);
              *(unsigned char *)(v116 + 47) = 0;
              *(unsigned char *)(v116 + 24) = 0;
              *(void *)(v115 + 55) = *(void *)(v116 + 55);
              *(void *)(v115 + 48) = v122;
              unint64_t v115 = v116;
            }
            while (v113 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
            uint64_t v124 = (void **)(v116 + 24);
            long long v125 = (void **)(a2 - 64);
            int v126 = *(char *)(v116 + 23);
            if (v116 == a2 - 64)
            {
              if (v126 < 0) {
                operator delete(*(void **)v116);
              }
              *(unsigned char *)unint64_t v116 = v114;
              *(void *)(v116 + 15) = *(void *)&v184[14];
              *(_OWORD *)(v116 + 1) = *(_OWORD *)v184;
              *(unsigned char *)(v116 + 23) = v174;
              if (*(char *)(v116 + 47) < 0) {
                operator delete(*v124);
              }
              *(unsigned char *)(v116 + 24) = v177;
              *(void *)(v116 + 39) = *(void *)&v182[14];
              *(_OWORD *)(v116 + 25) = *(_OWORD *)v182;
              *(unsigned char *)(v116 + 47) = v179;
              *uint64_t v123 = *(void *)v180;
              *(void *)(v116 + 55) = *(void *)&v180[7];
            }
            else
            {
              if (v126 < 0) {
                operator delete(*(void **)v116);
              }
              long long v127 = *(_OWORD *)v125;
              *(void *)(v116 + 16) = *(void *)(a2 - 48);
              *(_OWORD *)unint64_t v116 = v127;
              *(unsigned char *)(a2 - 41) = 0;
              *(unsigned char *)(a2 - 64) = 0;
              if (*(char *)(v116 + 47) < 0) {
                operator delete(*v124);
              }
              long long v128 = *(_OWORD *)(a2 - 40);
              *(void *)(v116 + 40) = *(void *)(a2 - 24);
              *(_OWORD *)uint64_t v124 = v128;
              uint64_t v129 = *(void *)(a2 - 16);
              *(unsigned char *)(a2 - 17) = 0;
              *(unsigned char *)(a2 - 40) = 0;
              *(void *)(v116 + 55) = *(void *)(a2 - 9);
              *uint64_t v123 = v129;
              if (*(char *)(a2 - 41) < 0) {
                operator delete(*v125);
              }
              *(unsigned char *)(a2 - 64) = v114;
              *(void *)(a2 - 49) = *(void *)&v184[14];
              *(_OWORD *)(a2 - 63) = *(_OWORD *)v184;
              *(unsigned char *)(a2 - 41) = v174;
              if (*(char *)(a2 - 17) < 0) {
                operator delete(*(void **)(a2 - 40));
              }
              *(unsigned char *)(a2 - 40) = v177;
              *(_OWORD *)(a2 - 39) = *(_OWORD *)v182;
              *(void *)(a2 - 25) = *(void *)&v182[14];
              *(unsigned char *)(a2 - 17) = v179;
              *(void *)(a2 - 9) = *(void *)&v180[7];
              *(void *)(a2 - 16) = *(void *)v180;
              uint64_t v130 = v116 + 64 - v8;
              if (v130 >= 65)
              {
                unint64_t v131 = (unint64_t)((v130 >> 6) - 2) >> 1;
                unint64_t v132 = v8 + (v131 << 6);
                if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)v132, (void *)(v132 + 24), (void *)v116, (void *)(v116 + 24)) & 0x80) != 0)
                {
                  long long v133 = *(_OWORD *)v116;
                  uint64_t v186 = *(void *)(v116 + 16);
                  *(_OWORD *)long long v185 = v133;
                  *(void *)(v116 + 8) = 0;
                  *(void *)(v116 + 16) = 0;
                  *(void *)unint64_t v116 = 0;
                  long long v134 = *(_OWORD *)v124;
                  uint64_t v188 = *(void *)(v116 + 40);
                  long long __p = v134;
                  *(void *)(v116 + 32) = 0;
                  *(void *)(v116 + 40) = 0;
                  *uint64_t v124 = 0;
                  uint64_t v135 = *v123;
                  *(void *)((char *)v189 + 7) = *(void *)(v116 + 55);
                  v189[0] = v135;
                  do
                  {
                    unint64_t v136 = v132;
                    if (*(char *)(v116 + 23) < 0) {
                      operator delete(*(void **)v116);
                    }
                    long long v137 = *(_OWORD *)v132;
                    *(void *)(v116 + 16) = *(void *)(v132 + 16);
                    *(_OWORD *)unint64_t v116 = v137;
                    *(unsigned char *)(v132 + 23) = 0;
                    *(unsigned char *)unint64_t v132 = 0;
                    uint64_t v138 = (void **)(v116 + 24);
                    if (*(char *)(v116 + 47) < 0) {
                      operator delete(*v138);
                    }
                    long long v139 = *(_OWORD *)(v136 + 24);
                    *(void *)(v116 + 40) = *(void *)(v136 + 40);
                    *(_OWORD *)uint64_t v138 = v139;
                    mach_port_t v141 = (void *)(v136 + 48);
                    uint64_t v140 = *(void *)(v136 + 48);
                    *(unsigned char *)(v136 + 47) = 0;
                    *(unsigned char *)(v136 + 24) = 0;
                    *(void *)(v116 + 55) = *(void *)(v136 + 55);
                    *(void *)(v116 + 48) = v140;
                    if (!v131) {
                      break;
                    }
                    unint64_t v131 = (v131 - 1) >> 1;
                    unint64_t v132 = v8 + (v131 << 6);
                    unint64_t v116 = v136;
                  }
                  while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)v132, (void *)(v132 + 24), v185, &__p) & 0x80) != 0);
                  if (*(char *)(v136 + 23) < 0) {
                    operator delete(*(void **)v136);
                  }
                  uint64_t v142 = (void **)(v136 + 24);
                  long long v143 = *(_OWORD *)v185;
                  *(void *)(v136 + 16) = v186;
                  *(_OWORD *)unint64_t v136 = v143;
                  HIBYTE(v186) = 0;
                  LOBYTE(v185[0]) = 0;
                  if (*(char *)(v136 + 47) < 0)
                  {
                    operator delete(*v142);
                    int v147 = SHIBYTE(v186);
                    long long v148 = __p;
                    *(void *)(v136 + 40) = v188;
                    *(_OWORD *)uint64_t v142 = v148;
                    HIBYTE(v188) = 0;
                    LOBYTE(__p) = 0;
                    uint64_t v149 = v189[0];
                    *(void *)(v136 + 55) = *(void *)((char *)v189 + 7);
                    *mach_port_t v141 = v149;
                    if (v147 < 0) {
                      operator delete(v185[0]);
                    }
                  }
                  else
                  {
                    long long v144 = __p;
                    *(void *)(v136 + 40) = v188;
                    *(_OWORD *)uint64_t v142 = v144;
                    uint64_t v145 = v189[0];
                    *(void *)(v136 + 55) = *(void *)((char *)v189 + 7);
                    *mach_port_t v141 = v145;
                  }
                }
              }
            }
          }
          a2 -= 64;
        }
        while ((unint64_t)v112-- > 2);
      }
      return;
    }
    unint64_t v13 = v8 + (v12 >> 1 << 6);
    if ((unint64_t)v11 > 0x2000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)v8, (void *)(v8 + (v12 >> 1 << 6)), (long long *)(a2 - 64));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v171, (void *)(v13 - 64), (long long *)(a2 - 128));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(v170, (void *)(v13 + 64), (long long *)(a2 - 192));
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)(v13 - 64), (void *)v13, (long long *)(v13 + 64));
      uint64_t v14 = *(void *)v8;
      v185[0] = *v169;
      *(void **)((char *)v185 + 7) = *(void **)((char *)v169 + 7);
      char v15 = *(unsigned char *)(v8 + 23);
      *(void *)unint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      uint64_t v16 = *(void *)(v8 + 24);
      *(void *)&long long v183 = *v168;
      *(void *)((char *)&v183 + 7) = *(void *)((char *)v168 + 7);
      char v17 = *(unsigned char *)(v8 + 47);
      v9[1] = 0;
      v9[2] = 0;
      *uint64_t v9 = 0;
      *(void *)((char *)&v181 + 7) = *(void *)((char *)v10 + 7);
      *(void *)&long long v181 = *v10;
      long long v18 = *(_OWORD *)v13;
      *(void *)(v8 + 16) = *(void *)(v13 + 16);
      *(_OWORD *)unint64_t v8 = v18;
      *(unsigned char *)(v13 + 23) = 0;
      *(unsigned char *)unint64_t v13 = 0;
      long long v19 = *(_OWORD *)(v13 + 24);
      uint64_t v20 = *(void *)(v13 + 48);
      v9[2] = *(void *)(v13 + 40);
      *(_OWORD *)uint64_t v9 = v19;
      *(unsigned char *)(v13 + 47) = 0;
      *(unsigned char *)(v13 + 24) = 0;
      *(void *)((char *)v10 + 7) = *(void *)(v13 + 55);
      *int v10 = v20;
      *(void *)unint64_t v13 = v14;
      uint64_t v21 = v185[0];
      *(void **)(v13 + 15) = *(void **)((char *)v185 + 7);
      *(void *)(v13 + 8) = v21;
      *(unsigned char *)(v13 + 23) = v15;
      *(void *)(v13 + 24) = v16;
      *(void *)(v13 + 39) = *(void *)((char *)&v183 + 7);
      *(void *)(v13 + 32) = v183;
      *(unsigned char *)(v13 + 47) = v17;
      *(void *)(v13 + 55) = *(void *)((char *)&v181 + 7);
      *(void *)(v13 + 48) = v181;
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)(v8 + (v12 >> 1 << 6)), (void *)v8, (long long *)(a2 - 64));
    }
    --a3;
    if ((a4 & 1) == 0
      && (std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v167, v166, (void *)v8, v9) & 0x80) == 0)
    {
      long long v43 = *(_OWORD *)v8;
      uint64_t v186 = *(void *)(v8 + 16);
      *(_OWORD *)long long v185 = v43;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)unint64_t v8 = 0;
      long long v44 = *(_OWORD *)v9;
      uint64_t v188 = v9[2];
      long long __p = v44;
      v9[1] = 0;
      v9[2] = 0;
      *uint64_t v9 = 0;
      uint64_t v45 = *(void *)(v8 + 48);
      *(void *)((char *)v189 + 7) = *(void *)(v8 + 55);
      v189[0] = v45;
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, (void *)(a2 - 64), (void *)(a2 - 40)) & 0x80) != 0)
      {
        unint64_t v48 = v8;
        do
        {
          a1 = (uint64_t *)(v48 + 64);
          char v49 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, (void *)(v48 + 64), (void *)(v48 + 88));
          unint64_t v48 = (unint64_t)a1;
        }
        while ((v49 & 0x80) == 0);
      }
      else
      {
        uint64_t v46 = (void *)(v8 + 88);
        do
        {
          a1 = v46 - 3;
          if ((unint64_t)(v46 - 3) >= a2) {
            break;
          }
          char v47 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, v46 - 3, v46);
          v46 += 8;
        }
        while ((v47 & 0x80) == 0);
      }
      uint64_t v50 = (long long *)a2;
      if ((unint64_t)a1 < a2)
      {
        unint64_t v51 = a2;
        do
        {
          uint64_t v50 = (long long *)(v51 - 64);
          char v52 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, (void *)(v51 - 64), (void *)(v51 - 40));
          unint64_t v51 = (unint64_t)v50;
        }
        while (v52 < 0);
      }
      while (a1 < (uint64_t *)v50)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, v50);
        do
        {
          uint64_t v53 = a1 + 11;
          a1 += 8;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, a1, v53) & 0x80) == 0);
        do
        {
          uint64_t v54 = (void *)v50 - 5;
          v50 -= 4;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, v50, v54) & 0x80) != 0);
      }
      int v55 = (void **)(a1 - 8);
      BOOL v4 = (unint64_t)(a1 - 8) >= v8;
      BOOL v5 = a1 - 8 == (uint64_t *)v8;
      if (a1 - 8 != (uint64_t *)v8)
      {
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v56 = *(_OWORD *)v55;
        *(void *)(v8 + 16) = *(a1 - 6);
        *(_OWORD *)unint64_t v8 = v56;
        *((unsigned char *)a1 - 41) = 0;
        *((unsigned char *)a1 - 64) = 0;
        if (*(char *)(v8 + 47) < 0) {
          operator delete((void *)*v9);
        }
        long long v57 = *(_OWORD *)(a1 - 5);
        v9[2] = *(a1 - 3);
        *(_OWORD *)uint64_t v9 = v57;
        *((unsigned char *)a1 - 17) = 0;
        *((unsigned char *)a1 - 40) = 0;
        uint64_t v58 = *(a1 - 2);
        *(void *)(v8 + 55) = *(uint64_t *)((char *)a1 - 9);
        *(void *)(v8 + 48) = v58;
      }
      if (*((char *)a1 - 41) < 0) {
        operator delete(*v55);
      }
      long long v59 = *(_OWORD *)v185;
      *(a1 - 6) = v186;
      *(_OWORD *)int v55 = v59;
      HIBYTE(v186) = 0;
      LOBYTE(v185[0]) = 0;
      long long v60 = (void **)(a1 - 5);
      if (*((char *)a1 - 17) < 0) {
        operator delete(*v60);
      }
      long long v61 = __p;
      *(a1 - 3) = v188;
      *(_OWORD *)long long v60 = v61;
      HIBYTE(v188) = 0;
      LOBYTE(__p) = 0;
      uint64_t v62 = v189[0];
      *(uint64_t *)((char *)a1 - 9) = *(void *)((char *)v189 + 7);
      *(a1 - 2) = v62;
      if (SHIBYTE(v188) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v186) < 0) {
        operator delete(v185[0]);
      }
      goto LABEL_76;
    }
    long long v22 = *(_OWORD *)v8;
    uint64_t v186 = *(void *)(v8 + 16);
    *(_OWORD *)long long v185 = v22;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)unint64_t v8 = 0;
    long long v23 = *(_OWORD *)v9;
    uint64_t v188 = v9[2];
    long long __p = v23;
    v9[1] = 0;
    v9[2] = 0;
    *uint64_t v9 = 0;
    uint64_t v24 = *v10;
    *(void *)((char *)v189 + 7) = *(void *)((char *)v10 + 7);
    uint64_t v25 = (uint64_t *)v8;
    v189[0] = v24;
    do
    {
      uint64_t v26 = v25;
      v25 += 8;
    }
    while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v25, v26 + 11, v185, &__p) & 0x80) != 0);
    unint64_t v27 = a2;
    if (v26 == (uint64_t *)v8)
    {
      while ((unint64_t)v25 < a2)
      {
        long long v28 = (long long *)(a2 - 64);
        char v30 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)(a2 - 64), (void *)(a2 - 40), v185, &__p);
        a2 -= 64;
        if (v30 < 0) {
          goto LABEL_20;
        }
      }
      long long v28 = (long long *)a2;
    }
    else
    {
      do
      {
        long long v28 = (long long *)(v27 - 64);
        char v29 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)(v27 - 64), (void *)(v27 - 40), v185, &__p);
        unint64_t v27 = (unint64_t)v28;
      }
      while ((v29 & 0x80) == 0);
    }
LABEL_20:
    if (v25 < (uint64_t *)v28)
    {
      uint64_t v31 = v28;
      a1 = v25;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, v31);
        do
        {
          uint64_t v32 = a1 + 11;
          a1 += 8;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a1, v32, v185, &__p) & 0x80) != 0);
        do
        {
          uint64_t v33 = (void *)v31 - 5;
          v31 -= 4;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v31, v33, v185, &__p) & 0x80) == 0);
      }
      while (a1 < (uint64_t *)v31);
    }
    else
    {
      a1 = v25;
    }
    long long v34 = (void **)(a1 - 8);
    if (a1 - 8 != (uint64_t *)v8)
    {
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      long long v35 = *(_OWORD *)v34;
      *(void *)(v8 + 16) = *(a1 - 6);
      *(_OWORD *)unint64_t v8 = v35;
      *((unsigned char *)a1 - 41) = 0;
      *((unsigned char *)a1 - 64) = 0;
      if (*(char *)(v8 + 47) < 0) {
        operator delete((void *)*v9);
      }
      long long v36 = *(_OWORD *)(a1 - 5);
      v9[2] = *(a1 - 3);
      *(_OWORD *)uint64_t v9 = v36;
      *((unsigned char *)a1 - 17) = 0;
      *((unsigned char *)a1 - 40) = 0;
      uint64_t v37 = *(a1 - 2);
      *(void *)((char *)v10 + 7) = *(uint64_t *)((char *)a1 - 9);
      *int v10 = v37;
    }
    if (*((char *)a1 - 41) < 0) {
      operator delete(*v34);
    }
    long long v38 = *(_OWORD *)v185;
    *(a1 - 6) = v186;
    *(_OWORD *)long long v34 = v38;
    HIBYTE(v186) = 0;
    LOBYTE(v185[0]) = 0;
    uint64_t v39 = (void **)(a1 - 5);
    if (*((char *)a1 - 17) < 0) {
      operator delete(*v39);
    }
    long long v40 = __p;
    *(a1 - 3) = v188;
    *(_OWORD *)uint64_t v39 = v40;
    HIBYTE(v188) = 0;
    LOBYTE(__p) = 0;
    uint64_t v41 = v189[0];
    *(uint64_t *)((char *)a1 - 9) = *(void *)((char *)v189 + 7);
    *(a1 - 2) = v41;
    if (SHIBYTE(v188) < 0) {
      operator delete((void *)__p);
    }
    a2 = (unint64_t)v178;
    if (SHIBYTE(v186) < 0) {
      operator delete(v185[0]);
    }
    if (v25 < (uint64_t *)v28) {
      goto LABEL_46;
    }
    BOOL v42 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>((uint64_t *)v8, a1 - 8);
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, v178))
    {
      if (v42) {
        goto LABEL_2;
      }
LABEL_46:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *,false>(v8, a1 - 8, a3, a4 & 1);
LABEL_76:
      a4 = 0;
      goto LABEL_2;
    }
    a2 = (unint64_t)(a1 - 8);
    if (v42) {
      return;
    }
  }
  if (a4)
  {
    if (v8 != a2)
    {
      long long v63 = (void *)(v8 + 64);
      if (v8 + 64 != a2)
      {
        uint64_t v64 = 0;
        long long v65 = (void *)v8;
        do
        {
          int v66 = v63;
          uint64_t v67 = (long long *)(v65 + 11);
          if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v63, v65 + 11, v65, v65 + 3) & 0x80) != 0)
          {
            long long v68 = *(_OWORD *)v66;
            uint64_t v186 = v66[2];
            *(_OWORD *)long long v185 = v68;
            v66[1] = 0;
            v66[2] = 0;
            *int v66 = 0;
            long long __p = *v67;
            uint64_t v188 = v65[13];
            v65[12] = 0;
            v65[13] = 0;
            *(void *)uint64_t v67 = 0;
            v189[0] = v65[14];
            *(void *)((char *)v189 + 7) = *(void *)((char *)v65 + 119);
            uint64_t v69 = v64;
            while (1)
            {
              uint64_t v70 = v69;
              uint64_t v71 = v8 + v69;
              uint64_t v72 = v8 + v69 + 64;
              if (*(char *)(v8 + v69 + 87) < 0) {
                operator delete(*(void **)v72);
              }
              *(_OWORD *)uint64_t v72 = *(_OWORD *)v71;
              *(void *)(v72 + 16) = *(void *)(v71 + 16);
              *(unsigned char *)(v71 + 23) = 0;
              *(unsigned char *)uint64_t v71 = 0;
              long long v73 = (void **)(v71 + 88);
              if (*(char *)(v71 + 111) < 0) {
                operator delete(*v73);
              }
              uint64_t v74 = v8 + v70;
              *(_OWORD *)long long v73 = *(_OWORD *)(v8 + v70 + 24);
              uint64_t v75 = *(void *)(v8 + v70 + 48);
              *(void *)(v71 + 104) = *(void *)(v8 + v70 + 40);
              *(unsigned char *)(v74 + 47) = 0;
              *(unsigned char *)(v74 + 24) = 0;
              *(void *)(v74 + 112) = v75;
              *(void *)(v74 + 119) = *(void *)(v8 + v70 + 55);
              if (!v70) {
                break;
              }
              char v76 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, (void *)(v74 - 64), (void *)(v74 - 40));
              uint64_t v69 = v70 - 64;
              if ((v76 & 0x80) == 0)
              {
                unint64_t v77 = v8 + v70;
                uint64_t v78 = v8 + v70;
                long long v79 = (void *)(v8 + v70 + 48);
                uint64_t v80 = v78 + 24;
                goto LABEL_98;
              }
            }
            long long v79 = (void *)(v74 + 48);
            uint64_t v80 = v74 + 24;
            unint64_t v77 = v8;
LABEL_98:
            if (*(char *)(v77 + 23) < 0) {
              operator delete(*(void **)v77);
            }
            char v81 = 0;
            long long v82 = *(_OWORD *)v185;
            *(void *)(v77 + 16) = v186;
            *(_OWORD *)unint64_t v77 = v82;
            HIBYTE(v186) = 0;
            LOBYTE(v185[0]) = 0;
            if (*(char *)(v77 + 47) < 0)
            {
              operator delete(*(void **)v80);
              char v81 = HIBYTE(v186);
            }
            long long v83 = __p;
            *(void *)(v80 + 16) = v188;
            *(_OWORD *)uint64_t v80 = v83;
            HIBYTE(v188) = 0;
            LOBYTE(__p) = 0;
            uint64_t v84 = v189[0];
            *(void *)((char *)v79 + 7) = *(void *)((char *)v189 + 7);
            *long long v79 = v84;
            if (v81 < 0) {
              operator delete(v185[0]);
            }
          }
          long long v63 = v66 + 8;
          v64 += 64;
          long long v65 = v66;
        }
        while (v66 + 8 != (void *)a2);
      }
    }
  }
  else if (v8 != a2)
  {
    int v150 = (void *)(v8 + 64);
    if (v8 + 64 != a2)
    {
      long long v151 = (void *)(v8 + 112);
      do
      {
        int v152 = v150;
        uint64_t v153 = (long long *)(v8 + 88);
        if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v150, (void *)(v8 + 88), (void *)v8, (void *)(v8 + 24)) & 0x80) != 0)
        {
          long long v154 = *(_OWORD *)v152;
          uint64_t v186 = v152[2];
          *(_OWORD *)long long v185 = v154;
          v152[1] = 0;
          v152[2] = 0;
          *int v152 = 0;
          long long __p = *v153;
          uint64_t v188 = *(void *)(v8 + 104);
          *(void *)(v8 + 96) = 0;
          *(void *)(v8 + 104) = 0;
          *(void *)uint64_t v153 = 0;
          v189[0] = *(void *)(v8 + 112);
          *(void *)((char *)v189 + 7) = *(void *)(v8 + 119);
          char v155 = v151;
          do
          {
            long long v156 = v155;
            int64_t v157 = (void **)(v155 - 6);
            if (*((char *)v156 - 25) < 0) {
              operator delete(*v157);
            }
            uint64_t v158 = (void **)(v156 - 14);
            *(_OWORD *)int64_t v157 = *((_OWORD *)v156 - 7);
            v157[2] = (void *)*(v156 - 12);
            *((unsigned char *)v156 - 89) = 0;
            *((unsigned char *)v156 - 112) = 0;
            long long v159 = (void **)(v156 - 3);
            if (*((char *)v156 - 1) < 0) {
              operator delete(*v159);
            }
            *(_OWORD *)long long v159 = *(_OWORD *)(v156 - 11);
            *(v156 - 1) = *(v156 - 9);
            *((unsigned char *)v156 - 65) = 0;
            char v155 = v156 - 8;
            uint64_t v160 = *(v156 - 8);
            *((unsigned char *)v156 - 88) = 0;
            *long long v156 = v160;
            *(void *)((char *)v156 + 7) = *(void *)((char *)v156 - 57);
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v185, &__p, v156 - 22, v156 - 19) & 0x80) != 0);
          if (*((char *)v156 - 89) < 0) {
            operator delete(*v158);
          }
          char v161 = 0;
          uint64_t v162 = (void **)(v156 - 11);
          long long v163 = *(_OWORD *)v185;
          v158[2] = (void *)v186;
          *(_OWORD *)uint64_t v158 = v163;
          HIBYTE(v186) = 0;
          LOBYTE(v185[0]) = 0;
          if (*((char *)v158 + 47) < 0)
          {
            operator delete(*v162);
            char v161 = HIBYTE(v186);
          }
          long long v164 = __p;
          v162[2] = (void *)v188;
          *(_OWORD *)uint64_t v162 = v164;
          HIBYTE(v188) = 0;
          LOBYTE(__p) = 0;
          uint64_t v165 = v189[0];
          *(void *)((char *)v155 + 7) = *(void *)((char *)v189 + 7);
          *char v155 = v165;
          if (v161 < 0) {
            operator delete(v185[0]);
          }
        }
        int v150 = v152 + 8;
        v151 += 8;
        unint64_t v8 = (unint64_t)v152;
      }
      while (v152 + 8 != (void *)a2);
    }
  }
}

void std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    BOOL v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(void *a1, void *a2, void *a3, void *a4)
{
  uint64_t result = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3);
  if (!(_BYTE)result)
  {
    return std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a4);
  }
  return result;
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v14 = a1[1];
  *(void *)&v14[7] = *(uint64_t *)((char *)a1 + 15);
  char v4 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  char v6 = a1 + 3;
  uint64_t v5 = a1[3];
  *(void *)unint64_t v13 = a1[4];
  *(void *)&v13[7] = *(uint64_t *)((char *)a1 + 39);
  char v7 = *((unsigned char *)a1 + 47);
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  unint64_t v8 = a1 + 6;
  *(void *)&v12[7] = *(uint64_t *)((char *)a1 + 55);
  *(void *)unint64_t v12 = a1[6];
  long long v9 = *a2;
  a1[2] = *((void *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  if (*((char *)a1 + 47) < 0) {
    operator delete((void *)*v6);
  }
  long long v10 = *(long long *)((char *)a2 + 24);
  v6[2] = *((void *)a2 + 5);
  *(_OWORD *)char v6 = v10;
  uint64_t v11 = *((void *)a2 + 6);
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  *(void *)((char *)v8 + 7) = *(void *)((char *)a2 + 55);
  *unint64_t v8 = v11;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v3;
  *((void *)a2 + 1) = *(void *)v14;
  *(void *)((char *)a2 + 15) = *(void *)&v14[7];
  *((unsigned char *)a2 + 23) = v4;
  if (*((char *)a2 + 47) < 0) {
    operator delete(*((void **)a2 + 3));
  }
  *((void *)a2 + 3) = v5;
  *((void *)a2 + 4) = *(void *)v13;
  *(void *)((char *)a2 + 39) = *(void *)&v13[7];
  *((unsigned char *)a2 + 47) = v7;
  *((void *)a2 + 6) = *(void *)v12;
  *(void *)((char *)a2 + 55) = *(void *)&v12[7];
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, void *a2, long long *a3)
{
  char v6 = a2 + 3;
  char v7 = a1 + 3;
  char v8 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, a2 + 3, a1, a1 + 3);
  int v9 = (char)std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a3, (void *)a3 + 3, a2, v6);
  if (v8 < 0)
  {
    long long v10 = a1;
    if ((v9 & 0x80000000) == 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (long long *)a2);
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a3, (void *)a3 + 3, a2, v6) & 0x80) == 0)return; {
      long long v10 = a2;
      }
    }
    uint64_t v11 = a3;
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a2, a3);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, v6, a1, v7) & 0x80) == 0)return; {
    long long v10 = a1;
    }
    uint64_t v11 = (long long *)a2;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(v10, v11);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a2, (long long *)a3);
  if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)a4, (void *)(a4 + 24), (void *)a3, (void *)(a3 + 24)) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>((uint64_t *)a3, (long long *)a4);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)a3, (void *)(a3 + 24), a2, a2 + 3) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a2, (long long *)a3);
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, a2 + 3, a1, a1 + 3) & 0x80) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (long long *)a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a2, (uint64_t)a3, (uint64_t)a4);
  if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>((void *)a5, (void *)(a5 + 24), a4, a4 + 3) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a4, (long long *)a5);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a4, a4 + 3, a3, a3 + 3) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a3, (long long *)a4);
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a3, a3 + 3, a2, a2 + 3) & 0x80) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a2, (long long *)a3);
        if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2, a2 + 3, a1, a1 + 3) & 0x80) != 0)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (long long *)a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(a2 - 8, a2 - 5, a1, a1 + 3) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Connection_Properties *&,AMCP::Wire_Connection_Properties *&>(a1, (long long *)a2 - 4); {
      return 1;
      }
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, (long long *)a2 - 4);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, (uint64_t)(a1 + 16), (uint64_t)(a2 - 8));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, a1 + 16, a1 + 24, (uint64_t)(a2 - 8));
      return 1;
    default:
      char v6 = a1 + 16;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *>(a1, a1 + 8, (long long *)a1 + 8);
      char v7 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    long long v10 = (long long *)(v7 + 3);
    if ((std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(v7, v7 + 3, v6, v6 + 3) & 0x80) != 0)
    {
      *(_OWORD *)long long __p = *(_OWORD *)v7;
      uint64_t v25 = v7[2];
      v7[1] = 0;
      v7[2] = 0;
      *char v7 = 0;
      long long v26 = *v10;
      uint64_t v27 = v7[5];
      *(void *)long long v10 = 0;
      v7[4] = 0;
      void v7[5] = 0;
      v28[0] = v7[6];
      uint64_t v11 = v8;
      *(void *)((char *)v28 + 7) = *(uint64_t *)((char *)v7 + 55);
      while (1)
      {
        uint64_t v12 = v11;
        unint64_t v13 = (char *)a1 + v11;
        uint64_t v14 = (uint64_t)a1 + v11 + 192;
        if (*((char *)a1 + v11 + 215) < 0) {
          operator delete(*(void **)v14);
        }
        *(_OWORD *)uint64_t v14 = *((_OWORD *)v13 + 8);
        *(void *)(v14 + 16) = *((void *)v13 + 18);
        v13[151] = 0;
        v13[128] = 0;
        char v15 = (void **)(v13 + 216);
        if (v13[239] < 0) {
          operator delete(*v15);
        }
        uint64_t v16 = (char *)a1 + v12;
        *(_OWORD *)char v15 = *(_OWORD *)((char *)a1 + v12 + 152);
        uint64_t v17 = *(uint64_t *)((char *)a1 + v12 + 176);
        *((void *)v13 + 29) = *(uint64_t *)((char *)a1 + v12 + 168);
        v16[175] = 0;
        v16[152] = 0;
        *((void *)v16 + 30) = v17;
        *(void *)(v16 + 247) = *(uint64_t *)((char *)a1 + v12 + 183);
        if (v12 == -128) {
          break;
        }
        char v18 = std::__tuple_compare_three_way[abi:ne180100]<std::string const&,std::string const&,std::string const&,std::string const&,0ul,1ul>(__p, &v26, (void *)v16 + 8, (void *)v16 + 11);
        uint64_t v11 = v12 - 64;
        if ((v18 & 0x80) == 0)
        {
          uint64_t v19 = (uint64_t)a1 + v11 + 192;
          uint64_t v20 = (char *)a1 + v12;
          uint64_t v21 = (uint64_t *)((char *)a1 + v12 + 176);
          long long v22 = v20 + 152;
          goto LABEL_16;
        }
      }
      uint64_t v21 = v16 + 176;
      long long v22 = v16 + 152;
      uint64_t v19 = (uint64_t)a1;
LABEL_16:
      if (*(char *)(v19 + 23) < 0) {
        operator delete(*(void **)v19);
      }
      char v23 = 0;
      *(_OWORD *)uint64_t v19 = *(_OWORD *)__p;
      *(void *)(v19 + 16) = v25;
      HIBYTE(v25) = 0;
      LOBYTE(__p[0]) = 0;
      if (*(char *)(v19 + 47) < 0)
      {
        operator delete(*(void **)v22);
        char v23 = HIBYTE(v25);
      }
      *(_OWORD *)long long v22 = v26;
      *((void *)v22 + 2) = v27;
      HIBYTE(v27) = 0;
      LOBYTE(v26) = 0;
      *uint64_t v21 = v28[0];
      *(void *)((char *)v21 + 7) = *(void *)((char *)v28 + 7);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (++v9 == 8) {
        return v7 + 8 == a2;
      }
    }
    char v6 = v7;
    v8 += 64;
    v7 += 8;
    if (v7 == a2) {
      return 1;
    }
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(unint64_t a1, __n128 *a2, uint64_t a3, char a4)
{
  uint64_t v103 = *MEMORY[0x1E4F143B8];
  while (2)
  {
    long long v10 = &a2[-2].n128_u64[1];
    uint64_t v96 = a2 - 3;
    long long v98 = a2;
    uint64_t v11 = &a2[-5].n128_u64[1];
    uint64_t v12 = (__n128 *)a1;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          a1 = (unint64_t)v12;
          uint64_t v13 = (char *)a2 - (char *)v12;
          unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v12) >> 3);
          if (v5 || !v4)
          {
            switch(v14)
            {
              case 0uLL:
              case 1uLL:
                return;
              case 2uLL:
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, (void *)a1) & 0x80) != 0)
                {
                  __n128 v41 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v41;
                  long long v42 = *(_OWORD *)v10;
                  *(void *)(a1 + 16) = v10[2];
                  *(_OWORD *)a1 = v42;
                  __n128 v43 = v99;
                  v10[2] = v100;
                  *(__n128 *)long long v10 = v43;
                }
                break;
              case 3uLL:
                std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24), v10);
                break;
              case 4uLL:
                std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), v10);
                break;
              case 5uLL:
                std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (void *)(a1 + 24), (void *)(a1 + 48), (void *)(a1 + 72), v10);
                break;
              default:
                JUMPOUT(0);
            }
            return;
          }
          if (v13 <= 575)
          {
            long long v44 = (__n128 *)(a1 + 24);
            BOOL v46 = (__n128 *)a1 == a2 || v44 == a2;
            if (a4)
            {
              if (!v46)
              {
                uint64_t v47 = 0;
                n128_u64 = (void *)a1;
                do
                {
                  char v49 = n128_u64;
                  n128_u64 = v44->n128_u64;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, v49) & 0x80) != 0)
                  {
                    __n128 v50 = *(__n128 *)n128_u64;
                    unint64_t v100 = n128_u64[2];
                    __n128 v99 = v50;
                    n128_u64[1] = 0;
                    n128_u64[2] = 0;
                    void *n128_u64 = 0;
                    uint64_t v51 = v47;
                    while (1)
                    {
                      uint64_t v52 = a1 + v51;
                      *(_OWORD *)(v52 + 24) = *(_OWORD *)(a1 + v51);
                      *(void *)(v52 + 40) = *(void *)(a1 + v51 + 16);
                      *(unsigned char *)(v52 + 23) = 0;
                      *(unsigned char *)uint64_t v52 = 0;
                      if (!v51) {
                        break;
                      }
                      v51 -= 24;
                      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v99, (void *)(v51 + a1)) & 0x80) == 0)
                      {
                        uint64_t v53 = a1 + v51 + 24;
                        goto LABEL_87;
                      }
                    }
                    uint64_t v53 = a1;
LABEL_87:
                    __n128 v54 = v99;
                    *(void *)(v53 + 16) = v100;
                    *(__n128 *)uint64_t v53 = v54;
                  }
                  long long v44 = (__n128 *)(n128_u64 + 3);
                  v47 += 24;
                }
                while (n128_u64 + 3 != (void *)a2);
              }
            }
            else if (!v46)
            {
              do
              {
                uint64_t v89 = (void *)a1;
                a1 = (unint64_t)v44;
                if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v44, v89) & 0x80) != 0)
                {
                  __n128 v90 = *(__n128 *)a1;
                  unint64_t v100 = *(void *)(a1 + 16);
                  __n128 v99 = v90;
                  *(void *)(a1 + 8) = 0;
                  *(void *)(a1 + 16) = 0;
                  *(void *)a1 = 0;
                  unint64_t v91 = a1;
                  do
                  {
                    unint64_t v92 = v91 - 24;
                    *(_OWORD *)unint64_t v91 = *(_OWORD *)(v91 - 24);
                    *(void *)(v91 + 16) = *(void *)(v91 - 8);
                    *(unsigned char *)(v91 - 1) = 0;
                    *(unsigned char *)(v91 - 24) = 0;
                    char v93 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v99, (void *)(v91 - 48));
                    unint64_t v91 = v92;
                  }
                  while (v93 < 0);
                  __n128 v94 = v99;
                  *(void *)(v92 + 16) = v100;
                  *(__n128 *)unint64_t v92 = v94;
                }
                long long v44 = (__n128 *)(a1 + 24);
              }
              while ((__n128 *)(a1 + 24) != a2);
            }
            return;
          }
          if (!a3)
          {
            if ((__n128 *)a1 != a2)
            {
              int64_t v55 = (v14 - 2) >> 1;
              int64_t v56 = v55;
              do
              {
                int64_t v57 = v56;
                if (v55 >= v56)
                {
                  uint64_t v58 = (2 * v56) | 1;
                  unint64_t v59 = a1 + 24 * v58;
                  if (2 * v56 + 2 < (uint64_t)v14
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v58), (void *)(v59 + 24)) & 0x80u) != 0)
                  {
                    v59 += 24;
                    uint64_t v58 = 2 * v57 + 2;
                  }
                  long long v60 = (__n128 *)(a1 + 24 * v57);
                  a2 = v98;
                  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v59, v60) & 0x80) == 0)
                  {
                    __n128 v61 = *v60;
                    unint64_t v100 = v60[1].n128_u64[0];
                    __n128 v99 = v61;
                    v60->n128_u64[1] = 0;
                    v60[1].n128_u64[0] = 0;
                    v60->n128_u64[0] = 0;
                    do
                    {
                      uint64_t v62 = (__n128 *)v59;
                      __n128 v63 = *(__n128 *)v59;
                      v60[1].n128_u64[0] = *(void *)(v59 + 16);
                      *long long v60 = v63;
                      *(unsigned char *)(v59 + 23) = 0;
                      *(unsigned char *)unint64_t v59 = 0;
                      if (v55 < v58) {
                        break;
                      }
                      uint64_t v64 = (2 * v58) | 1;
                      unint64_t v59 = a1 + 24 * v64;
                      uint64_t v65 = 2 * v58 + 2;
                      if (v65 < (uint64_t)v14
                        && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24 * v64), (void *)(v59 + 24)) & 0x80u) != 0)
                      {
                        v59 += 24;
                        uint64_t v64 = v65;
                      }
                      long long v60 = v62;
                      uint64_t v58 = v64;
                    }
                    while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v59, &v99) & 0x80) == 0);
                    __n128 v66 = v99;
                    v62[1].n128_u64[0] = v100;
                    *uint64_t v62 = v66;
                    a2 = v98;
                  }
                }
                int64_t v56 = v57 - 1;
              }
              while (v57);
              int64_t v67 = v13 / 0x18uLL;
              do
              {
                long long v68 = a2;
                uint64_t v69 = 0;
                unint64_t v95 = *(void *)a1;
                v101.n128_u64[0] = *(void *)(a1 + 8);
                *(unint64_t *)((char *)v101.n128_u64 + 7) = *(void *)(a1 + 15);
                unsigned __int8 v97 = *(unsigned char *)(a1 + 23);
                *(void *)(a1 + 8) = 0;
                *(void *)(a1 + 16) = 0;
                *(void *)a1 = 0;
                uint64_t v70 = v67 - 2;
                if (v67 < 2) {
                  uint64_t v70 = v67 - 1;
                }
                uint64_t v71 = v70 >> 1;
                unint64_t v72 = a1;
                do
                {
                  uint64_t v73 = v72 + 24 * v69 + 24;
                  uint64_t v74 = 2 * v69;
                  uint64_t v69 = (2 * v69) | 1;
                  uint64_t v75 = v74 + 2;
                  if (v74 + 2 < v67
                    && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v73, (void *)(v73 + 24)) & 0x80u) != 0)
                  {
                    v73 += 24;
                    uint64_t v69 = v75;
                  }
                  if (*(char *)(v72 + 23) < 0) {
                    operator delete(*(void **)v72);
                  }
                  __n128 v76 = *(__n128 *)v73;
                  *(void *)(v72 + 16) = *(void *)(v73 + 16);
                  *(__n128 *)unint64_t v72 = v76;
                  *(unsigned char *)(v73 + 23) = 0;
                  *(unsigned char *)uint64_t v73 = 0;
                  unint64_t v72 = v73;
                }
                while (v69 <= v71);
                a2 = (__n128 *)((char *)v68 - 24);
                if ((__int8 *)v73 == &v68[-2].n128_i8[8])
                {
                  *(void *)uint64_t v73 = v95;
                  uint64_t v87 = *(uint64_t *)((char *)v101.n128_i64 + 7);
                  *(void *)(v73 + 8) = v101.n128_u64[0];
                  *(void *)(v73 + 15) = v87;
                  *(unsigned char *)(v73 + 23) = v97;
                  int64_t v80 = v67 - 1;
                }
                else
                {
                  __n128 v77 = *a2;
                  *(void *)(v73 + 16) = v68[-1].n128_u64[1];
                  *(__n128 *)uint64_t v73 = v77;
                  v68[-2].n128_u64[1] = v95;
                  unint64_t v78 = v101.n128_u64[0];
                  *(unint64_t *)((char *)v68[-1].n128_u64 + 7) = *(unint64_t *)((char *)v101.n128_u64 + 7);
                  v68[-1].n128_u64[0] = v78;
                  v68[-1].n128_u8[15] = v97;
                  uint64_t v79 = v73 - a1 + 24;
                  int64_t v80 = v67 - 1;
                  if (v79 >= 25)
                  {
                    unint64_t v81 = (unint64_t)(-2 - 0x5555555555555555 * (v79 >> 3)) >> 1;
                    unint64_t v82 = a1 + 24 * v81;
                    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v82, (void *)v73) & 0x80) != 0)
                    {
                      __n128 v83 = *(__n128 *)v73;
                      unint64_t v100 = *(void *)(v73 + 16);
                      __n128 v99 = v83;
                      *(void *)(v73 + 8) = 0;
                      *(void *)(v73 + 16) = 0;
                      *(void *)uint64_t v73 = 0;
                      do
                      {
                        uint64_t v84 = v82;
                        long long v85 = *(_OWORD *)v82;
                        *(void *)(v73 + 16) = *(void *)(v82 + 16);
                        *(_OWORD *)uint64_t v73 = v85;
                        *(unsigned char *)(v82 + 23) = 0;
                        *(unsigned char *)unint64_t v82 = 0;
                        if (!v81) {
                          break;
                        }
                        unint64_t v81 = (v81 - 1) >> 1;
                        unint64_t v82 = a1 + 24 * v81;
                        uint64_t v73 = v84;
                      }
                      while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)v82, &v99) & 0x80) != 0);
                      __n128 v86 = v99;
                      *(void *)(v84 + 16) = v100;
                      *(__n128 *)uint64_t v84 = v86;
                      a2 = (__n128 *)((char *)v68 - 24);
                    }
                  }
                }
                BOOL v88 = v67 <= 2;
                int64_t v67 = v80;
              }
              while (!v88);
            }
            return;
          }
          char v15 = (void *)(a1 + 24 * (v14 >> 1));
          if ((unint64_t)v13 >= 0xC01)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)a1, (void *)(a1 + 24 * (v14 >> 1)), v10);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24), (void *)(a1 + 24 * (v14 >> 1) - 24), v96);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 48), (void *)(a1 + 24 + 24 * (v14 >> 1)), v11);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1) - 24), v15, (void *)(a1 + 24 + 24 * (v14 >> 1)));
            __n128 v16 = *(__n128 *)a1;
            unint64_t v100 = *(void *)(a1 + 16);
            __n128 v99 = v16;
            uint64_t v17 = v15[2];
            *(_OWORD *)a1 = *(_OWORD *)v15;
            *(void *)(a1 + 16) = v17;
            __n128 v18 = v99;
            v15[2] = v100;
            *(__n128 *)char v15 = v18;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>((void *)(a1 + 24 * (v14 >> 1)), (void *)a1, v10);
          }
          --a3;
          a2 = v98;
          if ((a4 & 1) != 0
            || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 - 24), (void *)a1) & 0x80) != 0)
          {
            break;
          }
          __n128 v31 = *(__n128 *)a1;
          unint64_t v102 = *(void *)(a1 + 16);
          __n128 v101 = v31;
          *(void *)(a1 + 8) = 0;
          *(void *)(a1 + 16) = 0;
          *(void *)a1 = 0;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v10) & 0x80) != 0)
          {
            uint64_t v12 = (__n128 *)a1;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v12) & 0x80) == 0);
          }
          else
          {
            uint64_t v32 = (__n128 *)(a1 + 24);
            do
            {
              uint64_t v12 = v32;
              if (v32 >= v98) {
                break;
              }
              char v33 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v32);
              uint64_t v32 = (__n128 *)((char *)v12 + 24);
            }
            while ((v33 & 0x80) == 0);
          }
          long long v34 = v98;
          if (v12 < v98)
          {
            long long v34 = v98;
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v34) & 0x80) != 0);
          }
          while (v12 < v34)
          {
            __n128 v35 = *v12;
            unint64_t v100 = v12[1].n128_u64[0];
            __n128 v99 = v35;
            __n128 v36 = *v34;
            v12[1].n128_u64[0] = v34[1].n128_u64[0];
            *uint64_t v12 = v36;
            __n128 v37 = v99;
            v34[1].n128_u64[0] = v100;
            __n128 *v34 = v37;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v12) & 0x80) == 0);
            do
              long long v34 = (__n128 *)((char *)v34 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v101, v34) & 0x80) != 0);
          }
          long long v38 = &v12[-2].n128_i8[8];
          BOOL v4 = (unint64_t)&v12[-2].n128_u64[1] >= a1;
          BOOL v5 = &v12[-2].n128_i8[8] == (__int8 *)a1;
          if (&v12[-2].n128_i8[8] == (__int8 *)a1)
          {
            if (v12[-1].n128_i8[15] < 0) {
              operator delete(*(void **)a1);
            }
          }
          else
          {
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            long long v39 = *(_OWORD *)v38;
            *(void *)(a1 + 16) = v12[-1].n128_u64[1];
            *(_OWORD *)a1 = v39;
            v12[-1].n128_u8[15] = 0;
            v12[-2].n128_u8[8] = 0;
          }
          a4 = 0;
          __n128 v40 = v101;
          v12[-1].n128_u64[1] = v102;
          *(__n128 *)long long v38 = v40;
        }
        __n128 v19 = *(__n128 *)a1;
        unint64_t v102 = *(void *)(a1 + 16);
        __n128 v101 = v19;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        uint64_t v20 = (__n128 *)a1;
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (__n128 *)((char *)v20 + 24);
        }
        while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v20, &v101) & 0x80) != 0);
        long long v22 = v98;
        if (v21 == (__n128 *)a1)
        {
          long long v22 = v98;
          do
          {
            if (v20 >= v22) {
              break;
            }
            long long v22 = (__n128 *)((char *)v22 - 24);
          }
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v101) & 0x80) == 0);
        }
        else
        {
          do
            long long v22 = (__n128 *)((char *)v22 - 24);
          while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v22, &v101) & 0x80) == 0);
        }
        uint64_t v12 = v20;
        if (v20 < v22)
        {
          char v23 = v22;
          do
          {
            __n128 v99 = *v12;
            __n128 v24 = v99;
            unint64_t v100 = v12[1].n128_u64[0];
            unint64_t v25 = v100;
            unint64_t v26 = v23[1].n128_u64[0];
            *uint64_t v12 = *v23;
            v12[1].n128_u64[0] = v26;
            v23[1].n128_u64[0] = v25;
            *char v23 = v24;
            do
              uint64_t v12 = (__n128 *)((char *)v12 + 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, &v101) & 0x80) != 0);
            do
              char v23 = (__n128 *)((char *)v23 - 24);
            while ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, &v101) & 0x80) == 0);
          }
          while (v12 < v23);
        }
        uint64_t v27 = &v12[-2].n128_i8[8];
        if (&v12[-2].n128_i8[8] == (__int8 *)a1)
        {
          if (v12[-1].n128_i8[15] < 0) {
            operator delete(*(void **)a1);
          }
        }
        else
        {
          if (*(char *)(a1 + 23) < 0) {
            operator delete(*(void **)a1);
          }
          long long v28 = *(_OWORD *)v27;
          *(void *)(a1 + 16) = v12[-1].n128_u64[1];
          *(_OWORD *)a1 = v28;
          v12[-1].n128_u8[15] = 0;
          v12[-2].n128_u8[8] = 0;
        }
        __n128 v29 = v101;
        v12[-1].n128_u64[1] = v102;
        *(__n128 *)uint64_t v27 = v29;
        if (v20 >= v22) {
          break;
        }
LABEL_35:
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(a1, &v12[-2].n128_i8[8], a3, a4 & 1);
        a4 = 0;
      }
      BOOL v30 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>((__n128 *)a1, (__n128 *)((char *)v12 - 24));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(v12, v98))
      {
        break;
      }
      if (!v30) {
        goto LABEL_35;
      }
    }
    a2 = (__n128 *)((char *)v12 - 24);
    if (!v30) {
      continue;
    }
    break;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v239 = *MEMORY[0x1E4F143B8];
LABEL_2:
  unint64_t v8 = (unint64_t)a1;
  long long v208 = a1 + 20;
  uint64_t v209 = a1 + 10;
  int v9 = a1 + 3;
  uint64_t v10 = (uint64_t)(a1 + 5);
  unint64_t v206 = a1 + 6;
  long long v207 = a1 + 1;
  uint64_t v11 = a1 + 8;
  uint64_t v204 = (uint64_t)(a1 - 5);
  uint64_t v205 = (uint64_t)(a1 - 10);
  long long v202 = a1 + 5;
  while (1)
  {
    uint64_t v12 = (uint64_t)a2 - v8;
    uint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    if (v5 || !v4)
    {
      switch(v13)
      {
        case 0:
        case 1:
          return;
        case 2:
          if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)(a2 - 10), (uint64_t)(a2 - 5), v8, v8 + 40) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)v8, (long long *)a2 - 5); {
          break;
          }
        case 3:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v8, (long long *)(v8 + 80), (long long *)a2 - 5);
          break;
        case 4:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v8, (long long *)(v8 + 80), (long long *)(v8 + 160), (long long *)a2 - 5);
          break;
        case 5:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v8, (long long *)(v8 + 80), (long long *)(v8 + 160), (long long *)(v8 + 240), (long long *)a2 - 5);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    unint64_t v218 = (unint64_t)a2;
    if (v12 <= 1919) {
      break;
    }
    if (!a3)
    {
      if ((uint64_t *)v8 != a2)
      {
        int64_t v217 = (unint64_t)(v13 - 2) >> 1;
        int64_t v106 = v217;
        do
        {
          int64_t v107 = v106;
          if (v217 >= v106)
          {
            uint64_t v108 = (2 * v106) | 1;
            uint64_t v109 = v8 + 80 * v108;
            if (2 * v106 + 2 < v13
              && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v8 + 80 * v108, v8 + 80 * v108 + 40, v109 + 80, v109 + 120) & 0x80u) != 0)
            {
              v109 += 80;
              uint64_t v108 = 2 * v107 + 2;
            }
            uint64_t v110 = v8 + 80 * v107;
            uint64_t v111 = (long long *)(v110 + 40);
            if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v109, v109 + 40, v110, v110 + 40) & 0x80) == 0)
            {
              long long v112 = *(_OWORD *)v110;
              uint64_t v232 = *(void *)(v110 + 16);
              long long v231 = v112;
              *(void *)(v110 + 8) = 0;
              *(void *)(v110 + 16) = 0;
              *(void *)uint64_t v110 = 0;
              uint64_t v113 = *(void *)(v110 + 24);
              int v234 = *(_DWORD *)(v110 + 32);
              uint64_t v233 = v113;
              long long v114 = *v111;
              uint64_t v236 = *(void *)(v8 + 80 * v107 + 56);
              long long v235 = v114;
              *(void *)(v8 + 80 * v107 + 48) = 0;
              *(void *)(v8 + 80 * v107 + 56) = 0;
              *(void *)uint64_t v111 = 0;
              int64_t v210 = v107;
              unint64_t v115 = v8 + 80 * v107;
              uint64_t v116 = *(void *)(v115 + 64);
              int v238 = *(_DWORD *)(v115 + 72);
              uint64_t v237 = v116;
              do
              {
                uint64_t v117 = v109;
                if (*(char *)(v110 + 23) < 0) {
                  operator delete(*(void **)v110);
                }
                long long v118 = *(_OWORD *)v109;
                *(void *)(v110 + 16) = *(void *)(v109 + 16);
                *(_OWORD *)uint64_t v110 = v118;
                *(unsigned char *)(v109 + 23) = 0;
                uint64_t v119 = *(void *)(v109 + 24);
                *(unsigned char *)uint64_t v109 = 0;
                int v120 = *(_DWORD *)(v109 + 32);
                *(void *)(v110 + 24) = v119;
                *(_DWORD *)(v110 + 32) = v120;
                long long v121 = (void **)(v110 + 40);
                if (*(char *)(v110 + 63) < 0) {
                  operator delete(*v121);
                }
                long long v122 = *(_OWORD *)(v117 + 40);
                *(void *)(v110 + 56) = *(void *)(v117 + 56);
                *(_OWORD *)long long v121 = v122;
                uint64_t v124 = (uint64_t *)(v117 + 64);
                uint64_t v123 = *(void *)(v117 + 64);
                *(unsigned char *)(v117 + 63) = 0;
                *(unsigned char *)(v117 + 40) = 0;
                *(_DWORD *)(v110 + 72) = *(_DWORD *)(v117 + 72);
                *(void *)(v110 + 64) = v123;
                if (v217 < v108) {
                  break;
                }
                uint64_t v125 = (2 * v108) | 1;
                uint64_t v109 = v8 + 80 * v125;
                uint64_t v126 = 2 * v108 + 2;
                if (v126 < v13
                  && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v8 + 80 * v125, v8 + 80 * v125 + 40, v109 + 80, v109 + 120) & 0x80u) != 0)
                {
                  v109 += 80;
                  uint64_t v125 = v126;
                }
                uint64_t v110 = v117;
                uint64_t v108 = v125;
              }
              while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v109, v109 + 40, (uint64_t)&v231, (uint64_t)&v235) & 0x80) == 0);
              if (*(char *)(v117 + 23) < 0) {
                operator delete(*(void **)v117);
              }
              long long v127 = (void **)(v117 + 40);
              long long v128 = v231;
              *(void *)(v117 + 16) = v232;
              *(_OWORD *)uint64_t v117 = v128;
              HIBYTE(v232) = 0;
              LOBYTE(v231) = 0;
              int v129 = v234;
              *(void *)(v117 + 24) = v233;
              *(_DWORD *)(v117 + 32) = v129;
              if (*(char *)(v117 + 63) < 0)
              {
                operator delete(*v127);
                int v132 = SHIBYTE(v232);
                long long v133 = v235;
                *(void *)(v117 + 56) = v236;
                *(_OWORD *)long long v127 = v133;
                HIBYTE(v236) = 0;
                LOBYTE(v235) = 0;
                uint64_t v134 = v237;
                *(_DWORD *)(v117 + 72) = v238;
                *uint64_t v124 = v134;
                if (v132 < 0) {
                  operator delete((void *)v231);
                }
              }
              else
              {
                long long v130 = v235;
                *(void *)(v117 + 56) = v236;
                *(_OWORD *)long long v127 = v130;
                uint64_t v131 = v237;
                *(_DWORD *)(v117 + 72) = v238;
                *uint64_t v124 = v131;
              }
              int64_t v107 = v210;
            }
          }
          int64_t v106 = v107 - 1;
        }
        while (v107);
        int64_t v135 = v12 / 0x50uLL;
        unint64_t v136 = v218;
        do
        {
          if (v135 >= 2)
          {
            unint64_t v219 = v136;
            uint64_t v137 = 0;
            char v211 = *(unsigned char *)v8;
            *(void *)&v230[14] = *(void *)(v8 + 15);
            *(_OWORD *)uint64_t v230 = *(_OWORD *)(v8 + 1);
            char v213 = *(unsigned char *)(v8 + 23);
            *(void *)(v8 + 8) = 0;
            *(void *)(v8 + 16) = 0;
            *(void *)unint64_t v8 = 0;
            int v225 = *(_DWORD *)(v8 + 32);
            uint64_t v223 = *(void *)(v8 + 24);
            char v214 = *(unsigned char *)(v8 + 40);
            *(_OWORD *)int v227 = *(_OWORD *)(v8 + 41);
            *(void *)&v227[14] = *(void *)(v8 + 55);
            char v215 = *(unsigned char *)(v8 + 63);
            *(void *)(v8 + 40) = 0;
            *(void *)(v8 + 48) = 0;
            int v221 = *(_DWORD *)(v8 + 72);
            uint64_t v220 = *(void *)(v8 + 64);
            unint64_t v138 = v8;
            *(void *)(v8 + 56) = 0;
            do
            {
              uint64_t v139 = v137 + 1;
              uint64_t v140 = v138 + 80 * (v137 + 1);
              uint64_t v141 = 2 * v137;
              uint64_t v137 = (2 * v137) | 1;
              uint64_t v142 = v141 + 2;
              if (v141 + 2 < v135
                && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v140, v138 + 80 * v139 + 40, v140 + 80, v140 + 120) & 0x80u) != 0)
              {
                v140 += 80;
                uint64_t v137 = v142;
              }
              if (*(char *)(v138 + 23) < 0) {
                operator delete(*(void **)v138);
              }
              long long v143 = *(_OWORD *)v140;
              *(void *)(v138 + 16) = *(void *)(v140 + 16);
              *(_OWORD *)unint64_t v138 = v143;
              *(unsigned char *)(v140 + 23) = 0;
              uint64_t v145 = (uint64_t *)(v140 + 24);
              uint64_t v144 = *(void *)(v140 + 24);
              *(unsigned char *)uint64_t v140 = 0;
              int v146 = *(_DWORD *)(v140 + 32);
              *(void *)(v138 + 24) = v144;
              *(_DWORD *)(v138 + 32) = v146;
              int v147 = (void **)(v138 + 40);
              if (*(char *)(v138 + 63) < 0) {
                operator delete(*v147);
              }
              long long v148 = *(_OWORD *)(v140 + 40);
              *(void *)(v138 + 56) = *(void *)(v140 + 56);
              *(_OWORD *)int v147 = v148;
              int v150 = (uint64_t *)(v140 + 64);
              uint64_t v149 = *(void *)(v140 + 64);
              *(unsigned char *)(v140 + 63) = 0;
              *(unsigned char *)(v140 + 40) = 0;
              *(_DWORD *)(v138 + 72) = *(_DWORD *)(v140 + 72);
              *(void *)(v138 + 64) = v149;
              unint64_t v138 = v140;
            }
            while (v137 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
            long long v151 = (void **)(v140 + 40);
            unint64_t v136 = v219;
            int v152 = (void **)(v219 - 80);
            int v153 = *(char *)(v140 + 23);
            if (v140 == v219 - 80)
            {
              if (v153 < 0) {
                operator delete(*(void **)v140);
              }
              *(unsigned char *)uint64_t v140 = v211;
              *(void *)(v140 + 15) = *(void *)&v230[14];
              *(_OWORD *)(v140 + 1) = *(_OWORD *)v230;
              *(unsigned char *)(v140 + 23) = v213;
              *uint64_t v145 = v223;
              *(_DWORD *)(v140 + 32) = v225;
              if (*(char *)(v140 + 63) < 0) {
                operator delete(*v151);
              }
              *(unsigned char *)(v140 + 40) = v214;
              *(void *)(v140 + 55) = *(void *)&v227[14];
              *(_OWORD *)(v140 + 41) = *(_OWORD *)v227;
              *(unsigned char *)(v140 + 63) = v215;
              *int v150 = v220;
              *(_DWORD *)(v140 + 72) = v221;
            }
            else
            {
              if (v153 < 0) {
                operator delete(*(void **)v140);
              }
              long long v154 = *(_OWORD *)v152;
              *(void *)(v140 + 16) = *(void *)(v219 - 64);
              *(_OWORD *)uint64_t v140 = v154;
              uint64_t v155 = *(void *)(v219 - 56);
              *(unsigned char *)(v219 - 57) = 0;
              *(unsigned char *)(v219 - 80) = 0;
              int v156 = *(_DWORD *)(v219 - 48);
              *uint64_t v145 = v155;
              *(_DWORD *)(v140 + 32) = v156;
              if (*(char *)(v140 + 63) < 0) {
                operator delete(*v151);
              }
              long long v157 = *(_OWORD *)(v219 - 40);
              *(void *)(v140 + 56) = *(void *)(v219 - 24);
              int v203 = (long long *)(v140 + 40);
              *(_OWORD *)long long v151 = v157;
              uint64_t v158 = *(void *)(v219 - 16);
              *(unsigned char *)(v219 - 17) = 0;
              *(unsigned char *)(v219 - 40) = 0;
              *(_DWORD *)(v140 + 72) = *(_DWORD *)(v219 - 8);
              *int v150 = v158;
              if (*(char *)(v219 - 57) < 0) {
                operator delete(*v152);
              }
              *(unsigned char *)(v219 - 80) = v211;
              *(_OWORD *)(v219 - 79) = *(_OWORD *)v230;
              *(void *)(v219 - 65) = *(void *)&v230[14];
              *(unsigned char *)(v219 - 57) = v213;
              *(_DWORD *)(v219 - 48) = v225;
              *(void *)(v219 - 56) = v223;
              if (*(char *)(v219 - 17) < 0) {
                operator delete(*(void **)(v219 - 40));
              }
              *(unsigned char *)(v219 - 40) = v214;
              *(_OWORD *)(v219 - 39) = *(_OWORD *)v227;
              *(void *)(v219 - 25) = *(void *)&v227[14];
              *(unsigned char *)(v219 - 17) = v215;
              *(_DWORD *)(v219 - 8) = v221;
              *(void *)(v219 - 16) = v220;
              uint64_t v159 = v140 + 80 - v8;
              if (v159 >= 81)
              {
                unint64_t v160 = (unint64_t)(-2 - 0x3333333333333333 * (v159 >> 4)) >> 1;
                uint64_t v161 = v8 + 80 * v160;
                if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v161, v161 + 40, v140, (uint64_t)v203) & 0x80) != 0)
                {
                  long long v162 = *(_OWORD *)v140;
                  uint64_t v232 = *(void *)(v140 + 16);
                  long long v231 = v162;
                  *(void *)(v140 + 8) = 0;
                  *(void *)(v140 + 16) = 0;
                  *(void *)uint64_t v140 = 0;
                  uint64_t v163 = *v145;
                  int v234 = *(_DWORD *)(v140 + 32);
                  uint64_t v233 = v163;
                  long long v164 = *v203;
                  uint64_t v236 = *(void *)(v140 + 56);
                  long long v235 = v164;
                  *(void *)(v140 + 48) = 0;
                  *(void *)(v140 + 56) = 0;
                  *(void *)int v203 = 0;
                  uint64_t v165 = *v150;
                  int v238 = *(_DWORD *)(v140 + 72);
                  uint64_t v237 = v165;
                  do
                  {
                    uint64_t v166 = v161;
                    if (*(char *)(v140 + 23) < 0) {
                      operator delete(*(void **)v140);
                    }
                    long long v167 = *(_OWORD *)v161;
                    *(void *)(v140 + 16) = *(void *)(v161 + 16);
                    *(_OWORD *)uint64_t v140 = v167;
                    *(unsigned char *)(v161 + 23) = 0;
                    long long v169 = (uint64_t *)(v161 + 24);
                    uint64_t v168 = *(void *)(v161 + 24);
                    *(unsigned char *)uint64_t v161 = 0;
                    int v170 = *(_DWORD *)(v161 + 32);
                    *(void *)(v140 + 24) = v168;
                    *(_DWORD *)(v140 + 32) = v170;
                    std::string v171 = (void **)(v140 + 40);
                    if (*(char *)(v140 + 63) < 0) {
                      operator delete(*v171);
                    }
                    long long v172 = *(_OWORD *)(v166 + 40);
                    *(void *)(v140 + 56) = *(void *)(v166 + 56);
                    *(_OWORD *)std::string v171 = v172;
                    char v174 = (uint64_t *)(v166 + 64);
                    uint64_t v173 = *(void *)(v166 + 64);
                    *(unsigned char *)(v166 + 63) = 0;
                    *(unsigned char *)(v166 + 40) = 0;
                    *(_DWORD *)(v140 + 72) = *(_DWORD *)(v166 + 72);
                    *(void *)(v140 + 64) = v173;
                    if (!v160) {
                      break;
                    }
                    unint64_t v160 = (v160 - 1) >> 1;
                    uint64_t v161 = v8 + 80 * v160;
                    uint64_t v140 = v166;
                  }
                  while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v161, v161 + 40, (uint64_t)&v231, (uint64_t)&v235) & 0x80) != 0);
                  if (*(char *)(v166 + 23) < 0) {
                    operator delete(*(void **)v166);
                  }
                  uint64_t v175 = (void **)(v166 + 40);
                  long long v176 = v231;
                  *(void *)(v166 + 16) = v232;
                  *(_OWORD *)uint64_t v166 = v176;
                  HIBYTE(v232) = 0;
                  LOBYTE(v231) = 0;
                  int v177 = v234;
                  *long long v169 = v233;
                  *(_DWORD *)(v166 + 32) = v177;
                  if (*(char *)(v166 + 63) < 0)
                  {
                    operator delete(*v175);
                    int v181 = SHIBYTE(v232);
                    long long v182 = v235;
                    *(void *)(v166 + 56) = v236;
                    *(_OWORD *)uint64_t v175 = v182;
                    HIBYTE(v236) = 0;
                    LOBYTE(v235) = 0;
                    uint64_t v183 = v237;
                    *(_DWORD *)(v166 + 72) = v238;
                    *char v174 = v183;
                    if (v181 < 0) {
                      operator delete((void *)v231);
                    }
                  }
                  else
                  {
                    long long v178 = v235;
                    *(void *)(v166 + 56) = v236;
                    *(_OWORD *)uint64_t v175 = v178;
                    uint64_t v179 = v237;
                    *(_DWORD *)(v166 + 72) = v238;
                    *char v174 = v179;
                  }
                }
              }
            }
          }
          v136 -= 80;
        }
        while ((unint64_t)v135-- > 2);
      }
      return;
    }
    unint64_t v14 = (unint64_t)v13 >> 1;
    unint64_t v15 = v8 + 80 * v14;
    uint64_t v16 = (uint64_t)(a2 - 10);
    if ((unint64_t)v12 < 0x2801)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)(v8 + 80 * v14), (long long *)v8, (long long *)a2 - 5);
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)v8, (long long *)(v8 + 80 * v14), (long long *)a2 - 5);
      uint64_t v17 = v11;
      __n128 v18 = v9;
      uint64_t v19 = (uint64_t)(a2 - 10);
      uint64_t v20 = a2;
      unint64_t v21 = v8 + 80 * v14;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(v209, (long long *)(v21 - 80), (long long *)v20 - 10);
      long long v22 = (long long *)(v20 - 30);
      uint64_t v16 = v19;
      int v9 = v18;
      uint64_t v11 = v17;
      uint64_t v10 = (uint64_t)v202;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(v208, (long long *)(v21 + 80), v22);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)(v21 - 80), (long long *)v21, (long long *)(v21 + 80));
      uint64_t v23 = *(void *)v8;
      *(void *)&long long v231 = *v207;
      *(void *)((char *)&v231 + 7) = *(void *)((char *)v207 + 7);
      char v24 = *(unsigned char *)(v8 + 23);
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)unint64_t v8 = 0;
      int v228 = *((_DWORD *)v9 + 2);
      uint64_t v226 = *v9;
      uint64_t v25 = *(void *)(v8 + 40);
      *(void *)&long long v229 = *v206;
      *(void *)((char *)&v229 + 7) = *(void *)((char *)v206 + 7);
      char v26 = *(unsigned char *)(v8 + 63);
      *long long v202 = 0;
      v202[1] = 0;
      v202[2] = 0;
      int v224 = *((_DWORD *)v11 + 2);
      uint64_t v222 = *v11;
      long long v27 = *(_OWORD *)v15;
      uint64_t v28 = *(void *)(v15 + 24);
      *(void *)(v8 + 16) = *(void *)(v15 + 16);
      *(_OWORD *)unint64_t v8 = v27;
      *(unsigned char *)(v15 + 23) = 0;
      *(unsigned char *)unint64_t v15 = 0;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(v15 + 32);
      *int v9 = v28;
      long long v29 = *(_OWORD *)(v21 + 40);
      uint64_t v30 = *(void *)(v21 + 64);
      v202[2] = *(void *)(v21 + 56);
      *(_OWORD *)long long v202 = v29;
      *(unsigned char *)(v15 + 63) = 0;
      *(unsigned char *)(v21 + 40) = 0;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(v21 + 72);
      uint64_t *v11 = v30;
      *(void *)unint64_t v15 = v23;
      uint64_t v31 = v231;
      *(void *)(v15 + 15) = *(void *)((char *)&v231 + 7);
      *(void *)(v15 + 8) = v31;
      *(unsigned char *)(v15 + 23) = v24;
      *(_DWORD *)(v15 + 32) = v228;
      *(void *)(v15 + 24) = v226;
      *(void *)(v21 + 40) = v25;
      *(void *)(v21 + 55) = *(void *)((char *)&v229 + 7);
      *(void *)(v21 + 48) = v229;
      *(unsigned char *)(v15 + 63) = v26;
      *(_DWORD *)(v21 + 72) = v224;
      *(void *)(v21 + 64) = v222;
    }
    --a3;
    if ((a4 & 1) == 0
      && (std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v205, v204, v8, v10) & 0x80) == 0)
    {
      long long v57 = *(_OWORD *)v8;
      uint64_t v232 = *(void *)(v8 + 16);
      long long v231 = v57;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      uint64_t v58 = *(void *)(v8 + 24);
      *(void *)unint64_t v8 = 0;
      int v59 = *(_DWORD *)(v8 + 32);
      uint64_t v233 = v58;
      int v234 = v59;
      uint64_t v60 = *(void *)(v10 + 16);
      long long v235 = *(_OWORD *)v10;
      uint64_t v236 = v60;
      *(void *)(v10 + 8) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)uint64_t v10 = 0;
      uint64_t v61 = *(void *)(v8 + 64);
      int v238 = *(_DWORD *)(v8 + 72);
      a2 = (uint64_t *)v218;
      uint64_t v237 = v61;
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, v16, v218 - 40) & 0x80) != 0)
      {
        unint64_t v64 = v8;
        do
        {
          a1 = (uint64_t *)(v64 + 80);
          char v65 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, v64 + 80, v64 + 120);
          unint64_t v64 = (unint64_t)a1;
        }
        while ((v65 & 0x80) == 0);
      }
      else
      {
        uint64_t v62 = v8 + 120;
        do
        {
          a1 = (uint64_t *)(v62 - 40);
          if (v62 - 40 >= v218) {
            break;
          }
          char v63 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, v62 - 40, v62);
          v62 += 80;
        }
        while ((v63 & 0x80) == 0);
      }
      __n128 v66 = (long long *)v218;
      if ((unint64_t)a1 < v218)
      {
        unint64_t v67 = v218;
        do
        {
          __n128 v66 = (long long *)(v67 - 80);
          char v68 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, v67 - 80, v67 - 40);
          unint64_t v67 = (unint64_t)v66;
        }
        while (v68 < 0);
      }
      while (a1 < (uint64_t *)v66)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, v66);
        do
        {
          uint64_t v69 = (uint64_t)(a1 + 15);
          a1 += 10;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, (uint64_t)a1, v69) & 0x80) == 0);
        do
        {
          uint64_t v70 = (uint64_t)v66 - 40;
          v66 -= 5;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, (uint64_t)v66, v70) & 0x80) != 0);
      }
      uint64_t v71 = (void **)(a1 - 10);
      BOOL v4 = (unint64_t)(a1 - 10) >= v8;
      BOOL v5 = a1 - 10 == (uint64_t *)v8;
      if (a1 - 10 != (uint64_t *)v8)
      {
        if (*(char *)(v8 + 23) < 0) {
          operator delete(*(void **)v8);
        }
        long long v72 = *(_OWORD *)v71;
        *(void *)(v8 + 16) = *(a1 - 8);
        *(_OWORD *)unint64_t v8 = v72;
        *((unsigned char *)a1 - 57) = 0;
        *((unsigned char *)a1 - 80) = 0;
        int v73 = *((_DWORD *)a1 - 12);
        *(void *)(v8 + 24) = *(a1 - 7);
        *(_DWORD *)(v8 + 32) = v73;
        if (*(char *)(v8 + 63) < 0) {
          operator delete(*(void **)v10);
        }
        long long v74 = *(_OWORD *)(a1 - 5);
        *(void *)(v10 + 16) = *(a1 - 3);
        *(_OWORD *)uint64_t v10 = v74;
        *((unsigned char *)a1 - 17) = 0;
        *((unsigned char *)a1 - 40) = 0;
        uint64_t v75 = *(a1 - 2);
        *(_DWORD *)(v8 + 72) = *((_DWORD *)a1 - 2);
        *(void *)(v8 + 64) = v75;
      }
      if (*((char *)a1 - 57) < 0) {
        operator delete(*v71);
      }
      long long v76 = v231;
      *(a1 - 8) = v232;
      *(_OWORD *)uint64_t v71 = v76;
      HIBYTE(v232) = 0;
      LOBYTE(v231) = 0;
      int v77 = v234;
      *(a1 - 7) = v233;
      *((_DWORD *)a1 - 12) = v77;
      unint64_t v78 = (void **)(a1 - 5);
      if (*((char *)a1 - 17) < 0) {
        operator delete(*v78);
      }
      long long v79 = v235;
      *(a1 - 3) = v236;
      *(_OWORD *)unint64_t v78 = v79;
      HIBYTE(v236) = 0;
      LOBYTE(v235) = 0;
      uint64_t v80 = v237;
      *((_DWORD *)a1 - 2) = v238;
      *(a1 - 2) = v80;
      if (SHIBYTE(v236) < 0) {
        operator delete((void *)v235);
      }
      if (SHIBYTE(v232) < 0) {
        operator delete((void *)v231);
      }
      goto LABEL_79;
    }
    long long v32 = *(_OWORD *)v8;
    uint64_t v232 = *(void *)(v8 + 16);
    long long v231 = v32;
    *(void *)(v8 + 8) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)unint64_t v8 = 0;
    int v33 = *((_DWORD *)v9 + 2);
    uint64_t v233 = *v9;
    int v234 = v33;
    uint64_t v34 = *(void *)(v10 + 16);
    long long v235 = *(_OWORD *)v10;
    uint64_t v236 = v34;
    *(void *)(v10 + 8) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)uint64_t v10 = 0;
    uint64_t v35 = *v11;
    int v238 = *((_DWORD *)v11 + 2);
    unint64_t v36 = v8;
    uint64_t v237 = v35;
    do
    {
      unint64_t v37 = v36;
      v36 += 80;
    }
    while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v36, v37 + 120, (uint64_t)&v231, (uint64_t)&v235) & 0x80) != 0);
    unint64_t v38 = v218;
    if (v37 == v8)
    {
      unint64_t v41 = v218;
      while (v36 < v41)
      {
        long long v39 = (long long *)(v41 - 80);
        char v42 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v41 - 80, v41 - 40, (uint64_t)&v231, (uint64_t)&v235);
        unint64_t v41 = (unint64_t)v39;
        if (v42 < 0) {
          goto LABEL_22;
        }
      }
      long long v39 = (long long *)v41;
    }
    else
    {
      do
      {
        long long v39 = (long long *)(v38 - 80);
        char v40 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v38 - 80, v38 - 40, (uint64_t)&v231, (uint64_t)&v235);
        unint64_t v38 = (unint64_t)v39;
      }
      while ((v40 & 0x80) == 0);
    }
LABEL_22:
    if (v36 >= (unint64_t)v39)
    {
      a1 = (uint64_t *)v36;
    }
    else
    {
      __n128 v43 = v39;
      a1 = (uint64_t *)v36;
      do
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, v43);
        do
        {
          uint64_t v44 = (uint64_t)(a1 + 15);
          a1 += 10;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a1, v44, (uint64_t)&v231, (uint64_t)&v235) & 0x80) != 0);
        do
        {
          uint64_t v45 = (uint64_t)v43 - 40;
          v43 -= 5;
        }
        while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)v43, v45, (uint64_t)&v231, (uint64_t)&v235) & 0x80) == 0);
      }
      while (a1 < (uint64_t *)v43);
    }
    BOOL v46 = (void **)(a1 - 10);
    if (a1 - 10 != (uint64_t *)v8)
    {
      if (*(char *)(v8 + 23) < 0) {
        operator delete(*(void **)v8);
      }
      long long v47 = *(_OWORD *)v46;
      *(void *)(v8 + 16) = *(a1 - 8);
      *(_OWORD *)unint64_t v8 = v47;
      *((unsigned char *)a1 - 57) = 0;
      *((unsigned char *)a1 - 80) = 0;
      int v48 = *((_DWORD *)a1 - 12);
      *int v9 = *(a1 - 7);
      *((_DWORD *)v9 + 2) = v48;
      if (*(char *)(v8 + 63) < 0) {
        operator delete(*(void **)v10);
      }
      long long v49 = *(_OWORD *)(a1 - 5);
      *(void *)(v10 + 16) = *(a1 - 3);
      *(_OWORD *)uint64_t v10 = v49;
      *((unsigned char *)a1 - 17) = 0;
      *((unsigned char *)a1 - 40) = 0;
      uint64_t v50 = *(a1 - 2);
      *((_DWORD *)v11 + 2) = *((_DWORD *)a1 - 2);
      uint64_t *v11 = v50;
    }
    if (*((char *)a1 - 57) < 0) {
      operator delete(*v46);
    }
    long long v51 = v231;
    *(a1 - 8) = v232;
    *(_OWORD *)BOOL v46 = v51;
    HIBYTE(v232) = 0;
    LOBYTE(v231) = 0;
    int v52 = v234;
    *(a1 - 7) = v233;
    *((_DWORD *)a1 - 12) = v52;
    uint64_t v53 = (void **)(a1 - 5);
    if (*((char *)a1 - 17) < 0) {
      operator delete(*v53);
    }
    long long v54 = v235;
    *(a1 - 3) = v236;
    *(_OWORD *)uint64_t v53 = v54;
    HIBYTE(v236) = 0;
    LOBYTE(v235) = 0;
    uint64_t v55 = v237;
    *((_DWORD *)a1 - 2) = v238;
    *(a1 - 2) = v55;
    if (SHIBYTE(v236) < 0) {
      operator delete((void *)v235);
    }
    a2 = (uint64_t *)v218;
    if (SHIBYTE(v232) < 0) {
      operator delete((void *)v231);
    }
    if (v36 < (unint64_t)v39) {
      goto LABEL_49;
    }
    BOOL v56 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(v8, (uint64_t)(a1 - 10));
    if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t)a1, v218))
    {
      if (v56) {
        goto LABEL_2;
      }
LABEL_49:
      std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *,false>(v8, a1 - 10, a3, a4 & 1);
LABEL_79:
      a4 = 0;
      goto LABEL_2;
    }
    a2 = a1 - 10;
    if (v56) {
      return;
    }
  }
  if (a4)
  {
    if ((uint64_t *)v8 != a2)
    {
      uint64_t v81 = v8 + 80;
      if ((uint64_t *)(v8 + 80) != a2)
      {
        uint64_t v82 = 0;
        uint64_t v83 = v8;
        do
        {
          uint64_t v84 = v81;
          long long v85 = (long long *)(v83 + 120);
          if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v81, v83 + 120, v83, v83 + 40) & 0x80) != 0)
          {
            long long v86 = *(_OWORD *)v84;
            uint64_t v232 = *(void *)(v84 + 16);
            long long v231 = v86;
            *(void *)(v84 + 8) = 0;
            *(void *)(v84 + 16) = 0;
            *(void *)uint64_t v84 = 0;
            uint64_t v233 = *(void *)(v83 + 104);
            int v234 = *(_DWORD *)(v83 + 112);
            long long v235 = *v85;
            uint64_t v236 = *(void *)(v83 + 136);
            *(void *)long long v85 = 0;
            *(void *)(v83 + 128) = 0;
            *(void *)(v83 + 136) = 0;
            uint64_t v237 = *(void *)(v83 + 144);
            uint64_t v87 = v82;
            int v238 = *(_DWORD *)(v83 + 152);
            while (1)
            {
              uint64_t v88 = v87;
              uint64_t v89 = v8 + v87;
              uint64_t v90 = v8 + v87 + 80;
              if (*(char *)(v8 + v87 + 103) < 0) {
                operator delete(*(void **)v90);
              }
              *(_OWORD *)uint64_t v90 = *(_OWORD *)v89;
              uint64_t v91 = *(void *)(v89 + 24);
              *(void *)(v90 + 16) = *(void *)(v89 + 16);
              *(unsigned char *)(v89 + 23) = 0;
              *(unsigned char *)uint64_t v89 = 0;
              *(void *)(v89 + 104) = v91;
              *(_DWORD *)(v89 + 112) = *(_DWORD *)(v89 + 32);
              unint64_t v92 = (void **)(v89 + 120);
              if (*(char *)(v89 + 143) < 0) {
                operator delete(*v92);
              }
              uint64_t v93 = v8 + v88;
              *(_OWORD *)unint64_t v92 = *(_OWORD *)(v8 + v88 + 40);
              uint64_t v94 = *(void *)(v8 + v88 + 64);
              *(void *)(v89 + 136) = *(void *)(v8 + v88 + 56);
              *(unsigned char *)(v93 + 63) = 0;
              *(unsigned char *)(v93 + 40) = 0;
              *(void *)(v93 + 144) = v94;
              *(_DWORD *)(v93 + 152) = *(_DWORD *)(v8 + v88 + 72);
              if (!v88) {
                break;
              }
              char v95 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, v93 - 80, v93 - 40);
              uint64_t v87 = v88 - 80;
              if ((v95 & 0x80) == 0)
              {
                unint64_t v96 = v8 + v88;
                uint64_t v97 = v8 + v88;
                uint64_t v98 = v8 + v88 + 24;
                uint64_t v99 = v8 + v88 + 64;
                uint64_t v100 = v97 + 40;
                goto LABEL_101;
              }
            }
            uint64_t v98 = v93 + 24;
            uint64_t v99 = v93 + 64;
            uint64_t v100 = v93 + 40;
            unint64_t v96 = v8;
LABEL_101:
            if (*(char *)(v96 + 23) < 0) {
              operator delete(*(void **)v96);
            }
            char v101 = 0;
            long long v102 = v231;
            *(void *)(v96 + 16) = v232;
            *(_OWORD *)unint64_t v96 = v102;
            HIBYTE(v232) = 0;
            LOBYTE(v231) = 0;
            uint64_t v103 = v233;
            *(_DWORD *)(v98 + 8) = v234;
            *(void *)uint64_t v98 = v103;
            if (*(char *)(v96 + 63) < 0)
            {
              operator delete(*(void **)v100);
              char v101 = HIBYTE(v232);
            }
            long long v104 = v235;
            *(void *)(v100 + 16) = v236;
            *(_OWORD *)uint64_t v100 = v104;
            HIBYTE(v236) = 0;
            LOBYTE(v235) = 0;
            uint64_t v105 = v237;
            *(_DWORD *)(v99 + 8) = v238;
            *(void *)uint64_t v99 = v105;
            a2 = (uint64_t *)v218;
            if (v101 < 0) {
              operator delete((void *)v231);
            }
          }
          uint64_t v81 = v84 + 80;
          v82 += 80;
          uint64_t v83 = v84;
        }
        while ((uint64_t *)(v84 + 80) != a2);
      }
    }
  }
  else if ((uint64_t *)v8 != a2)
  {
    uint64_t v184 = v8 + 80;
    if ((uint64_t *)(v8 + 80) != a2)
    {
      long long v185 = (uint64_t *)(v8 + 144);
      do
      {
        unint64_t v186 = v184;
        long long v187 = (long long *)(v8 + 120);
        if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v184, v8 + 120, v8, v8 + 40) & 0x80) != 0)
        {
          long long v188 = *(_OWORD *)v186;
          uint64_t v232 = *(void *)(v186 + 16);
          long long v231 = v188;
          *(void *)(v186 + 8) = 0;
          *(void *)(v186 + 16) = 0;
          *(void *)unint64_t v186 = 0;
          uint64_t v233 = *(void *)(v8 + 104);
          int v234 = *(_DWORD *)(v8 + 112);
          long long v235 = *v187;
          uint64_t v236 = *(void *)(v8 + 136);
          *(void *)long long v187 = 0;
          *(void *)(v8 + 128) = 0;
          *(void *)(v8 + 136) = 0;
          uint64_t v237 = *(void *)(v8 + 144);
          int v189 = v185;
          int v238 = *(_DWORD *)(v8 + 152);
          do
          {
            long long v190 = v189;
            uint64_t v191 = (void **)(v189 - 8);
            if (*((char *)v190 - 41) < 0) {
              operator delete(*v191);
            }
            int v192 = (void **)(v190 - 18);
            *(_OWORD *)uint64_t v191 = *((_OWORD *)v190 - 9);
            v191[2] = (void *)*(v190 - 16);
            *((unsigned char *)v190 - 121) = 0;
            *((unsigned char *)v190 - 144) = 0;
            *(v190 - 5) = *(v190 - 15);
            *((_DWORD *)v190 - 8) = *((_DWORD *)v190 - 28);
            uint64_t v193 = (void **)(v190 - 3);
            if (*((char *)v190 - 1) < 0) {
              operator delete(*v193);
            }
            *(_OWORD *)uint64_t v193 = *(_OWORD *)(v190 - 13);
            *(v190 - 1) = *(v190 - 11);
            *((unsigned char *)v190 - 81) = 0;
            int v189 = v190 - 10;
            uint64_t v194 = *(v190 - 10);
            *((unsigned char *)v190 - 104) = 0;
            *long long v190 = v194;
            *((_DWORD *)v190 + 2) = *((_DWORD *)v190 - 18);
          }
          while ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)&v231, (uint64_t)&v235, (uint64_t)(v190 - 28), (uint64_t)(v190 - 23)) & 0x80) != 0);
          if (*((char *)v190 - 121) < 0) {
            operator delete(*v192);
          }
          char v195 = 0;
          long long v196 = (void **)(v190 - 13);
          long long v197 = v190 - 15;
          long long v198 = v231;
          *(v190 - 16) = v232;
          *(_OWORD *)int v192 = v198;
          HIBYTE(v232) = 0;
          LOBYTE(v231) = 0;
          int v199 = v234;
          uint64_t *v197 = v233;
          *((_DWORD *)v197 + 2) = v199;
          if (*((char *)v190 - 81) < 0)
          {
            operator delete(*v196);
            char v195 = HIBYTE(v232);
          }
          long long v200 = v235;
          *(v190 - 11) = v236;
          *(_OWORD *)long long v196 = v200;
          HIBYTE(v236) = 0;
          LOBYTE(v235) = 0;
          uint64_t v201 = v237;
          *((_DWORD *)v190 - 18) = v238;
          *int v189 = v201;
          if (v195 < 0) {
            operator delete((void *)v231);
          }
          a2 = (uint64_t *)v218;
        }
        uint64_t v184 = v186 + 80;
        v185 += 10;
        unint64_t v8 = v186;
      }
      while ((uint64_t *)(v186 + 80) != a2);
    }
  }
}

void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  *(void *)uint64_t v19 = a1[1];
  *(void *)&void v19[7] = *(uint64_t *)((char *)a1 + 15);
  char v4 = *((unsigned char *)a1 + 23);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  uint64_t v16 = a1[3];
  int v17 = *((_DWORD *)a1 + 8);
  char v6 = a1 + 5;
  uint64_t v5 = a1[5];
  *(void *)&v18[7] = *(uint64_t *)((char *)a1 + 55);
  *(void *)__n128 v18 = a1[6];
  char v7 = *((unsigned char *)a1 + 63);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  unint64_t v8 = a1 + 8;
  int v15 = *((_DWORD *)a1 + 18);
  uint64_t v14 = a1[8];
  long long v9 = *a2;
  a1[2] = *((void *)a2 + 2);
  *(_OWORD *)a1 = v9;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  uint64_t v10 = (uint64_t)a2 + 24;
  int v11 = *((_DWORD *)a2 + 8);
  a1[3] = *((void *)a2 + 3);
  *((_DWORD *)a1 + 8) = v11;
  if (*((char *)a1 + 63) < 0) {
    operator delete((void *)*v6);
  }
  long long v12 = *(long long *)((char *)a2 + 40);
  v6[2] = *((void *)a2 + 7);
  *(_OWORD *)char v6 = v12;
  uint64_t v13 = *((void *)a2 + 8);
  *((unsigned char *)a2 + 63) = 0;
  *((unsigned char *)a2 + 40) = 0;
  *((_DWORD *)v8 + 2) = *((_DWORD *)a2 + 18);
  *unint64_t v8 = v13;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v3;
  *((void *)a2 + 1) = *(void *)v19;
  *(void *)((char *)a2 + 15) = *(void *)&v19[7];
  *((unsigned char *)a2 + 23) = v4;
  *(void *)uint64_t v10 = v16;
  *(_DWORD *)(v10 + 8) = v17;
  if (*((char *)a2 + 63) < 0) {
    operator delete(*((void **)a2 + 5));
  }
  *((void *)a2 + 5) = v5;
  *((void *)a2 + 6) = *(void *)v18;
  *(void *)((char *)a2 + 55) = *(void *)&v18[7];
  *((unsigned char *)a2 + 63) = v7;
  *((void *)a2 + 8) = v14;
  *((_DWORD *)a2 + 18) = v15;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t *a1, long long *a2, long long *a3)
{
  uint64_t v6 = (uint64_t)a2 + 40;
  uint64_t v7 = (uint64_t)(a1 + 5);
  char v8 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, (uint64_t)a2 + 40, (uint64_t)a1, (uint64_t)(a1 + 5));
  int v9 = (char)std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, v6);
  if (v8 < 0)
  {
    uint64_t v10 = a1;
    if ((v9 & 0x80000000) == 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, a2);
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, v6) & 0x80) == 0)return; {
      uint64_t v10 = (uint64_t *)a2;
      }
    }
    int v11 = a3;
  }
  else
  {
    if ((v9 & 0x80000000) == 0) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a2, a3);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, v6, (uint64_t)a1, v7) & 0x80) == 0)return; {
    uint64_t v10 = a1;
    }
    int v11 = a2;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(v10, v11);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t *a1, long long *a2, long long *a3, long long *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(a1, a2, a3);
  if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a4, (uint64_t)a4 + 40, (uint64_t)a3, (uint64_t)a3 + 40) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a3, a4);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, (uint64_t)a2 + 40) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a2, a3);
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, (uint64_t)a2 + 40, (uint64_t)a1, (uint64_t)(a1 + 5)) & 0x80) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t *a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(a1, a2, a3, a4);
  if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a5, (uint64_t)a5 + 40, (uint64_t)a4, (uint64_t)a4 + 40) & 0x80) != 0)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a4, a5);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a4, (uint64_t)a4 + 40, (uint64_t)a3, (uint64_t)a3 + 40) & 0x80) != 0)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a3, a4);
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a3, (uint64_t)a3 + 40, (uint64_t)a2, (uint64_t)a2 + 40) & 0x80) != 0)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a2, a3);
        if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)a2, (uint64_t)a2 + 40, (uint64_t)a1, (uint64_t)(a1 + 5)) & 0x80) != 0)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(a2 - 80, a2 - 40, a1, a1 + 40) & 0x80) != 0)std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Wire_Identifier *&,AMCP::Wire_Identifier *&>((uint64_t *)a1, (long long *)(a2 - 80)); {
      return 1;
      }
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (long long *)(a1 + 80), (long long *)(a2 - 80));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (long long *)(a1 + 80), (long long *)(a1 + 160), (long long *)(a2 - 80));
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (long long *)(a1 + 80), (long long *)(a1 + 160), (long long *)(a1 + 240), (long long *)(a2 - 80));
      return 1;
    default:
      uint64_t v6 = a1 + 160;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *>((uint64_t *)a1, (long long *)(a1 + 80), (long long *)(a1 + 160));
      uint64_t v7 = a1 + 240;
      if (a1 + 240 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    uint64_t v10 = (long long *)(v7 + 40);
    if ((std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>(v7, v7 + 40, v6, v6 + 40) & 0x80) != 0)
    {
      uint64_t v11 = *(void *)(v7 + 24);
      uint64_t v28 = *(void *)(v7 + 16);
      *(_OWORD *)long long __p = *(_OWORD *)v7;
      *(void *)(v7 + 8) = 0;
      *(void *)(v7 + 16) = 0;
      *(void *)uint64_t v7 = 0;
      uint64_t v29 = v11;
      int v30 = *(_DWORD *)(v7 + 32);
      long long v31 = *v10;
      uint64_t v32 = *(void *)(v7 + 56);
      *(void *)(v7 + 48) = 0;
      *(void *)(v7 + 56) = 0;
      *(void *)uint64_t v10 = 0;
      uint64_t v12 = *(void *)(v7 + 64);
      int v34 = *(_DWORD *)(v7 + 72);
      uint64_t v13 = v8;
      uint64_t v33 = v12;
      while (1)
      {
        uint64_t v14 = v13;
        uint64_t v15 = a1 + v13;
        uint64_t v16 = a1 + v13 + 240;
        if (*(char *)(a1 + v13 + 263) < 0) {
          operator delete(*(void **)v16);
        }
        *(_OWORD *)uint64_t v16 = *(_OWORD *)(v15 + 160);
        *(void *)(v16 + 16) = *(void *)(v15 + 176);
        *(unsigned char *)(v15 + 183) = 0;
        *(unsigned char *)(v15 + 160) = 0;
        *(void *)(v15 + 264) = *(void *)(v15 + 184);
        *(_DWORD *)(v15 + 272) = *(_DWORD *)(v15 + 192);
        int v17 = (void **)(v15 + 280);
        if (*(char *)(v15 + 303) < 0) {
          operator delete(*v17);
        }
        uint64_t v18 = a1 + v14;
        *(_OWORD *)int v17 = *(_OWORD *)(a1 + v14 + 200);
        uint64_t v19 = *(void *)(a1 + v14 + 224);
        *(void *)(v15 + 296) = *(void *)(a1 + v14 + 216);
        *(unsigned char *)(v18 + 223) = 0;
        *(unsigned char *)(v18 + 200) = 0;
        *(void *)(v18 + 304) = v19;
        *(_DWORD *)(v18 + 312) = *(_DWORD *)(a1 + v14 + 232);
        if (v14 == -160) {
          break;
        }
        char v20 = std::__tuple_compare_three_way[abi:ne180100]<AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,AMCP::Terminal_Identifier const&,0ul,1ul>((uint64_t)__p, (uint64_t)&v31, v18 + 80, v18 + 120);
        uint64_t v13 = v14 - 80;
        if ((v20 & 0x80) == 0)
        {
          uint64_t v21 = a1 + v13 + 240;
          uint64_t v22 = a1 + v14;
          uint64_t v23 = a1 + v14 + 224;
          uint64_t v24 = v22 + 184;
          uint64_t v25 = v22 + 200;
          goto LABEL_16;
        }
      }
      uint64_t v23 = v18 + 224;
      uint64_t v24 = v18 + 184;
      uint64_t v25 = v18 + 200;
      uint64_t v21 = a1;
LABEL_16:
      if (*(char *)(v21 + 23) < 0) {
        operator delete(*(void **)v21);
      }
      char v26 = 0;
      *(_OWORD *)uint64_t v21 = *(_OWORD *)__p;
      *(void *)(v21 + 16) = v28;
      HIBYTE(v28) = 0;
      LOBYTE(__p[0]) = 0;
      *(void *)uint64_t v24 = v29;
      *(_DWORD *)(v24 + 8) = v30;
      if (*(char *)(v21 + 63) < 0)
      {
        operator delete(*(void **)v25);
        char v26 = HIBYTE(v28);
      }
      *(_OWORD *)uint64_t v25 = v31;
      *(void *)(v25 + 16) = v32;
      HIBYTE(v32) = 0;
      LOBYTE(v31) = 0;
      *(void *)uint64_t v23 = v33;
      *(_DWORD *)(v23 + 8) = v34;
      if (v26 < 0) {
        operator delete(__p[0]);
      }
      if (++v9 == 8) {
        return v7 + 80 == a2;
      }
    }
    uint64_t v6 = v7;
    v8 += 80;
    v7 += 80;
    if (v7 == a2) {
      return 1;
    }
  }
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, void *a2, void *a3, void *a4, void *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, a2, a3, a4);
  if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a5, a4) & 0x80) != 0)
  {
    uint64_t v11 = a4[2];
    long long v12 = *(_OWORD *)a4;
    uint64_t v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a4, a3) & 0x80) != 0)
    {
      uint64_t v14 = a3[2];
      long long v15 = *(_OWORD *)a3;
      uint64_t v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a3, a2) & 0x80) != 0)
      {
        uint64_t v17 = a2[2];
        long long v18 = *(_OWORD *)a2;
        uint64_t v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, a1) & 0x80) != 0)
        {
          unint64_t v20 = a1[1].n128_u64[0];
          __n128 result = *a1;
          unint64_t v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(__n128 *a1, __n128 *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      uint64_t v6 = (__n128 *)((char *)a2 - 24);
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&a2[-2].n128_u64[1], a1) & 0x80) != 0)
      {
        unint64_t v7 = a1[1].n128_u64[0];
        __n128 v8 = *a1;
        unint64_t v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        __n128 *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      uint64_t v10 = a1 + 3;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::has_same_ids(DSP_Host_OffloadDictionary const&)::$_1 &,std::string *>(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      uint64_t v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2) {
        return 1;
      }
      uint64_t v12 = 0;
      int v13 = 0;
      break;
  }
  while (1)
  {
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v11, v10) & 0x80) != 0)
    {
      long long v17 = *(_OWORD *)v11;
      unint64_t v18 = v11[2];
      v11[1] = 0;
      v11[2] = 0;
      unint64_t *v11 = 0;
      uint64_t v14 = v12;
      while (1)
      {
        long long v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((void *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        v15[71] = 0;
        v15[48] = 0;
        if (v14 == -48) {
          break;
        }
        v14 -= 24;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v17, (void *)v15 + 3) & 0x80) == 0)
        {
          uint64_t v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      uint64_t v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)uint64_t v16 = v17;
      *(void *)(v16 + 16) = v18;
      if (++v13 == 8) {
        return v11 + 3 == (unint64_t *)a2;
      }
    }
    uint64_t v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2) {
      return 1;
    }
  }
}

uint64_t AMCP::graph_description_to_json@<X0>(AMCP *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v7[0]) = 0;
  HIDWORD(v7[0]) = 0;
  v7[1] = &v12;
  v7[2] = 0;
  char v8 = 1;
  uint64_t v9 = 4;
  char v10 = 0;
  AMCP::write_json((uint64_t)v7, (uint64_t *)this);
  minijson::writer::close(v7);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v13);
  v11[0] = *MEMORY[0x1E4FBA408];
  uint64_t v5 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v12 = v5;
  v13[0] = MEMORY[0x1E4FBA470] + 16;
  if (v14 < 0) {
    operator delete((void *)v13[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v15);
}

void sub_1BAF2BCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  *(void *)(v35 + *(void *)(*MEMORY[0x1E4FBA408] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  if (a32 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](&a35);
  _Unwind_Resume(a1);
}

uint64_t AMCP::modify_graph_destroy_list_to_json@<X0>(AMCP *this@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v21);
  LOBYTE(v16) = 0;
  HIDWORD(v16) = 0;
  long long v17 = &v22;
  uint64_t v18 = 0;
  LOBYTE(v19) = 1;
  *((void *)&v19 + 1) = 4;
  LOBYTE(v20) = 0;
  memset(&v31, 0, sizeof(v31));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v31, *(long long **)this, *((long long **)this + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 1) - *(void *)this) >> 3));
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(&v28, *((void *)this + 3), *((void *)this + 4), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 4) - *((void *)this + 3)) >> 4));
  unint64_t v5 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31.__r_.__value_.__l.__size_ - v31.__r_.__value_.__r.__words[0]) >> 3));
  if (v31.__r_.__value_.__l.__size_ == v31.__r_.__value_.__r.__words[0]) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>(v31.__r_.__value_.__r.__words[0], (__n128 *)v31.__r_.__value_.__l.__size_, v6, 1);
  std::string::basic_string[abi:ne180100]<0>(&v35, "nodes_to_destroy");
  AMCP::write_json_array<std::string>((uint64_t)&v16, (char *)&v35, (uint64_t *)&v31);
  if (SHIBYTE(v37) < 0) {
    operator delete(v35);
  }
  unint64_t v7 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((v29 - v28) >> 4));
  if (v29 == v28) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Identifier *,false>((uint64_t *)v28, (uint64_t *)v29, v8, 1);
  uint64_t v9 = (char *)__p;
  std::string::basic_string[abi:ne180100]<0>(__p, "wires_to_destroy");
  if (v27 < 0) {
    uint64_t v9 = (char *)__p[0];
  }
  minijson::writer::next_field((minijson::writer *)&v16);
  minijson::writer::write_field_name(&v16, v9);
  char v10 = v17;
  long long v38 = v19;
  uint64_t v39 = v20;
  LOBYTE(v35) = 1;
  HIDWORD(v35) = 0;
  unint64_t v36 = v17;
  uint64_t v37 = v18 + 1;
  uint64_t v11 = (uint64_t *)v28;
  uint64_t v12 = (uint64_t *)v29;
  if (v28 != v29)
  {
    do
    {
      minijson::writer::next_field((minijson::writer *)&v35);
      char v10 = v36;
      long long v33 = v38;
      uint64_t v34 = v39;
      LOBYTE(v32[0]) = 0;
      HIDWORD(v32[0]) = 0;
      v32[1] = v36;
      v32[2] = v37 + 1;
      std::string::basic_string[abi:ne180100]<0>(v40, "source");
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)v32, (char *)v40, (uint64_t)v11);
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      std::string::basic_string[abi:ne180100]<0>(v40, "destination");
      uint64_t v13 = (uint64_t)(v11 + 5);
      AMCP::write_json_object<AMCP::Terminal_Identifier>((uint64_t)v32, (char *)v40, v13);
      if (v41 < 0) {
        operator delete(v40[0]);
      }
      minijson::writer::close(v32);
      uint64_t v11 = (uint64_t *)(v13 + 40);
    }
    while (v11 != v12);
  }
  minijson::writer::close(&v35);
  if (v27 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v35 = (std::string *)&v28;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  uint64_t v35 = &v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  minijson::writer::close(&v16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v23);
  v21[0] = *MEMORY[0x1E4FBA408];
  uint64_t v14 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v22 = v14;
  v23[0] = MEMORY[0x1E4FBA470] + 16;
  if (v24 < 0) {
    operator delete((void *)v23[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v25);
}

void sub_1BAF2C1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  a54 = v59 - 248;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  *(void *)(v59 - 248) = v59 - 224;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v59 - 248));
  a16 = *MEMORY[0x1E4FBA408];
  uint64_t v61 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a16 + *(void *)(a16 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a18 = v61;
  a19 = MEMORY[0x1E4FBA470] + 16;
  if (a32 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](&a35);
  _Unwind_Resume(a1);
}

uint64_t AMCP::extended_graph_description_to_json@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v39);
  LOBYTE(v34) = 0;
  HIDWORD(v34) = 0;
  uint64_t v35 = &v40;
  uint64_t v36 = 0;
  LOBYTE(v37) = 1;
  *((void *)&v37 + 1) = 4;
  LOBYTE(v38) = 0;
  BOOL v46 = 0;
  long long v47 = 0;
  int v48 = 0;
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[7];
  uint64_t v53 = (void **)&v46;
  LOBYTE(v54) = 0;
  uint64_t v5 = v4 - v3;
  if (v4 == v3)
  {
    unint64_t v17 = 0;
    uint64_t v18 = 0;
  }
  else
  {
    if (v5 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (uint64_t *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v5 >> 6);
    unint64_t v7 = 0;
    BOOL v46 = v6;
    long long v47 = (char *)v6;
    int v48 = (char *)&v6[8 * v8];
    do
    {
      uint64_t v9 = (long long *)(v3 + v7);
      char v10 = (char *)&v6[v7 / 8];
      if (*(char *)(v3 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v6[v7 / 8], *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v11 = *v9;
        *((void *)v10 + 2) = *((void *)v9 + 2);
        *(_OWORD *)char v10 = v11;
      }
      uint64_t v12 = (std::string *)&v6[v7 / 8 + 3];
      uint64_t v13 = (const std::string::value_type **)(v3 + v7 + 24);
      if (*(char *)(v3 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(void *)(v3 + v7 + 32));
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        v6[v7 / 8 + 5] = *(void *)(v3 + v7 + 40);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      uint64_t v15 = (char *)&v6[v7 / 8];
      uint64_t v16 = *(void *)(v3 + v7 + 48);
      *(void *)(v15 + 55) = *(void *)(v3 + v7 + 55);
      *((void *)v15 + 6) = v16;
      v7 += 64;
    }
    while (v3 + v7 != v4);
    unint64_t v17 = (unint64_t)&v6[v7 / 8];
    uint64_t v18 = v46;
    long long v47 = (char *)&v6[v7 / 8];
  }
  unint64_t v19 = 126 - 2 * __clz((uint64_t)(v17 - (void)v18) >> 6);
  if ((uint64_t *)v17 == v18) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = v19;
  }
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Wire_Connection_Properties *,false>(v18, v17, v20, 1);
  unint64_t v21 = (char *)v49;
  std::string::basic_string[abi:ne180100]<0>(v49, "graph");
  if (v50 < 0) {
    unint64_t v21 = (char *)v49[0];
  }
  minijson::writer::next_field((minijson::writer *)&v34);
  minijson::writer::write_field_name(&v34, v21);
  uint64_t v22 = v35;
  long long v56 = v37;
  uint64_t v57 = v38;
  LOBYTE(v53) = 0;
  HIDWORD(v53) = 0;
  long long v54 = v35;
  uint64_t v55 = v36 + 1;
  AMCP::write_json((uint64_t)&v53, a1);
  minijson::writer::close(&v53);
  if (SHIBYTE(v50) < 0) {
    operator delete(v49[0]);
  }
  uint64_t v23 = (char *)v44;
  std::string::basic_string[abi:ne180100]<0>(v44, "wire_properties");
  if (v45 < 0) {
    uint64_t v23 = (char *)v44[0];
  }
  minijson::writer::next_field((minijson::writer *)&v34);
  minijson::writer::write_field_name(&v34, v23);
  char v24 = v35;
  long long v56 = v37;
  uint64_t v57 = v38;
  LOBYTE(v53) = 1;
  HIDWORD(v53) = 0;
  long long v54 = v35;
  uint64_t v55 = v36 + 1;
  uint64_t v25 = (uint64_t)v46;
  for (i = v47; (char *)v25 != i; uint64_t v25 = (uint64_t)(v30 + 3))
  {
    minijson::writer::next_field((minijson::writer *)&v53);
    char v24 = v54;
    long long v51 = v56;
    uint64_t v52 = v57;
    LOBYTE(v49[0]) = 0;
    HIDWORD(v49[0]) = 0;
    v49[1] = v54;
    uint64_t v50 = v55 + 1;
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "source_clock_node_uid", v25);
    char v27 = (unsigned char *)(v25 + 24);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "destination_clock_node_uid", (uint64_t)v27);
    v27 += 24;
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_resampler", v27++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_delay", v27++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_format_conversion", v27++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_drift_correction", v27);
    uint64_t v28 = (int *)(v27 + 1);
    AMCP::enum_to_string<AMCP::Resampler_Type>(&v58, v28);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "resampler_type", (uint64_t)&v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v29 = v28 + 1;
    AMCP::enum_to_string<AMCP::Resampler_Quality>(&v58, v29);
    minijson::writer::write_helper<std::string,minijson::default_value_writer<std::string,void>>((uint64_t)v49, "resampler_quality", (uint64_t)&v58);
    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v30 = v29 + 1;
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_channel_map", v30++);
    minijson::writer::write_helper<BOOL,minijson::default_value_writer<BOOL,void>>((minijson::writer *)v49, "requires_volume_processing", v30);
    minijson::writer::close(v49);
  }
  minijson::writer::close(&v53);
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  uint64_t v53 = (void **)&v46;
  std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100](&v53);
  minijson::writer::close(&v34);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(a2, (uint64_t)v41);
  v39[0] = *MEMORY[0x1E4FBA408];
  uint64_t v31 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(void *)((char *)v39 + *(void *)(v39[0] - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  uint64_t v40 = v31;
  v41[0] = MEMORY[0x1E4FBA470] + 16;
  if (v42 < 0) {
    operator delete((void *)v41[8]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1C1859700](&v43);
}

void sub_1BAF2C908(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  *(void *)(v37 - 256) = v37 - 232;
  std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 256));
  a18 = *MEMORY[0x1E4FBA408];
  uint64_t v39 = *(void *)(MEMORY[0x1E4FBA408] + 72);
  *(uint64_t *)((char *)&a18 + *(void *)(a18 - 24)) = *(void *)(MEMORY[0x1E4FBA408] + 64);
  a20 = v39;
  a21 = MEMORY[0x1E4FBA470] + 16;
  if (a34 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1C1859700](&a37);
  _Unwind_Resume(a1);
}

uint64_t minijson::istream_context::read(minijson::istream_context *this)
{
  char v2 = std::istream::get();
  if ((*(unsigned char *)(*((void *)this + 2) + *(void *)(**((void **)this + 2) - 24) + 32) & 5) != 0) {
    return 0;
  }
  else {
    ++*((void *)this + 3);
  }
  return v2;
}

void minijson::detail::read_quoted_string<minijson::istream_context>(minijson::istream_context **this)
{
  unsigned __int16 v2 = 0;
  uint64_t v3 = 0;
  char v40 = 0;
  int v4 = 1;
  uint64_t v5 = MEMORY[0x1E4F14390];
  int v39 = 0;
  while (1)
  {
    do
    {
      while (1)
      {
        while (1)
        {
LABEL_2:
          int v6 = minijson::istream_context::read((minijson::istream_context *)this);
          if (!v6)
          {
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            char v24 = this[3];
            BOOL v25 = v24 != 0;
            char v26 = (char *)v24 - 1;
            if (!v25) {
              char v26 = 0;
            }
            void *exception = &unk_1F14850D8;
            exception[1] = v26;
            int v27 = 5;
            goto LABEL_62;
          }
          int v7 = v6;
          if (v4 != 3) {
            break;
          }
          *((unsigned char *)&v39 + v3++) = v6;
          if (v3 == 4)
          {
            for (uint64_t i = 0; i != 4; ++i)
            {
              if (*((char *)&v39 + i) < 0
                || (*(_DWORD *)(v5 + 4 * *((unsigned __int8 *)&v39 + i) + 60) & 0x10000) == 0)
              {
                uint64_t v22 = __cxa_allocate_exception(1uLL);
              }
            }
            unsigned int v11 = minijson::detail::parse_long((minijson::detail *)&v39, (const char *)0x10);
            if (!((unsigned __int16)v11 | v2))
            {
              uint64_t v30 = __cxa_allocate_exception(0x18uLL);
              uint64_t v31 = this[3];
              BOOL v25 = v31 != 0;
              uint64_t v32 = (char *)v31 - 1;
              if (!v25) {
                uint64_t v32 = 0;
              }
              *uint64_t v30 = &unk_1F14850D8;
              v30[1] = v32;
              *((_DWORD *)v30 + 4) = 13;
            }
            if (v2)
            {
              if ((unsigned __int16)((unsigned __int16)(v2 + 0x2000) >> 11) > 0x1Eu)
              {
                if ((unsigned __int16)(v2 >> 10) > 0x36u
                  || (unsigned __int16)((unsigned __int16)(v11 + 0x2000) >> 10) <= 0x3Eu)
                {
LABEL_69:
                  long long v33 = __cxa_allocate_exception(1uLL);
                }
                unsigned int v19 = (unsigned __int16)(v11 + 9216) | ((unsigned __int16)(v2 + 10240) << 10);
                unsigned int v12 = ((v19 + 0x10000) >> 18) | 0xF0;
                unsigned int v15 = ((v19 + 0x10000) >> 12) & 0x3F | 0x80;
                int v14 = (v19 >> 6) & 0x3F | 0x80;
                unsigned int v13 = (((v11 + 9216) & 0x3F) << 24) | 0x80000000;
              }
              else
              {
                if ((_WORD)v11) {
                  goto LABEL_69;
                }
                unsigned int v12 = v2;
                if (v2 >= 0x80u)
                {
                  unsigned int v15 = v2 & 0x3F | 0x80;
                  unsigned int v13 = 0;
                  if (v2 > 0x7FFu)
                  {
                    int v14 = v2 & 0x3F | 0x80;
                    unsigned int v15 = (v2 >> 6) & 0x3F | 0x80;
                    unsigned int v12 = (v2 >> 12) | 0xE0;
                  }
                  else
                  {
                    int v14 = 0;
                    unsigned int v12 = (v2 >> 6) | 0xC0;
                  }
                }
                else
                {
                  unsigned int v13 = 0;
                  int v14 = 0;
                  unsigned int v15 = 0;
                }
              }
              uint64_t v20 = 0;
              int v38 = v13 | (v14 << 16) | (v15 << 8) | v12;
              do
              {
                if (v20 && !*((unsigned char *)&v38 + v20)) {
                  break;
                }
                minijson::istream_context::write(this[4], *((unsigned char *)&v38 + v20++));
              }
              while (v20 != 4);
LABEL_56:
              unsigned __int16 v2 = 0;
              uint64_t v3 = 0;
              int v4 = 1;
            }
            else
            {
              uint64_t v3 = 0;
              int v4 = 1;
              unsigned __int16 v2 = v11;
              if ((unsigned __int16)v11 >> 10 != 54)
              {
                if ((unsigned __int16)((unsigned __int16)(v11 + 0x2000) >> 11) > 0x1Eu)
                {
                  uint64_t v36 = __cxa_allocate_exception(1uLL);
                }
                int v16 = (unsigned __int16)v11;
                if ((unsigned __int16)v11 >= 0x80u)
                {
                  if ((unsigned __int16)v11 > 0x7FFu)
                  {
                    int v16 = ((unsigned __int16)v11 >> 12) | 0xE0;
                    int v18 = (v11 >> 6) & 0x3F | 0x80;
                    int v17 = v11 & 0x3F | 0x80;
                  }
                  else
                  {
                    int v17 = 0;
                    int v16 = ((unsigned __int16)v11 >> 6) | 0xC0;
                    int v18 = v11 & 0x3F | 0x80;
                  }
                }
                else
                {
                  int v17 = 0;
                  int v18 = 0;
                }
                uint64_t v21 = 0;
                int v37 = (v17 << 16) | (v18 << 8) | v16;
                do
                {
                  if (v21 && !*((unsigned char *)&v37 + v21)) {
                    break;
                  }
                  minijson::istream_context::write(this[4], *((unsigned char *)&v37 + v21++));
                }
                while (v21 != 4);
                goto LABEL_56;
              }
            }
          }
        }
        if (v4 != 2) {
          break;
        }
        if (v6 <= 97)
        {
          if (v6 == 34 || v6 == 47 || v6 == 92)
          {
            uint64_t v9 = this[4];
            goto LABEL_14;
          }
LABEL_70:
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          uint64_t v34 = this[3];
          BOOL v25 = v34 != 0;
          uint64_t v35 = (char *)v34 - 1;
          if (!v25) {
            uint64_t v35 = 0;
          }
          void *exception = &unk_1F14850D8;
          exception[1] = v35;
          int v27 = 3;
LABEL_62:
          *((_DWORD *)exception + 4) = v27;
        }
        int v4 = 3;
        switch(v6)
        {
          case 'n':
            uint64_t v9 = this[4];
            LOBYTE(v7) = 10;
            break;
          case 'o':
          case 'p':
          case 'q':
          case 's':
            goto LABEL_70;
          case 'r':
            uint64_t v9 = this[4];
            LOBYTE(v7) = 13;
            break;
          case 't':
            uint64_t v9 = this[4];
            LOBYTE(v7) = 9;
            break;
          case 'u':
            goto LABEL_2;
          default:
            if (v6 == 98)
            {
              uint64_t v9 = this[4];
              LOBYTE(v7) = 8;
            }
            else
            {
              if (v6 != 102) {
                goto LABEL_70;
              }
              uint64_t v9 = this[4];
              LOBYTE(v7) = 12;
            }
            break;
        }
LABEL_14:
        minijson::istream_context::write(v9, v7);
        int v4 = 1;
      }
      int v4 = 2;
    }
    while (v6 == 92);
    if (v2)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      uint64_t v28 = this[3];
      BOOL v25 = v28 != 0;
      uint64_t v29 = (char *)v28 - 1;
      if (!v25) {
        uint64_t v29 = 0;
      }
      void *exception = &unk_1F14850D8;
      exception[1] = v29;
      int v27 = 2;
      goto LABEL_62;
    }
    uint64_t v8 = this[4];
    if (v7 == 34) {
      break;
    }
    minijson::istream_context::write(v8, v7);
    unsigned __int16 v2 = 0;
    int v4 = 1;
  }
  minijson::istream_context::write(v8, 0);
}

void sub_1BAF2D05C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    __cxa_begin_catch(exception_object);
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v4 = *(void *)(v2 + 24);
    BOOL v5 = v4 != 0;
    uint64_t v6 = v4 - 1;
    if (!v5) {
      uint64_t v6 = 0;
    }
    void *exception = &unk_1F14850D8;
    exception[1] = v6;
    *((_DWORD *)exception + 4) = 4;
  }
  _Unwind_Resume(exception_object);
}

void sub_1BAF2D0DC()
{
}

void minijson::detail::parse_value_helper<minijson::istream_context>(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4)
{
  unsigned int v6 = *a3;
  switch(v6)
  {
    case '""':
      uint64_t v8 = operator new(0x28uLL);
      v8[3] = 0;
      v8[4] = 0;
      uint64_t v10 = a2 + 32;
      uint64_t v9 = *(void *)(a2 + 32);
      v8[1] = a2 + 32;
      v8[2] = 0;
      *uint64_t v8 = v9;
      *(void *)(v9 + 8) = v8;
      *(void *)(a2 + 32) = v8;
      ++*(void *)(a2 + 48);
      minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)a2);
      if (*(void *)(*(void *)v10 + 16) == *(void *)(*(void *)v10 + 24)) {
        uint64_t v11 = 0;
      }
      else {
        uint64_t v11 = *(void *)(*(void *)v10 + 16);
      }
      *(_DWORD *)a1 = 0;
      *(_WORD *)(a1 + 4) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = v11;
      return;
    case '[':
      *(_DWORD *)a1 = 4;
      *(_WORD *)(a1 + 4) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = "";
      int v7 = 2;
      goto LABEL_6;
    case '{':
      *(_DWORD *)a1 = 3;
      *(_WORD *)(a1 + 4) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 8) = "";
      int v7 = 1;
LABEL_6:
      *(_DWORD *)a2 = v7;
      ++*(void *)(a2 + 8);
      return;
  }
  int v14 = (minijson::istream_context *)operator new(0x28uLL);
  int v16 = (minijson::istream_context **)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 32);
  *((void *)v14 + 3) = 0;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 1) = a2 + 32;
  *((void *)v14 + 2) = 0;
  *(void *)int v14 = v15;
  *(void *)(v15 + 8) = v14;
  *(void *)(a2 + 32) = v14;
  ++*(void *)(a2 + 48);
  if (!v6) {
    goto LABEL_13;
  }
  while (1)
  {
    minijson::istream_context::write(v14, v6);
LABEL_13:
    unsigned int v17 = minijson::istream_context::read((minijson::istream_context *)a2);
    unsigned int v6 = v17;
    if (v17 <= 0x5Cu)
    {
      if (v17 == 44) {
        goto LABEL_24;
      }
      if (!(_BYTE)v17) {
        goto LABEL_36;
      }
    }
    else if (v17 == 93 || v17 == 125)
    {
      goto LABEL_24;
    }
    if ((v17 & 0x80000000) != 0) {
      break;
    }
    if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v17 + 60) & 0x4000) != 0) {
      goto LABEL_23;
    }
LABEL_21:
    int v14 = *v16;
  }
  if (!__maskrune(v17, 0x4000uLL)) {
    goto LABEL_21;
  }
LABEL_23:
  if (!v6)
  {
LABEL_36:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    uint64_t v25 = *(void *)(a2 + 24);
    BOOL v26 = v25 != 0;
    uint64_t v27 = v25 - 1;
    if (!v26) {
      uint64_t v27 = 0;
    }
    void *exception = &unk_1F14850D8;
    exception[1] = v27;
    *((_DWORD *)exception + 4) = 7;
  }
LABEL_24:
  minijson::istream_context::write(*v16, 0);
  if (*((void *)*v16 + 2) == *((void *)*v16 + 3)) {
    int v18 = 0;
  }
  else {
    int v18 = (char *)*((void *)*v16 + 2);
  }
  if (!strcmp(v18, "true"))
  {
    int v23 = 2;
    uint64_t v20 = 1;
    double v19 = 1.0;
LABEL_33:
    char v22 = 1;
    char v21 = 1;
    goto LABEL_34;
  }
  double v19 = 0.0;
  if (!strcmp(v18, "false"))
  {
    uint64_t v20 = 0;
    int v23 = 2;
    goto LABEL_33;
  }
  if (!strcmp(v18, "null"))
  {
    uint64_t v20 = 0;
    char v22 = 0;
    char v21 = 0;
    int v23 = 5;
  }
  else
  {
    uint64_t v20 = minijson::detail::parse_long((minijson::detail *)v18, (const char *)0xA);
    double v19 = (double)v20;
    char v21 = 1;
    char v22 = 1;
    int v23 = 1;
  }
LABEL_34:
  *(_DWORD *)a1 = v23;
  *(unsigned char *)(a1 + 4) = v21;
  *(unsigned char *)(a1 + 5) = v22;
  *(void *)(a1 + 8) = v18;
  *(void *)(a1 + 16) = v20;
  *(double *)(a1 + 24) = v19;
  *a3 = v6;
  *a4 = 0;
}

void sub_1BAF2D400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  if (a2 != 1) {
    _Unwind_Resume(exception_object);
  }
  __cxa_begin_catch(exception_object);
  if (v10)
  {
    unsigned int v11 = *(unsigned __int8 *)v10;
    if (*v10)
    {
      uint64_t v12 = 1;
      do
      {
        if ((v11 & 0x80) != 0 || (*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v11 + 60) & 0x400) == 0)
        {
          unsigned int v13 = v11 - 43;
          if (v13 > 0x3A || ((1 << v13) & 0x40000000400000DLL) == 0) {
            goto LABEL_13;
          }
        }
        unsigned int v11 = v10[v12++];
      }
      while (v11);
      int v14 = *__error();
      *__error() = 0;
      a10 = 0;
      strtod(v10, &a10);
      uint64_t v15 = __error();
      int v16 = *v15;
      *uint64_t v15 = v14;
      if (!*a10 && v16 != 34)
      {
        __cxa_end_catch();
        JUMPOUT(0x1BAF2D330);
      }
    }
  }
LABEL_13:
  exceptiouint64_t n = __cxa_allocate_exception(1uLL);
}

AMCP::Log::Scope_Registry *AMCP::require_type(AMCP::Log::Scope_Registry *result, int a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (result != a2)
  {
    AMCP::Log::Scope_Registry::get(result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)uint64_t v20 = 2080;
      *(void *)&v20[2] = "Graph_Description.cpp";
      __int16 v21 = 1024;
      int v22 = 482;
      __int16 v23 = 2080;
      *(void *)char v24 = "not (value.type() == required_type)";
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s value does not have expected type", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"value does not have expected type", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v12, &v11);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v13 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(void *)&v24[6] = "void AMCP::require_type(const minijson::value &, minijson::value_type)";
    uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description.cpp";
    int v26 = 482;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    long long v8 = v5;
    uint64_t v9 = v6;
    long long v5 = 0uLL;
    uint64_t v6 = 0;
    int v7 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BAF2D7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t minijson::detail::parse_long(minijson::detail *this, const char *a2)
{
  if (!this) {
    goto LABEL_11;
  }
  unsigned int v3 = *(char *)this;
  if (!v3) {
    goto LABEL_11;
  }
  int v4 = (int)a2;
  if ((v3 & 0x80000000) != 0)
  {
    if (__maskrune(v3, 0x4000uLL)) {
      goto LABEL_11;
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v3 + 60) & 0x4000) != 0)
  {
    goto LABEL_11;
  }
  int v5 = *__error();
  *__error() = 0;
  __endptr = 0;
  uint64_t v6 = strtol((const char *)this, &__endptr, v4);
  int v7 = __error();
  int v8 = *v7;
  *int v7 = v5;
  if (*__endptr || v8 == 34 && (unint64_t)(v6 - 0x7FFFFFFFFFFFFFFFLL) <= 1)
  {
LABEL_11:
    exceptiouint64_t n = __cxa_allocate_exception(1uLL);
  }
  return v6;
}

void minijson::istream_context::write(minijson::istream_context *this, char a2)
{
  int v5 = (unsigned char *)*((void *)this + 3);
  unint64_t v4 = *((void *)this + 4);
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *((void *)this + 2);
    int v8 = &v5[-v7];
    uint64_t v9 = (uint64_t)&v5[-v7 + 1];
    if (v9 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      uint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      std::logic_error v12 = operator new(v11);
    }
    else {
      std::logic_error v12 = 0;
    }
    unsigned int v13 = &v12[v11];
    v8[(void)v12] = a2;
    uint64_t v6 = (uint64_t)&v8[(void)v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      std::logic_error v12 = &v8[(void)v12];
    }
    else
    {
      uint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[(void)v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      int v5 = (unsigned char *)*((void *)this + 2);
    }
    *((void *)this + 2) = v12;
    *((void *)this + 3) = v6;
    *((void *)this + 4) = v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = a2;
    uint64_t v6 = (uint64_t)(v5 + 1);
  }
  *((void *)this + 3) = v6;
}

const char *minijson::parse_error::what(minijson::parse_error *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  if (v1 > 0xD) {
    return "";
  }
  else {
    return off_1E6235858[v1];
  }
}

void minijson::parse_error::~parse_error(std::exception *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x1C1859840);
}

void AMCP::parse_json<AMCP::Terminal_Description>(uint64_t a1, minijson::istream_context *this)
{
  uint64_t v130 = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(void *)(a1 + 88) = 1;
  *(unsigned char *)(a1 + 96) = 0;
  unint64_t v4 = *((void *)this + 1);
  if (v4 >= 0x21) {
    goto LABEL_233;
  }
  LOBYTE(v5) = 0;
  unsigned __int8 v105 = 0;
  unsigned int v6 = *(unsigned __int8 *)this;
  if (v6 <= 2)
  {
    char v7 = 8 * v6;
    unsigned int v5 = 0x5B7B00u >> v7;
    unsigned __int8 v105 = 1u >> v7;
  }
  int v8 = 0;
  *(_DWORD *)this = 0;
  uint64_t v9 = (char *)this + 32;
  unint64_t v96 = (std::allocator<std::string> *)(a1 + 80);
  uint64_t v100 = (std::vector<std::string> *)(a1 + 64);
  char v101 = (std::vector<std::string> *)(a1 + 40);
  uint64_t v98 = (std::allocator<std::string> *)(a1 + 56);
  unint64_t v10 = "";
  uint64_t v11 = MEMORY[0x1E4F14390];
LABEL_5:
  if (v8 != 6)
  {
    int v12 = v105;
    while (*((void *)this + 1) == v4)
    {
      if (v12) {
        LOBYTE(v5) = minijson::istream_context::read(this);
      }
      if ((v5 & 0x80) != 0) {
        int v13 = __maskrune((char)v5, 0x4000uLL);
      }
      else {
        int v13 = *(_DWORD *)(v11 + 4 * (char)v5 + 60) & 0x4000;
      }
      int v12 = 1;
      if (!v13)
      {
        unsigned __int8 v105 = 1;
        char v106 = v5;
        switch(v8)
        {
          case 0:
            if (v5 != 123)
            {
LABEL_215:
              exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
              void *exception = &unk_1F14850D8;
              uint64_t v88 = *((void *)this + 3);
              BOOL v76 = v88 != 0;
              uint64_t v77 = v88 - 1;
              if (!v76) {
                uint64_t v77 = 0;
              }
              int v78 = 8;
              goto LABEL_205;
            }
            int v8 = 1;
            char v14 = 44;
            LOBYTE(v5) = 123;
LABEL_174:
            if (!v14)
            {
LABEL_175:
              uint64_t v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v87, "This line should never be reached, please file a bug report");
              __cxa_throw(v87, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            goto LABEL_5;
          case 1:
            if (v5 == 34) {
              goto LABEL_31;
            }
            if (v5 == 125)
            {
              int v8 = 6;
              char v14 = 44;
              goto LABEL_174;
            }
LABEL_224:
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            uint64_t v90 = *((void *)this + 3);
            BOOL v76 = v90 != 0;
            uint64_t v77 = v90 - 1;
            if (!v76) {
              uint64_t v77 = 0;
            }
            int v78 = 1;
            goto LABEL_205;
          case 2:
            if (v5 != 34) {
              goto LABEL_224;
            }
LABEL_31:
            char v15 = operator new(0x28uLL);
            v15[2] = 0;
            uint64_t v15[3] = 0;
            v15[4] = 0;
            uint64_t v16 = *((void *)this + 4);
            *char v15 = v16;
            v15[1] = v9;
            *(void *)(v16 + 8) = v15;
            *((void *)this + 4) = v15;
            ++*((void *)this + 6);
            minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
            if (*(void *)(*(void *)v9 + 16) == *(void *)(*(void *)v9 + 24)) {
              unint64_t v10 = 0;
            }
            else {
              unint64_t v10 = *(const char **)(*(void *)v9 + 16);
            }
            int v8 = 3;
            goto LABEL_172;
          case 3:
            if (v5 == 58)
            {
              int v8 = 4;
              char v14 = 44;
              LOBYTE(v5) = 58;
              goto LABEL_174;
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            uint64_t v91 = *((void *)this + 3);
            BOOL v76 = v91 != 0;
            uint64_t v77 = v91 - 1;
            if (!v76) {
              uint64_t v77 = 0;
            }
            int v78 = 9;
            goto LABEL_205;
          case 4:
            minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v102, (uint64_t)this, &v106, &v105);
            if (!strcmp(v10, "Format"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v102, 3);
              uint64_t v99 = v10;
              unint64_t v17 = *((void *)this + 1);
              if (v17 >= 0x21)
              {
                int v79 = 12;
                goto LABEL_207;
              }
              LOBYTE(v18) = 0;
              LOBYTE(v110) = 0;
              unsigned int v19 = *(unsigned __int8 *)this;
              if (v19 <= 2)
              {
                char v20 = 8 * v19;
                unsigned int v18 = 0x5B7B00u >> v20;
                LOBYTE(v110) = 1u >> v20;
              }
              uint64_t v97 = 0;
              uint64_t v94 = 0;
              uint64_t v95 = 0;
              unsigned int v93 = 0;
              int v21 = 0;
              *(_DWORD *)this = 0;
              double end = 0.0;
              __int16 v23 = "";
              while (v21 != 6)
              {
                int v24 = v110;
                do
                {
                  if (*((void *)this + 1) != v17)
                  {
                    int v79 = 11;
                    goto LABEL_207;
                  }
                  if (v24) {
                    LOBYTE(v18) = minijson::istream_context::read(this);
                  }
                  if ((v18 & 0x80) != 0) {
                    int v25 = __maskrune((char)v18, 0x4000uLL);
                  }
                  else {
                    int v25 = *(_DWORD *)(v11 + 4 * (char)v18 + 60) & 0x4000;
                  }
                  int v24 = 1;
                }
                while (v25);
                LOBYTE(v110) = 1;
                v125.__r_.__value_.__s.__data_[0] = v18;
                switch(v21)
                {
                  case 0:
                    if (v18 == 123)
                    {
                      int v21 = 1;
                      char v26 = 44;
                      LOBYTE(v18) = 123;
                      goto LABEL_89;
                    }
                    int v79 = 8;
                    goto LABEL_207;
                  case 1:
                    if (v18 == 34) {
                      goto LABEL_71;
                    }
                    if (v18 == 125)
                    {
                      int v21 = 6;
                      char v26 = 44;
                      goto LABEL_89;
                    }
LABEL_218:
                    int v79 = 1;
                    goto LABEL_207;
                  case 2:
                    if (v18 != 34) {
                      goto LABEL_218;
                    }
LABEL_71:
                    uint64_t v27 = operator new(0x28uLL);
                    v27[2] = 0;
                    v27[3] = 0;
                    v27[4] = 0;
                    uint64_t v28 = *((void *)this + 4);
                    *uint64_t v27 = v28;
                    v27[1] = v9;
                    *(void *)(v28 + 8) = v27;
                    *((void *)this + 4) = v27;
                    ++*((void *)this + 6);
                    minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
                    if (*(void *)(*(void *)v9 + 16) == *(void *)(*(void *)v9 + 24)) {
                      __int16 v23 = 0;
                    }
                    else {
                      __int16 v23 = *(const char **)(*(void *)v9 + 16);
                    }
                    int v21 = 3;
                    goto LABEL_87;
                  case 3:
                    if (v18 == 58)
                    {
                      int v21 = 4;
                      char v26 = 44;
                      LOBYTE(v18) = 58;
                      goto LABEL_89;
                    }
                    int v79 = 9;
                    goto LABEL_207;
                  case 4:
                    minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&__v, (uint64_t)this, &v125, &v110);
                    if (!strcmp(v23, "SampleRate"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      double end = (double)(uint64_t)__v.__end_;
                    }
                    else if (!strcmp(v23, "FormatID"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      HIDWORD(v97) = __v.__end_;
                    }
                    else if (!strcmp(v23, "FormatFlags"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      LODWORD(v97) = __v.__end_;
                    }
                    else if (!strcmp(v23, "BytesPerPacket"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      HIDWORD(v95) = __v.__end_;
                    }
                    else if (!strcmp(v23, "FramesPerPacket"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      LODWORD(v95) = __v.__end_;
                    }
                    else if (!strcmp(v23, "BytesPerFrame"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      HIDWORD(v94) = __v.__end_;
                    }
                    else if (!strcmp(v23, "ChannelsPerFrame"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      LODWORD(v94) = __v.__end_;
                    }
                    else if (!strcmp(v23, "BitsPerChannel"))
                    {
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(__v.__first_), 1);
                      unsigned int v93 = __v.__end_;
                    }
                    int v21 = 5;
                    goto LABEL_87;
                  case 5:
                    if (v18 != 44)
                    {
                      if (v18 == 125)
                      {
                        int v21 = 6;
                        char v26 = 44;
                        LOBYTE(v18) = 125;
                        goto LABEL_89;
                      }
                      int v79 = 10;
LABEL_207:
                      uint64_t v80 = __cxa_allocate_exception(0x18uLL);
                      void *v80 = &unk_1F14850D8;
                      uint64_t v81 = *((void *)this + 3);
                      BOOL v76 = v81 != 0;
                      uint64_t v82 = v81 - 1;
                      if (!v76) {
                        uint64_t v82 = 0;
                      }
                      v80[1] = v82;
                      *((_DWORD *)v80 + 4) = v79;
                    }
                    int v21 = 2;
LABEL_88:
                    char v26 = v18;
LABEL_89:
                    if (!v26)
                    {
                      long long v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                      std::runtime_error::runtime_error(v86, "This line should never be reached, please file a bug report");
                      __cxa_throw(v86, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                    }
                    return;
                  default:
LABEL_87:
                    LOBYTE(v18) = v125.__r_.__value_.__s.__data_[0];
                    goto LABEL_88;
                }
              }
              uint64_t v29 = *((void *)this + 1);
              if (v29) {
                *((void *)this + 1) = v29 - 1;
              }
              *(double *)a1 = end;
              *(_DWORD *)(a1 + 8) = HIDWORD(v97);
              *(_DWORD *)(a1 + 12) = v97;
              *(_DWORD *)(a1 + 16) = HIDWORD(v95);
              *(_DWORD *)(a1 + 20) = v95;
              *(_DWORD *)(a1 + 24) = HIDWORD(v94);
              *(_DWORD *)(a1 + 28) = v94;
              int v8 = 5;
              *(void *)(a1 + 32) = v93;
              goto LABEL_171;
            }
            if (!strcmp(v10, "PublishTags"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v102, 4);
              unint64_t v30 = *((void *)this + 1);
              if (v30 < 0x21)
              {
                uint64_t v99 = v10;
                LOBYTE(v31) = 0;
                v113.__r_.__value_.__s.__data_[0] = 0;
                unsigned int v32 = *(unsigned __int8 *)this;
                if (v32 <= 2)
                {
                  char v33 = 8 * v32;
                  unsigned int v31 = 0x5B7B00u >> v33;
                  v113.__r_.__value_.__s.__data_[0] = 1u >> v33;
                }
                int v34 = 0;
                *(_DWORD *)this = 0;
                while (2)
                {
                  if (v34 != 4)
                  {
                    int v35 = v113.__r_.__value_.__s.__data_[0];
                    do
                    {
                      if (*((void *)this + 1) != v30) {
                        goto LABEL_202;
                      }
                      if (v35) {
                        LOBYTE(v31) = minijson::istream_context::read(this);
                      }
                      if ((v31 & 0x80) != 0) {
                        int v36 = __maskrune((char)v31, 0x4000uLL);
                      }
                      else {
                        int v36 = *(_DWORD *)(v11 + 4 * (char)v31 + 60) & 0x4000;
                      }
                      int v35 = 1;
                    }
                    while (v36);
                    v113.__r_.__value_.__s.__data_[0] = 1;
                    LOBYTE(v110) = v31;
                    switch(v34)
                    {
                      case 0:
                        if (v31 != 91) {
                          goto LABEL_215;
                        }
                        int v34 = 1;
                        char v37 = 44;
                        LOBYTE(v31) = 91;
                        goto LABEL_129;
                      case 1:
                        if (v31 != 93) {
                          goto LABEL_111;
                        }
                        goto LABEL_115;
                      case 2:
LABEL_111:
                        minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v125, (uint64_t)this, &v110, &v113);
                        AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v125.__r_.__value_.__l.__data_), 0);
                        std::string::size_type size = (char *)v125.__r_.__value_.__l.__size_;
                        unint64_t v40 = *(void *)(a1 + 48);
                        unint64_t v39 = *(void *)(a1 + 56);
                        if (v40 >= v39)
                        {
                          unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (unint64_t)v101->__begin_) >> 3);
                          unint64_t v43 = v42 + 1;
                          if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - (unint64_t)v101->__begin_) >> 3);
                          if (2 * v44 > v43) {
                            unint64_t v43 = 2 * v44;
                          }
                          if (v44 >= 0x555555555555555) {
                            unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v45 = v43;
                          }
                          __v.__end_cap_.__value_ = v98;
                          if (v45) {
                            unint64_t v45 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v45);
                          }
                          else {
                            uint64_t v46 = 0;
                          }
                          __v.__first_ = (std::__split_buffer<std::string>::pointer)v45;
                          __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v45 + 24 * v42);
                          __v.__end_ = __v.__begin_;
                          __v.__end_cap_.__value_ = (std::string *)(v45 + 24 * v46);
                          std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, size);
                          ++__v.__end_;
                          std::vector<std::string>::__swap_out_circular_buffer(v101, &__v);
                          unint64_t v41 = *(void *)(a1 + 48);
                          std::__split_buffer<std::string>::~__split_buffer(&__v);
                        }
                        else
                        {
                          std::string::basic_string[abi:ne180100]<0>(*(void **)(a1 + 48), (char *)v125.__r_.__value_.__l.__size_);
                          unint64_t v41 = v40 + 24;
                          *(void *)(a1 + 48) = v40 + 24;
                        }
                        *(void *)(a1 + 48) = v41;
                        int v34 = 3;
                        LOBYTE(v31) = (_BYTE)v110;
                        goto LABEL_128;
                      case 3:
                        if (v31 == 44)
                        {
                          int v34 = 2;
LABEL_128:
                          char v37 = v31;
                        }
                        else
                        {
                          if (v31 != 93) {
                            goto LABEL_219;
                          }
LABEL_115:
                          int v34 = 4;
                          char v37 = 44;
                          LOBYTE(v31) = 93;
                        }
LABEL_129:
                        if (!v37) {
                          goto LABEL_175;
                        }
                        continue;
                      default:
                        goto LABEL_128;
                    }
                  }
                  goto LABEL_168;
                }
              }
            }
            else
            {
              if (strcmp(v10, "SubscribeToTags"))
              {
                if (!strcmp(v10, "SourceMixPolicy"))
                {
                  AMCP::require_type((AMCP::Log::Scope_Registry *)v102, 0);
                  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                  AMCP::get_enum_string_bimap<AMCP::Terminal_Source_Mix_Policy>();
                  __v.__begin_ = (std::__split_buffer<std::string>::pointer)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
                  uint64_t v65 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Terminal_Source_Mix_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Terminal_Source_Mix_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&__v.__end_);
                  uint64_t v123 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
                  uint64_t v124 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    std::string::__init_copy_ctor_external(&v125, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v125 = __p;
                  }
                  __n128 v66 = v10;
                  value = __v.__end_cap_.__value_;
                  std::string::size_type v68 = __v.__end_cap_.__value_[2].__r_.__value_.__l.__size_ & 0xFFFFFFFFFFFFFFFELL;
                  if (v68)
                  {
                    uint64_t v69 = __v.__end_cap_.__value_;
                    do
                    {
                      while (1)
                      {
                        uint64_t v65 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v68 - 48), &v125);
                        if ((v65 & 0x80) == 0) {
                          break;
                        }
                        std::string::size_type v68 = *(void *)(v68 + 16);
                        if (!v68) {
                          goto LABEL_187;
                        }
                      }
                      uint64_t v69 = (std::string *)(v68 - 56);
                      std::string::size_type v68 = *(void *)(v68 + 8);
                    }
                    while (v68);
LABEL_187:
                    if (v69 != value)
                    {
                      uint64_t v65 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v125, &v69->__r_.__value_.__l.__size_);
                      if ((v65 & 0x80u) == 0) {
                        value = v69;
                      }
                    }
                  }
                  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v125.__r_.__value_.__l.__data_);
                  }
                  if ((std::string *)v124[-1].__value_ == value)
                  {
                    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v65);
                    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v125, "com.apple.coreaudio", "AMCP");
                    uint64_t v83 = *(NSObject **)v125.__r_.__value_.__l.__data_;
                    if (v125.__r_.__value_.__l.__size_) {
                      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v125.__r_.__value_.__l.__size_);
                    }
                    if (os_log_type_enabled(v83, OS_LOG_TYPE_ERROR))
                    {
                      uint64_t v84 = pthread_self();
                      mach_port_t v85 = pthread_mach_thread_np(v84);
                      LODWORD(v125.__r_.__value_.__l.__data_) = 67109890;
                      HIDWORD(v125.__r_.__value_.__r.__words[0]) = v85;
                      LOWORD(v125.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&v125.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                      WORD1(v125.__r_.__value_.__r.__words[2]) = 1024;
                      HIDWORD(v125.__r_.__value_.__r.__words[2]) = 53;
                      __int16 v126 = 2080;
                      *(void *)long long v127 = "not (found != map.right.end())";
                      _os_log_error_impl(&dword_1BAA78000, v83, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v125, 0x22u);
                    }
                    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
                    __cxa_allocate_exception(0x40uLL);
                    caulk::make_string((caulk *)"", (uint64_t)&v113);
                    std::logic_error::logic_error(&v114, &v113);
                    v114.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                    std::logic_error::logic_error(&v115, &v114);
                    uint64_t v117 = 0;
                    uint64_t v118 = 0;
                    uint64_t v119 = 0;
                    int v120 = -1;
                    v115.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                    uint64_t v116 = &unk_1F1489CF0;
                    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v125, (uint64_t)&v115);
                    *(void *)&v127[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Terminal_Source_Mix_Policy]";
                    long long v128 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                    int v129 = 53;
                    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v108);
                    long long v111 = v108;
                    uint64_t v112 = v109;
                    long long v108 = 0uLL;
                    uint64_t v109 = 0;
                    uint64_t v110 = &unk_1F148AA90;
                    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                  }
                  std::string::size_type v70 = __v.__end_cap_.__value_[2].__r_.__value_.__l.__size_;
                  int data = (int)value->__r_.__value_.__l.__data_;
                  if ((v70 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                    uint64_t v72 = (v70 & 0xFFFFFFFFFFFFFFFELL) - 56;
                  }
                  else {
                    uint64_t v72 = 0;
                  }
                  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>, v72);
                  operator delete(__v.__end_cap_.__value_);
                  *(_DWORD *)(a1 + 88) = data;
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  int v8 = 5;
                  unint64_t v10 = v66;
                }
                else
                {
                  if (!strcmp(v10, "LatencyAdjustment"))
                  {
                    AMCP::require_type((AMCP::Log::Scope_Registry *)v102, 1);
                    *(_DWORD *)(a1 + 92) = v104;
                  }
                  else if (!strcmp(v10, "EnableFileWriter"))
                  {
                    AMCP::require_type((AMCP::Log::Scope_Registry *)v102, 2);
                    *(unsigned char *)(a1 + 96) = v104 != 0;
                  }
                  int v8 = 5;
                }
                goto LABEL_172;
              }
              AMCP::require_type((AMCP::Log::Scope_Registry *)v102, 4);
              unint64_t v47 = *((void *)this + 1);
              if (v47 < 0x21)
              {
                uint64_t v99 = v10;
                LOBYTE(v48) = 0;
                v113.__r_.__value_.__s.__data_[0] = 0;
                unsigned int v49 = *(unsigned __int8 *)this;
                if (v49 <= 2)
                {
                  char v50 = 8 * v49;
                  unsigned int v48 = 0x5B7B00u >> v50;
                  v113.__r_.__value_.__s.__data_[0] = 1u >> v50;
                }
                int v51 = 0;
                *(_DWORD *)this = 0;
                while (2)
                {
                  if (v51 != 4)
                  {
                    int v52 = v113.__r_.__value_.__s.__data_[0];
                    do
                    {
                      if (*((void *)this + 1) != v47) {
                        goto LABEL_202;
                      }
                      if (v52) {
                        LOBYTE(v48) = minijson::istream_context::read(this);
                      }
                      if ((v48 & 0x80) != 0) {
                        int v53 = __maskrune((char)v48, 0x4000uLL);
                      }
                      else {
                        int v53 = *(_DWORD *)(v11 + 4 * (char)v48 + 60) & 0x4000;
                      }
                      int v52 = 1;
                    }
                    while (v53);
                    v113.__r_.__value_.__s.__data_[0] = 1;
                    LOBYTE(v110) = v48;
                    switch(v51)
                    {
                      case 0:
                        if (v48 != 91) {
                          goto LABEL_215;
                        }
                        int v51 = 1;
                        char v54 = 44;
                        LOBYTE(v48) = 91;
                        goto LABEL_166;
                      case 1:
                        if (v48 != 93) {
                          goto LABEL_148;
                        }
                        goto LABEL_152;
                      case 2:
LABEL_148:
                        minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v125, (uint64_t)this, &v110, &v113);
                        AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v125.__r_.__value_.__l.__data_), 0);
                        uint64_t v55 = (char *)v125.__r_.__value_.__l.__size_;
                        unint64_t v57 = *(void *)(a1 + 72);
                        unint64_t v56 = *(void *)(a1 + 80);
                        if (v57 >= v56)
                        {
                          unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - (unint64_t)v100->__begin_) >> 3);
                          unint64_t v60 = v59 + 1;
                          if (v59 + 1 > 0xAAAAAAAAAAAAAAALL) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          unint64_t v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v56 - (unint64_t)v100->__begin_) >> 3);
                          if (2 * v61 > v60) {
                            unint64_t v60 = 2 * v61;
                          }
                          if (v61 >= 0x555555555555555) {
                            unint64_t v62 = 0xAAAAAAAAAAAAAAALL;
                          }
                          else {
                            unint64_t v62 = v60;
                          }
                          __v.__end_cap_.__value_ = v96;
                          if (v62) {
                            unint64_t v62 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v62);
                          }
                          else {
                            uint64_t v63 = 0;
                          }
                          __v.__first_ = (std::__split_buffer<std::string>::pointer)v62;
                          __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v62 + 24 * v59);
                          __v.__end_ = __v.__begin_;
                          __v.__end_cap_.__value_ = (std::string *)(v62 + 24 * v63);
                          std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, v55);
                          ++__v.__end_;
                          std::vector<std::string>::__swap_out_circular_buffer(v100, &__v);
                          unint64_t v58 = *(void *)(a1 + 72);
                          std::__split_buffer<std::string>::~__split_buffer(&__v);
                        }
                        else
                        {
                          std::string::basic_string[abi:ne180100]<0>(*(void **)(a1 + 72), (char *)v125.__r_.__value_.__l.__size_);
                          unint64_t v58 = v57 + 24;
                          *(void *)(a1 + 72) = v57 + 24;
                        }
                        *(void *)(a1 + 72) = v58;
                        int v51 = 3;
                        LOBYTE(v48) = (_BYTE)v110;
                        goto LABEL_165;
                      case 3:
                        if (v48 == 44)
                        {
                          int v51 = 2;
LABEL_165:
                          char v54 = v48;
                        }
                        else
                        {
                          if (v48 != 93) {
                            goto LABEL_219;
                          }
LABEL_152:
                          int v51 = 4;
                          char v54 = 44;
                          LOBYTE(v48) = 93;
                        }
LABEL_166:
                        if (!v54) {
                          goto LABEL_175;
                        }
                        continue;
                      default:
                        goto LABEL_165;
                    }
                  }
                  break;
                }
LABEL_168:
                uint64_t v64 = *((void *)this + 1);
                if (v64) {
                  *((void *)this + 1) = v64 - 1;
                }
                int v8 = 5;
LABEL_171:
                unint64_t v10 = v99;
LABEL_172:
                LOBYTE(v5) = v106;
                goto LABEL_173;
              }
            }
            break;
          case 5:
            if (v5 == 44)
            {
              int v8 = 2;
LABEL_173:
              char v14 = v5;
              goto LABEL_174;
            }
            if (v5 == 125)
            {
              int v8 = 6;
              char v14 = 44;
              LOBYTE(v5) = 125;
              goto LABEL_174;
            }
LABEL_219:
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            uint64_t v89 = *((void *)this + 3);
            BOOL v76 = v89 != 0;
            uint64_t v77 = v89 - 1;
            if (!v76) {
              uint64_t v77 = 0;
            }
            int v78 = 10;
            goto LABEL_205;
          default:
            goto LABEL_172;
        }
LABEL_233:
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1F14850D8;
        uint64_t v92 = *((void *)this + 3);
        BOOL v76 = v92 != 0;
        uint64_t v77 = v92 - 1;
        if (!v76) {
          uint64_t v77 = 0;
        }
        int v78 = 12;
LABEL_205:
        exception[1] = v77;
        *((_DWORD *)exception + 4) = v78;
      }
    }
LABEL_202:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_1F14850D8;
    uint64_t v75 = *((void *)this + 3);
    BOOL v76 = v75 != 0;
    uint64_t v77 = v75 - 1;
    if (!v76) {
      uint64_t v77 = 0;
    }
    int v78 = 11;
    goto LABEL_205;
  }
  uint64_t v73 = *((void *)this + 1);
  if (v73) {
    *((void *)this + 1) = v73 - 1;
  }
}

void sub_1BAF2EC30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a10);
  if (a31 < 0) {
    operator delete(__p);
  }
  for (uint64_t i = 64; i != 16; i -= 24)
  {
    a47 = v57 + i;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a47);
  }
  _Unwind_Resume(a1);
}

std::vector<std::string>::pointer std::vector<std::string>::__emplace_back_slow_path<char const*>(std::vector<std::string> *a1, char **a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_ - (char *)a1->__begin_) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  p_end_cap = (std::allocator<std::string> *)&a1->__end_cap_;
  if (0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) > v3) {
    unint64_t v3 = 0x5555555555555556 * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)a1->__end_cap_.__value_ - (char *)a1->__begin_) >> 3) >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  __v.__end_cap_.__value_ = p_end_cap;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)v7;
  __v.__begin_ = (std::__split_buffer<std::string>::pointer)(v7 + 24 * v2);
  __v.__end_ = __v.__begin_;
  __v.__end_cap_.__value_ = (std::string *)(v7 + 24 * v8);
  std::string::basic_string[abi:ne180100]<0>(__v.__begin_->__r_.__value_.__r.__words, *a2);
  __v.__end_ = __v.__begin_ + 1;
  std::vector<std::string>::__swap_out_circular_buffer(a1, &__v);
  std::vector<std::string>::pointer end = a1->__end_;
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return end;
}

void sub_1BAF2EEC0(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void AMCP::parse_json<AMCP::Terminal_Identifier>(uint64_t a1, minijson::istream_context *this)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  unint64_t v3 = *((void *)this + 1);
  if (v3 >= 0x21)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_1F14850D8;
    uint64_t v38 = *((void *)this + 3);
    BOOL v27 = v38 != 0;
    uint64_t v28 = v38 - 1;
    if (!v27) {
      uint64_t v28 = 0;
    }
    int v29 = 12;
LABEL_73:
    exception[1] = v28;
    *((_DWORD *)exception + 4) = v29;
  }
  LOBYTE(v4) = 0;
  __int16 v44 = 0;
  unsigned int v5 = *(unsigned __int8 *)this;
  if (v5 <= 2)
  {
    char v6 = 8 * v5;
    unsigned int v4 = 0x5B7B00u >> v6;
    HIBYTE(v44) = 0x5B7B00u >> v6;
    LOBYTE(v44) = 1u >> v6;
  }
  int v7 = 0;
  *(_DWORD *)this = 0;
  uint64_t v8 = (char *)this + 32;
  __s1 = "";
  uint64_t v9 = MEMORY[0x1E4F14390];
  char v10 = v4;
  char v11 = v4;
  char v12 = v4;
  do
  {
LABEL_5:
    if (*((void *)this + 1) != v3)
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      void *exception = &unk_1F14850D8;
      uint64_t v34 = *((void *)this + 3);
      BOOL v27 = v34 != 0;
      uint64_t v28 = v34 - 1;
      if (!v27) {
        uint64_t v28 = 0;
      }
      int v29 = 11;
      goto LABEL_73;
    }
    if ((_BYTE)v44)
    {
      LOBYTE(v4) = minijson::istream_context::read(this);
      HIBYTE(v44) = v4;
      char v10 = v4;
      char v11 = v4;
      char v12 = v4;
    }
    LOBYTE(v44) = 1;
    if (v12 < 0) {
      int v13 = __maskrune(v12, 0x4000uLL);
    }
    else {
      int v13 = *(_DWORD *)(v9 + 4 * v12 + 60) & 0x4000;
    }
  }
  while (v13);
  switch(v7)
  {
    case 0:
      if (v4 != 123)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1F14850D8;
        uint64_t v36 = *((void *)this + 3);
        BOOL v27 = v36 != 0;
        uint64_t v28 = v36 - 1;
        if (!v27) {
          uint64_t v28 = 0;
        }
        int v29 = 8;
        goto LABEL_73;
      }
      int v7 = 1;
      LOBYTE(v4) = 123;
      char v10 = 123;
      char v11 = 123;
      char v12 = 123;
      goto LABEL_5;
    case 1:
      if (v4 == 34) {
        goto LABEL_25;
      }
      if (v4 == 125) {
        goto LABEL_54;
      }
LABEL_58:
      exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
      void *exception = &unk_1F14850D8;
      uint64_t v26 = *((void *)this + 3);
      BOOL v27 = v26 != 0;
      uint64_t v28 = v26 - 1;
      if (!v27) {
        uint64_t v28 = 0;
      }
      int v29 = 1;
      goto LABEL_73;
    case 2:
      if (v4 != 34) {
        goto LABEL_58;
      }
LABEL_25:
      char v15 = operator new(0x28uLL);
      v15[2] = 0;
      uint64_t v15[3] = 0;
      v15[4] = 0;
      uint64_t v16 = *((void *)this + 4);
      *char v15 = v16;
      v15[1] = v8;
      *(void *)(v16 + 8) = v15;
      *((void *)this + 4) = v15;
      ++*((void *)this + 6);
      minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
      if (*(void *)(*(void *)v8 + 16) == *(void *)(*(void *)v8 + 24)) {
        unint64_t v17 = 0;
      }
      else {
        unint64_t v17 = *(char **)(*(void *)v8 + 16);
      }
      __s1 = v17;
      int v7 = 3;
      goto LABEL_52;
    case 3:
      if (v10 != 58)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1F14850D8;
        uint64_t v37 = *((void *)this + 3);
        BOOL v27 = v37 != 0;
        uint64_t v28 = v37 - 1;
        if (!v27) {
          uint64_t v28 = 0;
        }
        int v29 = 9;
        goto LABEL_73;
      }
      int v7 = 4;
      char v10 = 58;
      char v11 = 58;
      char v12 = 58;
      goto LABEL_5;
    case 4:
      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v41, (uint64_t)this, (unsigned char *)&v44 + 1, &v44);
      if (!strcmp(__s1, "node"))
      {
        AMCP::require_type((AMCP::Log::Scope_Registry *)v41, 0);
        std::string::__assign_external((std::string *)a1, __s);
        goto LABEL_51;
      }
      if (!strcmp(__s1, "terminal_index"))
      {
        AMCP::require_type((AMCP::Log::Scope_Registry *)v41, 1);
        *(void *)(a1 + 24) = v43;
        goto LABEL_51;
      }
      if (strcmp(__s1, "wire_direction")) {
        goto LABEL_51;
      }
      AMCP::require_type((AMCP::Log::Scope_Registry *)v41, 0);
      std::string::basic_string[abi:ne180100]<0>(&__p, __s);
      AMCP::get_enum_string_bimap<AMCP::Direction>();
      unint64_t v60 = v63;
      uint64_t v14 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v61);
      v63[2] = v63;
      uint64_t v64 = v63;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v65, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v65 = __p;
      }
      unsigned int v18 = v62;
      unint64_t v19 = *((void *)v62 + 7) & 0xFFFFFFFFFFFFFFFELL;
      if (!v19) {
        goto LABEL_43;
      }
      char v20 = v62;
      do
      {
        while (1)
        {
          uint64_t v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v19 - 48), &v65);
          if ((v14 & 0x80) == 0) {
            break;
          }
          unint64_t v19 = *(void *)(v19 + 16);
          if (!v19) {
            goto LABEL_40;
          }
        }
        char v20 = (int *)(v19 - 56);
        unint64_t v19 = *(void *)(v19 + 8);
      }
      while (v19);
LABEL_40:
      if (v20 != v18)
      {
        uint64_t v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v65, (void *)v20 + 1);
        if ((v14 & 0x80u) == 0) {
          unsigned int v18 = v20;
        }
      }
LABEL_43:
      if (SHIBYTE(v65.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v65.__r_.__value_.__l.__data_);
      }
      if ((int *)*(v64 - 1) == v18)
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v14);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v65, "com.apple.coreaudio", "AMCP");
        unsigned int v31 = *(NSObject **)v65.__r_.__value_.__l.__data_;
        if (v65.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v65.__r_.__value_.__l.__size_);
        }
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          unsigned int v32 = pthread_self();
          mach_port_t v33 = pthread_mach_thread_np(v32);
          LODWORD(v65.__r_.__value_.__l.__data_) = 67109890;
          HIDWORD(v65.__r_.__value_.__r.__words[0]) = v33;
          LOWORD(v65.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&v65.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
          WORD1(v65.__r_.__value_.__r.__words[2]) = 1024;
          HIDWORD(v65.__r_.__value_.__r.__words[2]) = 53;
          __int16 v66 = 2080;
          *(void *)unint64_t v67 = "not (found != map.right.end())";
          _os_log_error_impl(&dword_1BAA78000, v31, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v65, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v59);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"", (uint64_t)&v51);
        std::logic_error::logic_error(&v52, &v51);
        v52.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
        std::logic_error::logic_error(&v53, &v52);
        uint64_t v55 = 0;
        uint64_t v56 = 0;
        uint64_t v57 = 0;
        int v58 = -1;
        v53.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        char v54 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v65, (uint64_t)&v53);
        *(void *)&v67[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Direction]";
        std::string::size_type v68 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
        int v69 = 53;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v46);
        long long v49 = v46;
        uint64_t v50 = v47;
        long long v46 = 0uLL;
        uint64_t v47 = 0;
        unsigned int v48 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      uint64_t v21 = *((void *)v62 + 7);
      int v22 = *v18;
      if ((v21 & 0xFFFFFFFFFFFFFFFELL) != 0) {
        uint64_t v23 = (v21 & 0xFFFFFFFFFFFFFFFELL) - 56;
      }
      else {
        uint64_t v23 = 0;
      }
      boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v63, v23);
      operator delete(v62);
      *(_DWORD *)(a1 + 32) = v22;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_51:
      int v7 = 5;
LABEL_52:
      LOBYTE(v4) = HIBYTE(v44);
      char v10 = HIBYTE(v44);
      char v11 = HIBYTE(v44);
      char v12 = HIBYTE(v44);
      if (!HIBYTE(v44))
      {
        int v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v35, "This line should never be reached, please file a bug report");
        __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_5;
    case 5:
      if (v11 == 44)
      {
        int v7 = 2;
        char v12 = v11;
        goto LABEL_5;
      }
      if (v11 != 125)
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1F14850D8;
        uint64_t v30 = *((void *)this + 3);
        BOOL v27 = v30 != 0;
        uint64_t v28 = v30 - 1;
        if (!v27) {
          uint64_t v28 = 0;
        }
        int v29 = 10;
        goto LABEL_73;
      }
LABEL_54:
      uint64_t v24 = *((void *)this + 1);
      if (v24) {
        *((void *)this + 1) = v24 - 1;
      }
      return;
    default:
      goto LABEL_52;
  }
}

void sub_1BAF2F6C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(a11 + 23) < 0) {
    operator delete(*(void **)a11);
  }
  _Unwind_Resume(a1);
}

void AMCP::parse_json<AMCP::Wire_Description>(uint64_t a1, minijson::istream_context *a2)
{
  uint64_t v174 = *MEMORY[0x1E4F143B8];
  std::string::basic_string[abi:ne180100]<0>(&v141, "");
  std::string::basic_string[abi:ne180100]<0>(&v139, "");
  *(void *)&long long v168 = v142;
  *(void *)((char *)&v168 + 7) = *(void *)((char *)&v142 + 7);
  char v4 = HIBYTE(v142);
  long long v142 = 0uLL;
  uint64_t v5 = v168;
  *(void *)a1 = v141;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 15) = *(void *)((char *)&v168 + 7);
  *(unsigned char *)(a1 + 23) = v4;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  uint64_t v6 = v139;
  *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words + 7) = *(void *)((char *)&v140 + 7);
  v163.__r_.__value_.__r.__words[0] = v140;
  char v7 = HIBYTE(v140);
  uint64_t v139 = 0;
  long long v140 = 0uLL;
  uint64_t v141 = 0;
  *(void *)(a1 + 40) = v6;
  uint64_t v137 = (void **)(a1 + 40);
  std::string::size_type v8 = v163.__r_.__value_.__r.__words[0];
  *(void *)(a1 + 55) = *(std::string::size_type *)((char *)v163.__r_.__value_.__r.__words + 7);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 63) = v7;
  *(void *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 1;
  *(_OWORD *)(a1 + 80) = 0u;
  unint64_t v138 = (void **)(a1 + 80);
  *(_OWORD *)(a1 + 124) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 140) = xmmword_1BAFF9440;
  *(_DWORD *)(a1 + 156) = 64;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  unint64_t v9 = *((void *)a2 + 1);
  if (v9 > 0x20) {
    goto LABEL_309;
  }
  LOBYTE(v10) = 0;
  unsigned __int8 v146 = 0;
  unsigned int v11 = *(unsigned __int8 *)a2;
  if (v11 <= 2)
  {
    char v12 = 8 * v11;
    unsigned int v10 = 0x5B7B00u >> v12;
    unsigned __int8 v146 = 1u >> v12;
  }
  int v13 = 0;
  *(_DWORD *)a2 = 0;
  uint64_t v14 = (void *)((char *)a2 + 32);
  char v15 = "";
  uint64_t v16 = MEMORY[0x1E4F14390];
  while (2)
  {
    if (v13 != 6)
    {
      int v17 = v146;
      do
      {
        if (*((void *)a2 + 1) != v9)
        {
LABEL_275:
          int v112 = 11;
          goto LABEL_276;
        }
        if (v17) {
          LOBYTE(v10) = minijson::istream_context::read(a2);
        }
        if ((v10 & 0x80) != 0) {
          int v18 = __maskrune((char)v10, 0x4000uLL);
        }
        else {
          int v18 = *(_DWORD *)(v16 + 4 * (char)v10 + 60) & 0x4000;
        }
        int v17 = 1;
      }
      while (v18);
      unsigned __int8 v146 = 1;
      char v147 = v10;
      switch(v13)
      {
        case 0:
          if (v10 != 123)
          {
LABEL_304:
            int v112 = 8;
            goto LABEL_276;
          }
          int v13 = 1;
          char v19 = 44;
          LOBYTE(v10) = 123;
LABEL_269:
          if (!v19)
          {
LABEL_58:
            exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(exception, "This line should never be reached, please file a bug report");
            __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          continue;
        case 1:
          if (v10 == 34) {
            goto LABEL_66;
          }
          if (v10 == 125)
          {
            int v13 = 6;
            char v19 = 44;
            goto LABEL_269;
          }
LABEL_305:
          int v112 = 1;
          goto LABEL_276;
        case 2:
          if (v10 != 34) {
            goto LABEL_305;
          }
LABEL_66:
          uint64_t v30 = operator new(0x28uLL);
          v30[2] = 0;
          v30[3] = 0;
          v30[4] = 0;
          uint64_t v31 = *((void *)a2 + 4);
          *uint64_t v30 = v31;
          v30[1] = v14;
          *(void *)(v31 + 8) = v30;
          *((void *)a2 + 4) = v30;
          ++*((void *)a2 + 6);
          minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)a2);
          if (*(void *)(*v14 + 16) == *(void *)(*v14 + 24)) {
            char v15 = 0;
          }
          else {
            char v15 = *(const char **)(*v14 + 16);
          }
          int v13 = 3;
          goto LABEL_267;
        case 3:
          if (v10 == 58)
          {
            int v13 = 4;
            char v19 = 44;
            LOBYTE(v10) = 58;
            goto LABEL_269;
          }
          int v112 = 9;
          goto LABEL_276;
        case 4:
          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v143, (uint64_t)a2, &v147, &v146);
          if (!strcmp(v15, "Source"))
          {
            AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 3);
            AMCP::parse_json<AMCP::Terminal_Identifier>((uint64_t)&v168, a2);
            if (*(char *)(a1 + 23) < 0) {
              operator delete(*(void **)a1);
            }
            *(_OWORD *)a1 = v168;
            *(void *)(a1 + 16) = v169;
            uint64_t v32 = a1 + 24;
            mach_port_t v33 = v170;
          }
          else
          {
            if (strcmp(v15, "Destination"))
            {
              if (!strcmp(v15, "ChannelMap"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 4);
                unint64_t v34 = *((void *)a2 + 1);
                if (v34 <= 0x20)
                {
                  LOBYTE(v35) = 0;
                  LOBYTE(v156.__vftable) = 0;
                  unsigned int v36 = *(unsigned __int8 *)a2;
                  if (v36 <= 2)
                  {
                    char v37 = 8 * v36;
                    LODWORD(v35) = 0x5B7B00u >> v37;
                    LOBYTE(v156.__vftable) = 1u >> v37;
                  }
                  int v38 = 0;
                  *(_DWORD *)a2 = 0;
                  while (2)
                  {
                    if (v38 != 4)
                    {
                      int v39 = LOBYTE(v156.__vftable);
                      do
                      {
                        if (*((void *)a2 + 1) != v34) {
                          goto LABEL_275;
                        }
                        if (v39) {
                          LOBYTE(v35) = minijson::istream_context::read(a2);
                        }
                        if ((v35 & 0x80) != 0) {
                          int v40 = __maskrune((char)v35, 0x4000uLL);
                        }
                        else {
                          int v40 = *(_DWORD *)(v16 + 4 * (char)v35 + 60) & 0x4000;
                        }
                        int v39 = 1;
                      }
                      while (v40);
                      LOBYTE(v156.__vftable) = 1;
                      v163.__r_.__value_.__s.__data_[0] = (char)v35;
                      switch(v38)
                      {
                        case 0:
                          if (v35 != 91) {
                            goto LABEL_304;
                          }
                          int v38 = 1;
                          char v41 = 44;
                          LOBYTE(v35) = 91;
                          goto LABEL_120;
                        case 1:
                          if (v35 != 93) {
                            goto LABEL_99;
                          }
                          goto LABEL_103;
                        case 2:
LABEL_99:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v168, (uint64_t)a2, &v163, &v156);
                          AMCP::require_type((AMCP::Log::Scope_Registry *)v168, 1);
                          int v42 = v169;
                          __int16 v44 = *(char **)(a1 + 88);
                          unint64_t v43 = *(void *)(a1 + 96);
                          if ((unint64_t)v44 >= v43)
                          {
                            unint64_t v45 = (char *)*v138;
                            uint64_t v46 = (v44 - (unsigned char *)*v138) >> 2;
                            unint64_t v47 = v46 + 1;
                            if ((unint64_t)(v46 + 1) >> 62) {
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            }
                            uint64_t v48 = v43 - (void)v45;
                            if (v48 >> 1 > v47) {
                              unint64_t v47 = v48 >> 1;
                            }
                            BOOL v49 = (unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL;
                            unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
                            if (!v49) {
                              unint64_t v50 = v47;
                            }
                            if (v50)
                            {
                              unint64_t v50 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v50);
                              unint64_t v45 = *(char **)(a1 + 80);
                              __int16 v44 = *(char **)(a1 + 88);
                            }
                            else
                            {
                              uint64_t v51 = 0;
                            }
                            std::logic_error v52 = (_DWORD *)(v50 + 4 * v46);
                            *std::logic_error v52 = v42;
                            int v35 = v52 + 1;
                            while (v44 != v45)
                            {
                              int v53 = *((_DWORD *)v44 - 1);
                              v44 -= 4;
                              *--std::logic_error v52 = v53;
                            }
                            *(void *)(a1 + 80) = v52;
                            *(void *)(a1 + 88) = v35;
                            *(void *)(a1 + 96) = v50 + 4 * v51;
                            if (v45) {
                              operator delete(v45);
                            }
                          }
                          else
                          {
                            *(_DWORD *)__int16 v44 = v169;
                            int v35 = v44 + 4;
                          }
                          *(void *)(a1 + 88) = v35;
                          int v38 = 3;
                          LOBYTE(v35) = v163.__r_.__value_.__s.__data_[0];
                          goto LABEL_119;
                        case 3:
                          if (v35 == 44)
                          {
                            int v38 = 2;
LABEL_119:
                            char v41 = (char)v35;
                          }
                          else
                          {
                            if (v35 != 93) {
                              goto LABEL_306;
                            }
LABEL_103:
                            int v38 = 4;
                            char v41 = 44;
                            LOBYTE(v35) = 93;
                          }
LABEL_120:
                          if (!v41) {
                            goto LABEL_58;
                          }
                          continue;
                        default:
                          goto LABEL_119;
                      }
                    }
                    goto LABEL_162;
                  }
                }
                goto LABEL_309;
              }
              if (!strcmp(v15, "MonoMixMap"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 4);
                unint64_t v54 = *((void *)a2 + 1);
                if (v54 <= 0x20)
                {
                  LOBYTE(v55) = 0;
                  LOBYTE(v156.__vftable) = 0;
                  unsigned int v56 = *(unsigned __int8 *)a2;
                  if (v56 <= 2)
                  {
                    char v57 = 8 * v56;
                    LODWORD(v55) = 0x5B7B00u >> v57;
                    LOBYTE(v156.__vftable) = 1u >> v57;
                  }
                  int v58 = 0;
                  *(_DWORD *)a2 = 0;
                  while (2)
                  {
                    if (v58 != 4)
                    {
                      int v59 = LOBYTE(v156.__vftable);
                      do
                      {
                        if (*((void *)a2 + 1) != v54) {
                          goto LABEL_275;
                        }
                        if (v59) {
                          LOBYTE(v55) = minijson::istream_context::read(a2);
                        }
                        if ((v55 & 0x80) != 0) {
                          int v60 = __maskrune((char)v55, 0x4000uLL);
                        }
                        else {
                          int v60 = *(_DWORD *)(v16 + 4 * (char)v55 + 60) & 0x4000;
                        }
                        int v59 = 1;
                      }
                      while (v60);
                      LOBYTE(v156.__vftable) = 1;
                      v163.__r_.__value_.__s.__data_[0] = (char)v55;
                      switch(v58)
                      {
                        case 0:
                          if (v55 != 91) {
                            goto LABEL_304;
                          }
                          int v58 = 1;
                          char v61 = 44;
                          LOBYTE(v55) = 91;
                          goto LABEL_160;
                        case 1:
                          if (v55 != 93) {
                            goto LABEL_139;
                          }
                          goto LABEL_143;
                        case 2:
LABEL_139:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v168, (uint64_t)a2, &v163, &v156);
                          AMCP::require_type((AMCP::Log::Scope_Registry *)v168, 1);
                          int v62 = v169;
                          uint64_t v64 = *(char **)(a1 + 112);
                          unint64_t v63 = *(void *)(a1 + 120);
                          if ((unint64_t)v64 >= v63)
                          {
                            std::string v65 = *(char **)(a1 + 104);
                            uint64_t v66 = (v64 - v65) >> 2;
                            unint64_t v67 = v66 + 1;
                            if ((unint64_t)(v66 + 1) >> 62) {
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            }
                            uint64_t v68 = v63 - (void)v65;
                            if (v68 >> 1 > v67) {
                              unint64_t v67 = v68 >> 1;
                            }
                            BOOL v49 = (unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL;
                            unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                            if (!v49) {
                              unint64_t v69 = v67;
                            }
                            if (v69)
                            {
                              unint64_t v69 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v69);
                              std::string v65 = *(char **)(a1 + 104);
                              uint64_t v64 = *(char **)(a1 + 112);
                            }
                            else
                            {
                              uint64_t v70 = 0;
                            }
                            uint64_t v71 = (_DWORD *)(v69 + 4 * v66);
                            _DWORD *v71 = v62;
                            uint64_t v55 = v71 + 1;
                            while (v64 != v65)
                            {
                              int v72 = *((_DWORD *)v64 - 1);
                              v64 -= 4;
                              *--uint64_t v71 = v72;
                            }
                            *(void *)(a1 + 104) = v71;
                            *(void *)(a1 + 112) = v55;
                            *(void *)(a1 + 120) = v69 + 4 * v70;
                            if (v65) {
                              operator delete(v65);
                            }
                          }
                          else
                          {
                            *(_DWORD *)uint64_t v64 = v169;
                            uint64_t v55 = v64 + 4;
                          }
                          *(void *)(a1 + 112) = v55;
                          int v58 = 3;
                          LOBYTE(v55) = v163.__r_.__value_.__s.__data_[0];
                          goto LABEL_159;
                        case 3:
                          if (v55 == 44)
                          {
                            int v58 = 2;
LABEL_159:
                            char v61 = (char)v55;
                          }
                          else
                          {
                            if (v55 != 93) {
                              goto LABEL_306;
                            }
LABEL_143:
                            int v58 = 4;
                            char v61 = 44;
                            LOBYTE(v55) = 93;
                          }
LABEL_160:
                          if (!v61) {
                            goto LABEL_58;
                          }
                          continue;
                        default:
                          goto LABEL_159;
                      }
                    }
                    goto LABEL_162;
                  }
                }
LABEL_309:
                int v112 = 12;
LABEL_276:
                std::string v113 = __cxa_allocate_exception(0x18uLL);
                *std::string v113 = &unk_1F14850D8;
                uint64_t v114 = *((void *)a2 + 3);
                BOOL v49 = v114 != 0;
                uint64_t v115 = v114 - 1;
                if (!v49) {
                  uint64_t v115 = 0;
                }
                v113[1] = v115;
                *((_DWORD *)v113 + 4) = v112;
              }
              if (!strcmp(v15, "LatencyAdjustment"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 1);
                *(_DWORD *)(a1 + 128) = v145;
                goto LABEL_81;
              }
              if (!strcmp(v15, "ConnectionPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Connection_Policy>();
                *((void *)&v168 + 1) = v171;
                uint64_t v74 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Connection_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Connection_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v169);
                long long v172 = v171;
                uint64_t v173 = (int **)v171;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v163, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v163 = __p;
                }
                uint64_t v77 = (int *)v170;
                unint64_t v78 = v170[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v78)
                {
                  int v79 = (int *)v170;
                  do
                  {
                    while (1)
                    {
                      uint64_t v74 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v78 - 48), &v163);
                      if ((v74 & 0x80) == 0) {
                        break;
                      }
                      unint64_t v78 = *(void *)(v78 + 16);
                      if (!v78) {
                        goto LABEL_178;
                      }
                    }
                    int v79 = (int *)(v78 - 56);
                    unint64_t v78 = *(void *)(v78 + 8);
                  }
                  while (v78);
LABEL_178:
                  if (v79 != v77)
                  {
                    uint64_t v74 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v163, (void *)v79 + 1);
                    if ((v74 & 0x80u) == 0) {
                      uint64_t v77 = v79;
                    }
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v163.__r_.__value_.__l.__data_);
                }
                if (*(v173 - 1) == v77)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v74);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v163, "com.apple.coreaudio", "AMCP");
                  uint64_t v116 = *(NSObject **)v163.__r_.__value_.__l.__data_;
                  if (v163.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
                  }
                  if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v117 = pthread_self();
                    mach_port_t v118 = pthread_mach_thread_np(v117);
                    LODWORD(v163.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v163.__r_.__value_.__r.__words[0]) = v118;
                    LOWORD(v163.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v163.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v163.__r_.__value_.__r.__words[2]) = 53;
                    __int16 v164 = 2080;
                    *(void *)uint64_t v165 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1BAA78000, v116, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v163, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v162);
                  __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v154);
                  std::logic_error::logic_error(&v155, &v154);
                  v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                  std::logic_error::logic_error(&v156, &v155);
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  uint64_t v160 = 0;
                  int v161 = -1;
                  v156.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                  long long v157 = &unk_1F1489CF0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v163, (uint64_t)&v156);
                  *(void *)&v165[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Connection_Policy]";
                  uint64_t v166 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  int v167 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v149);
                  long long v152 = v149;
                  uint64_t v119 = v150;
                  uint64_t v150 = 0;
                  long long v151 = &unk_1F148AA90;
                  uint64_t v153 = v119;
                  long long v149 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                }
                uint64_t v80 = v170[7];
                int v81 = *v77;
                if ((v80 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                  uint64_t v82 = (v80 & 0xFFFFFFFFFFFFFFFELL) - 56;
                }
                else {
                  uint64_t v82 = 0;
                }
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v171, v82);
                operator delete(v170);
                *(_DWORD *)(a1 + 132) = v81;
              }
              else if (!strcmp(v15, "ResamplerPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Resampler_Policy>();
                *((void *)&v168 + 1) = v171;
                uint64_t v75 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Resampler_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Resampler_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v169);
                long long v172 = v171;
                uint64_t v173 = (int **)v171;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v163, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v163 = __p;
                }
                uint64_t v84 = (int *)v170;
                unint64_t v85 = v170[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v85)
                {
                  long long v86 = (int *)v170;
                  do
                  {
                    while (1)
                    {
                      uint64_t v75 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v85 - 48), &v163);
                      if ((v75 & 0x80) == 0) {
                        break;
                      }
                      unint64_t v85 = *(void *)(v85 + 16);
                      if (!v85) {
                        goto LABEL_197;
                      }
                    }
                    long long v86 = (int *)(v85 - 56);
                    unint64_t v85 = *(void *)(v85 + 8);
                  }
                  while (v85);
LABEL_197:
                  if (v86 != v84)
                  {
                    uint64_t v75 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v163, (void *)v86 + 1);
                    if ((v75 & 0x80u) == 0) {
                      uint64_t v84 = v86;
                    }
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v163.__r_.__value_.__l.__data_);
                }
                if (*(v173 - 1) == v84)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v75);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v163, "com.apple.coreaudio", "AMCP");
                  int v120 = *(NSObject **)v163.__r_.__value_.__l.__data_;
                  if (v163.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
                  }
                  if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
                  {
                    char v121 = pthread_self();
                    mach_port_t v122 = pthread_mach_thread_np(v121);
                    LODWORD(v163.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v163.__r_.__value_.__r.__words[0]) = v122;
                    LOWORD(v163.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v163.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v163.__r_.__value_.__r.__words[2]) = 53;
                    __int16 v164 = 2080;
                    *(void *)uint64_t v165 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1BAA78000, v120, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v163, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v162);
                  __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v154);
                  std::logic_error::logic_error(&v155, &v154);
                  v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                  std::logic_error::logic_error(&v156, &v155);
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  uint64_t v160 = 0;
                  int v161 = -1;
                  v156.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                  long long v157 = &unk_1F1489CF0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v163, (uint64_t)&v156);
                  *(void *)&v165[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Resampler_Policy]";
                  uint64_t v166 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  int v167 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v149);
                  long long v152 = v149;
                  uint64_t v123 = v150;
                  uint64_t v150 = 0;
                  long long v151 = &unk_1F148AA90;
                  uint64_t v153 = v123;
                  long long v149 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                }
                uint64_t v87 = v170[7];
                int v88 = *v84;
                if ((v87 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                  uint64_t v89 = (v87 & 0xFFFFFFFFFFFFFFFELL) - 56;
                }
                else {
                  uint64_t v89 = 0;
                }
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v171, v89);
                operator delete(v170);
                *(_DWORD *)(a1 + 136) = v88;
              }
              else if (!strcmp(v15, "FormatConversionPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Format_Conversion_Policy>();
                *((void *)&v168 + 1) = v171;
                uint64_t v76 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Format_Conversion_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Format_Conversion_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v169);
                long long v172 = v171;
                uint64_t v173 = (int **)v171;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v163, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v163 = __p;
                }
                uint64_t v91 = (int *)v170;
                unint64_t v92 = v170[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v92)
                {
                  unsigned int v93 = (int *)v170;
                  do
                  {
                    while (1)
                    {
                      uint64_t v76 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v92 - 48), &v163);
                      if ((v76 & 0x80) == 0) {
                        break;
                      }
                      unint64_t v92 = *(void *)(v92 + 16);
                      if (!v92) {
                        goto LABEL_216;
                      }
                    }
                    unsigned int v93 = (int *)(v92 - 56);
                    unint64_t v92 = *(void *)(v92 + 8);
                  }
                  while (v92);
LABEL_216:
                  if (v93 != v91)
                  {
                    uint64_t v76 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v163, (void *)v93 + 1);
                    if ((v76 & 0x80u) == 0) {
                      uint64_t v91 = v93;
                    }
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v163.__r_.__value_.__l.__data_);
                }
                if (*(v173 - 1) == v91)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v76);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v163, "com.apple.coreaudio", "AMCP");
                  uint64_t v124 = *(NSObject **)v163.__r_.__value_.__l.__data_;
                  if (v163.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
                  }
                  if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
                  {
                    std::string v125 = pthread_self();
                    mach_port_t v126 = pthread_mach_thread_np(v125);
                    LODWORD(v163.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v163.__r_.__value_.__r.__words[0]) = v126;
                    LOWORD(v163.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v163.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v163.__r_.__value_.__r.__words[2]) = 53;
                    __int16 v164 = 2080;
                    *(void *)uint64_t v165 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1BAA78000, v124, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v163, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v162);
                  __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v154);
                  std::logic_error::logic_error(&v155, &v154);
                  v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                  std::logic_error::logic_error(&v156, &v155);
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  uint64_t v160 = 0;
                  int v161 = -1;
                  v156.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                  long long v157 = &unk_1F1489CF0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v163, (uint64_t)&v156);
                  *(void *)&v165[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Format_Conversion_Policy]";
                  uint64_t v166 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  int v167 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v149);
                  long long v152 = v149;
                  uint64_t v127 = v150;
                  uint64_t v150 = 0;
                  long long v151 = &unk_1F148AA90;
                  uint64_t v153 = v127;
                  long long v149 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                }
                uint64_t v94 = v170[7];
                int v95 = *v91;
                if ((v94 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                  uint64_t v96 = (v94 & 0xFFFFFFFFFFFFFFFELL) - 56;
                }
                else {
                  uint64_t v96 = 0;
                }
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v171, v96);
                operator delete(v170);
                *(_DWORD *)(a1 + 140) = v95;
              }
              else if (!strcmp(v15, "DriftCorrectionPolicy"))
              {
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Drift_Correction_Policy>();
                *((void *)&v168 + 1) = v171;
                uint64_t v83 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Drift_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Drift_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v169);
                long long v172 = v171;
                uint64_t v173 = (int **)v171;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v163, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v163 = __p;
                }
                uint64_t v98 = (int *)v170;
                unint64_t v99 = v170[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v99)
                {
                  uint64_t v100 = (int *)v170;
                  do
                  {
                    while (1)
                    {
                      uint64_t v83 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v99 - 48), &v163);
                      if ((v83 & 0x80) == 0) {
                        break;
                      }
                      unint64_t v99 = *(void *)(v99 + 16);
                      if (!v99) {
                        goto LABEL_234;
                      }
                    }
                    uint64_t v100 = (int *)(v99 - 56);
                    unint64_t v99 = *(void *)(v99 + 8);
                  }
                  while (v99);
LABEL_234:
                  if (v100 != v98)
                  {
                    uint64_t v83 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v163, (void *)v100 + 1);
                    if ((v83 & 0x80u) == 0) {
                      uint64_t v98 = v100;
                    }
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v163.__r_.__value_.__l.__data_);
                }
                if (*(v173 - 1) == v98)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v83);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v163, "com.apple.coreaudio", "AMCP");
                  long long v128 = *(NSObject **)v163.__r_.__value_.__l.__data_;
                  if (v163.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
                  }
                  if (os_log_type_enabled(v128, OS_LOG_TYPE_ERROR))
                  {
                    int v129 = pthread_self();
                    mach_port_t v130 = pthread_mach_thread_np(v129);
                    LODWORD(v163.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v163.__r_.__value_.__r.__words[0]) = v130;
                    LOWORD(v163.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v163.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v163.__r_.__value_.__r.__words[2]) = 53;
                    __int16 v164 = 2080;
                    *(void *)uint64_t v165 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1BAA78000, v128, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v163, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v162);
                  __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v154);
                  std::logic_error::logic_error(&v155, &v154);
                  v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                  std::logic_error::logic_error(&v156, &v155);
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  uint64_t v160 = 0;
                  int v161 = -1;
                  v156.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                  long long v157 = &unk_1F1489CF0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v163, (uint64_t)&v156);
                  *(void *)&v165[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Drift_Correction_Policy]";
                  uint64_t v166 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  int v167 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v149);
                  long long v152 = v149;
                  uint64_t v131 = v150;
                  uint64_t v150 = 0;
                  long long v151 = &unk_1F148AA90;
                  uint64_t v153 = v131;
                  long long v149 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                }
                uint64_t v101 = v170[7];
                int v102 = *v98;
                if ((v101 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                  uint64_t v103 = (v101 & 0xFFFFFFFFFFFFFFFELL) - 56;
                }
                else {
                  uint64_t v103 = 0;
                }
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v171, v103);
                operator delete(v170);
                *(_DWORD *)(a1 + 144) = v102;
              }
              else
              {
                if (strcmp(v15, "LatencyCorrectionPolicy"))
                {
                  if (!strcmp(v15, "ResamplerType"))
                  {
                    AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                    uint64_t v97 = std::string::basic_string[abi:ne180100]<0>(&v168, __s);
                    *(_DWORD *)(a1 + 152) = AMCP::string_to_enum<AMCP::Resampler_Type>((uint64_t)v97);
                  }
                  else
                  {
                    if (strcmp(v15, "ResamplerQuality"))
                    {
                      if (!strcmp(v15, "VolumeProcessingEnabled"))
                      {
                        AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                        *(unsigned char *)(a1 + 160) = v145 != 0;
                      }
                      else if (!strcmp(v15, "MatchedTags"))
                      {
                        AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 4);
                        unint64_t v20 = *((void *)a2 + 1);
                        if (v20 <= 0x20)
                        {
                          LOBYTE(v21) = 0;
                          LOBYTE(v151) = 0;
                          unsigned int v22 = *(unsigned __int8 *)a2;
                          if (v22 <= 2)
                          {
                            char v23 = 8 * v22;
                            unsigned int v21 = 0x5B7B00u >> v23;
                            LOBYTE(v151) = 1u >> v23;
                          }
                          int v24 = 0;
                          *(_DWORD *)a2 = 0;
                          while (2)
                          {
                            if (v24 != 4)
                            {
                              int v25 = v151;
                              do
                              {
                                if (*((void *)a2 + 1) != v20) {
                                  goto LABEL_275;
                                }
                                if (v25) {
                                  LOBYTE(v21) = minijson::istream_context::read(a2);
                                }
                                if ((v21 & 0x80) != 0) {
                                  int v26 = __maskrune((char)v21, 0x4000uLL);
                                }
                                else {
                                  int v26 = *(_DWORD *)(v16 + 4 * (char)v21 + 60) & 0x4000;
                                }
                                int v25 = 1;
                              }
                              while (v26);
                              LOBYTE(v151) = 1;
                              LOBYTE(v156.__vftable) = v21;
                              switch(v24)
                              {
                                case 0:
                                  if (v21 != 91) {
                                    goto LABEL_304;
                                  }
                                  int v24 = 1;
                                  char v27 = 44;
                                  LOBYTE(v21) = 91;
                                  goto LABEL_57;
                                case 1:
                                  if (v21 != 93) {
                                    goto LABEL_48;
                                  }
                                  goto LABEL_52;
                                case 2:
LABEL_48:
                                  minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v168, (uint64_t)a2, &v156, &v151);
                                  AMCP::require_type((AMCP::Log::Scope_Registry *)v168, 0);
                                  v163.__r_.__value_.__r.__words[0] = *((void *)&v168 + 1);
                                  uint64_t v28 = *(std::string **)(a1 + 176);
                                  if ((unint64_t)v28 >= *(void *)(a1 + 184))
                                  {
                                    std::vector<std::string>::pointer v29 = std::vector<std::string>::__emplace_back_slow_path<char const*>((std::vector<std::string> *)(a1 + 168), &v163.__r_.__value_.__l.__data_);
                                  }
                                  else
                                  {
                                    std::string::basic_string[abi:ne180100]<0>(*(void **)(a1 + 176), *((char **)&v168 + 1));
                                    std::vector<std::string>::pointer v29 = v28 + 1;
                                    *(void *)(a1 + 176) = v28 + 1;
                                  }
                                  *(void *)(a1 + 176) = v29;
                                  int v24 = 3;
                                  LOBYTE(v21) = v156.__vftable;
                                  goto LABEL_56;
                                case 3:
                                  if (v21 == 44)
                                  {
                                    int v24 = 2;
LABEL_56:
                                    char v27 = v21;
                                  }
                                  else
                                  {
                                    if (v21 != 93) {
                                      goto LABEL_306;
                                    }
LABEL_52:
                                    int v24 = 4;
                                    char v27 = 44;
                                    LOBYTE(v21) = 93;
                                  }
LABEL_57:
                                  if (!v27) {
                                    goto LABEL_58;
                                  }
                                  continue;
                                default:
                                  goto LABEL_56;
                              }
                            }
                            break;
                          }
LABEL_162:
                          uint64_t v73 = *((void *)a2 + 1);
                          if (v73) {
                            *((void *)a2 + 1) = v73 - 1;
                          }
LABEL_266:
                          int v13 = 5;
                          goto LABEL_267;
                        }
                        goto LABEL_309;
                      }
LABEL_81:
                      int v13 = 5;
LABEL_267:
                      LOBYTE(v10) = v147;
                      goto LABEL_268;
                    }
                    AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                    uint64_t v104 = std::string::basic_string[abi:ne180100]<0>(&v168, __s);
                    *(_DWORD *)(a1 + 156) = AMCP::string_to_enum<AMCP::Resampler_Quality>((uint64_t)v104);
                  }
                  if (SHIBYTE(v169) < 0) {
                    operator delete((void *)v168);
                  }
                  goto LABEL_81;
                }
                AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 0);
                std::string::basic_string[abi:ne180100]<0>(&__p, __s);
                AMCP::get_enum_string_bimap<AMCP::Wire_Latency_Correction_Policy>();
                *((void *)&v168 + 1) = v171;
                uint64_t v90 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Wire_Latency_Correction_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Wire_Latency_Correction_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v169);
                long long v172 = v171;
                uint64_t v173 = (int **)v171;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  std::string::__init_copy_ctor_external(&v163, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
                }
                else {
                  std::string v163 = __p;
                }
                unsigned __int8 v105 = (int *)v170;
                unint64_t v106 = v170[7] & 0xFFFFFFFFFFFFFFFELL;
                if (v106)
                {
                  int64_t v107 = (int *)v170;
                  do
                  {
                    while (1)
                    {
                      uint64_t v90 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v106 - 48), &v163);
                      if ((v90 & 0x80) == 0) {
                        break;
                      }
                      unint64_t v106 = *(void *)(v106 + 16);
                      if (!v106) {
                        goto LABEL_254;
                      }
                    }
                    int64_t v107 = (int *)(v106 - 56);
                    unint64_t v106 = *(void *)(v106 + 8);
                  }
                  while (v106);
LABEL_254:
                  if (v107 != v105)
                  {
                    uint64_t v90 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v163, (void *)v107 + 1);
                    if ((v90 & 0x80u) == 0) {
                      unsigned __int8 v105 = v107;
                    }
                  }
                }
                if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v163.__r_.__value_.__l.__data_);
                }
                if (*(v173 - 1) == v105)
                {
                  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v90);
                  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v163, "com.apple.coreaudio", "AMCP");
                  int v132 = *(NSObject **)v163.__r_.__value_.__l.__data_;
                  if (v163.__r_.__value_.__l.__size_) {
                    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v163.__r_.__value_.__l.__size_);
                  }
                  if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
                  {
                    long long v133 = pthread_self();
                    mach_port_t v134 = pthread_mach_thread_np(v133);
                    LODWORD(v163.__r_.__value_.__l.__data_) = 67109890;
                    HIDWORD(v163.__r_.__value_.__r.__words[0]) = v134;
                    LOWORD(v163.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&v163.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                    WORD1(v163.__r_.__value_.__r.__words[2]) = 1024;
                    HIDWORD(v163.__r_.__value_.__r.__words[2]) = 53;
                    __int16 v164 = 2080;
                    *(void *)uint64_t v165 = "not (found != map.right.end())";
                    _os_log_error_impl(&dword_1BAA78000, v132, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v163, 0x22u);
                  }
                  AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v162);
                  __cxa_allocate_exception(0x40uLL);
                  caulk::make_string((caulk *)"", (uint64_t)&v154);
                  std::logic_error::logic_error(&v155, &v154);
                  v155.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                  std::logic_error::logic_error(&v156, &v155);
                  uint64_t v158 = 0;
                  uint64_t v159 = 0;
                  uint64_t v160 = 0;
                  int v161 = -1;
                  v156.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                  long long v157 = &unk_1F1489CF0;
                  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v163, (uint64_t)&v156);
                  *(void *)&v165[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Wire_Latency_Correction_Policy]";
                  uint64_t v166 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                  int v167 = 53;
                  applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v149);
                  long long v152 = v149;
                  uint64_t v135 = v150;
                  uint64_t v150 = 0;
                  long long v151 = &unk_1F148AA90;
                  uint64_t v153 = v135;
                  long long v149 = 0uLL;
                  boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
                }
                uint64_t v108 = v170[7];
                int v109 = *v105;
                if ((v108 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                  uint64_t v110 = (v108 & 0xFFFFFFFFFFFFFFFELL) - 56;
                }
                else {
                  uint64_t v110 = 0;
                }
                boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v171, v110);
                operator delete(v170);
                *(_DWORD *)(a1 + 148) = v109;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              goto LABEL_266;
            }
            AMCP::require_type((AMCP::Log::Scope_Registry *)v143, 3);
            AMCP::parse_json<AMCP::Terminal_Identifier>((uint64_t)&v168, a2);
            if (*(char *)(a1 + 63) < 0) {
              operator delete(*v137);
            }
            *(_OWORD *)uint64_t v137 = v168;
            *(void *)(a1 + 56) = v169;
            mach_port_t v33 = v170;
            uint64_t v32 = a1 + 64;
          }
          *(void *)uint64_t v32 = v33;
          *(_DWORD *)(v32 + 8) = v171[0];
          goto LABEL_81;
        case 5:
          if (v10 == 44)
          {
            int v13 = 2;
LABEL_268:
            char v19 = v10;
            goto LABEL_269;
          }
          if (v10 == 125)
          {
            int v13 = 6;
            char v19 = 44;
            LOBYTE(v10) = 125;
            goto LABEL_269;
          }
LABEL_306:
          int v112 = 10;
          goto LABEL_276;
        default:
          goto LABEL_267;
      }
    }
    break;
  }
  uint64_t v111 = *((void *)a2 + 1);
  if (v111) {
    *((void *)a2 + 1) = v111 - 1;
  }
}

void sub_1BAF313D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,char a52)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a10);
  if (a36 < 0) {
    operator delete(__p);
  }
  AMCP::Wire_Description::~Wire_Description(v52);
  _Unwind_Resume(a1);
}

uint64_t AMCP::string_to_enum<AMCP::Resampler_Type>(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Type>();
  char v27 = v30;
  uint64_t v2 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v28);
  v30[2] = v30;
  uint64_t v31 = v30;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v32 = *(std::string *)a1;
  }
  unint64_t v3 = (unsigned int *)__p;
  unint64_t v4 = *((void *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
  if (v4)
  {
    uint64_t v5 = (unsigned int *)__p;
    do
    {
      while (1)
      {
        uint64_t v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v4 - 48), &v32);
        if ((v2 & 0x80) == 0) {
          break;
        }
        unint64_t v4 = *(void *)(v4 + 16);
        if (!v4) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = (unsigned int *)(v4 - 56);
      unint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
LABEL_10:
    if (v5 != v3)
    {
      uint64_t v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v32, (void *)v5 + 1);
      if ((v2 & 0x80u) == 0) {
        unint64_t v3 = v5;
      }
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((unsigned int *)*(v31 - 1) == v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v32, "com.apple.coreaudio", "AMCP");
    unsigned int v10 = *(NSObject **)v32.__r_.__value_.__l.__data_;
    if (v32.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      LODWORD(v32.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v32.__r_.__value_.__r.__words[0]) = v12;
      LOWORD(v32.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
      WORD1(v32.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v32.__r_.__value_.__r.__words[2]) = 53;
      __int16 v33 = 2080;
      *(void *)unint64_t v34 = "not (found != map.right.end())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v32, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v32, (uint64_t)&v20);
    *(void *)&v34[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Resampler_Type]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    int v36 = 53;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    char v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v6 = *((void *)__p + 7);
  uint64_t v7 = *v3;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v8 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v30, v8);
  operator delete(__p);
  return v7;
}

void sub_1BAF31B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v37);
  _Unwind_Resume(a1);
}

uint64_t AMCP::string_to_enum<AMCP::Resampler_Quality>(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  AMCP::get_enum_string_bimap<AMCP::Resampler_Quality>();
  char v27 = v30;
  uint64_t v2 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Resampler_Quality,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Resampler_Quality const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v28);
  v30[2] = v30;
  uint64_t v31 = v30;
  if (*(char *)(a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else {
    std::string v32 = *(std::string *)a1;
  }
  unint64_t v3 = (unsigned int *)__p;
  unint64_t v4 = *((void *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
  if (v4)
  {
    uint64_t v5 = (unsigned int *)__p;
    do
    {
      while (1)
      {
        uint64_t v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v4 - 48), &v32);
        if ((v2 & 0x80) == 0) {
          break;
        }
        unint64_t v4 = *(void *)(v4 + 16);
        if (!v4) {
          goto LABEL_10;
        }
      }
      uint64_t v5 = (unsigned int *)(v4 - 56);
      unint64_t v4 = *(void *)(v4 + 8);
    }
    while (v4);
LABEL_10:
    if (v5 != v3)
    {
      uint64_t v2 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v32, (void *)v5 + 1);
      if ((v2 & 0x80u) == 0) {
        unint64_t v3 = v5;
      }
    }
  }
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((unsigned int *)*(v31 - 1) == v3)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v2);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v32, "com.apple.coreaudio", "AMCP");
    unsigned int v10 = *(NSObject **)v32.__r_.__value_.__l.__data_;
    if (v32.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v32.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      LODWORD(v32.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(v32.__r_.__value_.__r.__words[0]) = v12;
      LOWORD(v32.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
      WORD1(v32.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(v32.__r_.__value_.__r.__words[2]) = 53;
      __int16 v33 = 2080;
      *(void *)unint64_t v34 = "not (found != map.right.end())";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v32, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v32, (uint64_t)&v20);
    *(void *)&v34[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Resampler_Quality]";
    int v35 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
    int v36 = 53;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v13);
    long long v16 = v13;
    uint64_t v17 = v14;
    long long v13 = 0uLL;
    uint64_t v14 = 0;
    char v15 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v6 = *((void *)__p + 7);
  uint64_t v7 = *v3;
  if ((v6 & 0xFFFFFFFFFFFFFFFELL) != 0) {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) - 56;
  }
  else {
    uint64_t v8 = 0;
  }
  boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v30, v8);
  operator delete(__p);
  return v7;
}

void sub_1BAF31F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(v37);
  _Unwind_Resume(a1);
}

void AMCP::parse_json<AMCP::Graph_Description>(uint64_t *a1, minijson::istream_context *this)
{
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *(_OWORD *)a1 = 0u;
  unint64_t v3 = *((void *)this + 1);
  if (v3 >= 0x21)
  {
LABEL_366:
    exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
    void *exception = &unk_1F14850D8;
    uint64_t v161 = *((void *)this + 3);
    BOOL v136 = v161 != 0;
    uint64_t v137 = v161 - 1;
    if (!v136) {
      uint64_t v137 = 0;
    }
    int v138 = 12;
LABEL_321:
    exception[1] = v137;
    *((_DWORD *)exception + 4) = v138;
  }
  LOBYTE(v4) = 0;
  unsigned __int8 v170 = 0;
  unsigned int v5 = *(unsigned __int8 *)this;
  if (v5 <= 2)
  {
    char v6 = 8 * v5;
    unsigned int v4 = 0x5B7B00u >> v6;
    unsigned __int8 v170 = 1u >> v6;
  }
  int v7 = 0;
  *(_DWORD *)this = 0;
  long long v168 = (char *)this + 32;
  uint64_t v165 = (long long **)(a1 + 3);
  std::string v163 = a1 + 5;
  uint64_t v8 = "";
  __int16 v164 = a1 + 2;
  uint64_t v9 = MEMORY[0x1E4F14390];
  while (2)
  {
    if (v7 != 6)
    {
      int v10 = v170;
      do
      {
        if (*((void *)this + 1) != v3)
        {
LABEL_318:
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          void *exception = &unk_1F14850D8;
          uint64_t v135 = *((void *)this + 3);
          BOOL v136 = v135 != 0;
          uint64_t v137 = v135 - 1;
          if (!v136) {
            uint64_t v137 = 0;
          }
          int v138 = 11;
          goto LABEL_321;
        }
        if (v10) {
          LOBYTE(v4) = minijson::istream_context::read(this);
        }
        if ((v4 & 0x80) != 0) {
          int v11 = __maskrune((char)v4, 0x4000uLL);
        }
        else {
          int v11 = *(_DWORD *)(v9 + 4 * (char)v4 + 60) & 0x4000;
        }
        int v10 = 1;
      }
      while (v11);
      unsigned __int8 v170 = 1;
      char v171 = v4;
      switch(v7)
      {
        case 0:
          if (v4 != 123)
          {
LABEL_351:
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            uint64_t v157 = *((void *)this + 3);
            BOOL v136 = v157 != 0;
            uint64_t v137 = v157 - 1;
            if (!v136) {
              uint64_t v137 = 0;
            }
            int v138 = 8;
            goto LABEL_321;
          }
          int v7 = 1;
          char v12 = 44;
          LOBYTE(v4) = 123;
LABEL_33:
          if (!v12)
          {
LABEL_311:
            std::logic_error v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v156, "This line should never be reached, please file a bug report");
            __cxa_throw(v156, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          continue;
        case 1:
          if (v4 == 34) {
            goto LABEL_27;
          }
          if (v4 == 125)
          {
            int v7 = 6;
            char v12 = 44;
            goto LABEL_33;
          }
LABEL_359:
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          void *exception = &unk_1F14850D8;
          uint64_t v159 = *((void *)this + 3);
          BOOL v136 = v159 != 0;
          uint64_t v137 = v159 - 1;
          if (!v136) {
            uint64_t v137 = 0;
          }
          int v138 = 1;
          goto LABEL_321;
        case 2:
          if (v4 != 34) {
            goto LABEL_359;
          }
LABEL_27:
          long long v13 = operator new(0x28uLL);
          v13[2] = 0;
          v13[3] = 0;
          v13[4] = 0;
          uint64_t v14 = *((void *)this + 4);
          void *v13 = v14;
          v13[1] = v168;
          *(void *)(v14 + 8) = v13;
          *((void *)this + 4) = v13;
          ++*((void *)this + 6);
          minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
          if (*(void *)(*(void *)v168 + 16) == *(void *)(*(void *)v168 + 24)) {
            uint64_t v8 = 0;
          }
          else {
            uint64_t v8 = *(const char **)(*(void *)v168 + 16);
          }
          int v7 = 3;
          goto LABEL_31;
        case 3:
          if (v4 == 58)
          {
            int v7 = 4;
            char v12 = 44;
            LOBYTE(v4) = 58;
            goto LABEL_33;
          }
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          void *exception = &unk_1F14850D8;
          uint64_t v160 = *((void *)this + 3);
          BOOL v136 = v160 != 0;
          uint64_t v137 = v160 - 1;
          if (!v136) {
            uint64_t v137 = 0;
          }
          int v138 = 9;
          goto LABEL_321;
        case 4:
          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v169, (uint64_t)this, &v171, &v170);
          if (strcmp(v8, "nodes"))
          {
            if (strcmp(v8, "wires"))
            {
              int v7 = 5;
LABEL_31:
              LOBYTE(v4) = v171;
LABEL_32:
              char v12 = v4;
              goto LABEL_33;
            }
            AMCP::require_type((AMCP::Log::Scope_Registry *)v169[0], 4);
            unint64_t v101 = *((void *)this + 1);
            if (v101 < 0x21)
            {
              int v102 = v8;
              LOBYTE(v8) = 0;
              LOBYTE(v190) = 0;
              unsigned int v103 = *(unsigned __int8 *)this;
              if (v103 <= 2)
              {
                char v104 = 8 * v103;
                LODWORD(v8) = 0x5B7B00u >> v104;
                LOBYTE(v190) = 1u >> v104;
              }
              int v105 = 0;
              *(_DWORD *)this = 0;
              while (2)
              {
                if (v105 != 4)
                {
                  int v106 = v190;
                  do
                  {
                    if (*((void *)this + 1) != v101) {
                      goto LABEL_318;
                    }
                    if (v106) {
                      LOBYTE(v8) = minijson::istream_context::read(this);
                    }
                    if ((v8 & 0x80) != 0) {
                      int v107 = __maskrune((char)v8, 0x4000uLL);
                    }
                    else {
                      int v107 = *(_DWORD *)(v9 + 4 * (char)v8 + 60) & 0x4000;
                    }
                    int v106 = 1;
                  }
                  while (v107);
                  LOBYTE(v190) = 1;
                  LOBYTE(v203) = (_BYTE)v8;
                  switch(v105)
                  {
                    case 0:
                      if (v8 != 91) {
                        goto LABEL_351;
                      }
                      int v105 = 1;
                      char v108 = 44;
                      LOBYTE(v8) = 91;
                      goto LABEL_310;
                    case 1:
                      if (v8 != 93) {
                        goto LABEL_287;
                      }
                      goto LABEL_291;
                    case 2:
LABEL_287:
                      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v215, (uint64_t)this, &v203, &v190);
                      AMCP::parse_json<AMCP::Wire_Description>((uint64_t)v175, this);
                      int v109 = a1;
                      unint64_t v110 = a1[4];
                      unint64_t v111 = a1[5];
                      if (v110 >= v111)
                      {
                        unint64_t v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - (void)*v165) >> 6);
                        unint64_t v120 = v119 + 1;
                        if (v119 + 1 > 0x155555555555555) {
                          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                        }
                        unint64_t v121 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v111 - (void)*v165) >> 6);
                        if (2 * v121 > v120) {
                          unint64_t v120 = 2 * v121;
                        }
                        if (v121 >= 0xAAAAAAAAAAAAAALL) {
                          unint64_t v122 = 0x155555555555555;
                        }
                        else {
                          unint64_t v122 = v120;
                        }
                        v198[0] = v163;
                        uint64_t v123 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Description>>(v122);
                        uint64_t v124 = &v123[24 * v119];
                        char v195 = v123;
                        v196.i64[0] = (uint64_t)v124;
                        std::string __p = &v123[24 * v125];
                        long long v126 = *(_OWORD *)v175;
                        v124[2] = v176;
                        *(_OWORD *)uint64_t v124 = v126;
                        v175[1] = 0;
                        long long v176 = 0;
                        v175[0] = 0;
                        uint64_t v127 = v177;
                        *((_DWORD *)v124 + 8) = v178;
                        v124[3] = v127;
                        long long v128 = v180;
                        v124[7] = (void *)v181;
                        *(_OWORD *)(v124 + 5) = v128;
                        *(void *)&long long v181 = 0;
                        long long v180 = 0uLL;
                        int v129 = (void *)*((void *)&v181 + 1);
                        *((_DWORD *)v124 + 18) = v182[0];
                        v124[8] = v129;
                        v124[11] = 0;
                        v124[12] = 0;
                        v124[10] = 0;
                        *((_OWORD *)v124 + 5) = *(_OWORD *)&v182[1];
                        v124[12] = (void *)v182[3];
                        memset(&v182[1], 0, 24);
                        v124[13] = 0;
                        v124[14] = 0;
                        v124[15] = 0;
                        *(_OWORD *)(v124 + 13) = v183;
                        v124[15] = v184;
                        long long v183 = 0uLL;
                        uint64_t v184 = 0;
                        long long v130 = v185;
                        long long v131 = v186;
                        *((unsigned char *)v124 + 160) = v187;
                        *((_OWORD *)v124 + 8) = v130;
                        *((_OWORD *)v124 + 9) = v131;
                        v124[22] = 0;
                        v124[23] = 0;
                        v124[21] = 0;
                        *(_OWORD *)(v124 + 21) = v188;
                        v124[23] = v189;
                        long long v188 = 0uLL;
                        int v189 = 0;
                        v196.i64[1] = (uint64_t)(v124 + 24);
                        std::vector<AMCP::Wire_Description>::__swap_out_circular_buffer(v165, &v195);
                        int v109 = a1;
                        unint64_t v118 = a1[4];
                        std::__split_buffer<AMCP::Wire_Description>::~__split_buffer((uint64_t)&v195);
                      }
                      else
                      {
                        long long v112 = *(_OWORD *)v175;
                        *(void *)(v110 + 16) = v176;
                        *(_OWORD *)unint64_t v110 = v112;
                        v175[1] = 0;
                        long long v176 = 0;
                        v175[0] = 0;
                        int v113 = v178;
                        *(void *)(v110 + 24) = v177;
                        *(_DWORD *)(v110 + 32) = v113;
                        uint64_t v114 = v181;
                        *(_OWORD *)(v110 + 40) = v180;
                        *(void *)(v110 + 56) = v114;
                        *(void *)&long long v181 = 0;
                        long long v180 = 0uLL;
                        uint64_t v115 = *((void *)&v181 + 1);
                        *(_DWORD *)(v110 + 72) = v182[0];
                        *(void *)(v110 + 64) = v115;
                        *(void *)(v110 + 80) = 0;
                        *(void *)(v110 + 88) = 0;
                        *(void *)(v110 + 96) = 0;
                        *(void *)(v110 + 104) = 0;
                        *(_OWORD *)(v110 + 80) = *(_OWORD *)&v182[1];
                        *(void *)(v110 + 96) = v182[3];
                        memset(&v182[1], 0, 24);
                        *(void *)(v110 + 112) = 0;
                        *(void *)(v110 + 120) = 0;
                        *(_OWORD *)(v110 + 104) = v183;
                        *(void *)(v110 + 120) = v184;
                        long long v183 = 0uLL;
                        uint64_t v184 = 0;
                        long long v116 = v185;
                        long long v117 = v186;
                        *(unsigned char *)(v110 + 160) = v187;
                        *(_OWORD *)(v110 + 128) = v116;
                        *(_OWORD *)(v110 + 144) = v117;
                        *(void *)(v110 + 168) = 0;
                        *(void *)(v110 + 176) = 0;
                        *(void *)(v110 + 184) = 0;
                        *(_OWORD *)(v110 + 168) = v188;
                        *(void *)(v110 + 184) = v189;
                        long long v188 = 0uLL;
                        int v189 = 0;
                        unint64_t v118 = v110 + 192;
                        a1[4] = v110 + 192;
                      }
                      v109[4] = v118;
                      char v195 = (void **)&v188;
                      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v195);
                      if ((void)v183)
                      {
                        *((void *)&v183 + 1) = v183;
                        operator delete((void *)v183);
                      }
                      if (v182[1])
                      {
                        v182[2] = v182[1];
                        operator delete((void *)v182[1]);
                      }
                      if (SBYTE7(v181) < 0) {
                        operator delete((void *)v180);
                      }
                      if (SHIBYTE(v176) < 0) {
                        operator delete(v175[0]);
                      }
                      int v105 = 3;
                      LOBYTE(v8) = (_BYTE)v203;
                      goto LABEL_309;
                    case 3:
                      if (v8 == 44)
                      {
                        int v105 = 2;
LABEL_309:
                        char v108 = (char)v8;
                      }
                      else
                      {
                        if (v8 != 93) {
                          goto LABEL_355;
                        }
LABEL_291:
                        int v105 = 4;
                        char v108 = 44;
                        LOBYTE(v8) = 93;
                      }
LABEL_310:
                      if (!v108) {
                        goto LABEL_311;
                      }
                      continue;
                    default:
                      goto LABEL_309;
                  }
                }
                break;
              }
              uint64_t v132 = *((void *)this + 1);
              if (v132) {
                *((void *)this + 1) = v132 - 1;
              }
              int v7 = 5;
              uint64_t v8 = v102;
              goto LABEL_31;
            }
            goto LABEL_366;
          }
          AMCP::require_type((AMCP::Log::Scope_Registry *)v169[0], 4);
          unint64_t v15 = *((void *)this + 1);
          if (v15 >= 0x21) {
            goto LABEL_366;
          }
          char v162 = v8;
          LOBYTE(v8) = 0;
          unsigned __int8 v173 = 0;
          unsigned int v16 = *(unsigned __int8 *)this;
          if (v16 <= 2)
          {
            char v17 = 8 * v16;
            LODWORD(v8) = 0x5B7B00u >> v17;
            unsigned __int8 v173 = 1u >> v17;
          }
          int v18 = 0;
          *(_DWORD *)this = 0;
          while (2)
          {
            if (v18 == 4)
            {
              uint64_t v100 = *((void *)this + 1);
              if (v100) {
                *((void *)this + 1) = v100 - 1;
              }
              int v7 = 5;
              uint64_t v8 = v162;
              goto LABEL_31;
            }
            int v19 = v173;
            do
            {
              if (*((void *)this + 1) != v15) {
                goto LABEL_318;
              }
              if (v19) {
                LOBYTE(v8) = minijson::istream_context::read(this);
              }
              if ((v8 & 0x80) != 0) {
                int v20 = __maskrune((char)v8, 0x4000uLL);
              }
              else {
                int v20 = *(_DWORD *)(v9 + 4 * (char)v8 + 60) & 0x4000;
              }
              int v19 = 1;
            }
            while (v20);
            unsigned __int8 v173 = 1;
            char v174 = (char)v8;
            switch(v18)
            {
              case 0:
                if (v8 != 91) {
                  goto LABEL_351;
                }
                int v18 = 1;
                char v21 = 44;
                LOBYTE(v8) = 91;
                goto LABEL_265;
              case 1:
                if (v8 != 93) {
                  goto LABEL_56;
                }
                goto LABEL_234;
              case 2:
LABEL_56:
                minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v172, (uint64_t)this, &v174, &v173);
                long long v176 = 0;
                int v177 = 0;
                v175[1] = 0;
                int v178 = 0;
                LODWORD(v175[0]) = 1;
                int v179 = 1;
                long long v180 = 0u;
                long long v181 = 0u;
                memset(v182, 0, sizeof(v182));
                long long v183 = 0u;
                unint64_t v22 = *((void *)this + 1);
                if (v22 >= 0x21) {
                  goto LABEL_354;
                }
                LOBYTE(v23) = 0;
                __int16 v193 = 0;
                unsigned int v24 = *(unsigned __int8 *)this;
                if (v24 <= 2)
                {
                  char v25 = 8 * v24;
                  unsigned int v23 = 0x5B7B00u >> v25;
                  HIBYTE(v193) = 0x5B7B00u >> v25;
                  LOBYTE(v193) = 1u >> v25;
                }
                int v26 = 0;
                *(_DWORD *)this = 0;
                char v27 = v23;
                char v28 = v23;
                char v29 = v23;
                __s1 = "";
                break;
              case 3:
                if (v8 == 44)
                {
                  int v18 = 2;
LABEL_264:
                  char v21 = (char)v8;
                }
                else
                {
                  if (v8 != 93) {
                    goto LABEL_355;
                  }
LABEL_234:
                  int v18 = 4;
                  char v21 = 44;
                  LOBYTE(v8) = 93;
                }
LABEL_265:
                if (!v21) {
                  goto LABEL_311;
                }
                continue;
              default:
                goto LABEL_264;
            }
            break;
          }
          break;
        case 5:
          if (v4 == 44)
          {
            int v7 = 2;
            goto LABEL_32;
          }
          if (v4 == 125)
          {
            int v7 = 6;
            char v12 = 44;
            LOBYTE(v4) = 125;
            goto LABEL_33;
          }
LABEL_355:
          exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
          void *exception = &unk_1F14850D8;
          uint64_t v158 = *((void *)this + 3);
          BOOL v136 = v158 != 0;
          uint64_t v137 = v158 - 1;
          if (!v136) {
            uint64_t v137 = 0;
          }
          int v138 = 10;
          goto LABEL_321;
        default:
          goto LABEL_31;
      }
      while (1)
      {
        do
        {
LABEL_60:
          if (*((void *)this + 1) != v22)
          {
LABEL_332:
            int v145 = 11;
            goto LABEL_333;
          }
          if ((_BYTE)v193)
          {
            LOBYTE(v23) = minijson::istream_context::read(this);
            HIBYTE(v193) = v23;
            char v27 = v23;
            char v28 = v23;
            char v29 = v23;
          }
          LOBYTE(v193) = 1;
          if (v29 < 0) {
            int v30 = __maskrune(v29, 0x4000uLL);
          }
          else {
            int v30 = *(_DWORD *)(v9 + 4 * v29 + 60) & 0x4000;
          }
        }
        while (v30);
        switch(v26)
        {
          case 0:
            if (v23 == 123)
            {
              int v26 = 1;
              LOBYTE(v23) = 123;
              char v27 = 123;
              char v28 = 123;
              char v29 = 123;
              goto LABEL_60;
            }
LABEL_348:
            int v145 = 8;
            goto LABEL_333;
          case 1:
            if (v23 == 34) {
              goto LABEL_112;
            }
            if (v23 == 125) {
              goto LABEL_239;
            }
LABEL_347:
            int v145 = 1;
            goto LABEL_333;
          case 2:
            if (v23 != 34) {
              goto LABEL_347;
            }
LABEL_112:
            int v40 = operator new(0x28uLL);
            v40[2] = 0;
            v40[3] = 0;
            v40[4] = 0;
            uint64_t v41 = *((void *)this + 4);
            void *v40 = v41;
            v40[1] = v168;
            *(void *)(v41 + 8) = v40;
            *((void *)this + 4) = v40;
            ++*((void *)this + 6);
            minijson::detail::read_quoted_string<minijson::istream_context>((minijson::istream_context **)this);
            if (*(void *)(*(void *)v168 + 16) == *(void *)(*(void *)v168 + 24)) {
              int v42 = 0;
            }
            else {
              int v42 = *(char **)(*(void *)v168 + 16);
            }
            __s1 = v42;
            int v26 = 3;
            goto LABEL_182;
          case 3:
            if (v27 == 58)
            {
              int v26 = 4;
              char v27 = 58;
              char v28 = 58;
              char v29 = 58;
              goto LABEL_60;
            }
            int v145 = 9;
            goto LABEL_333;
          case 4:
            minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v190, (uint64_t)this, (unsigned char *)&v193 + 1, &v193);
            if (!strcmp(__s1, "UID"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 0);
              unint64_t v43 = (std::string *)&v175[1];
LABEL_119:
              std::string::__assign_external(v43, __s);
              goto LABEL_181;
            }
            if (!strcmp(__s1, "NodeType"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 0);
              std::string::basic_string[abi:ne180100]<0>(&v194, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Type>();
              v196.i64[0] = (uint64_t)v198;
              uint64_t v44 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Type,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Type const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v196.i64[1]);
              int v199 = v198;
              long long v200 = v198;
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v215, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
              }
              else {
                std::string v215 = v194;
              }
              uint64_t v46 = (int *)__p;
              unint64_t v47 = *((void *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v47)
              {
                uint64_t v48 = (int *)__p;
                do
                {
                  while (1)
                  {
                    uint64_t v44 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v47 - 48), &v215);
                    if ((v44 & 0x80) == 0) {
                      break;
                    }
                    unint64_t v47 = *(void *)(v47 + 16);
                    if (!v47) {
                      goto LABEL_132;
                    }
                  }
                  uint64_t v48 = (int *)(v47 - 56);
                  unint64_t v47 = *(void *)(v47 + 8);
                }
                while (v47);
LABEL_132:
                if (v48 != v46)
                {
                  uint64_t v44 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v215, (void *)v48 + 1);
                  if ((v44 & 0x80u) == 0) {
                    uint64_t v46 = v48;
                  }
                }
              }
              if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v215.__r_.__value_.__l.__data_);
              }
              if ((int *)*(v200 - 1) == v46)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v44);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v215, "com.apple.coreaudio", "AMCP");
                uint64_t v139 = *(NSObject **)v215.__r_.__value_.__l.__data_;
                if (v215.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
                }
                if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                {
                  long long v140 = pthread_self();
                  mach_port_t v141 = pthread_mach_thread_np(v140);
                  LODWORD(v215.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v215.__r_.__value_.__r.__words[0]) = v141;
                  LOWORD(v215.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v215.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v215.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v215.__r_.__value_.__r.__words[2]) = 53;
                  __int16 v216 = 2080;
                  *(void *)int64_t v217 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1BAA78000, v139, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v215, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v214);
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v206);
                std::logic_error::logic_error(&v207, &v206);
                v207.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error(&v208, &v207);
                uint64_t v210 = 0;
                uint64_t v211 = 0;
                uint64_t v212 = 0;
                int v213 = -1;
                v208.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                uint64_t v209 = &unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v215, (uint64_t)&v208);
                *(void *)&v217[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Type]";
                unint64_t v218 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                int v219 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v201);
                long long v204 = v201;
                int v203 = &unk_1F148AA90;
                uint64_t v205 = v202;
                long long v201 = 0uLL;
                uint64_t v202 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              uint64_t v49 = *((void *)__p + 7);
              int v50 = *v46;
              if ((v49 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                uint64_t v51 = (v49 & 0xFFFFFFFFFFFFFFFELL) - 56;
              }
              else {
                uint64_t v51 = 0;
              }
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v198, v51);
              operator delete(__p);
              LODWORD(v175[0]) = v50;
              goto LABEL_179;
            }
            if (!strcmp(__s1, "BlockSize"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 1);
              HIDWORD(v181) = v192;
              goto LABEL_181;
            }
            if (!strcmp(__s1, "ThreadPolicy"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 0);
              std::string::basic_string[abi:ne180100]<0>(&v194, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Thread_Policy>();
              v196.i64[0] = (uint64_t)v198;
              uint64_t v45 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Thread_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Thread_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v196.i64[1]);
              int v199 = v198;
              long long v200 = v198;
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v215, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
              }
              else {
                std::string v215 = v194;
              }
              int v53 = (int *)__p;
              unint64_t v54 = *((void *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v54)
              {
                uint64_t v55 = (int *)__p;
                do
                {
                  while (1)
                  {
                    uint64_t v45 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v54 - 48), &v215);
                    if ((v45 & 0x80) == 0) {
                      break;
                    }
                    unint64_t v54 = *(void *)(v54 + 16);
                    if (!v54) {
                      goto LABEL_152;
                    }
                  }
                  uint64_t v55 = (int *)(v54 - 56);
                  unint64_t v54 = *(void *)(v54 + 8);
                }
                while (v54);
LABEL_152:
                if (v55 != v53)
                {
                  uint64_t v45 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v215, (void *)v55 + 1);
                  if ((v45 & 0x80u) == 0) {
                    int v53 = v55;
                  }
                }
              }
              if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v215.__r_.__value_.__l.__data_);
              }
              if ((int *)*(v200 - 1) == v53)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v45);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v215, "com.apple.coreaudio", "AMCP");
                long long v142 = *(NSObject **)v215.__r_.__value_.__l.__data_;
                if (v215.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
                }
                if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
                {
                  unsigned int v143 = pthread_self();
                  mach_port_t v144 = pthread_mach_thread_np(v143);
                  LODWORD(v215.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v215.__r_.__value_.__r.__words[0]) = v144;
                  LOWORD(v215.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v215.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v215.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v215.__r_.__value_.__r.__words[2]) = 53;
                  __int16 v216 = 2080;
                  *(void *)int64_t v217 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1BAA78000, v142, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v215, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v214);
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v206);
                std::logic_error::logic_error(&v207, &v206);
                v207.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error(&v208, &v207);
                uint64_t v210 = 0;
                uint64_t v211 = 0;
                uint64_t v212 = 0;
                int v213 = -1;
                v208.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                uint64_t v209 = &unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v215, (uint64_t)&v208);
                *(void *)&v217[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Thread_Policy]";
                unint64_t v218 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                int v219 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v201);
                long long v204 = v201;
                int v203 = &unk_1F148AA90;
                uint64_t v205 = v202;
                long long v201 = 0uLL;
                uint64_t v202 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              uint64_t v56 = *((void *)__p + 7);
              int v57 = *v53;
              if ((v56 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                uint64_t v58 = (v56 & 0xFFFFFFFFFFFFFFFELL) - 56;
              }
              else {
                uint64_t v58 = 0;
              }
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v198, v58);
              operator delete(__p);
              int v178 = v57;
              goto LABEL_179;
            }
            if (!strcmp(__s1, "SizeChangePolicy"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 0);
              std::string::basic_string[abi:ne180100]<0>(&v194, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Buffer_Size_Change_Policy>();
              v196.i64[0] = (uint64_t)v198;
              uint64_t v52 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Buffer_Size_Change_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Buffer_Size_Change_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v196.i64[1]);
              int v199 = v198;
              long long v200 = v198;
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v215, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
              }
              else {
                std::string v215 = v194;
              }
              int v59 = (int *)__p;
              unint64_t v60 = *((void *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v60)
              {
                char v61 = (int *)__p;
                do
                {
                  while (1)
                  {
                    uint64_t v52 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v60 - 48), &v215);
                    if ((v52 & 0x80) == 0) {
                      break;
                    }
                    unint64_t v60 = *(void *)(v60 + 16);
                    if (!v60) {
                      goto LABEL_169;
                    }
                  }
                  char v61 = (int *)(v60 - 56);
                  unint64_t v60 = *(void *)(v60 + 8);
                }
                while (v60);
LABEL_169:
                if (v61 != v59)
                {
                  uint64_t v52 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v215, (void *)v61 + 1);
                  if ((v52 & 0x80u) == 0) {
                    int v59 = v61;
                  }
                }
              }
              if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v215.__r_.__value_.__l.__data_);
              }
              if ((int *)*(v200 - 1) == v59)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v52);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v215, "com.apple.coreaudio", "AMCP");
                long long v149 = *(NSObject **)v215.__r_.__value_.__l.__data_;
                if (v215.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
                }
                if (os_log_type_enabled(v149, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v150 = pthread_self();
                  mach_port_t v151 = pthread_mach_thread_np(v150);
                  LODWORD(v215.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v215.__r_.__value_.__r.__words[0]) = v151;
                  LOWORD(v215.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v215.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v215.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v215.__r_.__value_.__r.__words[2]) = 53;
                  __int16 v216 = 2080;
                  *(void *)int64_t v217 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1BAA78000, v149, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v215, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v214);
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v206);
                std::logic_error::logic_error(&v207, &v206);
                v207.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error(&v208, &v207);
                uint64_t v210 = 0;
                uint64_t v211 = 0;
                uint64_t v212 = 0;
                int v213 = -1;
                v208.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                uint64_t v209 = &unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v215, (uint64_t)&v208);
                *(void *)&v217[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Buffer_Size_Change_Policy]";
                unint64_t v218 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                int v219 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v201);
                long long v204 = v201;
                int v203 = &unk_1F148AA90;
                uint64_t v205 = v202;
                long long v201 = 0uLL;
                uint64_t v202 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              uint64_t v62 = *((void *)__p + 7);
              int v63 = *v59;
              if ((v62 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                uint64_t v64 = (v62 & 0xFFFFFFFFFFFFFFFELL) - 56;
              }
              else {
                uint64_t v64 = 0;
              }
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v198, v64);
              operator delete(__p);
              int v179 = v63;
              goto LABEL_179;
            }
            if (!strcmp(__s1, "ClockUID") || !strcmp(__s1, "ClockTerminal"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 0);
              unint64_t v43 = (std::string *)&v180;
              goto LABEL_119;
            }
            if (!strcmp(__s1, "ClockPolicy"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 0);
              std::string::basic_string[abi:ne180100]<0>(&v194, __s);
              AMCP::get_enum_string_bimap<AMCP::Node_Clock_Policy>();
              v196.i64[0] = (uint64_t)v198;
              uint64_t v65 = boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Node_Clock_Policy,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Node_Clock_Policy const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::multi_index_container((uint64_t)&v196.i64[1]);
              int v199 = v198;
              long long v200 = v198;
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                std::string::__init_copy_ctor_external(&v215, v194.__r_.__value_.__l.__data_, v194.__r_.__value_.__l.__size_);
              }
              else {
                std::string v215 = v194;
              }
              uint64_t v76 = (int *)__p;
              unint64_t v77 = *((void *)__p + 7) & 0xFFFFFFFFFFFFFFFELL;
              if (v77)
              {
                unint64_t v78 = (int *)__p;
                do
                {
                  while (1)
                  {
                    uint64_t v65 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(v77 - 48), &v215);
                    if ((v65 & 0x80) == 0) {
                      break;
                    }
                    unint64_t v77 = *(void *)(v77 + 16);
                    if (!v77) {
                      goto LABEL_222;
                    }
                  }
                  unint64_t v78 = (int *)(v77 - 56);
                  unint64_t v77 = *(void *)(v77 + 8);
                }
                while (v77);
LABEL_222:
                if (v78 != v76)
                {
                  uint64_t v65 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v215, (void *)v78 + 1);
                  if ((v65 & 0x80u) == 0) {
                    uint64_t v76 = v78;
                  }
                }
              }
              if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v215.__r_.__value_.__l.__data_);
              }
              if ((int *)*(v200 - 1) == v76)
              {
                AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v65);
                AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v215, "com.apple.coreaudio", "AMCP");
                long long v152 = *(NSObject **)v215.__r_.__value_.__l.__data_;
                if (v215.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v215.__r_.__value_.__l.__size_);
                }
                if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v153 = pthread_self();
                  mach_port_t v154 = pthread_mach_thread_np(v153);
                  LODWORD(v215.__r_.__value_.__l.__data_) = 67109890;
                  HIDWORD(v215.__r_.__value_.__r.__words[0]) = v154;
                  LOWORD(v215.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&v215.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Graph_Description_Internal.h";
                  WORD1(v215.__r_.__value_.__r.__words[2]) = 1024;
                  HIDWORD(v215.__r_.__value_.__r.__words[2]) = 53;
                  __int16 v216 = 2080;
                  *(void *)int64_t v217 = "not (found != map.right.end())";
                  _os_log_error_impl(&dword_1BAA78000, v152, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&v215, 0x22u);
                }
                AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v214);
                __cxa_allocate_exception(0x40uLL);
                caulk::make_string((caulk *)"", (uint64_t)&v206);
                std::logic_error::logic_error(&v207, &v206);
                v207.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
                std::logic_error::logic_error(&v208, &v207);
                uint64_t v210 = 0;
                uint64_t v211 = 0;
                uint64_t v212 = 0;
                int v213 = -1;
                v208.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
                uint64_t v209 = &unk_1F1489CF0;
                boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&v215, (uint64_t)&v208);
                *(void *)&v217[6] = "T AMCP::string_to_enum(const std::string &) [T = AMCP::Node_Clock_Policy]";
                unint64_t v218 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Graph_Description_Internal.h";
                int v219 = 53;
                applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v201);
                long long v204 = v201;
                int v203 = &unk_1F148AA90;
                uint64_t v205 = v202;
                long long v201 = 0uLL;
                uint64_t v202 = 0;
                boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
              }
              uint64_t v79 = *((void *)__p + 7);
              int v80 = *v76;
              if ((v79 & 0xFFFFFFFFFFFFFFFELL) != 0) {
                uint64_t v81 = (v79 & 0xFFFFFFFFFFFFFFFELL) - 56;
              }
              else {
                uint64_t v81 = 0;
              }
              boost::multi_index::detail::ordered_index_impl<boost::multi_index::member<boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>,std::string,&boost::bimaps::relation::detail::relation_storage<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,true>::right>,std::less<std::string>,boost::multi_index::detail::nth_layer<1,boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>,boost::mpl::v_item<boost::bimaps::relation::member_at::right,boost::mpl::vector0<mpl_::na>,0>,boost::multi_index::detail::ordered_unique_tag,boost::multi_index::detail::null_augment_policy>::delete_all_nodes((uint64_t)v198, v81);
              operator delete(__p);
              DWORD2(v181) = v80;
LABEL_179:
              if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v194.__r_.__value_.__l.__data_);
              }
              goto LABEL_181;
            }
            if (!strcmp(__s1, "InputTerminals"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 4);
              unint64_t v66 = *((void *)this + 1);
              if (v66 <= 0x20)
              {
                LOBYTE(v67) = 0;
                v206.__r_.__value_.__s.__data_[0] = 0;
                unsigned int v68 = *(unsigned __int8 *)this;
                if (v68 <= 2)
                {
                  char v69 = 8 * v68;
                  unsigned int v67 = 0x5B7B00u >> v69;
                  v206.__r_.__value_.__s.__data_[0] = 1u >> v69;
                }
                int v70 = 0;
                *(_DWORD *)this = 0;
                while (1)
                {
                  if (v70 == 4) {
                    goto LABEL_213;
                  }
                  int v71 = v206.__r_.__value_.__s.__data_[0];
                  do
                  {
                    if (*((void *)this + 1) != v66) {
                      goto LABEL_332;
                    }
                    if (v71) {
                      LOBYTE(v67) = minijson::istream_context::read(this);
                    }
                    if ((v67 & 0x80) != 0) {
                      int v72 = __maskrune((char)v67, 0x4000uLL);
                    }
                    else {
                      int v72 = *(_DWORD *)(v9 + 4 * (char)v67 + 60) & 0x4000;
                    }
                    int v71 = 1;
                  }
                  while (v72);
                  v206.__r_.__value_.__s.__data_[0] = 1;
                  LOBYTE(v203) = v67;
                  switch(v70)
                  {
                    case 0:
                      if (v67 != 91) {
                        goto LABEL_348;
                      }
                      int v70 = 1;
                      char v73 = 44;
                      LOBYTE(v67) = 91;
                      goto LABEL_211;
                    case 1:
                      if (v67 != 93) {
                        goto LABEL_203;
                      }
                      goto LABEL_208;
                    case 2:
LABEL_203:
                      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v215, (uint64_t)this, &v203, &v206);
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v215.__r_.__value_.__l.__data_), 3);
                      AMCP::parse_json<AMCP::Terminal_Description>((uint64_t)&v195, this);
                      std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](&v182[3], (long long *)&v195);
                      for (uint64_t i = 8; i != 2; i -= 3)
                      {
                        v208.__vftable = (std::logic_error_vtbl *)&(&v195)[i];
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
                      }
                      int v70 = 3;
                      LOBYTE(v67) = (_BYTE)v203;
                      goto LABEL_210;
                    case 3:
                      if (v67 == 44)
                      {
                        int v70 = 2;
LABEL_210:
                        char v73 = v67;
                      }
                      else
                      {
                        if (v67 != 93)
                        {
LABEL_349:
                          int v145 = 10;
                          goto LABEL_333;
                        }
LABEL_208:
                        int v70 = 4;
                        char v73 = 44;
                        LOBYTE(v67) = 93;
                      }
LABEL_211:
                      if (!v73) {
                        goto LABEL_346;
                      }
                      break;
                    default:
                      goto LABEL_210;
                  }
                }
              }
LABEL_354:
              int v145 = 12;
LABEL_333:
              unsigned __int8 v146 = __cxa_allocate_exception(0x18uLL);
              *unsigned __int8 v146 = &unk_1F14850D8;
              uint64_t v147 = *((void *)this + 3);
              BOOL v136 = v147 != 0;
              uint64_t v148 = v147 - 1;
              if (!v136) {
                uint64_t v148 = 0;
              }
              v146[1] = v148;
              *((_DWORD *)v146 + 4) = v145;
            }
            if (!strcmp(__s1, "OutputTerminals"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v190, 4);
              unint64_t v31 = *((void *)this + 1);
              if (v31 > 0x20) {
                goto LABEL_354;
              }
              LOBYTE(v32) = 0;
              v206.__r_.__value_.__s.__data_[0] = 0;
              unsigned int v33 = *(unsigned __int8 *)this;
              if (v33 <= 2)
              {
                char v34 = 8 * v33;
                unsigned int v32 = 0x5B7B00u >> v34;
                v206.__r_.__value_.__s.__data_[0] = 1u >> v34;
              }
              int v35 = 0;
              *(_DWORD *)this = 0;
              while (2)
              {
                if (v35 != 4)
                {
                  int v36 = v206.__r_.__value_.__s.__data_[0];
                  do
                  {
                    if (*((void *)this + 1) != v31) {
                      goto LABEL_332;
                    }
                    if (v36) {
                      LOBYTE(v32) = minijson::istream_context::read(this);
                    }
                    if ((v32 & 0x80) != 0) {
                      int v37 = __maskrune((char)v32, 0x4000uLL);
                    }
                    else {
                      int v37 = *(_DWORD *)(v9 + 4 * (char)v32 + 60) & 0x4000;
                    }
                    int v36 = 1;
                  }
                  while (v37);
                  v206.__r_.__value_.__s.__data_[0] = 1;
                  LOBYTE(v203) = v32;
                  switch(v35)
                  {
                    case 0:
                      if (v32 != 91) {
                        goto LABEL_348;
                      }
                      int v35 = 1;
                      char v38 = 44;
                      LOBYTE(v32) = 91;
                      goto LABEL_105;
                    case 1:
                      if (v32 != 93) {
                        goto LABEL_97;
                      }
                      goto LABEL_102;
                    case 2:
LABEL_97:
                      minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v215, (uint64_t)this, &v203, &v206);
                      AMCP::require_type((AMCP::Log::Scope_Registry *)LODWORD(v215.__r_.__value_.__l.__data_), 3);
                      AMCP::parse_json<AMCP::Terminal_Description>((uint64_t)&v195, this);
                      std::vector<AMCP::Terminal_Description>::push_back[abi:ne180100](v182, (long long *)&v195);
                      for (uint64_t j = 8; j != 2; j -= 3)
                      {
                        v208.__vftable = (std::logic_error_vtbl *)&(&v195)[j];
                        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v208);
                      }
                      int v35 = 3;
                      LOBYTE(v32) = (_BYTE)v203;
                      goto LABEL_104;
                    case 3:
                      if (v32 == 44)
                      {
                        int v35 = 2;
LABEL_104:
                        char v38 = v32;
                      }
                      else
                      {
                        if (v32 != 93) {
                          goto LABEL_349;
                        }
LABEL_102:
                        int v35 = 4;
                        char v38 = 44;
                        LOBYTE(v32) = 93;
                      }
LABEL_105:
                      if (!v38) {
                        goto LABEL_346;
                      }
                      continue;
                    default:
                      goto LABEL_104;
                  }
                }
                break;
              }
LABEL_213:
              uint64_t v75 = *((void *)this + 1);
              if (v75) {
                *((void *)this + 1) = v75 - 1;
              }
            }
LABEL_181:
            int v26 = 5;
LABEL_182:
            LOBYTE(v23) = HIBYTE(v193);
            char v27 = HIBYTE(v193);
            char v28 = HIBYTE(v193);
            char v29 = HIBYTE(v193);
            if (!HIBYTE(v193))
            {
LABEL_346:
              std::logic_error v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v155, "This line should never be reached, please file a bug report");
              __cxa_throw(v155, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            return;
          case 5:
            if (v28 == 44)
            {
              int v26 = 2;
              char v29 = v28;
              goto LABEL_60;
            }
            if (v28 != 125) {
              goto LABEL_349;
            }
LABEL_239:
            uint64_t v82 = *((void *)this + 1);
            if (v82) {
              *((void *)this + 1) = v82 - 1;
            }
            uint64_t v83 = a1;
            unint64_t v84 = a1[1];
            unint64_t v85 = a1[2];
            if (v84 >= v85)
            {
              unint64_t v88 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v84 - *a1) >> 3);
              unint64_t v89 = v88 + 1;
              if (v88 + 1 > 0x222222222222222) {
                std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v90 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v85 - *a1) >> 3);
              if (2 * v90 > v89) {
                unint64_t v89 = 2 * v90;
              }
              if (v90 >= 0x111111111111111) {
                unint64_t v91 = 0x222222222222222;
              }
              else {
                unint64_t v91 = v89;
              }
              v198[0] = v164;
              if (v91) {
                unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Node_Description>>(v91);
              }
              else {
                uint64_t v92 = 0;
              }
              uint64_t v93 = v91 + 120 * v88;
              char v195 = (void **)v91;
              v196.i64[0] = v93;
              std::string __p = (void *)(v91 + 120 * v92);
              std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v93, (uint64_t)v175);
              uint64_t v87 = v93 + 120;
              v196.i64[1] = v93 + 120;
              uint64_t v95 = *a1;
              unint64_t v94 = a1[1];
              uint64_t v96 = v196.i64[0];
              if (v94 == *a1)
              {
                int64x2_t v97 = vdupq_n_s64(v94);
                uint64_t v83 = a1;
              }
              else
              {
                do
                {
                  v94 -= 120;
                  std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v96 - 120, v94);
                }
                while (v94 != v95);
                uint64_t v83 = a1;
                int64x2_t v97 = *(int64x2_t *)a1;
                uint64_t v87 = v196.i64[1];
              }
              *uint64_t v83 = v96;
              v83[1] = v87;
              int64x2_t v196 = v97;
              uint64_t v98 = (void *)v83[2];
              v83[2] = (uint64_t)__p;
              std::string __p = v98;
              char v195 = (void **)v97.i64[0];
              std::__split_buffer<AMCP::Node_Description>::~__split_buffer((uint64_t)&v195);
            }
            else
            {
              std::construct_at[abi:ne180100]<AMCP::Node_Description,AMCP::Node_Description,AMCP::Node_Description*>(v84, (uint64_t)v175);
              uint64_t v87 = v86 + 120;
              a1[1] = v86 + 120;
            }
            v83[1] = v87;
            for (uint64_t k = 12; k != 6; k -= 3)
            {
              char v195 = &v175[k];
              std::vector<AMCP::Terminal_Description>::__destroy_vector::operator()[abi:ne180100](&v195);
            }
            if (SBYTE7(v181) < 0) {
              operator delete((void *)v180);
            }
            if (SHIBYTE(v177) < 0) {
              operator delete(v175[1]);
            }
            int v18 = 3;
            LOBYTE(v8) = v174;
            goto LABEL_264;
          default:
            goto LABEL_182;
        }
      }
    }
    break;
  }
  uint64_t v133 = *((void *)this + 1);
  if (v133) {
    *((void *)this + 1) = v133 - 1;
  }
}

void sub_1BAF3409C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  boost::multi_index::multi_index_container<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>,boost::bimaps::detail::bimap_core<AMCP::Direction,std::string,mpl_::na,mpl_::na,mpl_::na>::core_indices,std::allocator<boost::bimaps::relation::mutant_relation<boost::bimaps::tags::tagged<AMCP::Direction const,boost::bimaps::relation::member_at::left>,boost::bimaps::tags::tagged<std::string const,boost::bimaps::relation::member_at::right>,mpl_::na,true>>>::~multi_index_container(a15);
  if (a72 < 0) {
    operator delete(__p);
  }
  AMCP::Node_Description::~Node_Description((void **)&a38);
  AMCP::Graph_Description::~Graph_Description(a25);
  _Unwind_Resume(a1);
}

uint64_t AMCP::graph_description_from_json@<X0>(const std::string *a1@<X0>, uint64_t *a2@<X8>)
{
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v6, a1);
  minijson::istream_context::istream_context((uint64_t)v4, (uint64_t)v6);
  AMCP::parse_json<AMCP::Graph_Description>(a2, (minijson::istream_context *)v4);
  std::__list_imp<std::vector<char>>::clear(v5);
  v6[0] = *MEMORY[0x1E4FBA410];
  *(void *)((char *)v6 + *(void *)(v6[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v6[2] = MEMORY[0x1E4FBA470] + 16;
  if (v7 < 0) {
    operator delete((void *)v6[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1C1859700](&v8);
}

void sub_1BAF34654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  std::__list_imp<std::vector<char>>::clear((uint64_t *)(v35 + 32));
  a17 = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)&a17 + *(void *)(a17 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  a19 = MEMORY[0x1E4FBA470] + 16;
  if (a32 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C1859700](&a35);
  _Unwind_Resume(a1);
}

uint64_t std::istringstream::basic_istringstream[abi:ne180100](uint64_t a1, const std::string *a2)
{
  uint64_t v4 = MEMORY[0x1E4FBA490] + 64;
  *(void *)(a1 + 120) = MEMORY[0x1E4FBA490] + 64;
  uint64_t v5 = a1 + 16;
  uint64_t v6 = *(void *)(MEMORY[0x1E4FBA410] + 16);
  uint64_t v7 = *(void *)(MEMORY[0x1E4FBA410] + 8);
  *(void *)a1 = v7;
  *(void *)(a1 + *(void *)(v7 - 24)) = v6;
  *(void *)(a1 + 8) = 0;
  uint64_t v8 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 16));
  uint64_t v9 = MEMORY[0x1E4FBA490] + 24;
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *(void *)a1 = v9;
  *(void *)(a1 + 120) = v4;
  std::streambuf::basic_streambuf();
  uint64_t v10 = MEMORY[0x1E4FBA470] + 16;
  *(_OWORD *)(a1 + 80) = 0u;
  *(void *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 8;
  std::string::operator=((std::string *)(a1 + 80), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](v5);
  return a1;
}

void sub_1BAF348E4(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x1C1859700](v1);
  _Unwind_Resume(a1);
}

uint64_t minijson::istream_context::istream_context(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  uint64_t v3 = a1 + 32;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a1 + 32;
  *(void *)(a1 + 40) = a1 + 32;
  *(void *)(a1 + 48) = 0;
  uint64_t v4 = operator new(0x28uLL);
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = 0;
  *uint64_t v4 = v3;
  v4[1] = v3;
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = 1;
  return a1;
}

void sub_1BAF34984(_Unwind_Exception *a1)
{
  std::__list_imp<std::vector<char>>::clear(v1);
  _Unwind_Resume(a1);
}

void std::__list_imp<std::vector<char>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    while (v3 != a1)
    {
      uint64_t v6 = (uint64_t *)v3[1];
      uint64_t v5 = (void *)v3[2];
      if (v5)
      {
        v3[3] = (uint64_t)v5;
        operator delete(v5);
      }
      operator delete(v3);
      uint64_t v3 = v6;
    }
  }
}

uint64_t AMCP::extended_graph_description_from_json@<X0>(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  std::istringstream::basic_istringstream[abi:ne180100]((uint64_t)v81, a1);
  minijson::istream_context::istream_context((uint64_t)&v75, (uint64_t)v81);
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  uint64_t v73 = a2;
  unint64_t v3 = v76;
  if (v76 >= 0x21) {
    goto LABEL_181;
  }
  LOBYTE(v4) = 0;
  unsigned __int8 v85 = 0;
  if (v75 <= 2u)
  {
    unsigned int v4 = 0x5B7B00u >> (8 * (_BYTE)v75);
    unsigned __int8 v85 = 1u >> (8 * (_BYTE)v75);
  }
  int v5 = 0;
  LODWORD(v75) = 0;
  int v71 = (void **)(a2 + 24);
  uint64_t v6 = MEMORY[0x1E4F14390];
  __s1 = "";
LABEL_5:
  if (v5 != 6)
  {
    int v7 = v85;
    while (1)
    {
      if (v76 != v3)
      {
LABEL_163:
        exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
        void *exception = &unk_1F14850D8;
        int v65 = 11;
        goto LABEL_164;
      }
      if (v7)
      {
        char v8 = std::istream::get();
        if ((*((unsigned char *)v77 + *(void *)(*v77 - 24) + 32) & 5) != 0)
        {
          unsigned int v9 = 0;
          LOBYTE(v4) = 0;
          goto LABEL_13;
        }
        LOBYTE(v4) = v8;
        ++v78;
      }
      unsigned int v9 = (char)v4;
      if ((v4 & 0x80) != 0)
      {
        int v10 = __maskrune((char)v4, 0x4000uLL);
        goto LABEL_15;
      }
LABEL_13:
      int v10 = *(_DWORD *)(v6 + 4 * v9 + 60) & 0x4000;
LABEL_15:
      int v7 = 1;
      if (!v10)
      {
        unsigned __int8 v85 = 1;
        char v86 = v4;
        switch(v5)
        {
          case 0:
            if (v4 != 123)
            {
LABEL_175:
              exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
              void *exception = &unk_1F14850D8;
              int v65 = 8;
              goto LABEL_164;
            }
            int v5 = 1;
            char v11 = 44;
            LOBYTE(v4) = 123;
LABEL_156:
            if (!v11) {
              goto LABEL_157;
            }
            goto LABEL_5;
          case 1:
            if (v4 == 34) {
              goto LABEL_141;
            }
            if (v4 == 125)
            {
              int v5 = 6;
              char v11 = 44;
              goto LABEL_156;
            }
LABEL_177:
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            int v65 = 1;
            goto LABEL_164;
          case 2:
            if (v4 != 34) {
              goto LABEL_177;
            }
LABEL_141:
            int v59 = operator new(0x28uLL);
            v59[2] = 0;
            v59[3] = 0;
            v59[4] = 0;
            uint64_t v60 = v79[0];
            *int v59 = v79[0];
            v59[1] = v79;
            *(void *)(v60 + 8) = v59;
            v79[0] = (uint64_t)v59;
            ++v80;
            minijson::detail::read_quoted_string<minijson::istream_context>(&v75);
            if (*(void *)(v79[0] + 16) == *(void *)(v79[0] + 24)) {
              char v61 = 0;
            }
            else {
              char v61 = *(char **)(v79[0] + 16);
            }
            __s1 = v61;
            int v5 = 3;
            goto LABEL_154;
          case 3:
            if (v4 == 58)
            {
              int v5 = 4;
              char v11 = 44;
              LOBYTE(v4) = 58;
              goto LABEL_156;
            }
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            int v65 = 9;
            goto LABEL_164;
          case 4:
            minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v84, (uint64_t)&v75, &v86, &v85);
            if (!strcmp(__s1, "graph"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v84[0], 3);
              AMCP::parse_json<AMCP::Graph_Description>((uint64_t *)v90, (minijson::istream_context *)&v75);
              std::vector<AMCP::Node_Description>::__vdeallocate((void **)v73);
              *(_OWORD *)uint64_t v73 = v90[0];
              *(void *)(v73 + 16) = *(void *)&v90[1];
              memset(v90, 0, 24);
              std::vector<AMCP::Wire_Description>::__vdeallocate(v71);
              *(_OWORD *)(v73 + 24) = *(_OWORD *)((char *)&v90[1] + 8);
              *(void *)(v73 + 40) = *((void *)&v90[2] + 1);
              memset((char *)&v90[1] + 8, 0, 24);
              uint64_t v92 = (void **)&v90[1] + 1;
              std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100](&v92);
              uint64_t v92 = (void **)v90;
              std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100](&v92);
            }
            else if (!strcmp(__s1, "wire_properties"))
            {
              AMCP::require_type((AMCP::Log::Scope_Registry *)v84[0], 4);
              unint64_t v12 = v76;
              if (v76 < 0x21)
              {
                LOBYTE(v13) = 0;
                unsigned __int8 v88 = 0;
                if (v75 <= 2u)
                {
                  unsigned int v13 = 0x5B7B00u >> (8 * (_BYTE)v75);
                  unsigned __int8 v88 = 1u >> (8 * (_BYTE)v75);
                }
                int v14 = 0;
                LODWORD(v75) = 0;
LABEL_25:
                if (v14 != 4)
                {
                  int v15 = v88;
                  while (1)
                  {
                    if (v76 != v12) {
                      goto LABEL_163;
                    }
                    if (v15)
                    {
                      char v16 = std::istream::get();
                      if ((*((unsigned char *)v77 + *(void *)(*v77 - 24) + 32) & 5) != 0)
                      {
                        unsigned int v17 = 0;
                        LOBYTE(v13) = 0;
                        goto LABEL_33;
                      }
                      LOBYTE(v13) = v16;
                      ++v78;
                    }
                    unsigned int v17 = (char)v13;
                    if ((v13 & 0x80) != 0)
                    {
                      int v18 = __maskrune((char)v13, 0x4000uLL);
                      goto LABEL_35;
                    }
LABEL_33:
                    int v18 = *(_DWORD *)(v6 + 4 * v17 + 60) & 0x4000;
LABEL_35:
                    int v15 = 1;
                    if (!v18)
                    {
                      unsigned __int8 v88 = 1;
                      char v89 = v13;
                      switch(v14)
                      {
                        case 0:
                          if (v13 != 91) {
                            goto LABEL_175;
                          }
                          int v14 = 1;
                          char v19 = 44;
                          LOBYTE(v13) = 91;
                          goto LABEL_132;
                        case 1:
                          if (v13 != 93) {
                            goto LABEL_40;
                          }
                          goto LABEL_98;
                        case 2:
LABEL_40:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)v87, (uint64_t)&v75, &v89, &v88);
                          *(void *)unint64_t v91 = 0;
                          memset(v90, 0, sizeof(v90));
                          *(_DWORD *)&v91[8] = 64;
                          *(_WORD *)&v91[12] = 0;
                          v91[14] = 0;
                          unint64_t v20 = v76;
                          if (v76 >= 0x21)
                          {
                            int v70 = 12;
LABEL_168:
                            unsigned int v67 = __cxa_allocate_exception(0x18uLL);
                            *unsigned int v67 = &unk_1F14850D8;
                            uint64_t v68 = v78 - 1;
                            if (!v78) {
                              uint64_t v68 = 0;
                            }
                            v67[1] = v68;
                            *((_DWORD *)v67 + 4) = v70;
                          }
                          LOBYTE(v21) = 0;
                          __int16 v95 = 0;
                          if (v75 <= 2u)
                          {
                            unsigned int v21 = 0x5B7B00u >> (8 * (_BYTE)v75);
                            HIBYTE(v95) = v21;
                            LOBYTE(v95) = 1u >> (8 * (_BYTE)v75);
                          }
                          int v22 = 0;
                          LODWORD(v75) = 0;
                          char v23 = v21;
                          char v24 = v21;
                          char v25 = v21;
                          uint64_t v74 = "";
                          break;
                        case 3:
                          if (v13 == 44)
                          {
                            int v14 = 2;
                            goto LABEL_131;
                          }
                          if (v13 != 93) {
                            goto LABEL_178;
                          }
LABEL_98:
                          int v14 = 4;
                          char v19 = 44;
                          LOBYTE(v13) = 93;
                          goto LABEL_132;
                        default:
                          goto LABEL_131;
                      }
                      do
                      {
LABEL_44:
                        if (v76 != v20)
                        {
                          int v70 = 11;
                          goto LABEL_168;
                        }
                        if ((_BYTE)v95)
                        {
                          char v26 = std::istream::get();
                          if ((*((unsigned char *)v77 + *(void *)(*v77 - 24) + 32) & 5) != 0)
                          {
                            LOBYTE(v21) = 0;
                          }
                          else
                          {
                            LOBYTE(v21) = v26;
                            ++v78;
                          }
                          HIBYTE(v95) = v21;
                          char v23 = v21;
                          char v24 = v21;
                          char v25 = v21;
                        }
                        LOBYTE(v95) = 1;
                        if (v25 < 0) {
                          int v27 = __maskrune(v25, 0x4000uLL);
                        }
                        else {
                          int v27 = *(_DWORD *)(v6 + 4 * v25 + 60) & 0x4000;
                        }
                      }
                      while (v27);
                      switch(v22)
                      {
                        case 0:
                          if (v21 != 123)
                          {
                            int v70 = 8;
                            goto LABEL_168;
                          }
                          int v22 = 1;
                          LOBYTE(v21) = 123;
                          char v23 = 123;
                          char v24 = 123;
                          char v25 = 123;
                          goto LABEL_44;
                        case 1:
                          if (v21 == 34) {
                            goto LABEL_74;
                          }
                          if (v21 == 125) {
                            goto LABEL_103;
                          }
LABEL_172:
                          int v70 = 1;
                          goto LABEL_168;
                        case 2:
                          if (v21 != 34) {
                            goto LABEL_172;
                          }
LABEL_74:
                          char v28 = operator new(0x28uLL);
                          void v28[2] = 0;
                          v28[3] = 0;
                          v28[4] = 0;
                          uint64_t v29 = v79[0];
                          *char v28 = v79[0];
                          v28[1] = v79;
                          *(void *)(v29 + 8) = v28;
                          v79[0] = (uint64_t)v28;
                          ++v80;
                          minijson::detail::read_quoted_string<minijson::istream_context>(&v75);
                          if (*(void *)(v79[0] + 16) == *(void *)(v79[0] + 24)) {
                            int v30 = 0;
                          }
                          else {
                            int v30 = *(char **)(v79[0] + 16);
                          }
                          uint64_t v74 = v30;
                          int v22 = 3;
                          goto LABEL_84;
                        case 3:
                          if (v23 != 58)
                          {
                            int v70 = 9;
                            goto LABEL_168;
                          }
                          int v22 = 4;
                          char v23 = 58;
                          char v24 = 58;
                          char v25 = 58;
                          goto LABEL_44;
                        case 4:
                          minijson::detail::parse_value_helper<minijson::istream_context>((uint64_t)&v92, (uint64_t)&v75, (unsigned char *)&v95 + 1, &v95);
                          if (!strcmp(v74, "source_clock_node_uid"))
                          {
                            AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                            unint64_t v31 = (std::string *)v90;
                          }
                          else
                          {
                            if (strcmp(v74, "destination_clock_node_uid"))
                            {
                              if (!strcmp(v74, "requires_resampler"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[0] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "requires_delay"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[1] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "requires_format_conversion"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[2] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "requires_drift_correction"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                v91[3] = v94 != 0;
                                goto LABEL_83;
                              }
                              if (!strcmp(v74, "resampler_type"))
                              {
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                                unsigned int v32 = std::string::basic_string[abi:ne180100]<0>(v96, v93);
                                *(_DWORD *)&v91[4] = AMCP::string_to_enum<AMCP::Resampler_Type>((uint64_t)v32);
                              }
                              else
                              {
                                if (strcmp(v74, "resampler_quality"))
                                {
                                  if (!strcmp(v74, "requires_channel_map"))
                                  {
                                    AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                    v91[12] = v94 != 0;
                                  }
                                  else if (!strcmp(v74, "requires_volume_processing"))
                                  {
                                    AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                    v91[13] = v94 != 0;
                                  }
                                  else if (!strcmp(v74, "requires_stereo_to_mono_mixdown"))
                                  {
                                    AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 2);
                                    v91[14] = v94 != 0;
                                  }
                                  goto LABEL_83;
                                }
                                AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                                unsigned int v33 = std::string::basic_string[abi:ne180100]<0>(v96, v93);
                                *(_DWORD *)&v91[8] = AMCP::string_to_enum<AMCP::Resampler_Quality>((uint64_t)v33);
                              }
                              if (v97 < 0) {
                                operator delete(v96[0]);
                              }
LABEL_83:
                              int v22 = 5;
LABEL_84:
                              LOBYTE(v21) = HIBYTE(v95);
                              char v23 = HIBYTE(v95);
                              char v24 = HIBYTE(v95);
                              char v25 = HIBYTE(v95);
                              if (!HIBYTE(v95))
                              {
                                char v69 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                                std::runtime_error::runtime_error(v69, "This line should never be reached, please file a bug report");
                                __cxa_throw(v69, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                              }
                              goto LABEL_44;
                            }
                            AMCP::require_type((AMCP::Log::Scope_Registry *)v92, 0);
                            unint64_t v31 = (std::string *)((char *)&v90[1] + 8);
                          }
                          std::string::__assign_external(v31, v93);
                          goto LABEL_83;
                        case 5:
                          if (v24 == 44)
                          {
                            int v22 = 2;
                            char v25 = v24;
                            goto LABEL_44;
                          }
                          if (v24 != 125)
                          {
                            int v70 = 10;
                            goto LABEL_168;
                          }
LABEL_103:
                          if (v76) {
                            --v76;
                          }
                          unint64_t v35 = *(void *)(v73 + 56);
                          unint64_t v34 = *(void *)(v73 + 64);
                          if (v35 >= v34)
                          {
                            uint64_t v39 = *(void *)(v73 + 48);
                            uint64_t v40 = (uint64_t)(v35 - v39) >> 6;
                            unint64_t v41 = v40 + 1;
                            if ((unint64_t)(v40 + 1) >> 58) {
                              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                            }
                            uint64_t v42 = v34 - v39;
                            if (v42 >> 5 > v41) {
                              unint64_t v41 = v42 >> 5;
                            }
                            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFC0) {
                              unint64_t v43 = 0x3FFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v43 = v41;
                            }
                            if (v43) {
                              unint64_t v43 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>>(v43);
                            }
                            else {
                              uint64_t v44 = 0;
                            }
                            unint64_t v45 = v43 + (v40 << 6);
                            long long v46 = v90[0];
                            *(void *)(v45 + 16) = *(void *)&v90[1];
                            *(_OWORD *)unint64_t v45 = v46;
                            memset(v90, 0, 24);
                            long long v47 = *(_OWORD *)((char *)&v90[1] + 8);
                            *(void *)(v45 + 40) = *((void *)&v90[2] + 1);
                            *(_OWORD *)(v45 + 24) = v47;
                            memset((char *)&v90[1] + 8, 0, 24);
                            uint64_t v48 = *(void *)v91;
                            *(void *)(v45 + 55) = *(void *)&v91[7];
                            *(void *)(v45 + 48) = v48;
                            if (v35 == v39)
                            {
                              int64x2_t v54 = vdupq_n_s64(v35);
                              unint64_t v49 = v43 + (v40 << 6);
                              int v53 = (void *)v73;
                            }
                            else
                            {
                              unint64_t v49 = v43 + (v40 << 6);
                              do
                              {
                                long long v50 = *(_OWORD *)(v35 - 64);
                                *(void *)(v49 - 48) = *(void *)(v35 - 48);
                                *(_OWORD *)(v49 - 64) = v50;
                                *(void *)(v35 - 56) = 0;
                                *(void *)(v35 - 48) = 0;
                                *(void *)(v35 - 64) = 0;
                                long long v51 = *(_OWORD *)(v35 - 40);
                                *(void *)(v49 - 24) = *(void *)(v35 - 24);
                                *(_OWORD *)(v49 - 40) = v51;
                                *(void *)(v35 - 32) = 0;
                                *(void *)(v35 - 24) = 0;
                                *(void *)(v35 - 40) = 0;
                                uint64_t v52 = *(void *)(v35 - 16);
                                *(void *)(v49 - 9) = *(void *)(v35 - 9);
                                *(void *)(v49 - 16) = v52;
                                v49 -= 64;
                                v35 -= 64;
                              }
                              while (v35 != v39);
                              int v53 = (void *)v73;
                              int64x2_t v54 = *(int64x2_t *)(v73 + 48);
                            }
                            unint64_t v55 = v45 + 64;
                            v53[6] = v49;
                            v53[7] = v45 + 64;
                            v53[8] = v43 + (v44 << 6);
                            uint64_t v57 = v54.i64[1];
                            uint64_t v56 = (void *)v54.i64[0];
                            while ((void *)v57 != v56)
                            {
                              v57 -= 64;
                              std::__destroy_at[abi:ne180100]<std::pair<std::string,std::string>,0>(v57);
                            }
                            if (v56) {
                              operator delete(v56);
                            }
                            int v58 = SHIBYTE(v90[2]);
                            *(void *)(v73 + 56) = v55;
                            if (v58 < 0) {
                              operator delete(*((void **)&v90[1] + 1));
                            }
                          }
                          else
                          {
                            long long v36 = v90[0];
                            *(void *)(v35 + 16) = *(void *)&v90[1];
                            *(_OWORD *)unint64_t v35 = v36;
                            memset(v90, 0, 24);
                            uint64_t v37 = *((void *)&v90[2] + 1);
                            *(_OWORD *)(v35 + 24) = *(_OWORD *)((char *)&v90[1] + 8);
                            *(void *)(v35 + 40) = v37;
                            memset((char *)&v90[1] + 8, 0, 24);
                            uint64_t v38 = *(void *)v91;
                            *(void *)(v35 + 55) = *(void *)&v91[7];
                            *(void *)(v35 + 48) = v38;
                            *(void *)(v73 + 56) = v35 + 64;
                          }
                          if (SBYTE7(v90[1]) < 0) {
                            operator delete(*(void **)&v90[0]);
                          }
                          int v14 = 3;
                          LOBYTE(v13) = v89;
LABEL_131:
                          char v19 = v13;
LABEL_132:
                          if (!v19)
                          {
LABEL_157:
                            uint64_t v62 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                            std::runtime_error::runtime_error(v62, "This line should never be reached, please file a bug report");
                            __cxa_throw(v62, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                          }
                          goto LABEL_25;
                        default:
                          goto LABEL_84;
                      }
                    }
                  }
                }
                if (v76) {
                  --v76;
                }
                int v5 = 5;
                goto LABEL_154;
              }
LABEL_181:
              exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
              void *exception = &unk_1F14850D8;
              int v65 = 12;
LABEL_164:
              uint64_t v66 = v78 - 1;
              if (!v78) {
                uint64_t v66 = 0;
              }
              exception[1] = v66;
              *((_DWORD *)exception + 4) = v65;
            }
            int v5 = 5;
LABEL_154:
            LOBYTE(v4) = v86;
            goto LABEL_155;
          case 5:
            if (v4 == 44)
            {
              int v5 = 2;
LABEL_155:
              char v11 = v4;
              goto LABEL_156;
            }
            if (v4 == 125)
            {
              int v5 = 6;
              char v11 = 44;
              LOBYTE(v4) = 125;
              goto LABEL_156;
            }
LABEL_178:
            exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
            void *exception = &unk_1F14850D8;
            int v65 = 10;
            goto LABEL_164;
          default:
            goto LABEL_154;
        }
      }
    }
  }
  if (v76) {
    --v76;
  }
  std::__list_imp<std::vector<char>>::clear(v79);
  v81[0] = *MEMORY[0x1E4FBA410];
  *(void *)((char *)v81 + *(void *)(v81[0] - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  v81[2] = MEMORY[0x1E4FBA470] + 16;
  if (v82 < 0) {
    operator delete((void *)v81[10]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  return MEMORY[0x1C1859700](&v83);
}

void sub_1BAF35918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  if (*(char *)(v41 - 193) < 0) {
    operator delete(*(void **)(v41 - 216));
  }
  if (*(char *)(v41 - 217) < 0) {
    operator delete(*(void **)(v41 - 240));
  }
  *(void *)(v41 - 104) = a13 + 48;
  std::vector<AMCP::Wire_Connection_Properties>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 104));
  *(void *)(v41 - 104) = a13 + 24;
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 104));
  *(void *)(v41 - 104) = a13;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)(v41 - 104));
  std::__list_imp<std::vector<char>>::clear(&a20);
  a23 = *MEMORY[0x1E4FBA410];
  *(uint64_t *)((char *)&a23 + *(void *)(a23 - 24)) = *(void *)(MEMORY[0x1E4FBA410] + 24);
  a25 = MEMORY[0x1E4FBA470] + 16;
  if (a38 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C1859700](&a41);
  _Unwind_Resume(a1);
}

void std::default_delete<HALS_IOProcessor_ProcessingManifest>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t HALS_IOProcessor_ProcessingManifest::ProcessingChain::append(uint64_t a1, _OWORD *a2)
{
  int v5 = *(_OWORD **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  if ((unint64_t)v5 >= v4)
  {
    int v7 = *(_OWORD **)a1;
    uint64_t v8 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - (void)v7;
    if (v10 >> 3 > v9) {
      unint64_t v9 = v10 >> 3;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    unsigned int v13 = &v12[16 * v8];
    *(_OWORD *)unsigned int v13 = *a2;
    uint64_t v6 = v13 + 16;
    if (v5 != v7)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *(v5 - 1);
        v13 -= 16;
        --v5;
      }
      while (v5 != v7);
      int v5 = *(_OWORD **)a1;
    }
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = &v12[16 * v11];
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int v5 = *a2;
    uint64_t v6 = v5 + 1;
  }
  *(void *)(a1 + 8) = v6;
  *(_DWORD *)(a1 + 24) |= *(_DWORD *)a2;
  return a1;
}

void AMCP::DSP_Node::~DSP_Node(AMCP::DSP_Node *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::DSP_Node *AMCP::DSP_Node::DSP_Node(AMCP::DSP_Node *this, AMCP::System_Context *a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v4 = AMCP::Node::Node(this, a2, a3);
  *(void *)unint64_t v4 = &unk_1F1485120;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x6473706E);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    int v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)unint64_t v11 = 2080;
      *(void *)&void v11[2] = "DSP_Node.cpp";
      __int16 v12 = 1024;
      int v13 = 19;
      __int16 v14 = 2080;
      int v15 = "constructed_correct_class(k_class_id_dsp_node)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAF35E64(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  unint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

AMCP::Object *AMCP::DSP_Node::DSP_Node(AMCP::Object *a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = *a3;
  *a3 = 0;
  AMCP::Node::Node((uint64_t)a1, a2, (uint64_t)&cf);
  if (cf) {
    CFRelease(cf);
  }
  *(void *)a1 = &unk_1F1485120;
  uint64_t v4 = AMCP::Object::constructed_correct_class(a1, (AMCP *)0x6473706E);
  if ((v4 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v4);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)unint64_t v11 = 2080;
      *(void *)&void v11[2] = "DSP_Node.cpp";
      __int16 v12 = 1024;
      int v13 = 26;
      __int16 v14 = 2080;
      int v15 = "constructed_correct_class(k_class_id_dsp_node)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAF35FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *uint64_t v10 = &unk_1F145F4E8;
  __int16 v12 = (std::__shared_weak_count *)v10[3];
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DSP_Node::get_tail_time_handler(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

uint64_t AMCP::DSP_Node::set_tail_time_handler()
{
  return 0;
}

uint64_t AMCP::DSP_Node::set_end_cycle_handler()
{
  return 0;
}

uint64_t AMCP::DSP_Node::set_begin_cycle_handler()
{
  return 0;
}

void HALS_Graph_Manager::get_clock_device_list(HALS_Graph_Manager *this@<X0>, uint64_t a2@<X8>)
{
  void v11[4] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 53);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  v11[0] = (void **)&unk_1F1485A08;
  void v11[3] = (void **)v11;
  AMCP::Core::Broker::fetch_cores_if (v9, v6, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v11);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v7 = (int **)v9[0];
  mach_port_t v8 = (int **)v9[1];
  v11[0] = (void **)a2;
  while (v7 != v8)
  {
    int v10 = **v7;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)v11, &v10);
    v7 += 2;
  }
  v11[0] = (void **)v9;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v11);
}

void sub_1BAF36240(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK18HALS_Graph_Manager21get_clock_device_listEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(*a2);

  return AMCP::is_base_of((AMCP *)0x61646576, simple_required);
}

void std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1485A08;
}

void *std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1485A08;
  return result;
}

void std::__function::__func<HALS_Graph_Manager::get_clock_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_clock_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void HALS_Graph_Manager::get_device_list(HALS_Graph_Manager *this@<X0>, uint64_t a2@<X8>)
{
  void v11[4] = *(void ***)MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 53);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  v11[0] = (void **)&unk_1F1485988;
  void v11[3] = (void **)v11;
  AMCP::Core::Broker::fetch_cores_if (v9, v6, (uint64_t)v11);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v11);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  int v7 = (int **)v9[0];
  mach_port_t v8 = (int **)v9[1];
  v11[0] = (void **)a2;
  while (v7 != v8)
  {
    int v10 = **v7;
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:ne180100]((uint64_t *)v11, &v10);
    v7 += 2;
  }
  v11[0] = (void **)v9;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](v11);
}

void sub_1BAF36470(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZNK18HALS_Graph_Manager15get_device_listEvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1668047219u>(*a2);

  return AMCP::is_base_of((AMCP *)0x61646576, simple_required);
}

void std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1485988;
}

void *std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = &unk_1F1485988;
  return result;
}

void std::__function::__func<HALS_Graph_Manager::get_device_list(void)::$_1,std::allocator<HALS_Graph_Manager::get_device_list(void)::$_1>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

AMCP::Utility::Dispatch_Queue *HALS_Graph_Manager::get_work_queue@<X0>(dispatch_object_t *this@<X0>, AMCP::Utility::Dispatch_Queue *a2@<X8>)
{
  return AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a2, this[55]);
}

void HALS_Graph_Manager::enqueue_config_change(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  queue[40] = *(dispatch_queue_t *)MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(a1 + 440));
  uint64_t v10 = a1;
  int v11 = a3;
  int v12 = a2;
  int v13 = a4;
  uint64_t v14 = a5;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN10applesauce8dispatch2v19sync_implIZN18HALS_Graph_Manager21enqueue_config_changeEjjjRKNSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke;
  block[3] = &__block_descriptor_tmp_199;
  block[4] = &v10;
  dispatch_sync(queue[0], block);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
}

void ___ZN10applesauce8dispatch2v19sync_implIZN18HALS_Graph_Manager21enqueue_config_changeEjjjRKNSt3__18functionIFvvEEEE3__0EEvP16dispatch_queue_sOT_NS4_17integral_constantIbLb1EEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)v1;
  memset(v11, 0, sizeof(v11));
  v10[0] = 0;
  v10[1] = 0;
  mach_port_t v9 = v10;
  AMCP::IO_Core::Graph_Manager::prepare_graph_for_config_change(__p, v2, *(_DWORD *)(v1 + 16), *(_DWORD *)(v1 + 8), v11, &v9);
  uint64_t v3 = *(void *)(*(void *)(v1 + 24) + 24);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 48))(v3);
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v6 = v7;
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v6, *(_DWORD *)(v1 + 12), *(_DWORD *)(v1 + 12));
    std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v6, *(_DWORD *)(v1 + 8), *(_DWORD *)(v1 + 8));
    uint64_t v4 = *(unsigned int *)(v1 + 8);
    std::set<unsigned int>::set[abi:ne180100](&v5, (uint64_t)&v6);
    AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(v2, v4, &v5, *(_DWORD *)(v1 + 16), (__int32 **)__p);
  }
  std::__throw_bad_function_call[abi:ne180100]();
}

void sub_1BAF367C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t *a12, void *a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a10);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a13);
  a12 = &a18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v18 - 72));
  std::string __p = (void *)(v18 - 56);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1BAF36870(_Unwind_Exception *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*v1);
  _Unwind_Resume(a1);
}

uint64_t HALS_Graph_Manager::get_graph_host@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 432);
  *a2 = *(void *)(this + 424);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void HALS_Graph_Manager::~HALS_Graph_Manager(HALS_Graph_Manager *this)
{
  *(void *)this = &unk_1F1485188;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Graph_Manager *)((char *)this + 440));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1485188;
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Graph_Manager *)((char *)this + 440));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);
}

AMCP::Log::Scope_Registry *HALS_IOContext_Manager_Graph_Host::simple_property_changed_async(AMCP::Log::Scope_Registry *this, unsigned int a2, const AMCP::Address *a3, const AMCP::Thing *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)a3 != 1718839674)
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v4 = **(NSObject ***)buf;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = pthread_self();
      mach_port_t v6 = pthread_mach_thread_np(v5);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v6;
      *(_WORD *)int v22 = 2080;
      *(void *)&unint64_t v22[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v23 = 1024;
      int v24 = 45;
      __int16 v25 = 2080;
      *(void *)char v26 = "not (in_changed_property.m_selector == k_iocontext_property_buffer_frame_size)";
      _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s simple_property_changed_async only supports changing buffer size", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v20);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"simple_property_changed_async only supports changing buffer size", (uint64_t)&v12);
    std::logic_error::logic_error(&v13, &v12);
    v13.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v14, &v13);
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    int v19 = -1;
    v14.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    int v15 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v14);
    *(void *)&v26[6] = "virtual void HALS_IOContext_Manager_Graph_Host::simple_property_changed_async(Object_ID, const "
                         "Address &, const Thing &)";
    int v27 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Impl.cpp";
    int v28 = 45;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v7);
    long long v10 = v7;
    uint64_t v11 = v8;
    long long v7 = 0uLL;
    uint64_t v8 = 0;
    mach_port_t v9 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return this;
}

void sub_1BAF36BE4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_IOContext_Manager_Graph_Host::create_manifest(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t HALS_IOContext_Manager_Graph_Host::get_current_power_state(HALS_IOContext_Manager_Graph_Host *this)
{
  return *(unsigned int *)(*(void *)(*((void *)this + 1) + 112) + 416);
}

uint64_t HALS_IOContext_Manager_Graph_Host::get_node_proc_owner(HALS_IOContext_Manager_Graph_Host *this)
{
  return *(void *)(*((void *)this + 1) + 112) + 8;
}

uint64_t HALS_IOContext_Manager_Graph_Host::get_broker(HALS_IOContext_Manager_Graph_Host *this)
{
  return *(void *)(*((void *)this + 1) + 96);
}

void HALS_IOContext_Manager_Graph_Host::~HALS_IOContext_Manager_Graph_Host(HALS_IOContext_Manager_Graph_Host *this)
{
}

uint64_t std::__shared_ptr_pointer<HALS_IOContext_Manager_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,HALS_IOContext_Manager_Graph_Host>,std::allocator<HALS_IOContext_Manager_Graph_Host>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__110shared_ptrIN4AMCP5Graph10Graph_HostEE27__shared_ptr_default_deleteIS3_33HALS_IOContext_Manager_Graph_HostEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<HALS_IOContext_Manager_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,HALS_IOContext_Manager_Graph_Host>,std::allocator<HALS_IOContext_Manager_Graph_Host>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<HALS_IOContext_Manager_Graph_Host *,std::shared_ptr<AMCP::Graph::Graph_Host>::__shared_ptr_default_delete<AMCP::Graph::Graph_Host,HALS_IOContext_Manager_Graph_Host>,std::allocator<HALS_IOContext_Manager_Graph_Host>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_emplace<HALS_Graph_Manager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<HALS_Graph_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14852E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<HALS_Graph_Manager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14852E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t *HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object(HALS_IOContext_Manager_Impl::Object_Map *this, unsigned int a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 8) != *((void *)this + 3))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v6, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = *v6;
    if (*(void *)v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v7);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      LODWORD(v6) = 67109890;
      HIDWORD(v6) = v5;
      *(_WORD *)long long v7 = 2080;
      *(void *)&void v7[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v8 = 1024;
      int v9 = 847;
      __int16 v10 = 2080;
      uint64_t v11 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&v6, 0x22u);
    }
    abort();
  }
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 5, a2);
  if (result) {
    return (uint64_t *)(*((unsigned int *)result + 5) | 0x100000000);
  }
  return result;
}

void HALS_IOContext_Manager_Impl::get_graph_builder()
{
}

void sub_1BAF36F44(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Impl::find_wires_for_context(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  mach_port_t v5 = *(AMCP::IO_Core::Graph_Manager **)(a2 + 112);
  char v6 = *(unsigned char *)(a3 + 23);
  if (v6 >= 0) {
    long long v7 = (const UInt8 *)a3;
  }
  else {
    long long v7 = *(const UInt8 **)a3;
  }
  if (v7)
  {
    if (v6 >= 0) {
      CFIndex v8 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      CFIndex v8 = *(void *)(a3 + 8);
    }
    cf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
    if (!cf.__r_.__value_.__r.__words[0])
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    cf.__r_.__value_.__r.__words[0] = 0;
  }
  uint64_t node_id = AMCP::IO_Core::Graph_Manager::get_node_id(v5, (const applesauce::CF::StringRef *)&cf);
  if (cf.__r_.__value_.__r.__words[0]) {
    CFRelease(cf.__r_.__value_.__l.__data_);
  }
  if ((node_id & 0xFF00000000) != 0)
  {
    AMCP::IO_Core::Graph_Manager::get_wires_for_node((AMCP::IO_Core::Graph_Manager *)&__p, *(void *)(a2 + 112), node_id);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    uint64_t v11 = v32;
    if (v32)
    {
      do
      {
        if (*((char *)v11 + 39) < 0) {
          std::string::__init_copy_ctor_external(&v40, (const std::string::value_type *)v11[2], v11[3]);
        }
        else {
          std::string v40 = *(std::string *)(v11 + 2);
        }
        unint64_t v41 = v11[5];
        LODWORD(v42) = *((_DWORD *)v11 + 12);
        if (*((char *)v11 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v39, (const std::string::value_type *)v11[7], v11[8]);
        }
        else {
          std::string v39 = *(std::string *)(v11 + 7);
        }
        std::string cf = v40;
        unint64_t v34 = v41;
        int v35 = (int)v42;
        std::string v36 = v39;
        int v38 = *((_DWORD *)v11 + 22);
        uint64_t v37 = v11[10];
        unint64_t v12 = a1[1];
        unint64_t v13 = a1[2];
        if (v12 >= v13)
        {
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - *a1) >> 4);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0x333333333333333) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - *a1) >> 4);
          if (2 * v21 > v20) {
            unint64_t v20 = 2 * v21;
          }
          if (v21 >= 0x199999999999999) {
            unint64_t v22 = 0x333333333333333;
          }
          else {
            unint64_t v22 = v20;
          }
          uint64_t v42 = a1 + 2;
          if (v22) {
            unint64_t v22 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<AMCP::Wire_Identifier>>(v22);
          }
          else {
            uint64_t v23 = 0;
          }
          std::string::size_type v24 = v22 + 80 * v19;
          v40.__r_.__value_.__r.__words[0] = v22;
          v40.__r_.__value_.__l.__size_ = v24;
          unint64_t v41 = v22 + 80 * v23;
          long long v25 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
          *(void *)(v24 + 16) = *((void *)&cf.__r_.__value_.__l + 2);
          *(_OWORD *)std::string::size_type v24 = v25;
          memset(&cf, 0, sizeof(cf));
          unint64_t v26 = v34;
          *(_DWORD *)(v24 + 32) = v35;
          *(void *)(v24 + 24) = v26;
          long long v27 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          *(void *)(v24 + 56) = *((void *)&v36.__r_.__value_.__l + 2);
          *(_OWORD *)(v24 + 40) = v27;
          memset(&v36, 0, sizeof(v36));
          uint64_t v28 = v37;
          *(_DWORD *)(v24 + 72) = v38;
          *(void *)(v24 + 64) = v28;
          v40.__r_.__value_.__r.__words[2] = v24 + 80;
          std::vector<AMCP::Wire_Identifier>::__swap_out_circular_buffer(a1, &v40);
          uint64_t v18 = a1[1];
          std::__split_buffer<AMCP::Wire_Identifier>::~__split_buffer((uint64_t)&v40);
        }
        else
        {
          long long v14 = *(_OWORD *)&cf.__r_.__value_.__l.__data_;
          *(void *)(v12 + 16) = *((void *)&cf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v12 = v14;
          memset(&cf, 0, sizeof(cf));
          int v15 = v35;
          *(void *)(v12 + 24) = v34;
          *(_DWORD *)(v12 + 32) = v15;
          std::string::size_type v16 = v36.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v12 + 40) = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
          *(void *)(v12 + 56) = v16;
          memset(&v36, 0, sizeof(v36));
          uint64_t v17 = v37;
          *(_DWORD *)(v12 + 72) = v38;
          *(void *)(v12 + 64) = v17;
          uint64_t v18 = v12 + 80;
          a1[1] = v12 + 80;
        }
        a1[1] = v18;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
      uint64_t v29 = v32;
    }
    else
    {
      uint64_t v29 = 0;
    }
    std::__hash_table<AMCP::Wire_Description,std::hash<AMCP::Wire_Description>,std::equal_to<AMCP::Wire_Description>,std::allocator<AMCP::Wire_Description>>::__deallocate_node(v29);
    int v30 = __p;
    std::string __p = 0;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_1BAF37320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  __cxa_free_exception(v26);
  _Unwind_Resume(a1);
}

void *HALS_IOContext_Manager_Impl::Object_Map::add_object(HALS_IOContext_Manager_Impl::Object_Map *this, unsigned int a2, unsigned int a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  unsigned int v15 = a3;
  unsigned int v16 = a2;
  if (*((void *)this + 8) != *((void *)this + 3))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v12 = **(NSObject ***)buf;
    if (*(void *)v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      unint64_t v13 = pthread_self();
      mach_port_t v14 = pthread_mach_thread_np(v13);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)uint64_t v18 = 2080;
      *(void *)&v18[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v19 = 1024;
      int v20 = 796;
      __int16 v21 = 2080;
      unint64_t v22 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
      _os_log_error_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  char v6 = (float *)((char *)this + 40);
  long long v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(this, a2);
  if (v7)
  {
    unsigned int v8 = *((_DWORD *)v7 + 5);
    unsigned int v9 = a2;
LABEL_6:
    HALS_IOContext_Manager_Impl::Object_Map::remove_object(this, v9, v8);
    goto LABEL_7;
  }
  __int16 v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, a3);
  if (v10)
  {
    unsigned int v9 = *((_DWORD *)v10 + 5);
    unsigned int v8 = a3;
    goto LABEL_6;
  }
LABEL_7:
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((float *)this, a2, &v16)+ 5) = a3;
  uint64_t result = std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v6, a3, &v15);
  *((_DWORD *)result + 5) = a2;
  return result;
}

void HALS_IOContext_Manager_Impl::Object_Map::remove_object(HALS_IOContext_Manager_Impl::Object_Map *this, unsigned int a2, unsigned int a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 8) != *((void *)this + 3))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = *v21;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      unsigned int v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      LODWORD(v21) = 67109890;
      HIDWORD(v21) = v16;
      *(_WORD *)unint64_t v22 = 2080;
      *(void *)&unint64_t v22[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v23 = 1024;
      int v24 = 821;
      __int16 v25 = 2080;
      unint64_t v26 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
      mach_port_t v14 = "%6u %32s:%-5d Assertion Failed: %s ";
      goto LABEL_20;
    }
LABEL_21:
    abort();
  }
  char v6 = (void *)((char *)this + 40);
  long long v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(this, a2);
  unsigned int v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, a3);
  unsigned int v9 = v8;
  if (v7)
  {
    if (*((_DWORD *)v8 + 5) != a2 || *((_DWORD *)v7 + 5) != a3)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
      uint64_t v11 = *v21;
      if (*(void *)v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        __int16 v19 = pthread_self();
        mach_port_t v20 = pthread_mach_thread_np(v19);
        LODWORD(v21) = 67109890;
        HIDWORD(v21) = v20;
        *(_WORD *)unint64_t v22 = 2080;
        *(void *)&unint64_t v22[2] = "HALS_IOContext_Manager_Impl.cpp";
        __int16 v23 = 1024;
        int v24 = 838;
        __int16 v25 = 2080;
        unint64_t v26 = "false";
        mach_port_t v14 = "%6u %32s:%-5d Assertion Failed: %s Invalid state in Object_Map";
        goto LABEL_20;
      }
      goto LABEL_21;
    }
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(this, v7);
    std::__hash_table<unsigned int,std::hash<unsigned int>,std::equal_to<unsigned int>,std::allocator<unsigned int>>::erase(v6, v9);
    if (*((void *)this + 8) != *((void *)this + 3))
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
      uint64_t v11 = *v21;
      if (*(void *)v22) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        unint64_t v12 = pthread_self();
        mach_port_t v13 = pthread_mach_thread_np(v12);
        LODWORD(v21) = 67109890;
        HIDWORD(v21) = v13;
        *(_WORD *)unint64_t v22 = 2080;
        *(void *)&unint64_t v22[2] = "HALS_IOContext_Manager_Impl.cpp";
        __int16 v23 = 1024;
        int v24 = 840;
        __int16 v25 = 2080;
        unint64_t v26 = "m_hal_object_to_mcp_object_map.size() == m_mcp_object_to_hal_object_map.size()";
        mach_port_t v14 = "%6u %32s:%-5d Assertion Failed: %s ";
LABEL_20:
        _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v21, 0x22u);
        goto LABEL_21;
      }
      goto LABEL_21;
    }
  }
  else if (v8)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v21, "com.apple.coreaudio", "AMCP");
    uint64_t v11 = *v21;
    if (*(void *)v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      LODWORD(v21) = 67109890;
      HIDWORD(v21) = v18;
      *(_WORD *)unint64_t v22 = 2080;
      *(void *)&unint64_t v22[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v23 = 1024;
      int v24 = 827;
      __int16 v25 = 2080;
      unint64_t v26 = "hal_found == m_hal_object_to_mcp_object_map.end()";
      mach_port_t v14 = "%6u %32s:%-5d Assertion Failed: %s Invalid state in Object_Map";
      goto LABEL_20;
    }
    goto LABEL_21;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(float *a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    unsigned int v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      __int16 v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (*((_DWORD *)v10 + 4) == a2) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          __int16 v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  __int16 v10 = operator new(0x18uLL);
  *__int16 v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = 0;
  float v12 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v13 = a1[8];
  if (v7 && (float)(v13 * (float)v7) >= v12)
  {
    unint64_t v6 = v3;
    goto LABEL_64;
  }
  BOOL v14 = 1;
  if (v7 >= 3) {
    BOOL v14 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v15 = v14 | (2 * v7);
  unint64_t v16 = vcvtps_u32_f32(v12 / v13);
  if (v15 <= v16) {
    int8x8_t prime = (int8x8_t)v16;
  }
  else {
    int8x8_t prime = (int8x8_t)v15;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (*(void *)&prime <= v7)
  {
    if (*(void *)&prime >= v7) {
      goto LABEL_60;
    }
    unint64_t v24 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
    if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
    {
      unint64_t v24 = std::__next_prime(v24);
    }
    else
    {
      uint64_t v26 = 1 << -(char)__clz(v24 - 1);
      if (v24 >= 2) {
        unint64_t v24 = v26;
      }
    }
    if (*(void *)&prime <= v24) {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime >= v7)
    {
      unint64_t v7 = *((void *)a1 + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      unsigned int v33 = *(void **)a1;
      *(void *)a1 = 0;
      if (v33) {
        operator delete(v33);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  mach_port_t v18 = operator new(8 * *(void *)&prime);
  __int16 v19 = *(void **)a1;
  *(void *)a1 = v18;
  if (v19) {
    operator delete(v19);
  }
  uint64_t v20 = 0;
  *((int8x8_t *)a1 + 1) = prime;
  do
    *(void *)(*(void *)a1 + 8 * v20++) = 0;
  while (*(void *)&prime != v20);
  __int16 v21 = (void *)*((void *)a1 + 2);
  if (v21)
  {
    unint64_t v22 = v21[1];
    uint8x8_t v23 = (uint8x8_t)vcnt_s8(prime);
    v23.i16[0] = vaddlv_u8(v23);
    if (v23.u32[0] > 1uLL)
    {
      if (v22 >= *(void *)&prime) {
        v22 %= *(void *)&prime;
      }
    }
    else
    {
      v22 &= *(void *)&prime - 1;
    }
    *(void *)(*(void *)a1 + 8 * v22) = a1 + 4;
    uint64_t v27 = (void *)*v21;
    if (*v21)
    {
      do
      {
        unint64_t v28 = v27[1];
        if (v23.u32[0] > 1uLL)
        {
          if (v28 >= *(void *)&prime) {
            v28 %= *(void *)&prime;
          }
        }
        else
        {
          v28 &= *(void *)&prime - 1;
        }
        if (v28 != v22)
        {
          if (!*(void *)(*(void *)a1 + 8 * v28))
          {
            *(void *)(*(void *)a1 + 8 * v28) = v21;
            goto LABEL_56;
          }
          *__int16 v21 = *v27;
          *uint64_t v27 = **(void **)(*(void *)a1 + 8 * v28);
          **(void **)(*(void *)a1 + 8 * v28) = v27;
          uint64_t v27 = v21;
        }
        unint64_t v28 = v22;
LABEL_56:
        __int16 v21 = v27;
        uint64_t v27 = (void *)*v27;
        unint64_t v22 = v28;
      }
      while (v27);
    }
  }
  unint64_t v7 = (unint64_t)prime;
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v6) {
      v6 %= v7;
    }
  }
  else
  {
    unint64_t v6 = (v7 - 1) & v6;
  }
LABEL_64:
  uint64_t v29 = *(void **)a1;
  int v30 = *(void **)(*(void *)a1 + 8 * v6);
  if (v30)
  {
    *__int16 v10 = *v30;
LABEL_72:
    *int v30 = v10;
    goto LABEL_73;
  }
  *__int16 v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v29[v6] = a1 + 4;
  if (*v10)
  {
    unint64_t v31 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v31 >= v7) {
        v31 %= v7;
      }
    }
    else
    {
      v31 &= v7 - 1;
    }
    int v30 = (void *)(*(void *)a1 + 8 * v31);
    goto LABEL_72;
  }
LABEL_73:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_1BAF37C58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl37create_context_core_for_hal_object_idEjjN10applesauce2CF13DictionaryRefERN4AMCP16Node_DescriptionERKNSt3__15arrayIjLm2EEERKNS6_6vectorIbNS6_9allocatorIbEEEESG_E3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  unint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(*(void **)(a1 + 8), *a2);
  if (v3) {
    uint64_t v4 = (HALS_ObjectMap *)*((unsigned int *)v3 + 5);
  }
  else {
    uint64_t v4 = 0;
  }
  mach_port_t v5 = (HALS_ObjectMap *)*(unsigned int *)(a1 + 20);
  unint64_t v6 = (std::__shared_mutex_base **)HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)(a1 + 16));
  unint64_t v7 = (int *)HALS_ObjectMap::CopyObjectByObjectID(v5);
  uint8x8_t v8 = (HALS_ObjectMap *)HALS_ObjectMap::CopyObjectByObjectID(v4);
  __int16 v10 = v8;
  if (v8)
  {
    BOOL ReferenceStreamStateForClient = 1;
    if (*((unsigned char *)v8 + 52) && v7 && HALS_Stream::IsReferenceStream(v8)) {
      BOOL ReferenceStreamStateForClient = HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(v6[55], v7[4]);
    }
  }
  else
  {
    BOOL ReferenceStreamStateForClient = 0;
  }
  HALS_ObjectMap::ReleaseObject(v10, v9);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v7, v12);
  HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v6, v13);
  return ReferenceStreamStateForClient;
}

void sub_1BAF37D70(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v4, a2);
  HALS_ObjectMap::ReleaseObject(v3, v6);
  HALS_ObjectMap::ReleaseObject(v2, v7);
  _Unwind_Resume(a1);
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1485330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F1485330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_context_core_for_hal_object_id(unsigned int,unsigned int,applesauce::CF::DictionaryRef,AMCP::Node_Description &,std::array<unsigned int,2ul> const&,std::vector<BOOL> const&,std::vector<BOOL> const&)::$_0>,BOOL ()(unsigned int)>::~__func()
{
}

void ___ZN27HALS_IOContext_Manager_Impl38destroy_context_core_for_hal_object_idEj_block_invoke(void *a1)
{
  *(void *)&long long v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a1[4];
  uint64_t v2 = (AMCP::Address *)a1[5];
  if (v2)
  {
    __p[0] = (void *)0x676C6F6270617573;
    LODWORD(__p[1]) = 0;
    AMCP::Core::Core::call_operation_function<void,AMCP::Pause_Behavior>(v2, (unsigned int *)__p, 1);
  }
  CFStringRef v4 = (const __CFString *)a1[7];
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v4);
  HALS_IOContext_Manager_Impl::find_wires_for_context(&v17, v3, (uint64_t)__p);
  if (SBYTE7(v14[0]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = *(void *)(v3 + 112);
  memset(v14, 0, sizeof(v14));
  *(_OWORD *)std::string __p = 0u;
  CFStringRef v6 = (const __CFString *)a1[7];
  if (!v6)
  {
    uint8x8_t v8 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v8, "Could not construct");
    __cxa_throw(v8, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&v21, v6);
  unsigned int v9 = 0;
  __int16 v10 = 0;
  p_int data = 0;
  __int16 v19 = (void **)&v9;
  char v20 = 0;
  unsigned int v9 = (std::string *)operator new(0x18uLL);
  __int16 v10 = v9;
  p_int data = (void **)&v9[1].__r_.__value_.__l.__data_;
  __int16 v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, &v21, &v23, v9);
  memset(v12, 0, sizeof(v12));
  std::vector<AMCP::Wire_Identifier>::__init_with_size[abi:ne180100]<AMCP::Wire_Identifier*,AMCP::Wire_Identifier*>(v12, v17, v18, 0xCCCCCCCCCCCCCCCDLL * ((v18 - v17) >> 4));
  AMCP::IO_Core::Graph_Manager::modify_graph(v15, v5, (uint64_t)__p, (uint64_t)&v9);
  __int16 v19 = v12;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100](&v19);
  __int16 v19 = (void **)&v9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v22 < 0) {
    operator delete((void *)v21);
  }
  unsigned int v9 = (std::string *)((char *)v14 + 8);
  std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  unsigned int v9 = (std::string *)__p;
  std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)&v9);
  if (v16 && v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  __p[0] = &v17;
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1BAF38094(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  __cxa_free_exception(v20);
  AMCP::Graph_Description::~Graph_Description(&__p);
  std::string __p = (void *)(v21 - 104);
  std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIN4AMCP4Core4CoreEEE56c31_ZTSN10applesauce2CF9StringRefE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void *__copy_helper_block_e8_40c43_ZTSNSt3__110shared_ptrIN4AMCP4Core4CoreEEE56c31_ZTSN10applesauce2CF9StringRefE(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 48);
  result[5] = *(void *)(a2 + 40);
  result[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 56);
  if (v4) {
    __n128 result = CFRetain(*(CFTypeRef *)(a2 + 56));
  }
  v2[7] = v4;
  return result;
}

unint64_t HALS_IOContext_Manager_Impl::demand_driver_object_for_id(std::__shared_mutex_base **this, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (HALS_IOContext_Manager_Impl::Object_Map *)(this + 2);
  mcp_io_object_t object = (unint64_t)HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(this + 2), a2);
  if (!HIDWORD(mcp_object))
  {
    mcp_io_object_t object = AMCP::Core::Broker::reserve_id(this[12]);
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)unint64_t v15 = 0u;
    int v16 = 1065353216;
    LODWORD(v12) = mcp_object;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v12, 1.58366009e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
    if (*(void *)v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
    }
    LODWORD(v12) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v12, 1.58366006e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
    if (*(void *)v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
    }
    LODWORD(v12) = 1634757735;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v12, 1.58366007e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
    if (*(void *)v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
    }
    LODWORD(v12) = 1;
    AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v12, 1.58366011e190);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
    if (*(void *)v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
    }
    AMCP::Core::Broker::destroy_core(this[12], mcp_object);
    core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core(&v12, this[12], (uint64_t)__p, mcp_object);
    if (!v12)
    {
      AMCP::Log::Scope_Registry::get(core);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unsigned int v9 = **(NSObject ***)buf;
      if (*(void *)v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        __int16 v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)__CFString buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)uint64_t v18 = 2080;
        *(void *)&v18[2] = "HALS_IOContext_Manager_Impl.cpp";
        __int16 v19 = 1024;
        int v20 = 312;
        __int16 v21 = 2080;
        char v22 = "core_ptr.operator BOOL() == true";
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", buf, 0x22u);
      }
      abort();
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node((void *)v15[0]);
    unint64_t v7 = __p[0];
    __p[0] = 0;
    if (v7) {
      operator delete(v7);
    }
    HALS_IOContext_Manager_Impl::Object_Map::add_object(v4, mcp_object, a2);
  }
  return mcp_object;
}

void sub_1BAF38490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(a13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl20create_device_objectEjjN10applesauce2CF9StringRefERKNSt3__16vectorINS_11Stream_InfoENS3_9allocatorIS5_EEEEbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::operator()@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 16);
  *a2 = *(void *)(result + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F1485598;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = &unk_1F1485598;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1485598;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::create_device_object(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1485598;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void HALS_IOContext_Manager_Impl::create_stream_info_for_device(HALS_IOContext_Manager_Impl *this, const HALS_IODevice *a2)
{
  unint64_t v25 = 0;
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  __int16 v27 = 1;
  do
  {
    char v7 = v5;
    int v26 = *((unsigned __int8 *)&v27 + v6);
    int NumberStreams = HALS_IODevice::GetNumberStreams(a2, *((unsigned char *)&v27 + v6));
    char v23 = v7;
    if (NumberStreams)
    {
      for (int i = 0; i != NumberStreams; ++i)
      {
        __int16 v10 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(a2, v26 != 0, i);
        float v12 = v10;
        if (v10)
        {
          int v13 = *((_DWORD *)v10 + 4);
          int v14 = (*(uint64_t (**)(HALS_Stream *))(*(void *)v10 + 200))(v10);
          IsReferenceStreaunint64_t m = HALS_Stream::IsReferenceStream(v12);
          BOOL v16 = IsReferenceStream;
          if ((unint64_t)v4 >= v25)
          {
            uint64_t v18 = (uint64_t)((uint64_t)v4 - v3) >> 4;
            unint64_t v19 = v18 + 1;
            if ((unint64_t)(v18 + 1) >> 60) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            if ((uint64_t)(v25 - v3) >> 3 > v19) {
              unint64_t v19 = (uint64_t)(v25 - v3) >> 3;
            }
            if (v25 - v3 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              unint64_t v20 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v20);
            }
            else {
              mach_port_t v11 = 0;
            }
            unint64_t v21 = v20 + 16 * v18;
            *(_DWORD *)unint64_t v21 = v13;
            *(_DWORD *)(v21 + 4) = v26;
            *(_DWORD *)(v21 + 8) = v14;
            *(unsigned char *)(v21 + 12) = v16;
            char v22 = *(_DWORD **)this;
            unint64_t v3 = v21;
            if (v4 != *(_DWORD **)this)
            {
              do
              {
                *(_OWORD *)(v3 - 16) = *((_OWORD *)v4 - 1);
                v3 -= 16;
                v4 -= 4;
              }
              while (v4 != v22);
              uint64_t v4 = *(_DWORD **)this;
            }
            uint64_t v17 = (_DWORD *)(v21 + 16);
            *(void *)this = v3;
            *((void *)this + 1) = v21 + 16;
            unint64_t v25 = v20 + 16 * (void)v11;
            *((void *)this + 2) = v25;
            if (v4) {
              operator delete(v4);
            }
          }
          else
          {
            *uint64_t v4 = v13;
            v4[1] = v26;
            v4[2] = v14;
            uint64_t v17 = v4 + 4;
            *((unsigned char *)v4 + 12) = IsReferenceStream;
          }
          *((void *)this + 1) = v17;
          uint64_t v4 = v17;
        }
        HALS_ObjectMap::ReleaseObject(v12, v11);
      }
    }
    char v5 = 1;
    uint64_t v6 = 1;
  }
  while ((v23 & 1) == 0);
}

void sub_1BAF388E8(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Manager_Impl::device_arrived(uint64_t a1, unsigned int a2, unsigned int a3, const __CFString **a4, uint64_t a5, char a6)
{
  v40[2] = *MEMORY[0x1E4F143B8];
  unsigned int v34 = a3;
  unsigned int v35 = a2;
  float v12 = (std::mutex *)(a1 + 168);
  std::mutex::lock((std::mutex *)(a1 + 168));
  AMCP::Log::Scope_Registry::get(v13);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  int v14 = **(NSObject ***)buf;
  if (*(void *)v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v37);
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
  {
    unint64_t v25 = pthread_self();
    mach_port_t v26 = pthread_mach_thread_np(v25);
    if (!*a4)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mach_port_t v27 = v26;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, *a4);
    if (SHIBYTE(v33) >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)__CFString buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v27;
    *(_WORD *)uint64_t v37 = 2080;
    *(void *)&v37[2] = "HALS_IOContext_Manager_Impl.cpp";
    __int16 v38 = 1024;
    int v39 = 465;
    LOWORD(v40[0]) = 2080;
    *(void *)((char *)v40 + 2) = p_p;
    _os_log_debug_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d device_arrived: %s", buf, 0x22u);
    if (SHIBYTE(v33) < 0) {
      operator delete(__p);
    }
  }
  std::string __p = 0;
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unint64_t v15 = *(const void **)a5;
  int64_t v16 = *(void *)(a5 + 8) - *(void *)a5;
  if (v16)
  {
    if (v16 < 0) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v16 >> 4);
    std::string __p = v17;
    unsigned int v33 = &v17[16 * v18];
    memmove(v17, v15, v16);
    unsigned int v32 = &v17[16 * (v16 >> 4)];
  }
  int v19 = HALS_IOContext_Manager_Impl::demand_driver_object_for_id((std::__shared_mutex_base **)a1, a3);
  mcp_io_object_t object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(a1 + 16), a2);
  if ((unint64_t)mcp_object <= 0x100000000) {
    int v21 = 0;
  }
  else {
    int v21 = (int)mcp_object;
  }
  uint64_t v22 = *(void *)(a1 + 112);
  *(void *)&long long v30 = a1;
  *((void *)&v30 + 1) = &v35;
  CFStringRef v23 = *a4;
  if (v23) {
    CFRetain(v23);
  }
  unint64_t v24 = (char *)operator new(0x38uLL);
  *(void *)unint64_t v24 = &unk_1F1485728;
  *(_OWORD *)(v24 + 8) = v30;
  *((void *)v24 + 3) = &v34;
  *((void *)v24 + 4) = v23;
  *((void *)v24 + 5) = &__p;
  v24[48] = a6;
  v40[0] = v24;
  HALS_Graph_Manager::enqueue_config_change(v22, v19, v21, 1, (uint64_t)buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  HALS_IOContext_Manager_Impl::garbage_collect((HALS_IOContext_Manager_Impl *)a1);
  if (__p)
  {
    unsigned int v32 = (char *)__p;
    operator delete(__p);
  }
  std::mutex::unlock(v12);
}

void sub_1BAF38C10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  __cxa_free_exception(v17);
  std::mutex::unlock(v16);
  _Unwind_Resume(a1);
}

void HALS_IOContext_Manager_Impl::garbage_collect(HALS_IOContext_Manager_Impl *this)
{
  v9[4] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_mutex_base *)*((void *)this + 12);
  v9[0] = &unk_1F1485828;
  void v9[3] = v9;
  AMCP::Core::Broker::fetch_object_ids_if (&v8, v2, (uint64_t)v9);
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](v9);
  begiuint64_t n = v8.__begin_;
  std::vector<unsigned int>::pointer end = v8.__end_;
  if (v8.__begin_ != v8.__end_)
  {
    char v5 = v8.__begin_;
    do
    {
      uint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 2, *v5);
      if (v6)
      {
        unsigned int v7 = *((_DWORD *)v6 + 5);
        if ((HALS_ObjectMap::IsObjectMapped(v7) & 1) == 0)
        {
          HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl *)((char *)this + 16), *v5, v7);
          AMCP::Core::Broker::destroy_core(*((std::__shared_mutex_base **)this + 12), *v5);
          if (std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 16, v7))
          {
            HALS_IOContext_Manager_Impl::destroy_engine_for_device(this, v7);
          }
        }
      }
      ++v5;
    }
    while (v5 != end);
  }
  if (begin) {
    operator delete(begin);
  }
}

void sub_1BAF38DA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void HALS_IOContext_Manager_Impl::destroy_engine_for_device(HALS_IOContext_Manager_Impl *this, unsigned int a2)
{
  uint64_t v2 = (void *)((char *)this + 128);
  unint64_t v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 16, a2);
  if (v3)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<AMCP::Core::Engine>>>>::erase(v2, v3);
  }
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl15garbage_collectEvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v2 = *a2;
  uint64_t v5 = 0x676C6F6262636C73;
  int v6 = 0;
  unsigned int v3 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v2, (const AMCP::Address *)&v5, &AMCP::k_class_id_unknown);
  return AMCP::is_base_of((AMCP *)0x696F636E, v3) ^ 1;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1485828;
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1485828;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0,std::allocator<HALS_IOContext_Manager_Impl::garbage_collect(void)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl14device_arrivedEjjN10applesauce2CF9StringRefERKNSt3__16vectorINS_11Stream_InfoENS3_9allocatorIS5_EEEEbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 8);
  unsigned int v3 = **(_DWORD **)(a1 + 16);
  CFStringRef v4 = *(const __CFString **)(a1 + 32);
  unsigned int v5 = **(_DWORD **)(a1 + 24);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a1 + 32));
  }
  CFStringRef v52 = v4;
  int v6 = *(uint64_t **)(a1 + 40);
  int v7 = *(unsigned __int8 *)(a1 + 48);
  mcp_io_object_t object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v3);
  unsigned int v9 = mcp_object;
  if ((unint64_t)mcp_object >> 32)
  {
    __int16 v10 = *(std::__shared_mutex_base **)(v2 + 96);
    long long v64 = 0uLL;
    uint64_t v63 = 0;
    mach_port_t v11 = operator new(4uLL);
    _DWORD *v11 = v9;
    *(void *)&uint8_t buf[8] = v11 + 1;
    *(void *)&buf[16] = v11 + 1;
    *(void *)__CFString buf = v11;
    AMCP::Core::Broker::gather_directly_owned_objects((std::vector<unsigned int> *)__p, v10, (unsigned int **)buf);
    operator delete(v11);
    float v12 = *(unsigned int **)__p;
    int v13 = *(unsigned int **)&__p[8];
    if (*(void *)__p != *(void *)&__p[8])
    {
      do
      {
        AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)buf, v10, *v12);
        if (*(void *)buf) {
          std::vector<std::shared_ptr<AMCP::Meta::Stream>>::push_back[abi:ne180100]((uint64_t)&v63, (long long *)buf);
        }
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        ++v12;
      }
      while (v12 != v13);
      float v12 = *(unsigned int **)__p;
    }
    if (v12)
    {
      *(void *)&__p[8] = v12;
      operator delete(v12);
    }
    int v14 = (unsigned int **)v63;
    unint64_t v15 = (unsigned int **)v64;
    while (v14 != v15)
    {
      unsigned int v16 = **v14;
      uint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v2 + 16), v16);
      if (v17) {
        unsigned int v18 = *((_DWORD *)v17 + 5);
      }
      else {
        unsigned int v18 = 0;
      }
      HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v16, v18);
      AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), v16);
      v14 += 2;
    }
    *(void *)std::string __p = &v63;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), v9);
    HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v9, v3);
  }
  unsigned int v19 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(v2 + 96));
  unint64_t v20 = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v5);
  int v21 = (int)v20;
  if (!((unint64_t)v20 >> 32))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    unint64_t v45 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      long long v46 = pthread_self();
      mach_port_t v47 = pthread_mach_thread_np(v46);
      *(_DWORD *)std::string __p = 67109890;
      *(_DWORD *)&__p[4] = v47;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "HALS_IOContext_Manager_Impl.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 373;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "not (owner_id)";
      _os_log_error_impl(&dword_1BAA78000, v45, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", __p, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v57);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v55);
    std::logic_error::logic_error(&v56, &v55);
    v56.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)buf, &v56);
    *(void *)&buf[24] = 0;
    *(void *)&buf[32] = 0;
    uint64_t v59 = 0;
    int v60 = -1;
    *(void *)__CFString buf = &unk_1F1489CC8;
    *(void *)&buf[16] = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)__p, (uint64_t)buf);
    *(void *)&__p[32] = "void HALS_IOContext_Manager_Impl::create_device_object(AudioObjectID, AudioObjectID, CF::Strin"
                          "g, const std::vector<Stream_Info> &, BOOL)";
    *(void *)&__p[40] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/IO/HALS_IOContext_Manager_Impl.cpp";
    int v62 = 373;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v53);
    long long v64 = v53;
    uint64_t v63 = (uint64_t)&unk_1F148AA90;
    int v65 = v54;
    long long v53 = 0uLL;
    int64x2_t v54 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v22 = *v6;
  uint64_t v23 = v6[1];
  if (*v6 != v23)
  {
    do
    {
      unsigned int v24 = AMCP::Core::Broker::reserve_id(*(std::__shared_mutex_base **)(v2 + 96));
      memset(__p, 0, 32);
      *(_DWORD *)&__p[32] = 1065353216;
      LODWORD(v63) = v24;
      AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366009e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v63) = 1634956402;
      AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366006e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v63) = 1634956402;
      AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366007e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v63) = v19;
      AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366011e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v63) = *(_DWORD *)(v22 + 8);
      AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366012e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v63) = *(_DWORD *)(v22 + 4);
      AMCP::Core::Operation_Utilities::make_typed_property<AMCP::Direction,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<AMCP::Direction>(AMCP::Address const&,AMCP::Direction const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366012e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      LODWORD(v63) = *(unsigned __int8 *)(v22 + 12);
      AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)buf, 0, (int *)&v63, 1.58366012e190);
      std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)__p, (unsigned int *)(*(void *)buf + 40), buf);
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(v2 + 96), v24);
      core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core((AMCP::Core::Core **)&v63, *(std::__shared_mutex_base **)(v2 + 96), (uint64_t)__p, v24);
      if (!v63)
      {
        AMCP::Log::Scope_Registry::get(core);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v42 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
        {
          unint64_t v43 = pthread_self();
          mach_port_t v44 = pthread_mach_thread_np(v43);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v44;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_IOContext_Manager_Impl.cpp";
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = 336;
          *(_WORD *)&buf[24] = 2080;
          *(void *)&buf[26] = "core_ptr.operator BOOL() == true";
          _os_log_error_impl(&dword_1BAA78000, v42, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", buf, 0x22u);
        }
        abort();
      }
      HALS_IOContext_Manager_Impl::Object_Map::add_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v24, *(_DWORD *)v22);
      if ((void)v64) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
      }
      std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&__p[16]);
      mach_port_t v26 = *(void **)__p;
      *(void *)std::string __p = 0;
      if (v26) {
        operator delete(v26);
      }
      v22 += 16;
    }
    while (v22 != v23);
  }
  memset(buf, 0, 32);
  *(_DWORD *)&buf[32] = 1065353216;
  mach_port_t v27 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(v2 + 128), v3);
  if (v27)
  {
    unint64_t v28 = v27;
    std::allocate_shared[abi:ne180100]<AMCP::Core::Operation,std::allocator<AMCP::Core::Operation>,AMCP::Address,void>((uint64_t *)&v55, 0, 1.58366007e190);
    uint64_t v29 = v55.__r_.__value_.__r.__words[0];
    uint64_t v31 = v28[3];
    uint64_t v30 = v28[4];
    if (v30) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v32 = AMCP::Implementation::get_type_marker<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>();
    uint64_t v63 = (uint64_t)&unk_1F1485598;
    *(void *)&long long v64 = v31;
    *((void *)&v64 + 1) = v30;
    int v65 = &v63;
    memset(__p, 0, 40);
    std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::__value_func[abi:ne180100]((uint64_t)__p, (uint64_t)&v63);
    *(void *)&__p[32] = AMCP::Implementation::In_Place_Storage<std::function<std::shared_ptr<AMCP::Core::Engine> ()(void)>>::dispatch;
    std::unordered_map<AMCP::Type_ID,AMCP::Thing,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,std::allocator<std::pair<AMCP::Type_ID const,AMCP::Thing>>>::insert_or_assign[abi:ne180100]<AMCP::Thing>(v29, v32, (AMCP *)__p);
    if (*(void *)&__p[32]) {
      (*(void (**)(void, unsigned char *, void, void))&__p[32])(0, __p, 0, 0);
    }
    std::__function::__value_func<std::shared_ptr<AMCP::Core::Engine> ()(void)>::~__value_func[abi:ne180100](&v63);
    std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v29 + 40), &v55);
    if (v55.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55.__r_.__value_.__l.__size_);
    }
  }
  LODWORD(v63) = v19;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v63, 1.58366009e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  if (v7) {
    int v33 = 1633773415;
  }
  else {
    int v33 = 1633969526;
  }
  LODWORD(v63) = v33;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v63, 1.58366006e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  LODWORD(v63) = v33;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v63, 1.58366007e190);
  CFStringRef v34 = v52;
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  LODWORD(v63) = v21;
  AMCP::Core::Operation_Utilities::make_typed_property<unsigned int,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_constant_property<unsigned int>(AMCP::Address const&,unsigned int const&)::{lambda(void)#1}>((uint64_t *)__p, 0, (int *)&v63, 1.58366011e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  uint64_t v63 = 0x676C6F626C6E616DLL;
  LODWORD(v64) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v63, v52);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  uint64_t v63 = 0x676C6F6275696420;
  LODWORD(v64) = 0;
  AMCP::Core::Operation_Utilities::make_constant_property<applesauce::CF::StringRef>((uint64_t *)__p, (uint64_t)&v63, v52);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(*(void *)__p + 40), __p);
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  *(void *)std::string __p = *(void *)(v2 + 96);
  *(_DWORD *)&__p[8] = v19;
  *(_DWORD *)&__p[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v63, 0, (long long *)__p, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v63 + 40), &v63);
  if ((void)v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
  }
  *(void *)std::string __p = *(void *)(v2 + 96);
  *(_DWORD *)&__p[8] = v19;
  *(_DWORD *)&__p[12] = 1634956402;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,AMCP::Core::Operation_Utilities::make_owned_object_of_class_list_property(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,unsigned int)::{lambda(void)#1}>(&v63, 0, (long long *)__p, 1.58366012e190);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v63 + 40), &v63);
  if ((void)v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
  }
  *(void *)std::string __p = *(void *)(v2 + 96);
  *(_DWORD *)&__p[8] = v19;
  *(_OWORD *)&__p[12] = xmmword_1BAFF9410;
  *(_OWORD *)&__p[28] = xmmword_1BAFF9420;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(&v63, 0, (uint64_t *)__p, 7.28117508e199);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v63 + 40), &v63);
  if ((void)v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
  }
  *(void *)std::string __p = *(void *)(v2 + 96);
  *(_DWORD *)&__p[8] = v19;
  *(_OWORD *)&__p[12] = xmmword_1BAFF9410;
  *(_OWORD *)&__p[28] = xmmword_1BAFF9430;
  AMCP::Core::Operation_Utilities::make_typed_property<std::vector<unsigned int>,std::shared_ptr<AMCP::Core::Operation> AMCP::Core::Operation_Utilities::make_owned_object_with_properties_list_property<unsigned int,AMCP::Address,AMCP::Direction>(AMCP::Core::Broker &,unsigned int,AMCP::Address const&,AMCP::Address const&,unsigned int const&,AMCP::Address,AMCP::Direction const&)::{lambda(void)#1}>(&v63, 0, (uint64_t *)__p, 8.13208706e228);
  std::unordered_map<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,std::shared_ptr<AMCP::Core::Operation>>>>::insert_or_assign[abi:ne180100]<std::shared_ptr<AMCP::Core::Operation> const&>((uint64_t)buf, (unsigned int *)(v63 + 40), &v63);
  if ((void)v64) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v64);
  }
  unsigned int v35 = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::make_core((AMCP::Core::Core **)&v55, *(std::__shared_mutex_base **)(v2 + 96), (uint64_t)buf, v19);
  if (!v55.__r_.__value_.__r.__words[0])
  {
    AMCP::Log::Scope_Registry::get(v35);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
    uint64_t v48 = **(NSObject ***)__p;
    if (*(void *)&__p[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
    }
    if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
    {
      unint64_t v49 = pthread_self();
      mach_port_t v50 = pthread_mach_thread_np(v49);
      *(_DWORD *)std::string __p = 67109890;
      *(_DWORD *)&__p[4] = v50;
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = "HALS_IOContext_Manager_Impl.cpp";
      *(_WORD *)&__p[18] = 1024;
      *(_DWORD *)&__p[20] = 434;
      *(_WORD *)&__p[24] = 2080;
      *(void *)&__p[26] = "core_ptr.operator BOOL() == true";
      _os_log_error_impl(&dword_1BAA78000, v48, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s failed to allocate the Core", __p, 0x22u);
    }
    abort();
  }
  AMCP::Log::Scope_Registry::get(v35);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)__p, "com.apple.coreaudio", "AMCP");
  std::string v36 = **(NSObject ***)__p;
  if (*(void *)&__p[8]) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__p[8]);
  }
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
  {
    __int16 v38 = pthread_self();
    mach_port_t v39 = pthread_mach_thread_np(v38);
    if (!v52)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mach_port_t v40 = v39;
    applesauce::CF::convert_to<std::string,0>((uint64_t)&v63, v52);
    if (v64 >= 0) {
      unint64_t v41 = &v63;
    }
    else {
      unint64_t v41 = (uint64_t *)v63;
    }
    *(_DWORD *)std::string __p = 67110402;
    *(_DWORD *)&__p[4] = v40;
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = "HALS_IOContext_Manager_Impl.cpp";
    *(_WORD *)&__p[18] = 1024;
    *(_DWORD *)&__p[20] = 436;
    *(_WORD *)&__p[24] = 2080;
    *(void *)&__p[26] = v41;
    *(_WORD *)&__p[34] = 1024;
    *(_DWORD *)&__p[36] = v19;
    *(_WORD *)&__p[40] = 1024;
    *(_DWORD *)&__p[42] = v3;
    _os_log_debug_impl(&dword_1BAA78000, v36, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Manager_Impl::create_device_object: %s\tmcp: %u  hal: %u", __p, 0x2Eu);
    if (SHIBYTE(v64) < 0) {
      operator delete((void *)v63);
    }
    CFStringRef v34 = v52;
  }
  HALS_IOContext_Manager_Impl::Object_Map::add_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), v19, v3);
  if (v55.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v55.__r_.__value_.__l.__size_);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::__deallocate_node(*(void **)&buf[16]);
  uint64_t v37 = *(void **)buf;
  *(void *)__CFString buf = 0;
  if (v37) {
    operator delete(v37);
  }
  if (v34) {
    CFRelease(v34);
  }
}

void sub_1BAF39CF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, std::__shared_weak_count *a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,std::shared_ptr<AMCP::Core::Operation>>>>::~__hash_table((uint64_t)&a29);
  if (v38) {
    CFRelease(v38);
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy_deallocate(const void **a1)
{
  std::__function::__alloc_func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](a1[4]);

  operator delete(a1);
}

void std::__function::__alloc_func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy[abi:ne180100](const void *a1)
{
  if (a1) {
    CFRelease(a1);
  }
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1485728;
  return std::__compressed_pair_elem<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0 const&,0ul>((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

uint64_t std::__compressed_pair_elem<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0 const&,0ul>(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = *((void *)a2 + 3);
  if (v5) {
    CFRetain(*((CFTypeRef *)a2 + 3));
  }
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = *((void *)a2 + 4);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v6;
  return a1;
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  *uint64_t v2 = &unk_1F1485728;
  std::__compressed_pair_elem<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1485728;
  uint64_t v1 = (const void *)a1[4];
  if (v1) {
    CFRelease(v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_arrived(unsigned int,unsigned int,applesauce::CF::StringRef,std::vector<HALS_IOContext_Manager_Impl::Stream_Info> const&,BOOL)::$_0>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1485728;
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl11device_diedEjjN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

std::__shared_mutex_base *std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  HALS_IOContext_Manager_Impl::Object_Map::remove_object((HALS_IOContext_Manager_Impl::Object_Map *)(v2 + 16), *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 20));
  unsigned int v3 = *(std::__shared_mutex_base **)(v2 + 96);
  unsigned int v4 = *(_DWORD *)(a1 + 16);

  return AMCP::Core::Broker::destroy_core(v3, v4);
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F14857A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_1F14857A8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0,std::allocator<HALS_IOContext_Manager_Impl::device_died(unsigned int,unsigned int,applesauce::CF::StringRef)::$_0>,void ()(void)>::~__func()
{
}

void HALS_IOContext_Manager_Impl::create_engine_for_device(HALS_IOContext_Manager_Impl *this, const HALS_IODevice *a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v33 = 0;
  CFStringRef v34 = &v33;
  uint64_t v35 = 0x3802000000;
  std::string v36 = __Block_byref_object_copy__17628;
  uint64_t v38 = 0;
  mach_port_t v39 = 0;
  uint64_t v37 = __Block_byref_object_dispose__17629;
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 0x40000000;
  v32[2] = ___ZN27HALS_IOContext_Manager_Impl24create_engine_for_deviceEPK13HALS_IODevice_block_invoke;
  void v32[3] = &unk_1E62358D0;
  v32[4] = &v33;
  v32[5] = a2;
  uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(const HALS_IODevice *))(*(void *)a2 + 56))(a2);
  HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v32);
  uint64_t v6 = v34;
  uint64_t v7 = v34[5];
  if (!v7) {
    goto LABEL_49;
  }
  std::vector<unsigned int> v8 = (uint64_t *)((char *)this + 128);
  unint64_t v9 = *((unsigned int *)a2 + 4);
  unint64_t v10 = *((void *)this + 17);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v2 = *((unsigned int *)a2 + 4);
      if (v10 <= v9) {
        unint64_t v2 = v9 % v10;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
    float v12 = *(void ***)(*v8 + 8 * v2);
    if (v12)
    {
      for (int i = *v12; i; int i = *(void **)i)
      {
        unint64_t v14 = *((void *)i + 1);
        if (v14 == v9)
        {
          if (*((_DWORD *)i + 4) == v9) {
            goto LABEL_41;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v2) {
            break;
          }
        }
      }
    }
  }
  int i = operator new(0x28uLL);
  *(void *)int i = 0;
  *((void *)i + 1) = v9;
  *((_DWORD *)i + 4) = v9;
  *((void *)i + 3) = 0;
  *((void *)i + 4) = 0;
  float v15 = (float)(unint64_t)(*((void *)this + 19) + 1);
  float v16 = *((float *)this + 40);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)this + 128, v20);
    unint64_t v10 = *((void *)this + 17);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v10 <= v9) {
        unint64_t v2 = v9 % v10;
      }
      else {
        unint64_t v2 = v9;
      }
    }
    else
    {
      unint64_t v2 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *v8;
  uint64_t v22 = *(void **)(*v8 + 8 * v2);
  if (v22)
  {
    *(void *)int i = *v22;
  }
  else
  {
    *(void *)int i = *((void *)this + 18);
    *((void *)this + 18) = i;
    *(void *)(v21 + 8 * v2) = (char *)this + 144;
    if (!*(void *)i) {
      goto LABEL_40;
    }
    unint64_t v23 = *(void *)(*(void *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*v8 + 8 * v23);
  }
  void *v22 = i;
LABEL_40:
  ++*((void *)this + 19);
  uint64_t v7 = v6[5];
LABEL_41:
  uint64_t v24 = v6[6];
  if (v24) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v24 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v25 = (std::__shared_weak_count *)*((void *)i + 4);
  *((void *)i + 3) = v7;
  *((void *)i + 4) = v24;
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v25);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  mach_port_t v26 = **(NSObject ***)buf;
  if (*(void *)v41) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v41);
  }
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
  {
    mach_port_t v27 = pthread_self();
    mach_port_t v28 = pthread_mach_thread_np(v27);
    uint64_t v29 = (*(uint64_t (**)(const HALS_IODevice *))(*(void *)a2 + 216))(a2);
    int v30 = *((_DWORD *)a2 + 4);
    uint64_t v31 = v34[5];
    *(_DWORD *)__CFString buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v28;
    *(_WORD *)unint64_t v41 = 2080;
    *(void *)&_DWORD v41[2] = "HALS_IOContext_Manager_Impl.cpp";
    __int16 v42 = 1024;
    int v43 = 559;
    __int16 v44 = 2080;
    uint64_t v45 = v29;
    __int16 v46 = 1024;
    int v47 = v30;
    __int16 v48 = 2048;
    uint64_t v49 = v31;
    _os_log_debug_impl(&dword_1BAA78000, v26, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d create_engine_for_device: %s (%u)  %p", buf, 0x32u);
  }
LABEL_49:
  _Block_object_dispose(&v33, 8);
  if (v39) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  }
}

void sub_1BAF3A684(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<AMCP::Portal::IPC::io_messenger_id_t,std::shared_ptr<AMCP::Portal::IPC::IO_Sender>>,void *>>>::operator()[abi:ne180100](1, v22);
  _Block_object_dispose(&a16, 8);
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__17628(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void __Block_byref_object_dispose__17629(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN27HALS_IOContext_Manager_Impl24create_engine_for_deviceEPK13HALS_IODevice_block_invoke(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 256))(&v5);
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v3 = v5;
  long long v5 = 0uLL;
  unsigned int v4 = *(std::__shared_weak_count **)(v2 + 48);
  *(_OWORD *)(v2 + 40) = v3;
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    if (*((void *)&v5 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v5 + 1));
    }
  }
}

uint64_t **HALS_IOContext_Manager_Impl::get_hal_object_id_for_device_uid(uint64_t **result, unsigned __int8 *a2)
{
  if (result)
  {
    long long v3 = result;
    while (1)
    {
      unsigned int v4 = v3[3];
      long long v5 = (std::__shared_weak_count *)v3[4];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(CFTypeRef *__return_ptr))(*v4 + 16))(&cf);
      if (!cf)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&__s1, (const __CFString *)cf);
      if ((v24 & 0x80u) == 0) {
        size_t v6 = v24;
      }
      else {
        size_t v6 = __n;
      }
      uint64_t v7 = a2[23];
      int v8 = (char)v7;
      if ((v7 & 0x80u) != 0) {
        uint64_t v7 = *((void *)a2 + 1);
      }
      if (v6 != v7) {
        break;
      }
      if (v8 >= 0) {
        unint64_t v9 = a2;
      }
      else {
        unint64_t v9 = *(unsigned __int8 **)a2;
      }
      if ((v24 & 0x80) != 0)
      {
        unint64_t v19 = __s1;
        BOOL v18 = memcmp(__s1, v9, __n) == 0;
        goto LABEL_28;
      }
      if (v24)
      {
        uint64_t v10 = v24 - 1;
        p_s1 = &__s1;
        do
        {
          int v13 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v12 = v13;
          int v15 = *v9++;
          int v14 = v15;
          BOOL v17 = v10-- != 0;
          BOOL v18 = v12 == v14;
        }
        while (v12 == v14 && v17);
        if ((v24 & 0x80) == 0) {
          goto LABEL_30;
        }
LABEL_26:
        unint64_t v19 = __s1;
LABEL_28:
        operator delete(v19);
        goto LABEL_30;
      }
      BOOL v18 = 1;
LABEL_30:
      if (cf) {
        CFRelease(cf);
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      if (v18) {
        return (uint64_t **)*((unsigned int *)v3 + 4);
      }
      long long v3 = (uint64_t **)*v3;
      if (!v3) {
        return 0;
      }
    }
    BOOL v18 = 0;
    if ((v24 & 0x80) == 0) {
      goto LABEL_30;
    }
    goto LABEL_26;
  }
  return result;
}

void sub_1BAF3A90C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  _Unwind_Resume(exception_object);
}

void HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(HALS_IOContext_Manager_Impl *this, const AMCP::Graph::Timebase_Set *a2, void *a3)
{
  v43[4] = *MEMORY[0x1E4F143B8];
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  memset(v31, 0, sizeof(v31));
  size_t v6 = operator new(0x20uLL);
  void *v6 = &unk_1F1485A88;
  v6[1] = a2;
  v6[2] = &v32;
  v6[3] = v31;
  v43[3] = v6;
  AMCP::Graph::Timebase_Set::for_each(a3, (uint64_t)v43);
  uint64_t v7 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__value_func[abi:ne180100](v43);
  if (v32 == v33)
  {
    AMCP::Log::Scope_Registry::get(v7);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
    int v8 = *(NSObject **)__p;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      mach_port_t v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v27;
      *(_WORD *)mach_port_t v40 = 2080;
      *(void *)&v40[2] = "HALS_IOContext_Manager_Impl.cpp";
      __int16 v41 = 1024;
      int v42 = 913;
      _os_log_debug_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases - no MCP device ids found", (uint8_t *)&__p, 0x18u);
    }
  }
  AMCP::IO_Core::Graph_Manager::find_contexts_using_timebase((unsigned int **)&__p, *((void ***)a2 + 14), (uint64_t)v31);
  uint64_t v10 = (unsigned int *)__p;
  uint8x8_t v11 = *(unsigned int **)v40;
  int v30 = this;
  if (__p != *(void **)v40)
  {
    int v12 = 0;
    int v13 = 0;
    unint64_t v14 = 0;
    int v15 = (void *)((char *)a2 + 16);
    while (1)
    {
      float v16 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v15, *v10);
      if (v16)
      {
        int v17 = *((_DWORD *)v16 + 5);
        if ((unint64_t)v13 >= v14)
        {
          uint64_t v19 = (v13 - v12) >> 2;
          unint64_t v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          if ((uint64_t)(v14 - (void)v12) >> 1 > v20) {
            unint64_t v20 = (uint64_t)(v14 - (void)v12) >> 1;
          }
          if (v14 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            unint64_t v21 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v21);
          }
          else {
            uint64_t v22 = 0;
          }
          unint64_t v23 = (char *)(v21 + 4 * v19);
          *(_DWORD *)unint64_t v23 = v17;
          uint64_t v18 = (uint64_t)(v23 + 4);
          while (v13 != v12)
          {
            int v24 = *((_DWORD *)v13 - 1);
            v13 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          unint64_t v14 = v21 + 4 * v22;
          if (v12) {
            operator delete(v12);
          }
          int v12 = v23;
          goto LABEL_27;
        }
        *(_DWORD *)int v13 = v17;
        v13 += 4;
      }
      uint64_t v18 = (uint64_t)v13;
LABEL_27:
      ++v10;
      int v13 = (char *)v18;
      if (v10 == v11) {
        goto LABEL_34;
      }
    }
  }
  AMCP::Log::Scope_Registry::get(v9);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  unint64_t v25 = **(NSObject ***)buf;
  if (*(void *)v36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
  }
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
  {
    mach_port_t v28 = pthread_self();
    mach_port_t v29 = pthread_mach_thread_np(v28);
    *(_DWORD *)__CFString buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v29;
    *(_WORD *)std::string v36 = 2080;
    *(void *)&v36[2] = "HALS_IOContext_Manager_Impl.cpp";
    __int16 v37 = 1024;
    int v38 = 920;
    _os_log_debug_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases - no IO context ids found", buf, 0x18u);
  }
  int v12 = 0;
  uint64_t v18 = 0;
LABEL_34:
  *(void *)int v30 = 0;
  *((void *)v30 + 1) = 0;
  *((void *)v30 + 2) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v30, v12, v18, (v18 - (uint64_t)v12) >> 2);
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = 0;
  *((void *)v30 + 5) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)v30 + 3, v32, (uint64_t)v33, (v33 - (unsigned char *)v32) >> 2);
  if (v12) {
    operator delete(v12);
  }
  if (__p) {
    operator delete(__p);
  }
  std::string __p = v31;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v32)
  {
    uint64_t v33 = v32;
    operator delete(v32);
  }
}

void sub_1BAF3ACDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (v25) {
    operator delete(v25);
  }
  a21 = &a11;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target_type()
{
}

uint64_t std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN27HALS_IOContext_Manager_Impl40find_contexts_and_devices_with_timebasesERKN4AMCP5Graph12Timebase_SetEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::operator()(void *a1, __n128 *a2)
{
  __n128 v3 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  uint64_t v4 = a1[1];
  __n128 v34 = v3;
  (*(void (**)(void **__return_ptr, __n128))(*(void *)v3.n128_u64[0] + 24))(__p, v3);
  unint64_t v5 = v36;
  unsigned __int8 v6 = v36;
  if ((v36 & 0x80u) != 0) {
    unint64_t v5 = (unint64_t)__p[1];
  }
  if (v5)
  {
    unsigned int hal_object_id_for_device_uid = HALS_IOContext_Manager_Impl::get_hal_object_id_for_device_uid(*(uint64_t ***)(v4 + 144), (unsigned __int8 *)__p);
    unsigned int v8 = hal_object_id_for_device_uid;
    uint64_t v9 = a1[2];
    uint8x8_t v11 = *(unsigned int **)(v9 + 8);
    unint64_t v10 = *(void *)(v9 + 16);
    if ((unint64_t)v11 >= v10)
    {
      int v13 = *(unsigned int **)v9;
      uint64_t v14 = ((uint64_t)v11 - *(void *)v9) >> 2;
      unint64_t v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 62) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v16 = v10 - (void)v13;
      if (v16 >> 1 > v15) {
        unint64_t v15 = v16 >> 1;
      }
      BOOL v17 = (unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL;
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
      if (!v17) {
        unint64_t v18 = v15;
      }
      if (v18)
      {
        unint64_t v18 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v18);
        int v13 = *(unsigned int **)v9;
        uint8x8_t v11 = *(unsigned int **)(v9 + 8);
      }
      else
      {
        uint64_t v19 = 0;
      }
      unint64_t v20 = (unsigned int *)(v18 + 4 * v14);
      unint64_t v21 = v18 + 4 * v19;
      *unint64_t v20 = v8;
      int v12 = v20 + 1;
      while (v11 != v13)
      {
        unsigned int v22 = *--v11;
        *--unint64_t v20 = v22;
      }
      *(void *)uint64_t v9 = v20;
      *(void *)(v9 + 8) = v12;
      *(void *)(v9 + 16) = v21;
      if (v13) {
        operator delete(v13);
      }
    }
    else
    {
      unsigned int *v11 = hal_object_id_for_device_uid;
      int v12 = v11 + 1;
    }
    *(void *)(v9 + 8) = v12;
    unint64_t v23 = (uint64_t *)a1[3];
    int v24 = (__n128 *)v23[1];
    unint64_t v25 = v23[2];
    if ((unint64_t)v24 >= v25)
    {
      uint64_t v27 = ((uint64_t)v24 - *v23) >> 4;
      unint64_t v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v29 = v25 - *v23;
      if (v29 >> 3 > v28) {
        unint64_t v28 = v29 >> 3;
      }
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v28;
      }
      v37[4] = v23 + 2;
      uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v30);
      unint64_t v32 = (__n128 *)&v31[16 * v27];
      v37[0] = v31;
      v37[1] = v32;
      v37[3] = &v31[16 * v33];
      __n128 *v32 = v34;
      if (v34.n128_u64[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
      }
      v37[2] = v32 + 1;
      std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__swap_out_circular_buffer(v23, v37);
      mach_port_t v26 = (__n128 *)v23[1];
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)v37);
    }
    else
    {
      *int v24 = v34;
      if (v34.n128_u64[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v34.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
      }
      mach_port_t v26 = v24 + 1;
      v23[1] = (uint64_t)&v24[1];
    }
    v23[1] = (uint64_t)v26;
    unsigned __int8 v6 = v36;
  }
  if ((v6 & 0x80) != 0) {
    operator delete(__p[0]);
  }
  if (v34.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v34.n128_u64[1]);
  }
}

void sub_1BAF3AFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*((void *)&a9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&a9 + 1));
  }
  _Unwind_Resume(exception_object);
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1485A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1485A88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0,std::allocator<HALS_IOContext_Manager_Impl::find_contexts_and_devices_with_timebases(AMCP::Graph::Timebase_Set const&)::$_0>,void ()(std::shared_ptr<AMCP::Graph::Timebase>)>::~__func()
{
}

void ___ZN27HALS_IOContext_Manager_Impl22hog_mode_owner_changedEP13HALS_IODevicei_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 32);
  uint64_t v2 = *(unsigned int **)(a1 + 40);
  while (v1 != v2)
  {
    uint64_t v3 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*v1);
    uint64_t v5 = v3;
    if (v3)
    {
      uint64_t v6 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**(unsigned int **)(v3 + 64));
      unsigned int v8 = (HALS_ObjectMap *)v6;
      if (v6)
      {
        if (*(_DWORD *)(v6 + 232)) {
          (*(void (**)(void, void))(**(void **)(v5 + 96) + 496))(*(void *)(v5 + 96), *(void *)(v5 + 136));
        }
      }
      HALS_ObjectMap::ReleaseObject(v8, v7);
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v5, v4);
    ++v1;
  }
}

void sub_1BAF3B170(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v3, a2);
  HALS_ObjectMap::ReleaseObject(v2, v5);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void *__copy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
}

void AMCP::Node::~Node(AMCP::Node *this)
{
  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F145F4E8;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

AMCP::Node *AMCP::Node::Node(AMCP::Node *this, AMCP::System_Context *a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (AMCP::Object *)AMCP::Object::Object((uint64_t)this, (uint64_t)a2, a3);
  *(void *)uint64_t v4 = &unk_1F1485B18;
  uint64_t v5 = AMCP::Object::constructed_correct_class(v4, (AMCP *)0x616E6F64);
  if ((v5 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      unsigned int v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)uint8x8_t v11 = 2080;
      *(void *)&void v11[2] = "Node.cpp";
      __int16 v12 = 1024;
      int v13 = 29;
      __int16 v14 = 2080;
      unint64_t v15 = "constructed_correct_class(k_class_id_node)";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  return this;
}

void sub_1BAF3B3CC(_Unwind_Exception *exception_object)
{
  void *v1 = &unk_1F145F4E8;
  uint64_t v3 = (std::__shared_weak_count *)v1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::Node(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v19[2] = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(std::__shared_mutex_base **)(**(void **)a2 + 16);
  *(void *)__CFString buf = &unk_1F1485F98;
  *(void *)uint64_t v16 = a3;
  v19[0] = buf;
  AMCP::Core::Broker::fetch_first_core_if (v14, v5, (uint64_t)buf);
  *(void *)a1 = &unk_1F145F4E8;
  uint64_t v6 = v14[0];
  if (v14[0]) {
    int v7 = *(_DWORD *)v14[0];
  }
  else {
    int v7 = 0;
  }
  *(_DWORD *)(a1 + 8) = v7;
  unsigned int v8 = (std::__shared_weak_count *)v14[1];
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 32) = a2;
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(void *)(a1 + 32) = a2;
  }
  std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](buf);
  *(void *)a1 = &unk_1F1485B18;
  uint64_t v9 = AMCP::Object::constructed_correct_class((AMCP::Object *)a1, (AMCP *)0x616E6F64);
  if ((v9 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint8x8_t v11 = **(NSObject ***)buf;
    if (*(void *)v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v16);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v16 = 2080;
      *(void *)&v16[2] = "Node.cpp";
      __int16 v17 = 1024;
      int v18 = 45;
      LOWORD(v19[0]) = 2080;
      *(void *)((char *)v19 + 2) = "constructed_correct_class(k_class_id_node)";
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s the core is not of the proper class", buf, 0x22u);
    }
    abort();
  }
  return a1;
}

void sub_1BAF3B5F4(_Unwind_Exception *exception_object)
{
  void *v1 = v2;
  uint64_t v4 = (std::__shared_weak_count *)v1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4NodeC1ERNS_14System_ContextEN10applesauce2CF9StringRefEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  unsigned int simple_required = AMCP::Core::Core::get_simple_required_property<1650682995u>(*a2);
  if (!AMCP::is_base_of((AMCP *)0x616E6F64, simple_required)) {
    return 0;
  }
  AMCP::Core::Core::get_simple_required_property<1853188452u>(&cf, *a2);
  BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(**(const __CFString ***)(a1 + 8), (const __CFString **)&cf) == kCFCompareEqualTo;
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1485F98;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_1F1485F98;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0,std::allocator<AMCP::Node::Node(AMCP::System_Context &,applesauce::CF::StringRef)::$_0>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

void AMCP::Node::get_client_io_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v23 = 0x676C6F626E64696FLL;
      int v24 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v23);
      uint64_t v9 = v25;
      if (!v25)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v17 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          int v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Core.h";
          __int16 v43 = 1024;
          int v44 = 202;
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, "
              "unsigned long, AMCP::Proc_Stream *)>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v47 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>();
      uint8x8_t v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v20 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          unint64_t v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 154;
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::P"
              "roc_Stream *)>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      __int16 v12 = v11;
      if (!*((void *)v11 + 7)
        || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)> ()(void)>>(),
            (uint8x8_t v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v14 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          unint64_t v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 161;
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d (unsigned int, const AMCP::Proc_Cycle_Info &, unsigned long, AMCP::Proc_Stream *, unsigned long, AMCP::P"
              "roc_Stream *)>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v13 = *((void *)v11 + 3);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    else
    {
      *(void *)(a2 + 24) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
}

void sub_1BAF3BE8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_client_io_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  int v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F626E64696FLL;
    int v11 = 0;
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&,unsigned long,AMCP::Proc_Stream *,unsigned long,AMCP::Proc_Stream *)>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF3C05C(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF3C064);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_io_overload_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    int v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626F766572;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF3C114(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int)>>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v20 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      unint64_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)char v40 = 2080;
      *(void *)&v40[2] = "Core.h";
      __int16 v41 = 1024;
      int v42 = 198;
      __int16 v43 = 2080;
      *(void *)int v44 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, a2, a3);
  uint64_t v6 = v23;
  if (!v23)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v14 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      unint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)char v40 = 2080;
      *(void *)&v40[2] = "Core.h";
      __int16 v41 = 1024;
      int v42 = 202;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v30);
    std::runtime_error::runtime_error(&v31, &v30);
    std::runtime_error::runtime_error(&v32, &v31);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v33 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v44[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::function<void >, Argument_Types = <>]";
    uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v46 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    long long v27 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>();
  uint64_t v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v17 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      int v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)char v40 = 2080;
      *(void *)&v40[2] = "Operation.h";
      __int16 v41 = 1024;
      int v42 = 154;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v30);
    std::runtime_error::runtime_error(&v31, &v30);
    std::runtime_error::runtime_error(&v32, &v31);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v33 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v44[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void >, Argument_Types = <>]";
    uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v46 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    long long v27 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v9 = v8;
  if (!*((void *)v8 + 7)
    || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()> ()(void)>>(),
        (uint64_t v8 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v9 + 7))(4, (uint64_t)v9 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)char v40 = 2080;
      *(void *)&v40[2] = "Operation.h";
      __int16 v41 = 1024;
      int v42 = 161;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v30);
    std::runtime_error::runtime_error(&v31, &v30);
    std::runtime_error::runtime_error(&v32, &v31);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v33 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v44[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void >, Argument_Types = <>]";
    uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v46 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    long long v27 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v10 = *((void *)v8 + 3);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1BAF3C87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_io_overload_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F626F766572;
    int v11 = 0;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF3CA44(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF3CA4CLL);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_required_input_samples_for_output_samples_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v23 = 0x676C6F626973666FLL;
      int v24 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v23);
      int v9 = v25;
      if (!v25)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v17 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          int v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Core.h";
          __int16 v43 = 1024;
          int v44 = 202;
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<unsigned long long (unsigned long long)>, Argument_Types = <>]";
        int v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v47 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>();
      int v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v20 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          unint64_t v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 154;
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long)>, Argument_Types = <>]";
        int v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      __int16 v12 = v11;
      if (!*((void *)v11 + 7)
        || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long)> ()(void)>>(),
            (int v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v14 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          unint64_t v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 161;
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long)>, Argument_Types = <>]";
        int v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v13 = *((void *)v11 + 3);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    else
    {
      *(void *)(a2 + 24) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
}

void sub_1BAF3D128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_required_input_samples_for_output_samples_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 16);
  if (v7)
  {
    uint64_t v26 = 0x676C6F626973666FLL;
    LODWORD(v27) = 0;
    std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v43, a2);
    operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, v7, (unsigned int *)&v26);
    int v9 = v28;
    if (!v28)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v19 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = pthread_self();
        mach_port_t v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)int v46 = 2080;
        *(void *)&v46[2] = "Core.h";
        __int16 v47 = 1024;
        int v48 = 202;
        _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v44, v26, v27);
      std::runtime_error::runtime_error(&v30, &v44);
      std::runtime_error::runtime_error(&v36, &v30);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = void, Argument_Types = <std::function<unsigned long long (unsigned long long)>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v51 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v34.__r_.__value_.__l.__data_);
      std::string v32 = &unk_1F148AA90;
      std::string __p = v34;
      memset(&v34, 0, sizeof(v34));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)&v44, (uint64_t)v43);
    unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>();
    int v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
    if (!v11)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v22 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)int v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 154;
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<unsigned long long (unsigned long long)>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 154;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    __int16 v12 = v11;
    if (!*((void *)v11 + 7)
      || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long)>)>>(),
          int v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v16 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        __int16 v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)int v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 161;
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<unsigned long long (unsigned long long)>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 161;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<unsigned long long ()(unsigned long long)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v44);
    uint64_t v14 = *((void *)v13 + 3);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 48))(v14, buf);
    std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](&v44);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    std::__function::__value_func<unsigned long long ()(unsigned long long)>::~__value_func[abi:ne180100](v43);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v15;
}

void AMCP::Node::get_expected_output_samples_for_input_samples_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v23 = 0x676C6F626F736669;
      int v24 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v23);
      int v9 = v25;
      if (!v25)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v17 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Core.h";
          __int16 v43 = 1024;
          int v44 = 202;
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<unsigned long long (unsigned long long, unsigned long long &)>, Argument_Types = <>]";
        int v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v47 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>();
      int v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v20 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 154;
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long, unsigned long long &)>, Argument_Types = <>]";
        int v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      __int16 v12 = v11;
      if (!*((void *)v11 + 7)
        || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<unsigned long long ()(unsigned long long,unsigned long long &)> ()(void)>>(),
            (int v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v14 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          uint64_t v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 161;
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        uint64_t v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<uns"
              "igned long long (unsigned long long, unsigned long long &)>, Argument_Types = <>]";
        int v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v13 = *((void *)v11 + 3);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    else
    {
      *(void *)(a2 + 24) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
}

void sub_1BAF3E218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_expected_output_samples_for_input_samples_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 16);
  if (v7)
  {
    uint64_t v26 = 0x676C6F626F736669;
    LODWORD(v27) = 0;
    std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100]((uint64_t)v43, a2);
    operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, v7, (unsigned int *)&v26);
    int v9 = v28;
    if (!v28)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v19 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = pthread_self();
        mach_port_t v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)int v46 = 2080;
        *(void *)&v46[2] = "Core.h";
        __int16 v47 = 1024;
        int v48 = 202;
        _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v44, v26, v27);
      std::runtime_error::runtime_error(&v30, &v44);
      std::runtime_error::runtime_error(&v36, &v30);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = void, Argument_Types = <std::function<unsigned long long (unsigned long long, unsigned long long &)>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v51 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v34.__r_.__value_.__l.__data_);
      std::string v32 = &unk_1F148AA90;
      std::string __p = v34;
      memset(&v34, 0, sizeof(v34));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100]((uint64_t)&v44, (uint64_t)v43);
    unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>();
    int v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
    if (!v11)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v22 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)int v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 154;
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<unsigned long long (unsigned long long, unsigned long long &)>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 154;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    __int16 v12 = v11;
    if (!*((void *)v11 + 7)
      || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<unsigned long long ()(unsigned long long,unsigned long long &)>)>>(),
          int v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v16 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        __int16 v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)int v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 161;
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      uint64_t v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<unsigned long long (unsigned long long, unsigned long long &)>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 161;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v44);
    uint64_t v14 = *((void *)v13 + 3);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 48))(v14, buf);
    std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](&v44);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    std::__function::__value_func<unsigned long long ()(unsigned long long,unsigned long long &)>::~__value_func[abi:ne180100](v43);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v15;
}

void AMCP::Node::get_connections_changed_handler(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

uint64_t AMCP::Node::set_connections_changed_handler()
{
  return 0;
}

void AMCP::Node::get_register_client_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F627265636CLL;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF3ECEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_register_client_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F627265636CLL;
    int v11 = 0;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF3EDF8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF3EE00);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_begin_processing_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626E646270;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF3EEB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_begin_processing_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F626E646270;
    int v11 = 0;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF3EFBC(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF3EFC4);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_begin_cycle_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626E646263;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF3F074(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Log::Scope_Registry *a1, int8x8_t *a2, unsigned int *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  if (*a3 == 707406378 || a3[1] == 707406378 || a3[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unint64_t v20 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v21 = pthread_self();
      mach_port_t v22 = pthread_mach_thread_np(v21);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v22;
      *(_WORD *)uint64_t v40 = 2080;
      *(void *)&v40[2] = "Core.h";
      __int16 v41 = 1024;
      int v42 = 198;
      __int16 v43 = 2080;
      *(void *)std::string v44 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v23, a2, a3);
  uint64_t v6 = v23;
  if (!v23)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v14 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = pthread_self();
      mach_port_t v16 = pthread_mach_thread_np(v15);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v16;
      *(_WORD *)uint64_t v40 = 2080;
      *(void *)&v40[2] = "Core.h";
      __int16 v41 = 1024;
      int v42 = 202;
      _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v30);
    std::runtime_error::runtime_error(&v31, &v30);
    std::runtime_error::runtime_error(&v32, &v31);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v33 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v44[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>, Argument_Types = <>]";
    uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v46 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    uint64_t v27 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  unint64_t v7 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>();
  uint64_t v8 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v6, v7);
  if (!v8)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    __int16 v17 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v18 = pthread_self();
      mach_port_t v19 = pthread_mach_thread_np(v18);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v19;
      *(_WORD *)uint64_t v40 = 2080;
      *(void *)&v40[2] = "Operation.h";
      __int16 v41 = 1024;
      int v42 = 154;
      _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v30);
    std::runtime_error::runtime_error(&v31, &v30);
    std::runtime_error::runtime_error(&v32, &v31);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v33 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v44[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void (unsigned int, const AMCP::Proc_Cycle_Info &)>, Argument_Types = <>]";
    uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v46 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    uint64_t v27 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  int v9 = v8;
  if (!*((void *)v8 + 7)
    || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)> ()(void)>>(),
        (uint64_t v8 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v9 + 7))(4, (uint64_t)v9 + 24, 0, buf)) == 0))
  {
    AMCP::Log::Scope_Registry::get(v8);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v11 = **(NSObject ***)buf;
    if (*(void *)v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v40);
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      __int16 v12 = pthread_self();
      mach_port_t v13 = pthread_mach_thread_np(v12);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v13;
      *(_WORD *)uint64_t v40 = 2080;
      *(void *)&v40[2] = "Operation.h";
      __int16 v41 = 1024;
      int v42 = 161;
      _os_log_error_impl(&dword_1BAA78000, v11, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v38);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v30);
    std::runtime_error::runtime_error(&v31, &v30);
    std::runtime_error::runtime_error(&v32, &v31);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    int v37 = -1;
    v32.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    std::runtime_error v33 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v32);
    *(void *)&v44[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::f"
                         "unction<void (unsigned int, const AMCP::Proc_Cycle_Info &)>, Argument_Types = <>]";
    uint64_t v45 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v46 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v25);
    long long v28 = v25;
    uint64_t v29 = v26;
    long long v25 = 0uLL;
    uint64_t v26 = 0;
    uint64_t v27 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v10 = *((void *)v8 + 3);
  if (!v10) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1BAF3F7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_begin_cycle_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F626E646263;
    int v11 = 0;
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF3F9A4(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF3F9ACLL);
  }
  __clang_call_terminate(a1);
}

void AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(AMCP::Address *a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  if (*a2 == 707406378 || a2[1] == 707406378 || a2[2] == -1)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v22 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = pthread_self();
      mach_port_t v24 = pthread_mach_thread_np(v23);
      *(_DWORD *)__CFString buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v24;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 198;
      __int16 v46 = 2080;
      *(void *)uint64_t v47 = "!in_address.has_wildcards()";
      _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", buf, 0x22u);
    }
    abort();
  }
  operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, (int8x8_t *)a1, a2);
  unint64_t v7 = v25;
  if (!v25)
  {
    AMCP::Log::Scope_Registry::get(operation);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v16 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      __int16 v17 = pthread_self();
      mach_port_t v18 = pthread_mach_thread_np(v17);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v18;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Core.h";
      __int16 v44 = 1024;
      int v45 = 202;
      _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const"
                         " [Return_Type = void, Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>>]";
    int v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
    int v49 = 202;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    uint64_t v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)v41, a3);
  unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>();
  int v9 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8);
  if (!v9)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v19 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      unint64_t v20 = pthread_self();
      mach_port_t v21 = pthread_mach_thread_np(v20);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v21;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 154;
      _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>>]";
    int v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 154;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    uint64_t v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  uint64_t v10 = v9;
  if (!*((void *)v9 + 7)
    || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>)>>(),
        int v9 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v10 + 7))(4, (uint64_t)v10 + 24, 0, buf), (v11 = v9) == 0))
  {
    AMCP::Log::Scope_Registry::get(v9);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v13 = **(NSObject ***)buf;
    if (*(void *)v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v43);
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = pthread_self();
      mach_port_t v15 = pthread_mach_thread_np(v14);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v15;
      *(_WORD *)__int16 v43 = 2080;
      *(void *)&v43[2] = "Operation.h";
      __int16 v44 = 1024;
      int v45 = 161;
      _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
    std::runtime_error::runtime_error(&v33, &v32);
    std::runtime_error::runtime_error(&v34, &v33);
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v38 = 0;
    int v39 = -1;
    v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    uint64_t v35 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
    *(void *)&v47[6] = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, "
                         "Argument_Types = <std::function<void (unsigned int, const AMCP::Proc_Cycle_Info &)>>]";
    int v48 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
    int v49 = 161;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
    long long v30 = v27;
    uint64_t v31 = v28;
    long long v27 = 0uLL;
    uint64_t v28 = 0;
    uint64_t v29 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)v41);
  uint64_t v12 = *((void *)v11 + 3);
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v12 + 48))(v12, buf);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](buf);
  std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](v41);
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
}

void sub_1BAF40144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,std::runtime_error a24,char a25)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Node::get_end_cycle_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626E646563;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF403C4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_end_cycle_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F626E646563;
    int v11 = 0;
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()(unsigned int,AMCP::Proc_Cycle_Info const&)>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF404D0(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF404D8);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_end_processing_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F626E646570;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF40588(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_end_processing_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F626E646570;
    int v11 = 0;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF40694(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF4069CLL);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_unregister_client_handler(AMCP::Node *this@<X0>, AMCP::Log::Scope_Registry *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v8 = 0x676C6F62756E636CLL;
      int v9 = 0;
      AMCP::Core::Core::call_operation_function<std::function<void ()>>(a2, v7, (unsigned int *)&v8);
    }
    else
    {
      *((void *)a2 + 3) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *((void *)a2 + 3) = 0;
  }
}

void sub_1BAF4074C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Node::set_unregister_client_handler(uint64_t a1, uint64_t a2)
{
  void v12[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(AMCP::Address **)(a1 + 16);
  if (v7)
  {
    uint64_t v10 = 0x676C6F62756E636CLL;
    int v11 = 0;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v12, a2);
    AMCP::Core::Core::call_operation_function<void,std::function<void ()>>(v7, (unsigned int *)&v10, (uint64_t)v12);
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v12);
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v8;
}

void sub_1BAF40858(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF40860);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_latency_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v23 = 0x676C6F626E646C61;
      int v24 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v23);
      int v9 = v25;
      if (!v25)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v17 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Core.h";
          __int16 v43 = 1024;
          int v44 = 202;
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<long long ()>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v47 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>();
      int v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        unint64_t v20 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 154;
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<lon"
              "g long ()>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v12 = v11;
      if (!*((void *)v11 + 7)
        || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<long long ()(void)> ()(void)>>(),
            (int v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v14 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)int v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 161;
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        uint64_t v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<lon"
              "g long ()>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        uint64_t v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v13 = *((void *)v11 + 3);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    else
    {
      *(void *)(a2 + 24) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
}

void sub_1BAF40F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_latency_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 16);
  if (v7)
  {
    uint64_t v26 = 0x676C6F626E646C61;
    LODWORD(v27) = 0;
    std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100]((uint64_t)v43, a2);
    operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, v7, (unsigned int *)&v26);
    int v9 = v28;
    if (!v28)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v19 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        unint64_t v20 = pthread_self();
        mach_port_t v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)__int16 v46 = 2080;
        *(void *)&v46[2] = "Core.h";
        __int16 v47 = 1024;
        int v48 = 202;
        _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v44, v26, v27);
      std::runtime_error::runtime_error(&v30, &v44);
      std::runtime_error::runtime_error(&v36, &v30);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      int v49 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = void, Argument_Types = <std::function<long long ()>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v51 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v34.__r_.__value_.__l.__data_);
      std::string v32 = &unk_1F148AA90;
      std::string __p = v34;
      memset(&v34, 0, sizeof(v34));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100]((uint64_t)&v44, (uint64_t)v43);
    unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>();
    int v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
    if (!v11)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v22 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)__int16 v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 154;
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      int v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<long long ()>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 154;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v12 = v11;
    if (!*((void *)v11 + 7)
      || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<long long ()(void)>)>>(),
          int v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v16 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        __int16 v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)__int16 v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 161;
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      int v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<long long ()>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 161;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<long long ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v44);
    uint64_t v14 = *((void *)v13 + 3);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 48))(v14, buf);
    std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](&v44);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    std::__function::__value_func<long long ()(void)>::~__value_func[abi:ne180100](v43);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v15;
}

void AMCP::Node::get_tail_time_handler(uint64_t a1@<X8>)
{
  *(void *)(a1 + 24) = 0;
}

uint64_t AMCP::Node::set_tail_time_handler()
{
  return 0;
}

void AMCP::Node::get_uid(AMCP::Node *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    uint64_t v6 = v5;
    unint64_t v7 = (AMCP::Core::Core *)*((void *)this + 2);
    if (v7) {
      AMCP::Core::Core::get_simple_required_property<1853188452u>(a2, v7);
    }
    else {
      *a2 = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
  }
}

void AMCP::Node::get_description(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v4)
  {
    BOOL v5 = 0;
    goto LABEL_6;
  }
  BOOL v5 = std::__shared_weak_count::lock(v4);
  if (!v5 || (uint64_t v6 = (AMCP::Core::Core *)*((void *)this + 2)) == 0)
  {
LABEL_6:
    *(void *)a2 = 1;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 32) = 0x100000000;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_OWORD *)(a2 + 72) = 0u;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    if (!v5) {
      return;
    }
    goto LABEL_7;
  }
  AMCP::Core::Core::get_simple_required_property<1852073061u>((AMCP::Node_Description *)a2, v6);
LABEL_7:

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

AMCP::Core::Core *AMCP::Node::get_type(AMCP::Node *this)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
      if (!v5)
      {
LABEL_19:
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
        return v5;
      }
      uint64_t v19 = 0x676C6F626E647470;
      int v20 = 0;
      has_property = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::has_property(v5, (const AMCP::Address *)&v19);
      if (!has_property)
      {
LABEL_21:
        AMCP::Log::Scope_Registry::get(has_property);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v13 = **(NSObject ***)buf;
        if (*(void *)v22) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v22);
        }
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          uint64_t v14 = pthread_self();
          mach_port_t v15 = pthread_mach_thread_np(v14);
          char v18 = 4;
          strcpy((char *)&__p, "ndtp");
          *(_DWORD *)__CFString buf = 67110658;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)mach_port_t v22 = 2080;
          *(void *)&unint64_t v22[2] = "Core.h";
          __int16 v23 = 1024;
          int v24 = 391;
          __int16 v25 = 2080;
          *(void *)uint64_t v26 = "optional_value.operator BOOL() == true";
          *(_WORD *)&v26[8] = 2080;
          *(void *)&unsigned char v26[10] = &__p;
          __int16 v27 = 1024;
          int v28 = 1735159650;
          __int16 v29 = 1024;
          int v30 = 0;
          _os_log_error_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
          if (v18 < 0) {
            operator delete(__p);
          }
        }
        abort();
      }
      AMCP::Core::Core::find_operation((AMCP::Core::Core *)&__p, (int8x8_t *)v5, (unsigned int *)&v19);
      unint64_t v7 = __p;
      if (__p)
      {
        unint64_t v8 = AMCP::Implementation::get_type_marker<std::function<AMCP::Node_Type ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v8))
        {
          LODWORD(v7) = AMCP::Core::Operation::call_function<AMCP::Node_Type>(v7);
LABEL_8:
          char v9 = 0;
          unsigned int v10 = v7 & 0xFFFFFF00;
          goto LABEL_15;
        }
        unint64_t v11 = AMCP::Implementation::get_type_marker<std::function<AMCP::Thing ()(void)>>();
        if (std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v7, v11))
        {
          AMCP::Core::Operation::call_function<AMCP::Thing>((uint64_t)buf, v7);
          LODWORD(v7) = AMCP::Thing::convert_to<AMCP::Node_Type>((uint64_t)buf);
          if (*(void *)&v26[6]) {
            (*(void (**)(void, uint8_t *, void, void))&v26[6])(0, buf, 0, 0);
          }
          goto LABEL_8;
        }
        LOBYTE(v7) = 0;
      }
      unsigned int v10 = 0;
      char v9 = 1;
LABEL_15:
      has_property = (AMCP::Log::Scope_Registry *)v17;
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      if ((v9 & 1) == 0)
      {
        BOOL v5 = (AMCP::Core::Core *)(v10 | v7);
        goto LABEL_19;
      }
      goto LABEL_21;
    }
  }
  return 0;
}

void sub_1BAF41CFC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

BOOL AMCP::Node::is_connected(AMCP::Node *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "tcdnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    uint64_t v6 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<BOOL,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if ((unsigned __int16)v6 <= 0xFFu)
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      char v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unsigned int v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "ndct");
        *(_DWORD *)__CFString buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        char v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        int v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    BOOL v7 = v6 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAF41ECC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

unint64_t AMCP::Node::get_clock(AMCP::Node *this)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 3);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = v3;
  BOOL v5 = (AMCP::Core::Core *)*((void *)this + 2);
  if (v5)
  {
    strcpy(buf, "lcdnbolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    unint64_t v6 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v5, (const AMCP::Address *)buf);
    if (!HIDWORD(v6))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      char v9 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        unsigned int v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        char v13 = 4;
        strcpy((char *)__p, "ndcl");
        *(_DWORD *)__CFString buf = 67110658;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "Core.h";
        __int16 v15 = 1024;
        int v16 = 391;
        __int16 v17 = 2080;
        char v18 = "optional_value.operator BOOL() == true";
        __int16 v19 = 2080;
        int v20 = __p;
        __int16 v21 = 1024;
        int v22 = 1735159650;
        __int16 v23 = 1024;
        int v24 = 0;
        _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s a required property is missing '%s':%d:%d", buf, 0x38u);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      abort();
    }
    unint64_t v7 = v6;
  }
  else
  {
    unint64_t v7 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v7;
}

void sub_1BAF42088(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Node::get_current_time(AMCP::Node *this@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v23 = 0x676C6F626374696DLL;
      int v24 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v23);
      char v9 = v25;
      if (!v25)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v17 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          char v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Core.h";
          __int16 v43 = 1024;
          int v44 = 202;
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::optional<CA::TimeStamp>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v47 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v27);
        *(_OWORD *)std::string __p = *(_OWORD *)v27;
        uint64_t v31 = v28;
        v27[0] = 0;
        v27[1] = 0;
        uint64_t v28 = 0;
        __int16 v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>();
      mach_port_t v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v20 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          __int16 v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 154;
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::optional<CA:"
              ":TimeStamp>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v27);
        *(_OWORD *)std::string __p = *(_OWORD *)v27;
        uint64_t v31 = v28;
        v27[0] = 0;
        v27[1] = 0;
        uint64_t v28 = 0;
        __int16 v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v12 = v11;
      if (!*((void *)v11 + 7)
        || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::optional<CA::TimeStamp> ()(void)>>(),
            (mach_port_t v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v14 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          __int16 v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 161;
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::optional<CA:"
              ":TimeStamp>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)v27);
        *(_OWORD *)std::string __p = *(_OWORD *)v27;
        uint64_t v31 = v28;
        v27[0] = 0;
        v27[1] = 0;
        uint64_t v28 = 0;
        __int16 v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v13 = *((void *)v11 + 3);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    else
    {
      *a2 = 0;
      a2[64] = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *a2 = 0;
    a2[64] = 0;
  }
}

void AMCP::Node::translate_time(uint64_t a1@<X0>, long long *a2@<X1>, AMCP::Log::Scope_Registry *a3@<X8>)
{
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5 && (unint64_t v7 = std::__shared_weak_count::lock(v5)) != 0)
  {
    unint64_t v8 = v7;
    char v9 = *(int8x8_t **)(a1 + 16);
    if (v9)
    {
      uint64_t v13 = 0x676C6F6274726E74;
      int v14 = 0;
      long long v10 = a2[1];
      v12[0] = *a2;
      v12[1] = v10;
      long long v11 = a2[3];
      v12[2] = a2[2];
      v12[3] = v11;
      AMCP::Core::Core::call_operation_function<std::optional<CA::TimeStamp>,CA::TimeStamp>(a3, v9, (unsigned int *)&v13, v12);
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *((unsigned char *)a3 + 64) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *((unsigned char *)a3 + 64) = 0;
  }
}

void AMCP::Node::get_io_thread_error_handler(AMCP::Node *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v4 && (BOOL v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    unint64_t v6 = v5;
    unint64_t v7 = (int8x8_t *)*((void *)this + 2);
    if (v7)
    {
      uint64_t v23 = 0x676C6F6274686572;
      int v24 = 0;
      operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v25, v7, (unsigned int *)&v23);
      char v9 = v25;
      if (!v25)
      {
        AMCP::Log::Scope_Registry::get(operation);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v17 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          char v18 = pthread_self();
          mach_port_t v19 = pthread_mach_thread_np(v18);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Core.h";
          __int16 v43 = 1024;
          int v44 = 202;
          _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Ty"
              "pe = std::function<void ()>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
        int v47 = 202;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        __int16 v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>();
      long long v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
      if (!v11)
      {
        AMCP::Log::Scope_Registry::get(0);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v20 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          __int16 v21 = pthread_self();
          mach_port_t v22 = pthread_mach_thread_np(v21);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 154;
          _os_log_error_impl(&dword_1BAA78000, v20, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d ()>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 154;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        __int16 v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v12 = v11;
      if (!*((void *)v11 + 7)
        || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<std::function<void ()(void)> ()(void)>>(),
            (long long v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf)) == 0))
      {
        AMCP::Log::Scope_Registry::get(v11);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        int v14 = **(NSObject ***)buf;
        if (*(void *)v42) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v42);
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          __int16 v15 = pthread_self();
          mach_port_t v16 = pthread_mach_thread_np(v15);
          *(_DWORD *)__CFString buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v16;
          *(_WORD *)char v42 = 2080;
          *(void *)&v42[2] = "Operation.h";
          __int16 v43 = 1024;
          int v44 = 161;
          _os_log_error_impl(&dword_1BAA78000, v14, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v40);
        __cxa_allocate_exception(0x40uLL);
        caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v32);
        std::runtime_error::runtime_error(&v33, &v32);
        std::runtime_error::runtime_error(&v34, &v33);
        uint64_t v36 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        int v39 = -1;
        v34.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
        std::runtime_error v35 = &unk_1F148A9D0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v34);
        int v45 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = std::function<voi"
              "d ()>, Argument_Types = <>]";
        __int16 v46 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
        int v47 = 161;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v27);
        long long v30 = v27;
        uint64_t v31 = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        __int16 v29 = &unk_1F148AA90;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
      }
      uint64_t v13 = *((void *)v11 + 3);
      if (!v13) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
    else
    {
      *(void *)(a2 + 24) = 0;
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    *(void *)(a2 + 24) = 0;
  }
}

void sub_1BAF42FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,std::runtime_error a26,char a27)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Node::set_io_thread_error_handler(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v3) {
    return 0;
  }
  BOOL v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  unint64_t v6 = v5;
  unint64_t v7 = *(int8x8_t **)(a1 + 16);
  if (v7)
  {
    uint64_t v26 = 0x676C6F6274686572;
    LODWORD(v27) = 0;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v43, a2);
    operatiouint64_t n = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::find_operation((AMCP::Core::Core *)&v28, v7, (unsigned int *)&v26);
    char v9 = v28;
    if (!v28)
    {
      AMCP::Log::Scope_Registry::get(operation);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v19 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v20 = pthread_self();
        mach_port_t v21 = pthread_mach_thread_np(v20);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v21;
        *(_WORD *)__int16 v46 = 2080;
        *(void *)&v46[2] = "Core.h";
        __int16 v47 = 1024;
        int v48 = 202;
        _os_log_error_impl(&dword_1BAA78000, v19, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v35);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v44, v26, v27);
      std::runtime_error::runtime_error(&v30, &v44);
      std::runtime_error::runtime_error(&v36, &v30);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      int v49 = "Return_Type AMCP::Core::Core::call_operation_function(const Address &, Argument_Types...) const [Return_Type"
            " = void, Argument_Types = <std::function<void ()>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Core.h";
      int v51 = 202;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v34.__r_.__value_.__l.__data_);
      std::string v32 = &unk_1F148AA90;
      std::string __p = v34;
      memset(&v34, 0, sizeof(v34));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v44, (uint64_t)v43);
    unint64_t v10 = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>();
    long long v11 = (AMCP::Log::Scope_Registry *)std::__hash_table<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,AMCP::Type_ID::Hash,std::equal_to<AMCP::Type_ID>,true>,std::__unordered_map_equal<AMCP::Type_ID,std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>,std::equal_to<AMCP::Type_ID>,AMCP::Type_ID::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Type_ID,AMCP::Thing>>>::find<AMCP::Type_ID>(v9, v10);
    if (!v11)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v22 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        uint64_t v23 = pthread_self();
        mach_port_t v24 = pthread_mach_thread_np(v23);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v24;
        *(_WORD *)__int16 v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 154;
        _os_log_error_impl(&dword_1BAA78000, v22, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Operation does not have requested function", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Operation does not have requested function", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      int v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<void ()>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 154;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v12 = v11;
    if (!*((void *)v11 + 7)
      || (*(void *)__CFString buf = AMCP::Implementation::get_type_marker<std::function<void ()(std::function<void ()(void)>)>>(),
          long long v11 = (AMCP::Log::Scope_Registry *)(*((uint64_t (**)(uint64_t, uint64_t, void, uint8_t *))v12 + 7))(4, (uint64_t)v12 + 24, 0, buf), (v13 = v11) == 0))
    {
      AMCP::Log::Scope_Registry::get(v11);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      mach_port_t v16 = **(NSObject ***)buf;
      if (*(void *)v46) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v46);
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        __int16 v17 = pthread_self();
        mach_port_t v18 = pthread_mach_thread_np(v17);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v18;
        *(_WORD *)__int16 v46 = 2080;
        *(void *)&v46[2] = "Operation.h";
        __int16 v47 = 1024;
        int v48 = 161;
        _os_log_error_impl(&dword_1BAA78000, v16, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: Invalid cast", buf, 0x18u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v42);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Invalid cast", (uint64_t)&v34, v26, v27);
      std::runtime_error::runtime_error(&v35, &v34);
      std::runtime_error::runtime_error(&v36, &v35);
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      int v41 = -1;
      v36.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      uint64_t v37 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v36);
      int v49 = "Return_Type AMCP::Core::Operation::call_function(Argument_Types...) const [Return_Type = void, Argument_Type"
            "s = <std::function<void ()>>]";
      uint64_t v50 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Operation.h";
      int v51 = 161;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v30);
      std::string v32 = &unk_1F148AA90;
      *(std::runtime_error *)&__p.__r_.__value_.__l.__data_ = v30;
      __p.__r_.__value_.__r.__words[2] = v31;
      v30.__vftable = 0;
      v30.__imp_.__imp_ = 0;
      std::string::size_type v31 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, (uint64_t)&v44);
    uint64_t v14 = *((void *)v13 + 3);
    if (!v14) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v14 + 48))(v14, buf);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v44);
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v43);
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return v15;
}

uint64_t AMCP::Node::set_begin_cycle_handler()
{
  return 0;
}

uint64_t AMCP::Node::set_end_cycle_handler()
{
  return 0;
}

void AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(AMCP::IOAudio1::Device_Sub_Object *this)
{
  AMCP::IOAudio1::Device_Sub_Object::~Device_Sub_Object(this);

  JUMPOUT(0x1C1859840);
}

{
  io_object_t v2;

  *(void *)this = &unk_1F1486348;
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)(*((void *)this + 1) + 16) + 32) + 16), *((_DWORD *)this + 4));
  uint64_t v2 = *((_DWORD *)this + 5);
  if (v2) {
    IOObjectRelease(v2);
  }
}

void SincKernel::CalculateFilterCoefficients(SincKernel *this)
{
}

void sub_1BAF43ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<ADS::ObjectManager::ObjectInfo>::~__split_buffer((uint64_t)va);
  os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  _Unwind_Resume(a1);
}

unint64_t DSP_Host_Types::IDSP_Host_DictionaryData::hashed_description(DSP_Host_Types::IDSP_Host_DictionaryData *this)
{
  (*(void (**)(void **__return_ptr))(*(void *)this + 16))(__p);
  unint64_t v1 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  return v1;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::target_type()
{
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types27StringLookup_StreamSemanticC1EvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

const char *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  __n128 result = "uninitialized";
  while (1)
  {
    char v4 = &DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2];
    if (DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2] == *a2) {
      break;
    }
    v2 += 4;
    if (v2 == 12) {
      return result;
    }
  }
    return "uninitialized";
  else {
    return (const char *)*((void *)v4 + 1);
  }
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1486408;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1486408;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_1>,char const* ()(DSP_Host_Types::StreamSemanticType)>::~__func()
{
}

void *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::target_type()
{
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types27StringLookup_StreamSemanticC1EvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  while (1)
  {
    char v4 = (__guard *)&DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2];
    if (!strcmp(*(const char **)&DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::kThisLookup[v2 + 2], v3))break; {
    v2 += 4;
    }
    if (v2 == 12) {
      return 0;
    }
  }
    return *(unsigned int *)v4;
  return 0;
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1486378;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1486378;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_StreamSemantic::StringLookup_StreamSemantic(void)::$_0>,DSP_Host_Types::StreamSemanticType ()(char const*)>::~__func()
{
}

void *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::target_type()
{
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types28StringLookup_AudioProcessingC1EvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

const char *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  __n128 result = "uninitialized";
  while (1)
  {
    char v4 = &DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2];
    if (DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2] == *a2) {
      break;
    }
    v2 += 4;
    if (v2 == 40) {
      return result;
    }
  }
    return "uninitialized";
  else {
    return (const char *)*((void *)v4 + 1);
  }
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1486528;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1486528;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::~__func()
{
}

void *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::target_type()
{
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types28StringLookup_AudioProcessingC1EvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  while (1)
  {
    char v4 = (__guard *)&DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2];
    if (!strcmp(*(const char **)&DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[v2 + 2], v3))break; {
    v2 += 4;
    }
    if (v2 == 40) {
      return 0;
    }
  }
    return *(unsigned int *)v4;
  return 0;
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1486498;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1486498;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::~__func()
{
}

DSP_Host_Types::StringLookup_AudioProcessing *DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(DSP_Host_Types::StringLookup_AudioProcessing *this)
{
  v6[3] = *MEMORY[0x1E4F143B8];
  *((void *)this + 3) = 0;
  *((void *)this + 7) = 0;
  {
    qword_1E9F7A360 = (uint64_t)"uninitialized";
    dword_1E9F7A368 = 1;
    qword_1E9F7A370 = (uint64_t)"general";
    dword_1E9F7A378 = 2;
    qword_1E9F7A380 = (uint64_t)"voice isolation conferencing";
    dword_1E9F7A388 = 3;
    qword_1E9F7A390 = (uint64_t)"voice isolation";
    dword_1E9F7A398 = 4;
    qword_1E9F7A3A0 = (uint64_t)"spatial channel virtualization only";
    dword_1E9F7A3A8 = 5;
    qword_1E9F7A3B0 = (uint64_t)"spatial playback";
    dword_1E9F7A3B8 = 6;
    qword_1E9F7A3C0 = (uint64_t)"voice activity detection";
    dword_1E9F7A3C8 = 7;
    DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::kThisLookup[0] = 0;
    qword_1E9F7A3D0 = (uint64_t)"isolated audio";
    dword_1E9F7A3D8 = 8;
    qword_1E9F7A3E0 = (uint64_t)"dsp offload";
    dword_1E9F7A3E8 = 9;
    qword_1E9F7A3F0 = (uint64_t)"INTERNAL_kAuProcClientUnprocessedStream";
  }
  v4[0] = &unk_1F1486498;
  BOOL v5 = v4;
  if (v4 != (void *)this)
  {
    if (*((DSP_Host_Types::StringLookup_AudioProcessing **)this + 3) == this)
    {
      std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone((uint64_t)v4, v6);
      (*(void (**)(void *))(*v5 + 32))(v5);
      BOOL v5 = 0;
      (*(void (**)(void, void *))(**((void **)this + 3) + 24))(*((void *)this + 3), v4);
      (*(void (**)(void))(**((void **)this + 3) + 32))(*((void *)this + 3));
      *((void *)this + 3) = 0;
      BOOL v5 = v4;
      (*(void (**)(void *, DSP_Host_Types::StringLookup_AudioProcessing *))(v6[0] + 24))(v6, this);
      (*(void (**)(void *))(v6[0] + 32))(v6);
    }
    else
    {
      std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_0>,DSP_Host_Types::AudioProcessingType ()(char const*)>::__clone((uint64_t)v4, this);
      (*(void (**)(void *))(*v5 + 32))(v5);
      BOOL v5 = (void *)*((void *)this + 3);
    }
    *((void *)this + 3) = this;
  }
  std::__function::__value_func<DSP_Host_Types::AudioProcessingType ()(char const*)>::~__value_func[abi:ne180100](v4);
  uint64_t v2 = (char *)this + 32;
  v4[0] = &unk_1F1486528;
  BOOL v5 = v4;
  if ((void *)((char *)this + 32) != v4)
  {
    if (*((char **)this + 7) == v2)
    {
      std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone((uint64_t)v4, v6);
      (*(void (**)(void *))(*v5 + 32))(v5);
      BOOL v5 = 0;
      (*(void (**)(void, void *))(**((void **)this + 7) + 24))(*((void *)this + 7), v4);
      (*(void (**)(void))(**((void **)this + 7) + 32))(*((void *)this + 7));
      *((void *)this + 7) = 0;
      BOOL v5 = v4;
      (*(void (**)(void *, char *))(v6[0] + 24))(v6, (char *)this + 32);
      (*(void (**)(void *))(v6[0] + 32))(v6);
    }
    else
    {
      std::__function::__func<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_AudioProcessing::StringLookup_AudioProcessing(void)::$_1>,char const* ()(DSP_Host_Types::AudioProcessingType)>::__clone((uint64_t)v4, (void *)this + 4);
      (*(void (**)(void *))(*v5 + 32))(v5);
      BOOL v5 = (void *)*((void *)this + 7);
    }
    *((void *)this + 7) = v2;
  }
  std::__function::__value_func<char const* ()(DSP_Host_Types::AudioProcessingType)>::~__value_func[abi:ne180100](v4);
  return this;
}

void sub_1BAF4487C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::target_type()
{
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types35StringLookup_CustomPropertyDataTypeC1EvE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

const char *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = 0;
  __n128 result = "uninitialized";
  while (1)
  {
    char v4 = &DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2];
    if (DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2] == *a2) {
      break;
    }
    v2 += 4;
    if (v2 == 32) {
      return result;
    }
  }
    return "uninitialized";
  else {
    return (const char *)*((void *)v4 + 1);
  }
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1486648;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F1486648;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_1>,char const* ()(DSP_Host_Types::CustomPropertyDataType)>::~__func()
{
}

void *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::target_type()
{
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN14DSP_Host_Types35StringLookup_CustomPropertyDataTypeC1EvE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::operator()(uint64_t a1, const char **a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *a2;
  while (1)
  {
    char v4 = (__guard *)&DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2];
    if (!strcmp(*(const char **)&DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::kThisLookup[v2 + 2], v3))break; {
    v2 += 4;
    }
    if (v2 == 32) {
      return 0;
    }
  }
    return *(unsigned int *)v4;
  return 0;
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F14865B8;
}

void *std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::__clone()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_1F14865B8;
  return result;
}

void std::__function::__func<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0,std::allocator<DSP_Host_Types::StringLookup_CustomPropertyDataType::StringLookup_CustomPropertyDataType(void)::$_0>,DSP_Host_Types::CustomPropertyDataType ()(char const*)>::~__func()
{
}

void HALS_ObjectMap::MapObject(HALS_ObjectMap *this, uint64_t a2, HALS_Object *a3)
{
  int v4 = (int)this;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (v4 && a2)
  {
    mach_port_t v21 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    int v22 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    BOOL v5 = (void **)HALS_ObjectMap::sObjectInfoList;
    uint64_t v6 = *(void *)HALS_ObjectMap::sObjectInfoList;
    unint64_t v7 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
    uint64_t v8 = *(void *)HALS_ObjectMap::sObjectInfoList;
    if (*(void *)HALS_ObjectMap::sObjectInfoList != v7)
    {
      while (*(_DWORD *)(v8 + 16) != v4)
      {
        v8 += 24;
        if (v8 == v7)
        {
          uint64_t v8 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
          break;
        }
      }
    }
    if (v8 == v7)
    {
      unint64_t v9 = *(void *)(HALS_ObjectMap::sObjectInfoList + 16);
      if (v7 >= v9)
      {
        unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v6) >> 3);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v6) >> 3);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x555555555555555) {
          unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          unint64_t v14 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v14);
        }
        else {
          uint64_t v15 = 0;
        }
        unint64_t v16 = v14 + 24 * v11;
        unint64_t v17 = v14 + 24 * v15;
        *(void *)unint64_t v16 = 1;
        *(void *)(v16 + 8) = a2;
        *(_DWORD *)(v16 + 16) = v4;
        unint64_t v10 = (void *)(v16 + 24);
        mach_port_t v19 = (char *)*v5;
        mach_port_t v18 = (char *)v5[1];
        if (v18 != *v5)
        {
          do
          {
            long long v20 = *(_OWORD *)(v18 - 24);
            *(_DWORD *)(v16 - 8) = *((_DWORD *)v18 - 2);
            *(_OWORD *)(v16 - 24) = v20;
            v16 -= 24;
            v18 -= 24;
          }
          while (v18 != v19);
          mach_port_t v18 = (char *)*v5;
        }
        *BOOL v5 = (void *)v16;
        v5[1] = v10;
        v5[2] = (void *)v17;
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        *(void *)unint64_t v7 = 1;
        *(void *)(v7 + 8) = a2;
        *(_DWORD *)(v7 + 16) = v4;
        unint64_t v10 = (void *)(v7 + 24);
      }
      v5[1] = v10;
    }
    HALB_Mutex::Locker::~Locker(&v21);
  }
}

void sub_1BAF44C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, HALB_Mutex *a9)
{
}

void HALS_ObjectMap::Initialize(HALS_ObjectMap *this)
{
}

void sub_1BAF44D2C(_Unwind_Exception *a1)
{
  MEMORY[0x1C1859840](v1, 0x10A1C40CF3E2C79);
  _Unwind_Resume(a1);
}

void std::vector<HALS_ObjectMap::ObjectInfo>::reserve(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) <= 0x1FF)
  {
    uint64_t v3 = *(unsigned char **)(a1 + 8);
    int v4 = (char *)operator new(0x3000uLL);
    BOOL v5 = &v4[v3 - v1];
    uint64_t v6 = v5;
    if (v3 != v1)
    {
      unint64_t v7 = &v4[v3 - v1];
      do
      {
        long long v8 = *(_OWORD *)(v3 - 24);
        uint64_t v6 = v7 - 24;
        *((_DWORD *)v7 - 2) = *((_DWORD *)v3 - 2);
        *(_OWORD *)(v7 - 24) = v8;
        v3 -= 24;
        v7 -= 24;
      }
      while (v3 != v1);
    }
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v4 + 12288;
    if (v1)
    {
      operator delete(v1);
    }
  }
}

void HALS_ObjectMap::_UnmapObject(HALS_ObjectMap *this)
{
  if (this)
  {
    uint64_t v1 = HALS_ObjectMap::sObjectInfoList;
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v3 = *(char **)HALS_ObjectMap::sObjectInfoList;
      uint64_t v2 = *(char **)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(char **)HALS_ObjectMap::sObjectInfoList != v2)
      {
        while (*((_DWORD *)v3 + 4) != this)
        {
          v3 += 24;
          if (v3 == v2)
          {
            uint64_t v3 = *(char **)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v3 != v2)
      {
        int64_t v4 = v2 - (v3 + 24);
        if (v2 != v3 + 24) {
          this = (HALS_ObjectMap *)memmove(v3, v3 + 24, v4 - 4);
        }
        *(void *)(v1 + 8) = &v3[v4];
        HALS_ObjectMap::_ReclaimSpace(this);
      }
    }
  }
}

void HALS_ObjectMap::_ReclaimSpace(HALS_ObjectMap *this)
{
  uint64_t v1 = (void **)HALS_ObjectMap::sObjectInfoList;
  uint64_t v2 = *(char **)HALS_ObjectMap::sObjectInfoList;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL
     * ((uint64_t)(*(void *)(HALS_ObjectMap::sObjectInfoList + 16) - *(void *)HALS_ObjectMap::sObjectInfoList) >> 3);
  if (v3 < 0x201) {
    return;
  }
  if (v3 + 0x5555555555555555 * ((uint64_t)(*(void *)(HALS_ObjectMap::sObjectInfoList + 8) - (void)v2) >> 3) < 0x15) {
    return;
  }
  int64x2_t v4 = *(int64x2_t *)(HALS_ObjectMap::sObjectInfoList + 8);
  int64x2_t v5 = vshrq_n_s64(vsubq_s64(v4, vdupq_n_s64((unint64_t)v2)), 3uLL);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * v5.i64[0];
  unint64_t v7 = v6;
  if (0xAAAAAAAAAAAAAAABLL * v5.i64[1] <= v6) {
    return;
  }
  if ((char *)v4.i64[0] == v2)
  {
    unint64_t v12 = 0;
    uint64_t v10 = 24 * v6;
    goto LABEL_10;
  }
  long long v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v6);
  unint64_t v9 = (char *)*v1;
  uint64_t v2 = (char *)v1[1];
  uint64_t v10 = (uint64_t)&v8[24 * v7];
  unint64_t v12 = &v8[24 * v11];
  if (v2 == *v1)
  {
LABEL_10:
    uint64_t v13 = v10;
    goto LABEL_11;
  }
  uint64_t v13 = v10;
  do
  {
    long long v14 = *(_OWORD *)(v2 - 24);
    *(_DWORD *)(v13 - 8) = *((_DWORD *)v2 - 2);
    *(_OWORD *)(v13 - 24) = v14;
    v13 -= 24;
    v2 -= 24;
  }
  while (v2 != v9);
  uint64_t v2 = (char *)*v1;
LABEL_11:
  unsigned char *v1 = (void *)v13;
  v1[1] = (void *)v10;
  v1[2] = v12;
  if (v2)
  {
    operator delete(v2);
  }
}

unint64_t HALS_ObjectMap::IsObjectMapped(unint64_t this)
{
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    int64x2_t v5 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    int v6 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v3 = *(void *)HALS_ObjectMap::sObjectInfoList;
      uint64_t v2 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(void *)HALS_ObjectMap::sObjectInfoList != v2)
      {
        while (*(_DWORD *)(v3 + 16) != this)
        {
          v3 += 24;
          if (v3 == v2)
          {
            uint64_t v3 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      this = v3 != v2;
    }
    else
    {
      this = 0;
    }
    HALB_Mutex::Locker::~Locker(&v5);
  }
  return this;
}

unint64_t HALS_ObjectMap::IsObjectMapped(unint64_t this, const HALS_Object *a2)
{
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    int v6 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    int v7 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v4 = *(void *)HALS_ObjectMap::sObjectInfoList;
      uint64_t v3 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(void *)HALS_ObjectMap::sObjectInfoList != v3)
      {
        while (*(void *)(v4 + 8) != this)
        {
          v4 += 24;
          if (v4 == v3)
          {
            uint64_t v4 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      this = v4 != v3;
    }
    else
    {
      this = 0;
    }
    HALB_Mutex::Locker::~Locker(&v6);
  }
  return this;
}

uint64_t HALS_ObjectMap::CopyObjectByObjectID(HALS_ObjectMap *this)
{
  int v1 = (int)this;
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (!v1) {
    return 0;
  }
  int v6 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
  int v7 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
  if (!HALS_ObjectMap::sObjectInfoList) {
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
  uint64_t v3 = *(void *)HALS_ObjectMap::sObjectInfoList;
  if (*(void *)HALS_ObjectMap::sObjectInfoList != v2)
  {
    while (*(_DWORD *)(v3 + 16) != v1)
    {
      v3 += 24;
      if (v3 == v2)
      {
        uint64_t v3 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
        break;
      }
    }
  }
  if (v3 == v2)
  {
LABEL_9:
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(*(void *)HALS_ObjectMap::sObjectInfoList
                   + 8 * ((v3 - *(void *)HALS_ObjectMap::sObjectInfoList) >> 3)
                   + 8);
    ++*(void *)v3;
  }
  HALB_Mutex::Locker::~Locker(&v6);
  return v4;
}

void HALS_ObjectMap::RetainObject(HALS_ObjectMap *this, HALS_Object *a2)
{
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    int64x2_t v5 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    int v6 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v3 = *(void *)HALS_ObjectMap::sObjectInfoList;
      uint64_t v4 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(void *)HALS_ObjectMap::sObjectInfoList != v4)
      {
        while (*(HALS_ObjectMap **)(v3 + 8) != this)
        {
          v3 += 24;
          if (v3 == v4)
          {
            uint64_t v3 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v3 != v4) {
        ++*(void *)v3;
      }
    }
    HALB_Mutex::Locker::~Locker(&v5);
  }
}

void HALS_ObjectMap::ReleaseObject(HALS_ObjectMap *this, HALS_Object *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    uint64_t v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    int v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v4 = *(void *)HALS_ObjectMap::sObjectInfoList;
      uint64_t v3 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(void *)HALS_ObjectMap::sObjectInfoList != v3)
      {
        while (*(HALS_ObjectMap **)(v4 + 8) != this)
        {
          v4 += 24;
          if (v4 == v3)
          {
            uint64_t v4 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v4 != v3)
      {
        if (*(void *)v4)
        {
          uint64_t v5 = *(void *)v4 - 1;
          *(void *)uint64_t v4 = v5;
          if (!v5)
          {
            int v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)this + 40))(this);
            if (v6)
            {
              int v6 = (HALS_ObjectMap *)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
              if (v6)
              {
                *(_DWORD *)__CFString buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_ObjectMap.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 348;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject: Destroying an active object.", buf, 0x12u);
              }
            }
            uint64_t v7 = HALS_ObjectMap::sObjectInfoList;
            uint64_t v8 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            uint64_t v9 = v8 - (v4 + 24);
            if (v8 != v4 + 24) {
              int v6 = (HALS_ObjectMap *)memmove((void *)v4, (const void *)(v4 + 24), v9 - 4);
            }
            *(void *)(v7 + 8) = v4 + v9;
            HALS_ObjectMap::_ReclaimSpace(v6);
            HALS_NotificationManager::ObjectIsDead((HALS_NotificationManager *)*((unsigned int *)this + 4));
            if ((*(unsigned int (**)(HALS_ObjectMap *))(*(void *)this + 40))(this)
              && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v10 = *((_DWORD *)this + 4);
              *(_DWORD *)__CFString buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 357;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v10;
              LOWORD(v16) = 2048;
              *(void *)((char *)&v16 + 2) = this;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            uint64_t v11 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(void *)__CFString buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZN14HALS_ObjectMap14_ReleaseObjectEP11HALS_Object_block_invoke;
            *(void *)&long long v16 = &__block_descriptor_tmp_17890;
            *((void *)&v16 + 1) = this;
            unsigned __int8 v12 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if (v12) {
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            }
            dispatch_async(*v11, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v13);
  }
}

void sub_1BAF455B0(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF45580);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap14_ReleaseObjectEP11HALS_Object_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void HALS_ObjectMap::ReleaseObject_LongTerm(HALS_ObjectMap *this, HALS_Object *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    uint64_t v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    int v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v4 = *(void *)HALS_ObjectMap::sObjectInfoList;
      uint64_t v3 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(void *)HALS_ObjectMap::sObjectInfoList != v3)
      {
        while (*(HALS_ObjectMap **)(v4 + 8) != this)
        {
          v4 += 24;
          if (v4 == v3)
          {
            uint64_t v4 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v4 != v3)
      {
        if (*(void *)v4)
        {
          uint64_t v5 = *(void *)v4 - 1;
          *(void *)uint64_t v4 = v5;
          if (!v5)
          {
            int v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)this + 40))(this);
            if (v6)
            {
              int v6 = (HALS_ObjectMap *)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR);
              if (v6)
              {
                *(_DWORD *)__CFString buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_ObjectMap.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 430;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject_LongTerm: Destroying an active object.", buf, 0x12u);
              }
            }
            uint64_t v7 = HALS_ObjectMap::sObjectInfoList;
            uint64_t v8 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            uint64_t v9 = v8 - (v4 + 24);
            if (v8 != v4 + 24) {
              int v6 = (HALS_ObjectMap *)memmove((void *)v4, (const void *)(v4 + 24), v9 - 4);
            }
            *(void *)(v7 + 8) = v4 + v9;
            HALS_ObjectMap::_ReclaimSpace(v6);
            HALS_NotificationManager::ObjectIsDead((HALS_NotificationManager *)*((unsigned int *)this + 4));
            if ((*(unsigned int (**)(HALS_ObjectMap *))(*(void *)this + 40))(this)
              && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v10 = *((_DWORD *)this + 4);
              *(_DWORD *)__CFString buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 439;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v10;
              LOWORD(v16) = 2048;
              *(void *)((char *)&v16 + 2) = this;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ReleaseObject_LongTerm: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            uint64_t v11 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(void *)__CFString buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZN14HALS_ObjectMap23_ReleaseObject_LongTermEP11HALS_Objectj_block_invoke;
            *(void *)&long long v16 = &__block_descriptor_tmp_2_17900;
            *((void *)&v16 + 1) = this;
            unsigned __int8 v12 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if (v12) {
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            }
            dispatch_async(*v11, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v13);
  }
}

void sub_1BAF458E0(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF458B0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap23_ReleaseObject_LongTermEP11HALS_Objectj_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void HALS_ObjectMap::ObjectIsDead(HALS_ObjectMap *this, HALS_Object *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    unsigned __int8 v12 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    uint64_t v3 = (HALS_ObjectMap *)HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    int v13 = (int)v3;
    uint64_t v4 = HALS_ObjectMap::sObjectInfoList;
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v6 = *(void *)HALS_ObjectMap::sObjectInfoList;
      uint64_t v5 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
      if (*(void *)HALS_ObjectMap::sObjectInfoList != v5)
      {
        while (*(HALS_ObjectMap **)(v6 + 8) != this)
        {
          v6 += 24;
          if (v6 == v5)
          {
            uint64_t v6 = *(void *)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v6 != v5)
      {
        if (*(void *)v6)
        {
          uint64_t v7 = *(void *)v6 - 1;
          *(void *)uint64_t v6 = v7;
          if (!v7)
          {
            uint64_t v8 = v5 - (v6 + 24);
            if (v5 != v6 + 24) {
              uint64_t v3 = (HALS_ObjectMap *)memmove((void *)v6, (const void *)(v6 + 24), v8 - 4);
            }
            *(void *)(v4 + 8) = v6 + v8;
            HALS_ObjectMap::_ReclaimSpace(v3);
            HALS_NotificationManager::ObjectIsDead((HALS_NotificationManager *)*((unsigned int *)this + 4));
            if ((*(unsigned int (**)(HALS_ObjectMap *))(*(void *)this + 40))(this)
              && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v9 = *((_DWORD *)this + 4);
              *(_DWORD *)__CFString buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 474;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v9;
              LOWORD(v15) = 2048;
              *(void *)((char *)&v15 + 2) = this;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ObjectIsDead: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            int v10 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(void *)__CFString buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZN14HALS_ObjectMap13_ObjectIsDeadEP11HALS_Object_block_invoke;
            *(void *)&long long v15 = &__block_descriptor_tmp_3_17904;
            *((void *)&v15 + 1) = this;
            unsigned __int8 v11 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if (v11) {
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            }
            dispatch_async(*v10, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v12);
  }
}

void sub_1BAF45B78(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF45B48);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap13_ObjectIsDeadEP11HALS_Object_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void HALS_ObjectMap::ObjectIsDead(HALS_ObjectMap *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  if (this)
  {
    unsigned __int8 v12 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
    uint64_t v2 = (HALS_ObjectMap *)HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
    int v13 = (int)v2;
    uint64_t v3 = HALS_ObjectMap::sObjectInfoList;
    if (HALS_ObjectMap::sObjectInfoList)
    {
      uint64_t v4 = *(uint64_t **)(HALS_ObjectMap::sObjectInfoList + 8);
      uint64_t v5 = *(uint64_t **)HALS_ObjectMap::sObjectInfoList;
      if (*(uint64_t **)HALS_ObjectMap::sObjectInfoList != v4)
      {
        while (*((_DWORD *)v5 + 4) != this)
        {
          v5 += 3;
          if (v5 == v4)
          {
            uint64_t v5 = *(uint64_t **)(HALS_ObjectMap::sObjectInfoList + 8);
            break;
          }
        }
      }
      if (v5 != v4)
      {
        uint64_t v6 = *v5;
        if (*v5)
        {
          uint64_t v7 = *(_DWORD **)(*(void *)HALS_ObjectMap::sObjectInfoList
                          + 8 * (((uint64_t)v5 - *(void *)HALS_ObjectMap::sObjectInfoList) >> 3)
                          + 8);
          *uint64_t v5 = v6 - 1;
          if (v6 == 1)
          {
            uint64_t v8 = (char *)v4 - (char *)(v5 + 3);
            if (v4 != v5 + 3) {
              uint64_t v2 = (HALS_ObjectMap *)memmove(v5, v5 + 3, v8 - 4);
            }
            *(void *)(v3 + 8) = (char *)v5 + v8;
            HALS_ObjectMap::_ReclaimSpace(v2);
            HALS_NotificationManager::ObjectIsDead(this);
            if ((*(unsigned int (**)(_DWORD *))(*(void *)v7 + 40))(v7)
              && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              int v9 = v7[4];
              *(_DWORD *)__CFString buf = 136315906;
              *(void *)&uint8_t buf[4] = "HALS_ObjectMap.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 510;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v9;
              LOWORD(v15) = 2048;
              *(void *)((char *)&v15 + 2) = v7;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_ObjectIsDead: an active object (%d, %p) is being destroyed. This is probably a bug.", buf, 0x22u);
            }
            int v10 = (dispatch_queue_t *)HALS_ObjectMap::sNormalPriorityQueue;
            *(void *)__CFString buf = MEMORY[0x1E4F143A8];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&buf[16] = ___ZN14HALS_ObjectMap13_ObjectIsDeadEj_block_invoke;
            *(void *)&long long v15 = &__block_descriptor_tmp_4_17908;
            *((void *)&v15 + 1) = v7;
            unsigned __int8 v11 = atomic_load((unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 32));
            if (v11) {
              atomic_store(1u, (unsigned __int8 *)(HALS_ObjectMap::sNormalPriorityQueue + 33));
            }
            dispatch_async(*v10, buf);
          }
        }
      }
    }
    HALB_Mutex::Locker::~Locker(&v12);
  }
}

void sub_1BAF45E3C(_Unwind_Exception *exception_object, int a2, ...)
{
  va_start(va, a2);
  if (a2)
  {
    HALB_Mutex::Locker::~Locker((HALB_Mutex **)va);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF45E08);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap13_ObjectIsDeadEj_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void HALS_ObjectMap::Dump(HALS_ObjectMap *this)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize);
  int v13 = (HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex;
  int v14 = HALB_Mutex::Lock((HALB_Mutex *)HALS_ObjectMap::sObjectInfoListMutex);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__CFString buf = 136315394;
    mach_port_t v18 = "HALS_ObjectMap.cpp";
    __int16 v19 = 1024;
    int v20 = 529;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  \nHALS_ObjectMap::_Dump: ->", buf, 0x12u);
  }
  uint64_t v1 = HALS_ObjectMap::sObjectInfoList;
  if (!HALS_ObjectMap::sObjectInfoList)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_20;
    }
    *(_DWORD *)__CFString buf = 136315394;
    mach_port_t v18 = "HALS_ObjectMap.cpp";
    __int16 v19 = 1024;
    int v20 = 565;
    uint64_t v5 = MEMORY[0x1E4F14500];
    uint64_t v6 = "%25s:%-5d    No Object List";
LABEL_11:
    _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 0x12u);
    goto LABEL_20;
  }
  uint64_t v3 = *(char **)HALS_ObjectMap::sObjectInfoList;
  uint64_t v2 = *(char **)(HALS_ObjectMap::sObjectInfoList + 8);
  BOOL v4 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
  if (v3 == v2)
  {
    if (!v4) {
      goto LABEL_20;
    }
    *(_DWORD *)__CFString buf = 136315394;
    mach_port_t v18 = "HALS_ObjectMap.cpp";
    __int16 v19 = 1024;
    int v20 = 560;
    uint64_t v5 = MEMORY[0x1E4F14500];
    uint64_t v6 = "%25s:%-5d    No Objects";
    goto LABEL_11;
  }
  if (v4)
  {
    *(_DWORD *)__CFString buf = 136315650;
    mach_port_t v18 = "HALS_ObjectMap.cpp";
    __int16 v19 = 1024;
    int v20 = 542;
    __int16 v21 = 1024;
    int v22 = -1431655765 * ((unint64_t)(v2 - v3) >> 3);
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d    %d Objects", buf, 0x18u);
    uint64_t v1 = HALS_ObjectMap::sObjectInfoList;
    uint64_t v3 = *(char **)HALS_ObjectMap::sObjectInfoList;
    uint64_t v2 = *(char **)(HALS_ObjectMap::sObjectInfoList + 8);
  }
  if (v3 != v2)
  {
    uint64_t v7 = MEMORY[0x1E4F14500];
    do
    {
      uint64_t v8 = (_DWORD *)*((void *)v3 + 1);
      int v9 = (HALB_Info *)v8[5];
      int BaseClass = v8[6];
      int v11 = v8[4];
      if (BaseClass == v9) {
        int BaseClass = HALB_Info::GetBaseClass((HALB_Info *)v8[6]);
      }
      uint64_t v12 = *(void *)v3;
      if (!HALB_Info::IsSubClass(v9, 1633907820))
      {
        v16[0] = HIBYTE(BaseClass);
        v16[1] = BYTE2(BaseClass);
        v16[2] = BYTE1(BaseClass);
        v16[3] = BaseClass;
        v16[4] = 0;
        v15[0] = BYTE3(v9);
        v15[1] = BYTE2(v9);
        v15[2] = BYTE1(v9);
        uint64_t v15[3] = (_BYTE)v9;
        v15[4] = 0;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__CFString buf = 136316418;
          mach_port_t v18 = "HALS_ObjectMap.cpp";
          __int16 v19 = 1024;
          int v20 = 554;
          __int16 v21 = 1024;
          int v22 = v11;
          __int16 v23 = 2080;
          mach_port_t v24 = v15;
          __int16 v25 = 2080;
          uint64_t v26 = v16;
          __int16 v27 = 2048;
          uint64_t v28 = v12;
          _os_log_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_DEFAULT, "%25s:%-5d    Object ID: %4d | Class: '%s' | Base Class: '%s' | Ref: %4lld", buf, 0x36u);
          uint64_t v1 = HALS_ObjectMap::sObjectInfoList;
        }
      }
      v3 += 24;
    }
    while (v3 != *(char **)(v1 + 8));
  }
LABEL_20:
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__CFString buf = 136315394;
    mach_port_t v18 = "HALS_ObjectMap.cpp";
    __int16 v19 = 1024;
    int v20 = 567;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_ObjectMap::_Dump: <-\n", buf, 0x12u);
  }
  HALB_Mutex::Locker::~Locker(&v13);
}

void *std::vector<HALS_ObjectMap::ObjectInfo>::__init_with_size[abi:ne180100]<HALS_ObjectMap::ObjectInfo*,HALS_ObjectMap::ObjectInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    BOOL v4 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4);
    uint64_t v7 = result;
    *BOOL v4 = result;
    v4[1] = result;
    v4[2] = &result[3 * v8];
    uint64_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9 - 4);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_1BAF4632C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN14HALS_ObjectMap17DestroyAllObjectsEv_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

uint64_t ___ZN14HALS_ObjectMap17DestroyAllObjectsEv_block_invoke_2(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 24))();
  }
  return result;
}

void MutationItinerary::Reset(MutationItinerary *this)
{
  *(_WORD *)this = 0;
  uint64_t v2 = *((void *)this + 4);
  for (uint64_t i = *((void *)this + 5); i != v2; i -= 48)
  {
    BOOL v4 = *(const void **)(i - 48);
    std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v4);
  }
  uint64_t v6 = (void *)*((void *)this + 2);
  uint64_t v5 = (void *)((char *)this + 16);
  uint64_t v5[3] = v2;
  std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(v6);
  *(v5 - 1) = v5;
  *uint64_t v5 = 0;
  v5[1] = 0;
  v5[6] = v5[5];
}

BOOL MutationItinerary::LoadFromNegotiateResponse_util(const __CFString ***this, const DSP_Host_Types::NegotiateResponse *a2, char a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  MutationItinerary::Reset((MutationItinerary *)this);
  uint64_t v7 = *((void *)a2 + 12);
  *(unsigned char *)this = v7 == 0;
  if (v7) {
    char v8 = 0;
  }
  else {
    char v8 = a3;
  }
  *((unsigned char *)this + 1) = v8;
  if (v7)
  {
    AMCP::Log::Scope_Registry::get(v6);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    BOOL result = os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    if (result)
    {
      int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)__CFString buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_MutationItinerary.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 41;
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Negotiate response failed", buf, 0x18u);
      return 0;
    }
  }
  else
  {
    int v13 = (uint64_t *)*((void *)a2 + 9);
    int v14 = (uint64_t *)*((void *)a2 + 10);
    if (v13 != v14)
    {
      int v65 = (uint64_t **)(this + 1);
      do
      {
        uint64_t v15 = *v13;
        if (*(unsigned char *)(*v13 + 64))
        {
          *(void *)__CFString buf = 0;
          uint8_t buf[8] = 0;
          buf[16] = 0;
          LOBYTE(v70) = 0;
          char v71 = 0;
          LOBYTE(v72) = 0;
          char v73 = 0;
          LOBYTE(v74) = 0;
          char v75 = 0;
          if (*(char *)(v15 + 63) < 0) {
            std::string::__init_copy_ctor_external(&v67, *(const std::string::value_type **)(v15 + 40), *(void *)(v15 + 48));
          }
          else {
            std::string v67 = *(std::string *)(v15 + 40);
          }
          if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v16 = &v67;
          }
          else {
            uint64_t v16 = (std::string *)v67.__r_.__value_.__r.__words[0];
          }
          if (v16)
          {
            if ((v67.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              CFIndex size = HIBYTE(v67.__r_.__value_.__r.__words[2]);
            }
            else {
              CFIndex size = v67.__r_.__value_.__l.__size_;
            }
            CFStringRef v18 = CFStringCreateWithBytes(0, (const UInt8 *)v16, size, 0x8000100u, 0);
            CFTypeRef cf = v18;
            if (!v18)
            {
              exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(exception, "Could not construct");
              __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            *(void *)__CFString buf = v18;
            CFRetain(v18);
          }
          else
          {
            CFTypeRef cf = 0;
            *(void *)__CFString buf = 0;
          }
          uint64_t v19 = *v13;
          unint64_t v20 = (unint64_t)this[5];
          __int16 v21 = this[6];
          *(void *)&uint8_t buf[8] = *(void *)(*v13 + 88);
          buf[16] = *(unsigned char *)(v19 + 96);
          int v70 = *(_DWORD *)(v19 + 224);
          char v71 = *(unsigned char *)(v19 + 228);
          int v72 = *(_DWORD *)(v19 + 200);
          char v73 = *(unsigned char *)(v19 + 204);
          char v75 = *(unsigned char *)(v19 + 180);
          int v74 = *(_DWORD *)(v19 + 176);
          if (v20 >= (unint64_t)v21)
          {
            __int16 v23 = this[4];
            unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (void)v23) >> 4);
            unint64_t v25 = v24 + 1;
            if (v24 + 1 > 0x555555555555555) {
              std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v23) >> 4);
            if (2 * v26 > v25) {
              unint64_t v25 = 2 * v26;
            }
            if (v26 >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v27 = 0x555555555555555;
            }
            else {
              unint64_t v27 = v25;
            }
            if (v27)
            {
              uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v27);
              uint64_t v30 = v29;
            }
            else
            {
              uint64_t v28 = 0;
              uint64_t v30 = 0;
            }
            uint64_t v31 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device const&,MutationItinerary::Device*>((uint64_t)&v28[48 * v24], (uint64_t)buf);
            std::runtime_error v33 = this[4];
            unint64_t v32 = (unint64_t)this[5];
            if ((const __CFString **)v32 == v33)
            {
              int64x2_t v38 = vdupq_n_s64(v32);
              uint64_t v34 = v31;
            }
            else
            {
              uint64_t v34 = v31;
              do
              {
                uint64_t v35 = *(void *)(v32 - 48);
                v32 -= 48;
                *(void *)(v34 - 48) = v35;
                v34 -= 48;
                *(void *)unint64_t v32 = 0;
                long long v36 = *(_OWORD *)(v32 + 8);
                long long v37 = *(_OWORD *)(v32 + 24);
                *(void *)(v34 + 37) = *(void *)(v32 + 37);
                *(_OWORD *)(v34 + 24) = v37;
                *(_OWORD *)(v34 + 8) = v36;
              }
              while ((const __CFString **)v32 != v33);
              int64x2_t v38 = *((int64x2_t *)this + 2);
            }
            uint64_t v39 = (const __CFString **)&v28[48 * v30];
            uint64_t v22 = v31 + 48;
            this[4] = (const __CFString **)v34;
            this[5] = (const __CFString **)(v31 + 48);
            this[6] = v39;
            int v41 = (char *)v38.i64[1];
            uint64_t v40 = (char *)v38.i64[0];
            while (v41 != v40)
            {
              char v42 = (const void *)*((void *)v41 - 6);
              v41 -= 48;
              std::__destroy_at[abi:ne180100]<MutationItinerary::Device,0>(v42);
            }
            if (v40) {
              operator delete(v40);
            }
          }
          else
          {
            uint64_t v22 = std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device const&,MutationItinerary::Device*>(v20, (uint64_t)buf)+ 48;
          }
          this[5] = (const __CFString **)v22;
          __int16 v43 = (unsigned char *)*v13;
          int v44 = *(unsigned __int8 *)(*v13 + 121);
          if (*(unsigned char *)(*v13 + 121)) {
            int v44 = v43[120] != 0;
          }
          if (v43[145]) {
            BOOL v45 = v43[144] != 0;
          }
          else {
            BOOL v45 = 0;
          }
          if ((v44 | v45) == 1)
          {
            __int16 v46 = (void **)std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__find_equal<applesauce::CF::StringRef>((uint64_t)v65, &v68, (const __CFString **)&cf);
            __int16 v47 = *v46;
            if (!*v46)
            {
              int v48 = (uint64_t **)v46;
              __int16 v47 = operator new(0x30uLL);
              *(void *)unint64_t v77 = this + 2;
              CFTypeRef v49 = cf;
              if (cf) {
                CFRetain(cf);
              }
              v47[4] = v49;
              *((unsigned char *)v47 + 40) = 0;
              v77[8] = 1;
              std::__tree<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::__map_value_compare<boost::exception_detail::type_info_,std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>,std::less<boost::exception_detail::type_info_>,true>,std::allocator<std::__value_type<boost::exception_detail::type_info_,boost::shared_ptr<boost::exception_detail::error_info_base>>>>::__insert_node_at(v65, v68, v48, v47);
              *(void *)unint64_t v76 = 0;
              std::unique_ptr<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *>>>>::reset[abi:ne180100]((uint64_t)v76);
            }
            *((unsigned char *)v47 + 40) = 1;
          }
          if (cf) {
            CFRelease(cf);
          }
          if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v67.__r_.__value_.__l.__data_);
          }
          uint64_t v6 = *(AMCP::Log::Scope_Registry **)buf;
          if (*(void *)buf) {
            CFRelease(*(CFTypeRef *)buf);
          }
        }
        else
        {
          uint64_t v6 = (AMCP::Log::Scope_Registry *)os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
          if (v6)
          {
            *(_DWORD *)__CFString buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_MutationItinerary.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 49;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Skipping DSP configuration change request entry because the provided device has no UID.", buf, 0x12u);
          }
        }
        v13 += 2;
      }
      while (v13 != v14);
    }
    if (*((void *)a2 + 3) != *((void *)a2 + 4) && *((void *)a2 + 6) != *((void *)a2 + 7))
    {
      AMCP::Log::Scope_Registry::get(v6);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v50 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
      {
        int v62 = pthread_self();
        mach_port_t v63 = pthread_mach_thread_np(v62);
        *(_DWORD *)__CFString buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v63;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_MutationItinerary.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 83;
        _os_log_debug_impl(&dword_1BAA78000, v50, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] DSP configuration change contains client formats for both input and output at the same time which is not supported.", buf, 0x18u);
      }
    }
    if (this[3]) {
      goto LABEL_73;
    }
    std::string v55 = this[4];
    int64x2_t v54 = this[5];
    if (v55 != v54)
    {
      std::logic_error v56 = v55 + 6;
      do
      {
        int v57 = *((unsigned __int8 *)v56 - 20) | *((unsigned __int8 *)v56 - 32) | *((unsigned __int8 *)v56 - 12) | *((unsigned __int8 *)v56 - 4);
        BOOL v59 = v57 == 0;
        BOOL v58 = v57 != 0;
        BOOL v59 = !v59 || v56 == v54;
        v56 += 6;
      }
      while (!v59);
      if (v58) {
        goto LABEL_73;
      }
    }
    if (this[7] != this[8])
    {
LABEL_73:
      std::map<applesauce::CF::StringRef,BOOL>::map[abi:ne180100]((uint64_t)buf, this + 1);
      MutationItinerary::Reset((MutationItinerary *)this);
      BOOL v59 = *((void *)a2 + 12) == 0;
      *(unsigned char *)this = v59;
      if (v59) {
        char v52 = a3;
      }
      else {
        char v52 = 0;
      }
      *((unsigned char *)this + 1) = v52;
      if (*(void *)&buf[16])
      {
        if (this + 1 != (const __CFString ***)buf) {
          std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__tree_node<std::__value_type<applesauce::CF::StringRef,BOOL>,void *> *,long>>((uint64_t)(this + 1), *(void **)buf, &buf[8]);
        }
        AMCP::Log::Scope_Registry::get(v51);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v76, "com.apple.coreaudio", "AMCP");
        long long v53 = **(NSObject ***)v76;
        if (*(void *)v77) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v77);
        }
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          int v60 = pthread_self();
          mach_port_t v61 = pthread_mach_thread_np(v60);
          *(_DWORD *)unint64_t v76 = 67109634;
          *(_DWORD *)&v76[4] = v61;
          *(_WORD *)unint64_t v77 = 2080;
          *(void *)&v77[2] = "HALS_MutationItinerary.cpp";
          __int16 v78 = 1024;
          int v79 = 110;
          _os_log_debug_impl(&dword_1BAA78000, v53, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][reference] DSP negotiate requests for reference stream(s) will be retained; other re"
            "quests are unsupported.",
            v76,
            0x18u);
        }
      }
      std::__tree<std::__value_type<applesauce::CF::StringRef,BOOL>,std::__map_value_compare<applesauce::CF::StringRef,std::__value_type<applesauce::CF::StringRef,BOOL>,std::less<applesauce::CF::StringRef>,true>,std::allocator<std::__value_type<applesauce::CF::StringRef,BOOL>>>::destroy(*(void **)&buf[8]);
    }
    return *(unsigned char *)this != 0;
  }
  return result;
}

void sub_1BAF46B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,void *a25)
{
}

uint64_t std::construct_at[abi:ne180100]<MutationItinerary::Device,MutationItinerary::Device const&,MutationItinerary::Device*>(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  *(void *)a1 = v4;
  long long v5 = *(_OWORD *)(a2 + 8);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  return a1;
}

void MutationItinerary::Device::~Device(const void **this)
{
  uint64_t v1 = *this;
  if (v1) {
    CFRelease(v1);
  }
}

std::string *MutationItinerary::util_ChangeBitmaskToString(std::string *this, int a2)
{
  this->__r_.__value_.__r.__words[0] = 0;
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  BOOL result = std::string::append(this, "Changes: ", 9uLL);
  if (!a2)
  {
    long long v5 = "<none>";
    std::string::size_type v6 = 6;
    return std::string::append(this, v5, v6);
  }
  if ((a2 & 2) != 0) {
    BOOL result = std::string::append(this, "context format / ", 0x11uLL);
  }
  if ((a2 & 8) != 0) {
    BOOL result = std::string::append(this, "missing device / ", 0x11uLL);
  }
  if (a2) {
    BOOL result = std::string::append(this, "device sample rate / ", 0x15uLL);
  }
  if ((a2 & 4) != 0)
  {
    long long v5 = "reference stream / ";
    std::string::size_type v6 = 19;
    return std::string::append(this, v5, v6);
  }
  return result;
}

void sub_1BAF46D48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL MutationItinerary::AreChangesReconciled(MutationItinerary *this, const DSP_Host_Types::ConfigurationChangeRequest *a2, int *a3)
{
  DSP_Host_Types::ConfigurationChangeRequest::ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)&v85, a2);
  CFTypeRef v4 = (void *)*((void *)this + 1);
  unint64_t v76 = this;
  unint64_t v77 = (void *)((char *)this + 16);
  if (v4 == (void *)((char *)this + 16))
  {
    int v5 = 0;
    goto LABEL_85;
  }
  int v5 = 0;
  do
  {
    if (v5) {
      break;
    }
    std::string::size_type v6 = v91;
    int v79 = v4;
    uint64_t v80 = v92;
    if (v91 == v92)
    {
      BOOL v36 = *((unsigned char *)v4 + 40) == 0;
      goto LABEL_71;
    }
    while (1)
    {
      uint64_t v81 = v6;
      uint64_t v7 = *v6;
      if (!*(unsigned char *)(v7 + 64)) {
        goto LABEL_66;
      }
      DSP_Dictionariable::SingleKvp<std::string>::value(v97, v7 + 24);
      CFStringRef v8 = (const __CFString *)v79[4];
      if (!v8)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)&v93, v8);
      int v9 = (char)v95;
      int v10 = v93;
      int v11 = SHIBYTE(v97[0].__r_.__value_.__r.__words[2]);
      mach_port_t v12 = (void *)v97[0].__r_.__value_.__r.__words[0];
      if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v97[0].__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v97[0].__r_.__value_.__l.__size_;
      }
      if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v14 = v97;
      }
      else {
        int v14 = (std::string *)v97[0].__r_.__value_.__r.__words[0];
      }
      if ((v95 & 0x80u) == 0) {
        size_t v15 = v95;
      }
      else {
        size_t v15 = v94;
      }
      if ((v95 & 0x80u) == 0) {
        uint64_t v16 = &v93;
      }
      else {
        uint64_t v16 = (void **)v93;
      }
      if (v15 >= size) {
        size_t v17 = size;
      }
      else {
        size_t v17 = v15;
      }
      BOOL v18 = memcmp(v14, v16, v17) == 0;
      BOOL v19 = v15 == size && v18;
      if ((v9 & 0x80000000) == 0)
      {
        if ((v11 & 0x80000000) == 0) {
          break;
        }
        goto LABEL_30;
      }
      operator delete(v10);
      if ((v11 & 0x80000000) == 0) {
        break;
      }
LABEL_30:
      operator delete(v12);
      if (v19) {
        goto LABEL_31;
      }
LABEL_66:
      std::string::size_type v6 = v81 + 2;
      if (v81 + 2 == v80)
      {
        int v35 = 0;
        goto LABEL_69;
      }
    }
    if (!v19) {
      goto LABEL_66;
    }
LABEL_31:
    unint64_t v20 = *(uint64_t **)(*v81 + 712);
    uint64_t v83 = *(uint64_t **)(*v81 + 720);
    if (v20 == v83) {
      goto LABEL_66;
    }
    __int16 v21 = v90;
    while (1)
    {
      uint64_t v22 = (const void **)v89[65];
      uint64_t v23 = *v20;
      unint64_t v24 = (std::__shared_weak_count *)v20[1];
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v22 == v21)
      {
LABEL_59:
        if (!v24) {
          goto LABEL_61;
        }
LABEL_60:
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        goto LABEL_61;
      }
      while (1)
      {
        if (*(unsigned char *)(v23 + 304))
        {
          DSP_Dictionariable::SingleKvp<std::string>::value(v97, v23 + 264);
          int v25 = *((char *)v22 + 23);
          int v26 = SHIBYTE(v97[0].__r_.__value_.__r.__words[2]);
          unint64_t v27 = (void *)v97[0].__r_.__value_.__r.__words[0];
          if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v28 = HIBYTE(v97[0].__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v28 = v97[0].__r_.__value_.__l.__size_;
          }
          if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v29 = v97;
          }
          else {
            uint64_t v29 = (std::string *)v97[0].__r_.__value_.__r.__words[0];
          }
          if (v25 >= 0) {
            size_t v30 = *((unsigned __int8 *)v22 + 23);
          }
          else {
            size_t v30 = (size_t)v22[1];
          }
          if (v25 >= 0) {
            uint64_t v31 = v22;
          }
          else {
            uint64_t v31 = *v22;
          }
          if (v30 >= v28) {
            size_t v32 = v28;
          }
          else {
            size_t v32 = v30;
          }
          BOOL v33 = memcmp(v29, v31, v32) == 0;
          BOOL v34 = v30 == v28 && v33;
          if (v26 < 0) {
            operator delete(v27);
          }
          if (v34) {
            break;
          }
        }
        v22 += 3;
        if (v22 == v21) {
          goto LABEL_59;
        }
      }
      __int16 v21 = v22;
      if (v24) {
        goto LABEL_60;
      }
LABEL_61:
      if (v21 != v90) {
        break;
      }
      v20 += 2;
      if (v20 == v83) {
        goto LABEL_66;
      }
    }
    int v35 = 1;
LABEL_69:
    CFTypeRef v4 = v79;
    BOOL v36 = *((unsigned __int8 *)v79 + 40) == v35;
LABEL_71:
    if (v36) {
      int v5 = 0;
    }
    else {
      int v5 = 4;
    }
    int64x2_t v38 = (void *)v4[1];
    if (v38)
    {
      do
      {
        uint64_t v39 = v38;
        int64x2_t v38 = (void *)*v38;
      }
      while (v38);
    }
    else
    {
      do
      {
        uint64_t v39 = (void *)v4[2];
        BOOL v36 = *v39 == (void)v4;
        CFTypeRef v4 = v39;
      }
      while (!v36);
    }
    CFTypeRef v4 = v39;
  }
  while (v39 != v77);
LABEL_85:
  int v84 = v5;
  uint64_t v40 = *((void *)v76 + 4);
  uint64_t v82 = *((void *)v76 + 5);
  if (v40 != v82)
  {
    while (1)
    {
      uint64_t v41 = *((void *)a2 + 82);
      uint64_t v42 = *((void *)a2 + 83);
      CFStringRef v43 = *(const __CFString **)v40;
      if (*(void *)v40) {
        CFRetain(*(CFTypeRef *)v40);
      }
      if (v41 != v42) {
        break;
      }
LABEL_117:
      if (v43) {
LABEL_118:
      }
        CFRelease(v43);
      if (v41 == *((void *)a2 + 83))
      {
        std::string v55 = v77;
        uint64_t v56 = *v77;
        if (!*v77) {
          goto LABEL_130;
        }
        do
        {
          CFComparisonResult v57 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)(v56 + 32), (const __CFString **)v40);
          BOOL v58 = (uint64_t *)(v56 + 8);
          if ((unint64_t)v57 <= kCFCompareGreaterThan)
          {
            BOOL v58 = (uint64_t *)v56;
            std::string v55 = (void *)v56;
          }
          uint64_t v56 = *v58;
        }
        while (*v58);
        if (v55 != v77
          && (unint64_t)applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(*(const __CFString **)v40, (const __CFString **)v55 + 4) <= kCFCompareGreaterThan)
        {
          BOOL v59 = *((unsigned char *)v55 + 40) != 0;
        }
        else
        {
LABEL_130:
          BOOL v59 = 0;
        }
        BOOL v60 = *(unsigned char *)(v40 + 16) || *(unsigned char *)(v40 + 28) || *(unsigned char *)(v40 + 36) || *(unsigned char *)(v40 + 44) != 0;
        int v61 = v84;
        if (v59 || v60) {
          int v61 = v84 | 8;
        }
        int v84 = v61;
      }
      else if (*(unsigned char *)(v40 + 16) {
             && *(unsigned char *)(*(void *)v41 + 272)
      }
             && *(double *)(v40 + 8) != *(double *)(*(void *)v41 + 264))
      {
        v84 |= 1u;
      }
      v40 += 48;
      if (v40 == v82) {
        goto LABEL_142;
      }
    }
    while (2)
    {
      if (*(unsigned char *)(*(void *)v41 + 64))
      {
        DSP_Dictionariable::SingleKvp<std::string>::value(v97, *(void *)v41 + 24);
        if (!v43)
        {
          char v73 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v73, "Could not construct");
          __cxa_throw(v73, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v93, v43);
        int v44 = (char)v95;
        BOOL v45 = v93;
        int v46 = SHIBYTE(v97[0].__r_.__value_.__r.__words[2]);
        __int16 v47 = (void *)v97[0].__r_.__value_.__r.__words[0];
        if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v48 = HIBYTE(v97[0].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v48 = v97[0].__r_.__value_.__l.__size_;
        }
        if ((v97[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFTypeRef v49 = v97;
        }
        else {
          CFTypeRef v49 = (std::string *)v97[0].__r_.__value_.__r.__words[0];
        }
        if ((v95 & 0x80u) == 0) {
          size_t v50 = v95;
        }
        else {
          size_t v50 = v94;
        }
        if ((v95 & 0x80u) == 0) {
          int v51 = &v93;
        }
        else {
          int v51 = (void **)v93;
        }
        if (v50 >= v48) {
          size_t v52 = v48;
        }
        else {
          size_t v52 = v50;
        }
        BOOL v53 = memcmp(v49, v51, v52) == 0;
        BOOL v54 = v50 == v48 && v53;
        if (v44 < 0)
        {
          operator delete(v45);
          if ((v46 & 0x80000000) == 0) {
            goto LABEL_111;
          }
        }
        else if ((v46 & 0x80000000) == 0)
        {
LABEL_111:
          if (v54) {
            goto LABEL_118;
          }
          goto LABEL_115;
        }
        operator delete(v47);
        if (v54) {
          goto LABEL_118;
        }
      }
LABEL_115:
      v41 += 16;
      if (v41 == v42)
      {
        uint64_t v41 = v42;
        goto LABEL_117;
      }
      continue;
    }
  }
LABEL_142:
  uint64_t v62 = *((void *)v76 + 7);
  uint64_t v63 = *((void *)v76 + 8);
  if (v62 != v63)
  {
    LOBYTE(v64) = 0;
    int v65 = (char *)a2 + 120;
    uint64_t v66 = (char *)a2 + 272;
    while (!v64)
    {
      double v67 = *(double *)v62;
      DSP_Host_Types::FormatDescription::get_asbd((uint64_t)v97, (uint64_t)v65);
      if (v67 == *(double *)&v97[0].__r_.__value_.__l.__data_
        && (int v68 = *(_DWORD *)(v62 + 28),
            DSP_Host_Types::FormatDescription::get_asbd((uint64_t)&v93, (uint64_t)v65),
            v68 == v96))
      {
        BOOL v64 = 1;
      }
      else
      {
        DSP_Host_Types::FormatDescription::get_asbd((uint64_t)v97, (uint64_t)v66);
        if (v67 == *(double *)&v97[0].__r_.__value_.__l.__data_)
        {
          int v69 = *(_DWORD *)(v62 + 28);
          DSP_Host_Types::FormatDescription::get_asbd((uint64_t)&v93, (uint64_t)v66);
          BOOL v64 = v69 == v96;
        }
        else
        {
          BOOL v64 = 0;
        }
      }
      v62 += 40;
      if (v62 == v63)
      {
        if (v64) {
          break;
        }
        int v70 = v84 | 2;
        goto LABEL_154;
      }
    }
  }
  int v70 = v84;
LABEL_154:
  if (a3) {
    *a3 = v70;
  }
  BOOL v71 = v70 == 0;
  unsigned __int8 v85 = &unk_1F14867D0;
  v97[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v91;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)v97);
  DSP_Host_Types::IOContextDescription::~IOContextDescription((DSP_Host_Types::IOContextDescription *)v89);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v88);
  DSP_Dictionariable::DictionariableKvp::~DictionariableKvp((DSP_Dictionariable::DictionariableKvp *)&v87);
  unsigned __int8 v85 = &unk_1F1486820;
  std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v86);
  return v71;
}

void sub_1BAF47414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (*(char *)(v15 - 121) < 0) {
    operator delete(*(void **)(v15 - 144));
  }
  DSP_Host_Types::ConfigurationChangeRequest::~ConfigurationChangeRequest((DSP_Host_Types::ConfigurationChangeRequest *)va);
  _Unwind_Resume(a1);
}

const void **MutationItinerary::AreChangesReconciled(DSP_Host_Types::ConfigurationChangeRequest const&,int *)const::$_1::~$_1(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

uint64_t DSP_Host_Types::FormatDescription::get_asbd(uint64_t this, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a2 + 124);
  if (*(unsigned char *)(a2 + 124)) {
    int v2 = *(_DWORD *)(a2 + 120);
  }
  if (*(unsigned char *)(a2 + 48)) {
    uint64_t v3 = *(void *)(a2 + 40);
  }
  else {
    uint64_t v3 = 0x40E7700000000000;
  }
  if (*(unsigned char *)(a2 + 76)) {
    int v4 = *(_DWORD *)(a2 + 72);
  }
  else {
    int v4 = 1;
  }
  if (*(unsigned char *)(a2 + 97)) {
    BOOL v5 = *(unsigned char *)(a2 + 96) != 0;
  }
  else {
    BOOL v5 = 1;
  }
  switch(v2)
  {
    case 1:
      BOOL v6 = !v5;
      int v7 = 41;
      int v8 = 9;
      goto LABEL_31;
    case 2:
      BOOL v12 = !v5;
      if (v5) {
        int v7 = 12;
      }
      else {
        int v7 = 44;
      }
      unsigned int v13 = 2 * v4;
      if (v12) {
        unsigned int v13 = 2;
      }
      uint64_t v10 = v13 | 0x100000000;
      HIDWORD(v11) = 16;
      goto LABEL_37;
    case 3:
      BOOL v6 = !v5;
      int v7 = 3116;
      int v8 = 3084;
      goto LABEL_31;
    case 4:
      BOOL v14 = !v5;
      if (v5) {
        int v7 = 9;
      }
      else {
        int v7 = 41;
      }
      unsigned int v15 = 8 * v4;
      if (v14) {
        unsigned int v15 = 8;
      }
      uint64_t v10 = v15 | 0x100000000;
      HIDWORD(v11) = 64;
      goto LABEL_37;
    case 5:
      BOOL v6 = !v5;
      int v7 = 44;
      int v8 = 12;
LABEL_31:
      if (!v6) {
        int v7 = v8;
      }
      unsigned int v16 = 4 * v4;
      if (v6) {
        unsigned int v16 = 4;
      }
      uint64_t v10 = v16 | 0x100000000;
      HIDWORD(v11) = 32;
LABEL_37:
      LODWORD(v11) = v4;
      int v9 = 1819304813;
      break;
    default:
      int v9 = 0;
      int v7 = 0;
      uint64_t v10 = 0;
      uint64_t v3 = 0;
      uint64_t v11 = 0;
      break;
  }
  *(void *)this = v3;
  *(_DWORD *)(this + 8) = v9;
  *(_DWORD *)(this + 12) = v7;
  *(void *)(this + 16) = v10;
  *(_DWORD *)(this + 24) = v10;
  *(void *)(this + 28) = v11;
  *(_DWORD *)(this + 36) = 0;
  return this;
}

void HALS_Device::PerformNonDriverConfigChange(HALS_Device *this)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v4, "com.apple.coreaudio", "AMCP");
  uint64_t v1 = *v4;
  if (*(void *)v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v5);
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
  {
    int v2 = pthread_self();
    mach_port_t v3 = pthread_mach_thread_np(v2);
    LODWORD(v4) = 67109634;
    HIDWORD(v4) = v3;
    *(_WORD *)BOOL v5 = 2080;
    *(void *)&v5[2] = "HALS_Device.cpp";
    __int16 v6 = 1024;
    int v7 = 5636;
    _os_log_error_impl(&dword_1BAA78000, v1, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d PerformNonDriverConfigChange() remains unimplemented for this type of device", (uint8_t *)&v4, 0x18u);
  }
}

void HALS_Device::GetNearestStartTime(HALS_Device *this, AudioTimeStamp *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unsigned int v13 = "HALS_Device.cpp";
      __int16 v14 = 1024;
      int v15 = 2412;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetNearestStartTime: no IO context", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unsigned int v13 = "HALS_Device.cpp";
      __int16 v14 = 1024;
      int v15 = 2414;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetNearestStartTime: couldn't find the IO context", (uint8_t *)&v12, 0x12u);
    }
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v11 = off_1F148A5D8;
    void v11[2] = 1852797029;
  }
  (*(void (**)(void, AudioTimeStamp *, uint64_t))(**(void **)(v7 + 96) + 480))(*(void *)(v7 + 96), a2, a3);
  HALS_ObjectMap::ReleaseObject(v8, v9);
}

void sub_1BAF47990(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Device::GetInternalIOContextID(HALS_Device *this)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  if ((*(unsigned int (**)(HALS_Device *))(*(void *)this + 832))(this))
  {
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZNK11HALS_Device22GetInternalIOContextIDEv_block_invoke;
    uint64_t v5[3] = &unk_1E6235D68;
    v5[4] = &v6;
    v5[5] = this;
    int v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  }
  uint64_t v3 = *((unsigned int *)v7 + 6);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1BAF47AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device22GetInternalIOContextIDEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 600);
  return result;
}

void HALS_Device::TranslateTime(HALS_Device *this, const AudioTimeStamp *a2, AudioTimeStamp *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unsigned int v13 = "HALS_Device.cpp";
      __int16 v14 = 1024;
      int v15 = 2404;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::TranslateTime: no IO context", (uint8_t *)&v12, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v12 = 136315394;
      unsigned int v13 = "HALS_Device.cpp";
      __int16 v14 = 1024;
      int v15 = 2406;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::TranslateTime: couldn't find the IO context", (uint8_t *)&v12, 0x12u);
    }
    uint64_t v11 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v11 = off_1F148A5D8;
    void v11[2] = 1852797029;
  }
  (*(void (**)(void, const AudioTimeStamp *, AudioTimeStamp *))(**(void **)(v7 + 96) + 472))(*(void *)(v7 + 96), a2, a3);
  HALS_ObjectMap::ReleaseObject(v8, v9);
}

void sub_1BAF47D44(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Device::GetCurrentTime(HALS_Device *this, AudioTimeStamp *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 2396;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetCurrentTime: no IO context", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 2398;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::GetCurrentTime: couldn't find the IO context", (uint8_t *)&v10, 0x12u);
    }
    int v9 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v9 = off_1F148A5D8;
    v9[2] = 1852797029;
  }
  (*(void (**)(void, AudioTimeStamp *))(**(void **)(v5 + 96) + 464))(*(void *)(v5 + 96), a2);
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1BAF47FB8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_StopIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 2388;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StopIOProcID: no IO context", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 2390;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StopIOProcID: couldn't find the IO context", (uint8_t *)&v10, 0x12u);
    }
    int v9 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v9 = off_1F148A5D8;
    v9[2] = 1852797029;
  }
  (*(void (**)(void, int (*)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *)))(**(void **)(v5 + 96) + 496))(*(void *)(v5 + 96), a2);
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1BAF4822C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_StartIOProcIDAtTime(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), AudioTimeStamp *a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "HALS_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 2380;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcIDAtTime: no IO context", (uint8_t *)&v14, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  UInt64 v9 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  int v10 = (HALS_ObjectMap *)v9;
  if (!v9)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v14 = 136315394;
      int v15 = "HALS_Device.cpp";
      __int16 v16 = 1024;
      int v17 = 2382;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcIDAtTime: couldn't find the IO context", (uint8_t *)&v14, 0x12u);
    }
    int v13 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v13 = off_1F148A5D8;
    v13[2] = 1852797029;
  }
  HALS_IOContext::Server_Internal_StartIOProcID(v9, a2, a3, a4);
  HALS_ObjectMap::ReleaseObject(v10, v11);
}

void sub_1BAF48490(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_StartIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 2372;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcID: no IO context", (uint8_t *)&v10, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  UInt64 v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v10 = 136315394;
      uint64_t v11 = "HALS_Device.cpp";
      __int16 v12 = 1024;
      int v13 = 2374;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::Server_Internal_StartIOProcID: couldn't find the IO context", (uint8_t *)&v10, 0x12u);
    }
    UInt64 v9 = __cxa_allocate_exception(0x10uLL);
    *(void *)UInt64 v9 = off_1F148A5D8;
    v9[2] = 1852797029;
  }
  HALS_IOContext::Server_Internal_StartIOProcID(v5, a2, 0, 0);
  HALS_ObjectMap::ReleaseObject(v6, v7);
}

void sub_1BAF486E4(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_RemoveIOProc(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&void v11[4] = "HALS_Device.cpp";
      *(_WORD *)&v11[12] = 1024;
      *(_DWORD *)&v11[14] = 2364;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::RemoveIOProc: no IO context", v11, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&void v11[4] = "HALS_Device.cpp";
      *(_WORD *)&v11[12] = 1024;
      *(_DWORD *)&v11[14] = 2366;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::RemoveIOProc: couldn't find the IO context", v11, 0x12u);
    }
    int v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v10 = off_1F148A5D8;
    void v10[2] = 1852797029;
  }
  uint64_t v7 = *(void *)(v5 + 96);
  *(void *)uint64_t v11 = &unk_1F1477D60;
  *(void *)&v11[8] = v6;
  *(void *)&v11[16] = a2;
  __int16 v12 = v11;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 336))(v7, v11);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  HALS_ObjectMap::ReleaseObject(v6, v8);
}

void sub_1BAF48984(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Device::Server_Internal_AddIOProc(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      int v16 = 136315394;
      int v17 = "HALS_Device.cpp";
      __int16 v18 = 1024;
      int v19 = 2356;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::AddIOProc: no IO context", (uint8_t *)&v16, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    int v16 = 136315394;
    int v17 = "HALS_Device.cpp";
    __int16 v18 = 1024;
    int v19 = 2358;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  HALS_Device::AddIOProc: couldn't find the IO context";
    goto LABEL_12;
  }
  if (!a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    int v16 = 136315394;
    int v17 = "HALS_IOContext.cpp";
    __int16 v18 = 1024;
    int v19 = 456;
    uint64_t v13 = MEMORY[0x1E4F14500];
    uint64_t v14 = "%25s:%-5d  HALS_IOContext::Server_Internal_AddIOProc: can't add an IOProc without an IOProc";
LABEL_12:
    _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v16, 0x12u);
LABEL_13:
    int v15 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v15 = off_1F148A5D8;
    v15[2] = 1852797029;
  }
  uint64_t v9 = *(void *)(v7 + 96);
  int v10 = operator new(0x20uLL);
  *int v10 = &unk_1F1477CE0;
  v10[1] = v8;
  void v10[2] = a2;
  v10[3] = a3;
  unint64_t v20 = v10;
  (*(void (**)(uint64_t, int *))(*(void *)v9 + 336))(v9, &v16);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v16);
  HALS_ObjectMap::ReleaseObject(v8, v11);
}

void sub_1BAF48CCC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void HALS_Device::Server_Internal_DestroyIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *))
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&void v11[4] = "HALS_Device.cpp";
      *(_WORD *)&v11[12] = 1024;
      *(_DWORD *)&v11[14] = 2348;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::DestroyIOProcID: no IO context", v11, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v5 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v6 = (HALS_ObjectMap *)v5;
  if (!v5)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&void v11[4] = "HALS_Device.cpp";
      *(_WORD *)&v11[12] = 1024;
      *(_DWORD *)&v11[14] = 2350;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::DestroyIOProcID: couldn't find the IO context", v11, 0x12u);
    }
    int v10 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v10 = off_1F148A5D8;
    void v10[2] = 1852797029;
  }
  uint64_t v7 = *(void *)(v5 + 96);
  *(void *)uint64_t v11 = &unk_1F1477C60;
  *(void *)&v11[8] = v6;
  *(void *)&v11[16] = a2;
  __int16 v12 = v11;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 336))(v7, v11);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
  HALS_ObjectMap::ReleaseObject(v6, v8);
}

void sub_1BAF48F7C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_Device::Server_Internal_CreateIOProcIDWithBlock(HALS_Device *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)a1 + 832))(a1) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__CFString buf = 136315394;
      unint64_t v20 = "HALS_Device.cpp";
      __int16 v21 = 1024;
      int v22 = 2340;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::CreateIOProcIDWithBlock: no IO context", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(a1);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)__CFString buf = 136315394;
    unint64_t v20 = "HALS_Device.cpp";
    __int16 v21 = 1024;
    int v22 = 2342;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  HALS_Device::CreateIOProcIDWithBlock: couldn't find the IO context";
    goto LABEL_12;
  }
  if (!a3)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)__CFString buf = 136315394;
    unint64_t v20 = "HALS_IOContext.cpp";
    __int16 v21 = 1024;
    int v22 = 387;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcIDWithBlock: can't create an IOProcID without an IOBlock";
LABEL_12:
    _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
LABEL_13:
    int v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v17 = off_1F148A5D8;
    v17[2] = 1852797029;
  }
  uint64_t v18 = 0;
  uint64_t v9 = *(void *)(v7 + 96);
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F1477BE0;
  v10[1] = v8;
  void v10[2] = &v18;
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v23 = v10;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 336))(v9, buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  uint64_t v11 = v18;
  HALS_ObjectMap::ReleaseObject(v8, v12);
  return v11;
}

void sub_1BAF492D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t HALS_Device::Server_Internal_CreateIOProcID(HALS_Device *this, int (*a2)(unsigned int, const AudioTimeStamp *, const AudioBufferList *, const AudioTimeStamp *, AudioBufferList *, const AudioTimeStamp *, void *), void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (((*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this) & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__CFString buf = 136315394;
      unint64_t v20 = "HALS_Device.cpp";
      __int16 v21 = 1024;
      int v22 = 2332;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::CreateIOProcID: no IO context", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 1970171760;
  }
  InternalIOContextID = (HALS_ObjectMap *)HALS_Device::GetInternalIOContextID(this);
  uint64_t v7 = HALS_ObjectMap::CopyObjectByObjectID(InternalIOContextID);
  uint64_t v8 = (HALS_ObjectMap *)v7;
  if (!v7)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)__CFString buf = 136315394;
    unint64_t v20 = "HALS_Device.cpp";
    __int16 v21 = 1024;
    int v22 = 2334;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  HALS_Device::CreateIOProcID: couldn't find the IO context";
    goto LABEL_12;
  }
  if (!a2)
  {
    if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    *(_DWORD *)__CFString buf = 136315394;
    unint64_t v20 = "HALS_IOContext.cpp";
    __int16 v21 = 1024;
    int v22 = 346;
    int v15 = MEMORY[0x1E4F14500];
    int v16 = "%25s:%-5d  HALS_IOContext::Server_Internal_CreateIOProcID: can't create an IOProcID without an IOProc";
LABEL_12:
    _os_log_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, v16, buf, 0x12u);
LABEL_13:
    int v17 = __cxa_allocate_exception(0x10uLL);
    *(void *)int v17 = off_1F148A5D8;
    v17[2] = 1852797029;
  }
  uint64_t v18 = 0;
  uint64_t v9 = *(void *)(v7 + 96);
  int v10 = operator new(0x28uLL);
  *int v10 = &unk_1F1477B60;
  v10[1] = v8;
  void v10[2] = &v18;
  v10[3] = a2;
  v10[4] = a3;
  uint64_t v23 = v10;
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v9 + 336))(v9, buf);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
  uint64_t v11 = v18;
  HALS_ObjectMap::ReleaseObject(v8, v12);
  return v11;
}

void sub_1BAF49638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

BOOL HALS_Device::HasInternalIOContext(HALS_Device *this)
{
  platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(this);
  return (*(unsigned int (**)(uint64_t *))(*platform_behaviors + 16))(platform_behaviors) == 2;
}

BOOL HALS_Device::_ClientDied(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  int v4 = (char *)*((void *)this + 66);
  uint64_t v5 = (char *)*((void *)this + 67);
  if (v4 == v5)
  {
    uint64_t v6 = (char *)*((void *)this + 66);
  }
  else
  {
    uint64_t v6 = (char *)*((void *)this + 66);
    while (*(_DWORD *)v6 != *((_DWORD *)a2 + 4))
    {
      v6 += 48;
      if (v6 == v5)
      {
        uint64_t v6 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  if (v6 == v5)
  {
    BOOL v17 = 0;
    if (a2)
    {
LABEL_24:
      unsigned int v19 = *((_DWORD *)a2 + 4);
      int v18 = 1;
      goto LABEL_25;
    }
  }
  else
  {
    int v7 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 736))(this);
    int v8 = v4[16 * ((v6 - v4) >> 4) + 32];
    uint64_t v9 = v6 + 48;
    int v10 = (char *)*((void *)this + 67);
    if (v6 + 48 != v10)
    {
      do
      {
        uint64_t v11 = v6;
        int v12 = *((_DWORD *)v6 + 12);
        v6 += 48;
        _DWORD *v11 = v12;
        CACFDictionary::operator=((uint64_t)(v11 + 2), (uint64_t)(v11 + 14));
        *(_OWORD *)(v11 + 6) = *(_OWORD *)(v11 + 18);
        *(void *)((char *)v11 + 37) = *(void *)((char *)v11 + 85);
      }
      while (v11 + 24 != (_DWORD *)v10);
      uint64_t v9 = (char *)*((void *)this + 67);
    }
    if (v9 != v6)
    {
      do
      {
        uint64_t v13 = v9 - 48;
        CACFDictionary::~CACFDictionary((CACFDictionary *)(v9 - 40));
        uint64_t v9 = v13;
      }
      while (v13 != v6);
    }
    *((void *)this + 67) = v6;
    (*(void (**)(HALS_Device *, HALS_Client *))(*(void *)this + 744))(this, a2);
    if (v8)
    {
      uint64_t v14 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)a2 + 4));
      int v15 = (HALS_ObjectMap *)v14;
      if (v14) {
        int v16 = *(_DWORD *)(v14 + 232);
      }
      else {
        int v16 = -1;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v20 = *((_DWORD *)a2 + 4);
        uint64_t v21 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
        int v22 = *((_DWORD *)this + 4);
        *(_DWORD *)uint64_t v42 = 136316418;
        *(void *)&v42[4] = "HALS_Device.cpp";
        *(_WORD *)&v42[12] = 1024;
        *(_DWORD *)&v42[14] = 2250;
        __int16 v43 = 1024;
        int v44 = v20;
        __int16 v45 = 1024;
        int v46 = v16;
        __int16 v47 = 2080;
        uint64_t v48 = v21;
        __int16 v49 = 1024;
        int v50 = v22;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_ClientDied: client %u (pid %d) unducking on device %s (%u)", v42, 0x2Eu);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      double v23 = (*(double (**)(HALS_Device *))(*(void *)this + 264))(this);
      (*(void (**)(HALS_Device *, double, double))(*(void *)this + 792))(this, 0.0, v23 * 0.0500000007);
      HALS_ObjectMap::ReleaseObject(v15, v24);
    }
    BOOL v17 = v7 != (*(unsigned int (**)(HALS_Device *))(*(void *)this + 736))(this);
    if (a2) {
      goto LABEL_24;
    }
  }
  int v18 = *((unsigned __int8 *)this + 616);
  if (!*((unsigned char *)this + 616)) {
    return v17;
  }
  unsigned int v19 = 0;
LABEL_25:
  int v25 = (void *)((char *)this + 624);
  int v26 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 78, v19);
  if (v26)
  {
    unint64_t v27 = v26;
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v26);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v42, "com.apple.coreaudio", "AMCP");
    std::string::size_type v28 = **(NSObject ***)v42;
    if (*(void *)&v42[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v42[8]);
    }
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v39 = pthread_self();
      mach_port_t v40 = pthread_mach_thread_np(v39);
      if (v18) {
        unsigned int v41 = v19;
      }
      else {
        unsigned int v41 = 0;
      }
      *(_DWORD *)uint64_t v42 = 67109890;
      *(_DWORD *)&v42[4] = v40;
      *(_WORD *)&v42[8] = 2080;
      *(void *)&unsigned char v42[10] = "HALS_Device.cpp";
      __int16 v43 = 1024;
      int v44 = 5136;
      __int16 v45 = 1024;
      int v46 = v41;
      _os_log_debug_impl(&dword_1BAA78000, v28, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp] Removing Hosted DSP streams for Client ID: %d", v42, 0x1Eu);
    }
    HALS_Device::PerClientDSPInfo::deactivate_stream((HALS_Device::PerClientDSPInfo *)(v27 + 3), 1);
    HALS_Device::PerClientDSPInfo::deactivate_stream((HALS_Device::PerClientDSPInfo *)(v27 + 3), 0);
    int8x8_t v29 = *(int8x8_t *)((char *)this + 632);
    unint64_t v30 = v27[1];
    uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29);
    v31.i16[0] = vaddlv_u8(v31);
    if (v31.u32[0] > 1uLL)
    {
      if (v30 >= *(void *)&v29) {
        v30 %= *(void *)&v29;
      }
    }
    else
    {
      v30 &= *(void *)&v29 - 1;
    }
    size_t v32 = *(uint64_t **)(*v25 + 8 * v30);
    do
    {
      BOOL v33 = v32;
      size_t v32 = (uint64_t *)*v32;
    }
    while (v32 != v27);
    if (v33 == (uint64_t *)((char *)this + 640)) {
      goto LABEL_46;
    }
    unint64_t v34 = v33[1];
    if (v31.u32[0] > 1uLL)
    {
      if (v34 >= *(void *)&v29) {
        v34 %= *(void *)&v29;
      }
    }
    else
    {
      v34 &= *(void *)&v29 - 1;
    }
    if (v34 != v30)
    {
LABEL_46:
      if (!*v27) {
        goto LABEL_47;
      }
      unint64_t v35 = *(void *)(*v27 + 8);
      if (v31.u32[0] > 1uLL)
      {
        if (v35 >= *(void *)&v29) {
          v35 %= *(void *)&v29;
        }
      }
      else
      {
        v35 &= *(void *)&v29 - 1;
      }
      if (v35 != v30) {
LABEL_47:
      }
        *(void *)(*v25 + 8 * v30) = 0;
    }
    uint64_t v36 = *v27;
    if (*v27)
    {
      unint64_t v37 = *(void *)(v36 + 8);
      if (v31.u32[0] > 1uLL)
      {
        if (v37 >= *(void *)&v29) {
          v37 %= *(void *)&v29;
        }
      }
      else
      {
        v37 &= *(void *)&v29 - 1;
      }
      if (v37 != v30)
      {
        *(void *)(*v25 + 8 * v37) = v33;
        uint64_t v36 = *v27;
      }
    }
    *BOOL v33 = v36;
    *unint64_t v27 = 0;
    --*((void *)this + 81);
    *(void *)uint64_t v42 = v27;
    *(void *)&v42[8] = (char *)this + 640;
    v42[16] = 1;
    std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  }
  return v17;
}

void sub_1BAF49C48(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_Device::DumpDuckHistory(void *a1, int a2, uint64_t a3, int a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  memset(&v34, 0, sizeof(v34));
  char v33 = a2;
  if (a3) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if (v7 == 1)
  {
    if (a4)
    {
      int v8 = (void *)(a3 + 16);
      int v9 = a4;
      do
      {
        int v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"    ", 4);
        --v9;
      }
      while (v9);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a3 + 16), (uint64_t)"Duck History:", 13);
  }
  else
  {
    *((unsigned char *)&v34.__r_.__value_.__s + 23) = 10;
    LOWORD(v34.__r_.__value_.__r.__words[1]) = 8250;
    v34.__r_.__value_.__r.__words[0] = *(void *)"\tHistory: ";
  }
  uint64_t v10 = a1[70];
  if (a1[71] != v10)
  {
    unint64_t v11 = a1[73];
    int v12 = (void *)(v10 + 8 * (v11 >> 7));
    uint64_t v13 = *v12 + 32 * (v11 & 0x7F);
    uint64_t v14 = *(void *)(v10 + (((a1[74] + v11) >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * ((a1[74] + v11) & 0x7F);
    if (v13 != v14)
    {
      int v15 = (void *)(a3 + 16);
      int v16 = (std::locale::id *)MEMORY[0x1E4FBA258];
      do
      {
        BOOL v17 = localtime((const time_t *)v13);
        strftime(__s, 0x78uLL, "%x - %X", v17);
        if (v7)
        {
          int v18 = a4 + 1;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"    ", 4);
            --v18;
          }
          while (v18);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Time: ", 6);
          size_t v19 = strlen(__s);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)__s, v19);
          std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(void *)(*v15 - 24)));
          int v20 = std::locale::use_facet(v36, v16);
          ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
          std::locale::~locale(v36);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Client: ", 8);
          uint64_t v21 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(*v21 - 24)));
          int v22 = std::locale::use_facet(v36, v16);
          ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
          std::locale::~locale(v36);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Volume Scalar: ", 15);
          double v23 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
          uint64_t v24 = std::locale::use_facet(v36, v16);
          ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
          std::locale::~locale(v36);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Opted Out: ", 11);
          int v25 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
          int v26 = std::locale::use_facet(v36, v16);
          ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
          std::locale::~locale(v36);
          std::ostream::put();
          std::ostream::flush();
        }
        else
        {
          caulk::make_string((caulk *)"%s: %ul  %lf, %u", (uint64_t)&v35, __s, *(unsigned int *)(v13 + 8), *(void *)(v13 + 16), *(unsigned __int8 *)(v13 + 24));
          unint64_t v27 = std::string::append(&v35, ", ", 2uLL);
          long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
          int64_t v37 = v27->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v36[0].__locale_ = v28;
          v27->__r_.__value_.__l.__size_ = 0;
          v27->__r_.__value_.__r.__words[2] = 0;
          v27->__r_.__value_.__r.__words[0] = 0;
          if (v37 >= 0) {
            locale = (const std::string::value_type *)v36;
          }
          else {
            locale = (const std::string::value_type *)v36[0].__locale_;
          }
          if (v37 >= 0) {
            std::string::size_type v30 = HIBYTE(v37);
          }
          else {
            std::string::size_type v30 = (std::string::size_type)v36[1].__locale_;
          }
          std::string::append(&v34, locale, v30);
          if (SHIBYTE(v37) < 0) {
            operator delete(v36[0].__locale_);
          }
          if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v35.__r_.__value_.__l.__data_);
          }
        }
        v13 += 32;
        if (v13 - *v12 == 4096)
        {
          uint64_t v31 = v12[1];
          ++v12;
          uint64_t v13 = v31;
        }
      }
      while (v13 != v14);
    }
  }
  if ((v33 & 1) == 0 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    size_t v32 = &v34;
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v32 = (std::string *)v34.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)__s = 136315650;
    uint64_t v39 = "HALS_Device.cpp";
    __int16 v40 = 1024;
    int v41 = 4941;
    __int16 v42 = 2080;
    __int16 v43 = v32;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  %s", (uint8_t *)__s, 0x1Cu);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
}

void sub_1BAF4A1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::locale a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Device::PerClientDSPInfo::deactivate_stream(HALS_Device::PerClientDSPInfo *this, int a2)
{
  if (a2) {
    uint64_t v3 = 24;
  }
  else {
    uint64_t v3 = 64;
  }
  uint64_t v4 = *(void *)((char *)this + v3);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    HALS_ObjectMap::ObjectIsDead(*(HALS_ObjectMap **)((char *)this + v3), v5);
    *(void *)((char *)this + v3) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HALS_Device::PerClientDSPInfo>,0>((uint64_t)v1 + 16);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HALS_Device::PerClientDSPInfo>,0>(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    int v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(void *)(a1 + 88) = v2;
      operator delete(v2);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  }
  uint64_t v4 = *(void **)(a1 + 16);

  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v4);
}

BOOL HALS_Device::_SetClientClockDeviceDeviceUID(HALS_Device *this, uint64_t a2, const __CFString *cf)
{
  CFStringRef v4 = cf;
  if (cf && (CFRetain(cf), CFTypeID v7 = CFGetTypeID(v4), v7 != CFStringGetTypeID()))
  {
    CFStringRef v31 = 0;
    CFRelease(v4);
    CFStringRef v4 = 0;
  }
  else
  {
    CFStringRef v31 = v4;
  }
  int v8 = (const void *)(*(uint64_t (**)(HALS_Device *, uint64_t))(*(void *)this + 808))(this, a2);
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, v8);
  CFComparisonResult v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cfa, &v31);
  if (v9 == kCFCompareEqualTo) {
    goto LABEL_49;
  }
  if (!v4)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::convert_to<std::string,0>((uint64_t)&v28, v4);
  uint64_t v10 = (uint64_t *)((char *)this + 480);
  unint64_t v11 = *((void *)this + 61);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v11 <= a2) {
        unint64_t v3 = a2 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & a2;
    }
    uint64_t v13 = *(void ***)(*v10 + 8 * v3);
    if (v13)
    {
      uint64_t v14 = (char *)*v13;
      if (*v13)
      {
        do
        {
          unint64_t v15 = *((void *)v14 + 1);
          if (v15 == a2)
          {
            if (*((_DWORD *)v14 + 4) == a2) {
              goto LABEL_46;
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11) {
                v15 %= v11;
              }
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v3) {
              break;
            }
          }
          uint64_t v14 = *(char **)v14;
        }
        while (v14);
      }
    }
  }
  uint64_t v14 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = a2;
  *((_DWORD *)v14 + 4) = a2;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  *((void *)v14 + 3) = 0;
  float v16 = (float)(unint64_t)(*((void *)this + 63) + 1);
  float v17 = *((float *)this + 128);
  if (!v11 || (float)(v17 * (float)v11) < v16)
  {
    BOOL v18 = 1;
    if (v11 >= 3) {
      BOOL v18 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v11);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)this + 480, v21);
    unint64_t v11 = *((void *)this + 61);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v11 <= a2) {
        unint64_t v3 = a2 % v11;
      }
      else {
        unint64_t v3 = a2;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & a2;
    }
  }
  uint64_t v22 = *v10;
  double v23 = *(void **)(*v10 + 8 * v3);
  if (v23)
  {
    *(void *)uint64_t v14 = *v23;
  }
  else
  {
    *(void *)uint64_t v14 = *((void *)this + 62);
    *((void *)this + 62) = v14;
    *(void *)(v22 + 8 * v3) = (char *)this + 496;
    if (!*(void *)v14) {
      goto LABEL_45;
    }
    unint64_t v24 = *(void *)(*(void *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v24 >= v11) {
        v24 %= v11;
      }
    }
    else
    {
      v24 &= v11 - 1;
    }
    double v23 = (void *)(*v10 + 8 * v24);
  }
  *double v23 = v14;
LABEL_45:
  ++*((void *)this + 63);
LABEL_46:
  int v25 = (void **)(v14 + 24);
  if (v14[47] < 0) {
    operator delete(*v25);
  }
  *(_OWORD *)int v25 = v28;
  *((void *)v14 + 5) = v29;
LABEL_49:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v9 != kCFCompareEqualTo;
}

void sub_1BAF4A6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, const void *a16, const void *a17)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::string>,void *>>>::operator()[abi:ne180100](1, v17);
  if (a15 < 0) {
    operator delete(__p);
  }
  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::StringRef::~StringRef(&a17);
  _Unwind_Resume(a1);
}

CFTypeRef HALS_Device::_CopyClientClockDeviceDeviceUID(HALS_Device *this, unsigned int a2)
{
  int v2 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)this + 60, a2);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = v2[3];
  unint64_t v3 = v2 + 3;
  CFStringRef v4 = (const char *)v5;
  if (*((char *)v3 + 23) >= 0) {
    uint64_t v6 = (const char *)v3;
  }
  else {
    uint64_t v6 = v4;
  }
  OS::CF::String::String((OS::CF::String *)&v9, v6);
  CFTypeRef v7 = CFRetain(cf);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v9);
  return v7;
}

void sub_1BAF4A7B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void HALS_Device::_GetCombinedVolumeScalar(HALS_Device *this, HALS_ObjectMap *a2, unsigned int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 66);
  CFStringRef v4 = (_DWORD *)*((void *)this + 67);
  if ((_DWORD *)v3 == v4) {
    return;
  }
  int v5 = (int)a2;
  uint64_t v6 = (_DWORD *)*((void *)this + 66);
  while (*v6 != a2)
  {
    v6 += 12;
    if (v6 == v4)
    {
      uint64_t v6 = (_DWORD *)*((void *)this + 67);
      break;
    }
  }
  if (v6 != v4)
  {
    float v7 = *(float *)(v3 + 16 * (((uint64_t)v6 - v3) >> 4) + 4 * a3 + 24);
    if ((a3 & 1) == 0) {
      float v7 = v7 * *(float *)(v3 + 16 * (((uint64_t)v6 - v3) >> 4) + 40);
    }
LABEL_16:
    uint64_t v8 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    uint64_t v9 = (HALS_ObjectMap *)v8;
    if (v8) {
      int v10 = *(_DWORD *)(v8 + 232);
    }
    else {
      int v10 = -1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint8x8_t v12 = "";
      int v13 = 136316418;
      uint64_t v14 = "HALS_Device.cpp";
      __int16 v15 = 1024;
      int v16 = 2222;
      if (v6 == v4) {
        uint8x8_t v12 = " not";
      }
      __int16 v17 = 1024;
      int v18 = v5;
      __int16 v19 = 1024;
      int v20 = v10;
      __int16 v21 = 2082;
      uint64_t v22 = v12;
      __int16 v23 = 2048;
      double v24 = v7;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_GetCombinedVolumeScalar: client %u (pid %d) is%{public}s present, and is ducked with a combined volume scalar of %f", (uint8_t *)&v13, 0x32u);
    }
    HALS_ObjectMap::ReleaseObject(v9, v11);
    return;
  }
  float v7 = 1.0;
  do
  {
    if (*(unsigned __int8 *)(v3 + 32) | *(unsigned __int8 *)(v3 + 44) && *(float *)(v3 + 36) < v7) {
      float v7 = *(float *)(v3 + 36);
    }
    v3 += 48;
  }
  while ((_DWORD *)v3 != v4);
  if (v7 != 1.0) {
    goto LABEL_16;
  }
}

void sub_1BAF4A9B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALS_Device::_UpdateClientVolumeScalarDucking(HALS_Device *this, double a2, double a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (float *)*((void *)this + 66);
  float v7 = (unsigned int *)*((void *)this + 67);
  if (v6 != (float *)v7)
  {
    float v8 = 1.0;
    uint64_t v9 = *((void *)this + 66);
    do
    {
      if (*(unsigned __int8 *)(v9 + 32) | *(unsigned __int8 *)(v9 + 44) && *(float *)(v9 + 36) < v8) {
        float v8 = *(float *)(v9 + 36);
      }
      v9 += 48;
    }
    while ((unsigned int *)v9 != v7);
    int v10 = MEMORY[0x1E4F14500];
    do
    {
      if (*((unsigned char *)v6 + 32))
      {
        v6[10] = 1.0;
        uint64_t v11 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v6);
        uint8x8_t v12 = (HALS_ObjectMap *)v11;
        if (v11) {
          int v13 = *(_DWORD *)(v11 + 232);
        }
        else {
          int v13 = -1;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          float v17 = *v6;
          uint64_t v18 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
          int v19 = *((_DWORD *)this + 4);
          double v20 = v6[10];
          *(_DWORD *)__CFString buf = 136316674;
          std::string v35 = "HALS_Device.cpp";
          __int16 v36 = 1024;
          int v37 = 2153;
          __int16 v38 = 1024;
          float v39 = v17;
          __int16 v40 = 1024;
          int v41 = v13;
          __int16 v42 = 2080;
          uint64_t v43 = v18;
          __int16 v44 = 1024;
          int v45 = v19;
          __int16 v46 = 2048;
          double v47 = v20;
          _os_log_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_UpdateClientVolumeScalarDucking: client %u (pid %d) is a ducker so its ducked volume scalar on device %s (%u) is %f", buf, 0x38u);
        }
      }
      else if (*((unsigned char *)v6 + 44))
      {
        v6[10] = 1.0;
        uint64_t v14 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v6);
        uint8x8_t v12 = (HALS_ObjectMap *)v14;
        if (v14) {
          int v15 = *(_DWORD *)(v14 + 232);
        }
        else {
          int v15 = -1;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          float v23 = *v6;
          uint64_t v24 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
          int v25 = *((_DWORD *)this + 4);
          double v26 = v6[10];
          *(_DWORD *)__CFString buf = 136316674;
          std::string v35 = "HALS_Device.cpp";
          __int16 v36 = 1024;
          int v37 = 2162;
          __int16 v38 = 1024;
          float v39 = v23;
          __int16 v40 = 1024;
          int v41 = v15;
          __int16 v42 = 2080;
          uint64_t v43 = v24;
          __int16 v44 = 1024;
          int v45 = v25;
          __int16 v46 = 2048;
          double v47 = v26;
          _os_log_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_UpdateClientVolumeScalarDucking: client %u (pid %d) is opted out from ducking so its ducked volume scalar on device %s (%u) is %f", buf, 0x38u);
        }
      }
      else
      {
        v6[10] = v8;
        uint64_t v21 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*(unsigned int *)v6);
        uint8x8_t v12 = (HALS_ObjectMap *)v21;
        if (v21) {
          int v22 = *(_DWORD *)(v21 + 232);
        }
        else {
          int v22 = -1;
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          float v27 = *v6;
          uint64_t v28 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
          int v29 = *((_DWORD *)this + 4);
          double v30 = v6[10];
          *(_DWORD *)__CFString buf = 136316674;
          std::string v35 = "HALS_Device.cpp";
          __int16 v36 = 1024;
          int v37 = 2171;
          __int16 v38 = 1024;
          float v39 = v27;
          __int16 v40 = 1024;
          int v41 = v22;
          __int16 v42 = 2080;
          uint64_t v43 = v28;
          __int16 v44 = 1024;
          int v45 = v29;
          __int16 v46 = 2048;
          double v47 = v30;
          _os_log_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_UpdateClientVolumeScalarDucking: client %u (pid %d) is a duckee so its ducked volume scalar on device %s (%u) is %f", buf, 0x38u);
        }
      }
      HALS_ObjectMap::ReleaseObject(v12, v16);
      v6 += 12;
    }
    while (v6 != (float *)v7);
  }
  uint64_t v31 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 400))(this);
  if (v31)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN11HALS_Device32_UpdateClientVolumeScalarDuckingEdd_block_invoke;
    block[3] = &__block_descriptor_tmp_128;
    block[4] = v31;
    *(double *)&void block[5] = a2;
    *(double *)&block[6] = a3;
    unsigned __int8 v32 = atomic_load((unsigned __int8 *)this + 696);
    if (v32) {
      atomic_store(1u, (unsigned __int8 *)this + 697);
    }
    dispatch_async(*((dispatch_queue_t *)this + 83), block);
  }
}

void sub_1BAF4AE1C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device32_UpdateClientVolumeScalarDuckingEdd_block_invoke(uint64_t a1)
{
  (*(void (**)(void, double, double))(**(void **)(a1 + 32) + 280))(*(void *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 48));
  uint64_t v3 = *(HALS_ObjectMap **)(a1 + 32);

  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1BAF4AEE4(void *a1)
{
}

BOOL HALS_Device::_IsClientOptedOutForDucking(HALS_Device *this, int a2)
{
  int v2 = (char *)*((void *)this + 66);
  uint64_t v3 = (char *)*((void *)this + 67);
  CFStringRef v4 = v2;
  if (v2 != v3)
  {
    while (*(_DWORD *)v4 != a2)
    {
      v4 += 48;
      if (v4 == v3)
      {
        CFStringRef v4 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  return v4 != v3 && v2[16 * ((v4 - v2) >> 4) + 44] != 0;
}

uint64_t HALS_Device::_DuckClientOptOut(HALS_Device *this, HALS_ObjectMap *a2, int a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (char *)*((void *)this + 66);
  float v7 = (char *)*((void *)this + 67);
  float v8 = v6;
  if (v6 != v7)
  {
    while (*(_DWORD *)v8 != a2)
    {
      v8 += 48;
      if (v8 == v7)
      {
        float v8 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  if (v8 == v7)
  {
    HALS_Device::AppendDuckHistory(this, (int)a2, -1.0, a3);
    uint64_t v16 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    float v17 = (HALS_ObjectMap *)v16;
    if (v16) {
      int v18 = *(_DWORD *)(v16 + 232);
    }
    else {
      int v18 = -1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
      int v21 = *((_DWORD *)this + 4);
      int v22 = "in for";
      int v38 = 136316674;
      *(void *)float v39 = "HALS_Device.cpp";
      *(_WORD *)&v39[8] = 1024;
      if (a3) {
        int v22 = "out for";
      }
      *(_DWORD *)&v39[10] = 2108;
      __int16 v40 = 1024;
      int v41 = (int)a2;
      LOWORD(v42) = 1024;
      *(_DWORD *)((char *)&v42 + 2) = v18;
      HIWORD(v42) = 2080;
      *(void *)uint64_t v43 = v22;
      *(_WORD *)&v43[8] = 2080;
      *(void *)&unsigned char v43[10] = v20;
      __int16 v44 = 1024;
      int v45 = v21;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientOptOut: client %u (pid %d) is opting %s ducking on device %s (%u) ", (uint8_t *)&v38, 0x38u);
    }
    uint64_t v23 = *((void *)this + 67);
    int v38 = (int)a2;
    *(void *)&v39[4] = 0;
    *(_WORD *)&v39[12] = 1;
    __asm { FMOV            V0.2S, #1.0 }
    uint64_t v42 = _D0;
    v43[0] = 0;
    *(void *)&void v43[4] = _D0;
    v43[12] = a3;
    std::vector<HALS_Device::ClientInfo>::insert((uint64_t *)this + 66, v23, (uint64_t)&v38);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v39[4]);
    HALS_ObjectMap::ReleaseObject(v17, v29);
  }
  else
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v6) >> 4);
    int v10 = (float *)&v6[16 * ((v8 - v6) >> 4)];
    float v12 = v10[9];
    uint64_t v11 = v10 + 9;
    HALS_Device::AppendDuckHistory(this, (int)a2, v12, a3);
    uint64_t v13 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    uint64_t v14 = (HALS_ObjectMap *)v13;
    if (a3)
    {
      if (v13) {
        int v15 = *(_DWORD *)(v13 + 232);
      }
      else {
        int v15 = -1;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
        int v31 = *((_DWORD *)this + 4);
        int v38 = 136316674;
        *(void *)float v39 = "HALS_Device.cpp";
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&v39[10] = 2079;
        __int16 v40 = 1024;
        int v41 = (int)a2;
        LOWORD(v42) = 1024;
        *(_DWORD *)((char *)&v42 + 2) = v15;
        HIWORD(v42) = 2080;
        *(void *)uint64_t v43 = "out for";
        *(_WORD *)&v43[8] = 2080;
        *(void *)&unsigned char v43[10] = v30;
        __int16 v44 = 1024;
        int v45 = v31;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientOptOut: client %u (pid %d) is opting %s ducking on device %s (%u) ", (uint8_t *)&v38, 0x38u);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v6[48 * v9 + 44] = 1;
      HALS_ObjectMap::ReleaseObject(v14, v32);
    }
    else
    {
      if (v13) {
        int v19 = *(_DWORD *)(v13 + 232);
      }
      else {
        int v19 = -1;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
        int v34 = *((_DWORD *)this + 4);
        int v38 = 136316674;
        *(void *)float v39 = "HALS_Device.cpp";
        *(_WORD *)&v39[8] = 1024;
        *(_DWORD *)&v39[10] = 2090;
        __int16 v40 = 1024;
        int v41 = (int)a2;
        LOWORD(v42) = 1024;
        *(_DWORD *)((char *)&v42 + 2) = v19;
        HIWORD(v42) = 2080;
        *(void *)uint64_t v43 = "in for";
        *(_WORD *)&v43[8] = 2080;
        *(void *)&unsigned char v43[10] = v33;
        __int16 v44 = 1024;
        int v45 = v34;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientOptOut: client %u (pid %d) is opting %s ducking on device %s (%u) ", (uint8_t *)&v38, 0x38u);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      v6[48 * v9 + 44] = 0;
      _DWORD *v11 = 1065353216;
      HALS_ObjectMap::ReleaseObject(v14, v35);
    }
  }
  double v36 = (*(double (**)(HALS_Device *))(*(void *)this + 264))(this);
  return (*(uint64_t (**)(HALS_Device *, double, double))(*(void *)this + 792))(this, 0.0, v36 * 0.0500000007);
}

void sub_1BAF4B418(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_Device::AppendDuckHistory(HALS_Device *this, int a2, double a3, char a4)
{
  time_t v125 = 0;
  time(&v125);
  float v8 = (char *)*((void *)this + 71);
  unint64_t v9 = (void **)*((void *)this + 70);
  uint64_t v10 = v8 - (char *)v9;
  if (v8 == (char *)v9) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = 16 * (v8 - (char *)v9) - 1;
  }
  unint64_t v12 = *((void *)this + 73);
  unint64_t v13 = *((void *)this + 74) + v12;
  if (v11 == v13)
  {
    uint64_t v14 = (void *)((char *)this + 552);
    BOOL v15 = v12 >= 0x80;
    unint64_t v16 = v12 - 128;
    if (v15)
    {
      *((void *)this + 73) = v16;
      int v19 = *v9;
      float v17 = (char *)(v9 + 1);
      int v18 = v19;
      *((void *)this + 70) = v17;
      if (*((char **)this + 72) == v8)
      {
        uint64_t v20 = (uint64_t)&v17[-*v14];
        if ((unint64_t)v17 <= *v14)
        {
          if (v8 == (char *)*v14) {
            unint64_t v48 = 1;
          }
          else {
            unint64_t v48 = (uint64_t)&v8[-*v14] >> 2;
          }
          __int16 v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v48);
          uint64_t v51 = &v49[8 * (v48 >> 2)];
          size_t v52 = (uint64_t *)*((void *)this + 70);
          float v8 = v51;
          uint64_t v53 = *((void *)this + 71) - (void)v52;
          if (v53)
          {
            float v8 = &v51[v53 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v54 = 8 * (v53 >> 3);
            std::string v55 = &v49[8 * (v48 >> 2)];
            do
            {
              uint64_t v56 = *v52++;
              *(void *)std::string v55 = v56;
              v55 += 8;
              v54 -= 8;
            }
            while (v54);
          }
          CFComparisonResult v57 = (void *)*((void *)this + 69);
          *((void *)this + 69) = v49;
          *((void *)this + 70) = v51;
          *((void *)this + 71) = v8;
          *((void *)this + 72) = &v49[8 * v50];
          if (v57)
          {
            operator delete(v57);
            float v8 = (char *)*((void *)this + 71);
          }
        }
        else
        {
          uint64_t v21 = v20 >> 3;
          BOOL v22 = v20 >> 3 < -1;
          uint64_t v23 = (v20 >> 3) + 2;
          if (v22) {
            uint64_t v24 = v23;
          }
          else {
            uint64_t v24 = v21 + 1;
          }
          uint64_t v25 = -(v24 >> 1);
          uint64_t v26 = v24 >> 1;
          float v27 = &v17[-8 * v26];
          int64_t v28 = v8 - v17;
          if (v8 == v17)
          {
            int v29 = v8;
          }
          else
          {
            memmove(&v17[-8 * v26], v17, v8 - v17);
            int v29 = (char *)*((void *)this + 70);
          }
          float v8 = &v27[v28];
          *((void *)this + 71) = &v27[v28];
          *((void *)this + 70) = &v29[8 * v25];
        }
      }
      *(void *)float v8 = v18;
    }
    else
    {
      char v117 = a4;
      uint64_t v30 = v10 >> 3;
      int v31 = (char *)*((void *)this + 72);
      unsigned __int8 v32 = (void **)*((void *)this + 69);
      uint64_t v33 = v31 - (char *)v32;
      if (v10 >> 3 >= (unint64_t)((v31 - (char *)v32) >> 3))
      {
        if (v31 == (char *)v32) {
          unint64_t v36 = 1;
        }
        else {
          unint64_t v36 = v33 >> 2;
        }
        int v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v36);
        uint64_t v39 = v38;
        __int16 v40 = &v37[8 * v30];
        *(void *)&long long v41 = v37;
        *((void *)&v41 + 1) = v40;
        long long v121 = v41;
        uint64_t v42 = operator new(0x1000uLL);
        *(void *)&long long v43 = v40;
        *((void *)&v43 + 1) = &v37[8 * v39];
        if (v30 == v39)
        {
          uint64_t v44 = 8 * v30;
          *(void *)&long long v45 = v121;
          if (v10 < 1)
          {
            uint64_t v80 = v42;
            uint64_t v81 = v44 >> 2;
            if (v8 == (char *)v9) {
              unint64_t v82 = 1;
            }
            else {
              unint64_t v82 = v81;
            }
            uint64_t v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v82);
            __int16 v40 = &v83[8 * (v82 >> 2)];
            *(void *)&long long v45 = v83;
            *((void *)&v45 + 1) = v40;
            *(void *)&long long v43 = v40;
            *((void *)&v43 + 1) = &v83[8 * v84];
            if (v37)
            {
              long long v118 = v43;
              long long v122 = v45;
              operator delete(v37);
              long long v43 = v118;
              long long v45 = v122;
            }
            uint64_t v42 = v80;
          }
          else
          {
            uint64_t v46 = v44 >> 3;
            if (v46 >= -1) {
              unint64_t v47 = v46 + 1;
            }
            else {
              unint64_t v47 = v46 + 2;
            }
            v40 -= 8 * (v47 >> 1);
            *(void *)&long long v43 = v40;
            *((void *)&v45 + 1) = v40;
          }
        }
        else
        {
          long long v45 = v121;
        }
        *(void *)__int16 v40 = v42;
        *(void *)&long long v43 = v43 + 8;
        uint64_t v85 = *((void *)this + 71);
        a4 = v117;
        while (v85 != *((void *)this + 70))
        {
          uint64_t v86 = (void *)*((void *)&v45 + 1);
          if (*((void *)&v45 + 1) == (void)v45)
          {
            uint64_t v88 = (unsigned char *)v43;
            if ((unint64_t)v43 >= *((void *)&v43 + 1))
            {
              if (*((void *)&v43 + 1) == *((void *)&v45 + 1)) {
                unint64_t v93 = 1;
              }
              else {
                unint64_t v93 = (uint64_t)(*((void *)&v43 + 1) - *((void *)&v45 + 1)) >> 2;
              }
              size_t v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v93);
              uint64_t v87 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
              int v96 = v87;
              uint64_t v97 = v88 - (unsigned char *)v86;
              if (v88 != (unsigned char *)v86)
              {
                int v96 = &v87[v97 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v98 = 8 * (v97 >> 3);
                unint64_t v99 = v87;
                uint64_t v100 = v86;
                do
                {
                  uint64_t v101 = *v100++;
                  *(void *)unint64_t v99 = v101;
                  v99 += 8;
                  v98 -= 8;
                }
                while (v98);
              }
              *(void *)&long long v45 = v94;
              *((void *)&v45 + 1) = v87;
              *(void *)&long long v43 = v96;
              *((void *)&v43 + 1) = &v94[8 * v95];
              if (v86)
              {
                long long v119 = v43;
                long long v124 = v45;
                operator delete(v86);
                long long v43 = v119;
                long long v45 = v124;
              }
            }
            else
            {
              uint64_t v89 = (uint64_t)(*((void *)&v43 + 1) - v43) >> 3;
              if (v89 >= -1) {
                uint64_t v90 = v89 + 1;
              }
              else {
                uint64_t v90 = v89 + 2;
              }
              uint64_t v91 = v90 >> 1;
              uint64_t v92 = v43 + 8 * (v90 >> 1);
              uint64_t v87 = (char *)(v92 - (v43 - *((void *)&v45 + 1)));
              if ((void)v43 == *((void *)&v45 + 1))
              {
                uint64_t v88 = (unsigned char *)*((void *)&v45 + 1);
              }
              else
              {
                uint64_t v120 = *((void *)&v43 + 1);
                uint64_t v123 = v45;
                memmove((void *)(v92 - (v43 - *((void *)&v45 + 1))), *((const void **)&v45 + 1), v43 - *((void *)&v45 + 1));
                *((void *)&v43 + 1) = v120;
                *(void *)&long long v45 = v123;
              }
              *((void *)&v45 + 1) = v87;
              *(void *)&long long v43 = &v88[8 * v91];
            }
          }
          else
          {
            uint64_t v87 = (char *)*((void *)&v45 + 1);
          }
          uint64_t v102 = *(void *)(v85 - 8);
          v85 -= 8;
          *((void *)v87 - 1) = v102;
          *((void *)&v45 + 1) -= 8;
        }
        unsigned int v103 = (char *)*v14;
        *(_OWORD *)uint64_t v14 = v45;
        *(_OWORD *)((char *)this + 568) = v43;
        if (v103) {
          operator delete(v103);
        }
        goto LABEL_85;
      }
      int v34 = operator new(0x1000uLL);
      std::string v35 = v34;
      if (v31 != v8)
      {
        *(void *)float v8 = v34;
        *((void *)this + 71) += 8;
        a4 = v117;
LABEL_85:
        unint64_t v12 = *((void *)this + 73);
        unint64_t v9 = (void **)*((void *)this + 70);
        unint64_t v13 = *((void *)this + 74) + v12;
        goto LABEL_86;
      }
      if (v32 == v9)
      {
        if (v8 == (char *)v9) {
          unint64_t v58 = 1;
        }
        else {
          unint64_t v58 = v33 >> 2;
        }
        uint64_t v59 = 2 * v58;
        BOOL v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v58);
        unint64_t v9 = (void **)&v60[(v59 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v62 = (uint64_t *)*((void *)this + 70);
        uint64_t v63 = v9;
        uint64_t v64 = *((void *)this + 71) - (void)v62;
        if (v64)
        {
          uint64_t v63 = (void **)((char *)v9 + (v64 & 0xFFFFFFFFFFFFFFF8));
          uint64_t v65 = 8 * (v64 >> 3);
          uint64_t v66 = &v60[(v59 + 6) & 0xFFFFFFFFFFFFFFF8];
          do
          {
            uint64_t v67 = *v62++;
            *(void *)uint64_t v66 = v67;
            v66 += 8;
            v65 -= 8;
          }
          while (v65);
        }
        int v68 = (void *)*((void *)this + 69);
        *((void *)this + 69) = v60;
        *((void *)this + 70) = v9;
        *((void *)this + 71) = v63;
        *((void *)this + 72) = &v60[8 * v61];
        if (v68)
        {
          operator delete(v68);
          unint64_t v9 = (void **)*((void *)this + 70);
        }
      }
      *(v9 - 1) = v35;
      int v69 = (char *)*((void *)this + 70);
      *((void *)this + 70) = v69 - 8;
      uint64_t v70 = *((void *)v69 - 1);
      *((void *)this + 70) = v69;
      BOOL v71 = (char *)*((void *)this + 71);
      a4 = v117;
      if (v71 == *((char **)this + 72))
      {
        uint64_t v72 = (uint64_t)&v69[-*v14];
        if ((unint64_t)v69 <= *v14)
        {
          if (v71 == (char *)*v14) {
            unint64_t v107 = 1;
          }
          else {
            unint64_t v107 = (uint64_t)&v71[-*v14] >> 2;
          }
          char v108 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v107);
          unint64_t v110 = &v108[8 * (v107 >> 2)];
          unint64_t v111 = (uint64_t *)*((void *)this + 70);
          BOOL v71 = v110;
          uint64_t v112 = *((void *)this + 71) - (void)v111;
          if (v112)
          {
            BOOL v71 = &v110[v112 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v113 = 8 * (v112 >> 3);
            uint64_t v114 = &v108[8 * (v107 >> 2)];
            do
            {
              uint64_t v115 = *v111++;
              *(void *)uint64_t v114 = v115;
              v114 += 8;
              v113 -= 8;
            }
            while (v113);
          }
          long long v116 = (void *)*((void *)this + 69);
          *((void *)this + 69) = v108;
          *((void *)this + 70) = v110;
          *((void *)this + 71) = v71;
          *((void *)this + 72) = &v108[8 * v109];
          if (v116)
          {
            operator delete(v116);
            BOOL v71 = (char *)*((void *)this + 71);
          }
        }
        else
        {
          uint64_t v73 = v72 >> 3;
          BOOL v22 = v72 >> 3 < -1;
          uint64_t v74 = (v72 >> 3) + 2;
          if (v22) {
            uint64_t v75 = v74;
          }
          else {
            uint64_t v75 = v73 + 1;
          }
          uint64_t v76 = -(v75 >> 1);
          uint64_t v77 = v75 >> 1;
          __int16 v78 = &v69[-8 * v77];
          int64_t v79 = v71 - v69;
          if (v71 != v69)
          {
            memmove(&v69[-8 * v77], v69, v71 - v69);
            int v69 = (char *)*((void *)this + 70);
          }
          BOOL v71 = &v78[v79];
          *((void *)this + 71) = &v78[v79];
          *((void *)this + 70) = &v69[8 * v76];
        }
      }
      *(void *)BOOL v71 = v70;
    }
    *((void *)this + 71) += 8;
    goto LABEL_85;
  }
LABEL_86:
  uint64_t v104 = *(uint64_t *)((char *)v9 + ((v13 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v13 & 0x7F);
  *(void *)uint64_t v104 = v125;
  *(_DWORD *)(v104 + 8) = a2;
  *(double *)(v104 + 16) = a3;
  *(unsigned char *)(v104 + 24) = a4;
  uint64_t v105 = *((void *)this + 74);
  *((void *)this + 74) = v105 + 1;
  if ((unint64_t)(v105 + 1) >= 0xB)
  {
    *((void *)this + 74) = v105;
    unint64_t v106 = v12 + 1;
    *((void *)this + 73) = v106;
    if (v106 >= 0x100)
    {
      operator delete(*v9);
      *((void *)this + 70) += 8;
      *((void *)this + 73) -= 128;
    }
  }
}

void sub_1BAF4BAB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, long long a13)
{
  operator delete(v13);
  if ((void)a13) {
    operator delete((void *)a13);
  }
  _Unwind_Resume(a1);
}

_DWORD *std::vector<HALS_Device::ClientInfo>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 / 48;
  unint64_t v9 = (_DWORD *)(*a1 + 48 * (v7 / 48));
  uint64_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v5) >> 4) + 1;
    if (v15 > 0x555555555555555) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v5) >> 4);
    if (2 * v17 > v15) {
      unint64_t v15 = 2 * v17;
    }
    if (v17 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v18 = 0x555555555555555;
    }
    else {
      unint64_t v18 = v15;
    }
    uint64_t v50 = v11;
    if (v18)
    {
      uint64_t v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v18);
    }
    else
    {
      uint64_t v20 = 0;
      uint64_t v19 = 0;
    }
    uint64_t v21 = (uint64_t)&v20[48 * v8];
    unint64_t v47 = v20;
    *(void *)&long long v48 = v21;
    *((void *)&v48 + 1) = v21;
    __int16 v49 = &v20[48 * v19];
    if (v8 == v19)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = 2 * v8;
        }
        uint64_t v54 = v11;
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v29);
        uint64_t v31 = (uint64_t)&v30[48 * (v29 >> 2)];
        uint64_t v51 = v30;
        v52.i64[0] = v31;
        uint64_t v33 = &v30[48 * v32];
        v52.i64[1] = v31;
        uint64_t v53 = v33;
        uint64_t v34 = v48;
        if (*((void *)&v48 + 1) == (void)v48)
        {
          int64x2_t v37 = vdupq_n_s64(v48);
          uint64_t v35 = v31;
        }
        else
        {
          uint64_t v35 = v31 + 48 * ((*((void *)&v48 + 1) - (void)v48) / 48);
          uint64_t v36 = 48 * ((*((void *)&v48 + 1) - (void)v48) / 48);
          do
          {
            std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(v31, v34);
            v31 += 48;
            v34 += 48;
            v36 -= 48;
          }
          while (v36);
          uint64_t v30 = v51;
          uint64_t v31 = v52.i64[0];
          int64x2_t v37 = (int64x2_t)v48;
          uint64_t v33 = v53;
        }
        uint64_t v38 = v49;
        uint64_t v51 = v47;
        unint64_t v47 = v30;
        *(void *)&long long v48 = v31;
        int64x2_t v52 = v37;
        *((void *)&v48 + 1) = v35;
        __int16 v49 = v33;
        uint64_t v53 = v38;
        std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)&v51);
        uint64_t v21 = v35;
      }
      else
      {
        uint64_t v22 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v22 = v8 + 1;
        }
        v21 -= 48 * (v22 >> 1);
        *(void *)&long long v48 = v21;
        *((void *)&v48 + 1) = v21;
      }
    }
    std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(v21, a3);
    uint64_t v39 = v48;
    *((void *)&v48 + 1) += 48;
    uint64_t v40 = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HALS_Device::ClientInfo>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>>((uint64_t)v9, (uint64_t)v9, *a1, *a1, v48, v48);
    *(void *)&long long v48 = v40;
    long long v41 = (_DWORD *)a1[1];
    uint64_t v42 = *((void *)&v48 + 1);
    if (v9 != v41)
    {
      uint64_t v43 = 0;
      do
      {
        std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(*((void *)&v48 + 1) + v43 * 4, (uint64_t)&v9[v43]);
        v43 += 12;
      }
      while (&v9[v43] != v41);
      uint64_t v42 = *((void *)&v48 + 1) + v43 * 4;
      uint64_t v40 = v48;
      unint64_t v9 = (_DWORD *)a1[1];
    }
    uint64_t v44 = *a1;
    *a1 = v40;
    a1[1] = v42;
    uint64_t v45 = a1[2];
    a1[2] = (uint64_t)v49;
    *((void *)&v48 + 1) = v9;
    __int16 v49 = (char *)v45;
    unint64_t v47 = (char *)v44;
    *(void *)&long long v48 = v44;
    std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)&v47);
    return (_DWORD *)v39;
  }
  else if (v9 == (_DWORD *)v6)
  {
    std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(*a1 + 48 * (v7 / 48), a3);
    a1[1] = (uint64_t)(v9 + 12);
  }
  else
  {
    unint64_t v12 = v6 - 48;
    if (v6 < 0x30)
    {
      uint64_t v14 = a1[1];
    }
    else
    {
      unint64_t v13 = v6 - 48;
      uint64_t v14 = a1[1];
      do
      {
        std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(v14, v13);
        v13 += 48;
        v14 += 48;
      }
      while (v13 < v6);
    }
    a1[1] = v14;
    if ((_DWORD *)v6 != v9 + 12)
    {
      uint64_t v23 = 0;
      uint64_t v24 = v5 + 16 * ((uint64_t)(v6 - (void)(v9 + 12)) >> 4) + 48 * v8;
      do
      {
        uint64_t v25 = v6 + v23;
        *(_DWORD *)(v6 + v23 - 48) = *(_DWORD *)(v12 + v23 - 48);
        CACFDictionary::operator=(v6 + v23 - 40, v12 + v23 - 40);
        long long v26 = *(_OWORD *)(v24 + v23 - 24);
        *(void *)(v25 - 11) = *(void *)(v24 + v23 - 11);
        *(_OWORD *)(v25 - 24) = v26;
        v23 -= 48;
      }
      while (-16 * ((uint64_t)(v6 - (void)(v9 + 12)) >> 4) != v23);
    }
    *unint64_t v9 = *(_DWORD *)a3;
    uint64_t v27 = v5 + 48 * v8;
    CACFDictionary::operator=(v27 + 8, a3 + 8);
    long long v28 = *(_OWORD *)(a3 + 24);
    *(void *)(v27 + 37) = *(void *)(a3 + 37);
    *(_OWORD *)(v27 + 24) = v28;
  }
  return v9;
}

void sub_1BAF4BE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16)
{
  *(void *)(v17 + 8) = v16;
  _Unwind_Resume(exception_object);
}

uint64_t std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  CFStringRef v4 = *(const void **)(a2 + 8);
  *(void *)(a1 + 8) = v4;
  int v5 = *(unsigned __int8 *)(a2 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  if (v5) {
    BOOL v6 = v4 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (!v6) {
    CFRetain(v4);
  }
  long long v7 = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 37) = *(void *)(a2 + 37);
  *(_OWORD *)(a1 + 24) = v7;
  return a1;
}

uint64_t std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    CACFDictionary::~CACFDictionary((CACFDictionary *)(i - 40));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HALS_Device::ClientInfo>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  for (uint64_t i = 0;
        a2 + i != a4;
        std::construct_at[abi:ne180100]<HALS_Device::ClientInfo,HALS_Device::ClientInfo,HALS_Device::ClientInfo*>(a6 + i, i + a2))
  {
    i -= 48;
  }
  return a6 + i;
}

uint64_t HALS_Device::_DuckClientVolumeScalar(HALS_Device *this, HALS_ObjectMap *a2, float a3, double a4, double a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  float v9 = 0.0;
  if (a3 >= 0.0) {
    float v9 = a3;
  }
  if (v9 <= 1.0) {
    float v10 = v9;
  }
  else {
    float v10 = 1.0;
  }
  uint64_t v11 = (char *)*((void *)this + 66);
  unint64_t v12 = (char *)*((void *)this + 67);
  unint64_t v13 = v11;
  if (v11 != v12)
  {
    while (*(_DWORD *)v13 != a2)
    {
      v13 += 48;
      if (v13 == v12)
      {
        unint64_t v13 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  if (v13 == v12)
  {
    if (a3 != 1.0)
    {
      HALS_Device::AppendDuckHistory(this, (int)a2, v10, 0);
      uint64_t v19 = HALS_ObjectMap::CopyObjectByObjectID(a2);
      uint64_t v20 = (HALS_ObjectMap *)v19;
      if (v19) {
        int v21 = *(_DWORD *)(v19 + 232);
      }
      else {
        int v21 = -1;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
        int v28 = *((_DWORD *)this + 4);
        int v41 = 136317186;
        *(void *)uint64_t v42 = "HALS_Device.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&unsigned char v42[10] = 2055;
        __int16 v43 = 1024;
        int v44 = (int)a2;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v21;
        HIWORD(v45) = 2080;
        uint64_t v46 = v27;
        *(_WORD *)unint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v28;
        __int16 v48 = 2048;
        double v49 = v10;
        __int16 v50 = 2048;
        double v51 = a4;
        __int16 v52 = 2048;
        double v53 = a5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientVolumeScalar: client %u (pid %d) ducking device %s (%u) to %f over (%f, %0.f)", (uint8_t *)&v41, 0x4Cu);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      uint64_t v29 = *((void *)this + 67);
      int v41 = (int)a2;
      *(void *)&v42[4] = 0;
      *(_WORD *)&v42[12] = 1;
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v45 = _D0;
      LOBYTE(v46) = 1;
      *((float *)&v46 + 1) = v10;
      *(_DWORD *)unint64_t v47 = 1065353216;
      v47[4] = 0;
      std::vector<HALS_Device::ClientInfo>::insert((uint64_t *)this + 66, v29, (uint64_t)&v41);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v42[4]);
      HALS_ObjectMap::ReleaseObject(v20, v35);
    }
  }
  else
  {
    uint64_t v14 = (v13 - v11) >> 4;
    unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * v14;
    HALS_Device::AppendDuckHistory(this, (int)a2, v10, v11[16 * v14 + 44]);
    uint64_t v16 = HALS_ObjectMap::CopyObjectByObjectID(a2);
    uint64_t v17 = (HALS_ObjectMap *)v16;
    if (v10 == 1.0)
    {
      if (v16) {
        int v22 = *(_DWORD *)(v16 + 232);
      }
      else {
        int v22 = -1;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v36 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
        int v37 = *((_DWORD *)this + 4);
        int v41 = 136316930;
        *(void *)uint64_t v42 = "HALS_Device.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&unsigned char v42[10] = 2037;
        __int16 v43 = 1024;
        int v44 = (int)a2;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v22;
        HIWORD(v45) = 2080;
        uint64_t v46 = v36;
        *(_WORD *)unint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v37;
        __int16 v48 = 2048;
        double v49 = a4;
        __int16 v50 = 2048;
        double v51 = a5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientVolumeScalar: client %u (pid %d) unducking device %s (%u) over (%f, %0.f)", (uint8_t *)&v41, 0x42u);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      uint64_t v38 = &v11[48 * v15];
      v38[32] = 0;
      *((_DWORD *)v38 + 9) = 1065353216;
      HALS_ObjectMap::ReleaseObject(v17, v39);
    }
    else
    {
      if (v16) {
        int v18 = *(_DWORD *)(v16 + 232);
      }
      else {
        int v18 = -1;
      }
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
        int v24 = *((_DWORD *)this + 4);
        int v41 = 136317186;
        *(void *)uint64_t v42 = "HALS_Device.cpp";
        *(_WORD *)&v42[8] = 1024;
        *(_DWORD *)&unsigned char v42[10] = 2025;
        __int16 v43 = 1024;
        int v44 = (int)a2;
        LOWORD(v45) = 1024;
        *(_DWORD *)((char *)&v45 + 2) = v18;
        HIWORD(v45) = 2080;
        uint64_t v46 = v23;
        *(_WORD *)unint64_t v47 = 1024;
        *(_DWORD *)&v47[2] = v24;
        __int16 v48 = 2048;
        double v49 = v10;
        __int16 v50 = 2048;
        double v51 = a4;
        __int16 v52 = 2048;
        double v53 = a5;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_DuckClientVolumeScalar: client %u (pid %d) ducking device %s (%u) to %f over (%f, %0.f)", (uint8_t *)&v41, 0x4Cu);
      }
      HALS_Device::DumpDuckHistory(this, 0, 0, 0);
      uint64_t v25 = &v11[48 * v15];
      v25[32] = 1;
      *((float *)v25 + 9) = v10;
      HALS_ObjectMap::ReleaseObject(v17, v26);
    }
  }
  return (*(uint64_t (**)(HALS_Device *, double, double))(*(void *)this + 792))(this, a4, a5);
}

void sub_1BAF4C51C(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_SetClientVolumeScalar(HALS_Device *this, int a2, unsigned int a3, float a4)
{
  char v4 = a3;
  if (a4 < 0.0) {
    a4 = 0.0;
  }
  if (a4 > 1.0) {
    a4 = 1.0;
  }
  long long v7 = (char *)*((void *)this + 66);
  uint64_t v8 = *((void *)this + 67);
  float v9 = v7;
  if (v7 != (char *)v8)
  {
    while (*(_DWORD *)v9 != a2)
    {
      v9 += 48;
      if (v9 == (char *)v8)
      {
        float v9 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  if (v9 == (char *)v8)
  {
    if (a4 != 1.0)
    {
      unint64_t v13 = (uint64_t *)((char *)this + 528);
      int v30 = a2;
      if (a3) {
        float v14 = a4;
      }
      else {
        float v14 = 1.0;
      }
      uint64_t v31 = 0;
      if (a3) {
        a4 = 1.0;
      }
      __int16 v32 = 1;
      float v33 = a4;
      float v34 = v14;
      char v35 = 0;
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v36 = _D0;
      char v37 = 0;
      uint64_t v20 = (float *)std::vector<HALS_Device::ClientInfo>::insert(v13, v8, (uint64_t)&v30);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&v31);
      if ((v4 & 1) == 0)
      {
        uint64_t v24 = *((void *)this + 66);
        uint64_t v25 = *((void *)this + 67);
        while (v24 != v25)
        {
          if (*(unsigned char *)(v24 + 32))
          {
            float v26 = *(float *)(v24 + 36);
            if (v26 >= v20[10]) {
              float v26 = v20[10];
            }
            unsigned char v20[10] = v26;
          }
          v24 += 48;
        }
      }
      goto LABEL_19;
    }
    return 0;
  }
  uint64_t v10 = (uint64_t)&v7[16 * ((v9 - v7) >> 4) + 4 * a3];
  float v12 = *(float *)(v10 + 24);
  uint64_t v11 = (float *)(v10 + 24);
  if (v12 == a4) {
    return 0;
  }
  float *v11 = a4;
LABEL_19:
  uint64_t v21 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 400))(this);
  if (v21)
  {
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 0x40000000;
    v27[2] = ___ZN11HALS_Device22_SetClientVolumeScalarEjbf_block_invoke;
    v27[3] = &__block_descriptor_tmp_120_18194;
    v27[4] = v21;
    int v28 = a2;
    char v29 = v4;
    unsigned __int8 v22 = atomic_load((unsigned __int8 *)this + 696);
    if (v22) {
      atomic_store(1u, (unsigned __int8 *)this + 697);
    }
    dispatch_async(*((dispatch_queue_t *)this + 83), v27);
  }
  return 1;
}

void sub_1BAF4C7A4(_Unwind_Exception *a1)
{
  CACFDictionary::~CACFDictionary(v1);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device22_SetClientVolumeScalarEjbf_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void))(**(void **)(a1 + 32) + 272))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
  uint64_t v3 = *(HALS_ObjectMap **)(a1 + 32);

  HALS_ObjectMap::ReleaseObject(v3, v2);
}

void sub_1BAF4C824(void *a1)
{
}

float HALS_Device::_GetClientVolumeScalar(HALS_Device *this, int a2, unsigned int a3)
{
  uint64_t v3 = (char *)*((void *)this + 66);
  char v4 = (char *)*((void *)this + 67);
  int v5 = v3;
  if (v3 != v4)
  {
    while (*(_DWORD *)v5 != a2)
    {
      v5 += 48;
      if (v5 == v4)
      {
        int v5 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  if (v5 == v4) {
    return 1.0;
  }
  else {
    return *(float *)&v3[16 * ((v5 - v3) >> 4) + 24 + 4 * a3];
  }
}

uint64_t HALS_Device::_GetCurrentClientKind(HALS_Device *this)
{
  unsigned int v4 = 0;
  uint64_t v2 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 728))(this);
  if (*((void *)this + 67) == v2) {
    return 0;
  }
  uint64_t result = *(void *)(v2 + 8);
  if (result)
  {
    CACFDictionary::GetUInt32(result, @"kind", &v4);
    return v4;
  }
  return result;
}

uint64_t HALS_Device::_FindHighestPriorityClientDescription(HALS_Device *this)
{
  uint64_t v1 = *((void *)this + 67);
  uint64_t v2 = *((void *)this + 66);
  if (v2 == v1) {
    return *((void *)this + 67);
  }
  do
  {
    uint64_t v4 = *(void *)(v2 + 8);
    if (v4)
    {
      unsigned int v6 = 0;
      CACFDictionary::GetUInt32(v4, @"kind", &v6);
      if (v6) {
        uint64_t result = v2;
      }
      else {
        uint64_t result = v1;
      }
      uint64_t v1 = *((void *)this + 67);
    }
    else
    {
      uint64_t result = v1;
    }
    if (result != v1) {
      break;
    }
    v2 += 48;
  }
  while (v2 != v1);
  return result;
}

uint64_t HALS_Device::_SetClientDescription(HALS_Device *this, HALS_Client *a2, CFTypeRef cf)
{
  int v5 = (char *)*((void *)this + 66);
  unint64_t v6 = *((void *)this + 67);
  long long v7 = v5;
  if (v5 != (char *)v6)
  {
    while (*(_DWORD *)v7 != *((_DWORD *)a2 + 4))
    {
      v7 += 48;
      if (v7 == (char *)v6)
      {
        long long v7 = (char *)*((void *)this + 67);
        break;
      }
    }
  }
  if (v7 == (char *)v6)
  {
    int v31 = *((_DWORD *)a2 + 4);
    CFTypeRef cfa = cf;
    __int16 v33 = 1;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)float v34 = _D0;
    v34[8] = 0;
    *(void *)&v34[12] = _D0;
    v34[20] = 0;
    if (cf)
    {
      CFRetain(cf);
      unint64_t v6 = *((void *)this + 67);
    }
    unint64_t v13 = *((void *)this + 68);
    if (v6 >= v13)
    {
      uint64_t v18 = *((void *)this + 66);
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v18) >> 4);
      if (v19 + 1 > 0x555555555555555) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - v18) >> 4);
      uint64_t v21 = 2 * v20;
      if (2 * v20 <= v19 + 1) {
        uint64_t v21 = v19 + 1;
      }
      if (v20 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v22 = 0x555555555555555;
      }
      else {
        unint64_t v22 = v21;
      }
      uint64_t v38 = (char *)this + 544;
      if (v22)
      {
        uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MutationItinerary::Device>>(v22);
      }
      else
      {
        uint64_t v24 = 0;
        uint64_t v23 = 0;
      }
      uint64_t v25 = &v24[48 * v19];
      v35[0] = v24;
      v35[1] = v25;
      uint64_t v36 = v25;
      char v37 = &v24[48 * v23];
      *(_DWORD *)uint64_t v25 = v31;
      CFTypeRef v26 = cfa;
      *((void *)v25 + 1) = cfa;
      int v27 = v33;
      *((_WORD *)v25 + 8) = v33;
      if (v27 && v26)
      {
        CFRetain(v26);
        uint64_t v25 = v36;
      }
      int v28 = &v24[48 * v19];
      long long v29 = *(_OWORD *)v34;
      *(void *)(v28 + 37) = *(void *)&v34[13];
      *(_OWORD *)(v28 + 24) = v29;
      uint64_t v36 = v25 + 48;
      std::vector<HALS_Device::ClientInfo>::__swap_out_circular_buffer((uint64_t *)this + 66, v35);
      unint64_t v17 = *((void *)this + 67);
      std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer((uint64_t)v35);
    }
    else
    {
      *(_DWORD *)unint64_t v6 = v31;
      CFTypeRef v14 = cfa;
      *(void *)(v6 + 8) = cfa;
      int v15 = v33;
      *(_WORD *)(v6 + 16) = v33;
      if (v15 && v14) {
        CFRetain(v14);
      }
      long long v16 = *(_OWORD *)v34;
      *(void *)(v6 + 37) = *(void *)&v34[13];
      *(_OWORD *)(v6 + 24) = v16;
      unint64_t v17 = v6 + 48;
      *((void *)this + 67) = v6 + 48;
    }
    *((void *)this + 67) = v17;
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cfa);
  }
  else
  {
    CACFDictionary::operator=((uint64_t)&v5[16 * ((v7 - v5) >> 4) + 8], cf);
  }
  return (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(void *)this + 744))(this, a2);
}

void sub_1BAF4CC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  *(void *)(v16 + 536) = v18;
  CACFDictionary::~CACFDictionary(v17);
  _Unwind_Resume(a1);
}

uint64_t std::vector<HALS_Device::ClientInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<HALS_Device::ClientInfo>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>,std::reverse_iterator<HALS_Device::ClientInfo*>>(a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = result;
  uint64_t v5 = *a1;
  *a1 = result;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

CFTypeRef HALS_Device::_CopyClientDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(char **)(a1 + 528);
  uint64_t v3 = *(char **)(a1 + 536);
  if (v2 == v3)
  {
    uint64_t v4 = *(char **)(a1 + 528);
  }
  else
  {
    uint64_t v4 = *(char **)(a1 + 528);
    while (*(_DWORD *)v4 != *(_DWORD *)(a2 + 16))
    {
      v4 += 48;
      if (v4 == v3)
      {
        uint64_t v4 = *(char **)(a1 + 536);
        break;
      }
    }
  }
  if (v4 == v3)
  {
    CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    __int16 v12 = 257;
    CACFDictionary::AddUInt32((CFMutableDictionaryRef *)&cf, @"kind", 0);
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v9 = cf;
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&cf);
  }
  else
  {
    uint64_t v5 = &v2[16 * ((v4 - v2) >> 4)];
    uint64_t v8 = (const void *)*((void *)v5 + 1);
    uint64_t v7 = v5 + 8;
    uint64_t v6 = v8;
    if (v8)
    {
      CFRetain(v6);
      return *(CFTypeRef *)v7;
    }
    else
    {
      return 0;
    }
  }
  return v9;
}

void sub_1BAF4CDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL HALS_Device::IsInputMutedForClient(HALS_Device *this, HALS_Client *a2)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = 0;
  uint64_t v7 = (float *)&v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 1065353216;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_Device21IsInputMutedForClientEP11HALS_Client_block_invoke;
  uint64_t v5[3] = &unk_1E6235D20;
  v5[4] = &v6;
  v5[5] = this;
  void v5[6] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  BOOL v3 = v7[6] == 0.0;
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1BAF4CED8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device21IsInputMutedForClientEP11HALS_Client_block_invoke(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(float (**)(void, void, uint64_t))(**(void **)(a1 + 40) + 752))(*(void *)(a1 + 40), *(unsigned int *)(*(void *)(a1 + 48) + 16), 1);
}

void sub_1BAF4CF58(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetClockDeviceNominalSampleRate(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x3002000000;
  uint64_t v25 = __Block_byref_object_copy__122;
  CFTypeRef v26 = __Block_byref_object_dispose__123;
  CFTypeRef cf = 0;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 0x40000000;
  void v21[2] = ___ZNK11HALS_Device31GetClockDeviceNominalSampleRateEP11HALS_Client_block_invoke;
  v21[3] = &unk_1E6235CF8;
  v21[5] = this;
  v21[6] = a2;
  v21[4] = &v22;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v21);
  if (!v23[5]) {
    goto LABEL_22;
  }
  v18[0] = 0;
  v18[1] = 0;
  HALS_System::GetInstance(&v19, 0, v18);
  if (v19)
  {
    CFStringRef v3 = (const __CFString *)v23[5];
    uint64_t v29 = 0;
    int v30 = &v29;
    uint64_t v31 = 0x4002000000;
    __int16 v32 = __Block_byref_object_copy__6832;
    __int16 v33 = __Block_byref_object_dispose__6833;
    memset(v34, 0, sizeof(v34));
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 0x40000000;
    void v28[2] = ___ZNK11HALS_System17CopyIODeviceByUIDEPK10__CFStringP11HALS_Client_block_invoke;
    v28[3] = &unk_1E6232AA8;
    v28[4] = &v29;
    v28[5] = v19;
    uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v19 + 56))(v19);
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v28);
    uint64_t v5 = (uint64_t *)v30[5];
    uint64_t v6 = (uint64_t *)v30[6];
    if (v5 == v6)
    {
LABEL_13:
      uint64_t v11 = 0;
    }
    else
    {
      while (1)
      {
        if (v3)
        {
          uint64_t v7 = *v5;
          char v35 = 0;
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          v38[0] = MEMORY[0x1E4F143A8];
          v38[1] = 0x40000000;
          v38[2] = ___ZNK18HALS_DeviceManager16CopyIODeviceListERNS_17BasicIODeviceListEP11HALS_Client_block_invoke;
          v38[3] = &__block_descriptor_tmp_8_10359;
          v38[4] = v7;
          v38[5] = &v35;
          uint64_t v8 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 56))(v7);
          HALB_CommandGate::ExecuteCommand(v8, (uint64_t)v38);
          for (uint64_t i = v35; i != v36; ++i)
          {
            uint64_t v11 = *i;
            CFStringRef v12 = (const __CFString *)(*(uint64_t (**)(HALS_ObjectMap *))(*(void *)*i + 200))(*i);
            if (v12 && CFEqual(v12, v3)) {
              goto LABEL_11;
            }
          }
          uint64_t v11 = 0;
LABEL_11:
          HALS_ObjectMap::RetainObject(v11, v9);
          HALS_DeviceManager::BasicIODeviceList::~BasicIODeviceList(&v35, v13);
          if (v11) {
            break;
          }
        }
        if (++v5 == v6) {
          goto LABEL_13;
        }
      }
    }
    _Block_object_dispose(&v29, 8);
    HALS_System::BasicDeviceManagerList::~BasicDeviceManagerList(v34, v14);
    double v16 = v11 ? (*(double (**)(HALS_ObjectMap *))(*(void *)v11 + 264))(v11) : 0.0;
    HALS_ObjectMap::ReleaseObject(v11, v15);
  }
  else
  {
    double v16 = 0.0;
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  if (v16 == 0.0) {
LABEL_22:
  }
    double v16 = 0.0;
  _Block_object_dispose(&v22, 8);
  if (cf) {
    CFRelease(cf);
  }
  return *(void *)&v16;
}

void sub_1BAF4D310(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, HALS_System::BasicDeviceManagerList *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  HALS_ObjectMap::ReleaseObject(v33, a2);
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Block_object_dispose(&a21, 8);
  applesauce::CF::StringRef::~StringRef((const void **)(v34 + 40));
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__122(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__123(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 40);
  if (v1) {
    CFRelease(v1);
  }
}

void ___ZNK11HALS_Device31GetClockDeviceNominalSampleRateEP11HALS_Client_block_invoke(void *a1)
{
  uint64_t v1 = a1[6];
  if (v1)
  {
    CFStringRef v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(a1[5] + 480), *(_DWORD *)(v1 + 16));
    if (v3)
    {
      if (*((char *)v3 + 47) < 0)
      {
        uint64_t v4 = (const UInt8 *)v3[3];
        if (!v4)
        {
          CFStringRef v6 = 0;
LABEL_8:
          uint64_t v7 = *(void *)(a1[4] + 8);
          uint64_t v8 = *(const void **)(v7 + 40);
          *(void *)(v7 + 40) = v6;
          if (v8) {
            CFRelease(v8);
          }
          return;
        }
        CFIndex v5 = v3[4];
      }
      else
      {
        uint64_t v4 = (const UInt8 *)(v3 + 3);
        CFIndex v5 = *((unsigned __int8 *)v3 + 47);
      }
      CFStringRef v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
      if (!v6)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      goto LABEL_8;
    }
  }
}

void sub_1BAF4D498(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL HALS_Device::IsClockDeviceUIDSetForAnyClient(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1174405120;
  void v7[2] = ___ZNK11HALS_Device31IsClockDeviceUIDSetForAnyClientEN10applesauce2CF9StringRefE_block_invoke;
  void v7[3] = &unk_1F1486EB0;
  void v7[5] = a1;
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  CFTypeRef cf = v3;
  v7[4] = &v9;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  int v5 = *((unsigned __int8 *)v10 + 24);
  if (cf) {
    CFRelease(cf);
  }
  _Block_object_dispose(&v9, 8);
  return v5 != 0;
}

void sub_1BAF4D5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  applesauce::CF::StringRef::~StringRef(v17);
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device31IsClockDeviceUIDSetForAnyClientEN10applesauce2CF9StringRefE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(*(void *)(a1 + 40) + 496);
  if (v1)
  {
    CFTypeRef v3 = (const __CFString **)(a1 + 48);
    do
    {
      if (*((char *)v1 + 47) < 0)
      {
        uint64_t v4 = (const UInt8 *)v1[3];
        if (!v4)
        {
          if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(0, v3) == kCFCompareEqualTo)
          {
            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
            return;
          }
          goto LABEL_10;
        }
        CFIndex v5 = v1[4];
      }
      else
      {
        uint64_t v4 = (const UInt8 *)(v1 + 3);
        CFIndex v5 = *((unsigned __int8 *)v1 + 47);
      }
      CFStringRef v6 = CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
      CFStringRef v7 = v6;
      if (!v6)
      {
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v6, v3) == kCFCompareEqualTo)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
        CFRelease(v7);
        return;
      }
      CFRelease(v7);
LABEL_10:
      uint64_t v1 = (uint64_t *)*v1;
    }
    while (v1);
  }
}

void sub_1BAF4D71C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

CFMutableDictionaryRef HALS_Device::_CreateLegacyIOContextDescription(HALS_Device *this, HALS_Client *a2)
{
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  __int16 v65 = 257;
  CACFDictionary::AddUInt32(&theDict, @"device id", *((_DWORD *)this + 4));
  if (a2)
  {
    uint64_t v4 = theDict;
    CFIndex v5 = &HALS_Device::_AddDSPKeysToIOContextDescriptionForClient(HALS_Client *,__CFDictionary *,std::optional<unsigned int>)const::hostedDspKeys;
    do
    {
      HALS_Device::_GetDSPTypesForClient((uint64_t *)&__p, (uint64_t)this, v5[1] == 1768845428, (uint64_t)a2);
      if (v69[1])
      {
        uint64_t v6 = v5[2];
        if (v6)
        {
          CFStringRef v7 = (unsigned int *)(v5 + 3);
          unint64_t v8 = (unint64_t)&v5[v6 + 3];
          while (1)
          {
            if (v69[0])
            {
              unsigned int v9 = *v7;
              uint64_t v10 = v69;
              uint64_t v11 = v69[0];
              do
              {
                char v12 = v11;
                unint64_t v13 = v10;
                unsigned int v14 = *((_DWORD *)v11 + 7);
                if (v14 >= v9) {
                  uint64_t v10 = (void **)v11;
                }
                else {
                  ++v11;
                }
                uint64_t v11 = (void *)*v11;
              }
              while (v11);
              if (v10 != v69)
              {
                if (v14 < v9) {
                  char v12 = v13;
                }
                if (v9 >= *((_DWORD *)v12 + 7)) {
                  break;
                }
              }
            }
            if ((unint64_t)++v7 >= v8) {
              goto LABEL_17;
            }
          }
          if (v9)
          {
            int v15 = *v5;
            if (*v5 == 1934647636)
            {
              LODWORD(valuePtr) = v9;
              CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v18)
              {
                exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(exception, "Could not construct");
                __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFDictionarySetValue(v4, @"spatialization type", v18);
              CFRelease(v18);
            }
            else if (v15 == 1983996971)
            {
              LODWORD(valuePtr) = v9;
              CFNumberRef v17 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v17)
              {
                uint64_t v54 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v54, "Could not construct");
                __cxa_throw(v54, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFDictionarySetValue(v4, @"voice activity detection enable", v17);
              CFRelease(v17);
            }
            else if (v15 == 1986622324)
            {
              LODWORD(valuePtr) = v9;
              CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
              if (!v16)
              {
                double v53 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                std::runtime_error::runtime_error(v53, "Could not construct");
                __cxa_throw(v53, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
              }
              CFDictionarySetValue(v4, @"vocal isolation type", v16);
              CFRelease(v16);
            }
          }
        }
      }
LABEL_17:
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v69[0]);
      v5 += 5;
    }
    while (v5 < (int *)"11HALS_Device");
    uint64_t v19 = (HALS_Device_HostedDSP *)*((void *)this + 76);
    if (v19)
    {
      HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&valuePtr, v19, (HALS_Client *)1, (uint64_t)a2);
      CFMutableDictionaryRef v20 = (CFMutableDictionaryRef)valuePtr;
      if (valuePtr)
      {
        CFDictionaryRef v21 = valuePtr[2];
        if (v21)
        {
          CFIndex Count = CFDictionaryGetCount(v21);
          if (v4)
          {
            if (Count) {
              DSP_Host_OffloadDictionary::deep_copy((DSP_Host_OffloadDictionary *)&__p);
            }
          }
        }
        std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v20);
      }
    }
    HALS_Device::_GetDSPVirtualChannelLayoutForClient((uint64_t *)&__p, (uint64_t)this, 0, (uint64_t)a2);
    if (v70)
    {
      valuePtr = (const __CFDictionary **)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      __int16 v67 = 256;
      if (!v70) {
        std::__throw_bad_optional_access[abi:ne180100]();
      }
      HALS_Device::ConstructDictionaryFromLayout((HALS_Device *)__p, (CFMutableDictionaryRef *)&valuePtr, v23);
      CFDictionarySetValue(v4, @"spatialization virtual channel layout", valuePtr);
      CACFDictionary::~CACFDictionary((CACFDictionary *)&valuePtr);
      if (v70 && __p)
      {
        v69[0] = __p;
        operator delete(__p);
      }
    }
  }
  uint64_t v24 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 200))(this);
  if (HIBYTE(v65))
  {
    if (v24 && theDict != 0) {
      CFDictionarySetValue(theDict, @"master uid", v24);
    }
  }
  if (a2) {
    uint64_t v26 = *((unsigned int *)a2 + 4);
  }
  else {
    uint64_t v26 = 0;
  }
  int v27 = (void *)(*(uint64_t (**)(HALS_Device *, uint64_t))(*(void *)this + 808))(this, v26);
  std::string __p = v27;
  LOBYTE(v69[0]) = 1;
  if (v27) {
    BOOL v28 = HIBYTE(v65) == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28 && theDict) {
    CFDictionarySetValue(theDict, @"clock device uid", v27);
  }
  int v29 = (*(uint64_t (**)(HALS_Device *, uint64_t, void *))(*(void *)this + 384))(this, 1, v27);
  if (v29)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    uint64_t v31 = 0;
    __int16 v32 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D528];
    __int16 v33 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
    valuePtr = (const __CFDictionary **)Mutable;
    __int16 v67 = 257;
    do
    {
      uint64_t v34 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(void *)this + 392))(this, 1, v31);
      if ((*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, HALS_Client *))(*(void *)this + 608))(this, v34, a2))
      {
        CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(0, 0, v32, v33);
        __int16 v63 = 257;
        uint64_t v36 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 200))(this);
        if (HIBYTE(v63))
        {
          if (v36 && v62 != 0) {
            CFDictionarySetValue(v62, @"uid", v36);
          }
        }
        CACFDictionary::AddUInt32(&v62, @"index", v31);
        if (valuePtr && HIBYTE(v67)) {
          CFArrayAppendValue((CFMutableArrayRef)valuePtr, v62);
        }
        if (__p)
        {
          CACFDictionary::AddUInt32(&v62, @"drift", 1);
          CACFDictionary::AddUInt32(&v62, @"drift algorithm", 0);
          CACFDictionary::AddUInt32(&v62, @"drift quality", 127);
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v62);
      }
      HALS_ObjectMap::ReleaseObject(v34, v35);
      uint64_t v31 = (v31 + 1);
    }
    while (v29 != v31);
    if (valuePtr && CFArrayGetCount((CFArrayRef)valuePtr) && HIBYTE(v65) && valuePtr && theDict) {
      CFDictionarySetValue(theDict, @"grid-in", valuePtr);
    }
    CACFArray::~CACFArray((CACFArray *)&valuePtr);
  }
  int v38 = (*(uint64_t (**)(HALS_Device *, void))(*(void *)this + 384))(this, 0);
  if (v38)
  {
    uint64_t v39 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    uint64_t v40 = 0;
    int v41 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D528];
    uint64_t v42 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
    __int16 v43 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D518];
    valuePtr = (const __CFDictionary **)v39;
    __int16 v67 = 257;
    do
    {
      uint64_t v45 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, void, uint64_t))(*(void *)this + 392))(this, 0, v40);
      if (v45)
      {
        CFMutableDictionaryRef v62 = CFDictionaryCreateMutable(0, 0, v41, v42);
        __int16 v63 = 257;
        int NumberChannels = HALS_Stream::GetNumberChannels(v45);
        CACFDictionary::AddUInt32(&v62, @"channels", NumberChannels);
        CFMutableArrayRef v60 = CFArrayCreateMutable(0, 0, v43);
        __int16 v61 = 257;
        CFMutableArrayRef theArray = CFArrayCreateMutable(0, 0, v43);
        __int16 v59 = 257;
        CFMutableDictionaryRef v56 = CFDictionaryCreateMutable(0, 0, v41, v42);
        __int16 v57 = 257;
        unint64_t v47 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 200))(this);
        if (HIBYTE(v57) && v47 && v56) {
          CFDictionarySetValue(v56, @"uid", v47);
        }
        CACFDictionary::AddUInt32(&v56, @"index", v40);
        if (__p)
        {
          CACFDictionary::AddUInt32(&v56, @"drift", 1);
          CACFDictionary::AddUInt32(&v56, @"drift algorithm", 0);
          CACFDictionary::AddUInt32(&v56, @"drift quality", 127);
        }
        CFMutableArrayRef v48 = theArray;
        if (theArray && HIBYTE(v59))
        {
          CFArrayAppendValue(theArray, v56);
          CFMutableArrayRef v48 = theArray;
        }
        CFMutableArrayRef v49 = v60;
        if (v60 && HIBYTE(v61))
        {
          CFArrayAppendValue(v60, v48);
          CFMutableArrayRef v49 = v60;
        }
        CFMutableDictionaryRef v50 = v62;
        if (HIBYTE(v63) && v49 && v62)
        {
          CFDictionarySetValue(v62, @"stream groups", v49);
          CFMutableDictionaryRef v50 = v62;
        }
        if (valuePtr && HIBYTE(v67)) {
          CFArrayAppendValue((CFMutableArrayRef)valuePtr, v50);
        }
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v56);
        CACFArray::~CACFArray((CACFArray *)&theArray);
        CACFArray::~CACFArray((CACFArray *)&v60);
        CACFDictionary::~CACFDictionary((CACFDictionary *)&v62);
      }
      HALS_ObjectMap::ReleaseObject(v45, v44);
      uint64_t v40 = (v40 + 1);
    }
    while (v38 != v40);
    if (HIBYTE(v65) && valuePtr && theDict) {
      CFDictionarySetValue(theDict, @"grid-out", valuePtr);
    }
    CACFArray::~CACFArray((CACFArray *)&valuePtr);
  }
  if (theDict)
  {
    CFRetain(theDict);
    CFMutableDictionaryRef v51 = theDict;
  }
  else
  {
    CFMutableDictionaryRef v51 = 0;
  }
  CACFString::~CACFString((CACFString *)&__p);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
  return v51;
}

void sub_1BAF4E1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,char a24)
{
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v25);
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v24);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&a17);
  _Unwind_Resume(a1);
}

uint64_t *HALS_Device::_GetDSPTypesForClient(uint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = HALS_Device::ClientDSPInfo::find(a2 + 616, a4);
  if (result)
  {
    if (a3) {
      CFStringRef v7 = result;
    }
    else {
      CFStringRef v7 = result + 5;
    }
    return std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](a1, v7);
  }
  else
  {
    a1[2] = 0;
    a1[1] = 0;
    *a1 = (uint64_t)(a1 + 1);
  }
  return result;
}

uint64_t *HALS_Device::_GetDSPVirtualChannelLayoutForClient(uint64_t *this, uint64_t a2, HALS_Client *a3, uint64_t a4)
{
  uint64_t v4 = this;
  if (!a3
    && a4
    && (this = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(a2 + 624), *(_DWORD *)(a4 + 16))) != 0)
  {
    return (uint64_t *)std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100]((uint64_t)v4, (uint64_t)(this + 12));
  }
  else
  {
    *(unsigned char *)uint64_t v4 = 0;
    *((unsigned char *)v4 + 24) = 0;
  }
  return this;
}

void HALS_Device::ConstructDictionaryFromLayout(HALS_Device *this, CFMutableDictionaryRef *a2, CACFDictionary *a3)
{
  CACFDictionary::AddUInt32(a2, @"channel layout tag", *(_DWORD *)this);
  CACFDictionary::AddUInt32(a2, @"channel bitmap", *((_DWORD *)this + 1));
  CACFDictionary::AddUInt32(a2, @"number channels", *((_DWORD *)this + 2));
  if (!*(_DWORD *)this)
  {
    CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
    CFMutableArrayRef v18 = Mutable;
    __int16 v19 = 257;
    if (Mutable)
    {
      if (*((_DWORD *)this + 2))
      {
        unint64_t v6 = 0;
        CFStringRef v7 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D528];
        unint64_t v8 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D538];
        unsigned int v9 = (char *)this + 20;
        do
        {
          CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, v7, v8);
          __int16 v17 = 257;
          if (theDict)
          {
            CACFDictionary::AddUInt32(&theDict, @"channel label", *((_DWORD *)this + 5 * v6 + 3));
            CACFDictionary::AddUInt32(&theDict, @"channel flags", *((_DWORD *)this + 5 * v6 + 4));
            uint64_t v10 = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
            CFMutableArrayRef theArray = v10;
            __int16 v15 = 257;
            if (v10)
            {
              for (uint64_t i = 0; i != 12; i += 4)
              {
                if (v10 && HIBYTE(v15))
                {
                  int valuePtr = *(_DWORD *)&v9[i];
                  CFNumberRef v12 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
                  CFNumberRef v20 = v12;
                  char v21 = 1;
                  if (v12 && theArray && HIBYTE(v15)) {
                    CFArrayAppendValue(theArray, v12);
                  }
                  CACFNumber::~CACFNumber((CACFNumber *)&v20);
                }
                uint64_t v10 = theArray;
              }
              if (HIBYTE(v17) && theArray && theDict) {
                CFDictionarySetValue(theDict, @"coordinates", theArray);
              }
            }
            if (v18 && HIBYTE(v19)) {
              CFArrayAppendValue(v18, theDict);
            }
            CACFArray::~CACFArray((CACFArray *)&theArray);
          }
          CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
          ++v6;
          v9 += 20;
        }
        while (v6 < *((unsigned int *)this + 2));
        CFMutableArrayRef v13 = v18;
      }
      else
      {
        CFMutableArrayRef v13 = Mutable;
      }
      if (*((unsigned char *)a2 + 9) && v13)
      {
        if (*a2) {
          CFDictionarySetValue(*a2, @"channel descriptions", v13);
        }
      }
    }
    CACFArray::~CACFArray((CACFArray *)&v18);
  }
}

void sub_1BAF4E6AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t *HALS_Device::ClientDSPInfo::find(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v2 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (!*(unsigned char *)a1) {
      return 0;
    }
    unsigned int v2 = 0;
  }
  CFTypeRef v3 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(a1 + 8), v2);
  if (v3) {
    return v3 + 3;
  }
  else {
    return 0;
  }
}

uint64_t HALS_Device::_CopyControlByDescription(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::_CopyControlByIndex(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::_GetNumberControls(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::CopyControlByDescription(HALS_Device *this, int a2, int a3, int a4)
{
  uint64_t v11 = 0;
  CFNumberRef v12 = &v11;
  uint64_t v13 = 0x2000000000;
  uint64_t v14 = 0;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZNK11HALS_Device24CopyControlByDescriptionEjjj_block_invoke;
  void v7[3] = &unk_1E6235C38;
  v7[4] = &v11;
  void v7[5] = this;
  int v8 = a2;
  int v9 = a3;
  int v10 = a4;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v7);
  uint64_t v5 = v12[3];
  _Block_object_dispose(&v11, 8);
  return v5;
}

void sub_1BAF4E830(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device24CopyControlByDescriptionEjjj_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, void))(**(void **)(a1 + 40) + 672))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF4E8AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::CopyControlByIndex(HALS_Device *this, int a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZNK11HALS_Device18CopyControlByIndexEj_block_invoke;
  uint64_t v5[3] = &unk_1E6235C10;
  v5[4] = &v7;
  v5[5] = this;
  int v6 = a2;
  unsigned int v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = v8[3];
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAF4E998(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device18CopyControlByIndexEj_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 664))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF4EA10(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetNumberControls(HALS_Device *this)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_Device17GetNumberControlsEv_block_invoke;
  void v4[3] = &unk_1E6235BE8;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF4EAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device17GetNumberControlsEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 656))(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF4EB6C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Device::CopyControls(HALS_Device *this, HALS_Device::BasicControlList *a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK11HALS_Device12CopyControlsERNS_16BasicControlListE_block_invoke;
  v3[3] = &__block_descriptor_tmp_74_18273;
  v3[4] = this;
  void v3[5] = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v3);
}

uint64_t ___ZNK11HALS_Device12CopyControlsERNS_16BasicControlListE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 648))(*(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1BAF4EC64(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL HALS_Device::_ClientCanUseStream(uint64_t a1, HALS_Stream *this, uint64_t a3)
{
  if (!this) {
    return 0;
  }
  if (!*((unsigned char *)this + 52) || !HALS_Stream::IsReferenceStream(this)) {
    return 1;
  }
  if (*((_DWORD *)this + 14) > 1u) {
    return 0;
  }
  BOOL result = 1;
  if (a3 && !*(unsigned char *)(a1 + 520))
  {
    int v7 = *(_DWORD *)(a3 + 16);
    int v8 = *(std::__shared_mutex_base **)(a1 + 440);
    return HALS_ReferenceStreamStateManager::GetReferenceStreamStateForClient(v8, v7);
  }
  return result;
}

uint64_t HALS_Device::_GetTotalNumberChannelsForClient(HALS_Device *this, uint64_t a2, HALS_Client *a3)
{
  int v6 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a3);
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v7 = 8;
  if (a2) {
    uint64_t v7 = 3;
  }
  uint64_t v8 = v6[v7];
  if (v8)
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    v19[2] = ___ZNK14HALS_DSPStream24GetCurrentPhysicalFormatER27AudioStreamBasicDescription_block_invoke;
    void v19[3] = &__block_descriptor_tmp_19_15769;
    uint8_t v19[4] = v8;
    v19[5] = &v17;
    uint64_t v9 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
    HALB_CommandGate::ExecuteCommand(v9, (uint64_t)v19);
    return v18;
  }
  else
  {
LABEL_6:
    int v11 = (*(uint64_t (**)(HALS_Device *, uint64_t))(*(void *)this + 384))(this, a2);
    if (v11)
    {
      int v12 = v11;
      uint64_t v13 = 0;
      uint64_t v10 = 0;
      do
      {
        uint64_t v14 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(void *)this + 392))(this, a2, v13);
        if ((*(unsigned int (**)(HALS_Device *, HALS_Stream *, HALS_Client *))(*(void *)this + 608))(this, v14, a3))
        {
          uint64_t v10 = HALS_Stream::GetNumberChannels(v14) + v10;
        }
        HALS_ObjectMap::ReleaseObject(v14, v15);
        uint64_t v13 = (v13 + 1);
      }
      while (v12 != v13);
    }
    else
    {
      return 0;
    }
  }
  return v10;
}

void sub_1BAF4EF00(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

HALS_ObjectMap *HALS_Device::_CopyStreamByIndexForClient(HALS_Device *this, uint64_t a2, int a3, HALS_Client *a4)
{
  uint64_t v8 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a4);
  if (v8)
  {
    uint64_t v10 = 8;
    if (a2) {
      uint64_t v10 = 3;
    }
    int v11 = (HALS_ObjectMap *)v8[v10];
    if (v11)
    {
      if (!a3)
      {
        HALS_ObjectMap::RetainObject((HALS_ObjectMap *)v8[v10], v9);
        return v11;
      }
      return 0;
    }
  }
  unsigned int v12 = (*(uint64_t (**)(HALS_Device *, uint64_t))(*(void *)this + 384))(this, a2);
  if (!v12) {
    return 0;
  }
  unsigned int v13 = v12;
  int v14 = 0;
  unsigned int v15 = 1;
  do
  {
    CFNumberRef v16 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *, uint64_t, void))(*(void *)this + 392))(this, a2, v15 - 1);
    if ((*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, HALS_Client *))(*(void *)this + 608))(this, v16, a4))
    {
      if (v14 == a3)
      {
        HALS_ObjectMap::RetainObject(v16, v17);
        int v14 = a3;
        int v11 = v16;
      }
      else
      {
        int v11 = 0;
        ++v14;
      }
    }
    else
    {
      int v11 = 0;
    }
    HALS_ObjectMap::ReleaseObject(v16, v17);
    if (v11) {
      break;
    }
  }
  while (v15++ < v13);
  return v11;
}

void sub_1BAF4F0BC(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetNumberReferenceStreams(HALS_Device *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 384))(this);
  if (!v4) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(void *)this + 392))(this, a2, v7);
    uint64_t v10 = v8;
    if (v8) {
      uint64_t v6 = (v6 + HALS_Stream::IsReferenceStream(v8));
    }
    HALS_ObjectMap::ReleaseObject(v10, v9);
    uint64_t v7 = (v7 + 1);
  }
  while (v5 != v7);
  return v6;
}

void sub_1BAF4F1B0(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetNumberStreamsExcludingReferenceStreams(HALS_Device *this, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 384))(this);
  if (!v4) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(void *)this + 392))(this, a2, v7);
    uint64_t v10 = v8;
    if (v8) {
      uint64_t v6 = v6 + !HALS_Stream::IsReferenceStream(v8);
    }
    HALS_ObjectMap::ReleaseObject(v10, v9);
    uint64_t v7 = (v7 + 1);
  }
  while (v5 != v7);
  return v6;
}

void sub_1BAF4F2AC(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::_GetNumberStreamsForClient(HALS_Device *this, uint64_t a2, HALS_Client *a3)
{
  int v6 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 384))(this);
  uint64_t v7 = HALS_Device::ClientDSPInfo::find((uint64_t)this + 616, (uint64_t)a3);
  if (!v7) {
    goto LABEL_6;
  }
  uint64_t v8 = 8;
  if (a2) {
    uint64_t v8 = 3;
  }
  if (v7[v8]) {
    return 1;
  }
LABEL_6:
  uint64_t v9 = 0;
  if (v6)
  {
    uint64_t v10 = 0;
    do
    {
      unsigned int v12 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t))(*(void *)this + 392))(this, a2, v10);
      if (v12) {
        uint64_t v9 = v9
      }
           + (*(unsigned int (**)(HALS_Device *, HALS_ObjectMap *, HALS_Client *))(*(void *)this + 608))(this, v12, a3);
      HALS_ObjectMap::ReleaseObject(v12, v11);
      uint64_t v10 = (v10 + 1);
    }
    while (v6 != v10);
  }
  return v9;
}

void sub_1BAF4F408(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

HALS_Stream *HALS_Device::_CopyStreamByChannel(HALS_Device *this, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 384))(this);
  if (!v6) {
    return 0;
  }
  unsigned int v7 = v6;
  unsigned int v8 = 0;
  unsigned int v9 = 1;
  do
  {
    uint64_t v10 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, uint64_t, void))(*(void *)this + 392))(this, a2, v9 - 1);
    unsigned int v12 = HALS_Stream::GetNumberChannels(v10) + v8;
    if (v12 < a3)
    {
      HALS_ObjectMap::ReleaseObject(v10, v11);
      uint64_t v10 = 0;
      unsigned int v8 = v12;
    }
    if (v10) {
      BOOL v13 = 1;
    }
    else {
      BOOL v13 = v9 >= v7;
    }
    ++v9;
  }
  while (!v13);
  return v10;
}

uint64_t HALS_Device::GetNumberStreamsForClient(HALS_Device *this, char a2, HALS_Client *a3)
{
  uint64_t v8 = 0;
  unsigned int v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device25GetNumberStreamsForClientEbP11HALS_Client_block_invoke;
  v6[3] = &unk_1E6235A18;
  void v6[4] = &v8;
  void v6[5] = this;
  char v7 = a2;
  v6[6] = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1BAF4F5F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device25GetNumberStreamsForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 568))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF4F674(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::_CopyDefaultElementName(HALS_Device *this)
{
  return 0;
}

uint64_t HALS_Device::_ReadHogModeOwnerStore(HALS_Device *this)
{
  return *((unsigned int *)this + 38);
}

BOOL HALS_Device::IsRunningSomewhereElse(HALS_Device *this, HALS_Client *a2)
{
  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    HALS_System::GetInstance(&v43, 0, &v31);
    uint64_t v4 = *(void *)(v43 + 1392);
    int v5 = (os_unfair_lock_s *)(v4 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
    unsigned int v6 = (void *)(v4 + 40);
    mcp_io_object_t object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v4 + 40), *((_DWORD *)this + 4));
    if (!((unint64_t)mcp_object >> 32))
    {
      int v8 = 0;
      goto LABEL_19;
    }
    AMCP::IO_Core::Graph_Manager::find_timebases_from_object_id((AMCP::IO_Core::Graph_Manager *)&v49, *(void **)(v4 + 136), mcp_object);
    AMCP::IO_Core::Graph_Manager::find_contexts_using_timebase(&v37, *(void ***)(v4 + 136), (uint64_t)&v49);
    unsigned int v12 = v37;
    BOOL v13 = (unsigned int *)v38;
    if (v37 == (unsigned int *)v38)
    {
      int v8 = 0;
      if (!v37) {
        goto LABEL_18;
      }
    }
    else
    {
      int v8 = 0;
      int v14 = v37;
      do
      {
        unsigned int v15 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v6, *v14);
        if (v15)
        {
          uint64_t v16 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)*((unsigned int *)v15 + 5));
          unsigned int v18 = (HALS_ObjectMap *)v16;
          if (v16
            && (*(unsigned int (**)(uint64_t))(*(void *)v16 + 224))(v16)
            && (!a2 || **((_DWORD **)v18 + 8) != *((_DWORD *)a2 + 4)))
          {
            ++v8;
          }
          HALS_ObjectMap::ReleaseObject(v18, v17);
        }
        ++v14;
      }
      while (v14 != v13);
      if (!v12) {
        goto LABEL_18;
      }
    }
    operator delete(v12);
LABEL_18:
    uint64_t v37 = (unsigned int *)&v49;
    std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
LABEL_19:
    os_unfair_lock_unlock(v5);
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v44);
    }
    return v8 != 0;
  }
  v27[0] = 0;
  v27[1] = 0;
  HALS_System::GetInstance(&v28, 0, v27);
  unsigned int v9 = *((_DWORD *)this + 4);
  uint64_t v37 = 0;
  int v38 = &v37;
  uint64_t v39 = 0x4002000000;
  uint64_t v40 = __Block_byref_object_copy__47;
  int v41 = __Block_byref_object_dispose__48;
  memset(v42, 0, sizeof(v42));
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 0x40000000;
  __int16 v33 = ___ZNK11HALS_System46CountRunningIOContextsForDeviceExcludingClientEjP11HALS_Client_block_invoke;
  uint64_t v34 = &unk_1E6233060;
  char v35 = &v37;
  uint64_t v36 = v28;
  uint64_t v10 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v28 + 56))(v28);
  HALB_CommandGate::ExecuteCommand(v10, (uint64_t)&v31);
  if (a2) {
    int v11 = *((_DWORD *)a2 + 4);
  }
  else {
    int v11 = -1;
  }
  __int16 v19 = v38[5];
  CFNumberRef v20 = v38[6];
  if (v19 == v20)
  {
    int v26 = 0;
  }
  else
  {
    int v26 = 0;
    do
    {
      uint64_t v21 = *(void *)v19;
      if (*(void *)v19)
      {
        CFMutableArrayRef v49 = 0;
        CFMutableDictionaryRef v50 = &v49;
        uint64_t v51 = 0x5002000000;
        __int16 v52 = __Block_byref_object_copy__54;
        double v53 = __Block_byref_object_dispose__55;
        memset(v54, 0, sizeof(v54));
        int v55 = 1065353216;
        uint64_t v43 = MEMORY[0x1E4F143A8];
        uint64_t v44 = 0x40000000;
        uint64_t v45 = ___ZNK14HALS_IOContext12GetDeviceSetEv_block_invoke;
        uint64_t v46 = &unk_1E6234200;
        unint64_t v47 = &v49;
        uint64_t v48 = v21;
        uint64_t v22 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v21 + 56))(v21);
        HALB_CommandGate::ExecuteCommand(v22, (uint64_t)&v43);
        std::unordered_set<unsigned int>::unordered_set((uint64_t)v30, (uint64_t)(v50 + 5));
        _Block_object_dispose(&v49, 8);
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v54);
        uint64_t v23 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>(v30, v9);
        if (**(_DWORD **)(*(void *)v19 + 64) != v11
          && (*(unsigned int (**)(void))(**(void **)v19 + 224))(*(void *)v19))
        {
          int v24 = v26;
          if (v23) {
            int v24 = v26 + 1;
          }
          int v26 = v24;
        }
        std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table((uint64_t)v30);
      }
      v19 += 2;
    }
    while (v19 != v20);
  }
  _Block_object_dispose(&v37, 8);
  CFMutableArrayRef v49 = (void **)v42;
  std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v49);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  int v8 = v26;
  return v8 != 0;
}

void sub_1BAF4FAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void **a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  a26 = (void **)(v36 - 184);
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100](&a26);
  os_unfair_lock_unlock(v35);
  if (a35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a35);
  }
  _Unwind_Resume(a1);
}

BOOL HALS_Device::CanBeSeenByProcess(HALS_Device *this, HALS_Client *a2)
{
  if (!a2
    || *((_DWORD *)a2 + 58) == -1
    || !(*(unsigned int (**)(HALS_Device *))(*(void *)this + 472))(this))
  {
    return 1;
  }
  CFStringRef v4 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 480))(this);

  return HALS_ClientEntitlements::HasEntitlementWithBooleanValue((HALS_Client *)((char *)a2 + 288), v4);
}

void HALS_Device::ClearDeviceArrivalTime(const __CFString **this)
{
  v5[0] = 0;
  v5[1] = 0;
  HALS_System::GetInstance(&v6, 0, v5);
  CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(v6 + 1408), this[14]);
  int v8 = &unk_1F14898A0;
  CFDictionaryRef v9 = Setting;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
  }
  if (v9)
  {
    OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v6, v9);
    OS::CF::MutableDictionary::RemoveKey(v7, @"global.arrival");
    v3[0] = 0;
    v3[1] = 0;
    HALS_System::GetInstance(&v4, 0, v3);
    HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v4 + 1408), this[14], v7);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v8);
}

void sub_1BAF4FD34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, std::__shared_weak_count *a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  if (a5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a5);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)(v7 - 32));
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetDSPScope(HALS_Device *this)
{
  return *((unsigned int *)this + 118);
}

uint64_t HALS_Device::HasValidDSP(HALS_Device *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_Device11HasValidDSPEv_block_invoke;
  void v4[3] = &unk_1E6235B80;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF4FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

HALS_DSPSettings *___ZNK11HALS_Device11HasValidDSPEv_block_invoke(uint64_t a1, const __CFDictionary *a2)
{
  uint64_t result = *(HALS_DSPSettings **)(*(void *)(a1 + 40) + 456);
  if (result) {
    uint64_t result = (HALS_DSPSettings *)HALS_DSPSettings::HasValidDSPString(result, a2);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (_BYTE)result;
  return result;
}

BOOL HALS_Device::ReapplyDSP(HALS_Device *this)
{
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2000000000;
  char v10 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN11HALS_Device10ReapplyDSPEv_block_invoke;
  v6[3] = &unk_1E6235B58;
  void v6[4] = &v7;
  void v6[5] = this;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v6);
  if (*((unsigned char *)v8 + 24))
  {
    BOOL v3 = 1;
  }
  else
  {
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 0x40000000;
    void v11[2] = ___ZN11HALS_Device19ClearDSPDescriptionEv_block_invoke;
    uint64_t v11[3] = &__block_descriptor_tmp_73_18318;
    void v11[4] = this;
    uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v11);
    BOOL v3 = *((unsigned char *)v8 + 24) != 0;
  }
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAF4FFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Device10ReapplyDSPEv_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_Device::_SetDSPSettingsFromDescription(*(HALS_Device **)(a1 + 40), (const __CFDictionary **)(*(void *)(a1 + 40) + 456), *(_DWORD *)(*(void *)(a1 + 40) + 472));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t ___ZN11HALS_Device19ClearDSPDescriptionEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t result = CACFDictionary::operator=(v1 + 456, 0);
  *(_DWORD *)(v1 + 472) = 0;
  return result;
}

uint64_t HALS_Device::_SetDSPSettingsFromDescription(HALS_Device *this, const __CFDictionary **a2, AudioObjectPropertyScope a3)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = v29;
  if (HALS_DSPSettings::HasValidDSPString(*a2, (const __CFDictionary *)a2))
  {
    HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)v19, *a2);
    unsigned int v7 = v27;
    if (v7 >= (*(unsigned int (**)(HALS_Device *, void))(*(void *)this + 384))(this, 0))
    {
      uint64_t v10 = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        buf[0].mSelector = 136315394;
        *(void *)&buf[0].mScope = "HALS_Device.cpp";
        LOWORD(buf[1].mSelector) = 1024;
        *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1075;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Target stream for DSP is not available or out of range.", (uint8_t *)buf, 0x12u);
        uint64_t v10 = 0;
      }
    }
    else
    {
      char v8 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, void, void))(*(void *)this + 392))(this, 0, v27);
      uint64_t v10 = HALS_Device::SetStreamDSP(this, (HALS_Stream *)v8, (const HALS_DSPSettings *)v19);
      if (v10)
      {
        memset(buf, 0, sizeof(buf));
        uint64_t v42 = &unk_1F14898A0;
        uint64_t v43 = 0;
        uint64_t v44 = &unk_1F14898A0;
        long long v45 = 0u;
        memset(v47, 0, sizeof(v47));
        CFMutableArrayRef v49 = &unk_1F14898A0;
        uint64_t v50 = 0;
        CFDictionaryRef v11 = (const __CFDictionary *)*((void *)this + 57);
        if (v11)
        {
          HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)v29, v11);
          if (SHIBYTE(buf[1].mElement) < 0) {
            operator delete(*(void **)&buf[0].mSelector);
          }
          *(_OWORD *)&buf[0].mSelector = *(_OWORD *)v29;
          uint64_t v12 = v30;
          HIBYTE(v30) = 0;
          LOBYTE(v29[0]) = 0;
          uint64_t v13 = v43;
          *(void *)&buf[1].mScope = v12;
          uint64_t v43 = v32;
          uint64_t v32 = v13;
          long long v14 = v45;
          long long v45 = v34;
          long long v34 = v14;
          int v46 = v35;
          if (*(void *)v47)
          {
            *(void *)&v47[8] = *(void *)v47;
            operator delete(*(void **)v47);
          }
          *(_OWORD *)unint64_t v47 = __p;
          *(void *)&v47[16] = v37;
          uint64_t v37 = 0;
          long long __p = 0uLL;
          int v48 = v38;
          uint64_t v15 = v50;
          uint64_t v50 = v40;
          uint64_t v40 = v15;
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v39);
          if ((void)__p)
          {
            *((void *)&__p + 1) = __p;
            operator delete((void *)__p);
          }
          if (*((void *)&v34 + 1)) {
            CFRelease(*((CFTypeRef *)&v34 + 1));
          }
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v33);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v31);
          if (SHIBYTE(v30) < 0) {
            operator delete(v29[0]);
          }
          LODWORD(v6) = v46;
        }
        int v16 = v24;
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v49);
        if (*(void *)v47)
        {
          *(void *)&v47[8] = *(void *)v47;
          operator delete(*(void **)v47);
        }
        if (*((void *)&v45 + 1)) {
          CFRelease(*((CFTypeRef *)&v45 + 1));
        }
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v44);
        OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v42);
        if (SHIBYTE(buf[1].mElement) < 0) {
          operator delete(*(void **)&buf[0].mSelector);
        }
        if (v16 != v6)
        {
          char v17 = (HALS_NotificationManager *)v8[4];
          buf[0].mSelector = 1936092532;
          buf[0].mScope = a3;
          buf[0].mElement = 0;
          HALS_Object::PropertiesChanged(this, v17, 0, 1u, buf);
        }
      }
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v8, v9);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
    if (v25)
    {
      int v26 = v25;
      operator delete(v25);
    }
    if (v23) {
      CFRelease(v23);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v22);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v21);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  else
  {
    uint64_t v10 = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      buf[0].mSelector = 136315394;
      *(void *)&buf[0].mScope = "HALS_Device.cpp";
      LOWORD(buf[1].mSelector) = 1024;
      *(AudioObjectPropertySelector *)((char *)&buf[1].mSelector + 2) = 1080;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Given HAL DSP dictionary is missing the DSP description string for kAudioDSPDescriptionKey_DSPGraph key.", (uint8_t *)buf, 0x12u);
      return 0;
    }
  }
  return v10;
}

void sub_1BAF504B8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_1BAF50510(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAF50518);
  }
  JUMPOUT(0x1BAF504FCLL);
}

void sub_1BAF50524(uint64_t a1, int a2)
{
  if (a2) {
    JUMPOUT(0x1BAF5052CLL);
  }
  JUMPOUT(0x1BAF504FCLL);
}

void sub_1BAF5053C()
{
}

uint64_t HALS_Device::SetStreamDSP(HALS_Device *this, HALS_Stream *a2, const HALS_DSPSettings *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  int v27 = 0;
  uint64_t v17 = MEMORY[0x1E4F143A8];
  uint64_t v18 = 0x40000000;
  __int16 v19 = ___ZNK11HALS_Device17GetIndexForStreamEP11HALS_Stream_block_invoke;
  char v20 = &unk_1E6235A90;
  uint64_t v21 = &v24;
  uint64_t v22 = this;
  CFTypeRef v23 = a2;
  uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)&v17);
  uint64_t v7 = *((unsigned int *)v25 + 6);
  _Block_object_dispose(&v24, 8);
  int v8 = *((unsigned __int8 *)a2 + 52);
  if (AMCP::Feature_Flags::run_hybrid_hal(v9, v10))
  {
    v16[0] = 0;
    v16[1] = 0;
    HALS_System::GetInstance(&v17, 0, v16);
    CFDictionaryRef v11 = (os_unfair_lock_s *)(*(void *)(v17 + 1392) + 16);
    os_unfair_lock_lock(v11);
    os_unfair_lock_unlock(v11);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v18);
    }
    return 0;
  }
  uint64_t v13 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 400))(this);
  uint64_t v15 = (HALS_ObjectMap *)v13;
  if (v13) {
    LOBYTE(a3) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, const HALS_DSPSettings *))(*(void *)v13 + 480))(v13, v8 != 0, v7, a3);
  }
  HALS_ObjectMap::ReleaseObject(v15, v14);
  return (v15 != 0) & a3;
}

void sub_1BAF50708(void *a1)
{
}

void sub_1BAF50718(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device17GetIndexForStreamEP11HALS_Stream_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  if (v3)
  {
    BOOL v4 = *(unsigned char *)(v3 + 52) != 0;
    if (*(_DWORD *)(v3 + 56) == 2)
    {
      int v5 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  unsigned int v6 = (*(uint64_t (**)(void, BOOL))(*(void *)v2 + 384))(a1[5], v4);
  if (v6)
  {
    uint64_t v7 = 0;
    do
    {
      int v8 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(void *)v2 + 392))(v2, v4, v7);
      HALS_ObjectMap::ReleaseObject(v8, v9);
      if (v8 == (HALS_ObjectMap *)v3) {
        int v5 = v7;
      }
      else {
        int v5 = -1;
      }
      uint64_t v7 = (v7 + 1);
    }
    while (v5 == -1 && v7 < v6);
  }
  else
  {
    int v5 = -1;
  }
LABEL_17:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v5;
}

void sub_1BAF50858(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

float HALS_Device::GetCombinedVolumeScalarForClient(HALS_Device *this, int a2, char a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = (float *)&v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 1065353216;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device32GetCombinedVolumeScalarForClientEjb_block_invoke;
  v6[3] = &unk_1E6235CB0;
  void v6[4] = &v9;
  void v6[5] = this;
  int v7 = a2;
  char v8 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  float v4 = v10[6];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAF50968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device32GetCombinedVolumeScalarForClientEjb_block_invoke(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(float (**)(void, void, void))(**(void **)(a1 + 40) + 800))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

uint64_t HALS_Device::DoAnyQueuesHaveWorkAfterFlush(HALS_Device *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 697);
  if (v1) {
    return 1;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)this + 1017);
  return v2 & 1;
}

void HALS_Device::FlushAllQueues(HALS_Device *this)
{
  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_Device *)((char *)this + 664));

  AMCP::Utility::Dispatch_Queue::flush_all_work((HALS_Device *)((char *)this + 984));
}

void HALS_Device::HandleOwnedObjectPropertiesChanged(HALS_Device *this, const HALS_Object *a2, unsigned int a3, int a4, const AudioObjectPropertyAddress *a5, int a6)
{
  unsigned int v44 = a3;
  int v45 = a6;
  LODWORD(v7) = a4;
  memset(v52, 0, sizeof(v52));
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  int v10 = *((_DWORD *)a2 + 5);
  BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v10, 1633907820);
  uint64_t v13 = (HALB_Info *)*((unsigned int *)a2 + 6);
  unint64_t v47 = this;
  if (v10 == v13 || IsSubClass)
  {
    int v14 = v10 != v13 || IsSubClass;
    if (v14 != 1) {
      goto LABEL_187;
    }
  }
  else if (!HALB_Info::IsSubClass(v13, 1633907820))
  {
    goto LABEL_187;
  }
  AudioObjectPropertyElement v15 = *((_DWORD *)a2 + 13);
  unsigned int v43 = v7;
  if (v7)
  {
    AudioObjectPropertyScope v16 = *((_DWORD *)a2 + 12);
    qmemcpy(v42, "srhturtpurhturtpbnsldpatmlovnscl", sizeof(v42));
    AudioObjectPropertySelector v46 = 1835295859;
    uint64_t v17 = a5;
    for (uint64_t i = v43; i; --i)
    {
      int mSelector = v17->mSelector;
      ++v17;
      int v19 = mSelector;
      if (mSelector <= 1818456931)
      {
        if (v19 <= 1668049770)
        {
          if (v19 != 1650685548)
          {
            if (v19 == 1651272546)
            {
              if (v10 == 1936028002)
              {
                v48.int mSelector = 1936811108;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
            }
            else if (v19 == 1651272548 && v10 == 1936028002)
            {
              v48.int mSelector = 1936811109;
              v48.mScope = v16;
              v48.mElement = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            }
            continue;
          }
          if (v10 <= 1819504225)
          {
            if (v10 <= 1702259058)
            {
              switch(v10)
              {
                case 1650602615:
                  v48.int mSelector = 1650602615;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1668049264:
                  v48.int mSelector = 1668049264;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1684895092:
                  v48.int mSelector = 1684895092;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
              }
            }
            else if (v10 > 1784767338)
            {
              if (v10 == 1784767339)
              {
                v48.int mSelector = 1784767339;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              else if (v10 == 1815241314)
              {
                v48.int mSelector = 1815241314;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
            }
            else if (v10 == 1702259059)
            {
              v48.int mSelector = HIDWORD(v42[2]);
              v48.mScope = v16;
              v48.mElement = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            }
            else if (v10 == 1718432370)
            {
              v48.int mSelector = 1718432370;
              v48.mScope = v16;
              v48.mElement = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            }
            continue;
          }
          if (v10 > 1936682094)
          {
            if (v10 > 1952541793)
            {
              if (v10 == 1952541794)
              {
                v48.int mSelector = 1952541794;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              else if (v10 == 1999790690)
              {
                v48.int mSelector = 1999790690;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              continue;
            }
            if (v10 != 1936682095)
            {
              if (v10 == 1937072749)
              {
                v48.int mSelector = 1936553332;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              continue;
            }
            if (v16 == 1886679669)
            {
              *(void *)&v48.int mSelector = v42[0];
            }
            else
            {
              v48.int mSelector = 1936682095;
              v48.mScope = v16;
            }
            goto LABEL_160;
          }
          if (v10 > 1885888877)
          {
            if (v10 == 1885888878)
            {
              v48.int mSelector = 1885888878;
              v48.mScope = v16;
              v48.mElement = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            }
            else if (v10 == 1885893481)
            {
              v48.int mSelector = 1885893481;
              v48.mScope = v16;
              v48.mElement = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            }
            continue;
          }
          if (v10 == 1819504226)
          {
            v48.int mSelector = v42[2];
            v48.mScope = v16;
            v48.mElement = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
          }
          else if (v10 == 1836414053)
          {
            if (v16 == 1886679669)
            {
              *(void *)&v48.int mSelector = v42[1];
            }
            else
            {
              v48.int mSelector = 1836414053;
              v48.mScope = v16;
            }
            goto LABEL_160;
          }
        }
        else if (v19 > 1818453106)
        {
          if (v19 == 1818453107)
          {
            switch(v10)
            {
              case 1936028007:
                v48.int mSelector = 1936811878;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                break;
              case 1937072758:
                v48.int mSelector = 1935946358;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                break;
              case 1986817381:
                if (v16 == 1886679669)
                {
                  *(void *)&v48.int mSelector = 0x707472756D763273;
                }
                else
                {
                  v48.int mSelector = 1684157046;
                  v48.mScope = v16;
                }
                goto LABEL_160;
            }
          }
          else if (v19 == 1818453110)
          {
            switch(v10)
            {
              case 1936028007:
                v48.int mSelector = 1936811876;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                break;
              case 1937072758:
                v48.int mSelector = 1937140836;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                break;
              case 1986817381:
                if (v16 == 1886679669)
                {
                  *(void *)&v48.int mSelector = 0x707472756D766462;
                }
                else
                {
                  v48.int mSelector = 1987013732;
                  v48.mScope = v16;
                }
                goto LABEL_160;
            }
          }
        }
        else
        {
          if (v19 == 1668049771)
          {
            if (v10 == 1668047723)
            {
              v48.int mSelector = 1668506475;
              v48.mScope = v16;
              v48.mElement = v15;
              CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            }
            continue;
          }
          if (v19 == 1818453106)
          {
            switch(v10)
            {
              case 1936028007:
                v48.int mSelector = 1936811890;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                break;
              case 1937072758:
                v48.int mSelector = 1937138723;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                break;
              case 1986817381:
                if (v16 == 1886679669)
                {
                  *(void *)&v48.int mSelector = 0x707472756D766423;
                }
                else
                {
                  v48.int mSelector = 1986290211;
                  v48.mScope = v16;
                }
                goto LABEL_160;
            }
          }
        }
      }
      else if (v19 > 1935893352)
      {
        if (v19 <= 1936745314)
        {
          if (v19 == 1935893353)
          {
            if (v10 <= 1685287522)
            {
              if (v10 == 1668047723)
              {
                v48.int mSelector = 1668510307;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              else if (v10 == 1684370292)
              {
                v48.int mSelector = v46;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
            }
            else
            {
              switch(v10)
              {
                case 1852601964:
                  v48.int mSelector = 1852601964;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1751740518:
                  v48.int mSelector = 1751740518;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1685287523:
                  v48.int mSelector = 1936945763;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
              }
            }
          }
          else if (v19 == 1935894894)
          {
            if (v10 <= 1685287522)
            {
              if (v10 == 1668047723)
              {
                v48.int mSelector = HIDWORD(v42[3]);
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              else if (v10 == 1684370292)
              {
                v48.int mSelector = 1835295843;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
            }
            else
            {
              switch(v10)
              {
                case 1852601964:
                  v48.int mSelector = 1818455660;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1751740518:
                  v48.int mSelector = 1751740524;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1685287523:
                  v48.int mSelector = 1819501422;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
              }
            }
          }
          continue;
        }
        if (v19 != 1936745315)
        {
          if (v19 != 1936745334 || v10 != 1936744814) {
            continue;
          }
          if (v16 == 1886679669)
          {
            *(void *)&v48.int mSelector = 0x707472756D73706ELL;
          }
          else
          {
            v48.int mSelector = 1936744814;
            v48.mScope = v16;
          }
          goto LABEL_160;
        }
        if (v10 == 1936744814)
        {
          if (v16 == 1886679669)
          {
            *(void *)&v48.int mSelector = 0x707472756D737023;
          }
          else
          {
            v48.int mSelector = 1936748067;
            v48.mScope = v16;
          }
          goto LABEL_160;
        }
      }
      else if (v19 > 1818457189)
      {
        if (v19 != 1818457190)
        {
          if (v19 == 1935892841)
          {
            if (v10 <= 1685287522)
            {
              if (v10 == 1668047723)
              {
                v48.int mSelector = 1668506403;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
              else if (v10 == 1684370292)
              {
                v48.int mSelector = 1835295779;
                v48.mScope = v16;
                v48.mElement = v15;
                CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
              }
            }
            else
            {
              switch(v10)
              {
                case 1852601964:
                  v48.int mSelector = 1852601891;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1751740518:
                  v48.int mSelector = 1751740451;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
                case 1685287523:
                  v48.int mSelector = 1936941859;
                  v48.mScope = v16;
                  v48.mElement = v15;
                  CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
                  break;
              }
            }
          }
          continue;
        }
        if (v10 == 1937072758)
        {
          v48.int mSelector = 1937142886;
          v48.mScope = v16;
          v48.mElement = v15;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
        }
        else if (v10 == 1986817381)
        {
          if (v16 == 1886679669)
          {
            *(void *)&v48.int mSelector = 0x707472756D767466;
          }
          else
          {
            v48.int mSelector = 1986229350;
            v48.mScope = v16;
          }
          goto LABEL_160;
        }
      }
      else if (v19 == 1818456932)
      {
        switch(v10)
        {
          case 1936028007:
            v48.int mSelector = 1936811892;
            v48.mScope = v16;
            v48.mElement = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            break;
          case 1937072758:
            v48.int mSelector = 1937125988;
            v48.mScope = v16;
            v48.mElement = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            break;
          case 1986817381:
            if (v16 == 1886679669)
            {
              *(void *)&v48.int mSelector = 0x707472756D763264;
            }
            else
            {
              v48.int mSelector = 1983013986;
              v48.mScope = v16;
            }
            goto LABEL_160;
        }
      }
      else if (v19 == 1818456950)
      {
        switch(v10)
        {
          case 1936028007:
            v48.int mSelector = 1936811891;
            v48.mScope = v16;
            v48.mElement = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            break;
          case 1937072758:
            v48.int mSelector = 1937140845;
            v48.mScope = v16;
            v48.mElement = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            break;
          case 1986817381:
            if (v16 == 1886679669)
            {
              *(void *)&v48.int mSelector = 0x707472756D767363;
            }
            else
            {
              v48.int mSelector = v42[3];
              v48.mScope = v16;
            }
LABEL_160:
            v48.mElement = v15;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v12);
            break;
        }
      }
    }
  }
  int TransportType = HALS_IODevice::GetTransportType(v47);
  int v10 = *((_DWORD *)a2 + 5);
  LODWORD(v13) = *((_DWORD *)a2 + 6);
  LODWORD(v7) = v43;
  if (TransportType == 1651274862)
  {
    BOOL v22 = v10 == v13;
    BOOL v23 = v10 == 1685287523;
    if (v10 == 1685287523) {
      BOOL v22 = 1;
    }
    if (v10 != v13) {
      BOOL v23 = 1;
    }
    int v24 = v22 ? v23 : v13 == 1685287523;
    if (v24 == 1 && v15 == 0)
    {
      uint64_t v26 = a5;
      if (v43)
      {
        uint64_t v27 = 12 * v43;
        uint64_t v26 = a5;
        while (v26->mSelector != 1935893353)
        {
          ++v26;
          v27 -= 12;
          if (!v27) {
            goto LABEL_187;
          }
        }
      }
      if (v26 != &a5[v43]) {
        HALS_Device::UpdateDeviceArrivalTime(v47);
      }
    }
  }
LABEL_187:
  AudioObjectPropertySelector v46 = 0;
  if (v10 == v13 || v10 == 1634956402)
  {
    if (v10 != 1634956402 && v10 == v13) {
      goto LABEL_212;
    }
  }
  else if (v13 != 1634956402)
  {
    goto LABEL_212;
  }
  uint64_t v28 = *((unsigned int *)a2 + 4);
  *(void *)&v48.int mSelector = 0x676C6F627363686ELL;
  v48.mElement = 0;
  v53[0] = 0;
  (*(void (**)(const HALS_Object *, uint64_t, AudioObjectPropertyAddress *, uint64_t, void *, char *, void, void, void))(*(void *)a2 + 112))(a2, v28, &v48, 4, v53, (char *)v53 + 4, 0, 0, 0);
  AudioObjectPropertyElement v29 = HIDWORD(v53[0]);
  uint64_t v30 = *((unsigned int *)a2 + 4);
  *(void *)&v48.int mSelector = 0x676C6F6273646972;
  v48.mElement = 0;
  v53[0] = 0;
  (*(void (**)(const HALS_Object *, uint64_t, AudioObjectPropertyAddress *, uint64_t, void *, char *, void, void, void))(*(void *)a2 + 112))(a2, v30, &v48, 4, v53, (char *)v53 + 4, 0, 0, 0);
  if (HIDWORD(v53[0])) {
    AudioObjectPropertyScope v32 = 1768845428;
  }
  else {
    AudioObjectPropertyScope v32 = 1869968496;
  }
  if (v7)
  {
    uint64_t v7 = v7;
    do
    {
      signed int v34 = a5->mSelector;
      ++a5;
      signed int v33 = v34;
      if (v34 > 1936092512)
      {
        if (v33 == 1936092513)
        {
          v48.int mSelector = 1936092513;
          v48.mScope = v32;
          v48.mElement = v29;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
          v48.int mSelector = 1936092451;
          v48.mScope = v32;
          v48.mElement = v29;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v37);
          if (v29 == 1)
          {
            v48.int mSelector = 1936092513;
            v48.mScope = v32;
            v48.mElement = 0;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
            v48.int mSelector = 1936092451;
            v48.mScope = v32;
            v48.mElement = 0;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v38);
          }
        }
        else if (v33 == 1936092532)
        {
          v48.int mSelector = 1936092532;
          v48.mScope = v32;
          v48.mElement = v29;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
          if (v29 == 1)
          {
            v48.int mSelector = 1936092532;
            v48.mScope = v32;
            v48.mElement = 0;
            CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
          }
        }
      }
      else if (v33 == 1885762592)
      {
        v48.int mSelector = 1885762592;
        v48.mScope = v32;
        v48.mElement = v29;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
        if (v29 == 1)
        {
          v48.int mSelector = 1885762592;
          v48.mScope = v32;
          v48.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
        }
      }
      else if (v33 == 1885762657)
      {
        v48.int mSelector = 1885762657;
        v48.mScope = v32;
        v48.mElement = v29;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
        v48.int mSelector = 1885762595;
        v48.mScope = v32;
        v48.mElement = v29;
        CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v35);
        if (v29 == 1)
        {
          v48.int mSelector = 1885762657;
          v48.mScope = v32;
          v48.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v31);
          v48.int mSelector = 1885762595;
          v48.mScope = v32;
          v48.mElement = 0;
          CAPropertyAddressList::AppendUniqueItem((CAPropertyAddressList *)v52, &v48, v36);
        }
      }
      --v7;
    }
    while (v7);
  }
LABEL_212:
  uint64_t v39 = *(void **)&v52[0];
  if (*(void *)&v52[0] != *((void *)&v52[0] + 1))
  {
    uint64_t v40 = (HALS_NotificationManager *)*((unsigned int *)v47 + 4);
    unsigned int v41 = -1431655765 * ((*((void *)&v52[0] + 1) - *(void *)&v52[0]) >> 2);
    if (v45) {
      HALS_Object::PropertiesChanged_Sync(v47, v40, v44, v41, *(const AudioObjectPropertyAddress **)&v52[0]);
    }
    else {
      HALS_Object::PropertiesChanged(v47, v40, v44, v41, *(const AudioObjectPropertyAddress **)&v52[0]);
    }
  }
  if (__p) {
    operator delete(__p);
  }
  if (v39) {
    operator delete(v39);
  }
}

void sub_1BAF51E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a27) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Device::UpdateDeviceArrivalTime(HALS_Device *this)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (HALS_IODevice::GetTransportType(this) == 1651274862)
  {
    unsigned __int8 v2 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t, void))(*(void *)this + 640))(this, 1685287523, 1869968496, 0);
    if (v2
      || (unsigned __int8 v2 = (unsigned int *)(*(uint64_t (**)(HALS_Device *, uint64_t, uint64_t, void))(*(void *)this
                                                                                                  + 640))(this, 1685287523, 1768845428, 0), pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize), v2))
    {
      uint64_t v4 = v2[4];
      uint64_t v18 = 0x676C6F6273636369;
      LODWORD(v19) = 0;
      int v16 = 0;
      LODWORD(v14) = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, void **, int *, void, void, void))(*(void *)v2 + 112))(v2, v4, &v18, 4, &v14, &v16, 0, 0, 0);
      int v5 = v16;
    }
    else
    {
      int v5 = 0;
    }
    HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v2, v3);
    if (v5 == 1769173099 || v5 == 1768778083) {
      goto LABEL_8;
    }
  }
  IsHiddeuint64_t n = HALS_Device::IsHidden(this);
  if (IsHidden)
  {
LABEL_8:
    *((void *)this + 52) = 0;
    *((void *)this + 53) = 0;
  }
  else
  {
    *((void *)this + 52) = HALS_System::GetCurrentDeviceArrivalTime((HALS_System *)IsHidden);
    *((void *)this + 53) = v7;
  }
  OS::CF::MutableDictionary::MutableDictionary((OS::CF::MutableDictionary *)&v16);
  v13[0] = 0;
  v13[1] = 0;
  HALS_System::GetInstance(&v18, 0, v13);
  CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(v18 + 1408), *((const __CFString **)this + 14));
  int v14 = &unk_1F14898A0;
  CFDictionaryRef theDict = Setting;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (theDict) {
    OS::CF::MutableDictionary::operator=((uint64_t)&v16, theDict);
  }
  OS::CF::Number::Number<unsigned long long>(&v10, *((void *)this + 52));
  uint64_t v18 = @"seed";
  int v19 = v11;
  OS::CF::Number::Number<unsigned long long>(v9, *((void *)this + 53));
  char v20 = @"time";
  uint64_t v21 = v9[1];
  OS::CF::Dictionary::Dictionary(v12, (uint64_t)&v18, 2uLL);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v9);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v10);
  OS::CF::MutableDictionary::SetValueForKey<OS::CF::Dictionary>((__CFDictionary *)v17, @"global.arrival", (const void *)v12[1]);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  HALS_System::GetInstance(&v18, 0, &v10);
  HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v18 + 1408), *((CFTypeRef *)this + 14), v17);
}

void sub_1BAF5219C(_Unwind_Exception *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  HALS_ObjectMap::ReleaseObject(v20, a2);
  _Unwind_Resume(a1);
}

void sub_1BAF52220()
{
}

void HALS_Device::SetPropertyData(HALS_Device *this, const AudioObjectPropertyAddress *a2, const AudioObjectPropertyAddress *a3, unsigned int a4, _DWORD *a5, int a6, int *a7, HALS_Client *a8)
{
  uint64_t v304 = *MEMORY[0x1E4F143B8];
  if (HALB_Info::PropertyRequiresHogMode((HALB_Info *)a3->mSelector, a2)
    && !HALS_Device::IsHogModeOwnerOrFree(this, a8))
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__CFString buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4182;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: the given process does not own hog mode", buf, 0x12u);
    }
    exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
    *(void *)exceptiouint64_t n = off_1F148A5D8;
    exception[2] = 560492391;
  }
  int v16 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(HALS_Device *, const AudioObjectPropertyAddress *, HALS_Client *))(*(void *)this + 176))(this, a3, a8);
  if ((v16 & 1) == 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__CFString buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4183;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: the given process is just plain not allowed", buf, 0x12u);
    }
    long long v204 = __cxa_allocate_exception(0x10uLL);
    *(void *)long long v204 = off_1F148A5D8;
    v204[2] = 560492391;
  }
  signed int mSelector = a3->mSelector;
  if ((int)a3->mSelector > 1751413615)
  {
    if (mSelector <= 1934647618)
    {
      if (mSelector > 1852793962)
      {
        switch(mSelector)
        {
          case 1852793963:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__CFString buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4465;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessDuckOptOut", buf, 0x12u);
              }
              uint64_t v211 = __cxa_allocate_exception(0x10uLL);
              *(void *)uint64_t v211 = off_1F148A5D8;
              v211[2] = 561211770;
            }
            BOOL v66 = *a5 != 0;
            v263[0] = MEMORY[0x1E4F143A8];
            v263[1] = 0x40000000;
            v263[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_226;
            v263[3] = &__block_descriptor_tmp_227;
            v263[4] = this;
            v263[5] = a8;
            BOOL v264 = v66;
            __int16 v67 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v67, (uint64_t)v263);
            break;
          case 1853059700:
            if (a4 <= 7)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__CFString buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4255;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
              }
              __int16 v59 = __cxa_allocate_exception(0x10uLL);
              *(void *)__int16 v59 = off_1F148A5D8;
              v59[2] = 561211770;
            }
            break;
          case 1869180523:
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__CFString buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = 4205;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyHogMode", buf, 0x12u);
              }
              std::string v206 = __cxa_allocate_exception(0x10uLL);
              *(void *)std::string v206 = off_1F148A5D8;
              v206[2] = 561211770;
            }
            *(void *)__CFString buf = 0;
            *(void *)&uint8_t buf[8] = buf;
            *(void *)&buf[16] = 0x2000000000;
            *(_DWORD *)uint64_t v299 = 0;
            if (a8) {
              pid_t v23 = *((_DWORD *)a8 + 58);
            }
            else {
              pid_t v23 = getpid();
            }
            *(_DWORD *)uint64_t v299 = v23;
            *(void *)CFDictionaryRef theDict = 0;
            *(void *)&theDict[8] = theDict;
            *(void *)&theDict[16] = 0x2000000000;
            LODWORD(v294) = 0;
            *(void *)&v302[0].signed int mSelector = 0;
            *(void *)&v302[0].AudioObjectPropertyElement mElement = v302;
            *(void *)&v302[1].AudioObjectPropertyScope mScope = 0x2000000000;
            LOBYTE(v303) = 0;
            v291[0] = MEMORY[0x1E4F143A8];
            v291[1] = 0x40000000;
            v291[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_213;
            v291[3] = &unk_1E62360F8;
            v291[8] = a8;
            v291[4] = buf;
            v291[5] = v302;
            v291[7] = this;
            v291[6] = theDict;
            unint64_t v93 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v93, (uint64_t)v291);
            if (*(_DWORD *)(*(void *)&theDict[8] + 24))
            {
              int v221 = __cxa_allocate_exception(0x10uLL);
              int v222 = *(_DWORD *)(*(void *)&theDict[8] + 24);
              *(void *)int v221 = off_1F148A5D8;
              v221[2] = v222;
            }
            if (*(unsigned char *)(*(void *)&v302[0].mElement + 24))
            {
              size_t v94 = (AMCP::Feature_Flags *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 400))(this);
              int v96 = v94;
              if (v94) {
                size_t v94 = (AMCP::Feature_Flags *)(*(uint64_t (**)(AMCP::Feature_Flags *, void))(*(void *)v94 + 288))(v94, *(unsigned int *)(*(void *)&buf[8] + 24));
              }
              if (AMCP::Feature_Flags::run_hybrid_hal(v94, v95))
              {
                v290[1] = 0;
                v290[0] = 0;
                HALS_System::GetInstance(&v243, 0, v290);
                HALS_IOContext_Manager::hog_mode_owner_changed(*(os_unfair_lock_s **)(v243 + 1392), this, *(_DWORD *)(*(void *)&buf[8] + 24));
                if (*((void *)&v243 + 1)) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v243 + 1));
                }
              }
              v289[1] = 0;
              v289[0] = 0;
              HALS_System::GetInstance(&v243, 0, v289);
              HALS_System::CheckForDefaultDeviceChanges((HALS_System *)v243);
              if (*((void *)&v243 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v243 + 1));
              }
              uint64_t v97 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
              if (a8) {
                uint64_t v98 = *((unsigned int *)a8 + 4);
              }
              else {
                uint64_t v98 = 0;
              }
              *(void *)&long long v243 = 0x676C6F626F696E6BLL;
              DWORD2(v243) = 0;
              HALS_Object::PropertiesChanged(this, v97, v98, 1u, (const AudioObjectPropertyAddress *)&v243);
              HALS_ObjectMap::ReleaseObject(v96, v130);
            }
            *a5 = *(_DWORD *)(*(void *)&buf[8] + 24);
            _Block_object_dispose(v302, 8);
LABEL_233:
            _Block_object_dispose(theDict, 8);
LABEL_240:
            uint64_t v132 = buf;
LABEL_241:
            _Block_object_dispose(v132, 8);
            return;
          default:
            goto LABEL_429;
        }
        return;
      }
      if (mSelector != 1751413616)
      {
        if (mSelector != 1818454126) {
          goto LABEL_429;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__CFString buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4192;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioObjectPropertyElementName", buf, 0x12u);
          }
          uint64_t v209 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v209 = off_1F148A5D8;
          v209[2] = 561211770;
        }
        v292[0] = MEMORY[0x1E4F143A8];
        v292[1] = 0x40000000;
        v292[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke;
        v292[3] = &__block_descriptor_tmp_212;
        v292[4] = this;
        v292[5] = a3;
        v292[6] = a5;
        int v38 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v38, (uint64_t)v292);
        uint64_t v39 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8) {
          uint64_t v40 = *((unsigned int *)a8 + 4);
        }
        else {
          uint64_t v40 = 0;
        }
        *(_DWORD *)__CFString buf = 1818454126;
        *(void *)&uint8_t buf[4] = *(void *)&a3->mScope;
        HALS_Object::PropertiesChanged(this, v39, v40, 1u, (const AudioObjectPropertyAddress *)buf);
        return;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__CFString buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4492;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyDSPDescription", buf, 0x12u);
        }
        int v213 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v213 = off_1F148A5D8;
        v213[2] = 561211770;
      }
      if (!a5)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__CFString buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4493;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: null CFStringRef specificed for kAudioDevicePropertyDSPDescription", buf, 0x12u);
        }
        int v219 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v219 = off_1F148A5D8;
        v219[2] = 2003329396;
      }
      *(void *)CFDictionaryRef theDict = 0;
      *(void *)&theDict[8] = theDict;
      *(void *)&theDict[16] = 0x2000000000;
      LOBYTE(v294) = 0;
      *(void *)__CFString buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x3002000000;
      *(void *)uint64_t v299 = __Block_byref_object_copy__230;
      *(void *)&v299[8] = __Block_byref_object_dispose__231;
      *(void *)&v299[16] = 0;
      v260[0] = MEMORY[0x1E4F143A8];
      v260[1] = 0x40000000;
      v260[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_232;
      v260[3] = &unk_1E6236250;
      v260[5] = this;
      v260[4] = buf;
      uint64_t v75 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v75, (uint64_t)v260);
      uint64_t v77 = *(AMCP::Feature_Flags **)(*(void *)&buf[8] + 40);
      if (v77)
      {
        memset(v302, 0, sizeof(v302));
        (*(void (**)(AMCP::Feature_Flags *, AudioObjectPropertyAddress *))(*(void *)v77 + 216))(v77, v302);
        v259[0] = MEMORY[0x1E4F143A8];
        v259[1] = 0x40000000;
        v259[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2_234;
        v259[3] = &unk_1E6236278;
        v259[5] = this;
        v259[4] = theDict;
        v259[6] = a5;
        v259[7] = a3;
        __int16 v78 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v78, (uint64_t)v259);
        (*(void (**)(void, AudioObjectPropertyAddress *))(**(void **)(*(void *)&buf[8] + 40) + 224))(*(void *)(*(void *)&buf[8] + 40), v302);
        uint64_t v77 = *(AMCP::Feature_Flags **)&v302[0].mSelector;
        if (*(void *)&v302[0].mSelector)
        {
          *(void *)&v302[0].AudioObjectPropertyElement mElement = *(void *)&v302[0].mSelector;
          operator delete(*(void **)&v302[0].mSelector);
        }
      }
      if (AMCP::Feature_Flags::run_hybrid_hal(v77, v76))
      {
        v258[0] = MEMORY[0x1E4F143A8];
        v258[1] = 0x40000000;
        v258[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_3;
        v258[3] = &unk_1E62362A0;
        v258[5] = this;
        v258[4] = theDict;
        v258[6] = a5;
        v258[7] = a3;
        int64_t v79 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v79, (uint64_t)v258);
      }
      if (!*(unsigned char *)(*(void *)&theDict[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          v302[0].signed int mSelector = 136315394;
          *(void *)&v302[0].AudioObjectPropertyScope mScope = "HALS_Device.cpp";
          LOWORD(v302[1].mSelector) = 1024;
          *(AudioObjectPropertySelector *)((char *)&v302[1].mSelector + 2) = 4519;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Could not set given DSP description.", (uint8_t *)v302, 0x12u);
        }
        int v224 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v224 = off_1F148A5D8;
        v224[2] = 1852797029;
      }
      uint64_t v80 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      if (a8) {
        uint64_t v81 = *((unsigned int *)a8 + 4);
      }
      else {
        uint64_t v81 = 0;
      }
      AudioObjectPropertyScope mScope = a3->mScope;
      v302[0].signed int mSelector = 1751413616;
      *(void *)&v302[0].AudioObjectPropertyScope mScope = mScope;
      HALS_Object::PropertiesChanged(this, v80, v81, 1u, v302);
      _Block_object_dispose(buf, 8);
      HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)&v299[16], v124);
LABEL_250:
      uint64_t v132 = theDict;
      goto LABEL_241;
    }
    if (mSelector <= 1936879203)
    {
      if (mSelector != 1934647619)
      {
        if (mSelector == 1934647636)
        {
          BOOL v41 = a3->mScope == 1768845428;
          if (a3->mScope == 1768845428)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            int v138 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
            {
              uint64_t v139 = pthread_self();
              mach_port_t v140 = pthread_mach_thread_np(v139);
              *(_DWORD *)__CFString buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v140;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4632;
              *(_WORD *)uint64_t v299 = 2080;
              *(void *)&v299[2] = "isInput == true";
              _os_log_error_impl(&dword_1BAA78000, v138, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for output scope kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
            __cxa_allocate_exception(0x40uLL);
            long long v245 = off_1F148A5D8;
            int v246 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            uint64_t v296 = 0;
            uint64_t v294 = 0;
            uint64_t v295 = 0;
            int v297 = -1;
            *(void *)CFDictionaryRef theDict = &unk_1F1487130;
            *(void *)&theDict[16] = &unk_1F1487158;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v300) = 4632;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
            *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
            *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
            uint64_t v303 = v244;
            long long v243 = 0uLL;
            uint64_t v244 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          if (!a5)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v153 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v153, OS_LOG_TYPE_ERROR))
            {
              mach_port_t v154 = pthread_self();
              mach_port_t v155 = pthread_mach_thread_np(v154);
              *(_DWORD *)__CFString buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v155;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4633;
              *(_WORD *)uint64_t v299 = 2080;
              *(void *)&v299[2] = "inData == nullptr";
              _os_log_error_impl(&dword_1BAA78000, v153, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
            __cxa_allocate_exception(0x40uLL);
            long long v245 = off_1F148A5D8;
            int v246 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            uint64_t v296 = 0;
            uint64_t v294 = 0;
            uint64_t v295 = 0;
            int v297 = -1;
            *(void *)CFDictionaryRef theDict = &unk_1F1487130;
            *(void *)&theDict[16] = &unk_1F1487158;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v300) = 4633;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
            *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
            *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
            uint64_t v303 = v244;
            long long v243 = 0uLL;
            uint64_t v244 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          if (a4 != 4)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            long long v168 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v168, OS_LOG_TYPE_ERROR))
            {
              uint64_t v169 = pthread_self();
              mach_port_t v170 = pthread_mach_thread_np(v169);
              *(_DWORD *)__CFString buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v170;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4634;
              *(_WORD *)uint64_t v299 = 2080;
              *(void *)&v299[2] = "inDataSize != sizeof(UInt32)";
              _os_log_error_impl(&dword_1BAA78000, v168, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
            __cxa_allocate_exception(0x40uLL);
            long long v245 = off_1F148A5D8;
            int v246 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            uint64_t v296 = 0;
            uint64_t v294 = 0;
            uint64_t v295 = 0;
            int v297 = -1;
            *(void *)CFDictionaryRef theDict = &unk_1F1487130;
            *(void *)&theDict[16] = &unk_1F1487158;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v300) = 4634;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
            *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
            *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
            uint64_t v303 = v244;
            long long v243 = 0uLL;
            uint64_t v244 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          int v42 = *a5;
          if (*a5 >= 3u)
          {
            AMCP::Log::Scope_Registry::get(v16);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            long long v180 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v180, OS_LOG_TYPE_ERROR))
            {
              long long v181 = pthread_self();
              mach_port_t v182 = pthread_mach_thread_np(v181);
              *(_DWORD *)__CFString buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v182;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4637;
              *(_WORD *)uint64_t v299 = 2080;
              *(void *)&v299[2] = "dataValue > kAudioDevicePropertySpatializationTypeSpatialize";
              _os_log_error_impl(&dword_1BAA78000, v180, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData inData is an invalid value for kAudioDevicePropertySpatializationType", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
            __cxa_allocate_exception(0x40uLL);
            long long v245 = off_1F148A5D8;
            int v246 = 1852797029;
            *(_DWORD *)&theDict[8] = 1852797029;
            uint64_t v296 = 0;
            uint64_t v294 = 0;
            uint64_t v295 = 0;
            int v297 = -1;
            *(void *)CFDictionaryRef theDict = &unk_1F1487130;
            *(void *)&theDict[16] = &unk_1F1487158;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
            *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
            *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v300) = 4637;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
            *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
            *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
            uint64_t v303 = v244;
            long long v243 = 0uLL;
            uint64_t v244 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          *(void *)__CFString buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          v299[0] = 0;
          v237[0] = MEMORY[0x1E4F143A8];
          v237[1] = 0x40000000;
          v237[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_246;
          v237[3] = &unk_1E6236340;
          int v238 = v42;
          v237[4] = buf;
          v237[5] = this;
          BOOL v239 = v41;
          v237[6] = a8;
          unsigned int v43 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v43, (uint64_t)v237);
          if (*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            unsigned int v44 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
            if (a8) {
              uint64_t v45 = *((unsigned int *)a8 + 4);
            }
            else {
              uint64_t v45 = 0;
            }
            strcpy(theDict, "TaPsptuo");
            theDict[9] = 0;
            *(_WORD *)&theDict[10] = 0;
            HALS_Object::PropertiesChanged(this, v44, v45, 1u, (const AudioObjectPropertyAddress *)theDict);
          }
          goto LABEL_240;
        }
        goto LABEL_429;
      }
      if (a3->mScope == 1768845428)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v147 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v147, OS_LOG_TYPE_ERROR))
        {
          uint64_t v148 = pthread_self();
          mach_port_t v149 = pthread_mach_thread_np(v148);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v149;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4667;
          *(_WORD *)uint64_t v299 = 2080;
          *(void *)&v299[2] = "isInput == true";
          _os_log_error_impl(&dword_1BAA78000, v147, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for output scope kAudioDevicePropertySpatializationVirtualChannelLayout", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
        __cxa_allocate_exception(0x40uLL);
        long long v245 = off_1F148A5D8;
        int v246 = 1852797029;
        *(_DWORD *)&theDict[8] = 1852797029;
        uint64_t v296 = 0;
        uint64_t v294 = 0;
        uint64_t v295 = 0;
        int v297 = -1;
        *(void *)CFDictionaryRef theDict = &unk_1F1487130;
        *(void *)&theDict[16] = &unk_1F1487158;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
        *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v300) = 4667;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
        *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
        *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
        uint64_t v303 = v244;
        long long v243 = 0uLL;
        uint64_t v244 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      if (!a5)
      {
        AMCP::Log::Scope_Registry::get(v16);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v162 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v162, OS_LOG_TYPE_ERROR))
        {
          std::string v163 = pthread_self();
          mach_port_t v164 = pthread_mach_thread_np(v163);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v164;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4669;
          *(_WORD *)uint64_t v299 = 2080;
          *(void *)&v299[2] = "inData == nullptr";
          _os_log_error_impl(&dword_1BAA78000, v162, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertySpatializationVirtualChannelLayout", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
        __cxa_allocate_exception(0x40uLL);
        long long v245 = off_1F148A5D8;
        int v246 = 1852797029;
        *(_DWORD *)&theDict[8] = 1852797029;
        uint64_t v296 = 0;
        uint64_t v294 = 0;
        uint64_t v295 = 0;
        int v297 = -1;
        *(void *)CFDictionaryRef theDict = &unk_1F1487130;
        *(void *)&theDict[16] = &unk_1F1487158;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
        *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v300) = 4669;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
        *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
        *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
        uint64_t v303 = v244;
        long long v243 = 0uLL;
        uint64_t v244 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      int v82 = caulk::numeric::exceptional_mul<unsigned int>(a5[2]);
      uint64_t v83 = (AMCP::Log::Scope_Registry *)caulk::numeric::exceptional_add<unsigned int>(v82);
      if (v83 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__CFString buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4671;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: kAudioDevicePropertySpatializationVirtualChannelLayout: the provided size is smaller than what is specified in the data", buf, 0x12u);
        }
        int v225 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v225 = off_1F148A5D8;
        v225[2] = 561211770;
      }
      if (!a8)
      {
        AMCP::Log::Scope_Registry::get(v83);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        char v174 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v174, OS_LOG_TYPE_ERROR))
        {
          uint64_t v175 = pthread_self();
          mach_port_t v176 = pthread_mach_thread_np(v175);
          *(_DWORD *)__CFString buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v176;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4673;
          *(_WORD *)uint64_t v299 = 2080;
          *(void *)&v299[2] = "inClient == nullptr";
          _os_log_error_impl(&dword_1BAA78000, v174, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertySpatializationVirtualChannelLayout", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
        __cxa_allocate_exception(0x40uLL);
        long long v245 = off_1F148A5D8;
        int v246 = 1852797029;
        *(_DWORD *)&theDict[8] = 1852797029;
        uint64_t v296 = 0;
        uint64_t v294 = 0;
        uint64_t v295 = 0;
        int v297 = -1;
        *(void *)CFDictionaryRef theDict = &unk_1F1487130;
        *(void *)&theDict[16] = &unk_1F1487158;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
        *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, const void *, UInt32, const void *, HALS_Client *)";
        *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v300) = 4673;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
        *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
        *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
        uint64_t v303 = v244;
        long long v243 = 0uLL;
        uint64_t v244 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      *(void *)__CFString buf = MEMORY[0x1E4F143A8];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&buf[16] = ___ZN11HALS_Device35SetDSPVirtualChannelLayoutForClientEbP11HALS_ClientPK18AudioChannelLayout_block_invoke;
      *(void *)uint64_t v299 = &__block_descriptor_tmp_298;
      char v301 = 0;
      *(void *)&v299[8] = this;
      *(void *)&v299[16] = a8;
      uint64_t v300 = a5;
      uint64_t v84 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v84, (uint64_t)buf);
      return;
    }
    if (mSelector != 1936879204)
    {
      if (mSelector == 1983996971)
      {
        BOOL v60 = a3->mScope == 1768845428;
        if (a3->mScope != 1768845428)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v141 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v141, OS_LOG_TYPE_ERROR))
          {
            long long v142 = pthread_self();
            mach_port_t v143 = pthread_mach_thread_np(v142);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v143;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4682;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "isInput == false";
            _os_log_error_impl(&dword_1BAA78000, v141, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for input scope kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4682;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          std::logic_error v156 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v156, OS_LOG_TYPE_ERROR))
          {
            uint64_t v157 = pthread_self();
            mach_port_t v158 = pthread_mach_thread_np(v157);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v158;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4683;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inData == nullptr";
            _os_log_error_impl(&dword_1BAA78000, v156, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4683;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          char v171 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
          {
            long long v172 = pthread_self();
            mach_port_t v173 = pthread_mach_thread_np(v172);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v173;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4684;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1BAA78000, v171, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4684;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (!a8)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v183 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v183, OS_LOG_TYPE_ERROR))
          {
            uint64_t v184 = pthread_self();
            mach_port_t v185 = pthread_mach_thread_np(v184);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v185;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4685;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inClient == nullptr";
            _os_log_error_impl(&dword_1BAA78000, v183, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4685;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        unsigned __int8 v61 = atomic_load((unsigned __int8 *)a8 + 260);
        if ((v61 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v189 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v189, OS_LOG_TYPE_ERROR))
          {
            unsigned int v190 = pthread_self();
            mach_port_t v191 = pthread_mach_thread_np(v190);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v191;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4686;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "!inClient->SandboxAllowsMicAccess()";
            _os_log_error_impl(&dword_1BAA78000, v189, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient does not have permission to set kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 560492391;
          *(_DWORD *)&theDict[8] = 560492391;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4686;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        int v62 = *a5;
        if (*a5 >= 2u)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          char v195 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
          {
            int64x2_t v196 = pthread_self();
            mach_port_t v197 = pthread_mach_thread_np(v196);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v197;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4689;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "dataValue > 1";
            _os_log_error_impl(&dword_1BAA78000, v195, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData inData is an invalid value for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4689;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        *(void *)__CFString buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        v299[0] = 0;
        v234[0] = MEMORY[0x1E4F143A8];
        v234[1] = 0x40000000;
        v234[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_249;
        v234[3] = &unk_1E6236368;
        int v235 = v62;
        v234[4] = buf;
        v234[5] = this;
        BOOL v236 = v60;
        v234[6] = a8;
        __int16 v63 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v63, (uint64_t)v234);
        if (*(unsigned char *)(*(void *)&buf[8] + 24))
        {
          uint64_t v64 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          uint64_t v65 = *((unsigned int *)a8 + 4);
          strcpy(theDict, "+dAvtpni");
          theDict[9] = 0;
          *(_WORD *)&theDict[10] = 0;
          HALS_Object::PropertiesChanged(this, v64, v65, 1u, (const AudioObjectPropertyAddress *)theDict);
        }
        goto LABEL_240;
      }
      if (mSelector == 1986622324)
      {
        NumberStreamsExcludingReferenceStreams = (AMCP::Log::Scope_Registry *)HALS_Device::GetNumberStreamsExcludingReferenceStreams(this, 1);
        if (!NumberStreamsExcludingReferenceStreams)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v135 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v135, OS_LOG_TYPE_ERROR))
          {
            BOOL v136 = pthread_self();
            mach_port_t v137 = pthread_mach_thread_np(v136);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v137;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4593;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "hasNonReferenceInputStream == false";
            _os_log_error_impl(&dword_1BAA78000, v135, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: Device does not have non-reference input streams kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4593;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        BOOL v31 = a3->mScope == 1768845428;
        if (a3->mScope != 1768845428)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v150 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v150, OS_LOG_TYPE_ERROR))
          {
            mach_port_t v151 = pthread_self();
            mach_port_t v152 = pthread_mach_thread_np(v151);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v152;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4595;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "isInput == false";
            _os_log_error_impl(&dword_1BAA78000, v150, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: only valid for input scope kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4595;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v165 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
          {
            uint64_t v166 = pthread_self();
            mach_port_t v167 = pthread_mach_thread_np(v166);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v167;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4596;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inData == nullptr";
            _os_log_error_impl(&dword_1BAA78000, v165, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inData is nullptr for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4596;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v177 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v177, OS_LOG_TYPE_ERROR))
          {
            int v178 = pthread_self();
            mach_port_t v179 = pthread_mach_thread_np(v178);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v179;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4597;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1BAA78000, v177, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4597;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (!a8)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v186 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v186, OS_LOG_TYPE_ERROR))
          {
            char v187 = pthread_self();
            mach_port_t v188 = pthread_mach_thread_np(v187);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v188;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4598;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inClient == nullptr";
            _os_log_error_impl(&dword_1BAA78000, v186, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4598;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        unsigned __int8 v32 = atomic_load((unsigned __int8 *)a8 + 260);
        if ((v32 & 1) == 0)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v192 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v192, OS_LOG_TYPE_ERROR))
          {
            __int16 v193 = pthread_self();
            mach_port_t v194 = pthread_mach_thread_np(v193);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v194;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4599;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "!inClient->SandboxAllowsMicAccess()";
            _os_log_error_impl(&dword_1BAA78000, v192, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient does not have permission to set kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 560492391;
          *(_DWORD *)&theDict[8] = 560492391;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4599;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        int v33 = *a5;
        if (*a5 >= 3u)
        {
          AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v198 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
          {
            int v199 = pthread_self();
            mach_port_t v200 = pthread_mach_thread_np(v199);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v200;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4602;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "dataValue > kAudioDevicePropertyVocalIsolationTypeBasic";
            _os_log_error_impl(&dword_1BAA78000, v198, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData inData is an invalid value for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4602;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        *(void *)__CFString buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        v299[0] = 0;
        v240[0] = MEMORY[0x1E4F143A8];
        v240[1] = 0x40000000;
        v240[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_243;
        v240[3] = &unk_1E6236318;
        int v241 = v33;
        v240[4] = buf;
        v240[5] = this;
        BOOL v242 = v31;
        v240[6] = a8;
        signed int v34 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v34, (uint64_t)v240);
        if (*(unsigned char *)(*(void *)&buf[8] + 24))
        {
          int v35 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          uint64_t v36 = *((unsigned int *)a8 + 4);
          strcpy(theDict, "tsivtpni");
          theDict[9] = 0;
          *(_WORD *)&theDict[10] = 0;
          HALS_Object::PropertiesChanged(this, v35, v36, 1u, (const AudioObjectPropertyAddress *)theDict);
        }
        goto LABEL_240;
      }
      goto LABEL_429;
    }
    unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a8);
    int v69 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);
    if (caulk::numeric::exceptional_add<unsigned int>(v69) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__CFString buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4299;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelLayout", buf, 0x12u);
      }
      uint64_t v212 = __cxa_allocate_exception(0x10uLL);
      *(void *)uint64_t v212 = off_1F148A5D8;
      v212[2] = 561211770;
    }
    int v70 = caulk::numeric::exceptional_mul<unsigned int>(a5[2]);
    if (caulk::numeric::exceptional_add<unsigned int>(v70) > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__CFString buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4303;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: kAudioDevicePropertyPreferredChannelLayout: the provided size is smaller than what is specified in the data", buf, 0x12u);
      }
      unint64_t v218 = __cxa_allocate_exception(0x10uLL);
      *(void *)unint64_t v218 = off_1F148A5D8;
      v218[2] = 561211770;
    }
    v285[1] = 0;
    v285[0] = 0;
    HALS_System::GetInstance(theDict, 0, v285);
    CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)theDict + 1408), *((const __CFString **)this + 14));
    *(void *)__CFString buf = Setting;
    *(_WORD *)&uint8_t buf[8] = 1;
    if (*(void *)&theDict[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&theDict[8]);
    }
    *(void *)CFDictionaryRef theDict = 0;
    *(_WORD *)&theDict[8] = 257;
    if (Setting) {
      CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)theDict, Setting);
    }
    else {
      CACFDictionary::SetCFMutableDictionaryToEmpty((CACFDictionary *)theDict);
    }
    *(void *)&v302[0].signed int mSelector = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
    LOWORD(v302[0].mElement) = 257;
    HALS_Device::ConstructDictionaryFromLayout((HALS_Device *)a5, (CFMutableDictionaryRef *)v302, v121);
    AudioObjectPropertyScope v122 = a3->mScope;
    if (v122 == 1869968496)
    {
      if (theDict[9] && *(void *)&v302[0].mSelector && *(void *)theDict) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)theDict, @"output.surround", *(const void **)&v302[0].mSelector);
      }
      v283[1] = 0;
      v283[0] = 0;
      HALS_System::GetInstance(&v243, 0, v283);
      HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v243 + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
    }
    if (v122 == 1768845428)
    {
      if (theDict[9] && *(void *)&v302[0].mSelector && *(void *)theDict) {
        CFDictionarySetValue(*(CFMutableDictionaryRef *)theDict, @"input.surround", *(const void **)&v302[0].mSelector);
      }
      v284[1] = 0;
      v284[0] = 0;
      HALS_System::GetInstance(&v243, 0, v284);
      HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v243 + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)v302);
LABEL_252:
    CACFDictionary::~CACFDictionary((CACFDictionary *)theDict);
    CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
    return;
  }
  if (mSelector > 1684236337)
  {
    if (mSelector > 1684500593)
    {
      if (mSelector == 1684500594)
      {
        if (!a7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__CFString buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4567;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
          }
          __int16 v216 = __cxa_allocate_exception(0x10uLL);
          *(void *)__int16 v216 = off_1F148A5D8;
          v216[2] = 1852797029;
        }
        if (a6 != 4)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__CFString buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4569;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
          }
          uint64_t v220 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v220 = off_1F148A5D8;
          v220[2] = 1852797029;
        }
        AudioObjectPropertyScope v87 = a3->mScope;
        if (v87 != 1768845428 && v87 != 1869968496)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__CFString buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4571;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
          }
          int v227 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v227 = off_1F148A5D8;
          v227[2] = 1852797029;
        }
        int v88 = *a7;
        *(void *)__CFString buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        v299[0] = 0;
        v248[0] = MEMORY[0x1E4F143A8];
        v248[1] = 0x40000000;
        v248[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_239;
        v248[3] = &unk_1E62362F0;
        v248[4] = buf;
        v248[5] = this;
        BOOL v251 = v87 == 1768845428;
        int v249 = v88;
        unsigned int v250 = a4;
        v248[6] = a3;
        v248[7] = a5;
        uint64_t v89 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v89, (uint64_t)v248);
        if (!*(unsigned char *)(*(void *)&buf[8] + 24))
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)CFDictionaryRef theDict = 136315394;
            *(void *)&theDict[4] = "HALS_Device.cpp";
            *(_WORD *)&theDict[12] = 1024;
            *(_DWORD *)&theDict[14] = 4584;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  SetStreamDSPProperty failure", theDict, 0x12u);
          }
          uint64_t v223 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v223 = off_1F148A5D8;
          v223[2] = 1852797029;
        }
        uint64_t v90 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
        if (a8) {
          uint64_t v91 = *((unsigned int *)a8 + 4);
        }
        else {
          uint64_t v91 = 0;
        }
        *(_DWORD *)CFDictionaryRef theDict = 1684500594;
        *(void *)&theDict[4] = *(void *)&a3->mScope;
        HALS_Object::PropertiesChanged(this, v90, v91, 1u, (const AudioObjectPropertyAddress *)theDict);
        goto LABEL_240;
      }
      if (mSelector == 1685278562)
      {
        if (!a5)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v144 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            int v145 = pthread_self();
            mach_port_t v146 = pthread_mach_thread_np(v145);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v146;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4714;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inData == nullptr";
            _os_log_error_impl(&dword_1BAA78000, v144, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: outData is nullptr for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4714;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (a4 != 8)
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          uint64_t v159 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
          {
            uint64_t v160 = pthread_self();
            mach_port_t v161 = pthread_mach_thread_np(v160);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v161;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4715;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inDataSize != sizeof(CFDictionaryRef)";
            _os_log_error_impl(&dword_1BAA78000, v159, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inDataSize is not CFDictionaryRef for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4715;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (!a8 && !*((unsigned char *)this + 616))
        {
          AMCP::Log::Scope_Registry::get(v16);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v201 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v201, OS_LOG_TYPE_ERROR))
          {
            uint64_t v202 = pthread_self();
            mach_port_t v203 = pthread_mach_thread_np(v202);
            *(_DWORD *)__CFString buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v203;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4716;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = "inClient == nullptr && !mClientDSPInfo.allows_null_client()";
            _os_log_error_impl(&dword_1BAA78000, v201, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::SetPropertyData: inClient is null for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v247);
          __cxa_allocate_exception(0x40uLL);
          long long v245 = off_1F148A5D8;
          int v246 = 1852797029;
          *(_DWORD *)&theDict[8] = 1852797029;
          uint64_t v296 = 0;
          uint64_t v294 = 0;
          uint64_t v295 = 0;
          int v297 = -1;
          *(void *)CFDictionaryRef theDict = &unk_1F1487130;
          *(void *)&theDict[16] = &unk_1F1487158;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)theDict);
          *(void *)&v299[8] = "virtual void HALS_Device::SetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, const void *, UInt32, const void *, HALS_Client *)";
          *(void *)&v299[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v300) = 4716;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v243);
          *(_OWORD *)&v302[0].AudioObjectPropertyElement mElement = v243;
          *(void *)&v302[0].signed int mSelector = &unk_1F148AA90;
          uint64_t v303 = v244;
          long long v243 = 0uLL;
          uint64_t v244 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        *(void *)__CFString buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x3002000000;
        *(void *)uint64_t v299 = __Block_byref_object_copy__251;
        *(void *)&v299[8] = __Block_byref_object_dispose__252;
        *(_WORD *)&v299[16] = 0;
        v233[0] = MEMORY[0x1E4F143A8];
        v233[1] = 0x40000000;
        v233[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_253;
        v233[3] = &unk_1E6236390;
        v233[4] = buf;
        v233[5] = this;
        v233[6] = a3;
        v233[7] = a8;
        v233[8] = a5;
        uint64_t v72 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v72, (uint64_t)v233);
        if (*(unsigned char *)(*(void *)&buf[8] + 40))
        {
          uint64_t v73 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8) {
            uint64_t v74 = *((unsigned int *)a8 + 4);
          }
          else {
            uint64_t v74 = 0;
          }
          AudioObjectPropertyElement mElement = a3->mElement;
          *(void *)CFDictionaryRef theDict = *(void *)&a3->mSelector;
          *(_DWORD *)&theDict[8] = mElement;
          HALS_Object::PropertiesChanged(this, v73, v74, 1u, (const AudioObjectPropertyAddress *)theDict);
        }
        goto LABEL_240;
      }
      if (mSelector != 1685414763) {
        goto LABEL_429;
      }
      if (a4 <= 0xF)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__CFString buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4447;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessDuck", buf, 0x12u);
        }
        std::logic_error v207 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::logic_error v207 = off_1F148A5D8;
        v207[2] = 561211770;
      }
      uint64_t v24 = *(void *)a5;
      float v25 = *((float *)a5 + 2);
      if (v25 < 0.0) {
        float v25 = 0.0;
      }
      if (v25 <= 1.0) {
        float v26 = v25;
      }
      else {
        float v26 = 1.0;
      }
      if (*((float *)a5 + 3) >= 0.0) {
        float v27 = *((float *)a5 + 3);
      }
      else {
        float v27 = 0.0;
      }
      float v28 = (*(double (**)(HALS_Device *))(*(void *)this + 264))(this) * v27;
      if (v28 < 1.0) {
        float v28 = 1.0;
      }
      v265[0] = MEMORY[0x1E4F143A8];
      v265[1] = 0x40000000;
      v265[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_224;
      v265[3] = &__block_descriptor_tmp_225;
      v265[4] = this;
      v265[5] = a8;
      v265[6] = v24;
      float v266 = v26;
      float v267 = v28;
      AudioObjectPropertyElement v29 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v29, (uint64_t)v265);
      return;
    }
    if (mSelector == 1684236338)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__CFString buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4263;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelsForStereo", buf, 0x12u);
        }
        int64_t v217 = __cxa_allocate_exception(0x10uLL);
        *(void *)int64_t v217 = off_1F148A5D8;
        v217[2] = 561211770;
      }
      v288[1] = 0;
      v288[0] = 0;
      HALS_System::GetInstance(theDict, 0, v288);
      *(void *)__CFString buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)theDict + 1408), *((const __CFString **)this + 14));
      *(_WORD *)&uint8_t buf[8] = 1;
      if (*(void *)&theDict[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&theDict[8]);
      }
      *(void *)CFDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
      *(_WORD *)&theDict[8] = 257;
      if (*(void *)buf) {
        CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)theDict, *(CFDictionaryRef *)buf);
      }
      AudioObjectPropertyScope v92 = a3->mScope;
      if (v92 == 1869968496)
      {
        *((_DWORD *)this + 36) = *a5;
        *((_DWORD *)this + 37) = a5[1];
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, @"output.stereo.left", *a5);
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, @"output.stereo.right", a5[1]);
        v286[1] = 0;
        v286[0] = 0;
        HALS_System::GetInstance(v302, 0, v286);
        HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(void *)&v302[0].mSelector + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
      }
      if (v92 == 1768845428)
      {
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, @"input.stereo.left", *a5);
        CACFDictionary::AddUInt32((CFMutableDictionaryRef *)theDict, @"input.stereo.right", a5[1]);
        v287[1] = 0;
        v287[0] = 0;
        HALS_System::GetInstance(v302, 0, v287);
        HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(*(void *)&v302[0].mSelector + 1408), *((CFTypeRef *)this + 14), *(const void **)theDict);
      }
      goto LABEL_252;
    }
    if (mSelector != 1684500589) {
      goto LABEL_429;
    }
    char v50 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, v17);
    if ((v50 & 1) != 0
      || (uint64_t v256 = 0, v257 = 0, HALS_System::GetInstance(v302, 0, &v256), g_static_start_options == 1))
    {
      HasProperty = (AMCP::Log::Scope_Registry *)HALS_Device_HostedDSP::HasProperty(*((HALS_Device ***)this + 76), (uint64_t)a3, (const AudioObjectPropertyAddress *)a8, v49);
      BOOL v52 = (unsigned __int16)HasProperty > 0xFFu;
      if (v50)
      {
        if ((unsigned __int16)HasProperty < 0x100u)
        {
LABEL_76:
          if (!a5)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__CFString buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4535;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: inData in nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            uint64_t v226 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v226 = off_1F148A5D8;
            v226[2] = 1852797029;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__CFString buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4537;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            int v228 = __cxa_allocate_exception(0x10uLL);
            *(void *)int v228 = off_1F148A5D8;
            v228[2] = 561211770;
          }
          if (!a7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__CFString buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4539;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            long long v229 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v229 = off_1F148A5D8;
            v229[2] = 1852797029;
          }
          if (a6 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__CFString buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4541;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            uint64_t v230 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v230 = off_1F148A5D8;
            v230[2] = 1852797029;
          }
          AudioObjectPropertyScope v53 = a3->mScope;
          if (v53 != 1768845428 && v53 != 1869968496)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)__CFString buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 4543;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            uint64_t v232 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v232 = off_1F148A5D8;
            v232[2] = 1852797029;
          }
          int v54 = *a5;
          int v55 = *a7;
          *(void *)__CFString buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          v299[0] = 0;
          v252[0] = MEMORY[0x1E4F143A8];
          v252[1] = 0x40000000;
          v252[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_237;
          v252[3] = &unk_1E62362C8;
          v252[4] = buf;
          v252[5] = this;
          BOOL v255 = v53 == 1768845428;
          v252[6] = a3;
          int v253 = v55;
          int v254 = v54;
          CFMutableDictionaryRef v56 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v56, (uint64_t)v252);
          if (!*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)CFDictionaryRef theDict = 136315394;
              *(void *)&theDict[4] = "HALS_Device.cpp";
              *(_WORD *)&theDict[12] = 1024;
              *(_DWORD *)&theDict[14] = 4557;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  SetStreamDSPParameter failure", theDict, 0x12u);
            }
            long long v231 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v231 = off_1F148A5D8;
            v231[2] = 1852797029;
          }
          __int16 v57 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
          if (a8) {
            uint64_t v58 = *((unsigned int *)a8 + 4);
          }
          else {
            uint64_t v58 = 0;
          }
          *(_DWORD *)CFDictionaryRef theDict = 1684500589;
          *(void *)&theDict[4] = *(void *)&a3->mScope;
          HALS_Object::PropertiesChanged(this, v57, v58, 1u, (const AudioObjectPropertyAddress *)theDict);
          goto LABEL_240;
        }
LABEL_224:
        if (a3->mSelector == 1684500589)
        {
          time_t v125 = (HALS_Device **)*((void *)this + 76);
          AMCP::Log::Scope_Registry::get(HasProperty);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v126 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v127 = pthread_self();
            mach_port_t v128 = pthread_mach_thread_np(v127);
            *(_DWORD *)__CFString buf = 67109634;
            *(_DWORD *)&uint8_t buf[4] = v128;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device_HostedDSP.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 638;
            _os_log_impl(&dword_1BAA78000, v126, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp][graph] Hosted DSP is processing a kAudioDevicePropertyDSPGraphParameter", buf, 0x18u);
          }
          *(void *)CFDictionaryRef theDict = *(void *)&a3->mSelector;
          *(_DWORD *)&theDict[8] = a3->mElement;
          int v129 = (char *)operator new(0x38uLL);
          *(void *)int v129 = &unk_1F14673A8;
          *(_OWORD *)(v129 + 8) = *(_OWORD *)theDict;
          *((void *)v129 + 3) = a5;
          *((_DWORD *)v129 + 8) = a4;
          *((void *)v129 + 5) = a7;
          *((_DWORD *)v129 + 12) = a6;
          *(void *)uint64_t v299 = v129;
          HALS_Device_HostedDSP::DiscoverDSPPropertySetsForClient(v125, (uint64_t)a8, (uint64_t)a3, (uint64_t)buf, 1);
          std::__function::__value_func<BOOL ()(std::shared_ptr<DSP_Host_PropertySet>)>::~__value_func[abi:ne180100](buf);
        }
        return;
      }
    }
    else
    {
      BOOL v52 = 0;
    }
    if (*(void *)&v302[0].mElement) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v302[0].mElement);
    }
    HasProperty = (AMCP::Log::Scope_Registry *)v257;
    if (v257) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v257);
    }
    if (!v52) {
      goto LABEL_76;
    }
    goto LABEL_224;
  }
  if (mSelector <= 1634758773)
  {
    if (mSelector == 1634755428)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__CFString buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = 4477;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyClockDevice", buf, 0x12u);
        }
        char v214 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v214 = off_1F148A5D8;
        v214[2] = 561211770;
      }
      if (a8) {
        int v85 = *((_DWORD *)a8 + 4);
      }
      else {
        int v85 = 0;
      }
      *(void *)__CFString buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      v299[0] = 0;
      v261[0] = MEMORY[0x1E4F143A8];
      v261[1] = 0x40000000;
      v261[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_228;
      v261[3] = &unk_1E6236228;
      v261[5] = this;
      v261[4] = buf;
      int v262 = v85;
      v261[6] = a5;
      uint64_t v113 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v113, (uint64_t)v261);
      goto LABEL_240;
    }
    if (mSelector != 1634758765) {
      goto LABEL_429;
    }
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__CFString buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4407;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessMute", buf, 0x12u);
      }
      std::logic_error v208 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::logic_error v208 = off_1F148A5D8;
      v208[2] = 561211770;
    }
    if (a8) {
      int v37 = *((_DWORD *)a8 + 4);
    }
    else {
      int v37 = 0;
    }
    AudioObjectPropertyScope v99 = a3->mScope;
    *(void *)CFDictionaryRef theDict = 0;
    *(void *)&theDict[8] = theDict;
    *(void *)&theDict[16] = 0x2000000000;
    LODWORD(v294) = 1065353216;
    v272[0] = MEMORY[0x1E4F143A8];
    v272[1] = 0x40000000;
    v272[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_220;
    v272[3] = &unk_1E6236198;
    v272[5] = this;
    v272[4] = theDict;
    int v273 = v37;
    BOOL v274 = v99 == 1768845428;
    uint64_t v100 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v100, (uint64_t)v272);
    int v101 = *a5;
    if (v101) {
      float v102 = 0.0;
    }
    else {
      float v102 = 1.0;
    }
    if (v102 != *(float *)(*(void *)&theDict[8] + 24))
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        int v103 = *((_DWORD *)this + 4);
        if (a3->mScope == 1768845428) {
          uint64_t v104 = "input";
        }
        else {
          uint64_t v104 = "output";
        }
        uint64_t v105 = "on";
        *(_DWORD *)__CFString buf = 136316162;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_DWORD *)&buf[14] = 4418;
        *(_WORD *)&buf[12] = 1024;
        *(_WORD *)&unsigned char buf[18] = 1024;
        if (v102 != 0.0) {
          uint64_t v105 = "off";
        }
        *(_DWORD *)&buf[20] = v103;
        *(_WORD *)uint64_t v299 = 2080;
        *(void *)&v299[2] = v104;
        *(_WORD *)&v299[10] = 2080;
        *(void *)&v299[12] = v105;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_SetPropertyData: Object ID: %d setting process %s mute: %s", buf, 0x2Cu);
      }
      *(void *)&v302[0].signed int mSelector = 0;
      *(void *)&v302[0].AudioObjectPropertyElement mElement = v302;
      *(void *)&v302[1].AudioObjectPropertyScope mScope = 0x2000000000;
      LOBYTE(v303) = 0;
      v268[0] = MEMORY[0x1E4F143A8];
      v268[1] = 0x40000000;
      v268[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_222;
      v268[3] = &unk_1E62361C0;
      v268[5] = this;
      v268[4] = v302;
      int v269 = v37;
      BOOL v271 = v99 == 1768845428;
      float v270 = v102;
      unint64_t v106 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v106, (uint64_t)v268);
      if (*(unsigned char *)(*(void *)&v302[0].mElement + 24))
      {
        if (v99 == 1768845428) {
          HALS_Device::ProcessMuteStateChanged(this, a8, v101 != 0);
        }
        AudioObjectPropertyScope v107 = a3->mScope;
        char v108 = (AudioObjectPropertyAddress *)operator new(0x18uLL);
        v108->signed int mSelector = 1634758774;
        v108->AudioObjectPropertyScope mScope = v107;
        *(void *)&v108->AudioObjectPropertyElement mElement = 0x6170706D00000000;
        v108[1].AudioObjectPropertyScope mScope = v107;
        v108[1].AudioObjectPropertyElement mElement = 0;
        BOOL v109 = os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT);
        if (a8)
        {
          if (v109)
          {
            int v110 = *((_DWORD *)this + 4);
            unint64_t v111 = "output";
            int v112 = *((_DWORD *)a8 + 4);
            if (v107 == 1768845428) {
              unint64_t v111 = "input";
            }
            *(_DWORD *)__CFString buf = 136316162;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 4431;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v110;
            *(_WORD *)uint64_t v299 = 1024;
            *(_DWORD *)&v299[2] = v112;
            *(_WORD *)&v299[6] = 2080;
            *(void *)&v299[8] = v111;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_SetPropertyData: Object ID: %d notifying client %d about process %s volume/mute change", buf, 0x28u);
          }
        }
        else
        {
          if (v109)
          {
            int v133 = *((_DWORD *)this + 4);
            mach_port_t v134 = "output";
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_DWORD *)__CFString buf = 136315906;
            *(_WORD *)&buf[12] = 1024;
            if (v107 == 1768845428) {
              mach_port_t v134 = "input";
            }
            *(_DWORD *)&buf[14] = 4436;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v133;
            *(_WORD *)uint64_t v299 = 2080;
            *(void *)&v299[2] = v134;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_SetPropertyData: Object ID: %d notifying generally about process %s volume/mute change", buf, 0x22u);
          }
          HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, 2u, v108);
        }
        operator delete(v108);
      }
      _Block_object_dispose(v302, 8);
    }
    goto LABEL_250;
  }
  if (mSelector == 1634758774)
  {
    if (a4 <= 3)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__CFString buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 4366;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyProcessVolumeScalar", buf, 0x12u);
      }
      std::string v215 = __cxa_allocate_exception(0x10uLL);
      *(void *)std::string v215 = off_1F148A5D8;
      v215[2] = 561211770;
    }
    if (a8) {
      int v86 = *((_DWORD *)a8 + 4);
    }
    else {
      int v86 = 0;
    }
    AudioObjectPropertyScope v114 = a3->mScope;
    *(void *)__CFString buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(_DWORD *)uint64_t v299 = 1065353216;
    v279[0] = MEMORY[0x1E4F143A8];
    v279[1] = 0x40000000;
    v279[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_217;
    v279[3] = &unk_1E6236148;
    v279[5] = this;
    v279[4] = buf;
    int v280 = v86;
    BOOL v281 = v114 == 1768845428;
    uint64_t v115 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v115, (uint64_t)v279);
    float v116 = 0.0;
    if (*(float *)a5 < 0.0 || (v117 = 1.0, float v116 = *(float *)a5, *(float *)a5 <= 1.0)) {
      float v117 = v116;
    }
    if (v117 == *(float *)(*(void *)&buf[8] + 24)) {
      goto LABEL_240;
    }
    *(void *)CFDictionaryRef theDict = 0;
    *(void *)&theDict[8] = theDict;
    *(void *)&theDict[16] = 0x2000000000;
    LOBYTE(v294) = 0;
    v275[0] = MEMORY[0x1E4F143A8];
    v275[1] = 0x40000000;
    v275[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2;
    v275[3] = &unk_1E6236170;
    v275[5] = this;
    v275[4] = theDict;
    int v276 = v86;
    BOOL v278 = v114 == 1768845428;
    float v277 = v117;
    long long v118 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v118, (uint64_t)v275);
    if (*(unsigned char *)(*(void *)&theDict[8] + 24))
    {
      AudioObjectPropertyScope v119 = a3->mScope;
      uint64_t v120 = (AudioObjectPropertyAddress *)operator new(0xCuLL);
      *(void *)&v302[0].AudioObjectPropertyElement mElement = v120 + 1;
      *(void *)&v302[1].AudioObjectPropertyScope mScope = v120 + 1;
      v120->signed int mSelector = 1634758774;
      v120->AudioObjectPropertyScope mScope = v119;
      v120->AudioObjectPropertyElement mElement = 0;
      *(void *)&v302[0].signed int mSelector = v120;
      if (v117 == 0.0 || *(float *)(*(void *)&buf[8] + 24) == 0.0)
      {
        if (v114 == 1768845428)
        {
          HALS_Device::ProcessMuteStateChanged(this, a8, v117 == 0.0);
          AudioObjectPropertyScope v119 = a3->mScope;
        }
        LODWORD(v243) = 1634758765;
        *(void *)((char *)&v243 + 4) = v119;
        std::vector<AudioObjectPropertyAddress>::push_back[abi:ne180100]((unint64_t *)&v302[0].mSelector, (uint64_t *)&v243);
        uint64_t v120 = *(AudioObjectPropertyAddress **)&v302[0].mSelector;
      }
      if (!a8) {
        HALS_Object::PropertiesChanged(this, (HALS_NotificationManager *)*((unsigned int *)this + 4), 0, -1431655765 * ((*(void *)&v302[0].mElement - (void)v120) >> 2), v120);
      }
      if (v120) {
        operator delete(v120);
      }
    }
    goto LABEL_233;
  }
  if (mSelector != 1667523955) {
LABEL_429:
  }
    HALS_Object::SetPropertyData((uint64_t)this, (uint64_t)a2, (uint64_t)a3, v18, v19, v20, v21, (uint64_t)a8);
  if (a4 <= 7)
  {
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__CFString buf = 136315394;
      *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 4342;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: bad property data size for kAudioDevicePropertyClientDescription", buf, 0x12u);
    }
    uint64_t v210 = __cxa_allocate_exception(0x10uLL);
    *(void *)uint64_t v210 = off_1F148A5D8;
    v210[2] = 561211770;
  }
  if (a8)
  {
    *(void *)__CFString buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    v299[0] = 0;
    v282[0] = MEMORY[0x1E4F143A8];
    v282[1] = 0x40000000;
    v282[2] = ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_215;
    v282[3] = &unk_1E6236120;
    v282[6] = a8;
    v282[7] = a5;
    v282[5] = this;
    v282[4] = buf;
    AudioObjectPropertySelector v46 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v46, (uint64_t)v282);
    if (*(unsigned char *)(*(void *)&buf[8] + 24))
    {
      unint64_t v47 = (HALS_NotificationManager *)*((unsigned int *)this + 4);
      uint64_t v48 = *((unsigned int *)a8 + 4);
      strcpy(theDict, "sedcbolg");
      theDict[9] = 0;
      *(_WORD *)&theDict[10] = 0;
      HALS_Object::PropertiesChanged(this, v47, v48, 1u, (const AudioObjectPropertyAddress *)theDict);
    }
    goto LABEL_240;
  }
}

void sub_1BAF583C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Block_object_dispose(&STACK[0x580], 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(v1 + 4);
  uint64_t v3 = *(unsigned int *)(v1 + 8);
  int v5 = **(const void ***)(a1 + 48);
  v16[0] = 0;
  v16[1] = 0;
  HALS_System::GetInstance(&Mutable, 0, v16);
  CFDictionaryRef Setting = (CFDictionaryRef)HALS_SettingsManager::ReadSetting(Mutable[176], *(const __CFString **)(v2 + 112));
  __int16 v20 = 1;
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  CFMutableDictionaryRef Mutable = (HALS_SettingsManager **)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  LOWORD(v18) = 257;
  if (Setting) {
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&Mutable, Setting);
  }
  CFStringRef v6 = 0;
  if (v4 > 1869968495)
  {
    if (v4 == 1869968496)
    {
      CFStringRef v6 = @"output.elementnames";
    }
    else if (v4 == 1886679669)
    {
      CFStringRef v6 = @"through.elementnames";
    }
  }
  else if (v4 == 1735159650)
  {
    CFStringRef v6 = @"global.elementnames";
  }
  else if (v4 == 1768845428)
  {
    CFStringRef v6 = @"input.elementnames";
  }
  CFDictionaryRef v14 = 0;
  __int16 v15 = 1;
  CACFDictionary::GetCACFDictionary((const __CFDictionary **)&Mutable, v6, (CACFDictionary *)&v14);
  CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  __int16 v13 = 257;
  if (v14) {
    CACFDictionary::SetCFMutableDictionaryFromCopy((CACFDictionary *)&theDict, v14);
  }
  CFStringRef v7 = CFStringCreateWithFormat(0, 0, @"%lu", v3);
  void v10[2] = v7;
  char v11 = 1;
  CFMutableDictionaryRef v8 = theDict;
  if (HIBYTE(v13) && v5 && theDict)
  {
    CFDictionarySetValue(theDict, v7, v5);
    CFMutableDictionaryRef v8 = theDict;
  }
  if (BYTE1(v18) && v8)
  {
    if (Mutable) {
      CFDictionarySetValue((CFMutableDictionaryRef)Mutable, v6, v8);
    }
  }
  v9[0] = 0;
  v9[1] = 0;
  HALS_System::GetInstance(v10, 0, v9);
  HALS_SettingsManager::WriteSetting(*(HALS_SettingsManager **)(v10[0] + 1408), *(CFTypeRef *)(v2 + 112), Mutable);
}

void sub_1BAF5892C(void *a1)
{
  CACFString::~CACFString((CACFString *)&v3);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v4);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v5);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 80));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v1 - 64));
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void sub_1BAF589C0()
{
}

void sub_1BAF589C8()
{
}

HALS_Device *___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_213(void *a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t result = (HALS_Device *)a1[7];
  uint64_t v3 = *(void *)(a1[4] + 8);
  uint64_t v4 = *(unsigned int *)(v3 + 24);
  int v5 = *((_DWORD *)result + 38);
  if (v5 == v4)
  {
    if (v4 == -1) {
      return result;
    }
    *(_DWORD *)(v3 + 24) = -1;
    uint64_t result = (HALS_Device *)HALS_Device::_SetHogModeOwner(result, *(unsigned int *)(*(void *)(a1[4] + 8) + 24));
  }
  else
  {
    if (v5 != -1 && a1[8])
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        int v7 = 136315394;
        CFMutableDictionaryRef v8 = "HALS_Device.cpp";
        __int16 v9 = 1024;
        int v10 = 4213;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_SetPropertyData: kAudioDevicePropertyHogMode: hog mode is owned by another process", (uint8_t *)&v7, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560492391;
    }
    uint64_t result = (HALS_Device *)HALS_Device::_SetHogModeOwner(result, v4);
  }
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = (_BYTE)result;
  return result;
}

void sub_1BAF58B38(_Unwind_Exception *a1, int a2)
{
  if (a2)
  {
    uint64_t v4 = __cxa_begin_catch(a1);
    if (a2 == 2) {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 48) + 8) + 24) = v4[2];
    }
    else {
      *(_DWORD *)(*(void *)(*(void *)(v2 + 48) + 8) + 24) = 2003329396;
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAF58A58);
  }
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetTotalNumberChannelsForClient(HALS_Device *this, char a2, HALS_Client *a3)
{
  uint64_t v8 = 0;
  __int16 v9 = &v8;
  uint64_t v10 = 0x2000000000;
  int v11 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZNK11HALS_Device31GetTotalNumberChannelsForClientEbP11HALS_Client_block_invoke;
  v6[3] = &unk_1E6235AE0;
  void v6[4] = &v8;
  void v6[5] = this;
  char v7 = a2;
  void v6[6] = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1BAF58C54(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_215(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 736))(v2);
  (*(void (**)(uint64_t, void, void))(*(void *)v2 + 720))(v2, *(void *)(a1 + 48), **(void **)(a1 + 56));
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 736))(v2);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3 != result;
  return result;
}

void sub_1BAF58D48(void *a1)
{
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_217(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(float (**)(void, void, void))(**(void **)(a1 + 40) + 752))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

void sub_1BAF58DB8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, float))(**(void **)(a1 + 40) + 760))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(float *)(a1 + 52));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF58E40(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Device::ProcessMuteStateChanged(HALS_Device *this, HALS_Client *a2, uint64_t a3)
{
  void v29[4] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    v15[0] = 0;
    v15[1] = 0;
    HALS_System::GetInstance(&v16, 0, v15);
    if (!v16)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__CFString buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 2003;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::ProcessMuteStateChanged: there is no system", buf, 0x12u);
      }
      exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
      *(void *)exceptiouint64_t n = off_1F148A5D8;
      exception[2] = 560492391;
    }
    *(void *)__CFString buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x4002000000;
    float v27 = __Block_byref_object_copy__49_6834;
    float v28 = __Block_byref_object_dispose__50_6835;
    memset(v29, 0, 24);
    uint64_t v19 = 0;
    __int16 v20 = &v19;
    uint64_t v21 = 0x4002000000;
    uint64_t v22 = __Block_byref_object_copy__47;
    pid_t v23 = __Block_byref_object_dispose__48;
    memset(v24, 0, sizeof(v24));
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    uint64_t v18[2] = ___ZN11HALS_System23ProcessMuteStateChangedEPK11HALS_DeviceP11HALS_Clientb_block_invoke;
    v18[3] = &unk_1E6232C38;
    v18[5] = &v19;
    v18[6] = v16;
    v18[4] = buf;
    uint64_t v6 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 56))(v16);
    HALB_CommandGate::ExecuteCommand(v6, (uint64_t)v18);
    char v7 = v20[5];
    uint64_t v8 = v20[6];
    while (v7 != v8)
    {
      int v9 = *((_DWORD *)this + 4);
      if (v9 == (*(unsigned int (**)(void))(**((void **)*v7 + 12) + 728))(*((void *)*v7 + 12)))
      {
        int v10 = **((_DWORD **)*v7 + 8);
        if (v10 == *((_DWORD *)a2 + 4) || v10 == 0) {
          (*(void (**)(void, uint64_t))(**((void **)*v7 + 12) + 96))(*((void *)*v7 + 12), a3);
        }
      }
      ++v7;
    }
    _Block_object_dispose(&v19, 8);
    float v25 = (void **)v24;
    std::vector<HALS_Releaser<HALS_IOContext>>::__destroy_vector::operator()[abi:ne180100](&v25);
    _Block_object_dispose(buf, 8);
    uint64_t v19 = (void **)v29;
    std::vector<HALS_Releaser<HALS_Client>>::__destroy_vector::operator()[abi:ne180100](&v19);
    platform_behaviors = HALS_PlatformBehaviors::get_platform_behaviors(v12);
    (*(void (**)(uint64_t *))(*platform_behaviors + 64))(platform_behaviors);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1BAF591B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_220(uint64_t a1)
{
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(float (**)(void, void, void))(**(void **)(a1 + 40) + 752))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));
}

void sub_1BAF59274(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_222(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void, float))(**(void **)(a1 + 40) + 760))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(float *)(a1 + 52));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF592FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_224(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, float, double, double))(*(void *)v2 + 768))(v2, v4, *(float *)(a1 + 56), *(double *)(a1 + 48), *(float *)(a1 + 60));
}

void sub_1BAF59384(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_226(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 776))(v2, v4, *(unsigned __int8 *)(a1 + 48));
}

void sub_1BAF59400(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_228(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 816))(*(void *)(a1 + 40), *(unsigned int *)(a1 + 56), **(void **)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF59484(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t __Block_byref_object_copy__230(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__231(uint64_t a1, HALS_Object *a2)
{
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_232(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 400))(*(void *)(a1 + 40));
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  int v5 = *(HALS_ObjectMap **)(v4 + 40);
  *(void *)(v4 + 40) = v2;

  HALS_ObjectMap::ReleaseObject(v5, v3);
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_2_234(uint64_t a1)
{
  uint64_t result = HALS_Device::_SetDSPDescription(*(HALS_Device **)(a1 + 40), **(const __CFDictionary ***)(a1 + 48), *(_DWORD *)(*(void *)(a1 + 56) + 4));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF5958C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_3(uint64_t a1)
{
  uint64_t result = HALS_Device::_SetDSPDescription(*(HALS_Device **)(a1 + 40), **(const __CFDictionary ***)(a1 + 48), *(_DWORD *)(*(void *)(a1 + 56) + 4));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF595F0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_237(uint64_t a1, const BOOL *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  float v7 = *(float *)(a1 + 60);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v13[0] = 0;
    v13[1] = 0;
    HALS_System::GetInstance(&v14, 0, v13);
    uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v14 + 1392) + 16);
    os_unfair_lock_lock(v8);
    os_unfair_lock_unlock(v8);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    char v9 = 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    int v12 = (HALS_ObjectMap *)v10;
    if (v10) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, float))(*(void *)v10 + 544))(v10, v3 != 0, v5, v6, v7);
    }
    HALS_ObjectMap::ReleaseObject(v12, v11);
    char v9 = (v12 != 0) & v5;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
}

void sub_1BAF59754(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HALS_ObjectMap::ReleaseObject(v22, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_239(uint64_t a1, const BOOL *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  uint64_t v7 = *(unsigned int *)(a1 + 68);
  uint64_t v8 = *(void *)(a1 + 56);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v14[0] = 0;
    v14[1] = 0;
    HALS_System::GetInstance(&v15, 0, v14);
    char v9 = (os_unfair_lock_s *)(*(void *)(v15 + 1392) + 16);
    os_unfair_lock_lock(v9);
    os_unfair_lock_unlock(v9);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    char v10 = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    __int16 v13 = (HALS_ObjectMap *)v11;
    if (v11) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 512))(v11, v3 != 0, v5, v6, v7, v8);
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
    char v10 = (v13 != 0) & v5;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
}

void sub_1BAF598F0(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HALS_ObjectMap::ReleaseObject(v22, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetNumberStreamsExcludingReferenceStreams(HALS_Device *this, char a2)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK11HALS_Device41GetNumberStreamsExcludingReferenceStreamsEb_block_invoke;
  uint64_t v5[3] = &unk_1E6235A40;
  v5[4] = &v7;
  v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAF59A10(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_243(uint64_t a1)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 2)
  {
    int v7 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v17[0]) = 3;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v13, (unsigned int *)v17, 1);
    unsigned int v14 = 2;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, &v14, 1);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v7 != 0), v8, (uint64_t)v13, v12);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v12[1]);
    char v6 = (void *)v13[1];
  }
  else
  {
    int v4 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v5 = *(void *)(a1 + 48);
    if (v3 == 1)
    {
      LODWORD(v17[0]) = 2;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v16, (unsigned int *)v17, 1);
      unsigned int v14 = 3;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v15, &v14, 1);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)v16, v15);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v15[1]);
      char v6 = (void *)v16[1];
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      int v10 = v11;
      v17[0] = 0x200000003;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v9, (unsigned int *)v17, 2);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)&v10, v9);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v9[1]);
      char v6 = (void *)v11[0];
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v6);
}

void sub_1BAF59BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a2)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a20);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF59BB8);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_246(uint64_t a1)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(a1 + 56);
  if (v3 == 2)
  {
    int v7 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v8 = *(void *)(a1 + 48);
    LODWORD(v17[0]) = 5;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v13, (unsigned int *)v17, 1);
    unsigned int v14 = 4;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, &v14, 1);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v7 != 0), v8, (uint64_t)v13, v12);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v12[1]);
    char v6 = (void *)v13[1];
  }
  else
  {
    int v4 = *(unsigned __int8 *)(a1 + 60);
    uint64_t v5 = *(void *)(a1 + 48);
    if (v3 == 1)
    {
      LODWORD(v17[0]) = 4;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v16, (unsigned int *)v17, 1);
      unsigned int v14 = 5;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v15, &v14, 1);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)v16, v15);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v15[1]);
      char v6 = (void *)v16[1];
    }
    else
    {
      v11[0] = 0;
      v11[1] = 0;
      int v10 = v11;
      v17[0] = 0x400000005;
      std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v9, (unsigned int *)v17, 2);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v2, (const BOOL *)(v4 != 0), v5, (uint64_t)&v10, v9);
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v9[1]);
      char v6 = (void *)v11[0];
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v6);
}

void sub_1BAF59E40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a2)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a20);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF59E10);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_249(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 60);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (*(_DWORD *)(a1 + 56) == 1)
  {
    unsigned int v11 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v12, &v11, 1);
    v10[0] = 0;
    v10[1] = 0;
    uint64_t v9 = v10;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)v12, &v9);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v10[0]);
    uint64_t v5 = (void *)v12[1];
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    int v7 = v8;
    unsigned int v11 = 6;
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v6, &v11, 1);
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = HALS_Device::_ConfigureDSPTypesForClient(v4, (const BOOL *)(v2 != 0), v3, (uint64_t)&v7, v6);
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v6[1]);
    uint64_t v5 = (void *)v8[0];
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v5);
}

void sub_1BAF59FDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{
}

uint64_t __Block_byref_object_copy__251(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  return result;
}

void ___ZN11HALS_Device15SetPropertyDataEjRK26AudioObjectPropertyAddressjPKvjS4_P11HALS_Client_block_invoke_253(uint64_t a1)
{
  int v2 = *(uint64_t **)(*(void *)(a1 + 40) + 608);
  if (v2)
  {
    if (*(_DWORD *)(*(void *)(a1 + 48) + 4) != 1768845428
      || (uint64_t v3 = *(void *)(a1 + 56),
          CFStringRef v4 = **(const __CFString ***)(a1 + 64),
          uint64_t v5 = HALS_Device::ClientDSPInfo::find(*v2 + 616, v3, 1),
          (char v6 = v5) == 0))
    {
      __int16 v8 = 0;
      __int16 v9 = 0;
LABEL_49:
      __int16 v11 = v8 | (v9 << 8);
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
      goto LABEL_50;
    }
    if (!v5[4]) {
      operator new();
    }
    int v7 = *(HALS_Device_HostedDSP **)(*v2 + 608);
    if (v7) {
      HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v27, v7, (HALS_Client *)1, v3);
    }
    else {
      float v27 = 0;
    }
    int v12 = (DSP_Host_OffloadDictionary *)v6[4];
    DSP_Host_OffloadDictionary::get_offload_id_list(&v29, (uint64_t)v12);
    DSP_Host_OffloadDictionary::deep_copy_from(v12, v4);
    DSP_Host_OffloadDictionary::get_offload_id_list(&v28, (uint64_t)v12);
    unint64_t v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v29.__end_ - (char *)v29.__begin_) >> 3));
    if (v29.__end_ == v29.__begin_) {
      uint64_t v14 = 0;
    }
    else {
      uint64_t v14 = v13;
    }
    std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_0 &,std::string *,false>((unint64_t)v29.__begin_, (__n128 *)v29.__end_, v14, 1);
    unint64_t v15 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v28.__end_ - (char *)v28.__begin_) >> 3));
    if (v28.__end_ == v28.__begin_) {
      uint64_t v16 = 0;
    }
    else {
      uint64_t v16 = v15;
    }
    std::__introsort<std::_ClassicAlgPolicy,DSP_Host_OffloadDictionary::deep_copy_from_changed(__CFDictionary const*)::$_1 &,std::string *,false>((unint64_t)v28.__begin_, (__n128 *)v28.__end_, v16, 1);
    begiuint64_t n = v29.__begin_;
    std::vector<std::string>::pointer end = v29.__end_;
    std::vector<std::string>::pointer v19 = v28.__begin_;
    if ((char *)v29.__end_ - (char *)v29.__begin_ == (char *)v28.__end_ - (char *)v28.__begin_)
    {
      if (v29.__begin_ == v29.__end_)
      {
        LOWORD(v20) = 1;
      }
      else
      {
        do
        {
          BOOL v20 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((unsigned __int8 *)begin, (unsigned __int8 *)v19);
          if (!v20) {
            break;
          }
          ++begin;
          ++v19;
        }
        while (begin != end);
      }
    }
    else
    {
      LOWORD(v20) = 0;
    }
    __int16 v8 = !v20;
    uint64_t v30 = &v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v28.__begin_ = (std::vector<std::string>::pointer)&v29;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
    if ((v8 & 1) == 0)
    {
      __int16 v9 = 0;
      uint64_t v21 = v27;
      goto LABEL_47;
    }
    uint64_t v22 = *(HALS_Device_HostedDSP **)(*v2 + 608);
    if (v22)
    {
      HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v28, v22, (HALS_Client *)1, v3);
      std::vector<std::string>::pointer v23 = v28.__begin_;
    }
    else
    {
      std::vector<std::string>::pointer v23 = 0;
    }
    uint64_t v21 = v27;
    if (v27)
    {
      if (v23)
      {
        CFDictionaryRef v24 = (const __CFDictionary *)v23->__r_.__value_.__r.__words[2];
        if (!v24
          || !CFDictionaryGetCount(v24)
          || DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)v23)
          || !DSP_Host_OffloadDictionary::has_specific_offloads(v21))
        {
          goto LABEL_41;
        }
        BOOL has_same_ids = DSP_Host_OffloadDictionary::has_same_ids((DSP_Host_OffloadDictionary *)v23, v21);
LABEL_40:
        if (has_same_ids)
        {
LABEL_41:
          __int16 v9 = 0;
LABEL_42:
          std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v23);
          goto LABEL_47;
        }
        goto LABEL_44;
      }
      if (DSP_Host_OffloadDictionary::has_specific_offloads(v27))
      {
LABEL_44:
        HALS_Device::_GetDSPTypesForClient((uint64_t *)&v29, *v2, 1, v3);
        (*(void (**)(uint64_t, uint64_t, uint64_t, std::vector<std::string> *))(*(void *)*v2 + 928))(*v2, 1, v3, &v29);
        std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v29.__end_->__r_.__value_.__r.__words);
        __int16 v9 = 1;
        if (v23) {
          goto LABEL_42;
        }
LABEL_47:
        if (v21) {
          std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100]((uint64_t)v21);
        }
        goto LABEL_49;
      }
    }
    else if (v23)
    {
      CFDictionaryRef v26 = (const __CFDictionary *)v23->__r_.__value_.__r.__words[2];
      if (!v26 || !CFDictionaryGetCount(v26)) {
        goto LABEL_41;
      }
      BOOL has_same_ids = DSP_Host_OffloadDictionary::has_all_id((DSP_Host_OffloadDictionary *)v23);
      goto LABEL_40;
    }
    __int16 v9 = 0;
    goto LABEL_47;
  }
  uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
  __int16 v11 = *(_WORD *)(v10 + 40);
LABEL_50:
  *(_WORD *)(v10 + 40) = v11;
}

void sub_1BAF5A364(void *a1)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v4);
  if (v1) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v1);
  }
  if (v3) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::_ConfigureDSPTypesForClient(uint64_t a1, const BOOL *a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, a2) & 1) == 0
    && (AMCP::Feature_Flags::allow_adm_dsp_spatial(0, v10) & 1) == 0)
  {
    __int16 v11 = std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>((uint64_t **)a4, 4u);
    int v12 = std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>((uint64_t **)a4, 5u);
    if ((uint64_t *)((char *)v12 + (void)v11))
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v12);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
      unint64_t v13 = **(NSObject ***)&buf.mSampleRate;
      if (*(void *)&buf.mFormatID) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf.mFormatID);
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = pthread_self();
        mach_port_t v15 = pthread_mach_thread_np(v14);
        LODWORD(buf.mSampleRate) = 67109634;
        HIDWORD(buf.mSampleRate) = v15;
        LOWORD(buf.mFormatID) = 2080;
        *(void *)((char *)&buf.mFormatID + 2) = "HALS_Device.cpp";
        HIWORD(buf.mBytesPerPacket) = 1024;
        buf.mFramesPerPacket = 5296;
        _os_log_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_INFO, "%6u %32s:%-5d [hal_dsp] Spatial is disabled by feature flag.", (uint8_t *)&buf, 0x18u);
      }
    }
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (!v16 && !a5[2]) {
    return 0;
  }
  memset(&buf, 0, sizeof(buf));
  uint64_t v17 = (HALS_Stream *)(*(uint64_t (**)(uint64_t, const BOOL *, void, void))(*(void *)a1 + 592))(a1, a2, 0, 0);
  if (v17) {
    HALS_Stream::GetCurrentVirtualFormat(v17, &buf);
  }
  uint64_t v18 = HALS_Device::ClientDSPInfo::find(a1 + 616, a3, v16 != 0);
  std::vector<std::string>::pointer v19 = (HALS_Device::PerClientDSPInfo *)v18;
  if (!v18) {
    return 0;
  }
  if (a2) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = 40;
  }
  if (a2) {
    uint64_t v21 = (uint64_t **)v18;
  }
  else {
    uint64_t v21 = (uint64_t **)(v18 + 5);
  }
  CFDictionaryRef v24 = *(uint64_t **)a4;
  std::vector<std::string>::pointer v23 = (uint64_t *)(a4 + 8);
  uint64_t v22 = v24;
  if (v24 == v23)
  {
    char v25 = 0;
  }
  else
  {
    char v25 = 0;
    do
    {
      BOOL v26 = std::__tree<DSP_Host_Types::AudioProcessingType>::__emplace_unique_key_args<DSP_Host_Types::AudioProcessingType,DSP_Host_Types::AudioProcessingType const&>(v21, *((_DWORD *)v22 + 7), *((_DWORD *)v22 + 7)) != 0;
      float v27 = (uint64_t *)v22[1];
      if (v27)
      {
        do
        {
          std::vector<std::string> v28 = v27;
          float v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          std::vector<std::string> v28 = (uint64_t *)v22[2];
          BOOL v39 = *v28 == (void)v22;
          uint64_t v22 = v28;
        }
        while (!v39);
      }
      v25 |= v26;
      uint64_t v22 = v28;
    }
    while (v28 != v23);
  }
  BOOL v31 = (void *)*a5;
  uint64_t v30 = a5 + 1;
  std::vector<std::string> v29 = v31;
  if (v31 != v30)
  {
    do
    {
      BOOL v32 = std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>(v21, *((_DWORD *)v29 + 7)) != 0;
      int v33 = (void *)v29[1];
      if (v33)
      {
        do
        {
          signed int v34 = v33;
          int v33 = (void *)*v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          signed int v34 = (void *)v29[2];
          BOOL v39 = *v34 == (void)v29;
          std::vector<std::string> v29 = v34;
        }
        while (!v39);
      }
      v25 |= v32;
      std::vector<std::string> v29 = v34;
    }
    while (v34 != v30);
  }
  if ((v25 & 1) == 0) {
    return 0;
  }
  int v35 = *(uint64_t ***)((char *)v19 + v20);
  if (v35 == v21 + 1)
  {
LABEL_49:
    uint64_t v42 = 64;
    if (a2) {
      uint64_t v42 = 24;
    }
    if (*(void *)((char *)v19 + v42)) {
      HALS_Device::PerClientDSPInfo::deactivate_stream(v19, (int)a2);
    }
  }
  else
  {
    while (1)
    {
      unsigned int v36 = *((_DWORD *)v35 + 7);
      BOOL v37 = v36 > 8;
      int v38 = (1 << v36) & 0x13C;
      BOOL v39 = v37 || v38 == 0;
      if (!v39) {
        break;
      }
      uint64_t v40 = v35[1];
      if (v40)
      {
        do
        {
          BOOL v41 = (uint64_t **)v40;
          uint64_t v40 = (uint64_t *)*v40;
        }
        while (v40);
      }
      else
      {
        do
        {
          BOOL v41 = (uint64_t **)v35[2];
          BOOL v39 = *v41 == (uint64_t *)v35;
          int v35 = v41;
        }
        while (!v39);
      }
      int v35 = v41;
      if (v41 == v21 + 1) {
        goto LABEL_49;
      }
    }
    if (a2) {
      uint64_t v44 = 24;
    }
    else {
      uint64_t v44 = 64;
    }
    if (!*(void *)((char *)v19 + v44)) {
      operator new();
    }
  }
  (*(void (**)(uint64_t, const BOOL *, uint64_t, uint64_t **))(*(void *)a1 + 928))(a1, a2, a3, v21);
  return 1;
}

void sub_1BAF5AA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  MEMORY[0x1C1859840](v13, 0x10F1C40475F21F9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<DSP_Host_Types::AudioProcessingType>::__erase_unique<DSP_Host_Types::AudioProcessingType>(uint64_t **a1, unsigned int a2)
{
  CFStringRef v4 = (uint64_t *)(a1 + 1);
  uint64_t result = a1[1];
  if (result)
  {
    uint64_t v5 = v4;
    char v6 = result;
    do
    {
      unsigned int v7 = *((_DWORD *)v6 + 7);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        __int16 v9 = (uint64_t **)v6;
      }
      else {
        __int16 v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        uint64_t v5 = v6;
      }
      char v6 = *v9;
    }
    while (*v9);
    if (v5 == v4 || *((_DWORD *)v5 + 7) > a2)
    {
      return 0;
    }
    else
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          __int16 v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        int v12 = v5;
        do
        {
          __int16 v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          int v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(result, v5);
      operator delete(v5);
      return (uint64_t *)1;
    }
  }
  return result;
}

uint64_t *HALS_Device::ClientDSPInfo::find(uint64_t a1, uint64_t a2, int a3)
{
  if (a2)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 16);
  }
  else
  {
    if (!*(unsigned char *)a1) {
      return 0;
    }
    unsigned int v6 = 0;
  }
  unsigned int v7 = (void **)(a1 + 8);
  BOOL v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(a1 + 8), v6);
  if (v8) {
    return v8 + 3;
  }
  if (!a3) {
    return 0;
  }
  long long v43 = 0u;
  *(_OWORD *)uint64_t v42 = 0u;
  v41[1] = 0uLL;
  v41[0] = (unint64_t)v41 + 8;
  unsigned int v44 = v6;
  long long v46 = 0u;
  uint64_t v45 = &v46;
  long long v47 = 0u;
  long long v49 = 0u;
  uint64_t v48 = &v49;
  uint64_t v50 = 0;
  LOBYTE(__p) = 0;
  char v53 = 0;
  unint64_t v10 = v6;
  unint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v6;
      if (v11 <= v6) {
        unint64_t v3 = v6 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v6;
    }
    BOOL v13 = (uint64_t **)*((void *)*v7 + v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v6)
        {
          if (*((_DWORD *)i + 4) == v6)
          {
            __int16 v9 = i + 3;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x80uLL);
  uint64_t v17 = (uint64_t **)(a1 + 24);
  v54[0] = v16;
  v54[1] = a1 + 24;
  v16[4] = v6;
  *((_OWORD *)v16 + 2) = 0u;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v6;
  *((void *)v16 + 3) = v16 + 8;
  *((void *)&v47 + 1) = 0;
  *((_OWORD *)v16 + 3) = 0u;
  *((_OWORD *)v16 + 5) = 0u;
  *((void *)v16 + 9) = 0;
  *((void *)v16 + 8) = v16 + 18;
  *((unsigned char *)v16 + 96) = 0;
  *((unsigned char *)v16 + 120) = 0;
  char v55 = 1;
  float v18 = (float)(unint64_t)(*(void *)(a1 + 32) + 1);
  float v19 = *(float *)(a1 + 40);
  if (v11 && (float)(v19 * (float)v11) >= v18)
  {
    unint64_t v10 = v3;
    goto LABEL_72;
  }
  BOOL v20 = 1;
  if (v11 >= 3) {
    BOOL v20 = (v11 & (v11 - 1)) != 0;
  }
  unint64_t v21 = v20 | (2 * v11);
  unint64_t v22 = vcvtps_u32_f32(v18 / v19);
  if (v21 <= v22) {
    int8x8_t prime = (int8x8_t)v22;
  }
  else {
    int8x8_t prime = (int8x8_t)v21;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v11 = *(void *)(a1 + 16);
  }
  if (*(void *)&prime <= v11)
  {
    if (*(void *)&prime >= v11) {
      goto LABEL_68;
    }
    unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 32) / *(float *)(a1 + 40));
    if (v11 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v11), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
    {
      unint64_t v30 = std::__next_prime(v30);
    }
    else
    {
      uint64_t v32 = 1 << -(char)__clz(v30 - 1);
      if (v30 >= 2) {
        unint64_t v30 = v32;
      }
    }
    if (*(void *)&prime <= v30) {
      int8x8_t prime = (int8x8_t)v30;
    }
    if (*(void *)&prime >= v11)
    {
      unint64_t v11 = *(void *)(a1 + 16);
      goto LABEL_68;
    }
    if (!*(void *)&prime)
    {
      uint64_t v40 = *v7;
      *unsigned int v7 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v11 = 0;
      *(void *)(a1 + 16) = 0;
      goto LABEL_68;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  CFDictionaryRef v24 = operator new(8 * *(void *)&prime);
  char v25 = *v7;
  *unsigned int v7 = v24;
  if (v25) {
    operator delete(v25);
  }
  uint64_t v26 = 0;
  *(int8x8_t *)(a1 + 16) = prime;
  do
    *((void *)*v7 + v26++) = 0;
  while (*(void *)&prime != v26);
  float v27 = *v17;
  if (*v17)
  {
    unint64_t v28 = v27[1];
    uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
    v29.i16[0] = vaddlv_u8(v29);
    if (v29.u32[0] > 1uLL)
    {
      if (v28 >= *(void *)&prime) {
        v28 %= *(void *)&prime;
      }
    }
    else
    {
      v28 &= *(void *)&prime - 1;
    }
    *((void *)*v7 + v28) = v17;
    int v33 = (uint64_t *)*v27;
    if (*v27)
    {
      do
      {
        unint64_t v34 = v33[1];
        if (v29.u32[0] > 1uLL)
        {
          if (v34 >= *(void *)&prime) {
            v34 %= *(void *)&prime;
          }
        }
        else
        {
          v34 &= *(void *)&prime - 1;
        }
        if (v34 != v28)
        {
          if (!*((void *)*v7 + v34))
          {
            *((void *)*v7 + v34) = v27;
            goto LABEL_64;
          }
          *float v27 = *v33;
          *int v33 = **((void **)*v7 + v34);
          **((void **)*v7 + v34) = v33;
          int v33 = v27;
        }
        unint64_t v34 = v28;
LABEL_64:
        float v27 = v33;
        int v33 = (uint64_t *)*v33;
        unint64_t v28 = v34;
      }
      while (v33);
    }
  }
  unint64_t v11 = (unint64_t)prime;
LABEL_68:
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v11 <= v10) {
      v10 %= v11;
    }
  }
  else
  {
    unint64_t v10 = (v11 - 1) & v10;
  }
LABEL_72:
  int v35 = (uint64_t **)*((void *)*v7 + v10);
  unsigned int v36 = (uint64_t *)v54[0];
  if (v35)
  {
    *(void *)v54[0] = *v35;
  }
  else
  {
    *(void *)v54[0] = *v17;
    *uint64_t v17 = v36;
    *((void *)*v7 + v10) = v17;
    if (!*v36) {
      goto LABEL_81;
    }
    unint64_t v37 = *(void *)(*v36 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v37 >= v11) {
        v37 %= v11;
      }
    }
    else
    {
      v37 &= v11 - 1;
    }
    int v35 = (uint64_t **)((char *)*v7 + 8 * v37);
  }
  HALS_NotificationManager *v35 = v36;
LABEL_81:
  v54[0] = 0;
  ++*(void *)(a1 + 32);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v54);
  __int16 v9 = v36 + 3;
  if (v53 && __p)
  {
    BOOL v52 = __p;
    operator delete(__p);
  }
LABEL_84:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v49);
  uint64_t v38 = *((void *)&v47 + 1);
  *((void *)&v47 + 1) = 0;
  if (v38) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v38);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v46);
  if (BYTE8(v43) && v42[0])
  {
    v42[1] = v42[0];
    operator delete(v42[0]);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)&v41[0] + 1));
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(0);
  return v9;
}

void sub_1BAF5B0B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,HALS_Device::PerClientDSPInfo>,void *>>>>::reset[abi:ne180100](v22 - 88);
  std::pair<unsigned int,HALS_Device::PerClientDSPInfo>::~pair((uint64_t)&a22);
  HALS_Device::PerClientDSPInfo::~PerClientDSPInfo((HALS_Device::PerClientDSPInfo *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::pair<unsigned int,HALS_Device::PerClientDSPInfo>::~pair(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    int v2 = *(void **)(a1 + 80);
    if (v2)
    {
      *(void *)(a1 + 88) = v2;
      operator delete(v2);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(a1 + 56));
  uint64_t v3 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v3) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(a1 + 16));
  return a1;
}

void HALS_Device::PerClientDSPInfo::~PerClientDSPInfo(HALS_Device::PerClientDSPInfo *this)
{
  if (*((unsigned char *)this + 96))
  {
    int v2 = (void *)*((void *)this + 9);
    if (v2)
    {
      *((void *)this + 10) = v2;
      operator delete(v2);
    }
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 6));
  uint64_t v3 = *((void *)this + 4);
  *((void *)this + 4) = 0;
  if (v3) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v3);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 1));
}

char *___ZN11HALS_Device35SetDSPVirtualChannelLayoutForClientEbP11HALS_ClientPK18AudioChannelLayout_block_invoke(char *result)
{
  uint64_t v1 = (_DWORD *)*((void *)result + 6);
  if (v1) {
    BOOL v2 = result[56] == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    uint64_t result = (char *)HALS_Device::ClientDSPInfo::find(*((void *)result + 4) + 616, *((void *)result + 5), 1);
    uint64_t v3 = result;
    if (result)
    {
      CFStringRef v4 = (void **)(result + 72);
      unsigned int v5 = v1[2];
      if (v5 <= 1) {
        unsigned int v6 = 1;
      }
      else {
        unsigned int v6 = v1[2];
      }
      uint64_t v7 = 20 * v6;
      unint64_t v8 = v7 + 12;
      if (result[96])
      {
        unint64_t v9 = *((void *)result + 9);
        unint64_t v10 = (unsigned char *)*((void *)result + 10);
        size_t v11 = v8 - (void)&v10[-v9];
        if (v8 <= (unint64_t)&v10[-v9])
        {
          if (v8 < (unint64_t)&v10[-v9]) {
            *((void *)result + 10) = v9 + v8;
          }
        }
        else
        {
          uint64_t v12 = *((void *)result + 11);
          if (v12 - (uint64_t)v10 >= v11)
          {
            bzero(*((void **)result + 10), v8 - (void)&v10[-v9]);
            *((void *)v3 + 10) = v8 + v9;
          }
          else
          {
            unint64_t v13 = v12 - v9;
            uint64_t v14 = 2 * v13;
            if (2 * v13 <= v8) {
              uint64_t v14 = v7 + 12;
            }
            if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
              size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              size_t v15 = v14;
            }
            uint64_t v16 = operator new(v15);
            uint64_t v17 = &v16[v15];
            float v18 = &v16[v8];
            bzero(&v10[(void)v16 - v9], v11);
            if (v10 == (unsigned char *)v9)
            {
              uint64_t v16 = &v10[(void)v16 - v9];
            }
            else
            {
              float v19 = &v10[~v9];
              do
              {
                char v20 = *--v10;
                (v19--)[(void)v16] = v20;
              }
              while (v10 != (unsigned char *)v9);
              unint64_t v10 = *v4;
            }
            *((void *)v3 + 9) = v16;
            *((void *)v3 + 10) = v18;
            *((void *)v3 + 11) = v17;
            if (v10) {
              operator delete(v10);
            }
          }
          unint64_t v9 = (unint64_t)*v4;
          unsigned int v5 = v1[2];
        }
        return (char *)memcpy((void *)v9, v1, 20 * v5 + 12);
      }
      else
      {
        std::vector<char>::vector((std::vector<char> *)result + 3, v7 + 12);
        uint64_t result = (char *)memcpy(*((void **)v3 + 9), v1, 20 * v1[2] + 12);
        v3[96] = 1;
      }
    }
  }
  return result;
}

void sub_1BAF5B36C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device41GetNumberStreamsExcludingReferenceStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 576))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF5B3FC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::_SetDSPDescription(HALS_Device *this, const __CFDictionary *a2, AudioObjectPropertyScope a3)
{
  _DWORD v24[2] = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  __int16 v13 = 257;
  CACFDictionary::operator=((uint64_t)&Mutable, a2);
  uint64_t v6 = HALS_Device::_SetDSPSettingsFromDescription(this, &Mutable, a3);
  uint64_t v7 = (const __CFDictionary **)((char *)this + 456);
  if (v6)
  {
    CACFDictionary::operator=((uint64_t)this + 456, (uint64_t)&Mutable);
    *((_DWORD *)this + 118) = a3;
  }
  else
  {
    CFDictionaryRef v8 = *v7;
    if (*v7)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        __int16 v15 = 1024;
        int v16 = 1053;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  Could not set given DSP description, falling back to previous description or disabling DSP.", buf, 0x12u);
        CFDictionaryRef v8 = *v7;
      }
      HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)buf, v8);
      unint64_t v9 = (HALS_Stream *)(*(uint64_t (**)(HALS_Device *, void, void))(*(void *)this + 392))(this, 0, v23);
      HALS_Device::SetStreamDSP(this, v9, (const HALS_DSPSettings *)buf);
      HALS_ObjectMap::ReleaseObject(v9, v10);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v24);
      if (__p)
      {
        uint64_t v22 = __p;
        operator delete(__p);
      }
      if (cf) {
        CFRelease(cf);
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v19);
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v18);
      if (v17 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Mutable);
  return v6;
}

void sub_1BAF5B60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZNK11HALS_Device31GetTotalNumberChannelsForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 600))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF5B6C0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

BOOL HALS_Device::_SetHogModeOwner(HALS_Device *this, uint64_t a2)
{
  int v3 = *((_DWORD *)this + 38);
  if (v3 != a2)
  {
    (*(void (**)(HALS_Device *, uint64_t))(*(void *)this + 504))(this, a2);
    *((_DWORD *)this + 38) = a2;
    (*(void (**)(HALS_Device *, uint64_t))(*(void *)this + 520))(this, a2);
  }
  return v3 != a2;
}

void HALS_Device::GetPropertyData(HALS_Device *this, const BOOL *a2, AudioObjectPropertyAddress *a3, const AudioObjectPropertyAddress *a4, unsigned int *a5, _DWORD *a6, void *a7, int *a8, HALS_Client *a9)
{
  uint64_t v276 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  AudioObjectPropertyScope mScope = a3->mScope;
  if ((int)a3->mSelector <= 1818454125)
  {
    if (mSelector <= 1684498543)
    {
      if (mSelector <= 1668049763)
      {
        if (mSelector > 1634758773)
        {
          switch(mSelector)
          {
            case 1634758774:
              if (a4 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3819;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessVolumeScalar", buf, 0x12u);
                }
                exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
                *(void *)exceptiouint64_t n = off_1F148A5D8;
                exception[2] = 561211770;
              }
              v252[0] = MEMORY[0x1E4F143A8];
              v252[1] = 0x40000000;
              v252[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_166;
              v252[3] = &__block_descriptor_tmp_167;
              v252[4] = this;
              v252[5] = a6;
              v252[6] = a9;
              void v252[7] = a3;
              uint64_t v91 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v91, (uint64_t)v252);
              goto LABEL_268;
            case 1667330160:
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3417;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyConfigurationApplication", buf, 0x12u);
                }
                __int16 v193 = __cxa_allocate_exception(0x10uLL);
                *(void *)__int16 v193 = off_1F148A5D8;
                v193[2] = 561211770;
              }
              *(void *)a6 = CFRetain(@"com.apple.audio.AudioMIDISetup");
              break;
            case 1667523955:
              if (a4 <= 7)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3801;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClientDescription", buf, 0x12u);
                }
                mach_port_t v185 = __cxa_allocate_exception(0x10uLL);
                *(void *)mach_port_t v185 = off_1F148A5D8;
                v185[2] = 561211770;
              }
              v253[0] = MEMORY[0x1E4F143A8];
              v253[1] = 0x40000000;
              v253[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_164;
              v253[3] = &__block_descriptor_tmp_165;
              v253[4] = this;
              v253[5] = a6;
              v253[6] = a9;
              BOOL v41 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v41, (uint64_t)v253);
              break;
            default:
              goto LABEL_271;
          }
        }
        else
        {
          if (mSelector == 1634429294)
          {
            if (a4 <= 3)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3464;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyRelatedDevices", buf, 0x12u);
              }
              char v195 = __cxa_allocate_exception(0x10uLL);
              *(void *)char v195 = off_1F148A5D8;
              v195[2] = 561211770;
            }
            int v87 = *((_DWORD *)this + 4);
            goto LABEL_267;
          }
          if (mSelector != 1634755428)
          {
            if (mSelector == 1634758765)
            {
              if (a4 <= 3)
              {
                if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                  *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 3828;
                  _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessMute", buf, 0x12u);
                }
                mach_port_t v182 = __cxa_allocate_exception(0x10uLL);
                *(void *)mach_port_t v182 = off_1F148A5D8;
                v182[2] = 561211770;
              }
              *(void *)long long v268 = 0;
              *(void *)&v268[8] = v268;
              *(void *)&v268[16] = 0x2000000000;
              LODWORD(v269) = 1065353216;
              v251[0] = MEMORY[0x1E4F143A8];
              v251[1] = 0x40000000;
              v251[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_168;
              v251[3] = &unk_1E6235F08;
              v251[5] = this;
              v251[4] = v268;
              v251[6] = a9;
              v251[7] = a3;
              char v25 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
              HALB_CommandGate::ExecuteCommand(v25, (uint64_t)v251);
              float v26 = *(float *)(*(void *)&v268[8] + 24);
              *a6 = v26 == 0.0;
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136316162;
                int v27 = *((_DWORD *)this + 4);
                if (a3->mScope == 1768845428) {
                  unint64_t v28 = "input";
                }
                else {
                  unint64_t v28 = "output";
                }
                uint8x8_t v29 = "on";
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_DWORD *)&buf[14] = 3832;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_WORD *)&unsigned char buf[18] = 1024;
                if (v26 != 0.0) {
                  uint8x8_t v29 = "off";
                }
                *(_DWORD *)&buf[20] = v27;
                *(_WORD *)int v273 = 2080;
                *(void *)&v273[2] = v28;
                *(_WORD *)&v273[10] = 2080;
                *(void *)&v273[12] = v29;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_GetPropertyData: Object ID: %d getting process %s mute: %s", buf, 0x2Cu);
              }
              *a5 = 4;
              unint64_t v30 = (void **)v268;
              goto LABEL_259;
            }
            goto LABEL_271;
          }
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3872;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClockDevice", buf, 0x12u);
            }
            uint64_t v192 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v192 = off_1F148A5D8;
            v192[2] = 561211770;
          }
          v249[0] = MEMORY[0x1E4F143A8];
          v249[1] = 0x40000000;
          v249[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_176;
          v249[3] = &__block_descriptor_tmp_177;
          v249[4] = this;
          v249[5] = a9;
          v249[6] = a6;
          uint64_t v64 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v64, (uint64_t)v249);
        }
LABEL_264:
        unsigned int v42 = 8;
LABEL_269:
        *a5 = v42;
        return;
      }
      if (mSelector > 1684301170)
      {
        if (mSelector != 1684301171)
        {
          if (mSelector != 1684434036)
          {
            if (mSelector != 1684498541) {
              goto LABEL_271;
            }
            if (!a8)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3935;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
              }
              char v187 = __cxa_allocate_exception(0x10uLL);
              *(void *)char v187 = off_1F148A5D8;
              v187[2] = 1852797029;
            }
            if (a7 != 4)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3937;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
              }
              std::logic_error v208 = __cxa_allocate_exception(0x10uLL);
              *(void *)std::logic_error v208 = off_1F148A5D8;
              v208[2] = 1852797029;
            }
            if (mScope != 1768845428 && mScope != 1869968496)
            {
              if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
                *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&buf[14] = 3939;
                _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
              }
              int v213 = __cxa_allocate_exception(0x10uLL);
              *(void *)int v213 = off_1F148A5D8;
              v213[2] = 1852797029;
            }
            int v43 = *a8;
            v240[0] = MEMORY[0x1E4F143A8];
            v240[1] = 0x40000000;
            v240[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_182;
            v240[3] = &__block_descriptor_tmp_183;
            BOOL v242 = mScope == 1768845428;
            v240[4] = this;
            v240[5] = a3;
            int v241 = v43;
            v240[6] = a6;
            void v240[7] = a5;
            unsigned int v44 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
            HALB_CommandGate::ExecuteCommand(v44, (uint64_t)v240);
            return;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3510;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultDevice", buf, 0x12u);
            }
            uint64_t v77 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v77 = off_1F148A5D8;
            v77[2] = 561211770;
          }
          goto LABEL_266;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3792;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceDescription", buf, 0x12u);
          }
          unint64_t v93 = __cxa_allocate_exception(0x10uLL);
          *(void *)unint64_t v93 = off_1F148A5D8;
          v93[2] = 561211770;
        }
LABEL_263:
        *(void *)a6 = 0;
        goto LABEL_264;
      }
      if (mSelector == 1668049764)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3473;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyClockDomain", buf, 0x12u);
          }
          uint64_t v90 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v90 = off_1F148A5D8;
          v90[2] = 561211770;
        }
        goto LABEL_220;
      }
      if (mSelector == 1668575852)
      {
        *(void *)AudioStreamBasicDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        *(_DWORD *)int v273 = 0;
        v262[0] = MEMORY[0x1E4F143A8];
        v262[1] = 0x40000000;
        v262[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_144;
        v262[3] = &unk_1E6235E30;
        int v263 = (int)a4;
        v262[6] = a6;
        v262[5] = this;
        v262[4] = buf;
        uint64_t v73 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v73, (uint64_t)v262);
        goto LABEL_222;
      }
      if (mSelector != 1684236338) {
        goto LABEL_271;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3645;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelsForStereo", buf, 0x12u);
        }
        uint64_t v184 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v184 = off_1F148A5D8;
        v184[2] = 561211770;
      }
      v255[1] = 0;
      v255[0] = 0;
      HALS_System::GetInstance(v268, 0, v255);
      *(void *)AudioStreamBasicDescription buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)v268 + 1408), *((const __CFString **)this + 14));
      *(_WORD *)&uint8_t buf[8] = 1;
      if (*(void *)&v268[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v268[8]);
      }
      char v35 = a3->mScope == 1768845428;
      *(void *)long long v268 = 0x200000001;
      unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient(this, v35, a9);
      AudioObjectPropertyScope v37 = a3->mScope;
      if (v37 == 1869968496)
      {
        CACFDictionary::GetUInt32(*(uint64_t *)buf, @"output.stereo.left", (unsigned int *)v268);
        CFStringRef v38 = @"output.stereo.right";
      }
      else
      {
        if (v37 != 1768845428)
        {
          unsigned int v116 = 1;
          unsigned int v115 = 2;
          goto LABEL_281;
        }
        CACFDictionary::GetUInt32(*(uint64_t *)buf, @"input.stereo.left", (unsigned int *)v268);
        CFStringRef v38 = @"input.stereo.right";
      }
      CACFDictionary::GetUInt32(*(uint64_t *)buf, v38, (unsigned int *)&v268[4]);
      unsigned int v116 = *(_DWORD *)v268;
      unsigned int v115 = *(_DWORD *)&v268[4];
LABEL_281:
      if (v116 > TotalNumberChannelsForClient) {
        unsigned int v116 = 1;
      }
      *a6 = v116;
      if (v115 > TotalNumberChannelsForClient)
      {
        if (TotalNumberChannelsForClient < 2) {
          unsigned int v115 = 1;
        }
        else {
          unsigned int v115 = 2;
        }
      }
      a6[1] = v115;
      *a5 = 8;
      goto LABEL_298;
    }
    if (mSelector > 1735354733)
    {
      if (mSelector > 1751413615)
      {
        if (mSelector == 1751413616)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3886;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDSPDescription", buf, 0x12u);
            }
            long long v198 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v198 = off_1F148A5D8;
            void v198[2] = 561211770;
          }
          v248[0] = MEMORY[0x1E4F143A8];
          v248[1] = 0x40000000;
          v248[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_178;
          v248[3] = &__block_descriptor_tmp_179;
          v248[4] = this;
          v248[5] = a6;
          size_t v94 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v94, (uint64_t)v248);
          goto LABEL_264;
        }
        if (mSelector != 1751737454)
        {
          if (mSelector != 1768907636) {
            goto LABEL_271;
          }
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3783;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyIOContextDescription", buf, 0x12u);
            }
            mach_port_t v188 = __cxa_allocate_exception(0x10uLL);
            *(void *)mach_port_t v188 = off_1F148A5D8;
            v188[2] = 561211770;
          }
          *(void *)a6 = HALS_Device::CreateIOContextDescription(this, a9);
          goto LABEL_264;
        }
      }
      else
      {
        if (mSelector == 1735354734 || mSelector == 1735356005)
        {
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3492;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
            }
            long long v181 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v181 = off_1F148A5D8;
            v181[2] = 561211770;
          }
          *a6 = 0;
          goto LABEL_268;
        }
        if (mSelector != 1751412337) {
          goto LABEL_271;
        }
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3774;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyIsHidden", buf, 0x12u);
        }
        __int16 v63 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v63 = off_1F148A5D8;
        v63[2] = 561211770;
      }
      goto LABEL_220;
    }
    if (mSelector > 1685278560)
    {
      if (mSelector != 1685278561)
      {
        if (mSelector == 1685278562)
        {
          if (!a6)
          {
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            long long v124 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
            {
              time_t v125 = pthread_self();
              mach_port_t v126 = pthread_mach_thread_np(v125);
              *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v126;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4116;
              *(_WORD *)int v273 = 2080;
              *(void *)&v273[2] = "outData == nullptr";
              _os_log_error_impl(&dword_1BAA78000, v124, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
            __cxa_allocate_exception(0x40uLL);
            long long v231 = off_1F148A5D8;
            int v232 = 1852797029;
            *(_DWORD *)&v268[8] = 1852797029;
            long long v270 = 0uLL;
            LODWORD(v271) = -1;
            *(void *)long long v268 = &unk_1F1487130;
            *(void *)&v268[16] = &unk_1F1487158;
            uint64_t v269 = 0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
            *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v274) = 4116;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
            long long v229 = v226;
            int v228 = &unk_1F148AA90;
            uint64_t v230 = v227;
            long long v226 = 0uLL;
            uint64_t v227 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          if (a4 != 8)
          {
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            uint64_t v139 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
            {
              mach_port_t v140 = pthread_self();
              mach_port_t v141 = pthread_mach_thread_np(v140);
              *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v141;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4117;
              *(_WORD *)int v273 = 2080;
              *(void *)&v273[2] = "inDataSize != sizeof(CFDictionaryRef)";
              _os_log_error_impl(&dword_1BAA78000, v139, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not CFDictionaryRef for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
            __cxa_allocate_exception(0x40uLL);
            long long v231 = off_1F148A5D8;
            int v232 = 1852797029;
            *(_DWORD *)&v268[8] = 1852797029;
            long long v270 = 0uLL;
            LODWORD(v271) = -1;
            *(void *)long long v268 = &unk_1F1487130;
            *(void *)&v268[16] = &unk_1F1487158;
            uint64_t v269 = 0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
            *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v274) = 4117;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
            long long v229 = v226;
            int v228 = &unk_1F148AA90;
            uint64_t v230 = v227;
            long long v226 = 0uLL;
            uint64_t v227 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          if (!a9 && !*((unsigned char *)this + 616))
          {
            AMCP::Log::Scope_Registry::get(this);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
            int v178 = **(NSObject ***)buf;
            if (*(void *)&buf[8]) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
            }
            if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
            {
              mach_port_t v179 = pthread_self();
              mach_port_t v180 = pthread_mach_thread_np(v179);
              *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
              *(_DWORD *)&uint8_t buf[4] = v180;
              *(_WORD *)&uint8_t buf[8] = 2080;
              *(void *)&buf[10] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = 4118;
              *(_WORD *)int v273 = 2080;
              *(void *)&v273[2] = "inClient == nullptr && !mClientDSPInfo.allows_null_client()";
              _os_log_error_impl(&dword_1BAA78000, v178, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient is null for kAudioDevicePropertyDSPOffloadBypass", buf, 0x22u);
            }
            AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
            __cxa_allocate_exception(0x40uLL);
            long long v231 = off_1F148A5D8;
            int v232 = 1852797029;
            *(_DWORD *)&v268[8] = 1852797029;
            long long v270 = 0uLL;
            LODWORD(v271) = -1;
            *(void *)long long v268 = &unk_1F1487130;
            *(void *)&v268[16] = &unk_1F1487158;
            uint64_t v269 = 0;
            boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
            *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddr"
                                  "ess &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
            *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
            LODWORD(v274) = 4118;
            applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
            long long v229 = v226;
            int v228 = &unk_1F148AA90;
            uint64_t v230 = v227;
            long long v226 = 0uLL;
            uint64_t v227 = 0;
            boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
          }
          *a5 = 0;
          int v228 = 0;
          *(void *)&long long v229 = &v228;
          *((void *)&v229 + 1) = 0x2000000000;
          uint64_t v230 = 0;
          *(void *)AudioStreamBasicDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x4002000000;
          *(void *)int v273 = __Block_byref_object_copy__206;
          *(void *)&v273[8] = __Block_byref_object_dispose__207;
          *(void *)&v273[16] = 0;
          uint64_t v274 = 0;
          uint64_t v275 = 0;
          v219[0] = MEMORY[0x1E4F143A8];
          v219[1] = 0x40000000;
          v219[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_208;
          v219[3] = &unk_1E6236090;
          v219[6] = this;
          v219[7] = a3;
          v219[8] = a9;
          v219[9] = a6;
          v219[10] = a5;
          v219[4] = &v228;
          v219[5] = buf;
          uint64_t v74 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v74, (uint64_t)v219);
          AMCP::Log::Scope_Registry::get(v75);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v268, "com.apple.coreaudio", "AMCP");
          uint64_t v76 = **(NSObject ***)v268;
          if (*(void *)&v268[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v268[8]);
          }
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
          {
            long long v118 = pthread_self();
            mach_port_t v119 = pthread_mach_thread_np(v118);
            if (a9) {
              int v120 = *((_DWORD *)a9 + 4);
            }
            else {
              int v120 = 0;
            }
            int v121 = *((_DWORD *)this + 4);
            uint64_t v122 = *(void *)(v229 + 24);
            uint64_t v123 = (void *)(*(void *)&buf[8] + 40);
            if (*(char *)(*(void *)&buf[8] + 63) < 0) {
              uint64_t v123 = (void *)*v123;
            }
            *(_DWORD *)long long v268 = 67110658;
            *(_DWORD *)&v268[4] = v119;
            *(_WORD *)&v268[8] = 2080;
            *(void *)&v268[10] = "HALS_Device.cpp";
            *(_WORD *)&v268[18] = 1024;
            *(_DWORD *)&v268[20] = 4152;
            LOWORD(v269) = 1024;
            *(_DWORD *)((char *)&v269 + 2) = v120;
            HIWORD(v269) = 1024;
            LODWORD(v270) = v121;
            WORD2(v270) = 2048;
            *(void *)((char *)&v270 + 6) = v122;
            HIWORD(v270) = 2080;
            BOOL v271 = v123;
            _os_log_debug_impl(&dword_1BAA78000, v76, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d [hal_dsp][offloads][bypass] (Client ID: %d) (Device ID: %d) (Storage: %p) get client bypassed offload %s", v268, 0x38u);
          }
          _Block_object_dispose(buf, 8);
          if (SHIBYTE(v275) < 0) {
            operator delete(*(void **)&v273[16]);
          }
          unint64_t v30 = &v228;
          goto LABEL_259;
        }
        if (mSelector == 1685414763)
        {
          if (a4 <= 0xF)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3840;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessDuck", buf, 0x12u);
            }
            long long v186 = __cxa_allocate_exception(0x10uLL);
            *(void *)long long v186 = off_1F148A5D8;
            v186[2] = 561211770;
          }
          *(void *)a6 = 0;
          *((void *)a6 + 1) = 0;
          unsigned int v42 = 16;
          goto LABEL_269;
        }
        goto LABEL_271;
      }
      if (!a6)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v127 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v127, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v128 = pthread_self();
          mach_port_t v129 = pthread_mach_thread_np(v128);
          *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v129;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4158;
          *(_WORD *)int v273 = 2080;
          *(void *)&v273[2] = "outData == nullptr";
          _os_log_error_impl(&dword_1BAA78000, v127, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyDSPOffloadAvailable", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
        __cxa_allocate_exception(0x40uLL);
        long long v231 = off_1F148A5D8;
        int v232 = 1852797029;
        *(_DWORD *)&v268[8] = 1852797029;
        long long v270 = 0uLL;
        LODWORD(v271) = -1;
        *(void *)long long v268 = &unk_1F1487130;
        *(void *)&v268[16] = &unk_1F1487158;
        uint64_t v269 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
        *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v274) = 4158;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
        long long v229 = v226;
        int v228 = &unk_1F148AA90;
        uint64_t v230 = v227;
        long long v226 = 0uLL;
        uint64_t v227 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      if (a4 != 8)
      {
        AMCP::Log::Scope_Registry::get(this);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v142 = **(NSObject ***)buf;
        if (*(void *)&buf[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
        }
        if (os_log_type_enabled(v142, OS_LOG_TYPE_ERROR))
        {
          mach_port_t v143 = pthread_self();
          mach_port_t v144 = pthread_mach_thread_np(v143);
          *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v144;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 4159;
          *(_WORD *)int v273 = 2080;
          *(void *)&v273[2] = "inDataSize != sizeof(CFDictionaryRef)";
          _os_log_error_impl(&dword_1BAA78000, v142, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not CFDictionaryRef for kAudioDevicePropertyDSPOffloadAvailable", buf, 0x22u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
        __cxa_allocate_exception(0x40uLL);
        long long v231 = off_1F148A5D8;
        int v232 = 1852797029;
        *(_DWORD *)&v268[8] = 1852797029;
        long long v270 = 0uLL;
        LODWORD(v271) = -1;
        *(void *)long long v268 = &unk_1F1487130;
        *(void *)&v268[16] = &unk_1F1487158;
        uint64_t v269 = 0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
        *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress "
                              "&, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
        *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
        LODWORD(v274) = 4159;
        applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
        long long v229 = v226;
        int v228 = &unk_1F148AA90;
        uint64_t v230 = v227;
        long long v226 = 0uLL;
        uint64_t v227 = 0;
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
      }
      *a5 = 0;
      v218[0] = MEMORY[0x1E4F143A8];
      v218[1] = 0x40000000;
      v218[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_210;
      v218[3] = &__block_descriptor_tmp_211;
      v218[4] = this;
      v218[5] = a3;
      v218[6] = a6;
      v218[7] = a5;
      AudioObjectPropertyScope v92 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v92, (uint64_t)v218);
      return;
    }
    if (mSelector == 1684498544)
    {
      if (!a8)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3984;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        int64x2_t v196 = __cxa_allocate_exception(0x10uLL);
        *(void *)int64x2_t v196 = off_1F148A5D8;
        v196[2] = 1852797029;
      }
      if (a7 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3986;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        uint64_t v209 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v209 = off_1F148A5D8;
        v209[2] = 1852797029;
      }
      if (mScope != 1768845428 && mScope != 1869968496)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3988;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        char v214 = __cxa_allocate_exception(0x10uLL);
        *(void *)char v214 = off_1F148A5D8;
        v214[2] = 1852797029;
      }
      int v88 = *a8;
      v234[0] = MEMORY[0x1E4F143A8];
      v234[1] = 0x40000000;
      v234[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_186;
      v234[3] = &__block_descriptor_tmp_187_18526;
      BOOL v236 = mScope == 1768845428;
      v234[4] = this;
      v234[5] = a3;
      int v235 = v88;
      v234[6] = a6;
      void v234[7] = a5;
      uint64_t v89 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v89, (uint64_t)v234);
      return;
    }
    if (mSelector != 1684500589)
    {
      if (mSelector != 1684500594) {
        goto LABEL_271;
      }
      if (!a8)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3958;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        long long v183 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v183 = off_1F148A5D8;
        v183[2] = 1852797029;
      }
      if (a7 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3960;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        std::logic_error v207 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::logic_error v207 = off_1F148A5D8;
        v207[2] = 1852797029;
      }
      if (mScope != 1768845428 && mScope != 1869968496)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3962;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        uint64_t v212 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v212 = off_1F148A5D8;
        v212[2] = 1852797029;
      }
      int v31 = *a8;
      *(void *)AudioStreamBasicDescription buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      v273[0] = 0;
      v237[0] = MEMORY[0x1E4F143A8];
      v237[1] = 0x40000000;
      v237[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_184;
      v237[3] = &unk_1E6235FE0;
      v237[5] = this;
      v237[4] = buf;
      BOOL v239 = mScope == 1768845428;
      int v238 = v31;
      v237[6] = a3;
      void v237[7] = a5;
      v237[8] = a6;
      uint64_t v32 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v32, (uint64_t)v237);
      if (!*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v268 = 136315394;
          *(void *)&v268[4] = "HALS_Device.cpp";
          *(_WORD *)&v268[12] = 1024;
          *(_DWORD *)&v268[14] = 3975;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  GetStreamDSPProperty failure", v268, 0x12u);
        }
        int v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v33 = off_1F148A5D8;
        v33[2] = 1852797029;
      }
LABEL_258:
      unint64_t v30 = (void **)buf;
LABEL_259:
      _Block_object_dispose(v30, 8);
      return;
    }
    char v66 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
    if ((v66 & 1) != 0
      || (v247 = 0, uint64_t v246 = 0, HALS_System::GetInstance(&v228, 0, &v246), g_static_start_options == 1))
    {
      unsigned int HasProperty = (unsigned __int16)HALS_Device_HostedDSP::HasProperty(*((HALS_Device ***)this + 76), (uint64_t)a3, (const AudioObjectPropertyAddress *)a9, v65);
      BOOL v68 = HasProperty > 0xFF;
      if (v66)
      {
        if (HasProperty < 0x100)
        {
LABEL_150:
          if (!a8)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3907;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            uint64_t v211 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v211 = off_1F148A5D8;
            v211[2] = 1852797029;
          }
          if (a7 != 4)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3909;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            std::string v215 = __cxa_allocate_exception(0x10uLL);
            *(void *)std::string v215 = off_1F148A5D8;
            v215[2] = 1852797029;
          }
          AudioObjectPropertyScope v69 = a3->mScope;
          if (v69 != 1768845428 && v69 != 1869968496)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3911;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphParameter", buf, 0x12u);
            }
            __int16 v216 = __cxa_allocate_exception(0x10uLL);
            *(void *)__int16 v216 = off_1F148A5D8;
            v216[2] = 1852797029;
          }
          int v70 = *a8;
          *(void *)AudioStreamBasicDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          v273[0] = 0;
          *a5 = 4;
          v243[0] = MEMORY[0x1E4F143A8];
          v243[1] = 0x40000000;
          v243[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_180;
          v243[3] = &unk_1E6235F98;
          v243[5] = this;
          v243[4] = buf;
          BOOL v245 = v69 == 1768845428;
          int v244 = v70;
          v243[6] = a3;
          v243[7] = a6;
          BOOL v71 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v71, (uint64_t)v243);
          if (!*(unsigned char *)(*(void *)&buf[8] + 24))
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long v268 = 136315394;
              *(void *)&v268[4] = "HALS_Device.cpp";
              *(_WORD *)&v268[12] = 1024;
              *(_DWORD *)&v268[14] = 3925;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  GetStreamDSPParameter failure", v268, 0x12u);
            }
            uint64_t v72 = __cxa_allocate_exception(0x10uLL);
            *(void *)uint64_t v72 = off_1F148A5D8;
            v72[2] = 1852797029;
          }
          goto LABEL_258;
        }
LABEL_292:
        char v17 = (HALS_Device_HostedDSP *)*((void *)this + 76);
        uint64_t v19 = a3;
        char v20 = a4;
        unint64_t v21 = a5;
        uint64_t v22 = a6;
        unsigned int v23 = a7;
        uint64_t v24 = (uint64_t)a8;
        uint64_t v18 = a9;
        goto LABEL_293;
      }
    }
    else
    {
      BOOL v68 = 0;
    }
    if ((void)v229) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v229);
    }
    if (v247) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v247);
    }
    if (!v68) {
      goto LABEL_150;
    }
    goto LABEL_292;
  }
  if (mSelector <= 1934647635)
  {
    if (mSelector <= 1853059699)
    {
      if (mSelector <= 1819634019)
      {
        if (mSelector == 1818454126)
        {
          if (a4 <= 7)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3399;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioObjectPropertyElementName", buf, 0x12u);
            }
            mach_port_t v203 = __cxa_allocate_exception(0x10uLL);
            *(void *)mach_port_t v203 = off_1F148A5D8;
            v203[2] = 561211770;
          }
          *(void *)AudioStreamBasicDescription buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&buf[16] = 0x2000000000;
          *(void *)int v273 = 0;
          v264[0] = MEMORY[0x1E4F143A8];
          v264[1] = 0x40000000;
          v264[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_136;
          v264[3] = &unk_1E6235E08;
          v264[5] = this;
          v264[4] = buf;
          v264[6] = a3;
          uint64_t v113 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
          HALB_CommandGate::ExecuteCommand(v113, (uint64_t)v264);
          AudioObjectPropertyScope v114 = *(__CFString **)(*(void *)&buf[8] + 24);
          if (!v114) {
            AudioObjectPropertyScope v114 = &stru_1F148AD50;
          }
          *(void *)a6 = v114;
          int v98 = 8;
          goto LABEL_257;
        }
        if (mSelector != 1818850926)
        {
          if (mSelector != 1819569763) {
            goto LABEL_271;
          }
          if (a4 <= 3)
          {
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
              *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&buf[14] = 3539;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyLatency", buf, 0x12u);
            }
            unint64_t v34 = __cxa_allocate_exception(0x10uLL);
            *(void *)unint64_t v34 = off_1F148A5D8;
            v34[2] = 561211770;
          }
          goto LABEL_220;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3482;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsAlive", buf, 0x12u);
          }
          uint64_t v95 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v95 = off_1F148A5D8;
          v95[2] = 561211770;
        }
LABEL_266:
        int v87 = 1;
LABEL_267:
        *a6 = v87;
        goto LABEL_268;
      }
      if (mSelector != 1819634020)
      {
        if (mSelector != 1852793963)
        {
          if (mSelector != 1853059619) {
            goto LABEL_271;
          }
          goto LABEL_143;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3849;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyProcessDuckOptOut", buf, 0x12u);
          }
          mach_port_t v200 = __cxa_allocate_exception(0x10uLL);
          *(void *)mach_port_t v200 = off_1F148A5D8;
          v200[2] = 561211770;
        }
        *(void *)AudioStreamBasicDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        v273[0] = 0;
        v250[0] = MEMORY[0x1E4F143A8];
        v250[1] = 0x40000000;
        v250[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_174;
        v250[3] = &unk_1E6235F30;
        v250[5] = this;
        v250[4] = buf;
        v250[6] = a9;
        uint64_t v97 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v97, (uint64_t)v250);
        *a6 = 0;
LABEL_218:
        int v98 = 4;
LABEL_257:
        *a5 = v98;
        goto LABEL_258;
      }
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3810;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceDescription", buf, 0x12u);
        }
        uint64_t v205 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v205 = off_1F148A5D8;
        v205[2] = 561211770;
      }
      goto LABEL_263;
    }
    if (mSelector > 1886353265)
    {
      if (mSelector == 1886353266)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3863;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyPowerIsOn", buf, 0x12u);
          }
          std::string v206 = __cxa_allocate_exception(0x10uLL);
          *(void *)std::string v206 = off_1F148A5D8;
          v206[2] = 561211770;
        }
        goto LABEL_266;
      }
      if (mSelector == 1919512167)
      {
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3548;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyZeroTimeStampPeriod", buf, 0x12u);
          }
          long long v201 = __cxa_allocate_exception(0x10uLL);
          *(void *)long long v201 = off_1F148A5D8;
          v201[2] = 561211770;
        }
        goto LABEL_220;
      }
      if (mSelector != 1934647619) {
        goto LABEL_271;
      }
      HALS_Device::GetDSPVirtualChannelLayoutForClient((HALS_Device *)buf, (uint64_t)this, (HALS_Client *)(mScope == 1768845428), (uint64_t)a9);
      if (v273[0])
      {
        unsigned int v56 = *(_DWORD *)&buf[8] - *(_DWORD *)buf;
        if (*(_DWORD *)&buf[8] - *(_DWORD *)buf > a4)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long v268 = 136315394;
            *(void *)&v268[4] = "HALS_Device.cpp";
            *(_WORD *)&v268[12] = 1024;
            *(_DWORD *)&v268[14] = 4064;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertySpatializationVirtualChannelLayout", v268, 0x12u);
          }
          uint64_t v210 = __cxa_allocate_exception(0x10uLL);
          *(void *)uint64_t v210 = off_1F148A5D8;
          v210[2] = 561211770;
        }
        unsigned int NumberChannelDescriptions = CA::ChannelLayout::GetNumberChannelDescriptions(*(CA::ChannelLayout **)buf, *(uint64_t *)&buf[8]);
        *(void *)a6 = 0;
        a6[2] = NumberChannelDescriptions;
        if (NumberChannelDescriptions)
        {
          uint64_t v58 = NumberChannelDescriptions;
          __int16 v59 = a6 + 4;
          do
          {
            *((_DWORD *)v59 - 1) = -1;
            *__int16 v59 = 0;
            v59[1] = 0;
            __int16 v59 = (void *)((char *)v59 + 20);
            --v58;
          }
          while (v58);
        }
        BOOL v60 = *(void **)buf;
        memcpy(a6, *(const void **)buf, v56);
        int v61 = v273[0];
        *a5 = v56;
        if (v61) {
          BOOL v62 = v60 == 0;
        }
        else {
          BOOL v62 = 1;
        }
        if (!v62)
        {
          *(void *)&uint8_t buf[8] = v60;
          operator delete(v60);
        }
        return;
      }
LABEL_143:
      *a5 = 0;
      return;
    }
    if (mSelector == 1853059700)
    {
      if (a4 <= 7)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3758;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyNominalSampleRate", buf, 0x12u);
        }
        long long v204 = __cxa_allocate_exception(0x10uLL);
        *(void *)long long v204 = off_1F148A5D8;
        v204[2] = 561211770;
      }
      *(void *)a6 = 0;
      goto LABEL_264;
    }
    if (mSelector == 1869180523)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3528;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyHogMode", buf, 0x12u);
        }
        int v199 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v199 = off_1F148A5D8;
        v199[2] = 561211770;
      }
      *(void *)AudioStreamBasicDescription buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      *(_DWORD *)int v273 = -1;
      v261[0] = MEMORY[0x1E4F143A8];
      v261[1] = 0x40000000;
      v261[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_146;
      v261[3] = &unk_1E6235E58;
      v261[5] = this;
      v261[4] = buf;
      int v96 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v96, (uint64_t)v261);
      *a6 = *(_DWORD *)(*(void *)&buf[8] + 24);
      goto LABEL_218;
    }
    if (mSelector != 1870098020) {
      goto LABEL_271;
    }
    *(void *)AudioStreamBasicDescription buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(_DWORD *)int v273 = 0;
    v265[0] = MEMORY[0x1E4F143A8];
    v265[1] = 0x40000000;
    v265[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke;
    v265[3] = &unk_1E6235DE0;
    v265[5] = this;
    v265[4] = buf;
    unsigned int v266 = a4 >> 2;
    unsigned int v267 = a7 >> 2;
    v265[6] = a9;
    void v265[7] = a8;
    v265[8] = a6;
    uint64_t v40 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v40, (uint64_t)v265);
LABEL_222:
    int v98 = 4 * *(_DWORD *)(*(void *)&buf[8] + 24);
    goto LABEL_257;
  }
  if (mSelector <= 1937009954)
  {
    if (mSelector <= 1936482680)
    {
      if (mSelector == 1934647636)
      {
        if (mScope == 1768845428)
        {
          AMCP::Log::Scope_Registry::get(this);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v130 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR))
          {
            long long v131 = pthread_self();
            mach_port_t v132 = pthread_mach_thread_np(v131);
            *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v132;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4035;
            *(_WORD *)int v273 = 2080;
            *(void *)&v273[2] = "isInput == true";
            _os_log_error_impl(&dword_1BAA78000, v130, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: only valid for output scope kAudioDevicePropertySpatializationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
          __cxa_allocate_exception(0x40uLL);
          long long v231 = off_1F148A5D8;
          int v232 = 1852797029;
          *(_DWORD *)&v268[8] = 1852797029;
          long long v270 = 0uLL;
          LODWORD(v271) = -1;
          *(void *)long long v268 = &unk_1F1487130;
          *(void *)&v268[16] = &unk_1F1487158;
          uint64_t v269 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
          *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v274) = 4035;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
          long long v229 = v226;
          int v228 = &unk_1F148AA90;
          uint64_t v230 = v227;
          long long v226 = 0uLL;
          uint64_t v227 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (!a6)
        {
          AMCP::Log::Scope_Registry::get(this);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          int v145 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
          {
            mach_port_t v146 = pthread_self();
            mach_port_t v147 = pthread_mach_thread_np(v146);
            *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v147;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4036;
            *(_WORD *)int v273 = 2080;
            *(void *)&v273[2] = "outData == nullptr";
            _os_log_error_impl(&dword_1BAA78000, v145, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertySpatializationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
          __cxa_allocate_exception(0x40uLL);
          long long v231 = off_1F148A5D8;
          int v232 = 1852797029;
          *(_DWORD *)&v268[8] = 1852797029;
          long long v270 = 0uLL;
          LODWORD(v271) = -1;
          *(void *)long long v268 = &unk_1F1487130;
          *(void *)&v268[16] = &unk_1F1487158;
          uint64_t v269 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
          *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v274) = 4036;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
          long long v229 = v226;
          int v228 = &unk_1F148AA90;
          uint64_t v230 = v227;
          long long v226 = 0uLL;
          uint64_t v227 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        if (a4 != 4)
        {
          AMCP::Log::Scope_Registry::get(this);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          mach_port_t v154 = **(NSObject ***)buf;
          if (*(void *)&buf[8]) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
          }
          if (os_log_type_enabled(v154, OS_LOG_TYPE_ERROR))
          {
            mach_port_t v155 = pthread_self();
            mach_port_t v156 = pthread_mach_thread_np(v155);
            *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v156;
            *(_WORD *)&uint8_t buf[8] = 2080;
            *(void *)&buf[10] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 4037;
            *(_WORD *)int v273 = 2080;
            *(void *)&v273[2] = "inDataSize != sizeof(UInt32)";
            _os_log_error_impl(&dword_1BAA78000, v154, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertySpatializationType", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
          __cxa_allocate_exception(0x40uLL);
          long long v231 = off_1F148A5D8;
          int v232 = 1852797029;
          *(_DWORD *)&v268[8] = 1852797029;
          long long v270 = 0uLL;
          LODWORD(v271) = -1;
          *(void *)long long v268 = &unk_1F1487130;
          *(void *)&v268[16] = &unk_1F1487158;
          uint64_t v269 = 0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
          *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddres"
                                "s &, UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
          *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
          LODWORD(v274) = 4037;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
          long long v229 = v226;
          int v228 = &unk_1F148AA90;
          uint64_t v230 = v227;
          long long v226 = 0uLL;
          uint64_t v227 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
        }
        v222[0] = MEMORY[0x1E4F143A8];
        v222[1] = 0x40000000;
        v222[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_200;
        v222[3] = &__block_descriptor_tmp_201;
        BOOL v223 = mScope == 1768845428;
        v222[4] = this;
        v222[5] = a9;
        v222[6] = a6;
        v222[7] = a5;
        uint64_t v100 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
        HALB_CommandGate::ExecuteCommand(v100, (uint64_t)v222);
        return;
      }
      if (mSelector != 1935763060)
      {
        if (mSelector != 1936092276) {
          goto LABEL_271;
        }
        if (a4 <= 3)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3519;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceCanBeDefaultSystemDevice", buf, 0x12u);
          }
          BOOL v39 = __cxa_allocate_exception(0x10uLL);
          *(void *)BOOL v39 = off_1F148A5D8;
          void v39[2] = 561211770;
        }
        goto LABEL_266;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3635;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertySafetyOffset", buf, 0x12u);
        }
        int64_t v79 = __cxa_allocate_exception(0x10uLL);
        *(void *)int64_t v79 = off_1F148A5D8;
        uint64_t v79[2] = 561211770;
      }
LABEL_220:
      *a6 = 0;
LABEL_268:
      unsigned int v42 = 4;
      goto LABEL_269;
    }
    if (mSelector == 1936482681)
    {
      if (mScope == 1768845428) {
        int v101 = 1;
      }
      else {
        int v101 = 2 * (mScope != 1869968496);
      }
      int v102 = (*(uint64_t (**)(HALS_Device *, BOOL, HALS_Client *, HALS_Client *))(*(void *)this + 536))(this, v101 != 0, a9, a9);
      unsigned int v103 = (16 * v102) | 8;
      if (v103 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3606;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyStreamConfiguration", buf, 0x12u);
        }
        uint64_t v202 = __cxa_allocate_exception(0x10uLL);
        *(void *)uint64_t v202 = off_1F148A5D8;
        v202[2] = 561211770;
      }
      *a5 = v103;
      v256[0] = MEMORY[0x1E4F143A8];
      v256[1] = 0x40000000;
      v256[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_150;
      v256[3] = &__block_descriptor_tmp_151_18490;
      v256[4] = this;
      v256[5] = a6;
      int v257 = v102;
      int v258 = v101;
      v256[6] = a9;
      uint64_t v104 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
      HALB_CommandGate::ExecuteCommand(v104, (uint64_t)v256);
      return;
    }
    if (mSelector == 1936876644)
    {
      unsigned int v80 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
      int v81 = caulk::numeric::exceptional_mul<unsigned int>(v80);
      unsigned int v82 = caulk::numeric::exceptional_add<unsigned int>(v81);
      if (v82 > a4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3746;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDefaultChannelLayout", buf, 0x12u);
        }
        mach_port_t v194 = __cxa_allocate_exception(0x10uLL);
        *(void *)mach_port_t v194 = off_1F148A5D8;
        v194[2] = 561211770;
      }
      unsigned int v83 = v82;
      unsigned int v84 = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a9);
      *(void *)a6 = 0;
      a6[2] = v84;
      if (v84)
      {
        uint64_t v85 = v84;
        int v86 = a6 + 4;
        do
        {
          *((_DWORD *)v86 - 1) = -1;
          void *v86 = 0;
          v86[1] = 0;
          int v86 = (void *)((char *)v86 + 20);
          --v85;
        }
        while (v85);
      }
      *a5 = v83;
      return;
    }
    if (mSelector != 1936879204) {
      goto LABEL_271;
    }
    unsigned int v47 = HALS_Device::GetTotalNumberChannelsForClient(this, mScope == 1768845428, a9);
    int v48 = caulk::numeric::exceptional_mul<unsigned int>(v47);
    unsigned int v49 = caulk::numeric::exceptional_add<unsigned int>(v48);
    if (v49 > a4)
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
        *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = 3696;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyPreferredChannelLayout", buf, 0x12u);
      }
      unsigned int v190 = __cxa_allocate_exception(0x10uLL);
      *(void *)unsigned int v190 = off_1F148A5D8;
      v190[2] = 561211770;
    }
    unsigned int v50 = v49;
    unsigned int v51 = HALS_Device::GetTotalNumberChannelsForClient(this, a3->mScope == 1768845428, a9);
    *(void *)a6 = 0;
    a6[2] = v51;
    if (v51)
    {
      uint64_t v52 = v51;
      char v53 = a6 + 4;
      do
      {
        *((_DWORD *)v53 - 1) = -1;
        *char v53 = 0;
        v53[1] = 0;
        char v53 = (void *)((char *)v53 + 20);
        --v52;
      }
      while (v52);
    }
    *a5 = v50;
    int v228 = *(void **)&a3->mSelector;
    LODWORD(v229) = a3->mElement;
    LODWORD(v228) = 1936876644;
    (*(void (**)(HALS_Device *, const BOOL *, void **, const AudioObjectPropertyAddress *))(*(void *)this + 112))(this, a2, &v228, a4);
    v254[1] = 0;
    v254[0] = 0;
    HALS_System::GetInstance(v268, 0, v254);
    *(void *)AudioStreamBasicDescription buf = HALS_SettingsManager::ReadSetting(*(HALS_SettingsManager **)(*(void *)v268 + 1408), *((const __CFString **)this + 14));
    *(_WORD *)&uint8_t buf[8] = 1;
    if (*(void *)&v268[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v268[8]);
    }
    AudioObjectPropertyScope v54 = a3->mScope;
    *(void *)long long v268 = 0;
    *(_WORD *)&v268[8] = 1;
    if (v54 == 1869968496)
    {
      CFStringRef v55 = @"output.surround";
    }
    else
    {
      if (v54 != 1768845428)
      {
LABEL_279:
        CACFDictionary::~CACFDictionary((CACFDictionary *)v268);
LABEL_298:
        CACFDictionary::~CACFDictionary((CACFDictionary *)buf);
        return;
      }
      CFStringRef v55 = @"input.surround";
    }
    CACFDictionary::GetCACFDictionary((const __CFDictionary **)buf, v55, (CACFDictionary *)v268);
    if (*(void *)v268) {
      HALS_Device::ConstructLayoutFromDictionary((HALS_Device *)v268, (const CACFDictionary *)a6, v117);
    }
    goto LABEL_279;
  }
  if (mSelector <= 1983996970)
  {
    if (mSelector != 1937009955)
    {
      if (mSelector != 1953653102)
      {
        if (mSelector != 1969841184) {
          goto LABEL_271;
        }
        if (a4 <= 7)
        {
          if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
            *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = 3426;
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceUID", buf, 0x12u);
          }
          int v189 = __cxa_allocate_exception(0x10uLL);
          *(void *)int v189 = off_1F148A5D8;
          v189[2] = 561211770;
        }
        CFStringRef v45 = (const __CFString *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 208))(this);
        *(void *)AudioStreamBasicDescription buf = v45;
        uint8_t buf[8] = 1;
        if (v45) {
          CFStringRef v45 = (const __CFString *)PropertyListDeepImmutableCopy(v45);
        }
        *(void *)a6 = v45;
        *a5 = 8;
        CACFString::~CACFString((CACFString *)buf);
        return;
      }
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3436;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyTransportType", buf, 0x12u);
        }
        __int16 v78 = __cxa_allocate_exception(0x10uLL);
        *(void *)__int16 v78 = off_1F148A5D8;
        v78[2] = 561211770;
      }
      goto LABEL_220;
    }
    *(void *)AudioStreamBasicDescription buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(_DWORD *)int v273 = 0;
    v259[0] = MEMORY[0x1E4F143A8];
    v259[1] = 0x40000000;
    v259[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_148;
    v259[3] = &unk_1E6235E80;
    int v260 = (int)a4;
    v259[6] = a3;
    v259[7] = a9;
    void v259[8] = a6;
    v259[5] = this;
    v259[4] = buf;
    AudioObjectPropertyScope v99 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v99, (uint64_t)v259);
    goto LABEL_222;
  }
  if (mSelector <= 1986622323)
  {
    if (mSelector != 1983996971)
    {
      if (mSelector == 1983997011)
      {
        char v17 = (HALS_Device_HostedDSP *)*((void *)this + 76);
        uint64_t v18 = a9;
        uint64_t v19 = a3;
        char v20 = a4;
        unint64_t v21 = a5;
        uint64_t v22 = a6;
        unsigned int v23 = a7;
        uint64_t v24 = (uint64_t)a8;
LABEL_293:
        HALS_Device_HostedDSP::GetPropertyData(v17, v19, v20, v21, v22, v23, v24, v18, a9);
        return;
      }
      goto LABEL_271;
    }
    if (mScope != 1768845428)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int v133 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v133, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v134 = pthread_self();
        mach_port_t v135 = pthread_mach_thread_np(v134);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v135;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4079;
        *(_WORD *)int v273 = 2080;
        *(void *)&v273[2] = "isInput == false";
        _os_log_error_impl(&dword_1BAA78000, v133, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: only valid for input scope kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
      __cxa_allocate_exception(0x40uLL);
      long long v231 = off_1F148A5D8;
      int v232 = 1852797029;
      *(_DWORD *)&v268[8] = 1852797029;
      long long v270 = 0uLL;
      LODWORD(v271) = -1;
      *(void *)long long v268 = &unk_1F1487130;
      *(void *)&v268[16] = &unk_1F1487158;
      uint64_t v269 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
      *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v274) = 4079;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
      long long v229 = v226;
      int v228 = &unk_1F148AA90;
      uint64_t v230 = v227;
      long long v226 = 0uLL;
      uint64_t v227 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    if (!a6)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v148 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v149 = pthread_self();
        mach_port_t v150 = pthread_mach_thread_np(v149);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v150;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4080;
        *(_WORD *)int v273 = 2080;
        *(void *)&v273[2] = "outData == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v148, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
      __cxa_allocate_exception(0x40uLL);
      long long v231 = off_1F148A5D8;
      int v232 = 1852797029;
      *(_DWORD *)&v268[8] = 1852797029;
      long long v270 = 0uLL;
      LODWORD(v271) = -1;
      *(void *)long long v268 = &unk_1F1487130;
      *(void *)&v268[16] = &unk_1F1487158;
      uint64_t v269 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
      *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v274) = 4080;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
      long long v229 = v226;
      int v228 = &unk_1F148AA90;
      uint64_t v230 = v227;
      long long v226 = 0uLL;
      uint64_t v227 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    if (a4 != 4)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v157 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v158 = pthread_self();
        mach_port_t v159 = pthread_mach_thread_np(v158);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v159;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4081;
        *(_WORD *)int v273 = 2080;
        *(void *)&v273[2] = "inDataSize != sizeof(UInt32)";
        _os_log_error_impl(&dword_1BAA78000, v157, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
      __cxa_allocate_exception(0x40uLL);
      long long v231 = off_1F148A5D8;
      int v232 = 1852797029;
      *(_DWORD *)&v268[8] = 1852797029;
      long long v270 = 0uLL;
      LODWORD(v271) = -1;
      *(void *)long long v268 = &unk_1F1487130;
      *(void *)&v268[16] = &unk_1F1487158;
      uint64_t v269 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
      *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v274) = 4081;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
      long long v229 = v226;
      int v228 = &unk_1F148AA90;
      uint64_t v230 = v227;
      long long v226 = 0uLL;
      uint64_t v227 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    if (!a9)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      std::string v163 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v164 = pthread_self();
        mach_port_t v165 = pthread_mach_thread_np(v164);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v165;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4082;
        *(_WORD *)int v273 = 2080;
        *(void *)&v273[2] = "inClient == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v163, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient is null for kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
      __cxa_allocate_exception(0x40uLL);
      long long v231 = off_1F148A5D8;
      int v232 = 1852797029;
      *(_DWORD *)&v268[8] = 1852797029;
      long long v270 = 0uLL;
      LODWORD(v271) = -1;
      *(void *)long long v268 = &unk_1F1487130;
      *(void *)&v268[16] = &unk_1F1487158;
      uint64_t v269 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
      *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v274) = 4082;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
      long long v229 = v226;
      int v228 = &unk_1F148AA90;
      uint64_t v230 = v227;
      long long v226 = 0uLL;
      uint64_t v227 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    unsigned __int8 v105 = atomic_load((unsigned __int8 *)a9 + 260);
    if ((v105 & 1) == 0)
    {
      AMCP::Log::Scope_Registry::get(this);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v169 = **(NSObject ***)buf;
      if (*(void *)&buf[8]) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
      }
      if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v170 = pthread_self();
        mach_port_t v171 = pthread_mach_thread_np(v170);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v171;
        *(_WORD *)&uint8_t buf[8] = 2080;
        *(void *)&buf[10] = "HALS_Device.cpp";
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = 4083;
        *(_WORD *)int v273 = 2080;
        *(void *)&v273[2] = "!inClient->SandboxAllowsMicAccess()";
        _os_log_error_impl(&dword_1BAA78000, v169, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient does not have permission to get kAudioDevicePropertyVoiceActivityDetectionEnable", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
      __cxa_allocate_exception(0x40uLL);
      long long v231 = off_1F148A5D8;
      int v232 = 560492391;
      *(_DWORD *)&v268[8] = 560492391;
      long long v270 = 0uLL;
      LODWORD(v271) = -1;
      *(void *)long long v268 = &unk_1F1487130;
      *(void *)&v268[16] = &unk_1F1487158;
      uint64_t v269 = 0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
      *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &,"
                            " UInt32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
      *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
      LODWORD(v274) = 4083;
      applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
      long long v229 = v226;
      int v228 = &unk_1F148AA90;
      uint64_t v230 = v227;
      long long v226 = 0uLL;
      uint64_t v227 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
    }
    *(void *)AudioStreamBasicDescription buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&buf[16] = 0x2000000000;
    *(_DWORD *)int v273 = 0;
    *a5 = 4;
    v220[0] = MEMORY[0x1E4F143A8];
    v220[1] = 0x40000000;
    v220[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_202;
    v220[3] = &unk_1E6236068;
    BOOL v221 = mScope == 1768845428;
    v220[4] = buf;
    v220[5] = this;
    v220[6] = a9;
    v220[7] = a5;
    unint64_t v106 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v106, (uint64_t)v220);
    int v107 = *(_DWORD *)(*(void *)&buf[8] + 24);
    if (!v107)
    {
      uint64_t v108 = (*(uint64_t (**)(void))(***((void ***)this + 76) + 464))(**((void **)this + 76));
      int v107 = (v108 & 0xFF00000000) != 0 && v108 == 1836346212;
      *(_DWORD *)(*(void *)&buf[8] + 24) = v107;
    }
    *a6 = v107;
    goto LABEL_258;
  }
  if (mSelector != 1986622324)
  {
    if (mSelector == 2003136116)
    {
      if (a4 <= 3)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3501;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyData: bad property data size for kAudioDevicePropertyDeviceIsRunning", buf, 0x12u);
        }
        mach_port_t v191 = __cxa_allocate_exception(0x10uLL);
        *(void *)mach_port_t v191 = off_1F148A5D8;
        v191[2] = 561211770;
      }
      *a6 = (*(uint64_t (**)(HALS_Device *, HALS_Client *))(*(void *)this + 496))(this, a9);
      goto LABEL_268;
    }
LABEL_271:
    HALS_Object::GetPropertyData((uint64_t)this, (uint64_t)a2, (int *)a3, a4, (int *)a5, (uint64_t *)a6);
    return;
  }
  NumberStreamsExcludingReferenceStreams = (AMCP::Log::Scope_Registry *)HALS_Device::GetNumberStreamsExcludingReferenceStreams(this, 1);
  if (!NumberStreamsExcludingReferenceStreams)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    BOOL v136 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v136, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v137 = pthread_self();
      mach_port_t v138 = pthread_mach_thread_np(v137);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v138;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4007;
      *(_WORD *)int v273 = 2080;
      *(void *)&v273[2] = "hasNonReferenceInputStream == false";
      _os_log_error_impl(&dword_1BAA78000, v136, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: no non-reference input streams kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    long long v231 = off_1F148A5D8;
    int v232 = 1852797029;
    *(_DWORD *)&v268[8] = 1852797029;
    long long v270 = 0uLL;
    LODWORD(v271) = -1;
    *(void *)long long v268 = &unk_1F1487130;
    *(void *)&v268[16] = &unk_1F1487158;
    uint64_t v269 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
    *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v274) = 4007;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
    long long v229 = v226;
    int v228 = &unk_1F148AA90;
    uint64_t v230 = v227;
    long long v226 = 0uLL;
    uint64_t v227 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  if (mScope != 1768845428)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v151 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v152 = pthread_self();
      mach_port_t v153 = pthread_mach_thread_np(v152);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v153;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4008;
      *(_WORD *)int v273 = 2080;
      *(void *)&v273[2] = "isInput == false";
      _os_log_error_impl(&dword_1BAA78000, v151, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: only valid for input scope kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    long long v231 = off_1F148A5D8;
    int v232 = 1852797029;
    *(_DWORD *)&v268[8] = 1852797029;
    long long v270 = 0uLL;
    LODWORD(v271) = -1;
    *(void *)long long v268 = &unk_1F1487130;
    *(void *)&v268[16] = &unk_1F1487158;
    uint64_t v269 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
    *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v274) = 4008;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
    long long v229 = v226;
    int v228 = &unk_1F148AA90;
    uint64_t v230 = v227;
    long long v226 = 0uLL;
    uint64_t v227 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  if (!a6)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v160 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v160, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v161 = pthread_self();
      mach_port_t v162 = pthread_mach_thread_np(v161);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v162;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4009;
      *(_WORD *)int v273 = 2080;
      *(void *)&v273[2] = "outData == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v160, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: outData is nullptr for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    long long v231 = off_1F148A5D8;
    int v232 = 1852797029;
    *(_DWORD *)&v268[8] = 1852797029;
    long long v270 = 0uLL;
    LODWORD(v271) = -1;
    *(void *)long long v268 = &unk_1F1487130;
    *(void *)&v268[16] = &unk_1F1487158;
    uint64_t v269 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
    *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v274) = 4009;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
    long long v229 = v226;
    int v228 = &unk_1F148AA90;
    uint64_t v230 = v227;
    long long v226 = 0uLL;
    uint64_t v227 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  if (a4 != 4)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v166 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v166, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v167 = pthread_self();
      mach_port_t v168 = pthread_mach_thread_np(v167);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v168;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4010;
      *(_WORD *)int v273 = 2080;
      *(void *)&v273[2] = "inDataSize != sizeof(UInt32)";
      _os_log_error_impl(&dword_1BAA78000, v166, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inDataSize is not UInt32 for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    long long v231 = off_1F148A5D8;
    int v232 = 1852797029;
    *(_DWORD *)&v268[8] = 1852797029;
    long long v270 = 0uLL;
    LODWORD(v271) = -1;
    *(void *)long long v268 = &unk_1F1487130;
    *(void *)&v268[16] = &unk_1F1487158;
    uint64_t v269 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
    *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v274) = 4010;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
    long long v229 = v226;
    int v228 = &unk_1F148AA90;
    uint64_t v230 = v227;
    long long v226 = 0uLL;
    uint64_t v227 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  if (!a9)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    long long v172 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v172, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v173 = pthread_self();
      mach_port_t v174 = pthread_mach_thread_np(v173);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v174;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4011;
      *(_WORD *)int v273 = 2080;
      *(void *)&v273[2] = "inClient == nullptr";
      _os_log_error_impl(&dword_1BAA78000, v172, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient is null for kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    long long v231 = off_1F148A5D8;
    int v232 = 1852797029;
    *(_DWORD *)&v268[8] = 1852797029;
    long long v270 = 0uLL;
    LODWORD(v271) = -1;
    *(void *)long long v268 = &unk_1F1487130;
    *(void *)&v268[16] = &unk_1F1487158;
    uint64_t v269 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
    *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v274) = 4011;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
    long long v229 = v226;
    int v228 = &unk_1F148AA90;
    uint64_t v230 = v227;
    long long v226 = 0uLL;
    uint64_t v227 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  unsigned __int8 v111 = atomic_load((unsigned __int8 *)a9 + 260);
  if ((v111 & 1) == 0)
  {
    AMCP::Log::Scope_Registry::get(NumberStreamsExcludingReferenceStreams);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v175 = **(NSObject ***)buf;
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (os_log_type_enabled(v175, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v176 = pthread_self();
      mach_port_t v177 = pthread_mach_thread_np(v176);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v177;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = "HALS_Device.cpp";
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = 4012;
      *(_WORD *)int v273 = 2080;
      *(void *)&v273[2] = "!inClient->SandboxAllowsMicAccess()";
      _os_log_error_impl(&dword_1BAA78000, v175, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s HALS_Device::GetPropertyData: inClient does not have permission to get kAudioDevicePropertyVocalIsolationType", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v233);
    __cxa_allocate_exception(0x40uLL);
    long long v231 = off_1F148A5D8;
    int v232 = 560492391;
    *(_DWORD *)&v268[8] = 560492391;
    long long v270 = 0uLL;
    LODWORD(v271) = -1;
    *(void *)long long v268 = &unk_1F1487130;
    *(void *)&v268[16] = &unk_1F1487158;
    uint64_t v269 = 0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>::clone_impl((uint64_t)buf, (uint64_t)v268);
    *(void *)&v273[8] = "virtual void HALS_Device::GetPropertyData(AudioObjectID, const AudioObjectPropertyAddress &, U"
                          "Int32, UInt32 &, void *, UInt32, const void *, HALS_Client *) const";
    *(void *)&v273[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Old_HAL/Core/Base/HALS_Device.cpp";
    LODWORD(v274) = 4012;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v226);
    long long v229 = v226;
    int v228 = &unk_1F148AA90;
    uint64_t v230 = v227;
    long long v226 = 0uLL;
    uint64_t v227 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<CAException>>>();
  }
  v224[0] = MEMORY[0x1E4F143A8];
  v224[1] = 0x40000000;
  v224[2] = ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_197;
  v224[3] = &__block_descriptor_tmp_198;
  BOOL v225 = mScope == 1768845428;
  v224[4] = this;
  v224[5] = a9;
  v224[6] = a6;
  v224[7] = a5;
  int v112 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v112, (uint64_t)v224);
}

void sub_1BAF61C20(_Unwind_Exception *a1)
{
  if (STACK[0x308]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x308]);
  }
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 72))
  {
    char v3 = 0;
    char v4 = 1;
    do
    {
      unsigned int v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 384))(v2, v3 & 1);
      unsigned int v6 = v5;
      unsigned int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      unsigned int v8 = *(_DWORD *)(a1 + 72);
      if (v7 < v8 && v5 != 0)
      {
        unsigned int v10 = 1;
        do
        {
          uint64_t v11 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 392))(v2, v3 & 1, v10 - 1);
          int v12 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v2 + 608))(v2, v11, *(void *)(a1 + 48));
          if ((v12 & HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 76), *(void *)(a1 + 56), (const unsigned int *)v11, v13)) == 1)*(_DWORD *)(*(void *)(a1 + 64)+ 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(v11 + 16); {
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v11, v14);
          }
          unsigned int v7 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          unsigned int v8 = *(_DWORD *)(a1 + 72);
        }
        while (v7 < v8 && v10++ < v6);
      }
      char v16 = (v7 < v8) & v4;
      char v3 = 1;
      char v4 = 0;
    }
    while ((v16 & 1) != 0);
  }
  unsigned int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 624))(v2);
  unsigned int v18 = v17;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 72) && v17 != 0)
  {
    unsigned int v20 = 1;
    do
    {
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void))(*(void *)v2 + 664))(v2, v20 - 1);
      if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 76), *(void *)(a1 + 56), (const unsigned int *)v21, v22))*(_DWORD *)(*(void *)(a1 + 64)+ 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *(_DWORD *)(v21 + 16); {
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v21, v23);
      }
    }
    while (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < *(_DWORD *)(a1 + 72) && v20++ < v18);
  }
}

void sub_1BAF620B4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_136(void *a1)
{
  char v3 = (const __CFString **)a1[5];
  uint64_t v2 = a1[6];
  int v5 = *(_DWORD *)(v2 + 4);
  uint64_t v4 = *(unsigned int *)(v2 + 8);
  unsigned int v6 = (const void *)((uint64_t (*)(const __CFString **, void, uint64_t))(*v3)[16].data)(v3, v5, v4);
  v14[0] = 0;
  v14[1] = 0;
  HALS_System::GetInstance(&theDict, 0, v14);
  CFDictionaryRef Setting = (const __CFDictionary *)HALS_SettingsManager::ReadSetting(*((HALS_SettingsManager **)theDict + 176), v3[14]);
  __int16 v18 = 1;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  CFStringRef v7 = 0;
  if (v5 > 1869968495)
  {
    if (v5 == 1869968496)
    {
      CFStringRef v7 = @"output.elementnames";
    }
    else if (v5 == 1886679669)
    {
      CFStringRef v7 = @"through.elementnames";
    }
  }
  else if (v5 == 1735159650)
  {
    CFStringRef v7 = @"global.elementnames";
  }
  else if (v5 == 1768845428)
  {
    CFStringRef v7 = @"input.elementnames";
  }
  CFDictionaryRef theDict = 0;
  LOWORD(v16) = 1;
  CACFDictionary::GetCACFDictionary(&Setting, v7, (CACFDictionary *)&theDict);
  if (theDict)
  {
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"%lu", v4);
    CFStringRef v12 = v8;
    char v13 = 1;
    if (theDict
      && (Value = CFDictionaryGetValue(theDict, v8), (unsigned int v10 = Value) != 0)
      && (CFTypeID v11 = CFGetTypeID(Value), v11 == CFStringGetTypeID()))
    {
      if (v6) {
        CFRelease(v6);
      }
      CFRetain(v10);
    }
    else
    {
      unsigned int v10 = v6;
    }
    CACFString::~CACFString((CACFString *)&v12);
    unsigned int v6 = v10;
  }
  CACFDictionary::~CACFDictionary((CACFDictionary *)&theDict);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&Setting);
  *(void *)(*(void *)(a1[4] + 8) + 24) = v6;
}

void sub_1BAF62300(void *a1)
{
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v2);
  CACFDictionary::~CACFDictionary((CACFDictionary *)&v3);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_144(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned int v3 = *(_DWORD *)(a1 + 56) >> 2;
  unsigned int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 656))(v2);
  if (v4 < v3) {
    unsigned int v3 = v4;
  }
  if (v3)
  {
    uint64_t v5 = 0;
    do
    {
      unsigned int v6 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 664))(v2, v5);
      if (v6) {
        *(_DWORD *)(*(void *)(a1 + 48)
      }
                  + 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v6 + 4);
      HALS_ObjectMap::ReleaseObject(v6, v7);
      uint64_t v5 = (v5 + 1);
    }
    while (v3 != v5);
  }
}

uint64_t ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_146(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 152);
  return result;
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_148(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(_DWORD *)(*(void *)(a1 + 48) + 4);
  if (v3 == 1735159650)
  {
    int v4 = (*(uint64_t (**)(void, uint64_t, void))(*(void *)v2 + 568))(*(void *)(a1 + 40), 1, *(void *)(a1 + 56));
    int v5 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 568))(v2, 0, *(void *)(a1 + 56));
    if ((v5 + v4) >= *(_DWORD *)(a1 + 72) >> 2) {
      unsigned int v6 = *(_DWORD *)(a1 + 72) >> 2;
    }
    else {
      unsigned int v6 = v5 + v4;
    }
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) < v6)
    {
      char v7 = 0;
      char v8 = 1;
      do
      {
        unsigned int v9 = (*(uint64_t (**)(uint64_t, void, void))(*(void *)v2 + 568))(v2, v7 & 1, *(void *)(a1 + 56));
        unsigned int v10 = v9;
        unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
        if (v11 < v6 && v9 != 0)
        {
          unsigned int v13 = 1;
          do
          {
            uint64_t v14 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v2 + 592))(v2, v7 & 1, v13 - 1, *(void *)(a1 + 56));
            if (v14) {
              *(_DWORD *)(*(void *)(a1 + 64)
            }
                        + 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v14 + 4);
            HALS_ObjectMap::ReleaseObject(v14, v15);
            unsigned int v11 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
          }
          while (v11 < v6 && v13++ < v10);
        }
        char v17 = (v11 < v6) & v8;
        char v7 = 1;
        char v8 = 0;
      }
      while ((v17 & 1) != 0);
    }
  }
  else
  {
    unsigned int v18 = *(_DWORD *)(a1 + 72);
    unsigned int v19 = (*(uint64_t (**)(void, BOOL, void))(*(void *)v2 + 568))(*(void *)(a1 + 40), v3 != 1869968496, *(void *)(a1 + 56));
    if (v19 >= v18 >> 2) {
      unsigned int v20 = v18 >> 2;
    }
    else {
      unsigned int v20 = v19;
    }
    if (v20)
    {
      uint64_t v21 = 0;
      do
      {
        uint64_t v22 = (HALS_ObjectMap *)(*(uint64_t (**)(uint64_t, BOOL, uint64_t, void))(*(void *)v2 + 592))(v2, v3 != 1869968496, v21, *(void *)(a1 + 56));
        if (v22) {
          *(_DWORD *)(*(void *)(a1 + 64)
        }
                    + 4 * (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))++) = *((_DWORD *)v22 + 4);
        HALS_ObjectMap::ReleaseObject(v22, v23);
        uint64_t v21 = (v21 + 1);
      }
      while (v20 != v21);
    }
  }
}

void sub_1BAF6273C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  **(_DWORD **)(a1 + 40) = *(_DWORD *)(a1 + 56);
  if (*(_DWORD *)(a1 + 56))
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0;
    do
    {
      int v5 = (HALS_Stream *)(*(uint64_t (**)(uint64_t, BOOL, unint64_t, void))(*(void *)v1 + 592))(v1, *(_DWORD *)(a1 + 60) != 0, v4, *(void *)(a1 + 48));
      char v7 = v5;
      if (v5)
      {
        HALS_Stream::GetCurrentVirtualFormat(v5, &v9);
        uint64_t v8 = *(void *)(a1 + 40) + v3;
        *(_DWORD *)(v8 + 8) = v9.mChannelsPerFrame;
        *(_DWORD *)(v8 + 12) = v9.mBytesPerPacket;
        *(void *)(v8 + 16) = 0;
      }
      HALS_ObjectMap::ReleaseObject(v7, v6);
      ++v4;
      v3 += 16;
    }
    while (v4 < *(unsigned int *)(a1 + 56));
  }
}

void sub_1BAF62868(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAF62850);
}

void HALS_Device::ConstructLayoutFromDictionary(HALS_Device *this, const CACFDictionary *a2, AudioChannelLayout *a3)
{
  CACFDictionary::GetUInt32(*(void *)this, @"channel layout tag", (unsigned int *)a2);
  CACFDictionary::GetUInt32(*(void *)this, @"channel bitmap", (unsigned int *)a2 + 1);
  unsigned int v25 = 0;
  CACFDictionary::GetUInt32(*(void *)this, @"number channels", &v25);
  if (!*(_DWORD *)a2)
  {
    CFArrayRef theArray = 0;
    if (CACFDictionary::GetArray(*(void *)this, @"channel descriptions", &theArray))
    {
      CFArrayRef v22 = theArray;
      __int16 v23 = 0;
      if (theArray)
      {
        unint64_t Count = CFArrayGetCount(theArray);
        if (Count)
        {
          if (*((_DWORD *)a2 + 2))
          {
            unint64_t v6 = 0;
            char v7 = (char *)a2 + 20;
            do
            {
              uint64_t v21 = 0;
              if (CACFArray::GetDictionary(&v22, v6, &v21))
              {
                unsigned int v19 = v21;
                __int16 v20 = 0;
                CACFDictionary::GetUInt32((uint64_t)v21, @"channel label", (unsigned int *)a2 + 5 * v6 + 3);
                CACFDictionary::GetUInt32((uint64_t)v19, @"channel flags", (unsigned int *)a2 + 5 * v6 + 4);
                CFArrayRef v18 = 0;
                if (CACFDictionary::GetArray((uint64_t)v19, @"coordinates", &v18))
                {
                  unsigned int v8 = v18;
                  CFArrayRef v16 = v18;
                  __int16 v17 = 0;
                  if (v18) {
                    unsigned int v8 = CFArrayGetCount(v18);
                  }
                  if (v8 >= 3) {
                    uint64_t v9 = 3;
                  }
                  else {
                    uint64_t v9 = v8;
                  }
                  if (v9)
                  {
                    uint64_t v10 = 0;
                    unsigned int v11 = v7;
                    do
                    {
                      CFTypeRef cf = 0;
                      unsigned int CFType = CACFArray::GetCFType(&v16, v10, &cf);
                      CFNumberRef v13 = (const __CFNumber *)cf;
                      if (cf) {
                        unsigned int v14 = CFType;
                      }
                      else {
                        unsigned int v14 = 0;
                      }
                      if (v14 == 1)
                      {
                        CFTypeID v15 = CFGetTypeID(cf);
                        if (v15 == CFNumberGetTypeID()) {
                          CFNumberGetValue(v13, kCFNumberFloat32Type, v11);
                        }
                      }
                      ++v10;
                      v11 += 4;
                    }
                    while (v9 != v10);
                  }
                  CACFArray::~CACFArray((CACFArray *)&v16);
                }
                CACFDictionary::~CACFDictionary((CACFDictionary *)&v19);
              }
              if (++v6 >= Count) {
                break;
              }
              v7 += 20;
            }
            while (v6 < *((unsigned int *)a2 + 2));
          }
        }
      }
      CACFArray::~CACFArray((CACFArray *)&v22);
    }
  }
}

void sub_1BAF62AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  CACFArray::~CACFArray((CACFArray *)va);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::CreateIOContextDescription(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    IOContextDescriptiouint64_t n = HALS_Device::_CreateIOContextDescription(this, a2);
    void v10[3] = IOContextDescription;
  }
  else
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 0x40000000;
    void v8[2] = ___ZNK11HALS_Device26CreateIOContextDescriptionEP11HALS_Client_block_invoke;
    v8[3] = &unk_1E6235C60;
    v8[4] = &v9;
    unsigned char v8[5] = this;
    v8[6] = a2;
    int v5 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v8);
  }
  uint64_t v6 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1BAF62C04(void *a1)
{
}

void sub_1BAF62C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_164(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 32) + 712))(*(void *)(a1 + 32), *(void *)(a1 + 48));
  **(void **)(a1 + 40) = result;
  return result;
}

void sub_1BAF62C84(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_166(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  **(float **)(a1 + 40) = (*(float (**)(uint64_t, uint64_t, BOOL))(*(void *)v2 + 752))(v2, v4, *(_DWORD *)(*(void *)(a1 + 56) + 4) == 1768845428);
}

void sub_1BAF62D28(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_168(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  *(float *)(*(void *)(a1[4] + 8) + 24) = (*(float (**)(uint64_t, uint64_t, BOOL))(*(void *)v2 + 752))(v2, v4, *(_DWORD *)(a1[7] + 4) == 1768845428);
}

void sub_1BAF62DD0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_174(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[6];
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 784))(v2, v4);
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_176(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    uint64_t v4 = *(unsigned int *)(v3 + 16);
  }
  else {
    uint64_t v4 = 0;
  }
  CFStringRef v5 = (const __CFString *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v2 + 808))(v2, v4);
  CFStringRef v6 = v5;
  char v7 = 1;
  if (v5) {
    CFStringRef v5 = (const __CFString *)PropertyListDeepImmutableCopy(v5);
  }
  **(void **)(a1 + 48) = v5;
  CACFString::~CACFString((CACFString *)&v6);
}

void sub_1BAF62EF0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

CFTypeRef ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_178(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFTypeRef result = *(CFTypeRef *)(v2 + 456);
  if (result)
  {
    CFTypeRef result = CFRetain(result);
    uint64_t v4 = *(void *)(v2 + 456);
  }
  else
  {
    uint64_t v4 = 0;
  }
  **(void **)(a1 + 40) = v4;
  return result;
}

void sub_1BAF62F58(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_180(uint64_t a1, const BOOL *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 56);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v13[0] = 0;
    v13[1] = 0;
    HALS_System::GetInstance(&v14, 0, v13);
    unsigned int v8 = (os_unfair_lock_s *)(*(void *)(v14 + 1392) + 16);
    os_unfair_lock_lock(v8);
    os_unfair_lock_unlock(v8);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    char v9 = 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    uint64_t v12 = (HALS_ObjectMap *)v10;
    if (v10) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t))(*(void *)v10 + 552))(v10, v3 != 0, v5, v6, v7);
    }
    HALS_ObjectMap::ReleaseObject(v12, v11);
    char v9 = (v12 != 0) & v5;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
}

void sub_1BAF630B4(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap::ReleaseObject(v20, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_182(uint64_t a1, const BOOL *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v12[0] = 0;
    v12[1] = 0;
    HALS_System::GetInstance(&v13, 0, v12);
    uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v13 + 1392) + 16);
    os_unfair_lock_lock(v7);
    os_unfair_lock_unlock(v7);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    int v8 = 0;
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    uint64_t v11 = (HALS_ObjectMap *)v9;
    if (v9) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(void *)v9 + 560))(v9, v3 != 0, v5, v6);
    }
    HALS_ObjectMap::ReleaseObject(v11, v10);
    int v8 = (v11 != 0) & v5;
  }
  **(_DWORD **)(a1 + 48) = v8;
  **(_DWORD **)(a1 + 56) = 4;
}

void sub_1BAF63240(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap::ReleaseObject(v20, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_184(uint64_t a1, const BOOL *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 76);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v14[0] = 0;
    v14[1] = 0;
    HALS_System::GetInstance(&v15, 0, v14);
    uint64_t v9 = (os_unfair_lock_s *)(*(void *)(v15 + 1392) + 16);
    os_unfair_lock_lock(v9);
    os_unfair_lock_unlock(v9);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    char v10 = 0;
  }
  else
  {
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    uint64_t v13 = (HALS_ObjectMap *)v11;
    if (v11) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 528))(v11, v3 != 0, v5, v6, v7, v8);
    }
    HALS_ObjectMap::ReleaseObject(v13, v12);
    char v10 = (v13 != 0) & v5;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10;
}

void sub_1BAF633D8(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  HALS_ObjectMap::ReleaseObject(v22, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_186(uint64_t a1, const BOOL *a2)
{
  int v3 = *(unsigned __int8 *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v12[0] = 0;
    v12[1] = 0;
    HALS_System::GetInstance(&v13, 0, v12);
    uint64_t v7 = (os_unfair_lock_s *)(*(void *)(v13 + 1392) + 16);
    os_unfair_lock_lock(v7);
    os_unfair_lock_unlock(v7);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    int v8 = 0;
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    uint64_t v11 = (HALS_ObjectMap *)v9;
    if (v9) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(void *)v9 + 536))(v9, v3 != 0, v5, v6);
    }
    HALS_ObjectMap::ReleaseObject(v11, v10);
    int v8 = (v11 != 0) & v5;
  }
  **(_DWORD **)(a1 + 48) = v8;
  **(_DWORD **)(a1 + 56) = 4;
}

void sub_1BAF63568(void *a1, HALS_Object *a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  HALS_ObjectMap::ReleaseObject(v20, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_197(uint64_t a1)
{
  HALS_Device::_GetDSPTypesForClient(&v18, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 40));
  uint64_t v2 = (void *)v19[0];
  if (!v19[0])
  {
LABEL_22:
    uint64_t v9 = v19;
LABEL_23:
    int v13 = 2 * (v9 != v19);
    goto LABEL_24;
  }
  int v3 = v19;
  uint64_t v4 = v19[0];
  do
  {
    uint64_t v5 = (uint64_t *)v4;
    uint64_t v6 = v3;
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    int v8 = (uint64_t *)(v4 + 8);
    if (v7 >= 2)
    {
      int v8 = v5;
      int v3 = v5;
    }
    uint64_t v4 = *v8;
  }
  while (v4);
  uint64_t v9 = v19;
  uint64_t v10 = v19[0];
  if (v3 == v19 || (v7 >= 2 ? (v11 = v5) : (v11 = v6), v12 = *((_DWORD *)v11 + 7), uint64_t v9 = v19, v10 = v19[0], v12 >= 3))
  {
    do
    {
      uint64_t v14 = (void *)v10;
      uint64_t v15 = v9;
      unsigned int v16 = *(_DWORD *)(v10 + 28);
      if (v16 >= 3) {
        __int16 v17 = (uint64_t *)v10;
      }
      else {
        __int16 v17 = (uint64_t *)(v10 + 8);
      }
      if (v16 >= 3) {
        uint64_t v9 = (void *)v10;
      }
      uint64_t v10 = *v17;
    }
    while (*v17);
    if (v9 != v19)
    {
      if (v16 < 3) {
        uint64_t v14 = v15;
      }
      if (*((_DWORD *)v14 + 7) < 4u) {
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  int v13 = 1;
LABEL_24:
  **(_DWORD **)(a1 + 48) = v13;
  **(_DWORD **)(a1 + 56) = 4;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

void sub_1BAF636C8(void *a1)
{
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_200(uint64_t a1)
{
  HALS_Device::_GetDSPTypesForClient(&v18, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 40));
  uint64_t v2 = (void *)v19[0];
  if (!v19[0])
  {
LABEL_22:
    uint64_t v9 = v19;
LABEL_23:
    int v13 = 2 * (v9 != v19);
    goto LABEL_24;
  }
  int v3 = v19;
  uint64_t v4 = v19[0];
  do
  {
    uint64_t v5 = (uint64_t *)v4;
    uint64_t v6 = v3;
    unsigned int v7 = *(_DWORD *)(v4 + 28);
    int v8 = (uint64_t *)(v4 + 8);
    if (v7 >= 4)
    {
      int v8 = v5;
      int v3 = v5;
    }
    uint64_t v4 = *v8;
  }
  while (v4);
  uint64_t v9 = v19;
  uint64_t v10 = v19[0];
  if (v3 == v19 || (v7 >= 4 ? (v11 = v5) : (v11 = v6), v12 = *((_DWORD *)v11 + 7), uint64_t v9 = v19, v10 = v19[0], v12 >= 5))
  {
    do
    {
      uint64_t v14 = (void *)v10;
      uint64_t v15 = v9;
      unsigned int v16 = *(_DWORD *)(v10 + 28);
      if (v16 >= 5) {
        __int16 v17 = (uint64_t *)v10;
      }
      else {
        __int16 v17 = (uint64_t *)(v10 + 8);
      }
      if (v16 >= 5) {
        uint64_t v9 = (void *)v10;
      }
      uint64_t v10 = *v17;
    }
    while (*v17);
    if (v9 != v19)
    {
      if (v16 < 5) {
        uint64_t v14 = v15;
      }
      if (*((_DWORD *)v14 + 7) < 6u) {
        goto LABEL_23;
      }
    }
    goto LABEL_22;
  }
  int v13 = 1;
LABEL_24:
  **(_DWORD **)(a1 + 48) = v13;
  **(_DWORD **)(a1 + 56) = 4;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

void sub_1BAF637E4(void *a1)
{
}

void HALS_Device::GetDSPVirtualChannelLayoutForClient(HALS_Device *this, uint64_t a2, HALS_Client *a3, uint64_t a4)
{
  if (a3 || !a4)
  {
    *(unsigned char *)this = 0;
    *((unsigned char *)this + 24) = 0;
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t v9 = &v8;
    uint64_t v10 = 0x4802000000;
    uint64_t v11 = __Block_byref_object_copy__299;
    unsigned int v12 = __Block_byref_object_dispose__300;
    LOBYTE(__p) = 0;
    char v15 = 0;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = ___ZNK11HALS_Device35GetDSPVirtualChannelLayoutForClientEbP11HALS_Client_block_invoke;
    uint64_t v6[3] = &unk_1E6236450;
    void v6[4] = &v8;
    void v6[5] = a2;
    char v7 = 0;
    void v6[6] = a4;
    uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 56))(a2);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v6);
    std::__optional_copy_base<CA::ChannelLayout,false>::__optional_copy_base[abi:ne180100]((uint64_t)this, (uint64_t)(v9 + 5));
    _Block_object_dispose(&v8, 8);
    if (v15)
    {
      if (__p)
      {
        uint64_t v14 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_1BAF63924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,char a26)
{
  if (a26)
  {
    if (__p)
    {
      a24 = (uint64_t)__p;
      operator delete(__p);
    }
  }
  _Unwind_Resume(a1);
}

unint64_t CA::ChannelLayout::GetNumberChannelDescriptions(CA::ChannelLayout *this, uint64_t a2)
{
  unint64_t result = *((unsigned int *)this + 2);
  if (result > (a2 - (uint64_t)this - 12) / 0x14uLL) {
    __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
  }
  return result;
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_202(uint64_t a1)
{
  HALS_Device::_GetDSPTypesForClient(&v9, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 64), *(void *)(a1 + 48));
  uint64_t v2 = (void *)v10[0];
  if (v10[0])
  {
    int v3 = v10;
    uint64_t v4 = (uint64_t *)v10[0];
    do
    {
      uint64_t v5 = v4;
      uint64_t v6 = v3;
      unsigned int v7 = *((_DWORD *)v4 + 7);
      if (v7 >= 6) {
        int v3 = v4;
      }
      else {
        ++v4;
      }
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
    if (v3 != v10)
    {
      if (v7 >= 6) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = v6;
      }
      if (*((_DWORD *)v8 + 7) <= 6u) {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }
    }
  }
  **(_DWORD **)(a1 + 56) = 4;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v2);
}

void sub_1BAF63A64(void *a1)
{
}

__n128 __Block_byref_object_copy__206(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__207(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void *___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_208(void *result)
{
  if (*(_DWORD *)(result[7] + 4) == 1768845428)
  {
    uint64_t v1 = result;
    uint64_t v2 = HALS_Device::ClientDSPInfo::find(result[6] + 616, result[8]);
    if (v2)
    {
      int v3 = (DSP_Host_OffloadDictionary *)v2[4];
      if (v3) {
        DSP_Host_OffloadDictionary::create_into(v3, (const __CFDictionary **)v1[9]);
      }
    }
    v4[0] = 0;
    v4[1] = 0;
    CFTypeRef cf = 0;
    DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)v4);
    DSP_Host_OffloadDictionary::create_into((DSP_Host_OffloadDictionary *)v4, (const __CFDictionary **)v1[9]);
  }
  return result;
}

void sub_1BAF63BDC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

void ___ZNK11HALS_Device15GetPropertyDataEjRK26AudioObjectPropertyAddressjRjPvjPKvP11HALS_Client_block_invoke_210(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  memset(v4, 0, sizeof(v4));
  DSP_Host_OffloadDictionary::make_empty((DSP_Host_OffloadDictionary *)v4);
  int v3 = *(HALS_Device_HostedDSP **)(v2 + 608);
  if (v3) {
    HALS_Device_HostedDSP::GetOffloadsAvailableForDevice(v3, *(_DWORD *)(*(void *)(a1 + 40) + 4) == 1768845428, v4);
  }
  DSP_Host_OffloadDictionary::create_into((DSP_Host_OffloadDictionary *)v4, *(const __CFDictionary ***)(a1 + 48));
}

void sub_1BAF63CA0(void *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  DSP_Host_OffloadDictionary::~DSP_Host_OffloadDictionary((DSP_Host_OffloadDictionary *)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAF63C8CLL);
}

__n128 __Block_byref_object_copy__299(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    *(void *)(a1 + 40) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    __n128 result = *(__n128 *)(a2 + 40);
    *(__n128 *)(a1 + 40) = result;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  return result;
}

void __Block_byref_object_dispose__300(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v1 = *(void **)(a1 + 40);
    if (v1)
    {
      *(void *)(a1 + 48) = v1;
      operator delete(v1);
    }
  }
}

void ___ZNK11HALS_Device35GetDSPVirtualChannelLayoutForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_Device::_GetDSPVirtualChannelLayoutForClient((uint64_t *)__p, *(void *)(a1 + 40), (HALS_Client *)*(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  std::__optional_storage_base<CA::ChannelLayout,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<CA::ChannelLayout,false> const&>(*(void *)(*(void *)(a1 + 32) + 8) + 40, (uint64_t)__p);
  if (v3)
  {
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1BAF63D80(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 && __p) {
    operator delete(__p);
  }
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAF63D70);
}

uint64_t HALS_Device::_CreateIOContextDescription(HALS_Device *this, HALS_Client *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  if (AMCP::Feature_Flags::run_hybrid_hal(this, (const BOOL *)a2))
  {
    v27[0] = 0;
    v27[1] = 0;
    HALS_System::GetInstance(&v28, 0, v27);
    uint64_t v4 = *(void *)(v28 + 1392);
    unsigned int v5 = *((_DWORD *)this + 4);
    uint64_t v6 = (char *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 216))(this);
    std::string::basic_string[abi:ne180100]<0>(&v25, v6);
    os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
    mcp_io_object_t object = HALS_IOContext_Manager_Impl::Object_Map::find_mcp_object((HALS_IOContext_Manager_Impl::Object_Map *)(v4 + 40), v5);
    os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 16));
    if ((unint64_t)mcp_object >> 32)
    {
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
      AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&valuePtr, *(std::__shared_mutex_base **)(v4 + 120), mcp_object);
      if (valuePtr.__r_.__value_.__r.__words[0]) {
        AMCP::Core::Core::get_simple_required_property<1969841184u>(&cf, (AMCP::Core::Core *)valuePtr.__r_.__value_.__l.__data_);
      }
      else {
        CFTypeRef cf = 0;
      }
      if (valuePtr.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)valuePtr.__r_.__value_.__l.__size_);
      }
      os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 16));
      if (a2) {
        int v10 = *((_DWORD *)a2 + 58);
      }
      else {
        int v10 = 0;
      }
      std::operator+<char>();
      uint64_t v11 = std::string::append(&v36, "(", 1uLL);
      long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v35, v10);
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v13 = &v35;
      }
      else {
        int v13 = (std::string *)v35.__r_.__value_.__r.__words[0];
      }
      if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v35.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v35.__r_.__value_.__l.__size_;
      }
      char v15 = std::string::append(&v37, (const std::string::value_type *)v13, size);
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v40.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      __int16 v17 = std::string::append(&v40, ":", 1uLL);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v34, v5);
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v19 = &v34;
      }
      else {
        unsigned int v19 = (std::string *)v34.__r_.__value_.__r.__words[0];
      }
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v20 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v20 = v34.__r_.__value_.__l.__size_;
      }
      uint64_t v21 = std::string::append(&v38, (const std::string::value_type *)v19, v20);
      long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      valuePtr.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&valuePtr.__r_.__value_.__l.__data_ = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      __int16 v23 = std::string::append(&valuePtr, ")", 1uLL);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      std::string::size_type v32 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)long long __p = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(valuePtr.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(valuePtr.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v34.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v40.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v35.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      os_unfair_lock_lock((os_unfair_lock_t)(v4 + 16));
      HALS_IOContext_Manager_Impl::get_graph_builder();
    }
    uint64_t v30 = 0;
    if (v26 < 0) {
      operator delete(v25);
    }
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    return v30;
  }
  else
  {
    uint64_t v8 = *(uint64_t (**)(HALS_Device *, HALS_Client *))(*(void *)this + 680);
    return v8(this, a2);
  }
}

void sub_1BAF647A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,CFTypeRef cf,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  CFRelease(v55);
  if (v53) {
    CFRelease(v53);
  }
  if (v52) {
    CFRelease(v52);
  }
  std::default_delete<HALIO::HALIO_Graph_Builder>::operator()[abi:ne180100](v54);
  os_unfair_lock_unlock(v51);
  if (a25 < 0) {
    operator delete(__p);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device26CreateIOContextDescriptionEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_Device::_CreateIOContextDescription(*(HALS_Device **)(a1 + 40), *(HALS_Client **)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF64B44(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetPropertyDataSize(HALS_Device ***this, const BOOL *a2, AudioObjectPropertyAddress *a3, HALS_Client *a4, int *a5, AudioObjectPropertyAddress *a6)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  signed int mSelector = a3->mSelector;
  uint64_t v10 = 8;
  if ((int)a3->mSelector <= 1768907635)
  {
    if (mSelector <= 1684500588)
    {
      if (mSelector <= 1668049763)
      {
        if (mSelector <= 1634758764)
        {
          if (mSelector == 1634429294 || mSelector == 1634496615) {
            return 4;
          }
          int v12 = 1634755428;
        }
        else
        {
          if (mSelector <= 1667330159)
          {
            if (mSelector != 1634758765)
            {
              int v11 = 1634758774;
              goto LABEL_81;
            }
            return 4;
          }
          if (mSelector == 1667330160) {
            return v10;
          }
          int v12 = 1667523955;
        }
LABEL_77:
        if (mSelector != v12) {
          goto LABEL_107;
        }
        return v10;
      }
      if (mSelector > 1684301170)
      {
        if (mSelector > 1684498540)
        {
          if (mSelector == 1684498541) {
            return 4;
          }
          int v11 = 1684498544;
        }
        else
        {
          if (mSelector == 1684301171) {
            return v10;
          }
          int v11 = 1684434036;
        }
        goto LABEL_81;
      }
      if (mSelector == 1668049764) {
        return 4;
      }
      if (mSelector != 1668575852)
      {
        int v12 = 1684236338;
        goto LABEL_77;
      }
      int v26 = ((uint64_t (*)(HALS_Device ***))(*this)[78])(this);
      return (4 * v26);
    }
    if (mSelector > 1735356004)
    {
      if (mSelector > 1751737453)
      {
        if (mSelector == 1751737454) {
          return 4;
        }
        if (mSelector == 1768124270) {
          return v10;
        }
        int v12 = 1768777573;
      }
      else
      {
        if (mSelector == 1735356005 || mSelector == 1751412337) {
          return 4;
        }
        int v12 = 1751413616;
      }
      goto LABEL_77;
    }
    if (mSelector > 1685278560)
    {
      if ((mSelector - 1685278561) < 2) {
        return v10;
      }
      if (mSelector == 1685414763) {
        return 16;
      }
      int v11 = 1735354734;
LABEL_81:
      if (mSelector == v11) {
        return 4;
      }
      goto LABEL_107;
    }
    if (mSelector != 1684500589)
    {
      if (mSelector != 1684500594)
      {
        int v12 = 1685089383;
        goto LABEL_77;
      }
      if (!a5)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3256;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyDataSize: inQualifierData is nullptr for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 1852797029;
      }
      if (a4 != 4)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3258;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyDataSize: incorrect inQualifierDataSize for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        int v31 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v31 = off_1F148A5D8;
        v31[2] = 1852797029;
      }
      AudioObjectPropertyScope mScope = a3->mScope;
      if (mScope != 1768845428 && mScope != 1869968496)
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
          *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = 3260;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_Device::_GetPropertyDataSize: incorrect inAddress.mScope for kAudioDevicePropertyDSPGraphProperty", buf, 0x12u);
        }
        int v33 = __cxa_allocate_exception(0x10uLL);
        *(void *)int v33 = off_1F148A5D8;
        v33[2] = 1852797029;
      }
      int v21 = *a5;
      *(void *)AudioStreamBasicDescription buf = 0;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&buf[16] = 0x2000000000;
      LOBYTE(v49) = 0;
      uint64_t v37 = 0;
      std::string v38 = &v37;
      uint64_t v39 = 0x2000000000;
      int v40 = 0;
      v34[0] = MEMORY[0x1E4F143A8];
      v34[1] = 0x40000000;
      v34[2] = ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_133;
      v34[3] = &unk_1E6235DB8;
      BOOL v36 = mScope == 1768845428;
      v34[6] = this;
      v34[7] = a3;
      int v35 = v21;
      v34[4] = buf;
      v34[5] = &v37;
      long long v22 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
      HALB_CommandGate::ExecuteCommand(v22, (uint64_t)v34);
      if (!*(unsigned char *)(*(void *)&buf[8] + 24))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)unsigned int v44 = 136315394;
          CFStringRef v45 = "HALS_Device.cpp";
          __int16 v46 = 1024;
          int v47 = 3278;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  GetStreamDSPPropertyInfo failure", v44, 0x12u);
        }
        std::string::size_type v32 = __cxa_allocate_exception(0x10uLL);
        *(void *)std::string::size_type v32 = off_1F148A5D8;
        v32[2] = 1852797029;
      }
      uint64_t v10 = *((unsigned int *)v38 + 6);
      _Block_object_dispose(&v37, 8);
      goto LABEL_96;
    }
    char v23 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
    if ((v23 & 1) != 0
      || (v41[0] = 0, v41[1] = 0, HALS_System::GetInstance(buf, 0, v41), g_static_start_options == 1))
    {
      unsigned int HasProperty = (unsigned __int16)HALS_Device_HostedDSP::HasProperty(this[76], (uint64_t)a3, a6, a4);
      BOOL v25 = HasProperty > 0xFF;
      if (v23)
      {
        if (HasProperty < 0x100) {
          return 4;
        }
        goto LABEL_120;
      }
    }
    else
    {
      BOOL v25 = 0;
    }
    if (*(void *)&buf[8]) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&buf[8]);
    }
    if (!v25) {
      return 4;
    }
LABEL_120:
    uint8x8_t v29 = this[76];
    return HALS_Device_HostedDSP::GetPropertyDataSize(v29, (uint64_t)a3, a6, a4, a5, (HALS_Client *)a6);
  }
  if (mSelector <= 1934647635)
  {
    if (mSelector <= 1853059618)
    {
      if (mSelector > 1819634019)
      {
        if (mSelector == 1819634020 || mSelector == 1836411236) {
          return v10;
        }
        int v11 = 1852793963;
      }
      else
      {
        if (mSelector == 1768907636) {
          return v10;
        }
        if (mSelector == 1818850926) {
          return 4;
        }
        int v11 = 1819569763;
      }
      goto LABEL_81;
    }
    if (mSelector <= 1870098019)
    {
      if (mSelector != 1853059619)
      {
        if (mSelector == 1853059700) {
          return v10;
        }
        int v11 = 1869180523;
        goto LABEL_81;
      }
    }
    else
    {
      if (mSelector <= 1919512166)
      {
        if (mSelector != 1870098020)
        {
          int v11 = 1886353266;
          goto LABEL_81;
        }
        *(void *)AudioStreamBasicDescription buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&buf[16] = 0x2000000000;
        int v49 = 0;
        v42[0] = MEMORY[0x1E4F143A8];
        v42[1] = 0x40000000;
        v42[2] = ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke;
        void v42[3] = &unk_1E6235D90;
        unsigned int v43 = a4 >> 2;
        v42[6] = a6;
        v42[7] = a5;
        void v42[4] = buf;
        v42[5] = this;
        long long v16 = (HALB_Mutex *)((uint64_t (*)(HALS_Device ***))(*this)[7])(this);
        HALB_CommandGate::ExecuteCommand(v16, (uint64_t)v42);
        uint64_t v10 = (4 * *(_DWORD *)(*(void *)&buf[8] + 24));
LABEL_96:
        _Block_object_dispose(buf, 8);
        return v10;
      }
      if (mSelector == 1919512167) {
        return 4;
      }
      if (mSelector != 1934647619)
      {
LABEL_107:
        return HALS_Object::GetPropertyDataSize((uint64_t)this, (uint64_t)a2, (int *)a3);
      }
      HALS_Device::GetDSPVirtualChannelLayoutForClient((HALS_Device *)buf, (uint64_t)this, (HALS_Client *)(a3->mScope == 1768845428), (uint64_t)a6);
      if ((_BYTE)v49)
      {
        uint64_t v10 = (*(_DWORD *)&buf[8] - *(_DWORD *)buf);
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        return v10;
      }
    }
    return 0;
  }
  if (mSelector > 1937009954)
  {
    if (mSelector <= 1983996970)
    {
      if (mSelector != 1937009955)
      {
        if (mSelector == 1953653102) {
          return 4;
        }
        int v12 = 1969841184;
        goto LABEL_77;
      }
      AudioObjectPropertyScope v27 = a3->mScope;
      if (v27 == 1735159650)
      {
        int v28 = ((uint64_t (*)(HALS_Device ***, uint64_t, AudioObjectPropertyAddress *, HALS_Client *, int *))(*this)[67])(this, 1, a6, a4, a5);
        return 4
             * (((unsigned int (*)(HALS_Device ***, void, AudioObjectPropertyAddress *))(*this)[67])(this, 0, a6)+ v28);
      }
      int v26 = ((uint64_t (*)(HALS_Device ***, BOOL, AudioObjectPropertyAddress *, HALS_Client *, int *))(*this)[67])(this, v27 == 1768845428, a6, a4, a5);
      return (4 * v26);
    }
    if (mSelector <= 1986622323)
    {
      if (mSelector == 1983996971)
      {
        if (a6)
        {
          unsigned __int8 v17 = atomic_load((unsigned __int8 *)&a6[21].mElement);
          unsigned int v18 = 4 * (v17 & 1);
        }
        else
        {
          unsigned int v18 = 0;
        }
        if (a3->mScope == 1768845428) {
          return v18;
        }
        else {
          return 0;
        }
      }
      if (mSelector != 1983997011) {
        goto LABEL_107;
      }
      goto LABEL_120;
    }
    if (mSelector != 1986622324)
    {
      int v11 = 2003136116;
      goto LABEL_81;
    }
    if (a6)
    {
      unsigned __int8 v19 = atomic_load((unsigned __int8 *)&a6[21].mElement);
      return 4 * (v19 & 1u);
    }
    return 0;
  }
  if (mSelector <= 1936482680)
  {
    if (mSelector == 1934647636 || mSelector == 1935763060) {
      return 4;
    }
    int v11 = 1936092276;
    goto LABEL_81;
  }
  if (mSelector == 1936482681) {
    return (16
  }
          * ((unsigned int (*)(HALS_Device ***, BOOL, AudioObjectPropertyAddress *, HALS_Client *, int *))(*this)[67])(this, a3->mScope == 1768845428, a6, a4, a5)) | 8;
  if (mSelector != 1936876644 && mSelector != 1936879204) {
    goto LABEL_107;
  }
  unsigned int TotalNumberChannelsForClient = HALS_Device::GetTotalNumberChannelsForClient((HALS_Device *)this, a3->mScope == 1768845428, (HALS_Client *)a6);
  int v14 = caulk::numeric::exceptional_mul<unsigned int>(TotalNumberChannelsForClient);

  return caulk::numeric::exceptional_add<unsigned int>(v14);
}

void sub_1BAF65830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

void ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke(uint64_t a1)
{
  char v2 = 0;
  uint64_t v3 = *(void *)(a1 + 40);
  char v4 = 1;
  do
  {
    char v5 = v4;
    int v6 = (*(uint64_t (**)(uint64_t, void))(*(void *)v3 + 384))(v3, v2 & 1);
    if (v6)
    {
      int v7 = v6;
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = (unsigned int *)(*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v3 + 392))(v3, v2 & 1, v8);
        int v10 = (*(uint64_t (**)(uint64_t, unsigned int *, void))(*(void *)v3 + 608))(v3, v9, *(void *)(a1 + 48));
        if ((v10 & HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 64), *(void *)(a1 + 56), v9, v11)) == 1)++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24); {
        HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v9, v12);
        }
        uint64_t v8 = (v8 + 1);
      }
      while (v7 != v8);
    }
    char v4 = 0;
    char v2 = 1;
  }
  while ((v5 & 1) != 0);
  int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 656))(v3);
  if (v13)
  {
    int v14 = v13;
    uint64_t v15 = 0;
    do
    {
      long long v16 = (unsigned int *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 664))(v3, v15);
      if (HALS_Object::IsObjectClassInClassIDList((HALS_Object *)*(unsigned int *)(a1 + 64), *(void *)(a1 + 56), v16, v17))++*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24); {
      HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v16, v18);
      }
      uint64_t v15 = (v15 + 1);
    }
    while (v14 != v15);
  }
}

void sub_1BAF65A94(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void ___ZNK11HALS_Device19GetPropertyDataSizeEjRK26AudioObjectPropertyAddressjPKvP11HALS_Client_block_invoke_133(uint64_t a1, const BOOL *a2)
{
  char v13 = 0;
  int v3 = *(unsigned __int8 *)(a1 + 68);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(unsigned int *)(*(void *)(a1 + 56) + 8);
  uint64_t v6 = *(unsigned int *)(a1 + 64);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  if (AMCP::Feature_Flags::run_hybrid_hal((AMCP::Feature_Flags *)a1, a2))
  {
    v14[0] = 0;
    v14[1] = 0;
    HALS_System::GetInstance(&v15, 0, v14);
    uint64_t v8 = (os_unfair_lock_s *)(*(void *)(v15 + 1392) + 16);
    os_unfair_lock_lock(v8);
    os_unfair_lock_unlock(v8);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    char v9 = 0;
  }
  else
  {
    uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 400))(v4);
    int v12 = (HALS_ObjectMap *)v10;
    if (v10) {
      LOBYTE(v5) = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t, char *))(*(void *)v10 + 520))(v10, v3 != 0, v5, v6, v7 + 24, &v13);
    }
    HALS_ObjectMap::ReleaseObject(v12, v11);
    char v9 = (v12 != 0) & v5;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
}

void sub_1BAF65BF4(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAF65BDCLL);
}

uint64_t HALS_Device::IsPropertySettable(HALS_Device ***this, const BOOL *a2, AudioObjectPropertyAddress *a3, AudioObjectPropertyAddress *a4)
{
  signed int mSelector = a3->mSelector;
  uint64_t result = 1;
  if ((int)a3->mSelector > 1768777572)
  {
    if (mSelector > 1934647618)
    {
      if (mSelector <= 1937009954)
      {
        if (mSelector > 1936092275)
        {
          if (mSelector <= 1936876643)
          {
            if (mSelector != 1936092276)
            {
              int v9 = 1936482681;
              goto LABEL_79;
            }
            return 0;
          }
          if (mSelector == 1936876644) {
            return 0;
          }
          int v10 = 1936879204;
          goto LABEL_69;
        }
        if (mSelector == 1934647619 || mSelector == 1934647636) {
          return a3->mScope == 1869968496;
        }
        int v9 = 1935763060;
LABEL_79:
        if (mSelector == v9) {
          return 0;
        }
        goto LABEL_90;
      }
      if (mSelector <= 1983996970)
      {
        if (mSelector == 1937009955 || mSelector == 1953653102) {
          return 0;
        }
        int v9 = 1969841184;
        goto LABEL_79;
      }
      if (mSelector > 1986622323)
      {
        if (mSelector != 1986622324)
        {
          int v9 = 2003136116;
          goto LABEL_79;
        }
      }
      else if (mSelector != 1983996971)
      {
        if (mSelector != 1983997011)
        {
LABEL_90:
          return HALS_Object::IsPropertySettable(1, (uint64_t)a2, (int *)a3);
        }
        goto LABEL_101;
      }
      if (a4)
      {
        unsigned __int8 v11 = atomic_load((unsigned __int8 *)&a4[21].mElement);
        unsigned int v12 = v11 & 1;
      }
      else
      {
        unsigned int v12 = 0;
      }
      if (a3->mScope == 1768845428) {
        return v12;
      }
      else {
        return 0;
      }
    }
    if (mSelector <= 1836411235)
    {
      if (mSelector > 1818850925)
      {
        if (mSelector == 1818850926 || mSelector == 1819569763) {
          return 0;
        }
        int v9 = 1819634020;
        goto LABEL_79;
      }
      if (mSelector == 1768777573 || mSelector == 1768907636) {
        return 0;
      }
      int v10 = 1818454126;
    }
    else
    {
      if (mSelector <= 1853059699)
      {
        if (mSelector == 1836411236) {
          return 0;
        }
        if (mSelector == 1852793963) {
          return result;
        }
        int v9 = 1853059619;
        goto LABEL_79;
      }
      if (mSelector > 1886353265)
      {
        if (mSelector == 1886353266) {
          return 0;
        }
        int v9 = 1919512167;
        goto LABEL_79;
      }
      if (mSelector == 1853059700) {
        return result;
      }
      int v10 = 1869180523;
    }
LABEL_69:
    if (mSelector == v10) {
      return result;
    }
    goto LABEL_90;
  }
  if (mSelector <= 1684498543)
  {
    if (mSelector > 1667523954)
    {
      if (mSelector <= 1684236337)
      {
        if (mSelector == 1667523955) {
          return result;
        }
        if (mSelector == 1668049764) {
          return 0;
        }
        int v9 = 1668575852;
      }
      else if (mSelector > 1684434035)
      {
        if (mSelector == 1684434036) {
          return 0;
        }
        int v9 = 1684498541;
      }
      else
      {
        if (mSelector == 1684236338) {
          return result;
        }
        int v9 = 1684301171;
      }
      goto LABEL_79;
    }
    if (mSelector > 1634758764)
    {
      if (mSelector == 1634758765 || mSelector == 1634758774) {
        return result;
      }
      int v9 = 1667330160;
      goto LABEL_79;
    }
    if (mSelector == 1634429294 || mSelector == 1634496615) {
      return 0;
    }
    int v10 = 1634755428;
    goto LABEL_69;
  }
  if (mSelector > 1685414762)
  {
    if (mSelector <= 1751412336)
    {
      if (mSelector == 1685414763) {
        return result;
      }
      if (mSelector == 1735354734) {
        return 0;
      }
      int v9 = 1735356005;
      goto LABEL_79;
    }
    if (mSelector > 1751737453)
    {
      if (mSelector == 1751737454) {
        return 0;
      }
      int v9 = 1768124270;
      goto LABEL_79;
    }
    if (mSelector == 1751412337) {
      return 0;
    }
    int v10 = 1751413616;
    goto LABEL_69;
  }
  if (mSelector <= 1685089382)
  {
    if (mSelector == 1684498544) {
      return 0;
    }
    if (mSelector != 1684500589)
    {
      int v10 = 1684500594;
      goto LABEL_69;
    }
    char v13 = AMCP::Feature_Flags::allow_adm_dsp_graph_parameters(0, a2);
    if ((v13 & 1) != 0
      || (v17[0] = 0, v17[1] = 0, HALS_System::GetInstance(&v18, 0, v17), g_static_start_options == 1))
    {
      unsigned int HasProperty = (unsigned __int16)HALS_Device_HostedDSP::HasProperty(this[76], (uint64_t)a3, a4, (HALS_Client *)a4);
      BOOL v15 = HasProperty > 0xFF;
      if (v13)
      {
        if (HasProperty < 0x100) {
          return 1;
        }
LABEL_101:
        long long v16 = this[76];
        return HALS_Device_HostedDSP::IsPropertySettable(v16, (uint64_t)a3, a4, (HALS_Client *)a4);
      }
    }
    else
    {
      BOOL v15 = 0;
    }
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (!v15) {
      return 1;
    }
    goto LABEL_101;
  }
  if (mSelector == 1685089383 || mSelector == 1685278561) {
    return 0;
  }
  if (mSelector != 1685278562) {
    goto LABEL_90;
  }
  if (!a4) {
    return *((unsigned char *)this + 616) != 0;
  }
  return result;
}

void sub_1BAF661F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t HALS_Device::GetMIGDispatchQueue(HALS_Device *this)
{
  return *((void *)this + 11);
}

{
  return *((void *)this + 11);
}

uint64_t HALS_Device::GetCommandGate(HALS_Device *this)
{
  return *((void *)this + 10);
}

{
  return *((void *)this + 10);
}

uint64_t HALS_Device::_Deactivate(HALS_Device *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v2 = *((unsigned int *)this + 4);
    *(_DWORD *)AudioStreamBasicDescription buf = 136315906;
    *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 232;
    *(_WORD *)&unsigned char buf[18] = 2048;
    *(void *)&buf[20] = v2;
    *(_WORD *)&buf[28] = 2082;
    *(void *)&buf[30] = (char *)this + 156;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::_Deactivate: deactivating device %lu: %{public}s", buf, 0x26u);
  }
  *((_DWORD *)this + 2) = 0;
  for (uint64_t i = (void *)*((void *)this + 80); i; uint64_t i = (void *)*i)
  {
    HALS_Device::PerClientDSPInfo::deactivate_stream((HALS_Device::PerClientDSPInfo *)(i + 3), 1);
    HALS_Device::PerClientDSPInfo::deactivate_stream((HALS_Device::PerClientDSPInfo *)(i + 3), 0);
  }
  if (*((_DWORD *)this + 150))
  {
    v7[0] = 0;
    v7[1] = 0;
    HALS_System::GetInstance(&v8, 0, v7);
    int v4 = *((_DWORD *)this + 150);
    *(void *)AudioStreamBasicDescription buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN11HALS_System16DestroyIOContextEP11HALS_Clientj_block_invoke;
    *(void *)&unsigned char buf[24] = &__block_descriptor_tmp_142;
    *(void *)&buf[32] = v8;
    uint64_t v11 = 0;
    int v12 = v4;
    uint64_t v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v8 + 56))(v8);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)buf);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    *((_DWORD *)this + 150) = 0;
  }
  return kdebug_trace();
}

void sub_1BAF66414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void HALS_Device::Activate(const __CFString **this)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  int TransportType = HALS_IODevice::GetTransportType((HALS_IODevice *)this);
  v30[0] = HIBYTE(TransportType);
  v30[1] = BYTE2(TransportType);
  v30[2] = BYTE1(TransportType);
  void v30[3] = TransportType;
  v30[4] = 0;
  unsigned int v3 = ((uint64_t (*)(const __CFString **))(*this)[10].isa)(this);
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *((unsigned int *)this + 4);
    *(_DWORD *)AudioStreamBasicDescription buf = 136316418;
    *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 161;
    __int16 v33 = 2048;
    uint64_t v34 = v4;
    __int16 v35 = 2082;
    BOOL v36 = (char *)this + 156;
    __int16 v37 = 2080;
    std::string v38 = v30;
    __int16 v39 = 2048;
    uint64_t v40 = v3;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::Activate: activating device %lu: %{public}s Transport Type: %s Clock Domain: %lu", buf, 0x3Au);
  }
  kdebug_trace();
  if (v3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = TransportType == 1651274862;
  }
  if (v5 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)AudioStreamBasicDescription buf = 136315394;
    *(void *)&uint8_t buf[4] = "HALS_Device.cpp";
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = 165;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALS_Device::Activate: !!!! It is unusual for a built-in device to have a Clock Domain of zero.", buf, 0x12u);
  }
  uint64_t v6 = *((unsigned int *)this + 4);
  strcpy(buf, "sccabolg");
  buf[9] = 0;
  *(_WORD *)&buf[10] = 0;
  if (((unsigned int (*)(const __CFString **, uint64_t, unsigned char *, void))(*this)[2].length)(this, v6, buf, 0))
  {
    uint64_t v7 = *((unsigned int *)this + 4);
    strcpy(buf, "sccabolg");
    buf[9] = 0;
    *(_WORD *)&buf[10] = 0;
    int v28 = 0;
    LODWORD(v25) = 0;
    ((void (*)(const __CFString **, uint64_t, unsigned char *, uint64_t, uint64_t *, HALS_SettingsManager ***, void, void, void))(*this)[3].data)(this, v7, buf, 8, &v25, &v28, 0, 0, 0);
    CFStringRef v8 = (const __CFString *)v28;
    CFStringRef v9 = this[16];
    if (v9 != (const __CFString *)v28)
    {
      if (v9 && *((unsigned char *)this + 136)) {
        CFRelease(v9);
      }
      this[16] = v8;
    }
    *((unsigned char *)this + 136) = 1;
  }
  v27[0] = 0;
  v27[1] = 0;
  HALS_System::GetInstance(&v28, 0, v27);
  uint64_t Setting = HALS_SettingsManager::ReadSetting(v28[176], this[14]);
  *(void *)AudioStreamBasicDescription buf = &unk_1F14898A0;
  *(void *)&uint8_t buf[8] = Setting;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v29);
  }
  if (*(void *)&buf[8])
  {
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v28, *(CFDictionaryRef *)&buf[8], @"output.stereo.left");
    *((_DWORD *)this + 36) = OS::CF::Number::GetValue<unsigned int>(v29, 1);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
    OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v28, *(CFDictionaryRef *)&buf[8], @"output.stereo.right");
    *((_DWORD *)this + 37) = OS::CF::Number::GetValue<unsigned int>(v29, 2);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
    if ((HALS_System::sIsInitialized & 1) == 0)
    {
      OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Dictionary>((uint64_t)&v28, *(CFDictionaryRef *)&buf[8], @"global.arrival");
      if (v29)
      {
        if (HALS_IODevice::GetTransportType((HALS_IODevice *)this) == 1651274862)
        {
          uint64_t v11 = (unsigned int *)((uint64_t (*)(const __CFString **, uint64_t, uint64_t, void))(*this)[20].isa)(this, 1685287523, 1869968496, 0);
          if (v11
            || (uint64_t v11 = (unsigned int *)((uint64_t (*)(const __CFString **, uint64_t, uint64_t, void))(*this)[20].isa)(this, 1685287523, 1768845428, 0), pthread_once(&HALS_ObjectMap::sObjectInfoListInitialized, (void (*)(void))HALS_ObjectMap::Initialize), v11))
          {
            uint64_t v13 = v11[4];
            uint64_t v25 = 0x676C6F6273636369;
            LODWORD(v26) = 0;
            int v23 = 0;
            int v31 = 0;
            (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, int *, int *, void, void, void))(*(void *)v11 + 112))(v11, v13, &v25, 4, &v31, &v23, 0, 0, 0);
            int v14 = v23;
          }
          else
          {
            int v14 = 0;
          }
          HALS_ObjectMap::ReleaseObject((HALS_ObjectMap *)v11, v12);
        }
        else
        {
          int v14 = 0;
        }
        if (!HALS_Device::IsHidden((HALS_Device *)this) && v14 != 1768778083 && v14 != 1769173099)
        {
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v25, v29, @"seed");
          CFNumberRef v15 = OS::CF::Number::GetValue<unsigned long long>((const __CFNumber *)v26);
          OS::CF::DictionaryBase<__CFDictionary const*>::GetValueForKey<OS::CF::Number>((uint64_t)&v23, v29, @"time");
          CFNumberRef v16 = OS::CF::Number::GetValue<unsigned long long>(v24);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v23);
          OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v25);
          v22[0] = 0;
          v22[1] = 0;
          HALS_System::GetInstance(&v25, 0, v22);
          unint64_t CurrentDeviceArrivalTime = HALS_System::GetCurrentDeviceArrivalTime(v17);
          CFNumberRef v20 = v19;
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          if ((unint64_t)v15 >= CurrentDeviceArrivalTime
            && (v15 != (const __CFNumber *)CurrentDeviceArrivalTime || v16 >= v20))
          {
            CFNumberRef v15 = (const __CFNumber *)CurrentDeviceArrivalTime;
            CFNumberRef v16 = v20;
          }
          this[52] = (const __CFString *)v15;
          this[53] = (const __CFString *)v16;
        }
      }
      OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v28);
    }
  }
  if (!this[52] && !this[53]) {
    HALS_Device::UpdateDeviceArrivalTime((HALS_Device *)this);
  }
  *((_DWORD *)this + 38) = ((uint64_t (*)(const __CFString **))(*this)[16].isa)(this);
  HALS_Object::Activate((HALS_Object *)this, v21);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)buf);
}

void sub_1BAF66A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)va1);
  _Unwind_Resume(a1);
}

const __CFNumber *OS::CF::Number::GetValue<unsigned long long>(const __CFNumber *result)
{
  uint64_t valuePtr = 0;
  if (result)
  {
    CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
    return (const __CFNumber *)valuePtr;
  }
  return result;
}

void HALS_Device::BasicControlList::~BasicControlList(HALS_ObjectMap ***this, HALS_Object *a2)
{
  unsigned int v3 = *this;
  uint64_t v4 = this[1];
  if (*this != v4)
  {
    do
      HALS_ObjectMap::ReleaseObject(*v3++, a2);
    while (v3 != v4);
    unsigned int v3 = *this;
  }
  if (v3)
  {
    this[1] = v3;
    operator delete(v3);
  }
}

void HALS_Device::HALS_Device(HALS_Device *this, HALB_Info *a2, uint64_t a3, HALS_Object *a4, const __CFString *a5)
{
  int v7 = (int)a2;
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  if (HALB_Info::IsStandardClass(a2)) {
    int v10 = v7;
  }
  else {
    int v10 = 1633969526;
  }
  int v14 = v7;
  HALS_Object::HALS_Object(this, v7, v10, a3, v9);
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  *((unsigned char *)this + 72) = 0;
  *(void *)this = &unk_1F1486AF0;
  *((void *)this + 10) = 0;
  *((void *)this + 12) = a4;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 104) = 1;
  uint64_t v13 = (char *)this + 96;
  CFStringRef v11 = CFStringCreateWithFormat(0, 0, @"device.%@", a4);
  *((void *)this + 16) = 0;
  *((void *)this + 14) = v11;
  *((unsigned char *)this + 120) = 1;
  *((unsigned char *)this + 136) = 1;
  *((void *)this + 18) = 0x200000001;
  *((_DWORD *)this + 38) = -1;
  *((void *)this + 52) = 0;
  *((void *)this + 53) = 0;
  *((unsigned char *)this + 432) = 0;
  uint64_t v12 = (char *)this + 128;
  operator new();
}

void sub_1BAF673D0(_Unwind_Exception *a1)
{
  std::__split_buffer<HALS_Device::ClientInfo>::~__split_buffer(v1 + 368);
  MEMORY[0x1C1859810](v3, 0x1000C8077774924);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(v1 + 88);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v4);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(*(AMCP::Utility::Dispatch_Queue **)(v1 + 8));
  HALS_Device::ClientDSPInfo::~ClientDSPInfo(*(HALS_Device::ClientDSPInfo **)(v1 + 48));
  uint64_t v6 = v2[76];
  v2[76] = 0;
  if (v6) {
    std::default_delete<HALS_Device_HostedDSP>::operator()[abi:ne180100](v6);
  }
  std::deque<HALS_Device::DuckHistoryItem>::~deque[abi:ne180100]((uint64_t)(v2 + 69));
  *(void *)(v1 + 88) = *(void *)(v1 + 32);
  std::vector<HALS_Device::ClientInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v1 + 88));
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)(v2 + 60));
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v2 + 57));
  uint64_t v7 = v2[55];
  v2[55] = 0;
  if (v7) {
    std::default_delete<HALS_ReferenceStreamStateManager>::operator()[abi:ne180100](v7);
  }
  CACFString::~CACFString(*(CACFString **)(v1 + 16));
  CACFString::~CACFString((CACFString *)(v2 + 14));
  CACFString::~CACFString(*(CACFString **)(v1 + 24));
  HALS_IODevice::~HALS_IODevice((HALS_IODevice *)v2);
  _Unwind_Resume(a1);
}

void HALS_Device::ClientDSPInfo::~ClientDSPInfo(HALS_Device::ClientDSPInfo *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v13;
  if (*(void *)v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
  }
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG);
  if (v3)
  {
    CFStringRef v9 = pthread_self();
    mach_port_t v10 = pthread_mach_thread_np(v9);
    LODWORD(v13) = 67109634;
    HIDWORD(v13) = v10;
    *(_WORD *)int v14 = 2080;
    *(void *)&uint64_t v14[2] = "HALS_Device.cpp";
    __int16 v15 = 1024;
    int v16 = 5022;
    _os_log_debug_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d HALS_Device::ClientDSPInfo::~ClientDSPInfo() - poof!", (uint8_t *)&v13, 0x18u);
  }
  uint64_t v4 = (void *)((char *)this + 24);
  while (1)
  {
    uint64_t v4 = (void *)*v4;
    if (!v4) {
      break;
    }
    if (v4[6] | v4[11])
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v3);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
      BOOL v5 = *v13;
      if (*(void *)v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        CFStringRef v11 = pthread_self();
        mach_port_t v12 = pthread_mach_thread_np(v11);
        LODWORD(v13) = 67109634;
        HIDWORD(v13) = v12;
        *(_WORD *)int v14 = 2080;
        *(void *)&uint64_t v14[2] = "HALS_Device.cpp";
        __int16 v15 = 1024;
        int v16 = 5027;
        _os_log_error_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HALS_DSPStreams abandoned during destruction of HALS_Device.", (uint8_t *)&v13, 0x18u);
      }
      break;
    }
  }
  uint64_t v6 = (void *)*((void *)this + 3);
  if (v6)
  {
    do
    {
      uint64_t v7 = (void *)*v6;
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,HALS_Device::PerClientDSPInfo>,0>((uint64_t)(v6 + 2));
      operator delete(v6);
      uint64_t v6 = v7;
    }
    while (v7);
  }
  CFStringRef v8 = (void *)*((void *)this + 1);
  *((void *)this + 1) = 0;
  if (v8) {
    operator delete(v8);
  }
}

void sub_1BAF67724(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::default_delete<HALS_Device_HostedDSP>::operator()[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::deque<HALS_Device::DuckHistoryItem>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 64;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 128;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<HALS_Device::ClientInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    unint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 48;
        CACFDictionary::~CACFDictionary((CACFDictionary *)(v4 - 40));
        unint64_t v4 = v6;
      }
      while (v6 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<HALS_ReferenceStreamStateManager>::operator()[abi:ne180100](uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 208);
  std::__hash_table<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,HALS_RemotePlugInEngine *>>>::~__hash_table(a1 + 168);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));
  std::mutex::~mutex((std::mutex *)a1);

  JUMPOUT(0x1C1859840);
}

void HALS_Device::~HALS_Device(HALS_Device *this)
{
  *(void *)this = &unk_1F1486AF0;
  uint64_t v2 = (HALB_Mutex *)*((void *)this + 10);
  if (v2)
  {
    HALB_Mutex::~HALB_Mutex(v2);
    MEMORY[0x1C1859840]();
  }
  BOOL v3 = (AMCP::Utility::Dispatch_Queue *)*((void *)this + 11);
  if (v3)
  {
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v3);
    MEMORY[0x1C1859840]();
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Device *)((char *)this + 984));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_Device *)((char *)this + 664));
  HALS_Device::ClientDSPInfo::~ClientDSPInfo((HALS_Device *)((char *)this + 616));
  uint64_t v4 = *((void *)this + 76);
  *((void *)this + 76) = 0;
  if (v4) {
    std::default_delete<HALS_Device_HostedDSP>::operator()[abi:ne180100](v4);
  }
  std::deque<HALS_Device::DuckHistoryItem>::~deque[abi:ne180100]((uint64_t)this + 552);
  uint64_t v6 = (void **)((char *)this + 528);
  std::vector<HALS_Device::ClientInfo>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__hash_table<std::__hash_value_type<unsigned int,std::string>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::string>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::string>>>::~__hash_table((uint64_t)this + 480);
  CACFDictionary::~CACFDictionary((HALS_Device *)((char *)this + 456));
  uint64_t v5 = *((void *)this + 55);
  *((void *)this + 55) = 0;
  if (v5) {
    std::default_delete<HALS_ReferenceStreamStateManager>::operator()[abi:ne180100](v5);
  }
  CACFString::~CACFString((HALS_Device *)((char *)this + 128));
  CACFString::~CACFString((HALS_Device *)((char *)this + 112));
  CACFString::~CACFString((HALS_Device *)((char *)this + 96));
  *(void *)this = &unk_1F1488140;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*((void **)this + 7));

  HALS_Object::~HALS_Object(this);
}

void HALS_Device::LogState(char *a1, uint64_t a2)
{
  uint64_t v185 = *MEMORY[0x1E4F143B8];
  uint64_t v134 = a2;
  uint64_t v2 = (void *)(a2 + 16);
  int v3 = 3;
  do
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
    --v3;
  }
  while (v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Device ", 7);
  uint64_t v4 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(void *)(*v4 - 24)));
  uint64_t v5 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  v140[0] = &unk_1F1489A20;
  v140[1] = HALS_Device::CopyServerLocalizedName((HALS_Device *)a1);
  OS::CF::String::AsCString((CFIndex)v140, (UInt8 *)__s, 128);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Name:                  ", 23);
  size_t v6 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)__s, v6);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v7 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"UID:                   ", 23);
  size_t v8 = strlen(a1 + 156);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)(a1 + 156), v8);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  uint64_t v9 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  int TransportType = HALS_IODevice::GetTransportType((HALS_IODevice *)a1);
  v139[0] = HIBYTE(TransportType);
  v139[1] = BYTE2(TransportType);
  v139[2] = BYTE1(TransportType);
  v139[3] = TransportType;
  v139[4] = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Transport Type:        ", 23);
  size_t v11 = strlen(v139);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v139, v11);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  mach_port_t v12 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  IsHiddeuint64_t n = HALS_Device::IsHidden((HALS_Device *)a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Is Hidden:             ", 23);
  if (IsHidden) {
    int v14 = "yes";
  }
  else {
    int v14 = "no";
  }
  if (IsHidden) {
    uint64_t v15 = 3;
  }
  else {
    uint64_t v15 = 2;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
  int v16 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  (*(void (**)(char *))(*(void *)a1 + 320))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Clock Domain:          ", 23);
  uint64_t v17 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  uint64_t v18 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  (*(void (**)(char *, uint64_t))(*(void *)a1 + 304))(a1, 1);
  (*(void (**)(char *, void))(*(void *)a1 + 304))(a1, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Latency                In: ", 27);
  CFNumberRef v19 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" Out: ", 6);
  CFNumberRef v20 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(void *)(*v20 - 24)));
  int v21 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  (*(void (**)(char *, uint64_t))(*(void *)a1 + 312))(a1, 1);
  (*(void (**)(char *, void))(*(void *)a1 + 312))(a1, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Safety Offset          In: ", 27);
  long long v22 = (void *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" Out: ", 6);
  int v23 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(void *)(*v23 - 24)));
  CFNumberRef v24 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  (*(void (**)(char *))(*(void *)a1 + 264))(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Nominal Sample Rate:   ", 23);
  uint64_t v25 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(void *)(*v25 - 24)));
  int v26 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  char v27 = 0;
  char v28 = 1;
  CFDictionaryRef v29 = (std::locale::id *)MEMORY[0x1E4FBA258];
  do
  {
    char v30 = v28;
    v136.__locale_ = 0;
    mach_port_t v137 = 0;
    uint64_t v138 = 0;
    HALS_Device::CopyStreamList((uint64_t)a1, v27 & 1, (char **)&v136);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Number ", 7);
    if (v30) {
      int v31 = "Output Streams:";
    }
    else {
      int v31 = "Input Streams: ";
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v31, 15);
    std::string::size_type v32 = (void *)std::ostream::operator<<();
    std::ios_base::getloc((const std::ios_base *)((char *)v32 + *(void *)(*v32 - 24)));
    __int16 v33 = std::locale::use_facet(&v183, v29);
    ((void (*)(const std::locale::facet *, uint64_t))v33->__vftable[2].~facet_0)(v33, 10);
    std::locale::~locale(&v183);
    std::ostream::put();
    std::ostream::flush();
    locale = v136.__locale_;
    BOOL v36 = v137;
    while (locale != v36)
    {
      __int16 v37 = *(unsigned int **)locale;
      memset(&v145, 0, sizeof(v145));
      unsigned int v38 = v37[14];
      if (v38 == 2)
      {
        *((unsigned char *)&v145.__r_.__value_.__s + 23) = 3;
        qmemcpy(&v145, "DSP", 3);
        __int16 v39 = &v145.__r_.__value_.__s.__data_[3];
        goto LABEL_19;
      }
      if (v38 == 1)
      {
        *((unsigned char *)&v145.__r_.__value_.__s + 23) = 9;
        v145.__r_.__value_.__s.__data_[8] = 101;
        v145.__r_.__value_.__r.__words[0] = *(void *)"reference";
        __int16 v39 = &v145.__r_.__value_.__s.__data_[9];
LABEL_19:
        std::string::value_type *v39 = 0;
        goto LABEL_24;
      }
      if (*((unsigned char *)v37 + 52)) {
        uint64_t v40 = "input";
      }
      else {
        uint64_t v40 = "output";
      }
      std::string::__assign_external(&v145, v40);
LABEL_24:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Stream ", 7);
      uint64_t v41 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(void *)(*v41 - 24)));
      unsigned int v42 = std::locale::use_facet(&v148, v29);
      ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
      std::locale::~locale(&v148);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Direction:               ", 25);
      if ((v145.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned int v43 = &v145;
      }
      else {
        unsigned int v43 = (std::string *)v145.__r_.__value_.__r.__words[0];
      }
      size_t v44 = strlen((const char *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v43, v44);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      CFStringRef v45 = std::locale::use_facet(&v149, v29);
      ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
      std::locale::~locale(&v149);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Starting Channel:        ", 25);
      (*(void (**)(unsigned int *))(*(void *)v37 + 200))(v37);
      __int16 v46 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(void *)(*v46 - 24)));
      int v47 = std::locale::use_facet(&v150, v29);
      ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
      std::locale::~locale(&v150);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Is Active:               ", 25);
      BOOL IsActive = HALS_Stream::GetStreamIsActive(v37);
      if (IsActive) {
        int v49 = "yes";
      }
      else {
        int v49 = "no";
      }
      if (IsActive) {
        uint64_t v50 = 3;
      }
      else {
        uint64_t v50 = 2;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v49, v50);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      unsigned int v51 = std::locale::use_facet(&v151, v29);
      ((void (*)(const std::locale::facet *, uint64_t))v51->__vftable[2].~facet_0)(v51, 10);
      std::locale::~locale(&v151);
      std::ostream::put();
      std::ostream::flush();
      memset(&v144, 0, sizeof(v144));
      HALS_Stream::GetCurrentVirtualFormat((HALS_Stream *)v37, &v144);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)&v144, (char *)&v183, 0x80uLL, v52, v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Current Virtual Format:  ", 25);
      size_t v54 = strlen((const char *)&v183);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)&v183, v54);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      CFStringRef v55 = std::locale::use_facet(&v152, v29);
      ((void (*)(const std::locale::facet *, uint64_t))v55->__vftable[2].~facet_0)(v55, 10);
      std::locale::~locale(&v152);
      std::ostream::put();
      std::ostream::flush();
      uint64_t v143 = 0;
      *(_OWORD *)&v141[0].__locale_ = 0u;
      long long v142 = 0u;
      uint64_t v56 = v37[4];
      uint64_t v146 = 0x676C6F6270667420;
      uint64_t v147 = 0;
      double v57 = (*(double (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, char *, std::locale *, void, void, void, uint64_t))(*(void *)v37 + 112))(v37, v56, &v146, 40, (char *)&v147 + 4, v141, 0, 0, 0, v134);
      CAStreamBasicDescription::AsString((CAStreamBasicDescription *)v141, (char *)v182, 0x80uLL, v57, v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Current Physical Format: ", 25);
      size_t v59 = strlen((const char *)v182);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v182, v59);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      BOOL v60 = std::locale::use_facet(&v153, v29);
      ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
      std::locale::~locale(&v153);
      std::ostream::put();
      std::ostream::flush();
      if (SHIBYTE(v145.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v145.__r_.__value_.__l.__data_);
      }
      locale = (std::locale::__imp *)((char *)locale + 8);
    }
    HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v136, v34);
    char v28 = 0;
    char v27 = 1;
  }
  while ((v30 & 1) != 0);
  memset(&v144, 0, 24);
  (*(void (**)(char *, AudioStreamBasicDescription *))(*(void *)a1 + 616))(a1, &v144);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Number Controls:       ", 23);
  int v61 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(void *)(*v61 - 24)));
  BOOL v62 = std::locale::use_facet(&v183, MEMORY[0x1E4FBA258]);
  ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
  std::locale::~locale(&v183);
  std::ostream::put();
  std::ostream::flush();
  Float64 mSampleRate = v144.mSampleRate;
  uint64_t v64 = *(void *)&v144.mFormatID;
  if (*(void *)&v144.mSampleRate != *(void *)&v144.mFormatID)
  {
    uint64_t v65 = (std::locale::id *)MEMORY[0x1E4FBA258];
    do
    {
      char v66 = **(unsigned int ***)&mSampleRate;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Control ", 8);
      __int16 v67 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v67 + *(void *)(*v67 - 24)));
      BOOL v68 = std::locale::use_facet(&v167, v65);
      ((void (*)(const std::locale::facet *, uint64_t))v68->__vftable[2].~facet_0)(v68, 10);
      std::locale::~locale(&v167);
      std::ostream::put();
      std::ostream::flush();
      AudioObjectPropertyScope v69 = (HALB_Info *)v66[5];
      unsigned int BaseClass = v66[6];
      LOBYTE(v167.__locale_) = HIBYTE(v66[5]);
      BYTE1(v167.__locale_) = BYTE2(v69);
      BYTE2(v167.__locale_) = BYTE1(v69);
      *(_WORD *)((char *)&v167.__locale_ + 3) = v69;
      if (BaseClass == v69) {
        unsigned int BaseClass = HALB_Info::GetBaseClass(v69);
      }
      v154[0] = HIBYTE(BaseClass);
      v154[1] = BYTE2(BaseClass);
      v154[2] = BYTE1(BaseClass);
      v154[3] = BaseClass;
      v154[4] = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Class:                  ", 24);
      size_t v71 = strlen((const char *)&v167);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)&v167, v71);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      uint64_t v72 = std::locale::use_facet(&v168, v65);
      ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
      std::locale::~locale(&v168);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Base Class:             ", 24);
      size_t v73 = strlen(v154);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v154, v73);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      uint64_t v74 = std::locale::use_facet(&v169, v65);
      ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
      std::locale::~locale(&v169);
      std::ostream::put();
      std::ostream::flush();
      v75.i32[0] = v66[12];
      int16x8_t v76 = (int16x8_t)vmovl_u8(v75);
      *(int16x4_t *)v76.i8 = vrev64_s16(*(int16x4_t *)v76.i8);
      LODWORD(v169.__locale_) = vmovn_s16(v76).u32[0];
      BYTE4(v169.__locale_) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Scope:                  ", 24);
      size_t v77 = strlen((const char *)&v169);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)&v169, v77);
      std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
      __int16 v78 = std::locale::use_facet((const std::locale *)v182, v65);
      ((void (*)(const std::locale::facet *, uint64_t))v78->__vftable[2].~facet_0)(v78, 10);
      std::locale::~locale((std::locale *)v182);
      std::ostream::put();
      std::ostream::flush();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Element:                ", 24);
      int64_t v79 = (void *)std::ostream::operator<<();
      std::ios_base::getloc((const std::ios_base *)((char *)v79 + *(void *)(*v79 - 24)));
      unsigned int v80 = std::locale::use_facet(&v183, v65);
      ((void (*)(const std::locale::facet *, uint64_t))v80->__vftable[2].~facet_0)(v80, 10);
      std::locale::~locale(&v183);
      std::ostream::put();
      std::ostream::flush();
      int v82 = v66[5];
      int v81 = (HALB_Info *)v66[6];
      if (v82 == v81 || v82 == 1936483442)
      {
        BOOL v84 = v82 == v81;
        if (v82 == 1936483442) {
          BOOL v84 = 0;
        }
        if (!v84)
        {
LABEL_51:
          uint64_t v85 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F6273647276;
          LODWORD(v184) = 0;
          int v156 = 0;
          int v155 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, int *, int *, void, void, void, uint64_t))(*(void *)v66 + 112))(v66, v85, &v183, 4, &v155, &v156, 0, 0, 0, v134);
          v182[0].__begin_ = 0;
          LODWORD(v168.__locale_) = 8;
          uint64_t v86 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F6273647272;
          LODWORD(v184) = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, std::locale *, std::vector<unsigned int> *, void, void, void))(*(void *)v66 + 112))(v66, v86, &v183, 8, &v168, v182, 0, 0, 0);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Value:                  ", 24);
          int v87 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(void *)(*v87 - 24)));
          int v88 = std::locale::use_facet(&v170, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
          std::locale::~locale(&v170);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Min Value:              ", 24);
          uint64_t v89 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v89 + *(void *)(*v89 - 24)));
          uint64_t v90 = std::locale::use_facet(&v171, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v90->__vftable[2].~facet_0)(v90, 10);
          std::locale::~locale(&v171);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Max Value:              ", 24);
          uint64_t v91 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(void *)(*v91 - 24)));
          AudioObjectPropertyScope v92 = std::locale::use_facet(&v172, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v92->__vftable[2].~facet_0)(v92, 10);
          std::locale::~locale(&v172);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_56;
        }
      }
      else if (v81 == 1936483442)
      {
        goto LABEL_51;
      }
      if (v82 <= 1936028006)
      {
        if (v82 == 1818588780) {
          goto LABEL_55;
        }
        int v83 = 1886544237;
      }
      else
      {
        if (v82 == 1936028007 || v82 == 1937072758)
        {
LABEL_55:
          uint64_t v93 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F626C637376;
          LODWORD(v184) = 0;
          int v158 = 0;
          int v157 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, int *, int *, void, void, void))(*(void *)v66 + 112))(v66, v93, &v183, 4, &v157, &v158, 0, 0, 0);
          uint64_t v94 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F626C636476;
          LODWORD(v184) = 0;
          int v160 = 0;
          int v159 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, int *, int *, void, void, void))(*(void *)v66 + 112))(v66, v94, &v183, 4, &v159, &v160, 0, 0, 0);
          uint64_t v184 = 0;
          v183.__locale_ = 0;
          uint64_t v95 = v66[4];
          v182[0].__begin_ = (std::vector<unsigned int>::pointer)0x676C6F626C636476;
          LODWORD(v182[0].__end_) = 0;
          int v161 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::vector<unsigned int> *, uint64_t, int *, std::locale *, void, void, void))(*(void *)v66 + 112))(v66, v95, v182, 16, &v161, &v183, 0, 0, 0);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Scalar Value:           ", 24);
          int v96 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(void *)(*v96 - 24)));
          uint64_t v97 = std::locale::use_facet(&v173, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
          std::locale::~locale(&v173);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"dB Value:               ", 24);
          int v98 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(void *)(*v98 - 24)));
          AudioObjectPropertyScope v99 = std::locale::use_facet(&v174, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
          std::locale::~locale(&v174);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Min dB Value:           ", 24);
          uint64_t v100 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v100 + *(void *)(*v100 - 24)));
          int v101 = std::locale::use_facet(&v175, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
          std::locale::~locale(&v175);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Max dB Value:           ", 24);
          int v102 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v102 + *(void *)(*v102 - 24)));
          unsigned int v103 = std::locale::use_facet(&v176, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v103->__vftable[2].~facet_0)(v103, 10);
          std::locale::~locale(&v176);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_56;
        }
        int v83 = 1986817381;
      }
      if (v82 == v83) {
        goto LABEL_55;
      }
      if (v82 == v81)
      {
        if (((v82 != v81) | HALB_Info::IsSubClass((HALB_Info *)v66[5], 1953458028)) == 1) {
          goto LABEL_60;
        }
      }
      else
      {
        if ((int)v81 <= 1936028006)
        {
          if (v81 == 1818588780) {
            goto LABEL_55;
          }
          int v109 = 1886544237;
        }
        else
        {
          if (v81 == 1936028007 || v81 == 1986817381) {
            goto LABEL_55;
          }
          int v109 = 1937072758;
        }
        if (v81 == v109) {
          goto LABEL_55;
        }
        BOOL IsSubClass = HALB_Info::IsSubClass((HALB_Info *)v66[5], 1953458028);
        if (v82 == v81 || IsSubClass || HALB_Info::IsSubClass(v81, 1953458028))
        {
LABEL_60:
          uint64_t v104 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F626263766CLL;
          LODWORD(v184) = 0;
          uint64_t v162 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v66 + 112))(v66, v104, &v183, 4, &v162, (char *)&v162 + 4, 0, 0, 0);
          int v105 = HIDWORD(v162);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Value:                  ", 24);
          if (v105) {
            unint64_t v106 = "on";
          }
          else {
            unint64_t v106 = "off";
          }
          if (v105) {
            uint64_t v107 = 2;
          }
          else {
            uint64_t v107 = 3;
          }
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v106, v107);
          std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
          uint64_t v108 = std::locale::use_facet(&v177, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v108->__vftable[2].~facet_0)(v108, 10);
          std::locale::~locale(&v177);
          std::ostream::put();
          std::ostream::flush();
          goto LABEL_56;
        }
      }
      if (v82 > 1751740517)
      {
        if (v82 == 1751740518 || v82 == 1852601964)
        {
LABEL_85:
          uint64_t v112 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F6273636369;
          LODWORD(v184) = 0;
          unsigned int v113 = (*(uint64_t (**)(unsigned int *, uint64_t, std::locale *, void, void, void))(*(void *)v66 + 104))(v66, v112, &v183, 0, 0, 0);
          LODWORD(v183.__locale_) = 0;
          std::vector<unsigned int>::vector(v182, v113 >> 2, (const std::vector<unsigned int>::value_type *)&v183);
          uint64_t v114 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F6273636369;
          LODWORD(v184) = 0;
          int v163 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, void, int *, std::vector<unsigned int>::pointer, void, void, void))(*(void *)v66 + 112))(v66, v114, &v183, v113 & 0xFFFFFFFC, &v163, v182[0].__begin_, 0, 0, 0);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Number Selector Values: ", 24);
          unsigned int v115 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v115 + *(void *)(*v115 - 24)));
          unsigned int v116 = std::locale::use_facet(v141, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v116->__vftable[2].~facet_0)(v116, 10);
          std::locale::~locale(v141);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Selector Value:        ", 23);
          begiuint64_t n = v182[0].__begin_;
          std::vector<unsigned int>::pointer end = v182[0].__end_;
          while (begin != end)
          {
            uint64_t v119 = v66[4];
            v183.__locale_ = (std::locale::__imp *)0x676C6F626E696373;
            LODWORD(v184) = 0;
            mach_port_t v165 = 0;
            int v164 = 0;
            (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, int *, std::locale::__imp **, uint64_t, std::vector<unsigned int>::pointer, void))(*(void *)v66 + 112))(v66, v119, &v183, 8, &v164, &v165, 4, begin, 0);
            v141[0].__locale_ = (std::locale::__imp *)&unk_1F1489A20;
            v141[1].__locale_ = v165;
            OS::CF::String::AsCString((CFIndex)v141, (UInt8 *)&v183, 128);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
            int v120 = (void *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)"->", 2);
            size_t v121 = strlen((const char *)&v183);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v120, (uint64_t)&v183, v121);
            std::ios_base::getloc((const std::ios_base *)((char *)v120 + *(void *)(*v120 - 24)));
            uint64_t v122 = std::locale::use_facet(&v179, v65);
            ((void (*)(const std::locale::facet *, uint64_t))v122->__vftable[2].~facet_0)(v122, 10);
            std::locale::~locale(&v179);
            std::ostream::put();
            std::ostream::flush();
            OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v141);
            ++begin;
          }
          std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(void *)(*v2 - 24)));
          uint64_t v123 = std::locale::use_facet(&v178, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
          std::locale::~locale(&v178);
          std::ostream::put();
          std::ostream::flush();
          if (v182[0].__begin_)
          {
            v182[0].__end_ = v182[0].__begin_;
            operator delete(v182[0].__begin_);
          }
          goto LABEL_56;
        }
        int v111 = 1936483188;
      }
      else
      {
        if (v82 == 1668047723 || v82 == 1684370292) {
          goto LABEL_85;
        }
        int v111 = 1685287523;
      }
      if (v82 == v111) {
        goto LABEL_85;
      }
      if (v82 == v81)
      {
        if (v82 == 1936744814) {
          goto LABEL_92;
        }
      }
      else
      {
        if ((int)v81 > 1751740517)
        {
          if (v81 == 1751740518 || v81 == 1936483188) {
            goto LABEL_85;
          }
          int v132 = 1852601964;
        }
        else
        {
          if (v81 == 1668047723 || v81 == 1684370292) {
            goto LABEL_85;
          }
          int v132 = 1685287523;
        }
        if (v81 == v132) {
          goto LABEL_85;
        }
        if (v82 == v81 || v82 == 1936744814 || v81 == 1936744814)
        {
LABEL_92:
          uint64_t v124 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F6273647276;
          LODWORD(v184) = 0;
          uint64_t v166 = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v66 + 112))(v66, v124, &v183, 4, &v166, (char *)&v166 + 4, 0, 0, 0);
          v182[0].__begin_ = 0;
          LODWORD(v168.__locale_) = 8;
          uint64_t v125 = v66[4];
          v183.__locale_ = (std::locale::__imp *)0x676C6F6273647272;
          LODWORD(v184) = 0;
          (*(void (**)(unsigned int *, uint64_t, std::locale *, uint64_t, std::locale *, std::vector<unsigned int> *, void, void, void))(*(void *)v66 + 112))(v66, v125, &v183, 8, &v168, v182, 0, 0, 0);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Value:                  ", 24);
          mach_port_t v126 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v126 + *(void *)(*v126 - 24)));
          uint64_t v127 = std::locale::use_facet(&v180, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v127->__vftable[2].~facet_0)(v127, 10);
          std::locale::~locale(&v180);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Left Channel:           ", 24);
          mach_port_t v128 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v128 + *(void *)(*v128 - 24)));
          mach_port_t v129 = std::locale::use_facet(&v136, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v129->__vftable[2].~facet_0)(v129, 10);
          std::locale::~locale(&v136);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"    ", 4);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Right Channel:          ", 24);
          long long v130 = (void *)std::ostream::operator<<();
          std::ios_base::getloc((const std::ios_base *)((char *)v130 + *(void *)(*v130 - 24)));
          long long v131 = std::locale::use_facet((const std::locale *)&v145, v65);
          ((void (*)(const std::locale::facet *, uint64_t))v131->__vftable[2].~facet_0)(v131, 10);
          std::locale::~locale((std::locale *)&v145);
          std::ostream::put();
          std::ostream::flush();
        }
      }
LABEL_56:
      *(void *)&mSampleRate += 8;
    }
    while (*(void *)&mSampleRate != v64);
  }
  HALS_Device::DumpDuckHistory(a1, 1, v134, 4);
  HALS_Device::BasicControlList::~BasicControlList((HALS_ObjectMap ***)&v144, v133);
  OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)v140);
}

void sub_1BAF6AC90(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,HALS_ObjectMap **a27)
{
}

void HALS_Device::CopyStreamList(uint64_t a1, char a2, char **a3)
{
  uint64_t v25 = 0;
  int v26 = &v25;
  uint64_t v27 = 0x4002000000;
  char v28 = __Block_byref_object_copy__18620;
  CFDictionaryRef v29 = __Block_byref_object_dispose__18621;
  long long __p = 0;
  int v31 = 0;
  uint64_t v32 = 0;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  v23[2] = ___ZNK11HALS_Device14CopyStreamListEbRNSt3__16vectorIP11HALS_StreamNS0_9allocatorIS3_EEEE_block_invoke;
  v23[3] = &unk_1E6235B08;
  char v24 = a2;
  v23[4] = &v25;
  v23[5] = a1;
  uint64_t v4 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 56))(a1);
  HALB_CommandGate::ExecuteCommand(v4, (uint64_t)v23);
  if (v26 + 5 == (uint64_t *)a3) {
    goto LABEL_24;
  }
  uint64_t v5 = (char *)v26[5];
  size_t v6 = (unsigned char *)v26[6];
  size_t v7 = v6 - v5;
  unint64_t v8 = (v6 - v5) >> 3;
  uint64_t v9 = (uint64_t)a3[2];
  mach_port_t v10 = *a3;
  if (v8 > (v9 - (uint64_t)*a3) >> 3)
  {
    if (v10)
    {
      a3[1] = v10;
      operator delete(v10);
      uint64_t v9 = 0;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    if ((v7 & 0x8000000000000000) != 0) {
      goto LABEL_27;
    }
    uint64_t v11 = v9 >> 2;
    if (v9 >> 2 <= v8) {
      uint64_t v11 = (v6 - v5) >> 3;
    }
    unint64_t v12 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v11;
    if (v12 >> 61) {
LABEL_27:
    }
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v12);
    mach_port_t v10 = v13;
    *a3 = v13;
    a3[1] = v13;
    a3[2] = &v13[8 * v14];
    if (v6 != v5) {
      memmove(v13, v5, v6 - v5);
    }
    uint64_t v15 = (void **)(a3 + 1);
    goto LABEL_23;
  }
  uint64_t v17 = a3[1];
  uint64_t v15 = (void **)(a3 + 1);
  int v16 = v17;
  size_t v18 = v17 - v10;
  unint64_t v19 = (v17 - v10) >> 3;
  if (v19 < v8)
  {
    CFNumberRef v20 = &v5[8 * v19];
    if (v16 != v10)
    {
      memmove(v10, v5, v18);
      mach_port_t v10 = (char *)*v15;
    }
    size_t v7 = v6 - v20;
    if (v6 == v20) {
      goto LABEL_23;
    }
    int v21 = v10;
    long long v22 = v20;
    goto LABEL_22;
  }
  if (v6 != v5)
  {
    int v21 = v10;
    long long v22 = (char *)v26[5];
LABEL_22:
    memmove(v21, v22, v7);
  }
LABEL_23:
  *uint64_t v15 = &v10[v7];
LABEL_24:
  _Block_object_dispose(&v25, 8);
  if (__p)
  {
    int v31 = __p;
    operator delete(__p);
  }
}

void sub_1BAF6B014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__18620(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__18621(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZNK11HALS_Device14CopyStreamListEbRNSt3__16vectorIP11HALS_StreamNS0_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 40) + 560))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(*(void *)(a1 + 32) + 8) + 40);
}

void sub_1BAF6B0CC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetHogModeOwner(HALS_Device *this)
{
  uint64_t v5 = 0;
  size_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = -1;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK11HALS_Device15GetHogModeOwnerEv_block_invoke;
  void v4[3] = &unk_1E62359F0;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF6B1B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device15GetHogModeOwnerEv_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 152);
  return result;
}

void ___ZNK11HALS_Device22CopyDSPStreamForClientEbj_block_invoke(uint64_t a1)
{
  uint64_t v2 = std::__hash_table<std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::optional<unsigned int>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::optional<unsigned int>>>>::find<unsigned int>((void *)(*(void *)(a1 + 40) + 624), *(_DWORD *)(a1 + 48));
  if (v2)
  {
    uint64_t v4 = 6;
    if (!*(unsigned char *)(a1 + 52)) {
      uint64_t v4 = 11;
    }
    uint64_t v5 = v2[v4];
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v5;
  size_t v6 = *(HALS_ObjectMap **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v6) {
    HALS_ObjectMap::RetainObject(v6, v3);
  }
}

void sub_1BAF6B254(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::GetTotalNumberChannels(HALS_Device *this, char a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  uint64_t v5[2] = ___ZNK11HALS_Device22GetTotalNumberChannelsEb_block_invoke;
  uint64_t v5[3] = &unk_1E6235AB8;
  v5[4] = &v7;
  v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAF6B340(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device22GetTotalNumberChannelsEb_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 552))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF6B3B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_Device::AreAllStreamsMixable(HALS_Device *this, char a2)
{
  int v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  HALS_Device::CopyStreamList((uint64_t)this, a2, &v8);
  uint64_t v3 = (HALS_Stream **)v8;
  uint64_t v4 = v9;
  if (v8 == v9)
  {
LABEL_5:
    uint64_t v5 = 1;
  }
  else
  {
    while (1)
    {
      HALS_Stream::GetCurrentVirtualFormat(*v3, &v7);
      if (v7.mFormatID != 1819304813 || (v7.mFormatFlags & 0x40) != 0) {
        break;
      }
      if (++v3 == (HALS_Stream **)v4) {
        goto LABEL_5;
      }
    }
    uint64_t v5 = 0;
  }
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)&v8, v2);
  return v5;
}

void sub_1BAF6B47C(_Unwind_Exception *a1, HALS_Object *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  HALS_ArrayReleaser<HALS_Stream>::~HALS_ArrayReleaser((HALS_ObjectMap ***)va, a2);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__65_18653(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 40);
  *(unsigned char *)(result + 44) = *(unsigned char *)(a2 + 44);
  *(_DWORD *)(result + 40) = v2;
  return result;
}

void ___ZNK11HALS_Device39GetClientChannelCountFromDSPDescriptionEv_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  CFDictionaryRef v3 = *(const __CFDictionary **)(v2 + 456);
  if (v3 && CFDictionaryContainsKey(v3, @"client channel count"))
  {
    HALS_DSPSettings::FromDictionary((HALS_DSPSettings *)&v5, *(const __CFDictionary **)(v2 + 456));
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    *(_DWORD *)(v4 + 40) = v10;
    *(unsigned char *)(v4 + 44) = 1;
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v13);
    if (__p)
    {
      unint64_t v12 = __p;
      operator delete(__p);
    }
    if (cf) {
      CFRelease(cf);
    }
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v8);
    OS::CF::UntypedObject::~UntypedObject((OS::CF::UntypedObject *)&v7);
    if (v6 < 0) {
      operator delete(v5);
    }
  }
}

uint64_t HALS_Device::GetStreamDSPLatency(HALS_Device *this, const BOOL *a2)
{
  if (AMCP::Feature_Flags::run_hybrid_hal(this, a2)) {
    return 0;
  }
  char v6 = (HALS_ObjectMap *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 400))(this);
  if (v6
    && (int v7 = (*(uint64_t (**)(HALS_Device *, const BOOL *, void))(*(void *)this + 536))(this, a2, 0)) != 0)
  {
    uint64_t v8 = 0;
    LODWORD(v4) = 0;
    do
    {
      unsigned int v9 = (*(uint64_t (**)(HALS_ObjectMap *, const BOOL *, uint64_t))(*(void *)v6 + 504))(v6, a2, v8);
      if (v4 <= v9) {
        uint64_t v4 = v9;
      }
      else {
        uint64_t v4 = v4;
      }
      uint64_t v8 = (v8 + 1);
    }
    while (v7 != v8);
  }
  else
  {
    uint64_t v4 = 0;
  }
  HALS_ObjectMap::ReleaseObject(v6, v5);
  return v4;
}

void sub_1BAF6B688(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(HALS_Client *,BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN11HALS_Device32SetReferenceStreamStateForClientEjbE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(unsigned int **)(a1 + 8);
  (*(void (**)(unsigned int *, void, void))(*(void *)v2 + 936))(v2, 0, *(unsigned int *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4)
  {
    v6[0] = xmmword_1BB04065C;
    *(_OWORD *)((char *)v6 + 12) = *(long long *)((char *)&xmmword_1BB04065C + 12);
    v5[0] = *(_OWORD *)"#mtsbolg";
    v5[1] = *(_OWORD *)"tpni";
    HALS_NotificationManager::PropertiesChanged((HALS_NotificationManager *)v2[4], *(unsigned int *)(v4 + 16), 5u, (const AudioObjectPropertyAddress *)v5, v3);
  }
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::destroy_deallocate(HALS_ObjectMap **a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(a1[3], a2);

  operator delete(a1);
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::destroy(uint64_t a1, HALS_Object *a2)
{
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1487208;
  uint64_t v4 = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 8) = v4;
  uint64_t v5 = *(HALS_ObjectMap **)(a1 + 24);
  *(void *)(a2 + 24) = v5;
  HALS_ObjectMap::RetainObject(v5, (HALS_Object *)a2);
  *(unsigned char *)(a2 + 32) = *(unsigned char *)(a1 + 32);
}

void *std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = &unk_1F1487208;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(HALS_ObjectMap **)(a1 + 24);
  v2[3] = v4;
  HALS_ObjectMap::RetainObject(v4, v5);
  *((unsigned char *)v2 + 32) = *(unsigned char *)(a1 + 32);
  return v2;
}

void sub_1BAF6B970(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::~__func(uint64_t a1, HALS_Object *a2)
{
  *(void *)a1 = &unk_1F1487208;
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 24), a2);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_1>,void ()(void)>::~__func(uint64_t a1, HALS_Object *a2)
{
  *(void *)a1 = &unk_1F1487208;
  HALS_ObjectMap::ReleaseObject(*(HALS_ObjectMap **)(a1 + 24), a2);
  return a1;
}

void *std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::target_type()
{
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN11HALS_Device32SetReferenceStreamStateForClientEjbE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::operator()(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v3 = *(void *)(**(void **)(a1 + 16) + 64);
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)v3 + 16))(v3, *a2, *a3);
}

__n128 std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1487178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_1F1487178;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

void std::__function::__func<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0,std::allocator<HALS_Device::SetReferenceStreamStateForClient(unsigned int,BOOL)::$_0>,void ()(HALS_Client *,BOOL)>::~__func()
{
}

uint64_t ___ZN11HALS_Device10ClientDiedEP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 824))(*(void *)(a1 + 40), *(void *)(a1 + 48));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF6BBC0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void HALS_Device::UpdateInternalIOContext(HALS_Device *this)
{
  uint64_t v2 = (AMCP::Feature_Flags *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 832))(this);
  if (v2)
  {
    if (AMCP::Feature_Flags::run_hybrid_hal(v2, v3))
    {
      v32[0] = 0;
      v32[1] = 0;
      HALS_System::GetInstance(&cf, 0, v32);
      HALS_IOContext_Manager::create_stream_info_for_device((HALS_IOContext_Manager *)&__p, *((os_unfair_lock_s **)cf + 174), this);
      if (p_cf) {
        std::__shared_weak_count::__release_shared[abi:ne180100](p_cf);
      }
      v31[0] = 0;
      v31[1] = 0;
      HALS_System::GetInstance(&cf, 0, v31);
      uint64_t v4 = (os_unfair_lock_s *)*((void *)cf + 174);
      unsigned int v5 = *((_DWORD *)this + 4);
      unsigned int v6 = *((_DWORD *)this + 7);
      uint64_t v7 = (const void *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 208))(this);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v30, v7);
      char v8 = (*(uint64_t (**)(HALS_Device *))(*(void *)this + 224))(this);
      HALS_IOContext_Manager::device_arrived(v4, v5, v6, &v30, (uint64_t)&__p, v8 ^ 1);
      if (v30) {
        CFRelease(v30);
      }
      if (p_cf) {
        std::__shared_weak_count::__release_shared[abi:ne180100](p_cf);
      }
      if (__p) {
        operator delete(__p);
      }
    }
    uint64_t v9 = *((unsigned int *)this + 4);
    long long __p = (void *)0x676C6F62696F6374;
    LODWORD(p_p) = 0;
    CFTypeRef cf = 0;
    LODWORD(v33) = 0;
    (*(void (**)(HALS_Device *, uint64_t, void **, uint64_t, uint64_t *, CFTypeRef *, void, void, void))(*(void *)this + 112))(this, v9, &__p, 8, &v33, &cf, 0, 0, 0);
    CFTypeRef v10 = cf;
    CFTypeRef v28 = cf;
    __int16 v29 = 1;
    long long __p = 0;
    p_p = &__p;
    uint64_t v26 = 0x2000000000;
    int v27 = 0;
    CFTypeRef cf = 0;
    p_CFTypeRef cf = (std::__shared_weak_count *)&cf;
    uint64_t v22 = 0x2000000000;
    char v23 = 0;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 1174405120;
    uint64_t v17[2] = ___ZN11HALS_Device23UpdateInternalIOContextEv_block_invoke;
    v17[3] = &unk_1F1486EE8;
    v17[6] = this;
    CFTypeRef v18 = v10;
    __int16 v19 = 1;
    if (v10) {
      CFRetain(v10);
    }
    v17[4] = &cf;
    v17[5] = &__p;
    uint64_t v11 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
    HALB_CommandGate::ExecuteCommand(v11, (uint64_t)v17);
    unint64_t v12 = (HALS_ObjectMap *)*((unsigned int *)p_p + 6);
    if (v12 && !LOBYTE(p_cf[1].__vftable))
    {
      uint64_t v13 = (unsigned int *)HALS_ObjectMap::CopyObjectByObjectID(v12);
      uint64_t v15 = (HALS_ObjectMap *)v13;
      if (v13)
      {
        uint64_t v16 = v13[4];
        uint64_t v33 = 0x676C6F6261636F6DLL;
        int v34 = 0;
        CFTypeRef v35 = v28;
        (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, CFTypeRef *, void, void, void))(*(void *)v13 + 120))(v13, v16, &v33, 8, &v35, 0, 0, 0);
      }
      HALS_ObjectMap::ReleaseObject(v15, v14);
    }
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v18);
    _Block_object_dispose(&cf, 8);
    _Block_object_dispose(&__p, 8);
    CACFDictionary::~CACFDictionary((CACFDictionary *)&v28);
  }
}

void sub_1BAF6BF18(void *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAF6BED8);
}

void sub_1BAF6BF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p)
{
  CACFDictionary::~CACFDictionary(v23);
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&__p, 8);
  CACFDictionary::~CACFDictionary((CACFDictionary *)(v24 - 128));
  _Unwind_Resume(a1);
}

void ___ZN11HALS_Device23UpdateInternalIOContextEv_block_invoke(void *a1)
{
  uint64_t v2 = a1[6];
  int v3 = *(_DWORD *)(v2 + 600);
  if (!v3)
  {
    v9[0] = 0;
    v9[1] = 0;
    HALS_System::GetInstance(&v10, 0, v9);
    uint64_t v4 = a1[7];
    uint64_t v13 = 0;
    uint64_t v14 = &v13;
    uint64_t v15 = 0x2000000000;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    uint64_t v12[2] = ___ZN11HALS_System15CreateIOContextEP11HALS_ClientPK14__CFDictionary_block_invoke;
    uint64_t v12[3] = &unk_1E6232F88;
    long long v12[4] = &v13;
    void v12[5] = v10;
    v12[6] = 0;
    unsigned int v5 = (HALB_Mutex *)(*(uint64_t (**)(uint64_t))(*(void *)v10 + 56))(v10);
    HALB_CommandGate::ExecuteCommand(v5, (uint64_t)v12);
    unsigned int v6 = (unsigned int *)v14[3];
    if (v6)
    {
      uint64_t v7 = v6[4];
      uint64_t v17 = 0x676C6F6261636F6DLL;
      int v18 = 0;
      uint64_t v19 = v4;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, void, void, void))(*(void *)v6 + 120))(v6, v7, &v17, 8, &v19, 0, 0, 0);
      uint64_t v8 = v14[3];
    }
    else
    {
      uint64_t v8 = 0;
    }
    _Block_object_dispose(&v13, 8);
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    int v3 = *(_DWORD *)(v8 + 16);
    *(_DWORD *)(v8 + 72) = *(_DWORD *)(v2 + 16);
    *(_DWORD *)(v2 + 600) = v3;
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
  }
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = v3;
}

void sub_1BAF6C178(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void __destroy_helper_block_e8_56c20_ZTS14CACFDictionary(uint64_t a1)
{
}

CFTypeRef __copy_helper_block_e8_56c20_ZTS14CACFDictionary(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 56);
  *(void *)(a1 + 56) = result;
  int v4 = *(unsigned __int8 *)(a2 + 64);
  *(unsigned char *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  if (v4) {
    BOOL v5 = result == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    return CFRetain(result);
  }
  return result;
}

uint64_t HALS_Device::GetNeighborStartingChannel(HALS_Device *this, const HALS_Stream *a2, HALS_IODevice *a3)
{
  uint64_t v5 = 1;
  unsigned int NumberStreams = HALS_IODevice::GetNumberStreams(a2, 1);
  if (NumberStreams >= 2)
  {
    unsigned int v7 = NumberStreams;
    int v8 = 1;
    uint64_t v9 = (HALS_Stream *)HALS_IODevice::CopyStreamByIndex(a2, 1, 0);
    do
    {
      uint64_t v10 = (HALS_ObjectMap *)HALS_IODevice::CopyStreamByIndex(a2, 1, v8);
      unint64_t v12 = v10;
      if (v10)
      {
        if (v10 == this)
        {
          if (v9)
          {
            int v15 = (*(uint64_t (**)(HALS_Stream *))(*(void *)v9 + 200))(v9);
            uint64_t v5 = HALS_Stream::GetNumberChannels(v9) + v15;
          }
          int v14 = 2;
        }
        else
        {
          HALS_ObjectMap::RetainObject(v10, v11);
          HALS_ObjectMap::ReleaseObject(v9, v13);
          int v14 = 0;
          uint64_t v9 = v12;
        }
      }
      else
      {
        int v14 = 4;
      }
      HALS_ObjectMap::ReleaseObject(v12, v11);
      if ((v14 | 4) != 4) {
        break;
      }
      ++v8;
    }
    while (v7 != v8);
    HALS_ObjectMap::ReleaseObject(v9, v16);
  }
  return v5;
}

void sub_1BAF6C338(_Unwind_Exception *a1, HALS_Object *a2)
{
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_Device::GetDSPLatencyForClient(HALS_Device *this, char a2, HALS_Client *a3)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x3002000000;
  uint64_t v11 = __Block_byref_object_copy__65_18653;
  unint64_t v12 = __Block_byref_object_dispose__66_18654;
  char v13 = 0;
  char v14 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___ZNK11HALS_Device22GetDSPLatencyForClientEbP11HALS_Client_block_invoke;
  uint64_t v6[3] = &unk_1E62363B8;
  void v6[4] = &v8;
  void v6[5] = this;
  char v7 = a2;
  void v6[6] = a3;
  int v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_Device *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = v9[5];
  _Block_object_dispose(&v8, 8);
  return v4;
}

void sub_1BAF6C464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK11HALS_Device22GetDSPLatencyForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t result = HALS_Device::_GetDSPLatencyForClient(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  *(unsigned char *)(v3 + 44) = BYTE4(result);
  *(_DWORD *)(v3 + 40) = result;
  return result;
}

uint64_t HALS_Device::_GetDSPLatencyForClient(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4 = HALS_Device::ClientDSPInfo::find(a1 + 616, a3);
  if (!v4) {
    goto LABEL_4;
  }
  if (!a2)
  {
    uint64_t v4 = (uint64_t *)v4[8];
    if (!v4) {
      goto LABEL_4;
    }
LABEL_6:
    LODWORD(v4) = HALS_Stream::GetStreamLatencyFrames((HALS_Stream *)v4);
    unsigned int v6 = v4 & 0xFFFFFF00;
    uint64_t v5 = 0x100000000;
    return v5 | v6 | v4;
  }
  uint64_t v4 = (uint64_t *)v4[3];
  if (v4) {
    goto LABEL_6;
  }
LABEL_4:
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  return v5 | v6 | v4;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(*(void ***)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(void **a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    do
    {
      uint64_t v2 = *v1;
      std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v1[4]);
      operator delete(v1);
      uint64_t v1 = (void **)v2;
    }
    while (v2);
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,void *>>>::operator()[abi:ne180100](char a1, void **a2)
{
  if (a1)
  {
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a2[4]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t __Block_byref_object_copy__292(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t __Block_byref_object_dispose__293(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (result) {
    return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](result);
  }
  return result;
}

uint64_t ___ZNK11HALS_Device31RationalizeDSPOffloadsForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(HALS_Device_HostedDSP **)(*(void *)(a1 + 40) + 608);
  if (v2)
  {
    HALS_Device_HostedDSP::RationalizeDSPOffloadsForClient((HALS_Device_HostedDSP *)&v6, v2, (HALS_Client *)*(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
    uint64_t v3 = v6;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t result = *(void *)(v4 + 40);
  *(void *)(v4 + 40) = v3;
  if (result)
  {
    return std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](result);
  }
  return result;
}

void sub_1BAF6C6AC(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

void *__Block_byref_object_copy__295(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  uint64_t v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__296(uint64_t a1)
{
}

void ___ZNK11HALS_Device20GetDSPTypesForClientEbP11HALS_Client_block_invoke(uint64_t a1)
{
  HALS_Device::_GetDSPTypesForClient((uint64_t *)&v6, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 48));
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v3 = v2 + 48;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)(v2 + 48));
  uint64_t v4 = v7;
  *(void *)(v2 + 40) = v6;
  *(void *)(v2 + 48) = v4;
  uint64_t v5 = v8;
  *(void *)(v2 + 56) = v8;
  if (v5)
  {
    v4[2] = v3;
    uint64_t v6 = &v7;
    char v7 = 0;
    uint64_t v8 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    *(void *)(v2 + 40) = v3;
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v4);
}

void sub_1BAF6C7A4(void *a1)
{
}

uint64_t *__Block_byref_object_copy__306(uint64_t a1, uint64_t a2)
{
  return std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)(a1 + 40), (void *)(a2 + 40));
}

void __Block_byref_object_dispose__307(uint64_t a1)
{
}

void ___ZN11HALS_Device26MirrorOtherDeviceClientDSPEbPKS__block_invoke(void *a1)
{
  uint64_t v1 = (const BOOL *)*(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
  uint64_t v2 = *(void *)(*(void *)(a1[5] + 8) + 24);
  uint64_t v3 = a1[7];
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](v6, (void *)(*(void *)(a1[6] + 8) + 40));
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  HALS_Device::_ConfigureDSPTypesForClient(v3, v1, v2, (uint64_t)v6, &v4);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v5[0]);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy((void *)v6[1]);
}

void sub_1BAF6C850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13)
{
}

uint64_t __Block_byref_object_copy__309(uint64_t result, void *a2)
{
  uint64_t v2 = a2[5];
  a2[5] = 0;
  *(void *)(result + 40) = v2;
  *(void *)(result + 48) = a2[6];
  a2[6] = 0;
  uint64_t v5 = a2[7];
  uint64_t v3 = a2 + 7;
  uint64_t v4 = v5;
  *(void *)(result + 56) = v5;
  uint64_t v6 = v3[1];
  *(void *)(result + 64) = v6;
  *(_DWORD *)(result + 72) = *((_DWORD *)v3 + 4);
  if (v6)
  {
    unint64_t v7 = *(void *)(v4 + 8);
    unint64_t v8 = *(void *)(result + 48);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        v7 %= v8;
      }
    }
    else
    {
      v7 &= v8 - 1;
    }
    *(void *)(v2 + 8 * v7) = result + 56;
    *uint64_t v3 = 0;
    v3[1] = 0;
  }
  return result;
}

uint64_t __Block_byref_object_dispose__310(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::~__hash_table(a1 + 40);
}

void ___ZNK11HALS_Device16CopyClientDSPMapEb_block_invoke(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(unsigned __int8 *)(a1 + 48);
  *(_OWORD *)long long __p = 0u;
  long long v37 = 0u;
  float v38 = 1.0;
  uint64_t v5 = *(uint64_t **)(v3 + 640);
  if (v5)
  {
    while (1)
    {
      uint64_t v6 = v4 ? v5 + 3 : v5 + 8;
      if (v6[2]) {
        break;
      }
LABEL_48:
      uint64_t v5 = (uint64_t *)*v5;
      if (!v5) {
        goto LABEL_49;
      }
    }
    unsigned int v39 = *((_DWORD *)v5 + 4);
    std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100]((uint64_t *)&v40, v6);
    unint64_t v7 = v39;
    unint64_t v8 = (unint64_t)__p[1];
    if (__p[1])
    {
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)__p[1]);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        unint64_t v1 = v39;
        if (__p[1] <= (void *)v39) {
          unint64_t v1 = v39 % (unint64_t)__p[1];
        }
      }
      else
      {
        unint64_t v1 = (LODWORD(__p[1]) - 1) & v39;
      }
      uint64_t v10 = (uint64_t **)*((void *)__p[0] + v1);
      if (v10)
      {
        for (uint64_t i = *v10; i; uint64_t i = (uint64_t *)*i)
        {
          unint64_t v12 = i[1];
          if (v12 == v39)
          {
            if (*((_DWORD *)i + 4) == v39) {
              goto LABEL_47;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if ((void *)v12 >= __p[1]) {
                v12 %= (unint64_t)__p[1];
              }
            }
            else
            {
              v12 &= (unint64_t)__p[1] - 1;
            }
            if (v12 != v1) {
              break;
            }
          }
        }
      }
    }
    char v13 = operator new(0x30uLL);
    char v14 = v13;
    void *v13 = 0;
    v13[1] = v7;
    *((_DWORD *)v13 + 4) = v7;
    int v15 = v41;
    uint64_t v13[3] = v40;
    v13[4] = v15;
    uint64_t v16 = (char *)(v13 + 4);
    uint64_t v17 = v42;
    v13[5] = v42;
    if (v17)
    {
      uint64_t v15[2] = v16;
      uint64_t v40 = &v41;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
    }
    else
    {
      uint64_t v13[3] = v16;
    }
    float v18 = (float)(unint64_t)(*((void *)&v37 + 1) + 1);
    if (!v8 || (float)(v38 * (float)v8) < v18)
    {
      BOOL v19 = (v8 & (v8 - 1)) != 0;
      if (v8 < 3) {
        BOOL v19 = 1;
      }
      unint64_t v20 = v19 | (2 * v8);
      unint64_t v21 = vcvtps_u32_f32(v18 / v38);
      if (v20 <= v21) {
        size_t v22 = v21;
      }
      else {
        size_t v22 = v20;
      }
      std::__hash_table<std::shared_ptr<AMCP::Graph::Timebase>,std::hash<std::shared_ptr<AMCP::Graph::Timebase>>,std::equal_to<std::shared_ptr<AMCP::Graph::Timebase>>,std::allocator<std::shared_ptr<AMCP::Graph::Timebase>>>::__rehash<true>((uint64_t)__p, v22);
      unint64_t v8 = (unint64_t)__p[1];
      if (((unint64_t)__p[1] & ((unint64_t)__p[1] - 1)) != 0)
      {
        if (__p[1] <= (void *)v7) {
          unint64_t v1 = v7 % (unint64_t)__p[1];
        }
        else {
          unint64_t v1 = v7;
        }
      }
      else
      {
        unint64_t v1 = (LODWORD(__p[1]) - 1) & v7;
      }
    }
    char v23 = __p[0];
    uint64_t v24 = (void *)*((void *)__p[0] + v1);
    if (v24)
    {
      *char v14 = *v24;
    }
    else
    {
      *char v14 = v37;
      *(void *)&long long v37 = v14;
      v23[v1] = &v37;
      if (!*v14) {
        goto LABEL_46;
      }
      unint64_t v25 = *(void *)(*v14 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v25 >= v8) {
          v25 %= v8;
        }
      }
      else
      {
        v25 &= v8 - 1;
      }
      uint64_t v24 = (char *)__p[0] + 8 * v25;
    }
    *uint64_t v24 = v14;
LABEL_46:
    ++*((void *)&v37 + 1);
LABEL_47:
    std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v41);
    goto LABEL_48;
  }
LABEL_49:
  uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(void *)(v26 + 64))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(*(void ***)(v26 + 56));
    *(void *)(v26 + 56) = 0;
    uint64_t v27 = *(void *)(v26 + 48);
    if (v27)
    {
      for (uint64_t j = 0; j != v27; ++j)
        *(void *)(*(void *)(v26 + 40) + 8 * j) = 0;
    }
    *(void *)(v26 + 64) = 0;
  }
  __int16 v29 = __p[0];
  __p[0] = 0;
  CFStringRef v30 = *(void **)(v26 + 40);
  *(void *)(v26 + 40) = v29;
  if (v30) {
    operator delete(v30);
  }
  unint64_t v32 = (unint64_t)__p[1];
  uint64_t v31 = v37;
  *(void *)(v26 + 56) = v37;
  *(void *)(v26 + 48) = v32;
  __p[1] = 0;
  uint64_t v33 = *((void *)&v37 + 1);
  *(void *)(v26 + 64) = *((void *)&v37 + 1);
  *(float *)(v26 + 72) = v38;
  if (v33)
  {
    unint64_t v34 = *(void *)(v31 + 8);
    if ((v32 & (v32 - 1)) != 0)
    {
      if (v34 >= v32) {
        v34 %= v32;
      }
    }
    else
    {
      v34 &= v32 - 1;
    }
    uint64_t v31 = 0;
    *(void *)(*(void *)(v26 + 40) + 8 * v34) = v26 + 56;
    long long v37 = 0uLL;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node((void **)v31);
  CFTypeRef v35 = __p[0];
  __p[0] = 0;
  if (v35) {
    operator delete(v35);
  }
}

void sub_1BAF6CC58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v17[4]);
  operator delete(v17);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a17);
  std::__hash_table<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::set<DSP_Host_Types::AudioProcessingType>>>>::__deallocate_node(a11);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL StreamLessThan(const HALS_Stream *a1, const HALS_Stream *a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    unsigned int v4 = (*(uint64_t (**)(const HALS_Stream *))(*(void *)a1 + 200))(a1);
    return v4 < (*(unsigned int (**)(const HALS_Stream *))(*(void *)a2 + 200))(a2);
  }
  return v2;
}

uint64_t HALS_Device::CopyIOEngineReplacer(void)const::$_0::operator()(HALS_ObjectMap ***a1, int a2)
{
  if (!a2) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    memset(v8, 0, 40);
    (*(void (**)(HALS_ObjectMap *, void, uint64_t, _OWORD *))(*(void *)**a1 + 440))(**a1, 0, v4, v8);
    memset(&v7, 0, sizeof(v7));
    (*((void (**)(void))*a1[1] + 55))();
    if (*(double *)v8 != v7.mSampleRate
      || DWORD2(v8[0]) != v7.mFormatID
      || *(void *)&v8[1] != *(void *)&v7.mBytesPerPacket
      || *(void *)((char *)&v8[1] + 12) != *(void *)&v7.mChannelsPerFrame
      || !CA::Implementation::EquivalentFormatFlags((CA::Implementation *)v8, &v7, 0, 0))
    {
      break;
    }
    uint64_t v4 = (v4 + 1);
    if (a2 == v4) {
      return 0;
    }
  }
  HALS_ObjectMap::ReleaseObject(**a1, v5);
  **a1 = 0;
  return 561214578;
}

void sub_1BAF6D1AC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BAF6D458(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__value_func<void ()(DSP_Host_Types::MutationRequestConfiguration const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_1BAF6D5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void DSP_Factory_Bridge::~DSP_Factory_Bridge(id *this)
{
  JUMPOUT(0x1C1859840);
}

{
}

void DSP_PropertySetWrapper::getHostedDSPProperty(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, applesauce::CF::DataRef *a4@<X8>)
{
  uint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    if (*(unsigned char *)(a3 + 8))
    {
      id v8 = *(id *)a3;
      uint64_t v6 = *(void **)(a1 + 16);
    }
    else
    {
      id v8 = 0;
    }
    id v11 = v8;
    objc_msgSend(v6, "getHostedDSPPropertyAtAddress:withQualifierData:", *(void *)a2, *(unsigned int *)(a2 + 8), v8);
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v10 = v9;
    if (v9) {
      CFRetain(v9);
    }
    applesauce::CF::DataRef::DataRef(a4, v10);
  }
  else
  {
    *(void *)a4 = 0;
  }
}

void sub_1BAF6D738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t DSP_PropertySetWrapper::setHostedDSPProperty(DSP_PropertySetWrapper *this, const AudioObjectPropertyAddress *a2, id *a3, id *a4)
{
  uint64_t v8 = 2003329396;
  id v9 = objc_alloc(MEMORY[0x1E4F28C58]);
  if (*((void *)this + 2) && (objc_opt_respondsToSelector() & 1) != 0)
  {
    if (a4) {
      a4 = (id *)*a4;
    }
    uint64_t v10 = (void *)*((void *)this + 2);
    uint64_t v11 = *(void *)&a2->mSelector;
    uint64_t mElement = a2->mElement;
    id v13 = *a3;
    id v16 = v9;
    LODWORD(mElement) = objc_msgSend(v10, "setHostedDSPPropertyAtAddress:withData:withQualifier:error:", v11, mElement, v13, a4, &v16);
    id v14 = v16;

    if (mElement) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = 2003329396;
    }
    id v9 = v14;
  }

  return v8;
}

void sub_1BAF6D850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *DSP_PropertySetWrapper::hasHostedDSPProperty(DSP_PropertySetWrapper *this, const AudioObjectPropertyAddress *a2)
{
  uint64_t result = (void *)*((void *)this + 2);
  if (result) {
    return objc_msgSend(result, "hasHostedDSPPropertyAtAddress:", *(void *)&a2->mSelector, a2->mElement);
  }
  return result;
}

void DSP_PropertySetWrapper::getHostedDSPPropertyInfoArray(DSP_PropertySetWrapper *this@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = &unk_1F1487398;
  a2[4] = 0;
  a2[5] = 0;
  a2[3] = 0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    id v4 = [v2 getHostedDSPPropertyInfoArray];
    uint64_t v5 = v4;
    if (v4) {
      CFRetain(v4);
    }
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);

    (*(void (**)(void *, CFTypeRef *))(*a2 + 32))(a2, &cf);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1BAF6D958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);

  DSP_Host_Types::DSPPropertyInfoArray::~DSPPropertyInfoArray(v2);
  _Unwind_Resume(a1);
}

void DSP_PropertySetWrapper::~DSP_PropertySetWrapper(DSP_PropertySetWrapper *this)
{
  DSP_PropertySetWrapper::~DSP_PropertySetWrapper(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;

  *(void *)this = &unk_1F14872B8;
  uint64_t v2 = (void *)*((void *)this + 2);
  *((void *)this + 2) = 0;
}

uint64_t DSP_ProcessorWrapper::getProcessorPropertySet@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 48);
  *a2 = *(void *)(this + 40);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void DSP_ProcessorWrapper::adaptToConfigurationChange(DSP_ProcessorWrapper *this@<X0>, const DSP_Host_Types::AdaptRequest *a2@<X1>, HAL_DSP_IOCallbacks *a3@<X2>, uint64_t a4@<X8>)
{
  DSP_Host_Types::AdaptResponse::AdaptResponse((DSP_Host_Types::AdaptResponse *)a4);
  id v8 = objc_alloc(MEMORY[0x1E4F28C58]);
  id v9 = (void *)*((void *)this + 4);
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(const DSP_Host_Types::AdaptRequest *, CFTypeRef *))(*(void *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v19, cf);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v10 = (id)v19;
  id v18 = v8;
  uint64_t v11 = [v9 adaptToConfigurationChange:v10 withCallbacks:a3 error:&v18];
  id v12 = v18;

  if (v19) {
    CFRelease(v19);
  }
  id v13 = v11;
  id v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v17, v14);

  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a4 + 32))(a4, &v17);
  if (v17) {
    CFRelease(v17);
  }
  if (!*(unsigned char *)(a4 + 44))
  {
    *(_DWORD *)(a4 + 40) = 0;
    *(unsigned char *)(a4 + 44) = 1;
  }
  uint64_t v15 = [v12 code];
  *(void *)(a4 + 72) = v15;
  if (v15) {
    id v16 = "adaptToConfigurationChange UNSUPPORTED";
  }
  else {
    id v16 = "adaptToConfigurationChange SUCCEEDED";
  }
  DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(a2, v16);
}

void sub_1BAF6DC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&a9);

  DSP_Host_Types::AdaptResponse::~AdaptResponse(v15);
  _Unwind_Resume(a1);
}

void DSP_ProcessorWrapper::negotiateConfigurationChange(DSP_ProcessorWrapper *this@<X0>, const DSP_Host_Types::NegotiateRequest *a2@<X1>, uint64_t a3@<X8>)
{
  if (*((unsigned char *)a2 + 65)) {
    BOOL v6 = *((unsigned char *)a2 + 64) == 0;
  }
  else {
    BOOL v6 = 1;
  }
  char v7 = !v6;
  id v8 = objc_alloc(MEMORY[0x1E4F28C58]);
  id v9 = (void *)*((void *)this + 4);
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(const DSP_Host_Types::NegotiateRequest *, CFTypeRef *))(*(void *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v21, cf);
  if (cf) {
    CFRelease(cf);
  }
  uint64_t v10 = (id)v21;
  id v20 = v8;
  uint64_t v11 = [v9 negotiateConfigurationChange:v10 error:&v20];
  id v12 = v20;

  if (v21) {
    CFRelease(v21);
  }
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = &unk_1F1487440;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = -1;
  id v13 = v11;
  id v14 = v13;
  if (v13) {
    CFRetain(v13);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v19, v14);

  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a3 + 32))(a3, &v19);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v15 = [v12 code];
  *(void *)(a3 + 96) = v15;
  if (v15)
  {
    id v16 = "negotiateConfigurationChange UNSUPPORTED";
LABEL_25:
    DSP_Host_Types::ConfigurationChangeRequest::debug_log_device_summary(a2, v16);
    goto LABEL_26;
  }
  if (*((unsigned char *)a2 + 41)) {
    BOOL v17 = *((unsigned char *)a2 + 40) == 0;
  }
  else {
    BOOL v17 = 1;
  }
  if (v17) {
    char v18 = 1;
  }
  else {
    char v18 = v7;
  }
  if ((v18 & 1) == 0)
  {
    id v16 = "negotiateConfigurationChange";
    goto LABEL_25;
  }
LABEL_26:
}

void sub_1BAF6DE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse(v15);

  _Unwind_Resume(a1);
}

void DSP_ProcessorWrapper::simulateConfigurationChange(DSP_ProcessorWrapper *this@<X0>, const DSP_Host_Types::NegotiateRequest *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = objc_alloc(MEMORY[0x1E4F28C58]);
  char v7 = (void *)*((void *)this + 4);
  CFTypeRef cf = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  (*(void (**)(const DSP_Host_Types::NegotiateRequest *, CFTypeRef *))(*(void *)a2 + 24))(a2, &cf);
  mcp_applesauce::CF::Dictionary_Builder::get_dictionary((applesauce::CF::DictionaryRef *)&v15, cf);
  if (cf) {
    CFRelease(cf);
  }
  id v8 = (id)v15;
  id v14 = v6;
  id v9 = [v7 simulateConfigurationChange:v8 error:&v14];
  id v10 = v14;

  if (v15) {
    CFRelease(v15);
  }
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = &unk_1F1487440;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = -1;
  id v11 = v9;
  id v12 = v11;
  if (v11) {
    CFRetain(v11);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v13, v12);

  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)a3 + 32))(a3, &v13);
  if (v13) {
    CFRelease(v13);
  }
  *(void *)(a3 + 96) = [v10 code];
}

void sub_1BAF6E0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  DSP_Host_Types::NegotiateResponse::~NegotiateResponse(v15);

  _Unwind_Resume(a1);
}

void DSP_ProcessorWrapper::~DSP_ProcessorWrapper(DSP_ProcessorWrapper *this)
{
  DSP_ProcessorWrapper::~DSP_ProcessorWrapper(this);

  JUMPOUT(0x1C1859840);
}

{
  void *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void v8[4];
  void v9[5];

  v9[4] = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F1487320;
  uint64_t v2 = (void *)*((void *)this + 3);
  uint64_t v9[3] = 0;
  [v2 setMutationRequestListener:v9];
  std::__function::__value_func<void ()(DSP_Host_Types::MutationRequestConfiguration const&)>::~__value_func[abi:ne180100](v9);
  uint64_t v3 = (void *)*((void *)this + 3);
  _OWORD v8[3] = 0;
  [v3 setPropertyChangeListener:v8];
  std::__function::__value_func<void ()(AudioObjectPropertyAddress const&)>::~__value_func[abi:ne180100](v8);
  [*((id *)this + 3) setOwner:0];
  id v4 = (std::__shared_weak_count *)*((void *)this + 6);
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (void *)*((void *)this + 4);
  *((void *)this + 4) = 0;

  id v6 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }

  char v7 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BAF6E244(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__shared_ptr_emplace<DSP_PropertySetWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_PropertySetWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487638;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_PropertySetWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

BOOL DSP_Host::loadBypass(DSP_Host *this)
{
  if (*((void *)this + 2)) {
    return 0;
  }
  uint64_t v3 = objc_alloc_init(DSP_HAL_Bypass);
  id v4 = v3;
  if (v3)
  {
    [(DSP_HAL_Bypass *)v3 createFactory];
    if (objc_claimAutoreleasedReturnValue()) {
      operator new();
    }
  }
  DSP_Host::initProperties(this);
  BOOL v1 = *((_DWORD *)this + 6) == 2;

  return v1;
}

void sub_1BAF6E3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void DSP_Host::initProperties(DSP_Host *this)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)this + 2);
  if (v1)
  {
    uint64_t v2 = *(void **)(v1 + 8);
    if (v2)
    {
      id v4 = v2;
      uint64_t v5 = objc_opt_respondsToSelector();
      if (v5)
      {
        uint64_t v6 = [v4 getFactoryPropertySet];
        char v7 = operator new(0x30uLL);
        v7[1] = 0;
        uint64_t v7[2] = 0;
        *char v7 = &unk_1F1487638;
        void v7[3] = &unk_1F14872B8;
        v7[4] = 0;
        void v7[5] = v6;
        id v8 = (std::__shared_weak_count *)*((void *)this + 5);
        *((void *)this + 4) = v7 + 3;
        *((void *)this + 5) = v7;
        if (v8) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        }
      }
      else
      {
        AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v5);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
        id v9 = *v12;
        AMCP::Log::Scope::get_os_log_t(*v12);
        objc_claimAutoreleasedReturnValue();
        if (*(void *)v13) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
        }
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          id v10 = pthread_self();
          mach_port_t v11 = pthread_mach_thread_np(v10);
          LODWORD(v12) = 67109634;
          HIDWORD(v12) = v11;
          *(_WORD *)CFTypeRef v13 = 2080;
          *(void *)&uint64_t v13[2] = "DSP_Host.mm";
          __int16 v14 = 1024;
          int v15 = 478;
          _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] Unable to acquire factory properties interface from the Hosted DSP libary", (uint8_t *)&v12, 0x18u);
        }
      }
    }
  }
}

void sub_1BAF6E5B4(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

AMCP::Log::Scope_Registry *DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::LoadTypeLogging::~LoadTypeLogging(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v8, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v8;
  AMCP::Log::Scope::get_os_log_t(*v8);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v9);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = pthread_self();
    mach_port_t v4 = pthread_mach_thread_np(v3);
    uint64_t v5 = **(unsigned int **)a1;
    if (v5 > 4) {
      uint64_t v6 = "<UNKNOWN>";
    }
    else {
      uint64_t v6 = off_1E62364C0[v5];
    }
    LODWORD(v8) = 67110146;
    HIDWORD(v8) = v4;
    *(_WORD *)id v9 = 2080;
    *(void *)&uint64_t v9[2] = "DSP_Host.mm";
    __int16 v10 = 1024;
    int v11 = 329;
    __int16 v12 = 1024;
    int v13 = v5;
    __int16 v14 = 2080;
    int v15 = v6;
    _os_log_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d [hal_dsp] DSP_Host constructed type %u (%s)", (uint8_t *)&v8, 0x28u);
  }

  return a1;
}

void sub_1BAF6E730(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::FactoryBridgeWithLibary::~FactoryBridgeWithLibary(uint64_t a1)
{
  DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::FactoryBridgeWithLibary::~FactoryBridgeWithLibary(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::FactoryBridgeWithLibary::~FactoryBridgeWithLibary(uint64_t a1)
{
  *(void *)a1 = &unk_1F1487688;
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  return a1;
}

uint64_t DSP_Host::DSP_Host(uint64_t a1, const BOOL *a2)
{
  int v2 = (int)a2;
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  *(_DWORD *)(a1 + 24) = 0;
  mach_port_t v4 = (int *)(a1 + 24);
  *(void *)(a1 + 48) = 850045863;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 120) = 0;
  uint64_t v16 = a1 + 24;
  if ((AMCP::Feature_Flags::force_mock_dsp_type(0, a2) & 1) == 0 && v2 != 2)
  {
    if (v2 != 1)
    {
LABEL_12:
      if (objc_alloc_init(DSP_ADM)) {
        operator new();
      }
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      id v8 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      if (*(void *)v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
      }
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        __int16 v12 = pthread_self();
        mach_port_t v13 = pthread_mach_thread_np(v12);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v13;
        *(_WORD *)char v18 = 2080;
        *(void *)&uint64_t v18[2] = "DSP_Host.mm";
        __int16 v19 = 1024;
        int v20 = 392;
        _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] ADM library instance could not be allocated.", buf, 0x18u);
      }

      if (!*(void *)(a1 + 16))
      {
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        __int16 v10 = **(NSObject ***)buf;
        AMCP::Log::Scope::get_os_log_t(**(id **)buf);
        objc_claimAutoreleasedReturnValue();
        if (*(void *)v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
        }
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          __int16 v14 = pthread_self();
          mach_port_t v15 = pthread_mach_thread_np(v14);
          *(_DWORD *)AudioStreamBasicDescription buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)char v18 = 2080;
          *(void *)&uint64_t v18[2] = "DSP_Host.mm";
          __int16 v19 = 1024;
          int v20 = 398;
          _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d [hal_dsp] ADM library factory object could not be allocated.", buf, 0x18u);
        }

        DSP_Host::loadBypass((DSP_Host *)a1);
      }

      DSP_Host::initProperties((DSP_Host *)a1);
      goto LABEL_25;
    }
LABEL_11:
    if (DSP_Host::loadBypass((DSP_Host *)a1)) {
      goto LABEL_25;
    }
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
  uint64_t v5 = objc_alloc_init(DSP_HAL_Mock);
  uint64_t v6 = v5;
  if (v5)
  {
    [(DSP_HAL_Mock *)v5 createFactory:97];
    if (objc_claimAutoreleasedReturnValue()) {
      operator new();
    }
  }
  DSP_Host::initProperties((DSP_Host *)a1);
  int v7 = *v4;

  if (v7 != 3) {
    goto LABEL_11;
  }
LABEL_25:
  DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::LoadTypeLogging::~LoadTypeLogging((AMCP::Log::Scope_Registry *)&v16);
  return a1;
}

void sub_1BAF6EC68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v6 = v5;

  DSP_Host::DSP_Host(DSP_Factory_Bridge *,DSP_Host::DefaultConstruction)::LoadTypeLogging::~LoadTypeLogging((AMCP::Log::Scope_Registry *)va);
  id v8 = (std::__shared_weak_count *)v2[15];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::mutex::~mutex(v3);
  id v9 = (std::__shared_weak_count *)v2[5];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = v2[2];
  v2[2] = 0;
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
  }
  int v11 = (std::__shared_weak_count *)v2[1];
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<DSP_ProcessorWrapper>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_ProcessorWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14876C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_ProcessorWrapper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14876C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t DSP_Host::getConcurrentQueue(void)::TaskQueue::rt_enqueue(uint64_t a1, caulk::concurrent::message *a2)
{
  return caulk::concurrent::messenger::enqueue(*(caulk::concurrent::messenger **)(a1 + 8), a2);
}

void DSP_Host::getConcurrentQueue(void)::TaskQueue::~TaskQueue(void *a1)
{
  *a1 = &unk_1F1487760;
  uint64_t v1 = a1 + 1;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](a1 + 1, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v1, 0);

  JUMPOUT(0x1C1859840);
}

void *DSP_Host::getConcurrentQueue(void)::TaskQueue::~TaskQueue(void *a1)
{
  *a1 = &unk_1F1487760;
  int v2 = a1 + 1;
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](a1 + 1, 0);
  std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v2, 0);
  return a1;
}

uint64_t std::__shared_ptr_emplace<DSP_Host::getConcurrentQueue(void)::TaskQueue,std::allocator<DSP_Host::getConcurrentQueue(void)::TaskQueue>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::__shared_ptr_emplace<DSP_Host::getConcurrentQueue(void)::TaskQueue,std::allocator<DSP_Host::getConcurrentQueue(void)::TaskQueue>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487710;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<DSP_Host::getConcurrentQueue(void)::TaskQueue,std::allocator<DSP_Host::getConcurrentQueue(void)::TaskQueue>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487710;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void AMCP::make_string_for_class_id(AMCP *this@<X0>, int16x8_t *a2@<X8>)
{
  unsigned int v2 = this;
  AMCP::get_class_traits((AMCP *)&v20, this);
  int16x8_t v4 = v22;
  int16x8_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v23 = 0;
  int16x8_t v22 = 0uLL;
  if (v20.__r_.__value_.__r.__words[2])
  {
    std::string::size_type v21 = v20.__r_.__value_.__r.__words[2];
    operator delete((void *)v20.__r_.__value_.__r.__words[2]);
  }
  uint64_t v5 = HIBYTE(v25);
  int v6 = SHIBYTE(v25);
  if (v25 < 0) {
    uint64_t v5 = v24.i64[1];
  }
  if (v5 != 7) {
    goto LABEL_12;
  }
  int v7 = (void *)v24.i64[0];
  id v8 = &v24;
  if (v25 < 0) {
    id v8 = (int16x8_t *)v24.i64[0];
  }
  if (v8->i32[0] != 1852534357 || *(__int32 *)((char *)v8->i32 + 3) != 1853321070)
  {
LABEL_12:
    *a2 = v24;
    a2[1].i64[0] = v25;
    return;
  }
  v19.__r_.__value_.__s.__data_[9] = 0;
  WORD1(v19.__r_.__value_.__r.__words[1]) = 0;
  HIDWORD(v19.__r_.__value_.__r.__words[1]) = 0;
  v19.__r_.__value_.__r.__words[2] = 0xA00000000000000;
  int v10 = v8->i32[0];
  __int16 v11 = v8->i16[2];
  v19.__r_.__value_.__s.__data_[6] = v8->i8[6];
  WORD2(v19.__r_.__value_.__r.__words[0]) = v11;
  LODWORD(v19.__r_.__value_.__l.__data_) = v10;
  strcpy(&v19.__r_.__value_.__s.__data_[7], " ");
  v4.i32[0] = bswap32(v2);
  *(int8x8_t *)v4.i8 = vzip1_s8(*(int8x8_t *)v4.i8, *(int8x8_t *)v4.i8);
  v12.i64[0] = 0x1F0000001FLL;
  v12.i64[1] = 0x1F0000001FLL;
  v13.i64[0] = 0x5F0000005FLL;
  v13.i64[1] = 0x5F0000005FLL;
  *(int8x8_t *)v4.i8 = vbsl_s8((int8x8_t)vmovn_s32((int32x4_t)vcgtq_u32(v13, (uint32x4_t)vsraq_n_s32(v12, vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v4.i8), 0x18uLL), 0x18uLL))), *(int8x8_t *)v4.i8, (int8x8_t)0x2E002E002E002ELL);
  char v18 = 4;
  LODWORD(__p) = vmovn_s16(v4).u32[0];
  BYTE4(__p) = 0;
  __int16 v14 = std::string::append(&v19, (const std::string::value_type *)&__p, 4uLL);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v20, "')", 2uLL);
  *(std::string *)a2->i8 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (v18 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v19.__r_.__value_.__l.__data_);
    if (v6 < 0) {
LABEL_22:
    }
      operator delete(v7);
  }
  else if (v6 < 0)
  {
    goto LABEL_22;
  }
}

uint64_t AMCP::get_stock_class_traits_list(AMCP *this)
{
  {
    AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_stock_class_traits_list(void)::once, memory_order_acquire) != -1)
  {
    int16x8_t v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_stock_class_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stock_class_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_stock_class_traits_list(void)::s_indesctructible_class_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_stock_class_traits_list(void)::$_0 &&>>()
{
  unsigned char v46[10] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)v0, 1634689642, 0, &AMCP::Static_Class_Traits<1634689642u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634957683u>::k_valid_scopes, -1, "Object", 1634689642);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v1, 1634957683, 1634689642, &AMCP::Static_Class_Traits<1634957683u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634757735u>::k_valid_scopes, 0, "System", 1634957683);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v2, 1634757735, 1634689642, &AMCP::Static_Class_Traits<1634757735u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1853189228u>::k_valid_scopes, 0, "Driver", 1634757735);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v3, 1853189228, 1634757735, &AMCP::Static_Class_Traits<1853189228u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1835299446u>::k_valid_scopes, 0, "Null Driver", 1853189228);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v4, 1835299446, 1634757735, &AMCP::Static_Class_Traits<1835299446u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633841016u>::k_valid_scopes, 0, "Meta Driver", 1835299446);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v5, 1633841016, 1634689642, &AMCP::Static_Class_Traits<1633841016u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633905771u>::k_valid_scopes, 0, "Box", 1633841016);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v6, 1633905771, 1634689642, &AMCP::Static_Class_Traits<1633905771u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633969526u>::k_valid_scopes, 0, "Clock", 1633905771);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v7, 1633969526, 1633905771, &AMCP::Static_Class_Traits<1633969526u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633773415u>::k_valid_scopes, 0, "Device", 1633969526);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v8, 1633773415, 1633969526, &AMCP::Static_Class_Traits<1633773415u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634956402u>::k_valid_scopes, 0, "Meta_Device", 1633773415);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v9, 1634956402, 1634689642, &AMCP::Static_Class_Traits<1634956402u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1836282994u>::k_valid_scopes, 0, "Stream", 1634956402);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v10, 1836282994, 1634956402, &AMCP::Static_Class_Traits<1836282994u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1633907820u>::k_valid_scopes, 0, "Meta_Stream", 1836282994);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v11, 1633907820, 1634689642, &AMCP::Static_Class_Traits<1633907820u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936483442u>::k_valid_scopes, 0, "Control", 1633907820);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v12, 1936483442, 1633907820, &AMCP::Static_Class_Traits<1936483442u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1818588780u>::k_valid_scopes, 0, "Slider Control", 1936483442);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v13, 1818588780, 1633907820, &AMCP::Static_Class_Traits<1818588780u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1986817381u>::k_valid_scopes, 0, "Level Control", 1818588780);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v14, 1986817381, 1818588780, &AMCP::Static_Class_Traits<1986817381u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1937072758u>::k_valid_scopes, 0, "Volume Control", 1986817381);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v15, 1937072758, 1818588780, &AMCP::Static_Class_Traits<1937072758u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936028007u>::k_valid_scopes, 0, "LFE Volume Control", 1937072758);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v16, 1936028007, 1818588780, &AMCP::Static_Class_Traits<1936028007u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1953458028u>::k_valid_scopes, 0, "Sidetone EQ Gain Control", 1936028007);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v17, 1953458028, 1633907820, &AMCP::Static_Class_Traits<1953458028u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1836414053u>::k_valid_scopes, 0, "Boolean Control", 1953458028);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v18, 1836414053, 1953458028, &AMCP::Static_Class_Traits<1836414053u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936682095u>::k_valid_scopes, 0, "Mute Control", 1836414053);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v19, 1936682095, 1953458028, &AMCP::Static_Class_Traits<1936682095u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1784767339u>::k_valid_scopes, 0, "Solo Control", 1936682095);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v20, 1784767339, 1953458028, &AMCP::Static_Class_Traits<1784767339u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1937072749u>::k_valid_scopes, 0, "Jack Control", 1784767339);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v21, 1937072749, 1953458028, &AMCP::Static_Class_Traits<1937072749u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1702259059u>::k_valid_scopes, 0, "LFE Mute Control", 1937072749);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v22, 1702259059, 1953458028, &AMCP::Static_Class_Traits<1702259059u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1885888878u>::k_valid_scopes, 0, "Reference Stream Enable Control", 1702259059);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v23, 1885888878, 1953458028, &AMCP::Static_Class_Traits<1885888878u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1885893481u>::k_valid_scopes, 0, "Phantom Power Control", 1885888878);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v24, 1885893481, 1953458028, &AMCP::Static_Class_Traits<1885893481u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1668049264u>::k_valid_scopes, 0, "Phase Invert Control", 1885893481);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v25, 1668049264, 1953458028, &AMCP::Static_Class_Traits<1668049264u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1952541794u>::k_valid_scopes, 0, "Clip Light Control", 1668049264);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v26, 1952541794, 1953458028, &AMCP::Static_Class_Traits<1952541794u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1819504226u>::k_valid_scopes, 0, "Talk Back Control", 1952541794);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v27, 1819504226, 1953458028, &AMCP::Static_Class_Traits<1819504226u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1650602615u>::k_valid_scopes, 0, "Listen Back Control", 1819504226);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v28, 1650602615, 1953458028, &AMCP::Static_Class_Traits<1650602615u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1999790690u>::k_valid_scopes, 0, "bb2w Control", 1650602615);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v29, 1999790690, 1953458028, &AMCP::Static_Class_Traits<1999790690u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1815241314u>::k_valid_scopes, 0, "w2bb Control", 1999790690);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v30, 1815241314, 1953458028, &AMCP::Static_Class_Traits<1815241314u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1718432370u>::k_valid_scopes, 0, "l2bb Control", 1815241314);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v31, 1718432370, 1953458028, &AMCP::Static_Class_Traits<1718432370u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1684895092u>::k_valid_scopes, 0, "fm2r Control", 1718432370);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v32, 1684895092, 1953458028, &AMCP::Static_Class_Traits<1684895092u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936483188u>::k_valid_scopes, 0, "dmut Control", 1684895092);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v33, 1936483188, 1633907820, &AMCP::Static_Class_Traits<1936483188u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1685287523u>::k_valid_scopes, 0, "Selector Control", 1936483188);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v34, 1685287523, 1936483188, &AMCP::Static_Class_Traits<1685287523u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1684370292u>::k_valid_scopes, 0, "Data Source Control", 1685287523);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v35, 1684370292, 1936483188, &AMCP::Static_Class_Traits<1684370292u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1668047723u>::k_valid_scopes, 0, "Data Destination Control", 1684370292);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v36, 1668047723, 1936483188, &AMCP::Static_Class_Traits<1668047723u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1852601964u>::k_valid_scopes, 0, "Clock Source Control", 1668047723);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v37, 1852601964, 1936483188, &AMCP::Static_Class_Traits<1852601964u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1751740518u>::k_valid_scopes, 0, "Line Level Control", 1852601964);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v38, 1751740518, 1936483188, &AMCP::Static_Class_Traits<1751740518u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936744814u>::k_valid_scopes, 0, "High Pass Filter Control", 1751740518);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v39, 1936744814, 1633907820, &AMCP::Static_Class_Traits<1936744814u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1651273579u>::k_valid_scopes, 0, "Stereo Pan Control", 1936744814);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v40, 1651273579, 1633907820, &AMCP::Static_Class_Traits<1651273579u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1936028002u>::k_valid_scopes, 0, "Block Control", 1651273579);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v41, 1936028002, 1651273579, &AMCP::Static_Class_Traits<1936028002u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1634627428u>::k_valid_scopes, 0, "Sidetone EQ Control", 1936028002);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v42, 1634627428, 1634689642, &AMCP::Static_Class_Traits<1634627428u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1768907630u>::k_valid_scopes, 0, "Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v43, 1768907630, 1634627428, &AMCP::Static_Class_Traits<1768907630u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1684371054u>::k_valid_scopes, 0, "IOContext Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v44, 1684371054, 1634627428, &AMCP::Static_Class_Traits<1684371054u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1919247982u>::k_valid_scopes, 0, "Device Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)&v45, 1919247982, 1634627428, &AMCP::Static_Class_Traits<1919247982u>::k_valid_scopes, (uint64_t)&AMCP::Static_Class_Traits<1685287022u>::k_valid_scopes, 0, "Reflector Node", 0);
  AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>((uint64_t)v46, 1685287022, 1634627428, &AMCP::Static_Class_Traits<1685287022u>::k_valid_scopes, (uint64_t)"N4AMCP25Clock_Filter_One_Pole_IIRE", 0, "DSP Node", 0);
  operator new();
}

void sub_1BAF6FE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  std::vector<AMCP::Live_Class_Traits>::__destroy_vector::operator()[abi:ne180100](&a10);
  MEMORY[0x1C1859840](v12, 0x20C40960023A9);
  unint64_t v14 = 3760;
  while (1)
  {
    uint64_t v15 = (void **)(&a12 + v14);
    if (SHIBYTE((&a10)[v14 / 8]) < 0) {
      operator delete(*(v15 - 4));
    }
    uint64_t v16 = *(v15 - 8);
    if (v16)
    {
      *(void *)(&a12 + v14 - 56) = v16;
      operator delete(v16);
    }
    v14 -= 80;
    if (!v14) {
      _Unwind_Resume(a1);
    }
  }
}

uint64_t AMCP::Live_Class_Traits::Live_Class_Traits<unsigned int const*>(uint64_t a1, int a2, int a3, const void *a4, uint64_t a5, int a6, char *a7, int a8)
{
  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int const*,unsigned int const*>((void *)(a1 + 16), a4, a5, (a5 - (uint64_t)a4) >> 2);
  *(_DWORD *)(a1 + 40) = a6;
  std::string::basic_string[abi:ne180100]<0>((void *)(a1 + 48), a7);
  *(_DWORD *)(a1 + 72) = a8;
  return a1;
}

void std::vector<AMCP::Live_Class_Traits>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::__destroy_at[abi:ne180100]<AMCP::Live_Class_Traits,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ***std::unique_ptr<std::vector<AMCP::Live_Class_Traits>>::reset[abi:ne180100](void ***result, void **a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    uint64_t v3 = v2;
    std::vector<AMCP::Live_Class_Traits>::__destroy_vector::operator()[abi:ne180100](&v3);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
void std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v14 = *a1;
  char v15 = *((unsigned char *)a1 + 8);
  long long v13 = *((_OWORD *)a1 + 1);
  uint64_t v4 = a1[4];
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  uint64_t v6 = a1 + 6;
  uint64_t v5 = a1[6];
  int v7 = *((_DWORD *)a1 + 10);
  *(void *)long long v16 = a1[7];
  *(void *)&v16[7] = *(uint64_t *)((char *)a1 + 63);
  char v8 = *((unsigned char *)a1 + 71);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  int v9 = *((_DWORD *)a1 + 18);
  uint64_t v10 = *a2;
  *((unsigned char *)a1 + 8) = *((unsigned char *)a2 + 8);
  *a1 = v10;
  LODWORD(v10) = *((_DWORD *)a2 + 10);
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  a1[4] = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  *((_DWORD *)a1 + 10) = v10;
  if (*((char *)a1 + 71) < 0) {
    operator delete((void *)*v6);
  }
  long long v11 = *((_OWORD *)a2 + 3);
  _OWORD v6[2] = a2[8];
  *(_OWORD *)uint64_t v6 = v11;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  *((_DWORD *)a1 + 18) = *((_DWORD *)a2 + 18);
  *a2 = v14;
  *((unsigned char *)a2 + 8) = v15;
  uint64_t v12 = (void *)a2[2];
  if (v12)
  {
    a2[3] = (uint64_t)v12;
    operator delete(v12);
  }
  *((_OWORD *)a2 + 1) = v13;
  a2[4] = v4;
  *((_DWORD *)a2 + 10) = v7;
  if (*((char *)a2 + 71) < 0) {
    operator delete((void *)a2[6]);
  }
  a2[6] = v5;
  a2[7] = *(void *)v16;
  *(uint64_t *)((char *)a2 + 63) = *(void *)&v16[7];
  *((unsigned char *)a2 + 71) = v8;
  *((_DWORD *)a2 + 18) = v9;
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5 = a1;
  unsigned int v6 = *(_DWORD *)a2;
  unsigned int v7 = *(_DWORD *)a3;
  if (*(_DWORD *)a2 >= *(_DWORD *)a1)
  {
    if (v7 >= v6) {
      return;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a2, a3);
    if (*(_DWORD *)a2 >= *(_DWORD *)v5) {
      return;
    }
    a1 = v5;
    char v8 = a2;
  }
  else
  {
    if (v7 >= v6)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2);
      if (*(_DWORD *)a3 >= *(_DWORD *)a2) {
        return;
      }
      a1 = a2;
    }
    char v8 = a3;
  }

  std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, v8);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a2, a3);
  if (*(_DWORD *)a4 < *(_DWORD *)a3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a3, a4);
    if (*(_DWORD *)a3 < *(_DWORD *)a2)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a2, a3);
      if (*(_DWORD *)a2 < *(_DWORD *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2);
      }
    }
  }
}

void std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a2, a3, a4);
  if (*(_DWORD *)a5 < *(_DWORD *)a4)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a4, a5);
    if (*(_DWORD *)a4 < *(_DWORD *)a3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a3, a4);
      if (*(_DWORD *)a3 < *(_DWORD *)a2)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a2, a3);
        if (*(_DWORD *)a2 < *(_DWORD *)a1)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2);
        }
      }
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*((_DWORD *)a2 - 20) < *(_DWORD *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<AMCP::Live_Class_Traits *&,AMCP::Live_Class_Traits *&>(a1, a2 - 10);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a2 - 10);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a1 + 20, a2 - 10);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a1 + 20, a1 + 30, a2 - 10);
      return 1;
    default:
      unsigned int v6 = a1 + 20;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,AMCP::Live_Class_Traits *>(a1, a1 + 10, a1 + 20);
      unsigned int v7 = a1 + 30;
      if (a1 + 30 == a2) {
        return 1;
      }
      uint64_t v8 = 0;
      int v9 = 0;
      break;
  }
  while (1)
  {
    unsigned int v10 = *(_DWORD *)v7;
    if (*(_DWORD *)v7 < *(_DWORD *)v6)
    {
      int v11 = *((_DWORD *)v7 + 1);
      char v30 = *((unsigned char *)v7 + 8);
      uint64_t v26 = (void *)v7[2];
      long long v25 = *(_OWORD *)(v7 + 3);
      uint64_t v7[2] = 0;
      void v7[3] = 0;
      v7[4] = 0;
      int v12 = *((_DWORD *)v7 + 10);
      char v28 = *((unsigned char *)v7 + 48);
      int v29 = v11;
      *(_OWORD *)unsigned int v31 = *(_OWORD *)((char *)v7 + 49);
      *(void *)&unsigned char v31[14] = *(uint64_t *)((char *)v7 + 63);
      char v27 = *((unsigned char *)v7 + 71);
      v7[7] = 0;
      v7[8] = 0;
      void v7[6] = 0;
      uint64_t v13 = v8;
      int v24 = *((_DWORD *)v7 + 18);
      while (1)
      {
        uint64_t v14 = v13;
        char v15 = (char *)a1 + v13;
        *((void *)v15 + 30) = *(uint64_t *)((char *)a1 + v13 + 160);
        v15[248] = *((unsigned char *)a1 + v13 + 168);
        long long v16 = *(void **)((char *)a1 + v13 + 256);
        if (v16)
        {
          *((void *)v15 + 33) = v16;
          operator delete(v16);
          *((void *)v15 + 34) = 0;
        }
        *((_OWORD *)v15 + 16) = *((_OWORD *)v15 + 11);
        *((void *)v15 + 34) = *((void *)v15 + 24);
        *((void *)v15 + 22) = 0;
        *((void *)v15 + 23) = 0;
        *((void *)v15 + 24) = 0;
        *((_DWORD *)v15 + 70) = *((_DWORD *)v15 + 50);
        uint64_t v17 = (void **)(v15 + 288);
        if (v15[311] < 0) {
          operator delete(*v17);
        }
        int v18 = (char *)a1 + v14;
        *(_OWORD *)uint64_t v17 = *(_OWORD *)((char *)a1 + v14 + 208);
        *((void *)v15 + 38) = *(uint64_t *)((char *)a1 + v14 + 224);
        v18[231] = 0;
        v18[208] = 0;
        *((_DWORD *)v18 + 78) = *(_DWORD *)((char *)a1 + v14 + 232);
        if (v14 == -160) {
          break;
        }
        unsigned int v19 = *((_DWORD *)v18 + 20);
        uint64_t v13 = v14 - 80;
        if (v10 >= v19)
        {
          uint64_t v20 = (uint64_t)a1 + v13 + 240;
          int v21 = (void **)((char *)a1 + v14 + 176);
          uint64_t v22 = (void **)((char *)a1 + v14 + 208);
          goto LABEL_16;
        }
      }
      int v21 = (void **)(v18 + 176);
      uint64_t v22 = (void **)(v18 + 208);
      uint64_t v20 = (uint64_t)a1;
LABEL_16:
      *(_DWORD *)uint64_t v20 = v10;
      *(_DWORD *)(v20 + 4) = v29;
      *(unsigned char *)(v20 + 8) = v30;
      uint64_t v23 = *v21;
      if (*v21)
      {
        *(void *)(v20 + 24) = v23;
        operator delete(v23);
      }
      *int v21 = v26;
      *(_OWORD *)(v20 + 24) = v25;
      *(_DWORD *)(v20 + 40) = v12;
      if (*(char *)(v20 + 71) < 0) {
        operator delete(*v22);
      }
      *(unsigned char *)uint64_t v22 = v28;
      *(_OWORD *)(v20 + 49) = *(_OWORD *)v31;
      *(void *)(v20 + 63) = *(void *)&v31[14];
      *(unsigned char *)(v20 + 71) = v27;
      *(_DWORD *)(v20 + 72) = v24;
      if (++v9 == 8) {
        return v7 + 10 == a2;
      }
    }
    unsigned int v6 = v7;
    v8 += 80;
    v7 += 10;
    if (v7 == a2) {
      return 1;
    }
  }
}

void std::__destroy_at[abi:ne180100]<AMCP::Live_Class_Traits,0>(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    *(void *)(a1 + 24) = v2;
    operator delete(v2);
  }
}

double AMCP::Clock_Filter_One_Pole_IIR::apply(AMCP::Clock_Filter_One_Pole_IIR *this, double a2)
{
  unsigned int v2 = *((_DWORD *)this + 6);
  double v3 = 0.0;
  if (v2 >= 2)
  {
    double v3 = 0.25;
    if (v2 >= 5)
    {
      double v3 = 0.5;
      if (v2 >= 9)
      {
        double v3 = 0.75;
        if (v2 >= 0x11) {
          double v3 = dbl_1BAFF9480[v2 < 0x81];
        }
      }
    }
  }
  *((_DWORD *)this + 6) = v2 + 1;
  double result = (1.0 - v3) * a2 + v3 * *((double *)this + 2);
  *((double *)this + 2) = result;
  return result;
}

double AMCP::Clock_Filter_One_Pole_IIR::reset(AMCP::Clock_Filter_One_Pole_IIR *this)
{
  double result = *((double *)this + 1);
  *((double *)this + 2) = result;
  return result;
}

void AMCP::Clock_Filter_One_Pole_IIR::~Clock_Filter_One_Pole_IIR(AMCP::Clock_Filter_One_Pole_IIR *this)
{
}

void AMCP::ASP::Engine::unregister_io_buffer(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(long long **)(a1 + 760);
  int v9 = *(long long **)(a1 + 768);
  if (v8 != v9)
  {
    while (**(void **)v8 != a5)
    {
      if (++v8 == v9) {
        goto LABEL_4;
      }
    }
  }
  if (v8 == v9)
  {
LABEL_4:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    unsigned int v10 = **(NSObject ***)buf;
    if (*(void *)v35) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v35);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v12;
      *(_WORD *)uint64_t v35 = 2080;
      *(void *)&void v35[2] = "ASP_Engine.cpp";
      __int16 v36 = 1024;
      int v37 = 771;
      __int16 v38 = 2080;
      *(void *)uint64_t v39 = "register_buffer_info_iter == m_register_buffer_info_list.end()";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Failed to unregister io buffer", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v33);
    __cxa_allocate_exception(0x40uLL);
    std::runtime_error::runtime_error(&v26, "Failed to unregister io buffer");
    std::runtime_error::runtime_error(&v27, &v26);
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    int v32 = -1;
    v27.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
    char v28 = &unk_1F148A9D0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v27);
    *(void *)&v39[6] = "virtual void AMCP::ASP::Engine::unregister_io_buffer(AMCP::Direction, uint32_t, uint32_t, void *)";
    uint64_t v40 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Engine.cpp";
    int v41 = 771;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v21);
    uint64_t v23 = &unk_1F148AA90;
    long long v24 = v21;
    uint64_t v25 = v22;
    long long v21 = 0uLL;
    uint64_t v22 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
  }
  if (atomic_fetch_add((atomic_uint *volatile)(*(void *)v8 + 8), 0xFFFFFFFF) == 1)
  {
    uint64_t v13 = v8 + 1;
    uint64_t v14 = *(long long **)(a1 + 768);
    if (v8 + 1 != v14)
    {
      do
      {
        uint64_t v8 = v13;
        long long v15 = *v13;
        *(void *)uint64_t v13 = 0;
        *((void *)v13 + 1) = 0;
        long long v16 = (std::__shared_weak_count *)*((void *)v13 - 1);
        *(v13 - 1) = v15;
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        ++v13;
      }
      while (v8 + 1 != v14);
      uint64_t v13 = *(long long **)(a1 + 768);
    }
    while (v13 != v8)
    {
      uint64_t v17 = (std::__shared_weak_count *)*((void *)v13 - 1);
      if (v17) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
      --v13;
    }
    *(void *)(a1 + 768) = v8;
    uint64_t v18 = a1 + 72;
    uint64_t v19 = 72;
    if (!a2)
    {
      uint64_t v19 = 96;
      uint64_t v18 = a1 + 96;
    }
    if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v18 + 8) - *(void *)(a1 + v19)) >> 3) > (unint64_t)a3)
    {
      uint64_t v20 = *(void (**)(void))(**(void **)(a1 + 728) + 456);
      v20();
    }
  }
}

void sub_1BAF71F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, std::runtime_error a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (__p) {
    operator delete(__p);
  }
  if (a9) {
    operator delete(a9);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::~clone_impl((uint64_t)&a29);
  boost::exception_detail::error_info_injector<std::runtime_error>::~error_info_injector((uint64_t)&a18);
  std::runtime_error::~runtime_error(&a17);
  if (v30) {
    __cxa_free_exception(v29);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&a28);
  _Unwind_Resume(a1);
}

uint64_t AMCP::ASP::Engine::register_io_buffer(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = *(char **)(a1 + 760);
  int v11 = *(char **)(a1 + 768);
  mach_port_t v12 = v10;
  if (v10 != v11)
  {
    mach_port_t v12 = *(char **)(a1 + 760);
    while (**(void **)v12 != a5)
    {
      v12 += 16;
      if (v12 == v11) {
        goto LABEL_10;
      }
    }
  }
  if (v12 == v11)
  {
LABEL_10:
    uint64_t v14 = operator new(0x28uLL);
    v14[1] = 0;
    long long v15 = v14 + 1;
    uint64_t v14[2] = 0;
    *uint64_t v14 = &unk_1F1487E58;
    v14[3] = a5;
    uint64_t v13 = (atomic_uint *)(v14 + 3);
    *((_DWORD *)v14 + 8) = 0;
    *(void *)&long long v16 = v14 + 3;
    *((void *)&v16 + 1) = v14;
    long long v37 = v16;
    unint64_t v17 = *(void *)(a1 + 776);
    if ((unint64_t)v11 >= v17)
    {
      unsigned int v35 = a3;
      int v36 = a2;
      uint64_t v19 = a4;
      uint64_t v20 = (v11 - v10) >> 4;
      unint64_t v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v22 = v17 - (void)v10;
      if (v22 >> 3 > v21) {
        unint64_t v21 = v22 >> 3;
      }
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v23 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23 >> 60) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v24 = (char *)operator new(16 * v23);
      uint64_t v25 = &v24[16 * v20];
      std::runtime_error v26 = &v24[16 * v23];
      *(_OWORD *)uint64_t v25 = v37;
      uint64_t v18 = v25 + 16;
      atomic_fetch_add_explicit(v15, 1uLL, memory_order_relaxed);
      if (v10 == v11)
      {
        *(void *)(a1 + 760) = v25;
        *(void *)(a1 + 768) = v18;
        *(void *)(a1 + 776) = v26;
        a4 = v19;
        a3 = v35;
        a2 = v36;
        if (!v10) {
          goto LABEL_29;
        }
      }
      else
      {
        a4 = v19;
        a2 = v36;
        do
        {
          long long v27 = *((_OWORD *)v11 - 1);
          v11 -= 16;
          *((_OWORD *)v25 - 1) = v27;
          v25 -= 16;
          *(void *)int v11 = 0;
          *((void *)v11 + 1) = 0;
        }
        while (v11 != v10);
        char v28 = *(char **)(a1 + 760);
        unsigned int v10 = *(char **)(a1 + 768);
        *(void *)(a1 + 760) = v25;
        *(void *)(a1 + 768) = v18;
        *(void *)(a1 + 776) = v26;
        a3 = v35;
        if (v10 != v28)
        {
          do
          {
            uint64_t v29 = (std::__shared_weak_count *)*((void *)v10 - 1);
            if (v29) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            }
            v10 -= 16;
          }
          while (v10 != v28);
          unsigned int v10 = v28;
        }
        if (!v10) {
          goto LABEL_29;
        }
      }
      operator delete(v10);
    }
    else
    {
      *(void *)int v11 = v13;
      *((void *)v11 + 1) = v14;
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
      uint64_t v18 = v11 + 16;
      *(void *)(a1 + 768) = v11 + 16;
    }
LABEL_29:
    *(void *)(a1 + 768) = v18;
    goto LABEL_30;
  }
  long long v37 = *(_OWORD *)v12;
  if (*((void *)v12 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)v12 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v13 = (atomic_uint *)v37;
LABEL_30:
  if (atomic_fetch_add(v13 + 2, 1u))
  {
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v31 = a1 + 72;
    uint64_t v32 = 72;
    if (!a2)
    {
      uint64_t v32 = 96;
      uint64_t v31 = a1 + 96;
    }
    uint64_t v33 = *(void *)(a1 + v32);
    if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(v31 + 8) - v33) >> 3) <= (unint64_t)a3) {
      uint64_t v30 = 561214578;
    }
    else {
      uint64_t v30 = (*(uint64_t (**)(void, void, void, uint64_t, BOOL, uint64_t, uint64_t))(**(void **)(a1 + 728)
    }
                                                                                               + 448))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v33 + 56 * a3 + 4), 1, a2 == 1, a4, a5);
  }
  if (*((void *)&v37 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v37 + 1));
  }
  return v30;
}

void sub_1BAF72298(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine::Register_Buffer_Info>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487E58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::ASP::Engine::Register_Buffer_Info>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1487E58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::ASP::Engine::release_power_assertions(AMCP::ASP::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
}

uint64_t AMCP::ASP::Engine::take_power_assertions(AMCP::ASP::Engine *this)
{
  return AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions((uint64_t)this + 120);
}

double AMCP::ASP::Engine::convert_host_to_sample_time(os_unfair_lock_s *this, unint64_t a2)
{
  double v3 = (AMCP::IO_Clock *)&this[140];
  uint64_t v4 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v5 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v3, a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

unint64_t AMCP::ASP::Engine::convert_sample_to_host_time(os_unfair_lock_s *this, double a2)
{
  return AMCP::IO_Clock::convert_sample_to_host_time(this + 140, a2);
}

double AMCP::ASP::Engine::get_current_host_ticks_per_frame(os_unfair_lock_s *this)
{
  unsigned int v2 = this + 160;
  os_unfair_lock_lock(this + 160);
  double v3 = *(double *)&this[156]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2);
  return v3;
}

void AMCP::ASP::Engine::get_current_time(AMCP::ASP::Engine *this@<X0>, AMCP::IO_Clock *a2@<X8>)
{
}

BOOL AMCP::ASP::Engine::has_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::has_time(this + 140);
}

BOOL AMCP::ASP::Engine::reset_time(os_unfair_lock_s *this)
{
  return AMCP::IO_Clock::reset_time(this + 140);
}

uint64_t AMCP::ASP::Engine::update_time(AMCP::ASP::Engine *this)
{
  return AMCP::IO_Clock::update_time((AMCP::ASP::Engine *)((char *)this + 560));
}

double AMCP::ASP::Engine::get_zero_time_stamp@<D0>(AMCP::ASP::Engine *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a2 + 56) = 3;
  (*(void (**)(uint64_t *__return_ptr, void, void, uint64_t))(**((void **)this + 91) + 96))(&v4, *((void *)this + 91), *((unsigned int *)this + 184), 1);
  double result = v5;
  *(double *)a2 = v5;
  *(void *)(a2 + 8) = v6;
  return result;
}

uint64_t AMCP::ASP::Engine::end_writing(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  if (HIBYTE(this[188]._os_unfair_lock_opaque))
  {
    mach_port_t v12 = (AMCP::IO_Clock *)&this[140];
    uint64_t v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    uint64_t v14 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    uint64_t v25 = a2;
    int v26 = a6;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v43 = v14;
    uint64_t v44 = v14;
    os_unfair_lock_lock(v13);
    double v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v17 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v31 = 0u;
    long long v30 = 0u;
    double v27 = v15;
    unint64_t v28 = a3;
    double v29 = v16 / v17;
    uint64_t v32 = 7;
    unint64_t v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    double v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v20 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v41 = 0u;
    long long v40 = 0u;
    double v37 = a4;
    unint64_t v38 = v18;
    double v39 = v19 / v20;
    uint64_t v42 = 7;
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(**(void **)&this[182]._os_unfair_lock_opaque + 400))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v25, v21, v22, v23);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::write_data_to_stream(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, double a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 755)) {
    return 1;
  }
  uint64_t v10 = *(void *)(a1 + 96);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 104) - v10) >> 3) > (unint64_t)a4)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    uint64_t v16 = *(void *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    uint64_t v26 = a2;
    int v27 = a7;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    uint64_t v44 = v16;
    uint64_t v45 = v16;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v17 = AMCP::IO_Clock::convert_host_to_sample_time_internal((AMCP::IO_Clock *)(a1 + 560), a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v18 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v19 = *(double *)(*(void *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    long long v31 = 0u;
    long long v32 = 0u;
    double v28 = v17;
    unint64_t v29 = a3;
    double v30 = v18 / v19;
    uint64_t v33 = 7;
    unint64_t v20 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)(a1 + 560), a5);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v21 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v22 = *(double *)(*(void *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    long long v42 = 0u;
    long long v41 = 0u;
    double v38 = a5;
    unint64_t v39 = v20;
    double v40 = v21 / v22;
    uint64_t v43 = 7;
    float v23 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a5);
    if (v23 < 0.0) {
      kdebug_trace();
    }
    kdebug_trace();
    (*(void (**)(void, void, void, uint64_t, uint64_t, uint64_t *, uint64_t))(**(void **)(a1 + 728)
                                                                                         + 392))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v10 + 56 * a4 + 4), 1, a7, &v26, a8);
    kdebug_trace();
    float v24 = AMCP::Core::Engine::calculate_safety_violation_write((AMCP::Core::Engine *)a1, a5);
    if ((int)v24 < 0) {
      kdebug_trace();
    }
    return 1;
  }
  return 0;
}

uint64_t AMCP::ASP::Engine::begin_writing(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  if (HIBYTE(this[188]._os_unfair_lock_opaque))
  {
    mach_port_t v12 = (AMCP::IO_Clock *)&this[140];
    uint64_t v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    uint64_t v14 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    uint64_t v25 = a2;
    int v26 = a6;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v43 = v14;
    uint64_t v44 = v14;
    os_unfair_lock_lock(v13);
    double v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v17 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v31 = 0u;
    long long v30 = 0u;
    double v27 = v15;
    unint64_t v28 = a3;
    double v29 = v16 / v17;
    uint64_t v32 = 7;
    unint64_t v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    double v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v20 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v41 = 0u;
    long long v40 = 0u;
    double v37 = a4;
    unint64_t v38 = v18;
    double v39 = v19 / v20;
    uint64_t v42 = 7;
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(**(void **)&this[182]._os_unfair_lock_opaque + 384))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v25, v21, v22, v23);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::end_reading(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  if (HIBYTE(this[185]._os_unfair_lock_opaque))
  {
    mach_port_t v12 = (AMCP::IO_Clock *)&this[140];
    uint64_t v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    uint64_t v14 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    uint64_t v22 = a2;
    int v23 = a6;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v40 = v14;
    uint64_t v41 = v14;
    os_unfair_lock_lock(v13);
    double v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v17 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v28 = 0u;
    long long v27 = 0u;
    double v24 = v15;
    unint64_t v25 = a3;
    double v26 = v16 / v17;
    uint64_t v29 = 7;
    unint64_t v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    double v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v20 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v34 = 0u;
    long long v33 = 0u;
    double v30 = a4;
    unint64_t v31 = v18;
    double v32 = v19 / v20;
    uint64_t v35 = 7;
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t *))(**(void **)&this[182]._os_unfair_lock_opaque
                                                                        + 176))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v22);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::read_data_from_stream(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int a4, unsigned int a5, int a6, unsigned int **a7, double a8)
{
  if (!*(unsigned char *)(a1 + 743)) {
    return 1;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  if (0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 80) - v9) >> 3) > (unint64_t)a4)
  {
    uint64_t v15 = v9 + 56 * a4;
    unsigned int v16 = *(_DWORD *)(v15 + 40);
    double v17 = (double)(a5 / v16) + a8;
    unsigned int v18 = **a7;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    uint64_t v19 = *(void *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    uint64_t v29 = a2;
    int v30 = a6;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    uint64_t v47 = v19;
    uint64_t v48 = v19;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v20 = AMCP::IO_Clock::convert_host_to_sample_time_internal((AMCP::IO_Clock *)(a1 + 560), a3);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v21 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v22 = *(double *)(*(void *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    long long v34 = 0u;
    long long v35 = 0u;
    double v31 = v20;
    unint64_t v32 = a3;
    double v33 = v21 / v22;
    uint64_t v36 = 7;
    unint64_t v23 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)(a1 + 560), v17);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v24 = *(double *)(a1 + 624);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 640));
    double v25 = *(double *)(*(void *)(a1 + 576) + 40);
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 640));
    long long v40 = 0u;
    long long v41 = 0u;
    double v37 = v17;
    unint64_t v38 = v23;
    double v39 = v24 / v25;
    uint64_t v42 = 7;
    float v26 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)a1, a8);
    if (v26 <= -5.0) {
      kdebug_trace();
    }
    kdebug_trace();
    (*(void (**)(void, void, void, uint64_t, void, uint64_t *, unsigned int **))(**(void **)(a1 + 728)
                                                                                                + 168))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), *(unsigned int *)(v15 + 4), 1, v18 / v16, &v29, a7);
    kdebug_trace();
    float v27 = AMCP::Core::Engine::calculate_safety_violation_read((AMCP::Core::Engine *)a1, a8);
    if ((int)v27 <= -5) {
      kdebug_trace();
    }
    return 1;
  }
  return 0;
}

uint64_t AMCP::ASP::Engine::begin_reading(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, double a4, uint64_t a5, int a6)
{
  if (HIBYTE(this[185]._os_unfair_lock_opaque))
  {
    mach_port_t v12 = (AMCP::IO_Clock *)&this[140];
    uint64_t v13 = this + 160;
    os_unfair_lock_lock(this + 160);
    uint64_t v14 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    uint64_t v22 = a2;
    int v23 = a6;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    uint64_t v40 = v14;
    uint64_t v41 = v14;
    os_unfair_lock_lock(v13);
    double v15 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v12, a3);
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v16 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v17 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v28 = 0u;
    long long v27 = 0u;
    double v24 = v15;
    unint64_t v25 = a3;
    double v26 = v16 / v17;
    uint64_t v29 = 7;
    unint64_t v18 = AMCP::IO_Clock::convert_sample_to_host_time((os_unfair_lock_s *)v12, a4);
    os_unfair_lock_lock(v13);
    double v19 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v13);
    os_unfair_lock_lock(v13);
    double v20 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v13);
    long long v34 = 0u;
    long long v33 = 0u;
    double v30 = a4;
    unint64_t v31 = v18;
    double v32 = v19 / v20;
    uint64_t v35 = 7;
    (*(void (**)(void, void, uint64_t, uint64_t, uint64_t *))(**(void **)&this[182]._os_unfair_lock_opaque
                                                                        + 160))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, a5, &v22);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::end_io_cycle(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, int a4)
{
  if (BYTE2(this[185]._os_unfair_lock_opaque))
  {
    uint64_t v8 = (AMCP::IO_Clock *)&this[140];
    uint64_t v9 = this + 160;
    os_unfair_lock_lock(this + 160);
    uint64_t v10 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    uint64_t v15 = a2;
    int v16 = a4;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = v10;
    uint64_t v32 = v10;
    os_unfair_lock_lock(v9);
    double v11 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v8, a3);
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    double v12 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    double v13 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v9);
    long long v21 = 0u;
    long long v20 = 0u;
    double v17 = v11;
    unint64_t v18 = a3;
    double v19 = v12 / v13;
    uint64_t v22 = 7;
    (*(void (**)(void, void, uint64_t, uint64_t *))(**(void **)&this[182]._os_unfair_lock_opaque + 144))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, &v15);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::begin_io_cycle(os_unfair_lock_s *this, uint64_t a2, unint64_t a3, int a4)
{
  if (BYTE2(this[185]._os_unfair_lock_opaque))
  {
    uint64_t v8 = (AMCP::IO_Clock *)&this[140];
    uint64_t v9 = this + 160;
    os_unfair_lock_lock(this + 160);
    uint64_t v10 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    uint64_t v15 = a2;
    int v16 = a4;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    uint64_t v31 = v10;
    uint64_t v32 = v10;
    os_unfair_lock_lock(v9);
    double v11 = AMCP::IO_Clock::convert_host_to_sample_time_internal(v8, a3);
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    double v12 = *(double *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v9);
    os_unfair_lock_lock(v9);
    double v13 = *(double *)(*(void *)&this[144]._os_unfair_lock_opaque + 40);
    os_unfair_lock_unlock(v9);
    long long v21 = 0u;
    long long v20 = 0u;
    double v17 = v11;
    unint64_t v18 = a3;
    double v19 = v12 / v13;
    uint64_t v22 = 7;
    (*(void (**)(void, void, uint64_t, uint64_t *))(**(void **)&this[182]._os_unfair_lock_opaque + 136))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, &v15);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::end_io_thread(os_unfair_lock_s *this, uint64_t a2, int a3)
{
  if (BYTE1(this[185]._os_unfair_lock_opaque))
  {
    os_unfair_lock_lock(this + 160);
    uint64_t v6 = *(void *)&this[156]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(this + 160);
    uint64_t v8 = a2;
    int v9 = a3;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v22 = v6;
    uint64_t v23 = v6;
    (*(void (**)(void, void, uint64_t, uint64_t *))(**(void **)&this[182]._os_unfair_lock_opaque + 120))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1, &v8);
  }
  (*(void (**)(void, void, uint64_t))(**(void **)&this[182]._os_unfair_lock_opaque + 72))(*(void *)&this[182]._os_unfair_lock_opaque, this[184]._os_unfair_lock_opaque, 1);
  return 1;
}

uint64_t AMCP::ASP::Engine::begin_io_thread(AMCP::ASP::Engine *this, uint64_t a2, uint64_t a3)
{
  (*(void (**)(AMCP::ASP::Engine *))(*(void *)this + 24))(this);
  (*(void (**)(void, void, uint64_t, uint64_t, void))(**((void **)this + 91) + 64))(*((void *)this + 91), *((unsigned int *)this + 184), 1, a3, 0);
  if (*((unsigned char *)this + 741))
  {
    os_unfair_lock_lock((os_unfair_lock_t)this + 160);
    uint64_t v6 = *((void *)this + 78);
    os_unfair_lock_unlock((os_unfair_lock_t)this + 160);
    uint64_t v8 = a2;
    int v9 = a3;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    uint64_t v22 = v6;
    uint64_t v23 = v6;
    (*(void (**)(void, void, uint64_t, uint64_t *))(**((void **)this + 91) + 112))(*((void *)this + 91), *((unsigned int *)this + 184), 1, &v8);
  }
  return 1;
}

uint64_t AMCP::ASP::Engine::maximum_past_data(AMCP::ASP::Engine *this)
{
  if (!*((unsigned char *)this + 740)) {
    return 0;
  }
  uint64_t v4 = 0x676C6F62646D7064;
  int v5 = 0;
  uint64_t v1 = *((void *)this + 91);
  uint64_t v2 = *((unsigned int *)this + 184);
  unsigned int v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void, uint64_t, unsigned int *))(*(void *)v1 + 432))(v1, v2, 0, &v4, 0, 0, 4, &v6))
  {
    return 0;
  }
  else
  {
    return v6;
  }
}

uint64_t AMCP::ASP::Engine::available_past_data(AMCP::ASP::Engine *this)
{
  if (!*((unsigned char *)this + 740)) {
    return 0;
  }
  uint64_t v4 = 0x676C6F6264617064;
  int v5 = 0;
  uint64_t v1 = *((void *)this + 91);
  uint64_t v2 = *((unsigned int *)this + 184);
  unsigned int v6 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void, uint64_t, unsigned int *))(*(void *)v1 + 432))(v1, v2, 0, &v4, 0, 0, 4, &v6))
  {
    return 0;
  }
  else
  {
    return v6;
  }
}

BOOL AMCP::ASP::Engine::set_past_data_enabled(AMCP::ASP::Engine *this, int a2)
{
  if (!*((unsigned char *)this + 740)) {
    return 0;
  }
  uint64_t v6 = 0x676C6F626470656CLL;
  int v7 = 0;
  uint64_t v2 = *((void *)this + 91);
  uint64_t v3 = *((unsigned int *)this + 184);
  int v5 = a2;
  return (*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void, uint64_t, int *))(*(void *)v2 + 440))(v2, v3, 0, &v6, 0, 0, 4, &v5) == 0;
}

BOOL AMCP::ASP::Engine::is_past_data_enabled(AMCP::ASP::Engine *this)
{
  if (!*((unsigned char *)this + 740)) {
    return 0;
  }
  uint64_t v5 = 0x676C6F626470656CLL;
  int v6 = 0;
  uint64_t v1 = *((void *)this + 91);
  uint64_t v2 = *((unsigned int *)this + 184);
  int v7 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t *, void, void, uint64_t, int *))(*(void *)v1 + 432))(v1, v2, 0, &v5, 0, 0, 4, &v7))
  {
    BOOL v3 = 1;
  }
  else
  {
    BOOL v3 = v7 == 0;
  }
  return !v3;
}

uint64_t AMCP::ASP::Engine::supports_past_data(AMCP::ASP::Engine *this)
{
  return *((unsigned __int8 *)this + 740);
}

void AMCP::ASP::Engine::set_output_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_output_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_output_stream_active_list(__p, v4, a2);
  AMCP::ASP::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 96), (uint64_t)v6, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v6[0]) {
    operator delete(v6[0]);
  }
}

void sub_1BAF73910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::ASP::Engine::update_stream_active_state(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 != v4)
  {
    uint64_t v9 = result;
    int v10 = 0;
    int v11 = 0;
    long long v12 = *(void **)a4;
    long long v13 = *(void **)a3;
    while (v13 != (void *)(*(void *)a3 + 8 * (*(void *)(a3 + 8) >> 6)) || (*(_DWORD *)(a3 + 8) & 0x3F) != v10)
    {
      if (v12 == (void *)(*(void *)a4 + 8 * (*(void *)(a4 + 8) >> 6)) && (*(_DWORD *)(a4 + 8) & 0x3F) == v11) {
        break;
      }
      if (((*v13 >> v10) & 1) != ((*v12 & (1 << v11)) != 0))
      {
        double result = (*(uint64_t (**)(void))(**(void **)(v9 + 728) + 440))();
        uint64_t v4 = a2[1];
      }
      v5 += 56;
      v13 += v10 == 63;
      if (v10 == 63) {
        int v10 = 0;
      }
      else {
        ++v10;
      }
      v12 += v11 == 63;
      if (v11 == 63) {
        int v11 = 0;
      }
      else {
        ++v11;
      }
      if (v5 == v4) {
        return result;
      }
    }
    if (v5 != v4)
    {
      while (v12 != (void *)(*(void *)a4 + 8 * (*(void *)(a4 + 8) >> 6)) || (*(_DWORD *)(a4 + 8) & 0x3F) != v11)
      {
        double result = (*(uint64_t (**)(void))(**(void **)(v9 + 728) + 440))();
        v5 += 56;
        uint64_t v4 = a2[1];
        if (v5 == v4) {
          return result;
        }
        v12 += v11 == 63;
        if (v11 == 63) {
          int v11 = 0;
        }
        else {
          ++v11;
        }
      }
      while (v5 != v4)
      {
        double result = (*(uint64_t (**)(void))(**(void **)(v9 + 728) + 440))();
        v5 += 56;
        uint64_t v4 = a2[1];
      }
    }
  }
  return result;
}

void AMCP::ASP::Engine::get_output_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

void AMCP::ASP::Engine::set_input_stream_active_list(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 120;
  AMCP::Core::Implementation::Simple_Engine_IO_State::get_input_stream_active_list((AMCP::Core::Implementation::Simple_Engine_IO_State *)v6, (os_unfair_lock_s *)(a1 + 120));
  AMCP::Core::Implementation::Simple_Engine_IO_State::set_input_stream_active_list(__p, v4, a2);
  AMCP::ASP::Engine::update_stream_active_state(a1, (uint64_t *)(a1 + 72), (uint64_t)v6, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v6[0]) {
    operator delete(v6[0]);
  }
}

void sub_1BAF73C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::ASP::Engine::get_input_stream_active_list(os_unfair_lock_s *this@<X0>, AMCP::Core::Implementation::Simple_Engine_IO_State *a2@<X8>)
{
}

uint64_t AMCP::ASP::Engine::set_transport_state(uint64_t a1, signed int a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  int v4 = atomic_load((unsigned int *)(a1 + 136));
  int v5 = MEMORY[0x1C18597F0]();
  int v21 = v5;
  if (v4) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 < 1;
  }
  if (v6)
  {
    int v7 = v5;
    if (v4 >= 1 && a2 == 0) {
      AMCP::ASP::Engine::stop((AMCP::ASP::Engine *)a1);
    }
  }
  else
  {
    AMCP::Core::Implementation::Simple_Engine_IO_State::take_power_assertions(a1 + 120);
    AMCP::IO_Clock::reset_time((os_unfair_lock_s *)(a1 + 560));
    kdebug_trace();
    int v9 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728) + 80))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    int v10 = (AMCP::Log::Scope_Registry *)kdebug_trace();
    if (v9)
    {
      AMCP::Log::Scope_Registry::get(v10);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v17 = **(NSObject ***)buf;
      if (*(void *)v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v36);
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        long long v18 = pthread_self();
        mach_port_t v19 = pthread_mach_thread_np(v18);
        *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v19;
        *(_WORD *)long long v36 = 2080;
        *(void *)&std::locale v36[2] = "ASP_Engine.cpp";
        __int16 v37 = 1024;
        int v38 = 670;
        __int16 v39 = 2080;
        *(void *)uint64_t v40 = "error != 0";
        _os_log_error_impl(&dword_1BAA78000, v17, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s couldn't start the hardware", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v34);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error(&v27, "couldn't start the hardware");
      std::runtime_error::runtime_error(&v28, &v27);
      uint64_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v32 = 0;
      int v33 = -1;
      v28.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      long long v29 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v28);
      *(void *)&v40[6] = "void AMCP::ASP::Engine::start()";
      uint64_t v41 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/ASP_Engine.cpp";
      int v42 = 670;
      std::vector<void *>::vector(&v22);
      int v20 = backtrace((void **)v22, (*((void *)&v22 + 1) - (void)v22) >> 3);
      std::vector<void *>::resize((char **)&v22, v20);
      long long v24 = &unk_1F148AA90;
      long long v25 = v22;
      uint64_t v26 = v23;
      long long v22 = 0uLL;
      uint64_t v23 = 0;
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    *(unsigned char *)(a1 + 741) = (unint64_t)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728)
                                                                                                + 104))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    *(unsigned char *)(a1 + 742) = (unint64_t)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728)
                                                                                                + 128))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    *(unsigned char *)(a1 + 743) = (unint64_t)(*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728)
                                                                                                + 152))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1) >> 32;
    uint64_t v11 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728) + 184))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(unsigned char *)(a1 + 744) = BYTE4(v11);
    *(unsigned char *)(a1 + 745) = BYTE5(v11);
    uint64_t v12 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728) + 216))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(unsigned char *)(a1 + 746) = BYTE4(v12);
    *(unsigned char *)(a1 + 747) = BYTE5(v12);
    uint64_t v13 = (*(uint64_t (**)(void, void, uint64_t))(**(void **)(a1 + 728) + 248))(*(void *)(a1 + 728), *(unsigned int *)(a1 + 736), 1);
    *(unsigned char *)(a1 + 748) = BYTE4(v13);
    *(unsigned char *)(a1 + 749) = BYTE5(v13);
    *(unsigned char *)(a1 + 750) = (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 728) + 280))() >> 32;
    uint64_t v14 = (*(uint64_t (**)(void))(**(void **)(a1 + 728) + 312))();
    *(unsigned char *)(a1 + 751) = BYTE4(v14);
    *(unsigned char *)(a1 + 752) = BYTE5(v14);
    uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 728) + 344))();
    *(unsigned char *)(a1 + 753) = BYTE4(v15);
    *(unsigned char *)(a1 + 754) = BYTE5(v15);
    *(unsigned char *)(a1 + 755) = (unint64_t)(*(uint64_t (**)(void))(**(void **)(a1 + 728) + 376))() >> 32;
    int v7 = v21;
  }
  atomic_store(a2, (unsigned int *)(a1 + 136));
  uint64_t result = MEMORY[0x1C18597F0]();
  if ((int)result > v7)
  {
    atomic_store(0, (unsigned int *)(a1 + 136));
    return AMCP::ASP::Engine::stop((AMCP::ASP::Engine *)a1);
  }
  return result;
}

void sub_1BAF743A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::runtime_error a19, std::runtime_error a20,uint64_t a21)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::raii::v1::detail::ScopeGuard<AMCP::ASP::Engine::set_transport_state(AMCP::Transport_State)::$_0,applesauce::raii::v1::detail::StackFailPolicy>::~ScopeGuard(uint64_t a1)
{
  if ((int)MEMORY[0x1C18597F0]() > *(_DWORD *)a1)
  {
    uint64_t v2 = *(unsigned int **)(a1 + 8);
    atomic_store(0, v2 + 34);
    AMCP::ASP::Engine::stop((AMCP::ASP::Engine *)v2);
  }
  return a1;
}

uint64_t AMCP::ASP::Engine::stop(AMCP::ASP::Engine *this)
{
  kdebug_trace();
  (*(void (**)(void, void, uint64_t))(**((void **)this + 91) + 88))(*((void *)this + 91), *((unsigned int *)this + 184), 1);
  kdebug_trace();
  AMCP::IO_Clock::reset_time((os_unfair_lock_s *)this + 140);

  return AMCP::Core::Implementation::Simple_Engine_IO_State::release_power_assertions((uint64_t)this + 120);
}

uint64_t AMCP::ASP::Engine::get_transport_state(AMCP::ASP::Engine *this)
{
  return atomic_load((unsigned int *)this + 34);
}

__n128 AMCP::ASP::Engine::get_stream_format@<Q0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4 = a1 + 72;
  uint64_t v5 = 72;
  if (!a2)
  {
    uint64_t v5 = 96;
    uint64_t v4 = a1 + 96;
  }
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(v4 + 8);
  while (1)
  {
    if (v6 == v7)
    {
      *(void *)(a4 + 32) = 0;
      result.n128_u64[0] = 0;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      return result;
    }
    if (*(_DWORD *)v6 == a3) {
      break;
    }
    v6 += 56;
  }
  __n128 result = *(__n128 *)(v6 + 16);
  long long v9 = *(_OWORD *)(v6 + 32);
  *(__n128 *)a4 = result;
  *(_OWORD *)(a4 + 16) = v9;
  *(void *)(a4 + 32) = *(void *)(v6 + 48);
  return result;
}

void AMCP::ASP::Engine::get_output_format_list(AMCP::ASP::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

void AMCP::ASP::Engine::get_input_format_list(AMCP::ASP::Engine *this@<X0>, AMCP::Core::Implementation::Simple_Engine_Data *a2@<X8>)
{
}

uint64_t AMCP::ASP::Engine::get_output_latency(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 16);
}

uint64_t AMCP::ASP::Engine::get_input_latency(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 15);
}

uint64_t AMCP::ASP::Engine::get_output_safety_offset(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t AMCP::ASP::Engine::get_input_safety_offset(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 13);
}

BOOL AMCP::ASP::Engine::has_output_streams(AMCP::ASP::Engine *this)
{
  return *((void *)this + 12) != *((void *)this + 13);
}

BOOL AMCP::ASP::Engine::has_input_streams(AMCP::ASP::Engine *this)
{
  return *((void *)this + 9) != *((void *)this + 10);
}

uint64_t AMCP::ASP::Engine::supports_prewarming(AMCP::ASP::Engine *this)
{
  return *((unsigned __int8 *)this + 48);
}

uint64_t AMCP::ASP::Engine::get_clock_domain(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 11);
}

uint64_t AMCP::ASP::Engine::get_suggested_ring_buffer_frame_size(AMCP::ASP::Engine *this)
{
  return *((unsigned int *)this + 10);
}

uint64_t AMCP::ASP::Engine::get_max_io_buffer_frame_size(AMCP::ASP::Engine *this)
{
  return (3 * *((_DWORD *)this + 10)) >> 3;
}

double AMCP::ASP::Engine::get_sample_rate(AMCP::ASP::Engine *this)
{
  return *((double *)this + 4);
}

void *AMCP::ASP::Engine::get_device_uid@<X0>(const void **this@<X0>, void *a2@<X8>)
{
  return AMCP::Core::Implementation::Simple_Engine_Data::get_device_uid(a2, this[3]);
}

void AMCP::ASP::Engine::~Engine(AMCP::ASP::Engine *this)
{
  AMCP::ASP::Engine::~Engine(this);

  JUMPOUT(0x1C1859840);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const void *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  *(void *)this = &unk_1F14877E8;
  AMCP::ASP::Engine::set_transport_state((uint64_t)this, 0);
  uint64_t v2 = *((void *)this + 91);
  BOOL v3 = *((unsigned int *)this + 184);
  uint64_t v13 = 0x100000001;
  uint64_t v14 = 1;
  uint64_t v15 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v2 + 24))(v2, v3, &v13);
  uint64_t v13 = (uint64_t)this + 760;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  uint64_t v4 = *((void *)this + 91);
  *((void *)this + 91) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  AMCP::IO_Clock::~IO_Clock((AMCP::ASP::Engine *)((char *)this + 560));
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::ASP::Engine *)((char *)this + 240));
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 29);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 27);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (void *)*((void *)this + 22);
  if (v7) {
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 18);
  if (v8) {
    operator delete(v8);
  }
  long long v9 = (void *)*((void *)this + 12);
  if (v9)
  {
    *((void *)this + 13) = v9;
    operator delete(v9);
  }
  int v10 = (void *)*((void *)this + 9);
  if (v10)
  {
    *((void *)this + 10) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (const void *)*((void *)this + 3);
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::RegisterIOBuffer(AMCP::ASP::MCP_PlugIn_Wrapper *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, void *a7)
{
  return 0;
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectSetPropertyData(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  return AMCP::ASP::PlugIn::ObjectSetPropertyData(this[1], a2, a3, a4, a5, a6, a7, a8);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectGetPropertyData(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  return AMCP::ASP::PlugIn::ObjectGetPropertyData(this[1], a2, a3, a4, a5, a6, a7, a8);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectGetPropertyDataSize(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  return AMCP::ASP::PlugIn::ObjectGetPropertyDataSize(this[1], a2, a3, a4, a5, a6);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::ObjectIsPropertySettable(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return AMCP::ASP::PlugIn::ObjectIsPropertySettable(this[1], a2, a3, a4);
}

BOOL AMCP::ASP::MCP_PlugIn_Wrapper::ObjectHasProperty(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return AMCP::ASP::PlugIn::ObjectHasProperty(this[1], a2, a3, a4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_WriteMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1919513701, a4, a5);
}

void sub_1BAF748A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74890);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_WriteMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(**(void **)(*(void *)(a1 + 8) + 16) + 168))(*(void *)(*(void *)(a1 + 8) + 16), a2, a3, a4, 1919513701, a5, a6, *(void *)(*(void *)a7 + 8), 0);
}

void sub_1BAF7493C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF7492CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_WriteMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1919513701, a4, a5);
}

void sub_1BAF749C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF749B8);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_WriteMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1919513701, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1BAF74A74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationWriteMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74A50);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1668114808, a4, a5);
}

void sub_1BAF74B00(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74AF0);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(void **)(*((void *)this + 1) + 16) + 168))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4, 1668114808, a5, a6, a7, a8);
}

void sub_1BAF74B98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74B88);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1668114808, a4, a5);
}

void sub_1BAF74C24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74C14);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ConvertMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1668114808, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1BAF74CE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationConvertMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74CACLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1886218616, a4, a5);
}

void sub_1BAF74D6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74D5CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(void **)(*((void *)this + 1) + 16) + 168))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4, 1886218616, a5, a6, a7, a8);
}

void sub_1BAF74E04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74DF4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1886218616, a4, a5);
}

void sub_1BAF74E90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74E80);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ProcessMix(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1886218616, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1BAF74F4C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationProcessMix)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74F18);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1835628655, a4, a5);
}

void sub_1BAF74FD8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF74FC8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void))(**(void **)(*((void *)this + 1) + 16) + 168))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4, 1835628655, a5, a6, a7, 0);
}

void sub_1BAF7506C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF7505CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1835628655, a4, a5);
}

void sub_1BAF750F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF750E8);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_MixOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1835628655, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1BAF751A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationMixOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75180);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1886352756, a4, a5);
}

void sub_1BAF75230(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75220);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(void **)(*((void *)this + 1) + 16) + 168))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4, 1886352756, a5, a6, a7, a8);
}

void sub_1BAF752C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF752B8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1886352756, a4, a5);
}

void sub_1BAF75354(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75344);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ProcessOutput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1886352756, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1BAF75410(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationProcessOutput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF753DCLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1885957744, a4, a5);
}

void sub_1BAF7549C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF7548CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(void **)(*((void *)this + 1) + 16) + 168))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4, 1885957744, a5, a6, a7, a8);
}

void sub_1BAF75534(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75524);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1885957744, a4, a5);
}

void sub_1BAF755C0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF755B0);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ProcessInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1885957744, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1BAF7567C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationProcessInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75648);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1667853936, a4, a5);
}

void sub_1BAF75708(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF756F8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *, void *))(**(void **)(*((void *)this + 1) + 16) + 168))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4, 1667853936, a5, a6, a7, a8);
}

void sub_1BAF757A0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75790);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1667853936, a4, a5);
}

void sub_1BAF7582C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF7581CLL);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ConvertInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1667853936, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32) | ((unint64_t)(v6 != 0) << 40);
}

void sub_1BAF758E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationConvertInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF758B4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_ReadInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1919246692, a4, a5);
}

void sub_1BAF75974(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75964);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Do_ReadInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void))(**(void **)(*(void *)(a1 + 8) + 16) + 168))(*(void *)(*(void *)(a1 + 8) + 16), a2, a3, a4, 1919246692, a5, a6, *(void *)(*(void *)a7 + 8), 0);
}

void sub_1BAF75A10(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DoIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75A00);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_ReadInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1919246692, a4, a5);
}

void sub_1BAF75A9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75A8CLL);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_ReadInput(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1919246692, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1BAF75B48(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationReadInput)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75B24);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_IOCycle(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1668899692, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1BAF75BD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationCycle)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75BC4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_IOCycle(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1668899692, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1BAF75C60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationCycle)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75C50);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_IOCycle(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1668899692, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1BAF75D0C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationCycle)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75CE8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::End_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 176))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1953002084, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1BAF75D98(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EndIOOperation (kAudioServerPlugInIOOperationThread)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75D88);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Begin_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, void, const AudioServerPlugInIOCycleInfo *))(**(void **)(*((void *)this + 1) + 16) + 160))(*(void *)(*((void *)this + 1) + 16), a2, a3, 1953002084, a4->mNominalIOBufferFrameSize, a4);
}

void sub_1BAF75E24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "BeginIOOperation (kAudioServerPlugInIOOperationThread)");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75E14);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::WillDo_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *((void *)this + 1);
  char v7 = 0;
  char v6 = 1;
  unsigned int v4 = (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, char *, char *))(**(void **)(v3 + 16) + 152))(*(void *)(v3 + 16), a2, a3, 1953002084, &v7, &v6);
  return v4 | ((unint64_t)(v7 != 0) << 32);
}

void sub_1BAF75ED0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "WillDoIOOperation (kAudioServerPlugInIOOperationThread)");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75EACLL);
}

double AMCP::ASP::MCP_PlugIn_Wrapper::GetZeroTimeStamp@<D0>(AMCP::ASP::MCP_PlugIn_Wrapper *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *((void *)this + 1);
  double v10 = 0.0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  *(_DWORD *)a4 = (*(uint64_t (**)(void, uint64_t, uint64_t, double *, uint64_t *, uint64_t *))(**(void **)(v5 + 16) + 144))(*(void *)(v5 + 16), a2, a3, &v10, &v9, &v8);
  double result = v10;
  *(double *)(a4 + 8) = v10;
  uint64_t v7 = v8;
  *(void *)(a4 + 16) = v9;
  *(void *)(a4 + 24) = v7;
  return result;
}

void sub_1BAF75F78(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "GetZeroTimeStamp");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75F54);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Stop(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 16) + 136))(*(void *)(*((void *)this + 1) + 16));
}

void sub_1BAF75FF4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "StopIO");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF75FE4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Start(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 16) + 128))(*(void *)(*((void *)this + 1) + 16));
}

void sub_1BAF76070(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "StartIO");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF76060);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Unregister_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return 0;
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::Register_IOThread(AMCP::ASP::MCP_PlugIn_Wrapper *this, double a2)
{
  return 0;
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::DestroyDevice(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(void))(**(void **)(*((void *)this + 1) + 16) + 48))(*(void *)(*((void *)this + 1) + 16));
}

void sub_1BAF760FC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "DestroyDevice");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF760ECLL);
}

unint64_t AMCP::ASP::MCP_PlugIn_Wrapper::CreateDevice(AMCP::ASP::MCP_PlugIn_Wrapper *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3)
{
  uint64_t v3 = *((void *)this + 1);
  unsigned int v6 = 0;
  unsigned int v4 = (*(uint64_t (**)(void, const __CFDictionary *, const AudioServerPlugInClientInfo *, unsigned int *))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16), a2, a3, &v6);
  return v4 | ((unint64_t)v6 << 32);
}

void sub_1BAF7618C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "CreateDevice");
  AMCP::ASP::PlugIn::log_plugin_exception(v14, (uint64_t *)&__p);
  if (a14 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF76170);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::AbortDeviceConfigChange(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void *))(**(void **)(*((void *)this + 1) + 16) + 80))(*(void *)(*((void *)this + 1) + 16), a2, a3, a4);
}

void sub_1BAF76208(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AbortDeviceConfigurationChange");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF761F8);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::PerformDeviceConfigChange(AMCP::ASP::PlugIn **this, uint64_t a2, uint64_t a3, void *a4)
{
  return AMCP::ASP::PlugIn::PerformDeviceConfigChange(this[1], a2, a3, a4);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::RemoveDeviceClient(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(void, uint64_t, const AudioServerPlugInClientInfo *))(**(void **)(*((void *)this + 1) + 16)
                                                                                         + 64))(*(void *)(*((void *)this + 1) + 16), a2, a3);
}

void sub_1BAF7628C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "RemoveDeviceClient");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF7627CLL);
}

uint64_t AMCP::ASP::MCP_PlugIn_Wrapper::AddDeviceClient(AMCP::ASP::MCP_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(void, uint64_t, const AudioServerPlugInClientInfo *))(**(void **)(*((void *)this + 1) + 16)
                                                                                         + 56))(*(void *)(*((void *)this + 1) + 16), a2, a3);
}

void sub_1BAF76308(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_begin_catch(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AddDeviceClient");
  AMCP::ASP::PlugIn::log_plugin_exception(v15, (uint64_t *)&__p);
  if (a15 < 0) {
    operator delete(__p);
  }
  __cxa_end_catch();
  JUMPOUT(0x1BAF762F8);
}

void AMCP::ASP::MCP_PlugIn_Wrapper::~MCP_PlugIn_Wrapper(AMCP::ASP::MCP_PlugIn_Wrapper *this)
{
  *(void *)this = &unk_1F1487988;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F1487988;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::UnregisterIOBuffer(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(**((void **)this + 1)
                                                                                                + 168))(*((void *)this + 1), a2, a3, a4, a5, a6, a7);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::RegisterIOBuffer(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(**((void **)this + 1)
                                                                                                + 160))(*((void *)this + 1), a2, a3, a4, a5, a6, a7);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectSetPropertyData(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, const void *a8)
{
  return 0;
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectGetPropertyData(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  unsigned int v9 = 0;
  (*(void (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *, uint64_t, unsigned int *, void *))(**((void **)this + 1) + 576))(*((void *)this + 1), a2, a3, a4, a5, a6, a7, &v9, a8);
  return (unint64_t)v9 << 32;
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectGetPropertyDataSize(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4, uint64_t a5, const void *a6)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *, uint64_t, const void *))(**((void **)this + 1) + 568))(*((void *)this + 1), a2, a3, a4, a5, a6) << 32;
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectIsPropertySettable(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  if ((*(unsigned int (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(**((void **)this + 1) + 560))(*((void *)this + 1), a2, a3, a4))
  {
    return 0x100000000;
  }
  else
  {
    return 0;
  }
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::ObjectHasProperty(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioObjectPropertyAddress *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioObjectPropertyAddress *))(**((void **)this + 1)
                                                                                                 + 552))(*((void *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_WriteMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 544))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_WriteMix(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v7 = a7;
  }
  else {
    uint64_t v7 = (uint64_t *)*a7;
  }
  if (*(unsigned char *)(a1 + 24)) {
    int v8 = *((_DWORD *)a7 + 4);
  }
  else {
    int v8 = 0;
  }
  uint64_t v10 = v7[1];
  int v11 = v8;
  int32x2_t v12 = vmovn_s64(*(int64x2_t *)(a7 + 3));
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 536))();
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_WriteMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 528))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_WriteMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *))(**((void **)this + 1) + 520))(*((void *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 512))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  int v14 = 0;
  int v11 = 0;
  int32x2_t v12 = a7;
  uint64_t v13 = 0;
  unsigned int v9 = a8;
  uint64_t v10 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 504))(*((void *)this + 1), a2, a3, a4, a5, a6);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 496))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ConvertMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  __int16 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, char *, __int16 *))(**((void **)this + 1) + 488))(*((void *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 480))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  int v14 = 0;
  int v11 = 0;
  int32x2_t v12 = a7;
  uint64_t v13 = 0;
  unsigned int v9 = a8;
  uint64_t v10 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 472))(*((void *)this + 1), a2, a3, a4, a5, a6);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 464))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ProcessMix(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  __int16 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, char *, __int16 *))(**((void **)this + 1) + 456))(*((void *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 448))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7)
{
  int v9 = 0;
  v8[0] = a7;
  v8[1] = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *, void *))(**((void **)this + 1) + 440))(*((void *)this + 1), a2, a3, a4, a5, a6, v8);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 432))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_MixOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *))(**((void **)this + 1) + 424))(*((void *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 416))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  int v14 = 0;
  int v11 = 0;
  int32x2_t v12 = a7;
  uint64_t v13 = 0;
  int v9 = a8;
  uint64_t v10 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 408))(*((void *)this + 1), a2, a3, a4, a5, a6);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 400))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ProcessOutput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  __int16 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, char *, __int16 *))(**((void **)this + 1) + 392))(*((void *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 384))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  int v14 = 0;
  int v11 = 0;
  int32x2_t v12 = a7;
  uint64_t v13 = 0;
  int v9 = a8;
  uint64_t v10 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 376))(*((void *)this + 1), a2, a3, a4, a5, a6);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 368))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ProcessInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  __int16 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, char *, __int16 *))(**((void **)this + 1) + 360))(*((void *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 352))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const AudioServerPlugInIOCycleInfo *a6, void *a7, void *a8)
{
  int v14 = 0;
  int v11 = 0;
  int32x2_t v12 = a7;
  uint64_t v13 = 0;
  int v9 = a8;
  uint64_t v10 = 0;
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 344))(*((void *)this + 1), a2, a3, a4, a5, a6);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 336))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ConvertInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  __int16 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, char *, __int16 *))(**((void **)this + 1) + 328))(*((void *)this + 1), a2, a3, (char *)&v5 + 1, &v5);
  return v3 | ((unint64_t)HIBYTE(v5) << 32) | ((unint64_t)v5 << 40);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_ReadInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 320))(*((void *)this + 1), a2, a3, a4, a5);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Do_ReadInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v7 = a7;
  }
  else {
    uint64_t v7 = (uint64_t *)*a7;
  }
  if (*(unsigned char *)(a1 + 24)) {
    int v8 = *((_DWORD *)a7 + 4);
  }
  else {
    int v8 = 0;
  }
  uint64_t v10 = v7[1];
  int v11 = v8;
  int32x2_t v12 = vmovn_s64(*(int64x2_t *)(a7 + 3));
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 280))();
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_ReadInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, uint64_t a4, const AudioServerPlugInIOCycleInfo *a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 272))(*((void *)this + 1), a2, a3, a4, a5);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_ReadInput(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *))(**((void **)this + 1) + 264))(*((void *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_IOCycle(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 256))(*((void *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_IOCycle(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 248))(*((void *)this + 1), a2, a3, a4);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_IOCycle(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *))(**((void **)this + 1) + 240))(*((void *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::End_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 232))(*((void *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Begin_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, const AudioServerPlugInIOCycleInfo *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, const AudioServerPlugInIOCycleInfo *))(**((void **)this + 1) + 224))(*((void *)this + 1), a2, a3, a4);
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::WillDo_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t, unsigned __int8 *))(**((void **)this + 1) + 216))(*((void *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

double AMCP::ASP::Legacy_PlugIn_Wrapper::GetZeroTimeStamp@<D0>(AMCP::ASP::Legacy_PlugIn_Wrapper *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = 0;
  double v9 = 0.0;
  uint64_t v7 = 0;
  *(_DWORD *)a4 = (*(uint64_t (**)(void, uint64_t, uint64_t, double *, uint64_t *, uint64_t *))(**((void **)this + 1) + 208))(*((void *)this + 1), a2, a3, &v9, &v8, &v7);
  double result = v9;
  *(double *)(a4 + 8) = v9;
  uint64_t v6 = v7;
  *(void *)(a4 + 16) = v8;
  *(void *)(a4 + 24) = v6;
  return result;
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Stop(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**((void **)this + 1) + 200))(*((void *)this + 1), a2, a3, 0);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Start(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void))(**((void **)this + 1) + 192))(*((void *)this + 1), a2, a3, 0);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Unregister_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 184))(*((void *)this + 1));
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::Register_IOThread(AMCP::ASP::Legacy_PlugIn_Wrapper *this, double a2)
{
  return (*(uint64_t (**)(void, double))(**((void **)this + 1) + 176))(*((void *)this + 1), a2);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::DestroyDevice(AMCP::ASP::Legacy_PlugIn_Wrapper *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 1) + 120))(*((void *)this + 1));
}

unint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::CreateDevice(AMCP::ASP::Legacy_PlugIn_Wrapper *this, const __CFDictionary *a2, const AudioServerPlugInClientInfo *a3)
{
  unsigned int v5 = 0;
  unsigned int v3 = (*(uint64_t (**)(void, const __CFDictionary *, const AudioServerPlugInClientInfo *, unsigned int *))(**((void **)this + 1) + 112))(*((void *)this + 1), a2, a3, &v5);
  return v3 | ((unint64_t)v5 << 32);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::AbortDeviceConfigChange(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void *))(**((void **)this + 1) + 104))(*((void *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::PerformDeviceConfigChange(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, void *))(**((void **)this + 1) + 96))(*((void *)this + 1), a2, a3, a4);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::RemoveDeviceClient(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(void, uint64_t, const AudioServerPlugInClientInfo *))(**((void **)this + 1) + 88))(*((void *)this + 1), a2, a3);
}

uint64_t AMCP::ASP::Legacy_PlugIn_Wrapper::AddDeviceClient(AMCP::ASP::Legacy_PlugIn_Wrapper *this, uint64_t a2, const AudioServerPlugInClientInfo *a3)
{
  return (*(uint64_t (**)(void, uint64_t, const AudioServerPlugInClientInfo *))(**((void **)this + 1) + 80))(*((void *)this + 1), a2, a3);
}

void AMCP::ASP::Legacy_PlugIn_Wrapper::~Legacy_PlugIn_Wrapper(AMCP::ASP::Legacy_PlugIn_Wrapper *this)
{
  *(void *)this = &unk_1F1487B68;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v1;

  *(void *)this = &unk_1F1487B68;
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void *std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP3ASP6EngineC1ENSt3__110shared_ptrINS0_6PlugInEEEbNS3_I17HALS_UCPlugInBaseEEjN10applesauce2CF9StringRefEdjjjjjjRKNS2_6vectorINS_4Core14Implementation18Simple_Engine_Data11Stream_InfoENS2_9allocatorISF_EEEESK_RKNS_7Utility14Dispatch_QueueEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::operator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 304))();
}

uint64_t std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F1487DC8;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_1F1487DC8;
  result[1] = v3;
  return result;
}

void std::__function::__func<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0,std::allocator<AMCP::ASP::Engine::Engine(std::shared_ptr<AMCP::ASP::PlugIn>,BOOL,std::shared_ptr<HALS_UCPlugInBase>,unsigned int,applesauce::CF::StringRef,double,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,unsigned int,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info> const&,AMCP::Utility::Dispatch_Queue const&)::$_0>,CA::TimeStamp ()(void)>::~__func()
{
}

void AMCP::ASP::Engine::Engine(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, CFTypeRef *a7, int a8, int a9, int a10, int a11, int a12, int a13, uint64_t a14, uint64_t a15, dispatch_queue_t *a16)
{
  void v29[4] = *MEMORY[0x1E4F143B8];
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_1F14877E8;
  CFTypeRef v21 = *a7;
  if (*a7) {
    CFRetain(*a7);
  }
  long long v27 = 0uLL;
  uint64_t v28 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v27, *(const void **)a14, *(void *)(a14 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a14 + 8) - *(void *)a14) >> 3));
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  std::vector<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info>::__init_with_size[abi:ne180100]<AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*,AMCP::Core::Implementation::Simple_Engine_Data::Stream_Info*>(&v25, *(const void **)a15, *(void *)(a15 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a15 + 8) - *(void *)a15) >> 3));
  *(void *)(a1 + 24) = v21;
  *(double *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 40) = a8;
  *(_DWORD *)(a1 + 44) = a9;
  *(unsigned char *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = a10;
  *(_DWORD *)(a1 + 56) = a11;
  *(_DWORD *)(a1 + 60) = a12;
  *(_DWORD *)(a1 + 64) = a13;
  *(_OWORD *)(a1 + 72) = v27;
  *(void *)(a1 + 88) = v28;
  long long v27 = 0uLL;
  uint64_t v28 = 0;
  *(_OWORD *)(a1 + 96) = v25;
  *(void *)(a1 + 112) = v26;
  unint64_t v22 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a14 + 8) - *(void *)a14) >> 3);
  uint64_t v23 = (uint64_t)(*(void *)(a15 + 8) - *(void *)a15) >> 3;
  long long v25 = 0uLL;
  uint64_t v26 = 0;
  AMCP::Core::Implementation::Simple_Engine_IO_State::Simple_Engine_IO_State((AMCP::Core::Implementation::Simple_Engine_IO_State *)(a1 + 120), (const __CFString **)a7, v22, 0x6DB6DB6DB6DB6DB7 * v23, 0, a16, v24);
  v29[0] = &unk_1F1487DC8;
  v29[1] = a1;
  v29[3] = v29;
  AMCP::IO_Clock::IO_Clock(a1 + 560);
}

void sub_1BAF77DA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  a21 = v27 + 95;
  std::vector<std::shared_ptr<unsigned long long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  uint64_t v30 = v27[91];
  v27[91] = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  AMCP::IO_Clock::~IO_Clock(v28);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(v27 + 30));
  uint64_t v31 = (std::__shared_weak_count *)v27[29];
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v32 = (std::__shared_weak_count *)v27[27];
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  int v33 = (void *)v27[22];
  if (v33) {
    operator delete(v33);
  }
  char v34 = (void *)v27[18];
  if (v34) {
    operator delete(v34);
  }
  uint64_t v35 = (void *)v27[12];
  if (v35)
  {
    v27[13] = v35;
    operator delete(v35);
  }
  long long v36 = (void *)v27[9];
  if (v36)
  {
    unsigned char v27[10] = v36;
    operator delete(v36);
  }
  __int16 v37 = (const void *)v27[3];
  if (v37) {
    CFRelease(v37);
  }
  int v38 = (std::__shared_weak_count *)v27[2];
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  _Unwind_Resume(a1);
}

double ***AMCP::Graph::Input_Path_Calculator::calculate_minimum_required_input_samples_for_output_samples(AMCP::Graph::Input_Path_Calculator *this, const AMCP::Graph::Manifest_Execution_Context *a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *(void *)(v3 + 32) - *(void *)(v3 + 24);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v4 >> 3);
    double v7 = 0.0;
    do
    {
      nth_connection_list = (uint64_t *)AMCP::Graph::Manifest_Task::get_nth_connection_list(*((AMCP::Log::Scope_Registry **)this + 1), v5, 1u);
      uint64_t v9 = *nth_connection_list;
      uint64_t v10 = nth_connection_list[1];
      while (v9 != v10)
      {
        int v11 = *(void **)v9;
        double v12 = *(double *)(*(void *)v9 + 160);
        long long v34 = *(_OWORD *)(*(void *)v9 + 208);
        uint64_t v13 = v11[29];
        uint64_t v35 = v11[28];
        uint64_t v36 = v13;
        int v14 = (std::__shared_weak_count *)v11[30];
        __int16 v37 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v34);
        long long v16 = *(void **)v9;
        long long v30 = *(_OWORD *)(*(void *)v9 + 168);
        uint64_t v17 = v16[24];
        uint64_t v31 = v16[23];
        uint64_t v32 = v17;
        long long v18 = (std::__shared_weak_count *)v16[25];
        int v33 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        double v19 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v30);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        if (v37) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v37);
        }
        if (round(v7) < round(v12 - (sample_time - v19))) {
          double v7 = v12 - (sample_time - v19);
        }
        v9 += 16;
      }
      ++v5;
    }
    while (v5 != v6);
    uint64_t v3 = *((void *)this + 1);
  }
  else
  {
    double v7 = 0.0;
  }
  double result = *(double ****)(*(void *)(v3 + 48) + 472);
  if (result)
  {
    *(void *)&long long v34 = vcvtmd_s64_f64(v7);
    double result = (double ***)((uint64_t (*)(double ***, long long *))(*result)[6])(result, &v34);
    double v7 = (double)(unint64_t)result;
    uint64_t v3 = *((void *)this + 1);
  }
  else
  {
    double v27 = *(double *)(v3 + 96);
    if (round(v27) != 0.0)
    {
      double v28 = (double)(uint64_t)floor(v7) / v27;
      uint64_t v29 = vcvtmd_s64_f64(v27);
      if (v28 == floor(v28)) {
        double v7 = v28 * (double)v29;
      }
      else {
        double v7 = (double)(v29 + v29 * ((uint64_t)vcvtmd_s64_f64(v7) / v29));
      }
    }
  }
  uint64_t v21 = *(void *)(v3 + 8) - *(void *)v3;
  if (v21)
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * (v21 >> 3);
    do
    {
      double result = (double ***)AMCP::Graph::Manifest_Task::get_nth_connection_list(*((AMCP::Log::Scope_Registry **)this + 1), v22, 0);
      long long v24 = *result;
      long long v25 = result[1];
      while (v24 != v25)
      {
        uint64_t v26 = *v24;
        v24 += 2;
        double result = (double ***)AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(v26, v7);
      }
      ++v22;
    }
    while (v22 != v23);
  }
  return result;
}

void sub_1BAF78114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Input_Path_Calculator::get_number_of_samples_to_read(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a1 + 8) + 32) == *(void *)(*(void *)(a1 + 8) + 24))
  {
    uint64_t v4 = *(void **)a3;
    long long v14 = *(_OWORD *)(*(void *)a3 + 208);
    uint64_t v5 = v4[29];
    uint64_t v15 = v4[28];
    uint64_t v16 = v5;
    unint64_t v6 = (std::__shared_weak_count *)v4[30];
    uint64_t v17 = v6;
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v14);
    double v7 = *(void **)a3;
    long long v10 = *(_OWORD *)(*(void *)a3 + 168);
    uint64_t v8 = v7[24];
    uint64_t v11 = v7[23];
    uint64_t v12 = v8;
    uint64_t v9 = (std::__shared_weak_count *)v7[25];
    uint64_t v13 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v10);
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_1BAF7822C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::Graph::Input_Path_Calculator::process_all_pending_samples(uint64_t result, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v38 = result;
  uint64_t v6 = *(void *)(result + 8);
  if (*(void *)(v6 + 32) == *(void *)(v6 + 24))
  {
    uint64_t v32 = *(void *)(result + 8);
    return (uint64_t)AMCP::Graph::Manifest_Task::process_once(v32, a2, a3, a4, a5, a6);
  }
  else
  {
    while (2)
    {
      uint64_t v7 = *(void *)(v6 + 32) - *(void *)(v6 + 24);
      if (v7)
      {
        BOOL v8 = 0;
        unint64_t v9 = 0;
        uint64_t v10 = (unsigned __int128)(v7 * (__int128)0x6666666666666667) >> 64;
        unint64_t v11 = (v10 >> 4) + ((unint64_t)v10 >> 63);
        if (v11 <= 1) {
          uint64_t v12 = 1;
        }
        else {
          uint64_t v12 = (v10 >> 4) + ((unint64_t)v10 >> 63);
        }
        uint64_t v39 = v12;
LABEL_7:
        double result = AMCP::Graph::Manifest_Task::get_nth_connection_list((AMCP::Log::Scope_Registry *)v6, v9, 1u);
        uint64_t v14 = *(void *)result;
        uint64_t v13 = *(void *)(result + 8);
        while (1)
        {
          if (v14 == v13)
          {
            BOOL v8 = ++v9 >= v11;
            if (v9 != v39) {
              goto LABEL_7;
            }
            return result;
          }
          uint64_t v15 = *(void **)v14;
          uint64_t v16 = *(void *)(*(void *)v14 + 328);
          if (v16)
          {
            uint64_t v17 = pthread_self();
            char v18 = pthread_mach_thread_np(v17);
            AMCP::Graph::Manifest_Buffer::get_buffer_id(&v40, (uint64_t)v15);
            AMCP::Wire_Identifier_to_string(&v41, (const void **)&v40.__r_.__value_.__l.__data_);
            AMCP::Graph::Manifest_Log::add_message(v16, 4, "%u\tManifest_Buffer(%ld)::has_minimum_required_samples_after_time:  source: %s", v19, v20, v21, v22, v23, v18);
          }
          if (!v15[38]) {
            break;
          }
          uint64_t v24 = v15[41];
          if (v24)
          {
            double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v15 + 26));
            char v26 = LOBYTE(sample_time);
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v15 + 31));
            AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v15 + 21));
            AMCP::Graph::Manifest_Log::add_message(v24, 4, "\t\tproducer write: %0.4f  producer target: %0.4f  consumer read: %0.4f", v27, v28, v29, v30, v31, v26);
          }
          double result = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(v15 + 26), (AMCP::DAL::DAL_Time *)(v15 + 31));
          if (result) {
            break;
          }
          v14 += 16;
        }
        if (!v8)
        {
          double result = (uint64_t)AMCP::Graph::Manifest_Task::process_once(*(void *)(v38 + 8), a2, a3, a4, a5, a6);
          uint64_t v6 = *(void *)(v38 + 8);
          if (round(*(double *)(v6 + 96)) != 0.0) {
            continue;
          }
        }
      }
      break;
    }
  }
  return result;
}

void sub_1BAF78498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Input_Path_Calculator::~Input_Path_Calculator(AMCP::Graph::Input_Path_Calculator *this)
{
}

uint64_t AMCP::Graph::Output_Path_Calculator::calculate_minimum_required_input_samples_for_output_samples(uint64_t this, const AMCP::Graph::Manifest_Execution_Context *a2)
{
  uint64_t v2 = *(void *)(*(void *)(this + 8) + 8) - **(void **)(this + 8);
  if (v2)
  {
    uint64_t v3 = (AMCP::Log::Scope_Registry **)this;
    unint64_t v4 = 0;
    unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3);
    do
    {
      this = AMCP::Graph::Manifest_Task::get_nth_connection_list(v3[1], v4, 0);
      uint64_t v6 = *(double ***)this;
      uint64_t v7 = *(double ***)(this + 8);
      while (v6 != v7)
      {
        BOOL v8 = *v6;
        v6 += 2;
        double v9 = AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write((AMCP::Log::Scope_Registry *)v3);
        this = (uint64_t)AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(v8, v9);
      }
      ++v4;
    }
    while (v4 != v5);
  }
  return this;
}

double AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *((void *)a1 + 1);
  double result = *(double *)(v2 + 96);
  double v4 = round(result);
  if (v4 == 0.0)
  {
    double result = AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(*(AMCP::Graph::Manifest_Task **)v2, *(AMCP::Graph::Manifest_Task **)(v2 + 8));
    double v4 = round(result);
  }
  if (v4 < 0.0)
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v6 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&uint64_t v27[2] = "Data_Flow_Calculator.cpp";
      __int16 v28 = 1024;
      int v29 = 184;
      __int16 v30 = 2080;
      *(void *)uint64_t v31 = "not (input_samples >= 0_S)";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "virtual DAL::Sample_Time AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write(co"
                         "nst Manifest_Execution_Context &, const Manifest_Task::Connection &)";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Data_Flow_Calculator.cpp";
    int v33 = 184;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v5 = *(AMCP::Log::Scope_Registry **)(*(void *)(*((void *)a1 + 1) + 48) + 504);
  if (v5)
  {
    v19.__vftable = 0;
    *(void *)AudioStreamBasicDescription buf = vcvtmd_s64_f64(result);
    unint64_t v5 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(AMCP::Log::Scope_Registry *, uint8_t *, std::logic_error *))(*(void *)v5 + 48))(v5, buf, &v19);
    double result = (double)(unint64_t)v5;
  }
  if (round(result) < 0.0)
  {
    AMCP::Log::Scope_Registry::get(v5);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    double v9 = **(NSObject ***)buf;
    if (*(void *)v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v27);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)AudioStreamBasicDescription buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)uint64_t v27 = 2080;
      *(void *)&uint64_t v27[2] = "Data_Flow_Calculator.cpp";
      __int16 v28 = 1024;
      int v29 = 187;
      __int16 v30 = 2080;
      *(void *)uint64_t v31 = "not (result >= 0_S)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v31[6] = "virtual DAL::Sample_Time AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_write(co"
                         "nst Manifest_Execution_Context &, const Manifest_Task::Connection &)";
    uint64_t v32 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Data_Flow_Calculator.cpp";
    int v33 = 187;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    uint64_t v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  return result;
}

void sub_1BAF78A88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

double AMCP::Graph::Output_Path_Calculator::get_number_of_samples_to_read(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  double result = *(double *)(v1 + 96);
  if (round(result) == 0.0) {
    return AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(*(AMCP::Graph::Manifest_Task **)v1, *(AMCP::Graph::Manifest_Task **)(v1 + 8));
  }
  return result;
}

double AMCP::Graph::Output_Path_Calculator::process_all_pending_samples(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 8);
    double result = round(AMCP::Graph::Manifest_Task::calculate_samples_to_process_for_output(*(AMCP::Graph::Manifest_Task **)v12, *(AMCP::Graph::Manifest_Task **)(v12 + 8)));
    if (result <= 0.0 || result < round(*(double *)(v12 + 96))) {
      break;
    }
    AMCP::Graph::Manifest_Task::process_once(*(void *)(a1 + 8), a2, a3, a4, a5, a6);
  }
  return result;
}

void AMCP::Graph::Output_Path_Calculator::~Output_Path_Calculator(AMCP::Graph::Output_Path_Calculator *this)
{
}

double ***AMCP::Graph::IO_Proc_Calculator::calculate_minimum_required_input_samples_for_output_samples(double ***this, const AMCP::Graph::Manifest_Execution_Context *a2)
{
  uint64_t v2 = (char *)this[1][1] - (char *)*this[1];
  if (v2)
  {
    uint64_t v4 = (uint64_t)this;
    unint64_t v5 = 0;
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v2 >> 3);
    do
    {
      this = (double ***)AMCP::Graph::Manifest_Task::get_nth_connection_list(*(AMCP::Log::Scope_Registry **)(v4 + 8), v5, 0);
      uint64_t v7 = *this;
      mach_port_t v8 = this[1];
      while (v7 != v8)
      {
        if ((*(unsigned char *)a2 & 2) == 0) {
          AMCP::DAL::DAL_Time_Delta::validate(a2);
        }
        double v9 = *v7;
        v7 += 2;
        this = (double ***)AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(v9, *((double *)a2 + 1));
      }
      ++v5;
    }
    while (v5 != v6);
  }
  return this;
}

double AMCP::Graph::IO_Proc_Calculator::get_number_of_samples_to_write(int a1, AMCP::DAL::DAL_Time_Delta *this)
{
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate(this);
  }
  return *((double *)this + 1);
}

double AMCP::Graph::IO_Proc_Calculator::get_number_of_samples_to_read(int a1, AMCP::DAL::DAL_Time_Delta *this)
{
  if ((*(unsigned char *)this & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate(this);
  }
  return *((double *)this + 1);
}

caulk::rt_safe_memory_resource *AMCP::Graph::IO_Proc_Calculator::process_all_pending_samples(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return AMCP::Graph::Manifest_Task::process_once(*(void *)(a1 + 8), a2, a3, a4, a5, a6);
}

void AMCP::Graph::IO_Proc_Calculator::~IO_Proc_Calculator(AMCP::Graph::IO_Proc_Calculator *this)
{
}

uint64_t std::shared_ptr<AMCP::DAL::DAL_Buffer>::operator=[abi:ne180100]<AMCP::DAL::Mixing_Ring_Buffer,std::default_delete<AMCP::DAL::Mixing_Ring_Buffer>,void>(uint64_t a1, void *a2)
{
  if (*a2) {
    operator new();
  }
  *a2 = 0;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = 0u;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Mixing_Ring_Buffer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP3DAL18Mixing_Ring_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Mixing_Ring_Buffer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::Mixing_Ring_Buffer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Ring_Buffer  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"NSt3__114default_deleteIN4AMCP3DAL11Ring_BufferEEE"))
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__shared_ptr_pointer<AMCP::DAL::Ring_Buffer  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__shared_ptr_pointer<AMCP::DAL::Ring_Buffer  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void AMCP::Graph::Manifest_Buffer::anchor_time(AMCP::Graph::Manifest_Buffer *this, std::__shared_weak_count **a2, int a3, AMCP::Graph::Manifest_Counter *a4, const AMCP::Graph::Manifest_Execution_Context *a5)
{
  uint64_t v138 = *MEMORY[0x1E4F143B8];
  if (*((void *)this + 37))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v73 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v73, OS_LOG_TYPE_ERROR))
    {
      uint64_t v74 = pthread_self();
      mach_port_t v75 = pthread_mach_thread_np(v74);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v75;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 149;
      v132.n128_u16[0] = 2080;
      *(unint64_t *)((char *)v132.n128_u64 + 2) = (unint64_t)"not (not is_processing())";
      _os_log_error_impl(&dword_1BAA78000, v73, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v125);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Don't call anchor_to_timebase_anchor on buffers that are currently processing", (uint64_t)&v118);
    std::logic_error::logic_error(&v128, &v118);
    v128.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v98, &v128);
    uint64_t v100 = 0;
    int64_t v101 = 0;
    *(void *)&long long v102 = 0;
    DWORD2(v102) = -1;
    v98.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v99 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v98);
    v132.n128_u64[1] = (unint64_t)"void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Obj"
                                         "ect_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
    int v133 = (std::__shared_weak_count *)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v134 = 149;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v114.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
    v96.n128_u64[0] = v114.__r_.__value_.__r.__words[2];
    memset(&v114, 0, sizeof(v114));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  __n128 v9 = *((__n128 *)this + 8);
  __n128 v130 = v9;
  __n128 v85 = v9;
  uint64_t v10 = (std::__shared_weak_count *)v9.n128_u64[1];
  if (v9.n128_u64[1]) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
  }
  AMCP::DAL::DAL_Time_Delta::translate_time_delta((uint64_t)&v128, a5, (uint64_t *)&v130);
  if ((*(_DWORD *)a2 & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  }
  uint64_t v12 = a2[3];
  mach_port_t v11 = a2[4];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    if (v12 == (std::__shared_weak_count *)v85.n128_u64[0]) {
      goto LABEL_8;
    }
LABEL_29:
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v11);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    char v25 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      char v26 = pthread_self();
      mach_port_t v27 = pthread_mach_thread_np(v26);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v27;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 155;
      v132.n128_u16[0] = 2080;
      *(unint64_t *)((char *)v132.n128_u64 + 2) = (unint64_t)"not (exact_buffer_time.get_clock() == timebase)";
      _os_log_error_impl(&dword_1BAA78000, v25, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v118);
    std::logic_error::logic_error(&v125, &v118);
    v125.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v98, &v125);
    uint64_t v100 = 0;
    int64_t v101 = 0;
    *(void *)&long long v102 = 0;
    DWORD2(v102) = -1;
    v98.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v99 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v98);
    v132.n128_u64[1] = (unint64_t)"void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Obj"
                                         "ect_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
    int v133 = (std::__shared_weak_count *)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v134 = 155;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v114.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
    v96.n128_u64[0] = v114.__r_.__value_.__r.__words[2];
    memset(&v114, 0, sizeof(v114));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v12 != (std::__shared_weak_count *)v85.n128_u64[0]) {
    goto LABEL_29;
  }
LABEL_8:
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  uint64_t v14 = (AMCP::Log::Scope_Registry *)(*(uint64_t (**)(unint64_t, __n128))(*(void *)v85.n128_u64[0]
                                                                                         + 136))(v85.n128_u64[0], v85);
  double v15 = round(sample_time);
  double v16 = round(*(double *)&v14);
  if (v17) {
    BOOL v18 = v15 < v16;
  }
  else {
    BOOL v18 = 0;
  }
  if (v18)
  {
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int16x8_t v76 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
    {
      uint64_t v77 = pthread_self();
      mach_port_t v78 = pthread_mach_thread_np(v77);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v78;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 156;
      v132.n128_u16[0] = 2080;
      *(unint64_t *)((char *)v132.n128_u64 + 2) = (unint64_t)"not (exact_buffer_time.get_sample_time() >= t"
                                                                           "imebase->get_anchor_time())";
      _os_log_error_impl(&dword_1BAA78000, v76, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Attempt to anchor before the clock's anchor time", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v121);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"Attempt to anchor before the clock's anchor time", (uint64_t)&v118);
    std::logic_error::logic_error(&v125, &v118);
    v125.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v98, &v125);
    uint64_t v100 = 0;
    int64_t v101 = 0;
    *(void *)&long long v102 = 0;
    DWORD2(v102) = -1;
    v98.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v99 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v98);
    v132.n128_u64[1] = (unint64_t)"void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Obj"
                                         "ect_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
    int v133 = (std::__shared_weak_count *)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v134 = 156;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v114.__r_.__value_.__l.__data_);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(_OWORD *)&v114.__r_.__value_.__l.__data_;
    v96.n128_u64[0] = v114.__r_.__value_.__r.__words[2];
    memset(&v114, 0, sizeof(v114));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  double v19 = (double)*((int *)this + 80);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(v125.__vftable) = 2;
  *(double *)&v125.__imp_.__imp_ = v19;
  uint64_t v126 = 0;
  __n128 v127 = v85;
  AMCP::DAL::DAL_Time::round((AMCP::DAL::DAL_Time *)&v121, (uint64_t)a2);
  BOOL v20 = AMCP::DAL::DAL_Time::operator==((AMCP::DAL::DAL_Time *)&v121, (AMCP::DAL::DAL_Time *)a2);
  if (!v20)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v20);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v21 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v71 = pthread_self();
      mach_port_t v72 = pthread_mach_thread_np(v71);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109634;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v72;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 163;
      _os_log_debug_impl(&dword_1BAA78000, v21, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Buffer Time was rounded during anchor_time!", (uint8_t *)&buf, 0x18u);
    }
  }
  double v22 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v121);
  if (((uint64_t)v128.__vftable & 2) == 0) {
    AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v128);
  }
  double v23 = v22 + *(double *)&v128.__imp_.__imp_ + v19;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 2;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *(unint64_t *)&v23;
  __n128 v132 = v85;
  AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&v118, (const AMCP::DAL::DAL_Time *)&v121, (const AMCP::DAL::DAL_Time *)&buf);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v24 = *((void *)this + 38);
  if (v24)
  {
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v111, *((const std::string::value_type **)this + 1), *((void *)this + 2));
      uint64_t v24 = *((void *)this + 38);
    }
    else
    {
      std::string v111 = *(std::string *)((char *)this + 8);
    }
    uint64_t v28 = *((void *)this + 4);
    int v113 = *((_DWORD *)this + 10);
    LODWORD(v114.__r_.__value_.__l.__data_) = a3;
    *(_OWORD *)&v114.__r_.__value_.__r.__words[1] = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    std::string::size_type v29 = v111.__r_.__value_.__r.__words[2];
    memset(&v111, 0, sizeof(v111));
    uint64_t v112 = v28;
    int v117 = v113;
    std::string::size_type v115 = v29;
    uint64_t v116 = v28;
    (*(void (**)(uint64_t, std::string *, std::string *, void))(*(void *)v24 + 96))(v24, &v114, &v118, *((unsigned int *)this + 39));
    if (((uint64_t)v125.__vftable & 2) == 0) {
      AMCP::DAL::DAL_Time_Delta::validate((AMCP::DAL::DAL_Time_Delta *)&v125);
    }
    if ((uint64_t)vcvtmd_s64_f64(*(double *)&v125.__imp_.__imp_) >= 1)
    {
      (*(void (**)(long long *__return_ptr))(**((void **)this + 38) + 80))(&v109);
      double v30 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v121);
      __n128 v31 = v130;
      uint64_t v32 = (std::__shared_weak_count *)v130.n128_u64[1];
      if (v130.n128_u64[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v130.n128_u64[1] + 8), 1uLL, memory_order_relaxed);
      }
      LODWORD(v106.__vftable) = 2;
      *(double *)&v106.__imp_.__imp_ = v30;
      uint64_t v107 = 0;
      __n128 v108 = v31;
      double v33 = (double)*((int *)this + 80);
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487FC0;
      if (v32) {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 2;
      *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = *(unint64_t *)&v33;
      __n128 v96 = v31;
      boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v98, (uint64_t)&v106, (uint64_t)&__p);
      AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&buf.__r_.__value_.__r.__words[1], (const AMCP::DAL::DAL_Time *)&v106, (const AMCP::DAL::DAL_Time *)&v98);
      if (v101) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v101);
      }
      if (v96.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.n128_u64[1]);
      }
      AMCP::DAL::Container::Container(&v136, (uint64_t)&v109, v33);
      if (v32) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v32);
      }
      AMCP::DAL::Fixed_Buffer::create_readable_range((AMCP::DAL::Fixed_Buffer *)&buf, (uint64_t)&v98);
      uint64_t v34 = *((void *)this + 38);
      std::logic_error v87 = v98;
      unsigned int v88 = v99;
      uint64_t v89 = v100;
      unint64_t v90 = v101;
      if (v101) {
        atomic_fetch_add_explicit(&v101->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v91 = v102;
      uint64_t v92 = v103;
      uint64_t v93 = v104;
      uint64_t v94 = v105;
      if (v105) {
        atomic_fetch_add_explicit(&v105->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v34 + 160))(&__p);
      if (v94) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v94);
      }
      if (v90) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v90);
      }
      AMCP::DAL::Writable_Range::receive_data((uint64_t)&__p, (int)&v114, (AMCP::DAL::DAL_Time *)&v98);
      if (v97) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v97);
      }
      if (v96.n128_u64[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v96.n128_u64[1]);
      }
      if (v105) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v105);
      }
      if (v101) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v101);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1487FC0;
      if (v137) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v137);
      }
      if (v135) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v135);
      }
      if (v133) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v133);
      }
    }
    if (SHIBYTE(v115) < 0) {
      operator delete((void *)v114.__r_.__value_.__l.__size_);
    }
  }
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v98, (uint64_t)a2, (uint64_t)&v125);
  AMCP::DAL::DAL_Time::round((AMCP::DAL::DAL_Time *)&buf, (uint64_t)&v98);
  *(std::string *)((char *)this + 208) = buf;
  uint64_t v35 = (std::__shared_weak_count *)*((void *)this + 30);
  *(__n128 *)((char *)this + 232) = v132;
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (v101) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v101);
  }
  *((_DWORD *)this + 62) = *((_DWORD *)this + 52);
  *((_OWORD *)this + 16) = *(_OWORD *)((char *)this + 216);
  uint64_t v37 = *((void *)this + 29);
  uint64_t v36 = *((void *)this + 30);
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v38 = (std::__shared_weak_count *)*((void *)this + 35);
  *((void *)this + 34) = v37;
  *((void *)this + 35) = v36;
  if (v38) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  }
  *((_DWORD *)this + 42) = v121;
  uint64_t v39 = (_DWORD *)((char *)this + 168);
  *((_OWORD *)this + 11) = v122;
  std::string v41 = v123;
  std::string v40 = v124;
  if (v124) {
    atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v42 = (std::__shared_weak_count *)*((void *)this + 25);
  *((void *)this + 24) = v41;
  *((void *)this + 25) = v40;
  if (v42) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
  }
  uint64_t v43 = *((void *)this + 41);
  if (v43)
  {
    uint64_t v44 = *(void *)this;
    AMCP::Graph::Manifest_Buffer::get_buffer_id(&buf, (uint64_t)this);
    AMCP::Wire_Identifier_to_string(&__p, (const void **)&buf.__r_.__value_.__l.__data_);
    AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v121);
    std::string::size_type v45 = *((void *)a4 + 3);
    std::string::size_type v46 = *((void *)a4 + 4);
    v114.__r_.__value_.__r.__words[0] = v45;
    v114.__r_.__value_.__l.__size_ = v46;
    if (v46) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
    }
    AMCP::DAL::DAL_Time::translate_time((uint64_t)&v98, (AMCP::DAL::DAL_Time *)&v121, (uint64_t *)&v114);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v98);
    AMCP::Graph::Manifest_Log::add_message(v43, 4, "Manifest_Buffer(%ld) %s  anchor_time - host time: %llu, sample time: %lf", v47, v48, v49, v50, v51, v44);
  }
  if ((*v39 & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::Graph::Manifest_Buffer *)((char *)this + 168));
  }
  if ((*((_DWORD *)this + 62) & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::Graph::Manifest_Buffer *)((char *)this + 248));
  }
  if ((*v39 & 0xFFFFFFFE) == 2) {
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::Graph::Manifest_Buffer *)((char *)this + 168));
  }
  double v52 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::Graph::Manifest_Buffer *)((char *)this + 168));
  if (AMCP::DAL::DAL_Time::get_sample_time((AMCP::Graph::Manifest_Buffer *)((char *)this + 168)) != (double)(uint64_t)floor(v52))
  {
    AMCP::Log::Scope_Registry::get(v53);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unint64_t v79 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
    {
      unsigned int v80 = pthread_self();
      mach_port_t v81 = pthread_mach_thread_np(v80);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v81;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 198;
      v132.n128_u16[0] = 2080;
      *(unint64_t *)((char *)v132.n128_u64 + 2) = (unint64_t)"not (m_consumer_read_position.get_sample_time"
                                                                           "().floor().get() == m_consumer_read_position."
                                                                           "get_sample_time().get_double())";
      _os_log_error_impl(&dword_1BAA78000, v79, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v114);
    std::logic_error::logic_error(&v106, &v114);
    v106.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v98, &v106);
    uint64_t v100 = 0;
    int64_t v101 = 0;
    *(void *)&long long v102 = 0;
    DWORD2(v102) = -1;
    v98.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v99 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v98);
    v132.n128_u64[1] = (unint64_t)"void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Obj"
                                         "ect_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
    int v133 = (std::__shared_weak_count *)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v134 = 198;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v109);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v109;
    v96.n128_u64[0] = v110;
    long long v109 = 0uLL;
    unint64_t v110 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v54 = (unint64_t)v123;
  uint64_t v55 = v124;
  if (v124) {
    atomic_fetch_add_explicit(&v124->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unint64_t v56 = v130.n128_u64[0];
  BOOL v57 = (v54 | v130.n128_u64[0]) == 0;
  if (!v54 || !v130.n128_u64[0])
  {
LABEL_120:
    if (!v55) {
      goto LABEL_122;
    }
    goto LABEL_121;
  }
  long long v58 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v54 + 16))(v54);
  unint64_t v54 = (*(uint64_t (**)(unint64_t))(*(void *)v56 + 16))(v56);
  uint64_t v59 = v58[23];
  if ((v59 & 0x80u) == 0) {
    uint64_t v60 = v58[23];
  }
  else {
    uint64_t v60 = *((void *)v58 + 1);
  }
  uint64_t v61 = *(unsigned __int8 *)(v54 + 23);
  int v62 = (char)v61;
  if ((v61 & 0x80u) != 0) {
    uint64_t v61 = *(void *)(v54 + 8);
  }
  if (v60 != v61)
  {
    BOOL v57 = 0;
    if (!v55) {
      goto LABEL_122;
    }
LABEL_121:
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    goto LABEL_122;
  }
  if (v62 >= 0) {
    __int16 v63 = (unsigned __int8 *)v54;
  }
  else {
    __int16 v63 = *(unsigned __int8 **)v54;
  }
  if ((v59 & 0x80) != 0)
  {
    unint64_t v54 = memcmp(*(const void **)v58, v63, *((void *)v58 + 1));
    BOOL v57 = v54 == 0;
    goto LABEL_120;
  }
  if (v58[23])
  {
    uint64_t v64 = v59 - 1;
    do
    {
      int v66 = *v58++;
      int v65 = v66;
      int v68 = *v63++;
      int v67 = v68;
      BOOL v70 = v64-- != 0;
      BOOL v57 = v65 == v67;
    }
    while (v65 == v67 && v70);
    goto LABEL_120;
  }
  BOOL v57 = 1;
  if (v55) {
    goto LABEL_121;
  }
LABEL_122:
  if (!v57)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v54);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    int v82 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      int64_t v83 = pthread_self();
      mach_port_t v84 = pthread_mach_thread_np(v83);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v84;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 199;
      v132.n128_u16[0] = 2080;
      *(unint64_t *)((char *)v132.n128_u64 + 2) = (unint64_t)"not (is_same_timebase(buffer_time.get_clock(), timebase))";
      _os_log_error_impl(&dword_1BAA78000, v82, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v86);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v114);
    std::logic_error::logic_error(&v106, &v114);
    v106.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v98, &v106);
    uint64_t v100 = 0;
    int64_t v101 = 0;
    *(void *)&long long v102 = 0;
    DWORD2(v102) = -1;
    v98.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    unsigned int v99 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v98);
    v132.n128_u64[1] = (unint64_t)"void AMCP::Graph::Manifest_Buffer::anchor_time(const DAL::DAL_Time &, AMCP::Obj"
                                         "ect_ID, Manifest_Counter &, const Manifest_Execution_Context &)";
    int v133 = (std::__shared_weak_count *)"/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v134 = 199;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v109);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = v109;
    v96.n128_u64[0] = v110;
    long long v109 = 0uLL;
    unint64_t v110 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (v120) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v120);
  }
  if (v119) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v119);
  }
  if (v55) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  }
  if (v127.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v127.n128_u64[1]);
  }
  if (v129) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v129);
  }
  if (v130.n128_u64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v130.n128_u64[1]);
  }
}

void sub_1BAF7ABA8(_Unwind_Exception *a1)
{
  AMCP::DAL::DAL_Time_Range::~DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)&STACK[0x208]);
  uint64_t v3 = (std::__shared_weak_count *)v1[27];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)v1[32];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)v1[37];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  unint64_t v6 = (std::__shared_weak_count *)v1[39];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  _Unwind_Resume(a1);
}

void sub_1BAF7AF78()
{
}

double AMCP::DAL::DAL_Time::round(AMCP::DAL::DAL_Time *this, uint64_t a2)
{
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a2);
  long long v5 = *(_OWORD *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)this = 2;
  double result = round(sample_time);
  *((double *)this + 1) = result;
  *((void *)this + 2) = 0;
  *(_OWORD *)((char *)this + 24) = v5;
  return result;
}

void AMCP::Graph::Manifest_Buffer::advance(AMCP::Graph::Manifest_Buffer *this)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!*((void *)this + 37))
  {
    AMCP::Log::Scope_Registry::get(this);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v8 = **(NSObject ***)buf;
    if ((void)v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v28);
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      __n128 v9 = pthread_self();
      mach_port_t v10 = pthread_mach_thread_np(v9);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v10;
      LOWORD(v28) = 2080;
      *(void *)((char *)&v28 + 2) = "Manifest_Buffer.cpp";
      WORD5(v28) = 1024;
      HIDWORD(v28) = 265;
      LOWORD(v29) = 2080;
      *(void *)((char *)&v29 + 2) = "not (is_processing())";
      _os_log_error_impl(&dword_1BAA78000, v8, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v26);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v18);
    std::logic_error::logic_error(&v19, &v18);
    v19.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v20, &v19);
    uint64_t v22 = 0;
    double v23 = 0;
    uint64_t v24 = 0;
    int v25 = -1;
    v20.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v21 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v20);
    *((void *)&v29 + 1) = "void AMCP::Graph::Manifest_Buffer::advance()";
    double v30 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v31 = 265;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v16);
    uint64_t v12 = &unk_1F148AA90;
    long long v13 = v16;
    uint64_t v14 = v17;
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v2 = *((void *)this + 38);
  if (v2)
  {
    std::logic_error v20 = *(std::logic_error *)((char *)this + 168);
    uint64_t v3 = *((void *)this + 24);
    uint64_t v21 = (void *)*((void *)this + 23);
    uint64_t v22 = v3;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 25);
    double v23 = v4;
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v2 = *((void *)this + 38);
    }
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v2 + 64))(buf);
    AMCP::DAL::DAL_Time::operator-((uint64_t)&v12, (AMCP::DAL::DAL_Time *)&v20, (AMCP::DAL::DAL_Time *)buf);
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    uint64_t v5 = v22;
    uint64_t v6 = v23;
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      *((void *)&v11 + 1) = v6;
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      *((void *)&v11 + 1) = 0;
    }
    *(void *)&long long v11 = v5;
    *(_DWORD *)std::string buf = 2;
    long long v28 = 0uLL;
    long long v29 = v11;
    BOOL v7 = AMCP::DAL::DAL_Time_Delta::operator<((AMCP::DAL::DAL_Time_Delta *)buf, (uint64_t)&v12);
    if (*((void *)&v29 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v29 + 1));
    }
    if (v7)
    {
      (*(void (**)(void, void **))(**((void **)this + 38) + 120))(*((void *)this + 38), &v12);
      (*(void (**)(void))(**((void **)this + 38) + 88))(*((void *)this + 38));
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_1BAF7B3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(uint64_t a1, int a2, uint64_t *a3, void *a4)
{
  uint64_t v135 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a1 + 328);
  if (v7)
  {
    mach_port_t v8 = pthread_self();
    char v9 = pthread_mach_thread_np(v8);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 304) + 72))(&buf);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&buf);
    double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v132);
    (*(void (**)(std::string *__return_ptr, double))(**(void **)(a1 + 304) + 72))(&v119, sample_time);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v119);
    vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v122));
    AMCP::Graph::Manifest_Log::add_message(v7, 4, "%u\tManifest_Buffer(%ld)::copy_data_and_update_write_position: new pos:[%lld,%lld], current write position %lld, current_read_position %lld, underlying buffer:[%lld, %lld]", v11, v12, v13, v14, v15, v9);
  }
  BOOL v16 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)(a1 + 208), (AMCP::DAL::DAL_Time *)(a4 + 5));
  if (!v16)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v16);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v81 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
    {
      int v82 = pthread_self();
      mach_port_t v83 = pthread_mach_thread_np(v82);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v83;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 374;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (write_position.end() > m_producer_write_position)";
      _os_log_error_impl(&dword_1BAA78000, v81, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v128);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v106);
    std::logic_error::logic_error(&v126, &v106);
    v126.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v126);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 374;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
    *(std::string *)&v113[8] = v111;
    *(void *)int v113 = &unk_1F148AA90;
    memset(&v111, 0, sizeof(v111));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  unint64_t v17 = a4[3];
  std::string v18 = (std::__shared_weak_count *)a4[4];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = *(void *)(a1 + 232);
  std::logic_error v19 = *(std::__shared_weak_count **)(a1 + 240);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  BOOL v21 = (v17 | v20) == 0;
  if (!v17 || !v20)
  {
LABEL_31:
    if (!v19) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  uint64_t v22 = (unsigned __int8 *)(*(uint64_t (**)(unint64_t))(*(void *)v17 + 16))(v17);
  unint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 16))(v20);
  uint64_t v23 = v22[23];
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = v22[23];
  }
  else {
    uint64_t v24 = *((void *)v22 + 1);
  }
  uint64_t v25 = *(unsigned __int8 *)(v17 + 23);
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *(void *)(v17 + 8);
  }
  if (v24 != v25)
  {
    BOOL v21 = 0;
    if (!v19) {
      goto LABEL_33;
    }
LABEL_32:
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    goto LABEL_33;
  }
  if (v26 >= 0) {
    mach_port_t v27 = (unsigned __int8 *)v17;
  }
  else {
    mach_port_t v27 = *(unsigned __int8 **)v17;
  }
  if ((v23 & 0x80) != 0)
  {
    unint64_t v17 = memcmp(*(const void **)v22, v27, *((void *)v22 + 1));
    BOOL v21 = v17 == 0;
    goto LABEL_31;
  }
  if (v22[23])
  {
    uint64_t v28 = v23 - 1;
    do
    {
      int v30 = *v22++;
      int v29 = v30;
      int v32 = *v27++;
      int v31 = v32;
      BOOL v34 = v28-- != 0;
      BOOL v21 = v29 == v31;
    }
    while (v29 == v31 && v34);
    goto LABEL_31;
  }
  BOOL v21 = 1;
  if (v19) {
    goto LABEL_32;
  }
LABEL_33:
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (!v21)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    mach_port_t v84 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
    {
      __n128 v85 = pthread_self();
      mach_port_t v86 = pthread_mach_thread_np(v85);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v86;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 375;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (is_same_timebase(write_position.get_clock(), m_producer_write_position.get_clock()))";
      _os_log_error_impl(&dword_1BAA78000, v84, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v128);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v106);
    std::logic_error::logic_error(&v126, &v106);
    v126.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v126);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 375;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
    *(std::string *)&v113[8] = v111;
    *(void *)int v113 = &unk_1F148AA90;
    memset(&v111, 0, sizeof(v111));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v35 = *(void *)(a1 + 304);
  if (!v35)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    std::logic_error v87 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
    {
      unsigned int v88 = pthread_self();
      mach_port_t v89 = pthread_mach_thread_np(v88);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v89;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 376;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (m_buffer)";
      _os_log_error_impl(&dword_1BAA78000, v87, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v128);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v106);
    std::logic_error::logic_error(&v126, &v106);
    v126.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v126);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 376;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
    *(std::string *)&v113[8] = v111;
    *(void *)int v113 = &unk_1F148AA90;
    memset(&v111, 0, sizeof(v111));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!*(void *)(a1 + 296))
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v17);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unint64_t v90 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
    {
      long long v91 = pthread_self();
      mach_port_t v92 = pthread_mach_thread_np(v91);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v92;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 377;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (is_processing())";
      _os_log_error_impl(&dword_1BAA78000, v90, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v128);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v106);
    std::logic_error::logic_error(&v126, &v106);
    v126.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v126);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::copy_data_and_update_write_position(Object_ID, const std"
                             "::shared_ptr<DAL::DAL_Buffer> &, const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 377;
    applesauce::backtrace::snapshot_N<64>::snapshot_N(&v111.__r_.__value_.__l.__data_);
    *(std::string *)&v113[8] = v111;
    *(void *)int v113 = &unk_1F148AA90;
    memset(&v111, 0, sizeof(v111));
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v36 = *a3;
  if (*a3)
  {
    uint64_t v37 = *(std::__shared_weak_count **)(a1 + 312);
    if (v37)
    {
      atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v38 = *a3;
      std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      if (v38 == v35) {
        goto LABEL_79;
      }
      uint64_t v36 = *a3;
    }
    else if (v36 == v35)
    {
      goto LABEL_79;
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v36 + 64))(&buf);
    (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 64))(&v119);
    double v39 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
    double v40 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
    AMCP::DAL::DAL_Buffer::get_timebase((AMCP::DAL::DAL_Buffer *)&v110, *a3);
    LODWORD(v111.__r_.__value_.__l.__data_) = 2;
    *(double *)&v111.__r_.__value_.__l.__size_ = v40 - v39;
    v111.__r_.__value_.__r.__words[2] = 0;
    long long v112 = v110;
    long long v110 = 0uLL;
    boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)&v106, (uint64_t)&v119, (uint64_t)&v111);
    AMCP::DAL::DAL_Time_Range::DAL_Time_Range((AMCP::DAL::DAL_Time_Range *)v113, (const AMCP::DAL::DAL_Time *)&buf, (const AMCP::DAL::DAL_Time *)&v106);
    if (v108) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v108);
    }
    if (*((void *)&v112 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v112 + 1));
    }
    if (v125) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v125);
    }
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    if (v134) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v134);
    }
    if (*((void *)&v131 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v131 + 1));
    }
    if (*(char *)(a1 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)(a1 + 8), *(void *)(a1 + 16));
    }
    else {
      std::string v103 = *(std::string *)(a1 + 8);
    }
    std::string v41 = *(std::__shared_weak_count **)(a1 + 32);
    int v105 = *(_DWORD *)(a1 + 40);
    LODWORD(v106.__r_.__value_.__l.__data_) = a2;
    *(_OWORD *)&v106.__r_.__value_.__r.__words[1] = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
    std::string::size_type v42 = v103.__r_.__value_.__r.__words[2];
    memset(&v103, 0, sizeof(v103));
    uint64_t v104 = v41;
    int v109 = v105;
    std::string::size_type v107 = v42;
    __n128 v108 = v41;
    uint64_t v43 = *a3;
    std::string v119 = *(std::string *)v113;
    uint64_t v120 = *(void *)&v113[24];
    int v121 = v114;
    if (v114) {
      atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v122 = v115;
    uint64_t v123 = v116;
    uint64_t v124 = v117;
    std::logic_error v125 = v118;
    if (v118) {
      atomic_fetch_add_explicit(&v118->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(std::string *__return_ptr))(*(void *)v43 + 144))(&buf);
    if (v125) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v125);
    }
    if (v121) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v121);
    }
    BOOL v44 = caulk::time_range<AMCP::DAL::DAL_Time,AMCP::DAL::DAL_Time_Delta>::operator==((uint64_t)v113, (uint64_t)a4);
    uint64_t v45 = **(void **)(a1 + 304);
    if (v44) {
      (*(void (**)(void))(v45 + 24))();
    }
    else {
      (*(void (**)(void))(v45 + 32))();
    }
    if (v134) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v134);
    }
    if (*((void *)&v131 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v131 + 1));
    }
    if (SHIBYTE(v107) < 0) {
      operator delete((void *)v106.__r_.__value_.__l.__size_);
    }
    if (v118) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v118);
    }
    if (v114) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v114);
    }
  }
LABEL_79:
  uint64_t v46 = *(void *)(a1 + 328);
  if (v46)
  {
    uint64_t v47 = pthread_self();
    char v48 = pthread_mach_thread_np(v47);
    AMCP::Graph::Manifest_Buffer::get_buffer_id(&buf, a1);
    AMCP::Wire_Identifier_to_string(&v119, (const void **)&buf.__r_.__value_.__l.__data_);
    AMCP::Graph::Manifest_Log::add_message(v46, 4, "%u\tManifest_Buffer(%ld)::update_write_position:  source: %s", v49, v50, v51, v52, v53, v48);
  }
  double v54 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a4 + 5));
  double v55 = v54 - AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)a4);
  long long v56 = *(_OWORD *)(a1 + 232);
  uint64_t v57 = *(void *)(a1 + 240);
  if (v57) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
  }
  LODWORD(buf.__r_.__value_.__l.__data_) = 2;
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = *(unint64_t *)&v55;
  long long v131 = v56;
  boost::operators_impl::operator+((AMCP::DAL::DAL_Time *)v113, a1 + 208, (uint64_t)&buf);
  if (*((void *)&v131 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v131 + 1));
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 304) + 72))(&buf);
  BOOL v58 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)&v132, (AMCP::DAL::DAL_Time *)(a1 + 208));
  if (v134) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v134);
  }
  uint64_t v59 = (AMCP::Log::Scope_Registry *)*((void *)&v131 + 1);
  if (*((void *)&v131 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v131 + 1));
  }
  if (v58)
  {
    AMCP::Log::Scope_Registry::get(v59);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    uint64_t v93 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
    {
      uint64_t v94 = pthread_self();
      mach_port_t v95 = pthread_mach_thread_np(v94);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v95;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 413;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (m_producer_write_position <= m_buffer->get_allowed_read_range().end())";
      _os_log_error_impl(&dword_1BAA78000, v93, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v129);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v111);
    std::logic_error::logic_error(&v128, &v111);
    v128.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v128);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::update_write_position(const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 413;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v126);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(std::logic_error *)&v106.__r_.__value_.__r.__words[1] = v126;
    std::string::size_type v107 = v127;
    v126.__vftable = 0;
    v126.__imp_.__imp_ = 0;
    std::string::size_type v127 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  if (!*(void *)(a1 + 296))
  {
    AMCP::Log::Scope_Registry::get(v59);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    __n128 v96 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      long long v97 = pthread_self();
      mach_port_t v98 = pthread_mach_thread_np(v97);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v98;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 414;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (is_processing())";
      _os_log_error_impl(&dword_1BAA78000, v96, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v129);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v111);
    std::logic_error::logic_error(&v128, &v111);
    v128.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v128);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::update_write_position(const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 414;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v126);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(std::logic_error *)&v106.__r_.__value_.__r.__words[1] = v126;
    std::string::size_type v107 = v127;
    v126.__vftable = 0;
    v126.__imp_.__imp_ = 0;
    std::string::size_type v127 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  uint64_t v60 = *(void *)(a1 + 328);
  if (v60)
  {
    double v61 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v113);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 248));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 304) + 72))(&buf);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&buf);
    double v62 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v132);
    (*(void (**)(std::string *__return_ptr, double))(**(void **)(a1 + 304) + 72))(&v119, v62);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v119);
    vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v122));
    AMCP::Graph::Manifest_Log::add_message(v60, 4, "\t\tprevious write pos: %lld, new write pos: %lld, target: %lld, consumer: %lld, underlying buffer:[%lld, %lld]", v63, v64, v65, v66, v67, vcvtmd_s64_f64(v61));
  }
  BOOL v68 = AMCP::DAL::DAL_Time::operator<((AMCP::DAL::DAL_Time *)v113, (AMCP::DAL::DAL_Time *)(a1 + 168));
  if (v68)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v68);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&buf, "com.apple.coreaudio", "AMCP");
    unsigned int v99 = *(NSObject **)buf.__r_.__value_.__l.__data_;
    if (buf.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    if (os_log_type_enabled(v99, OS_LOG_TYPE_ERROR))
    {
      uint64_t v100 = pthread_self();
      mach_port_t v101 = pthread_mach_thread_np(v100);
      LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v101;
      LOWORD(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = (std::string::size_type)"Manifest_Buffer.cpp";
      WORD1(buf.__r_.__value_.__r.__words[2]) = 1024;
      HIDWORD(buf.__r_.__value_.__r.__words[2]) = 421;
      LOWORD(v131) = 2080;
      *(void *)((char *)&v131 + 2) = "not (new_write_position >= m_consumer_read_position)";
      _os_log_error_impl(&dword_1BAA78000, v99, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", (uint8_t *)&buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v129);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v111);
    std::logic_error::logic_error(&v128, &v111);
    v128.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error((std::logic_error *)&v119, &v128);
    uint64_t v120 = 0;
    int v121 = 0;
    *(void *)&long long v122 = 0;
    DWORD2(v122) = -1;
    v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F1489CC8;
    v119.__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)&buf, (uint64_t)&v119);
    *((void *)&v131 + 1) = "void AMCP::Graph::Manifest_Buffer::update_write_position(const AMCP::DAL::DAL_Time_Range &)";
    __n128 v132 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v133 = 421;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v126);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1F148AA90;
    *(std::logic_error *)&v106.__r_.__value_.__r.__words[1] = v126;
    std::string::size_type v107 = v127;
    v126.__vftable = 0;
    v126.__imp_.__imp_ = 0;
    std::string::size_type v127 = 0;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  *(_DWORD *)(a1 + 208) = *(_DWORD *)v113;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)&v113[8];
  uint64_t v70 = *(void *)&v113[24];
  unsigned int v69 = v114;
  if (v114) {
    atomic_fetch_add_explicit(&v114->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v71 = *(std::__shared_weak_count **)(a1 + 240);
  *(void *)(a1 + 232) = v70;
  *(void *)(a1 + 240) = v69;
  if (v71) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v71);
  }
  if (v114) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v114);
  }
  uint64_t v72 = *(void *)(a1 + 328);
  if (v72)
  {
    uint64_t v73 = pthread_self();
    char v74 = pthread_mach_thread_np(v73);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 208));
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(a1 + 168));
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 304) + 72))(&buf);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&buf);
    double v75 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v132);
    (*(void (**)(std::string *__return_ptr, double))(**(void **)(a1 + 304) + 72))(&v119, v75);
    AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v119);
    vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v122));
    AMCP::Graph::Manifest_Log::add_message(v72, 4, "%u\tManifest_Buffer(%ld)::copy_data_and_update_write_position: current write position %lld, current_read_position %lld, underlying buffer:[%lld, %lld]", v76, v77, v78, v79, v80, v74);
  }
}

void sub_1BAF7CD14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *__p,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a43);
  }
  _Unwind_Resume(a1);
}

double *AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(double *result, double a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (round(a2) < 0.0)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)result);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = **(NSObject ***)buf;
    if (*(void *)v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v3 = pthread_self();
      mach_port_t v4 = pthread_mach_thread_np(v3);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v4;
      *(_WORD *)uint64_t v20 = 2080;
      *(void *)&v20[2] = "Manifest_Buffer.cpp";
      __int16 v21 = 1024;
      int v22 = 430;
      __int16 v23 = 2080;
      *(void *)uint64_t v24 = "not (s >= 0_S)";
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v18);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v10);
    std::logic_error::logic_error(&v11, &v10);
    v11.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v12, &v11);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    int v17 = -1;
    v12.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    uint64_t v13 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v12);
    *(void *)&v24[6] = "void AMCP::Graph::Manifest_Buffer::set_minimum_required_samples(Sample_Time)";
    uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/Graph/Manifest_Buffer.cpp";
    int v26 = 430;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v5);
    long long v8 = v5;
    uint64_t v9 = v6;
    long long v5 = 0uLL;
    uint64_t v6 = 0;
    uint64_t v7 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  result[20] = a2;
  return result;
}

void sub_1BAF7D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,char a27)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::~clone_impl(v28 - 112);
  boost::exception_detail::error_info_injector<std::domain_error>::~error_info_injector((uint64_t)&a27);
  MEMORY[0x1C1859090](&a25);
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a11) {
    __cxa_free_exception(v27);
  }
  AMCP::Utility::With_Realtime_Disabled::~With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)(v28 - 113));
  _Unwind_Resume(a1);
}

uint64_t HALS_IODevice::_UseClockBoundsCheck(HALS_IODevice *this)
{
  return 1;
}

uint64_t HALS_IODevice::_IsClockStable(HALS_IODevice *this)
{
  return 0;
}

uint64_t HALS_IODevice::_GetClockAlgorithm(HALS_IODevice *this)
{
  return 1768518246;
}

uint64_t HALS_IODevice::UseClockBoundsCheck(HALS_IODevice *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 1;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK13HALS_IODevice19UseClockBoundsCheckEv_block_invoke;
  void v4[3] = &unk_1E6236590;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF7D3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice19UseClockBoundsCheckEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 376))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF7D420(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::IsClockStable(HALS_IODevice *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK13HALS_IODevice13IsClockStableEv_block_invoke;
  void v4[3] = &unk_1E6236568;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF7D508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice13IsClockStableEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 368))(*(void *)(a1 + 40));
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF7D57C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::GetClockAlgorithm(HALS_IODevice *this)
{
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  int v8 = 1768518246;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK13HALS_IODevice17GetClockAlgorithmEv_block_invoke;
  void v4[3] = &unk_1E6236540;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF7D66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice17GetClockAlgorithmEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 360))(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF7D6E0(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::GetNumberStreams(HALS_IODevice *this, char a2)
{
  uint64_t v7 = 0;
  int v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _OWORD v5[2] = ___ZNK13HALS_IODevice16GetNumberStreamsEb_block_invoke;
  uint64_t v5[3] = &unk_1E62364F0;
  v5[4] = &v7;
  v5[5] = this;
  char v6 = a2;
  uint64_t v2 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v2, (uint64_t)v5);
  uint64_t v3 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v3;
}

void sub_1BAF7D7D4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice16GetNumberStreamsEb_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(a1 + 40) + 384))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF7D84C(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::CopyStreamByIndex(HALS_IODevice *this, char a2, int a3)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___ZNK13HALS_IODevice17CopyStreamByIndexEbj_block_invoke;
  uint64_t v6[3] = &unk_1E6236518;
  void v6[4] = &v9;
  void v6[5] = this;
  char v8 = a2;
  int v7 = a3;
  uint64_t v3 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v3, (uint64_t)v6);
  uint64_t v4 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v4;
}

void sub_1BAF7D93C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK13HALS_IODevice17CopyStreamByIndexEbj_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 40) + 392))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned int *)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1BAF7D9B8(void *a1)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
}

uint64_t HALS_IODevice::GetTransportType(HALS_IODevice *this)
{
  uint64_t v1 = *((unsigned int *)this + 4);
  uint64_t v3 = 0x676C6F627472616ELL;
  int v4 = 0;
  uint64_t v5 = 0;
  (*(void (**)(HALS_IODevice *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)this + 112))(this, v1, &v3, 4, &v5, (char *)&v5 + 4, 0, 0, 0);
  return HIDWORD(v5);
}

void sub_1BAF7DA50(void *a1)
{
}

uint64_t HALS_IODevice::CopyIOEngine(HALS_IODevice *this)
{
  uint64_t v5 = 0;
  char v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN13HALS_IODevice12CopyIOEngineEv_block_invoke;
  void v4[3] = &unk_1E62365B8;
  v4[4] = &v5;
  v4[5] = this;
  uint64_t v1 = (HALB_Mutex *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 56))(this);
  HALB_CommandGate::ExecuteCommand(v1, (uint64_t)v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1BAF7DB28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN13HALS_IODevice12CopyIOEngineEv_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 400))(*(void *)(a1 + 40));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void ___ZN13HALS_IODevice22set_paused_io_contextsERKNSt3__13setIjNS0_4lessIjEENS0_9allocatorIjEEEE_block_invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 4);
  if (*(unsigned char *)(v1 + 72))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = *v9;
    if (*(void *)v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      LODWORD(v9) = 67109890;
      HIDWORD(v9) = v5;
      *(_WORD *)int v10 = 2080;
      *(void *)&void v10[2] = "HALS_IODevice.cpp";
      __int16 v11 = 1024;
      int v12 = 136;
      __int16 v13 = 2080;
      uint64_t v14 = "not mContextsPausedForDevice";
      char v6 = "%6u %32s:%-5d Assertion Failed: %s Contexts are already paused for this device!";
LABEL_14:
      _os_log_error_impl(&dword_1BAA78000, v3, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v9, 0x22u);
    }
LABEL_15:
    abort();
  }
  if (*(void *)(v1 + 64))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
    uint64_t v3 = *v9;
    if (*(void *)v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      LODWORD(v9) = 67109890;
      HIDWORD(v9) = v8;
      *(_WORD *)int v10 = 2080;
      *(void *)&void v10[2] = "HALS_IODevice.cpp";
      __int16 v11 = 1024;
      int v12 = 137;
      __int16 v13 = 2080;
      uint64_t v14 = "m_paused_contexts.empty()";
      char v6 = "%6u %32s:%-5d Assertion Failed: %s Vector of paused contexts is not empty!";
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  uint64_t v2 = *((void *)a1 + 5);
  if (v1 + 48 != v2) {
    std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>(v1 + 48, *(void **)v2, (void *)(v2 + 8));
  }
  *(unsigned char *)(v1 + 72) = 1;
}

void *__Block_byref_object_copy__19225(void *result, void *a2)
{
  result[5] = a2[5];
  uint64_t v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  int v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *uint64_t v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__19226(uint64_t a1)
{
}

void ___ZN13HALS_IODevice32get_and_clear_paused_io_contextsEv_block_invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((void *)a1 + 5);
  if (!*(unsigned char *)(v1 + 72))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
    uint64_t v7 = *v10;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      mach_port_t v8 = pthread_self();
      mach_port_t v9 = pthread_mach_thread_np(v8);
      LODWORD(v10) = 67109890;
      HIDWORD(v10) = v9;
      *(_WORD *)__int16 v11 = 2080;
      *(void *)&void v11[2] = "HALS_IODevice.cpp";
      __int16 v12 = 1024;
      int v13 = 148;
      __int16 v14 = 2080;
      uint64_t v15 = "mContextsPausedForDevice";
      _os_log_error_impl(&dword_1BAA78000, v7, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s Contexts not paused for this device right now!", (uint8_t *)&v10, 0x22u);
    }
    abort();
  }
  uint64_t v3 = (void *)(v1 + 48);
  std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&v10, v1 + 48);
  uint64_t v5 = *(void **)(v1 + 56);
  uint64_t v4 = v1 + 56;
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v5);
  *uint64_t v3 = v4;
  *(void *)uint64_t v4 = 0;
  *(void *)(v4 + 8) = 0;
  *(unsigned char *)(v4 + 16) = 0;
  char v6 = (NSObject ***)(*(void *)(*((void *)a1 + 4) + 8) + 40);
  if (v6 != &v10) {
    std::__tree<DSP_Host_Types::AudioProcessingType>::__assign_multi<std::__tree_const_iterator<DSP_Host_Types::AudioProcessingType,std::__tree_node<DSP_Host_Types::AudioProcessingType,void *> *,long>>((uint64_t)v6, v10, v11);
  }
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(*(void **)v11);
}

void sub_1BAF7DF24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void AMCP::Null_Object_Description::create(applesauce::CF::DictionaryRef *__return_ptr a1@<X8>, AMCP::Null_Object_Description *this@<X0>)
{
  AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v23, *(std::__shared_mutex_base **)(***((void ***)this + 4) + 16), *((_DWORD *)this + 2));
  AMCP::Core::Core::make_snapshot((AMCP::Core::Core *)&v21, v23);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  uint64_t v5 = v22;
  if (v22)
  {
    do
    {
      unsigned int stock_class_id = AMCP::Object::get_stock_class_id(this);
      int v7 = v5[4];
      if (v7 <= 1684370978)
      {
        if (v7 <= 1652060013)
        {
          if (v7 <= 1651472418)
          {
            if (v7 == 1650682915) {
              goto LABEL_68;
            }
            int v12 = 1650751011;
            goto LABEL_37;
          }
          if (v7 != 1651472419)
          {
            int v12 = 1652060006;
            goto LABEL_37;
          }
          goto LABEL_39;
        }
        if (v7 > 1668575851)
        {
          if (v7 != 1668575852)
          {
            int v12 = 1668577315;
LABEL_37:
            if (v7 != v12)
            {
LABEL_38:
              AMCP::make_description_from_thing((AMCP *)v38, (const AMCP::Thing *)(v5 + 8));
              CFTypeRef v10 = v38[0];
              goto LABEL_54;
            }
            goto LABEL_68;
          }
          if (v5[5] == 1735159650)
          {
            int v29 = 0;
            uint64_t v30 = 0;
            std::string __p = 0;
            AMCP::Null_Object_Description::make_object_list_description(v38, (uint64_t)this, (uint64_t)(v5 + 8), (unsigned int **)&__p);
            CFTypeRef v10 = v38[0];
            if (v38[0])
            {
              CFRetain(v38[0]);
              CFRelease(v10);
            }
            __int16 v11 = (unsigned int *)__p;
            if (!__p) {
              goto LABEL_54;
            }
            int v29 = __p;
LABEL_53:
            operator delete(v11);
            goto LABEL_54;
          }
        }
        else if (v7 != 1652060014)
        {
          if (v7 != 1668049699) {
            goto LABEL_38;
          }
          if (AMCP::is_base_of((AMCP *)0x61706C67, stock_class_id))
          {
            uint64_t v35 = 0;
            uint64_t v36 = 0;
            BOOL v34 = 0;
            int v13 = (unsigned int *)operator new(4uLL);
            BOOL v34 = v13;
            unsigned int *v13 = 1633969526;
            uint64_t v35 = v13 + 1;
            uint64_t v36 = v13 + 1;
            AMCP::Null_Object_Description::make_object_list_description(v38, (uint64_t)this, (uint64_t)(v5 + 8), &v34);
            CFTypeRef v10 = v38[0];
            if (v38[0])
            {
              CFRetain(v38[0]);
              CFRelease(v10);
            }
            __int16 v11 = v34;
            if (v34)
            {
              uint64_t v35 = v34;
              goto LABEL_53;
            }
LABEL_54:
            if (v10)
            {
              AMCP::Address::to_string(&v37, v5 + 4, v9);
              if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v15 = &v37;
              }
              else {
                uint64_t v15 = (std::string *)v37.__r_.__value_.__r.__words[0];
              }
              if (v15)
              {
                if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  CFIndex size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
                }
                else {
                  CFIndex size = v37.__r_.__value_.__l.__size_;
                }
                CFStringRef v17 = CFStringCreateWithBytes(0, (const UInt8 *)v15, size, 0x8000100u, 0);
                if (!v17)
                {
                  exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(exception, "Could not construct");
                  __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
                }
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, v17, v10);
                CFRelease(v17);
              }
              else
              {
                mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, 0, v10);
              }
              if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v37.__r_.__value_.__l.__data_);
              }
              CFRelease(v10);
            }
          }
        }
      }
      else
      {
        if (v7 <= 1869638758)
        {
          if (v7 > 1852793890)
          {
            if (v7 == 1852793891) {
              goto LABEL_68;
            }
            int v12 = 1853059619;
            goto LABEL_37;
          }
          if (v7 != 1684370979)
          {
            int v12 = 1768189556;
            goto LABEL_37;
          }
LABEL_39:
          if (AMCP::is_base_of((AMCP *)0x61706C67, stock_class_id))
          {
            memset(&v37, 0, sizeof(v37));
            AMCP::Null_Object_Description::make_object_list_description(v38, (uint64_t)this, (uint64_t)(v5 + 8), (unsigned int **)&v37);
            CFTypeRef v10 = v38[0];
            if (v38[0])
            {
              CFRetain(v38[0]);
              CFRelease(v10);
            }
            __int16 v11 = (unsigned int *)v37.__r_.__value_.__r.__words[0];
            if (!v37.__r_.__value_.__r.__words[0]) {
              goto LABEL_54;
            }
            v37.__r_.__value_.__l.__size_ = v37.__r_.__value_.__r.__words[0];
            goto LABEL_53;
          }
          goto LABEL_68;
        }
        if (v7 <= 1870098033)
        {
          if (v7 == 1869638759) {
            goto LABEL_68;
          }
          int v12 = 1870097955;
          goto LABEL_37;
        }
        if (v7 != 1870098034)
        {
          if (v7 == 1886152483)
          {
            int v26 = 0;
            uint64_t v27 = 0;
            uint64_t v25 = 0;
            __int16 v14 = (unsigned int *)operator new(4uLL);
            uint64_t v25 = v14;
            *__int16 v14 = 1853189228;
            int v26 = v14 + 1;
            uint64_t v27 = v14 + 1;
            AMCP::Null_Object_Description::make_object_list_description(v38, (uint64_t)this, (uint64_t)(v5 + 8), &v25);
            CFTypeRef v10 = v38[0];
            if (v38[0])
            {
              CFRetain(v38[0]);
              CFRelease(v10);
            }
            __int16 v11 = v25;
            if (!v25) {
              goto LABEL_54;
            }
            int v26 = v25;
            goto LABEL_53;
          }
          if (v7 != 1937009955) {
            goto LABEL_38;
          }
          int v8 = v5[5];
          if (v8 == 1869968496 || v8 == 1768845428)
          {
            int v32 = 0;
            uint64_t v33 = 0;
            int v31 = 0;
            AMCP::Null_Object_Description::make_object_list_description(v38, (uint64_t)this, (uint64_t)(v5 + 8), &v31);
            CFTypeRef v10 = v38[0];
            if (v38[0])
            {
              CFRetain(v38[0]);
              CFRelease(v10);
            }
            __int16 v11 = v31;
            if (v31)
            {
              int v32 = v31;
              goto LABEL_53;
            }
            goto LABEL_54;
          }
        }
      }
LABEL_68:
      uint64_t v5 = *(_DWORD **)v5;
    }
    while (v5);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a1, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
  std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::__deallocate_node(v22);
  char v18 = v21;
  __int16 v21 = 0;
  if (v18) {
    operator delete(v18);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_1BAF7E4A0(void *a1)
{
}

void AMCP::Null_Object_Description::make_object_list_description(void *a1, uint64_t a2, uint64_t a3, unsigned int **a4)
{
  *a1 = 0;
  if (*(void *)(a3 + 32))
  {
    uint64_t v8 = AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
    int16x8_t v9 = *(void (**)(uint64_t, uint64_t, void, long long *))(a3 + 32);
    *(void *)&long long v32 = 0;
    if (v9)
    {
      v9(3, a3, 0, &v32);
      int16x8_t v9 = (void (*)(uint64_t, uint64_t, void, long long *))v32;
    }
    if (v9 == (void (*)(uint64_t, uint64_t, void, long long *))v8)
    {
      *(void *)&long long v32 = v8;
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, void, long long *))(a3 + 32))(4, a3, 0, &v32);
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      if (v10)
      {
        __int16 v11 = *(const void **)v10;
        uint64_t v12 = *(void *)(v10 + 8);
        unint64_t v13 = (v12 - *(void *)v10) >> 2;
      }
      else
      {
        __int16 v11 = 0;
        uint64_t v12 = 0;
        unint64_t v13 = 0;
      }
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, v11, v12, v13);
    }
    else
    {
      CFTypeRef cf = (CFTypeRef)AMCP::Implementation::get_type_marker<std::vector<unsigned int>>();
      long long v32 = 0u;
      *(_OWORD *)uint64_t v33 = 0u;
      BOOL v34 = 0;
      (*(void (**)(uint64_t, uint64_t, long long *, CFTypeRef *))(a3 + 32))(6, a3, &v32, &cf);
      if (v34)
      {
        uint64_t v30 = v8;
        uint64_t v14 = v34(4, &v32, 0, &v30);
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        if (v14)
        {
          uint64_t v15 = *(const void **)v14;
          uint64_t v16 = *(void *)(v14 + 8);
        }
        else
        {
          uint64_t v16 = 0;
          uint64_t v15 = 0;
        }
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, v15, v16, (v16 - (uint64_t)v15) >> 2);
      }
      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        uint64_t v29 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v27, 0, 0, 0);
      }
      if (v34) {
        v34(0, &v32, 0, 0);
      }
    }
    CFStringRef v17 = v27;
    char v18 = v28;
    if (v27 != v28)
    {
      int v26 = a1;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D518]);
      uint64_t v20 = v17;
      do
      {
        AMCP::Object::Object((uint64_t)&v32, *(void *)(a2 + 32), *v20);
        if (v33[1])
        {
          if (v33[1]->__shared_owners_ != -1)
          {
            unsigned int stock_class_id = AMCP::Object::get_stock_class_id((AMCP::Object *)&v32);
            uint64_t v24 = *a4;
            uint64_t v23 = a4[1];
            if (*a4 == v23) {
              goto LABEL_27;
            }
            unsigned int v25 = stock_class_id;
            while ((AMCP::is_base_of((AMCP *)*v24, v25) & 1) == 0)
            {
              if (++v24 == v23)
              {
                uint64_t v24 = v23;
                break;
              }
            }
            if (v24 == a4[1])
            {
LABEL_27:
              AMCP::Null_Object_Description::create((uint64_t *)&cf, (AMCP::Null_Object_Description *)&v32, v22);
              if (cf)
              {
                mcp_applesauce::CF::Array_Builder::append_value<applesauce::CF::DictionaryRef>(Mutable, cf);
                if (cf) {
                  CFRelease(cf);
                }
              }
            }
          }
          *(void *)&long long v32 = &unk_1F145F4E8;
          if (v33[1]) {
            std::__shared_weak_count::__release_weak(v33[1]);
          }
        }
        else
        {
          *(void *)&long long v32 = &unk_1F145F4E8;
        }
        ++v20;
      }
      while (v20 != v18);
      mcp_applesauce::CF::Array_Builder::copy_array((applesauce::CF::ArrayRef *)&v32, Mutable);
      void *v26 = v32;
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    if (v17) {
      operator delete(v17);
    }
  }
}

void sub_1BAF7E7AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  AMCP::Thing::~Thing((AMCP::Thing *)va);
  __clang_call_terminate(a1);
}

void AMCP::Null_Object_Description::create_clock(const void **this@<X0>, const void **a2@<X1>, const applesauce::CF::StringRef *a3@<X2>, int a4@<W3>, applesauce::CF::DictionaryRef *a5@<X8>)
{
  int v6 = (int)a3;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  v11.i64[0] = 0x676C6F62636C6173;
  uint64_t v42 = 0x676C6F62636C6173;
  int v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  int valuePtr = 1633905771;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    std::string v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v14, v16);
  CFRelease(v16);
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v17.i64[0] = 0x676C6F626C6E616DLL;
  uint64_t v42 = 0x676C6F626C6E616DLL;
  int v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v18 = &__p;
  }
  else {
    char v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v19 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      double v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v40, "Could not construct");
      __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v20, *this);
    CFRelease(v20);
  }
  else
  {
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, 0, *this);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v21.i64[0] = 0x676C6F6275696420;
  uint64_t v42 = 0x676C6F6275696420;
  int v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v21);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v22 = &__p;
  }
  else {
    int v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v22)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v23 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v24 = CFStringCreateWithBytes(0, (const UInt8 *)v22, v23, 0x8000100u, 0);
    if (!v24)
    {
      std::string v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v41, "Could not construct");
      __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v24, *a2);
    CFRelease(v24);
  }
  else
  {
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, 0, *a2);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v25.i64[0] = 0x696E70746C746E63;
  uint64_t v42 = 0x696E70746C746E63;
  int v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v25);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = &__p;
  }
  else {
    int v26 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v27 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)v26, v27, 0x8000100u, 0);
    if (!v28)
    {
      uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Could not construct");
      __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v28 = 0;
  }
  int valuePtr = v6;
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v30)
  {
    uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v28, v30);
  CFRelease(v30);
  if (v28) {
    CFRelease(v28);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v31.i64[0] = 0x6F7574706C746E63;
  uint64_t v42 = 0x6F7574706C746E63;
  int v43 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v42, v31);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v32 = &__p;
  }
  else {
    long long v32 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v33 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v33 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v32, v33, 0x8000100u, 0);
    if (!v34)
    {
      uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v34 = 0;
  }
  int valuePtr = a4;
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v36)
  {
    double v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v34, v36);
  CFRelease(v36);
  if (v34) {
    CFRelease(v34);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a5, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAF7EDB4(void *a1)
{
}

void AMCP::Null_Object_Description::create_device(const void **this@<X0>, const void **a2@<X1>, const applesauce::CF::StringRef *a3@<X2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, applesauce::CF::DictionaryRef *a8@<X8>)
{
  AMCP::Null_Object_Description::create_clock(this, a2, a3, a5, (applesauce::CF::DictionaryRef *)&theDict);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0]) {
    CFRelease(theDict.__r_.__value_.__l.__data_);
  }
  v13.i64[0] = 0x676C6F62636C6173;
  uint64_t v41 = 0x676C6F62636C6173;
  int v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v13);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string theDict = &theDict;
  }
  else {
    p_std::string theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (p_theDict)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
    if (!v16)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v16 = 0;
  }
  int valuePtr = 1633969526;
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v18)
  {
    std::string v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v16, v18);
  CFRelease(v18);
  if (v16) {
    CFRelease(v16);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v19.i64[0] = 0x696E707473616674;
  uint64_t v41 = 0x696E707473616674;
  int v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v19);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v20 = &theDict;
  }
  else {
    CFStringRef v20 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v21 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v21 = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)v20, v21, 0x8000100u, 0);
    if (!v22)
    {
      CFIndex v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v22 = 0;
  }
  int valuePtr = a4;
  CFNumberRef v24 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v24)
  {
    uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v22, v24);
  CFRelease(v24);
  if (v22) {
    CFRelease(v22);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v25.i64[0] = 0x6F75747073616674;
  uint64_t v41 = 0x6F75747073616674;
  int v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v25);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v26 = &theDict;
  }
  else {
    int v26 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v27 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v27 = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)v26, v27, 0x8000100u, 0);
    if (!v28)
    {
      uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Could not construct");
      __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v28 = 0;
  }
  int valuePtr = a6;
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v30)
  {
    double v39 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v39, "Could not construct");
    __cxa_throw(v39, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v28, v30);
  CFRelease(v30);
  if (v28) {
    CFRelease(v28);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v31.i64[0] = 0x676C6F627472616ELL;
  uint64_t v41 = 0x676C6F627472616ELL;
  int v42 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v41, v31);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v32 = &theDict;
  }
  else {
    long long v32 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (v32)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v33 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v33 = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v32, v33, 0x8000100u, 0);
    if (!v34)
    {
      uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v35, "Could not construct");
      __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v34 = 0;
  }
  int valuePtr = a7;
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v36)
  {
    double v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v40, "Could not construct");
    __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v34, v36);
  CFRelease(v36);
  if (v34) {
    CFRelease(v34);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a8, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF7F388(void *a1)
{
}

void AMCP::Null_Object_Description::create_stream(const void **a1, int a2, int a3, int a4)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  v9.i64[0] = 0x676C6F626C6E616DLL;
  v51.__r_.__value_.__r.__words[0] = 0x676C6F626C6E616DLL;
  LODWORD(v51.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v51, v9);
  if ((SBYTE7(v46) & 0x80u) == 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (v10)
  {
    if ((SBYTE7(v46) & 0x80u) == 0) {
      CFIndex v11 = BYTE7(v46);
    }
    else {
      CFIndex v11 = (CFIndex)__p[1];
    }
    CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)v10, v11, 0x8000100u, 0);
    if (!v12)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, v12, *a1);
    CFRelease(v12);
  }
  else
  {
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::StringRef>(Mutable, 0, *a1);
  }
  if (SBYTE7(v46) < 0) {
    operator delete(__p[0]);
  }
  v13.i64[0] = 0x676C6F62636C6173;
  v51.__r_.__value_.__r.__words[0] = 0x676C6F62636C6173;
  LODWORD(v51.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v51, v13);
  if ((SBYTE7(v46) & 0x80u) == 0) {
    CFStringRef v14 = __p;
  }
  else {
    CFStringRef v14 = (void **)__p[0];
  }
  if (v14)
  {
    if ((SBYTE7(v46) & 0x80u) == 0) {
      CFIndex v15 = BYTE7(v46);
    }
    else {
      CFIndex v15 = (CFIndex)__p[1];
    }
    CFStringRef v16 = CFStringCreateWithBytes(0, (const UInt8 *)v14, v15, 0x8000100u, 0);
    if (!v16)
    {
      int16x8_t v17 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v17, "Could not construct");
      __cxa_throw(v17, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v16 = 0;
  }
  LODWORD(valuePtr) = 1634956402;
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (v18)
  {
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v16, v18);
    CFRelease(v18);
    if (v16) {
      CFRelease(v16);
    }
    if (SBYTE7(v46) < 0) {
      operator delete(__p[0]);
    }
    v19.i64[0] = 0x676C6F6273646972;
    uint64_t valuePtr = 0x676C6F6273646972;
    int v50 = 0;
    AMCP::Address::to_string(&v51, (unsigned int *)&valuePtr, v19);
    if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v20 = &v51;
    }
    else {
      CFStringRef v20 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    if (v20)
    {
      if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        CFIndex size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
      }
      else {
        CFIndex size = v51.__r_.__value_.__l.__size_;
      }
      CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)v20, size, 0x8000100u, 0);
      if (!v22)
      {
        CFIndex v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v23, "Could not construct");
        __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v22 = 0;
    }
    *(_OWORD *)std::string __p = 0u;
    long long v46 = 0u;
    LODWORD(__p[0]) = a2;
    uint64_t v47 = AMCP::Implementation::In_Place_Storage<AMCP::Direction>::dispatch;
    AMCP::make_description_from_thing((AMCP *)&v48, (const AMCP::Thing *)__p);
    CFNumberRef v24 = v48;
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(Mutable, v22, v48);
    if (v24) {
      CFRelease(v24);
    }
    if (v47) {
      ((void (*)(void, void **, void, void))v47)(0, __p, 0, 0);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    v25.i64[0] = 0x676C6F627363686ELL;
    v51.__r_.__value_.__r.__words[0] = 0x676C6F627363686ELL;
    LODWORD(v51.__r_.__value_.__r.__words[1]) = 0;
    AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v51, v25);
    if ((SBYTE7(v46) & 0x80u) == 0) {
      int v26 = __p;
    }
    else {
      int v26 = (void **)__p[0];
    }
    if (v26)
    {
      if ((SBYTE7(v46) & 0x80u) == 0) {
        CFIndex v27 = BYTE7(v46);
      }
      else {
        CFIndex v27 = (CFIndex)__p[1];
      }
      CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)v26, v27, 0x8000100u, 0);
      if (!v28)
      {
        uint64_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v29, "Could not construct");
        __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
    }
    else
    {
      CFStringRef v28 = 0;
    }
    LODWORD(valuePtr) = a3;
    CFNumberRef v30 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    if (v30)
    {
      mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v28, v30);
      CFRelease(v30);
      if (v28) {
        CFRelease(v28);
      }
      if (SBYTE7(v46) < 0) {
        operator delete(__p[0]);
      }
      v31.i64[0] = 0x676C6F627465726DLL;
      v51.__r_.__value_.__r.__words[0] = 0x676C6F627465726DLL;
      LODWORD(v51.__r_.__value_.__r.__words[1]) = 0;
      AMCP::Address::to_string((std::string *)__p, (unsigned int *)&v51, v31);
      if ((SBYTE7(v46) & 0x80u) == 0) {
        long long v32 = __p;
      }
      else {
        long long v32 = (void **)__p[0];
      }
      if (v32)
      {
        if ((SBYTE7(v46) & 0x80u) == 0) {
          CFIndex v33 = BYTE7(v46);
        }
        else {
          CFIndex v33 = (CFIndex)__p[1];
        }
        CFStringRef v34 = CFStringCreateWithBytes(0, (const UInt8 *)v32, v33, 0x8000100u, 0);
        if (!v34)
        {
          uint64_t v35 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v35, "Could not construct");
          __cxa_throw(v35, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
      }
      else
      {
        CFStringRef v34 = 0;
      }
      LODWORD(valuePtr) = a4;
      CFNumberRef v36 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      if (v36)
      {
        mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v34, v36);
        CFRelease(v36);
        if (v34) {
          CFRelease(v34);
        }
        if (SBYTE7(v46) < 0) {
          operator delete(__p[0]);
        }
        v37.i64[0] = 0x676C6F62666D6174;
        uint64_t valuePtr = 0x676C6F62666D6174;
        int v50 = 0;
        AMCP::Address::to_string(&v51, (unsigned int *)&valuePtr, v37);
        if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v38 = &v51;
        }
        else {
          uint64_t v38 = (std::string *)v51.__r_.__value_.__r.__words[0];
        }
        if (v38)
        {
          if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            CFIndex v39 = HIBYTE(v51.__r_.__value_.__r.__words[2]);
          }
          else {
            CFIndex v39 = v51.__r_.__value_.__l.__size_;
          }
          if (!CFStringCreateWithBytes(0, (const UInt8 *)v38, v39, 0x8000100u, 0))
          {
            double v40 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v40, "Could not construct");
            __cxa_throw(v40, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
        }
        *(_OWORD *)std::string __p = 0u;
        long long v46 = 0u;
        uint64_t v47 = AMCP::Implementation::Outboard_Storage<CA::StreamDescription>::dispatch;
        operator new();
      }
      int v43 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v43, "Could not construct");
      __cxa_throw(v43, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    int v42 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v42, "Could not construct");
    __cxa_throw(v42, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  uint64_t v41 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
  std::runtime_error::runtime_error(v41, "Could not construct");
  __cxa_throw(v41, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
}

void sub_1BAF7FCB8(void *a1)
{
}

void AMCP::Null_Object_Description::attach_stream_list(CFDictionaryRef *a1@<X0>, int a2@<W1>, const void **a3@<X2>, applesauce::CF::DictionaryRef *a4@<X8>)
{
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *a1);
  if (a2 == 1) {
    unsigned int v9 = 1768845428;
  }
  else {
    unsigned int v9 = 1869968496;
  }
  v14[0] = 1937009955;
  v14[1] = v9;
  uint64_t v14[2] = 0;
  AMCP::Address::to_string(&__p, v14, v8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v12)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v12, *a3);
    CFRelease(v12);
  }
  else
  {
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, 0, *a3);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a4, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF7FEB8(void *a1)
{
}

void AMCP::Null_Object_Description::create_slider_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, std::string::size_type *a5@<X4>, int a6@<W5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0]) {
    CFRelease(theDict.__r_.__value_.__l.__data_);
  }
  v11.i64[0] = 0x676C6F6273647276;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6273647276;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v11);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string theDict = &theDict;
  }
  else {
    p_std::string theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (p_theDict)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  LODWORD(valuePtr) = a6;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    CFIndex v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v14, v16);
  CFRelease(v16);
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v17.i64[0] = 0x676C6F6273647272;
  uint64_t valuePtr = 0x676C6F6273647272;
  int v29 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&valuePtr, v17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v19 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v19, 0x8000100u, 0);
    if (!v20)
    {
      CFIndex v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v20 = 0;
  }
  uint64_t v25 = 0;
  theDict.__r_.__value_.__r.__words[0] = *a5;
  *(_OWORD *)&theDict.__r_.__value_.__r.__words[1] = 0uLL;
  int v26 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v27, (const AMCP::Thing *)&theDict);
  CFStringRef v22 = v27;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v20, v27);
  if (v22) {
    CFRelease(v22);
  }
  if (v26) {
    v26(0, (uint64_t)&theDict, 0, 0);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF801C4(void *a1)
{
}

void AMCP::Null_Object_Description::create_control(AMCP::Null_Object_Description *this, int a2, int a3, int a4, int a5)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D528], MEMORY[0x1E4F1D538]);
  v11.i64[0] = 0x676C6F62636C6173;
  uint64_t v39 = 0x676C6F62636C6173;
  int v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  int valuePtr = a2;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v16)
  {
    CFNumberRef v36 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v36, "Could not construct");
    __cxa_throw(v36, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v14, v16);
  CFRelease(v16);
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v17.i64[0] = 0x676C6F6263736370;
  uint64_t v39 = 0x676C6F6263736370;
  int v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFNumberRef v18 = &__p;
  }
  else {
    CFNumberRef v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v18)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v19 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      CFIndex v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v20 = 0;
  }
  int valuePtr = a3;
  CFNumberRef v22 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v22)
  {
    int16x8_t v37 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v37, "Could not construct");
    __cxa_throw(v37, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v20, v22);
  CFRelease(v22);
  if (v20) {
    CFRelease(v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v23.i64[0] = 0x676C6F6263656C6DLL;
  uint64_t v39 = 0x676C6F6263656C6DLL;
  int v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFNumberRef v24 = &__p;
  }
  else {
    CFNumberRef v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v24)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v25 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
    if (!v26)
    {
      CFIndex v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Could not construct");
      __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v26 = 0;
  }
  int valuePtr = a4;
  CFNumberRef v28 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v28)
  {
    uint64_t v38 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v38, "Could not construct");
    __cxa_throw(v38, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(Mutable, v26, v28);
  CFRelease(v28);
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v29.i64[0] = 0x676C6F626372646FLL;
  uint64_t v39 = 0x676C6F626372646FLL;
  int v40 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v39, v29);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFNumberRef v30 = &__p;
  }
  else {
    CFNumberRef v30 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v30)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v31 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v32 = CFStringCreateWithBytes(0, (const UInt8 *)v30, v31, 0x8000100u, 0);
    if (!v32)
    {
      CFIndex v33 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v33, "Could not construct");
      __cxa_throw(v33, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v32 = 0;
  }
  CFStringRef v34 = (const void **)MEMORY[0x1E4F1CFD8];
  if (!a5) {
    CFStringRef v34 = (const void **)MEMORY[0x1E4F1CFC0];
  }
  uint64_t v35 = *v34;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(Mutable, v32, *v34);
  if (v35) {
    CFRelease(v35);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(this, Mutable);
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void sub_1BAF80720(void *a1)
{
}

void AMCP::Null_Object_Description::create_level_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, double *a5@<X4>, applesauce::CF::DictionaryRef *a6@<X8>, float a7@<S0>)
{
  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0]) {
    CFRelease(theDict.__r_.__value_.__l.__data_);
  }
  v11.i64[0] = 0x676C6F626C637376;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F626C637376;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v11);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string theDict = &theDict;
  }
  else {
    p_std::string theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (p_theDict)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  float v16 = a7 - *a5;
  float v17 = a5[1] - *a5;
  *(float *)&uint64_t valuePtr = v16 / v17;
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v18)
  {
    CFIndex v31 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v31, "Could not construct");
    __cxa_throw(v31, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v14, v18);
  CFRelease(v18);
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v19.i64[0] = 0x676C6F626C636476;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F626C636476;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v19);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    CFStringRef v20 = &theDict;
  }
  else {
    CFStringRef v20 = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (v20)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v21 = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v21 = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v22 = CFStringCreateWithBytes(0, (const UInt8 *)v20, v21, 0x8000100u, 0);
    if (!v22)
    {
      int16x8_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v23, "Could not construct");
      __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v22 = 0;
  }
  *(float *)&uint64_t valuePtr = a7;
  CFNumberRef v24 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v24)
  {
    CFStringRef v32 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v32, "Could not construct");
    __cxa_throw(v32, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v22, v24);
  CFRelease(v24);
  if (v22) {
    CFRelease(v22);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v25.i64[0] = 0x676C6F626C636472;
  uint64_t valuePtr = 0x676C6F626C636472;
  int v38 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&valuePtr, v25);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v27 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v28 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v27, 0x8000100u, 0);
    if (!v28)
    {
      int16x8_t v29 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v29, "Could not construct");
      __cxa_throw(v29, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v28 = 0;
  }
  theDict.__r_.__value_.__r.__words[2] = 0;
  uint64_t v34 = 0;
  *(_OWORD *)&theDict.__r_.__value_.__l.__data_ = *(_OWORD *)a5;
  uint64_t v35 = AMCP::Implementation::In_Place_Storage<CA::ValueRange>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v36, (const AMCP::Thing *)&theDict);
  CFNumberRef v30 = v36;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v28, v36);
  if (v30) {
    CFRelease(v30);
  }
  if (v35) {
    v35(0, (uint64_t)&theDict, 0, 0);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a6, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF80BCC(void *a1)
{
}

void AMCP::Null_Object_Description::create_BOOLean_control(AMCP::Null_Object_Description *this@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, applesauce::CF::DictionaryRef *a6@<X8>)
{
  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, (int)this, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0]) {
    CFRelease(theDict.__r_.__value_.__l.__data_);
  }
  v9.i64[0] = 0x676C6F626263766CLL;
  uint64_t v16 = 0x676C6F626263766CLL;
  int v17 = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&v16, v9);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string theDict = &theDict;
  }
  else {
    p_std::string theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (p_theDict)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v12 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
    if (!v12)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v12 = 0;
  }
  CFStringRef v14 = (const void **)MEMORY[0x1E4F1CFD8];
  if (!a5) {
    CFStringRef v14 = (const void **)MEMORY[0x1E4F1CFC0];
  }
  CFIndex v15 = *v14;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(MutableCopy, v12, *v14);
  if (v15) {
    CFRelease(v15);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a6, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF80DAC(void *a1)
{
}

void AMCP::Null_Object_Description::create_selector_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, int a6@<W5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
  if (theDict[0]) {
    CFRelease(theDict[0]);
  }
  v11.i64[0] = 0x676C6F6273636369;
  uint64_t v35 = 0x676C6F6273636369;
  int v36 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v35, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  LODWORD(theDict[0]) = a6;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberIntType, theDict);
  if (!v16)
  {
    CFNumberRef v30 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v30, "Could not construct");
    __cxa_throw(v30, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  std::vector<void const*>::vector(theDict, 1uLL);
  *(void *)theDict[0] = v16;
  CFArrayRef CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((const void **)theDict[0], (uint64_t)theDict[1]);
  if (theDict[0])
  {
    theDict[1] = theDict[0];
    operator delete(theDict[0]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v14, CFArray);
  if (CFArray) {
    CFRelease(CFArray);
  }
  CFRelease(v16);
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v18.i64[0] = 0x676C6F627363636DLL;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F627363636DLL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)theDict, (unsigned int *)&__p, v18);
  if ((SBYTE7(v32) & 0x80u) == 0) {
    int16x8_t v19 = theDict;
  }
  else {
    int16x8_t v19 = (CFDictionaryRef *)theDict[0];
  }
  if (v19)
  {
    if ((SBYTE7(v32) & 0x80u) == 0) {
      CFIndex v20 = BYTE7(v32);
    }
    else {
      CFIndex v20 = (CFIndex)theDict[1];
    }
    CFStringRef v21 = CFStringCreateWithBytes(0, (const UInt8 *)v19, v20, 0x8000100u, 0);
    if (!v21)
    {
      CFStringRef v22 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v22, "Could not construct");
      __cxa_throw(v22, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v21 = 0;
  }
  int16x8_t v23 = (const void *)*MEMORY[0x1E4F1CFC0];
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(MutableCopy, v21, (const void *)*MEMORY[0x1E4F1CFC0]);
  if (v23) {
    CFRelease(v23);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (SBYTE7(v32) < 0) {
    operator delete(theDict[0]);
  }
  v24.i64[0] = 0x676C6F6273636169;
  uint64_t v35 = 0x676C6F6273636169;
  int v36 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v35, v24);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int16x8_t v25 = &__p;
  }
  else {
    int16x8_t v25 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v25)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v26 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v26 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v27 = CFStringCreateWithBytes(0, (const UInt8 *)v25, v26, 0x8000100u, 0);
    if (!v27)
    {
      CFStringRef v28 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v28, "Could not construct");
      __cxa_throw(v28, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v27 = 0;
  }
  CFIndex v33 = 0;
  *(_OWORD *)std::string theDict = 0u;
  long long v32 = 0u;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(theDict, *a5, a5[1], (a5[1] - *a5) >> 4);
  CFIndex v33 = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v34, (const AMCP::Thing *)theDict);
  int16x8_t v29 = v34;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v27, v34);
  if (v29) {
    CFRelease(v29);
  }
  if (v33) {
    v33(0, (uint64_t *)theDict, 0, 0);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF811F8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void AMCP::Null_Object_Description::create_multi_selector_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, applesauce::CF::DictionaryRef *a7@<X8>)
{
  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, theDict[0]);
  if (theDict[0]) {
    CFRelease(theDict[0]);
  }
  v11.i64[0] = 0x676C6F6273636369;
  uint64_t v33 = 0x676C6F6273636369;
  int v34 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v33, v11);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  CFIndex v31 = 0;
  *(_OWORD *)std::string theDict = 0u;
  long long v30 = 0u;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(theDict, *(const void **)a6, *(void *)(a6 + 8), (uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2);
  CFIndex v31 = AMCP::Implementation::In_Place_Storage<std::vector<unsigned int>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v32, (const AMCP::Thing *)theDict);
  CFNumberRef v16 = v32;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v14, v32);
  if (v16) {
    CFRelease(v16);
  }
  if (v31) {
    ((void (*)(void, CFDictionaryRef *, void, void))v31)(0, theDict, 0, 0);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  v17.i64[0] = 0x676C6F627363636DLL;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F627363636DLL;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string((std::string *)theDict, (unsigned int *)&__p, v17);
  if ((SBYTE7(v30) & 0x80u) == 0) {
    int16x8_t v18 = theDict;
  }
  else {
    int16x8_t v18 = (CFDictionaryRef *)theDict[0];
  }
  if (v18)
  {
    if ((SBYTE7(v30) & 0x80u) == 0) {
      CFIndex v19 = BYTE7(v30);
    }
    else {
      CFIndex v19 = (CFIndex)theDict[1];
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)v18, v19, 0x8000100u, 0);
    if (!v20)
    {
      CFStringRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v20 = 0;
  }
  CFStringRef v22 = (const void *)*MEMORY[0x1E4F1CFD8];
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::BooleanRef>(MutableCopy, v20, (const void *)*MEMORY[0x1E4F1CFD8]);
  if (v22) {
    CFRelease(v22);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (SBYTE7(v30) < 0) {
    operator delete(theDict[0]);
  }
  v23.i64[0] = 0x676C6F6273636169;
  uint64_t v33 = 0x676C6F6273636169;
  int v34 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v33, v23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int16x8_t v24 = &__p;
  }
  else {
    int16x8_t v24 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v24)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v25 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v26 = CFStringCreateWithBytes(0, (const UInt8 *)v24, v25, 0x8000100u, 0);
    if (!v26)
    {
      CFStringRef v27 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v27, "Could not construct");
      __cxa_throw(v27, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v26 = 0;
  }
  CFIndex v31 = 0;
  *(_OWORD *)std::string theDict = 0u;
  long long v30 = 0u;
  std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>::__init_with_size[abi:ne180100]<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*,std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>*>(theDict, *a5, a5[1], (a5[1] - *a5) >> 4);
  CFIndex v31 = AMCP::Implementation::In_Place_Storage<std::vector<std::tuple<unsigned int,unsigned int,applesauce::CF::StringRef>>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v32, (const AMCP::Thing *)theDict);
  CFStringRef v28 = v32;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v26, v32);
  if (v28) {
    CFRelease(v28);
  }
  if (v31) {
    ((void (*)(void, CFDictionaryRef *, void, void))v31)(0, theDict, 0, 0);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a7, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF81658(void *a1)
{
}

void AMCP::Null_Object_Description::create_stereo_pan_control(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, std::string::size_type *a5@<X4>, applesauce::CF::DictionaryRef *a6@<X8>, float a7@<S0>)
{
  AMCP::Null_Object_Description::create_control((AMCP::Null_Object_Description *)&theDict, a1, a2, a3, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)theDict.__r_.__value_.__l.__data_);
  if (theDict.__r_.__value_.__r.__words[0]) {
    CFRelease(theDict.__r_.__value_.__l.__data_);
  }
  v11.i64[0] = 0x676C6F6273706376;
  __p.__r_.__value_.__r.__words[0] = 0x676C6F6273706376;
  LODWORD(__p.__r_.__value_.__r.__words[1]) = 0;
  AMCP::Address::to_string(&theDict, (unsigned int *)&__p, v11);
  if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string theDict = &theDict;
  }
  else {
    p_std::string theDict = (std::string *)theDict.__r_.__value_.__r.__words[0];
  }
  if (p_theDict)
  {
    if ((theDict.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(theDict.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = theDict.__r_.__value_.__l.__size_;
    }
    CFStringRef v14 = CFStringCreateWithBytes(0, (const UInt8 *)p_theDict, size, 0x8000100u, 0);
    if (!v14)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  *(float *)&uint64_t valuePtr = a7;
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  if (!v16)
  {
    int16x8_t v23 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v23, "Could not construct");
    __cxa_throw(v23, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::NumberRef>(MutableCopy, v14, v16);
  CFRelease(v16);
  if (v14) {
    CFRelease(v14);
  }
  if (SHIBYTE(theDict.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(theDict.__r_.__value_.__l.__data_);
  }
  v17.i64[0] = 0x676C6F6273706363;
  uint64_t valuePtr = 0x676C6F6273706363;
  int v29 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&valuePtr, v17);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex v19 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex v19 = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v20 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, v19, 0x8000100u, 0);
    if (!v20)
    {
      CFStringRef v21 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v21, "Could not construct");
      __cxa_throw(v21, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
  }
  else
  {
    CFStringRef v20 = 0;
  }
  uint64_t v25 = 0;
  theDict.__r_.__value_.__r.__words[0] = *a5;
  *(_OWORD *)&theDict.__r_.__value_.__r.__words[1] = 0uLL;
  CFStringRef v26 = AMCP::Implementation::In_Place_Storage<std::tuple<unsigned int,unsigned int>>::dispatch;
  AMCP::make_description_from_thing((AMCP *)&v27, (const AMCP::Thing *)&theDict);
  CFStringRef v22 = v27;
  mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::TypeRef>(MutableCopy, v20, v27);
  if (v22) {
    CFRelease(v22);
  }
  if (v26) {
    v26(0, (uint64_t)&theDict, 0, 0);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a6, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF8199C(void *a1)
{
}

void AMCP::Null_Object_Description::attach_control_list(CFDictionaryRef *this@<X0>, const void **a2@<X1>, applesauce::CF::DictionaryRef *a3@<X8>)
{
  MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *this);
  v7.i64[0] = 0x676C6F626374726CLL;
  uint64_t v12 = 0x676C6F626374726CLL;
  int v13 = 0;
  AMCP::Address::to_string(&__p, (unsigned int *)&v12, v7);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (p_p)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFIndex size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      CFIndex size = __p.__r_.__value_.__l.__size_;
    }
    CFStringRef v10 = CFStringCreateWithBytes(0, (const UInt8 *)p_p, size, 0x8000100u, 0);
    if (!v10)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, v10, *a2);
    CFRelease(v10);
  }
  else
  {
    mcp_applesauce::CF::Dictionary_Builder::set_value<applesauce::CF::StringRef,applesauce::CF::ArrayRef>(MutableCopy, 0, *a2);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  mcp_applesauce::CF::Dictionary_Builder::copy_dictionary(a3, MutableCopy);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
}

void sub_1BAF81B20(void *a1)
{
}

double AMCP::get_property_traits@<D0>(AMCP *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2 = this;
  AMCP::local_get_property_traits_list(this);
  uint64_t v4 = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v2);
  if (v4)
  {
    uint64_t v5 = v4;
    *(_DWORD *)a2 = *((_DWORD *)v4 + 6);
    *(_DWORD *)(a2 + 3) = *(_DWORD *)((char *)v4 + 27);
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a2 + 8), (const void *)v5[4], v5[5], (v5[5] - v5[4]) >> 2);
    *(void *)(a2 + 32) = v5[7];
    *(_DWORD *)(a2 + 40) = *((_DWORD *)v5 + 16);
  }
  else
  {
    *(_DWORD *)a2 = v2;
    *(_WORD *)(a2 + 4) = 0;
    *(unsigned char *)(a2 + 6) = 0;
    double result = 0.0;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_DWORD *)(a2 + 40) = 0;
  }
  return result;
}

void AMCP::local_get_property_traits_list(AMCP *this)
{
  {
    AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list = 0u;
    *(_OWORD *)&qword_1E9F7A490 = 0u;
    dword_1E9F7A4A0 = 1065353216;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::local_get_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    uint64_t v3 = &v1;
    unsigned int v2 = &v3;
    std::__call_once(&AMCP::local_get_property_traits_list(void)::once, &v2, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::local_get_property_traits_list(void)::$_0 &&>>);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(unsigned int a1)
{
  if (!*((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1)) {
    return 0;
  }
  uint8x8_t v1 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list
                                      + 8));
  v1.i16[0] = vaddlv_u8(v1);
  if (v1.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (*((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) <= (unint64_t)a1) {
      unint64_t v2 = (unint64_t)a1
    }
         % *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
  }
  else
  {
    unint64_t v2 = (DWORD2(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list) - 1) & a1;
  }
  uint64_t i = *(uint64_t **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v2);
  if (i)
  {
    for (uint64_t i = (uint64_t *)*i; i; uint64_t i = (uint64_t *)*i)
    {
      unint64_t v4 = i[1];
      if (v4 == a1)
      {
        if (*((_DWORD *)i + 4) == a1) {
          return i;
        }
      }
      else
      {
        if (v1.u32[0] > 1uLL)
        {
          if (v4 >= *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1)) {
            v4 %= *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
          }
        }
        else
        {
          v4 &= *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1)
              - 1;
        }
        if (v4 != v2) {
          return 0;
        }
      }
    }
  }
  return i;
}

void AMCP::local_get_property_traits_list(void)::$_0::operator()()
{
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x69646E74u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62636C73u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x636C6173u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6F776E72u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6F706C67u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6F776E23u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C6E616Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C6D6F64u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C6D616Bu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x69636F6Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63617070u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x736E756Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6677766Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C63686Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C63636Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C636E6Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x72737263u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6374726Cu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1886152483, 1, 0, 0, &AMCP::Property_Traits<1886152483u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668577315u>::k_valid_scopes, 0, 1886152483, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x706C6723u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651472419, 1, 0, 0, &AMCP::Property_Traits<1651472419u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049699u>::k_valid_scopes, 0, 1651472419, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x626F7823u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668049699, 1, 0, 0, &AMCP::Property_Traits<1668049699u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684370979u>::k_valid_scopes, 0, 1668049699, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x636C6B23u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1684370979, 1, 0, 0, &AMCP::Property_Traits<1684370979u>::k_valid_scopes, (uint64_t)"N14mcp_applesauce2CF15PropertyListRefE", 0, 1684370979, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64657623u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668577315, 1, 0, 0, &AMCP::Property_Traits<1668577315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852793891u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63747823u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852793891, 1, 0, 0, &AMCP::Property_Traits<1852793891u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651861860u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E6F6423u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1885956452, 1, 1, 0, &AMCP::Property_Traits<1885956452u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651472419u>::k_valid_scopes, 0, 1885956452, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x70696964u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651861860, 1, 1, 0, &AMCP::Property_Traits<1651861860u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1953653102u>::k_valid_scopes, 0, 1651861860, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62756964u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1953653102, 1, 0, 0, &AMCP::Property_Traits<1953653102u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651007861u>::k_valid_scopes, 0, 1953653102, 23);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7472616Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651007861, 1, 0, 0, &AMCP::Property_Traits<1651007861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651013225u>::k_valid_scopes, 0, 1651007861, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62686175u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651013225, 1, 0, 0, &AMCP::Property_Traits<1651013225u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651010921u>::k_valid_scopes, 0, 1651013225, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62687669u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651010921, 1, 0, 0, &AMCP::Property_Traits<1651010921u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651536495u>::k_valid_scopes, 0, 1651010921, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62686D69u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1651536495, 1, 0, 0, &AMCP::Property_Traits<1651536495u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060014u>::k_valid_scopes, 0, 1651536495, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6270726Fu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1652060014, 1, 0, 1, &AMCP::Property_Traits<1652060014u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1652060006u>::k_valid_scopes, 0, 1652060014, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62786F6Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1652060006, 1, 0, 0, &AMCP::Property_Traits<1652060006u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650751011u>::k_valid_scopes, 0, 1652060006, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62786F66u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650751011, 1, 0, 0, &AMCP::Property_Traits<1650751011u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682915u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62647623u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650682915, 1, 0, 0, &AMCP::Property_Traits<1650682915u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1969841184u>::k_valid_scopes, 0, 0, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x62636C23u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1969841184, 1, 1, 0, &AMCP::Property_Traits<1969841184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1836411236u>::k_valid_scopes, 0, 1668639076, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x75696420u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1836411236, 0, 0, 0, &AMCP::Property_Traits<1836411236u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1751737454u>::k_valid_scopes, 0, 1836411236, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6D756964u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1751737454, 1, 0, 0, &AMCP::Property_Traits<1751737454u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049764u>::k_valid_scopes, 0, 1751737454, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6869646Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668049764, 1, 0, 0, &AMCP::Property_Traits<1668049764u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1819569763u>::k_valid_scopes, 0, 1668049764, 7);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x636C6B64u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1819569763, 1, 0, 0, AMCP::Property_Traits<1819569763u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059700u>::k_valid_scopes, 0, 1819569763, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C746E63u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1853059700, 1, 0, 1, &AMCP::Property_Traits<1853059700u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853059619u>::k_valid_scopes, 0, 1853059700, 17);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E737274u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1853059619, 1, 0, 0, &AMCP::Property_Traits<1853059619u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1935763060u>::k_valid_scopes, 0, 1853059619, 25);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E737223u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935763060, 1, 0, 0, AMCP::Property_Traits<1935763060u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1937009955u>::k_valid_scopes, 0, 1935763060, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73616674u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1937009955, 1, 0, 0, &AMCP::Property_Traits<1937009955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1685222501u>::k_valid_scopes, 0, 1937009955, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73746D23u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1685222501, 0, 0, 0, &AMCP::Property_Traits<1685222501u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1936879204u>::k_valid_scopes, 0, 1685222501, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64727465u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936879204, 0, 0, 0, AMCP::Property_Traits<1936879204u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684434036u>::k_valid_scopes, 0, 1936876644, 27);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73726E64u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1684434036, 1, 0, 0, &AMCP::Property_Traits<1684434036u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936092276u>::k_valid_scopes, 0, 1684434036, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64666C74u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936092276, 1, 0, 0, &AMCP::Property_Traits<1936092276u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684301171u>::k_valid_scopes, 0, 1936092276, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73666C74u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1684301171, 0, 0, 0, &AMCP::Property_Traits<1684301171u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667523955u>::k_valid_scopes, 0, 1684301171, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x64646573u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1667523955, 0, 0, 1, &AMCP::Property_Traits<1667523955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935960434u>::k_valid_scopes, 0, 1667523955, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63646573u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935960434, 1, 0, 0, &AMCP::Property_Traits<1935960434u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935894638u>::k_valid_scopes, 0, 1935960434, 8);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73646972u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935894638, 1, 0, 0, &AMCP::Property_Traits<1935894638u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952542835u>::k_valid_scopes, 0, 1935894638, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7363686Eu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1952542835, 1, 0, 0, &AMCP::Property_Traits<1952542835u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952805485u>::k_valid_scopes, 0, 1952542835, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x74617073u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1952805485, 1, 0, 0, &AMCP::Property_Traits<1952805485u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936487523u>::k_valid_scopes, 0, 1952805485, 22);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7465726Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936487523, 1, 0, 0, &AMCP::Property_Traits<1936487523u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718444404u>::k_valid_scopes, 0, 1819569763, 12);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x736C7463u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718444404, 1, 0, 1, &AMCP::Property_Traits<1718444404u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718449187u>::k_valid_scopes, 0, 1885762592, 11);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x666D6174u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718449187, 1, 0, 0, &AMCP::Property_Traits<1718449187u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1735554416u>::k_valid_scopes, 0, 1885762657, 1);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x666D7423u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1735554416, 1, 0, 1, &AMCP::Property_Traits<1735554416u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634169456u>::k_valid_scopes, 0, 1735554416, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x67727570u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634169456, 1, 0, 0, &AMCP::Property_Traits<1634169456u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1633906541u>::k_valid_scopes, 0, 1634169456, 14);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61677270u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1633906541, 1, 0, 1, &AMCP::Property_Traits<1633906541u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634562932u>::k_valid_scopes, 0, 1633906541, 3);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61636F6Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634562932, 1, 0, 1, &AMCP::Property_Traits<1634562932u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634755428u>::k_valid_scopes, 0, 1634562932, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x616D7374u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634755428, 1, 0, 1, &AMCP::Property_Traits<1634755428u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668445298u>::k_valid_scopes, 0, 1634755428, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61706364u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668445298, 1, 0, 0, &AMCP::Property_Traits<1668445298u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1886549620u>::k_valid_scopes, 0, 1668445298, 12);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63727472u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1886549620, 1, 0, 0, &AMCP::Property_Traits<1886549620u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668506480u>::k_valid_scopes, 0, 1886549620, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x70727674u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668506480, 1, 0, 0, &AMCP::Property_Traits<1668506480u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667591277u>::k_valid_scopes, 0, 1668506480, 18);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63736370u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1667591277, 1, 0, 0, &AMCP::Property_Traits<1667591277u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668441199u>::k_valid_scopes, 0, 1667591277, 9);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x63656C6Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1668441199, 1, 0, 0, &AMCP::Property_Traits<1668441199u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962742u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6372646Fu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935962742, 1, 0, 1, &AMCP::Property_Traits<1935962742u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935962738u>::k_valid_scopes, 0, 1935962742, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73647276u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935962738, 1, 0, 0, &AMCP::Property_Traits<1935962738u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818456950u>::k_valid_scopes, 0, 1935962738, 13);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73647272u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818456950, 1, 0, 1, &AMCP::Property_Traits<1818456950u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453110u>::k_valid_scopes, 0, 1818456950, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C637376u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818453110, 1, 0, 1, &AMCP::Property_Traits<1818453110u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1818453106u>::k_valid_scopes, 0, 1818453110, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C636476u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1818453106, 1, 0, 0, &AMCP::Property_Traits<1818453106u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650685548u>::k_valid_scopes, 0, 1818453106, 26);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6C636472u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1650685548, 1, 0, 1, &AMCP::Property_Traits<1650685548u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893353u>::k_valid_scopes, 0, 1650685548, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6263766Cu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935893353, 1, 0, 1, &AMCP::Property_Traits<1935893353u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935893357u>::k_valid_scopes, 0, 1935893353, 20);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73636369u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935893357, 1, 0, 0, &AMCP::Property_Traits<1935893357u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1935892841u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x7363636Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1935892841, 1, 0, 0, &AMCP::Property_Traits<1935892841u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745334u>::k_valid_scopes, 0, 0, 19);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73636169u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936745334, 1, 0, 1, &AMCP::Property_Traits<1936745334u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936745315u>::k_valid_scopes, 0, 1936745334, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73706376u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1936745315, 1, 0, 0, &AMCP::Property_Traits<1936745315u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1853188452u>::k_valid_scopes, 0, 1936745315, 21);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x73706363u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1853188452, 1, 0, 0, &AMCP::Property_Traits<1853188452u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852073061u>::k_valid_scopes, 0, 0, 4);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E756964u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852073061, 1, 0, 0, &AMCP::Property_Traits<1852073061u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852077168u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E646465u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852077168, 1, 0, 0, &AMCP::Property_Traits<1852077168u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852072820u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E647470u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852072820, 1, 0, 0, &AMCP::Property_Traits<1852072820u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852072812u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E646374u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852072812, 1, 0, 0, &AMCP::Property_Traits<1852072812u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1953657716u>::k_valid_scopes, 0, 0, 15);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E64636Cu, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1953657716, 1, 0, 0, &AMCP::Property_Traits<1953657716u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718839674u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x74727374u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718839674, 1, 0, 1, &AMCP::Property_Traits<1718839674u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1718843939u>::k_valid_scopes, 0, 0, 24);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6673697Au, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1718843939, 1, 0, 0, &AMCP::Property_Traits<1718843939u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1852012899u>::k_valid_scopes, 0, 0, 13);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x66737A23u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1852012899, 1, 0, 1, &AMCP::Property_Traits<1852012899u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1634955892u>::k_valid_scopes, 0, 0, 10);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x6E637963u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1634955892, 1, 0, 0, &AMCP::Property_Traits<1634955892u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<2003267184u>::k_valid_scopes, 0, 0, 17);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x61737274u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 2003267184, 1, 0, 1, &AMCP::Property_Traits<2003267184u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1752130413u>::k_valid_scopes, 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x77676E70u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1752130413, 0, 0, 1, &AMCP::Property_Traits<1752130413u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1952608870u>::k_valid_scopes, 0, 0, 2);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x686F636Du, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v0, 1952608870, 1, 0, 0, &AMCP::Property_Traits<1952608870u>::k_valid_scopes, (uint64_t)"N4AMCP12Clock_FilterE", 0, 0, 0);
  std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(0x74627266u, &v0);
  if (__p)
  {
    unint64_t v2 = __p;
    operator delete(__p);
  }
}

void sub_1BAF83CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::unordered_map<unsigned int,AMCP::Live_Property_Traits>::insert_or_assign[abi:ne180100]<AMCP::Live_Property_Traits>(unsigned int a1, int *a2)
{
  unint64_t v5 = a1;
  unint64_t v6 = *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
  if (!*((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1)) {
    goto LABEL_18;
  }
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list
                                      + 8));
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v2 = a1;
    if (*((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) <= (unint64_t)a1) {
      unint64_t v2 = (unint64_t)a1
    }
         % *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
  }
  else
  {
    unint64_t v2 = (DWORD2(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list) - 1) & a1;
  }
  int16x8_t v8 = *(uint64_t ***)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v2);
  if (!v8 || (int16x8_t v9 = *v8) == 0)
  {
LABEL_18:
    int16x8_t v11 = (char *)operator new(0x48uLL);
    *(void *)int16x8_t v11 = 0;
    *((void *)v11 + 1) = v5;
    *((_DWORD *)v11 + 4) = a1;
    *((_DWORD *)v11 + 6) = *a2;
    *(_DWORD *)(v11 + 27) = *(int *)((char *)a2 + 3);
    __n128 result = *(__n128 *)(a2 + 2);
    *((__n128 *)v11 + 2) = result;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    uint64_t v12 = *((void *)a2 + 3);
    uint64_t v13 = *((void *)a2 + 4);
    *((void *)a2 + 3) = 0;
    *((void *)v11 + 6) = v12;
    *((void *)v11 + 7) = v13;
    *((_DWORD *)v11 + 16) = a2[10];
    result.n128_f32[0] = (float)(unint64_t)(qword_1E9F7A498 + 1);
    if (v6 && (float)(*(float *)&dword_1E9F7A4A0 * (float)v6) >= result.n128_f32[0])
    {
      unint64_t v5 = v2;
      goto LABEL_64;
    }
    BOOL v15 = 1;
    if (v6 >= 3) {
      BOOL v15 = (v6 & (v6 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v6);
    result.n128_f32[0] = result.n128_f32[0] / *(float *)&dword_1E9F7A4A0;
    unint64_t v17 = vcvtps_u32_f32(result.n128_f32[0]);
    if (v16 <= v17) {
      int8x8_t prime = (int8x8_t)v17;
    }
    else {
      int8x8_t prime = (int8x8_t)v16;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v6 = *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
    }
    if (*(void *)&prime <= v6)
    {
      if (*(void *)&prime >= v6) {
        goto LABEL_60;
      }
      unint64_t v24 = vcvtps_u32_f32((float)(unint64_t)qword_1E9F7A498 / *(float *)&dword_1E9F7A4A0);
      if (v6 < 3
        || (result.n128_u64[0] = (unint64_t)vcnt_s8((int8x8_t)v6),
            result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]),
            result.n128_u32[0] > 1uLL))
      {
        unint64_t v24 = std::__next_prime(v24);
      }
      else
      {
        uint64_t v25 = 1 << -(char)__clz(v24 - 1);
        if (v24 >= 2) {
          unint64_t v24 = v25;
        }
      }
      if (*(void *)&prime <= v24) {
        int8x8_t prime = (int8x8_t)v24;
      }
      if (*(void *)&prime >= v6)
      {
        unint64_t v6 = *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
        goto LABEL_60;
      }
      if (!*(void *)&prime)
      {
        uint64_t v35 = (void *)AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list;
        *(void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list = 0;
        if (v35) {
          operator delete(v35);
        }
        unint64_t v6 = 0;
        *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) = 0;
        goto LABEL_60;
      }
    }
    if (*(void *)&prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    CFIndex v19 = operator new(8 * *(void *)&prime);
    CFStringRef v20 = (void *)AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list;
    *(void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((int8x8_t *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) = prime;
    do
      *(void *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v21++) = 0;
    while (*(void *)&prime != v21);
    CFStringRef v22 = (void **)qword_1E9F7A490;
    if (qword_1E9F7A490)
    {
      unint64_t v23 = *(void *)(qword_1E9F7A490 + 8);
      result.n128_u64[0] = (unint64_t)vcnt_s8(prime);
      result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
      if (result.n128_u32[0] > 1uLL)
      {
        if (v23 >= *(void *)&prime) {
          v23 %= *(void *)&prime;
        }
      }
      else
      {
        v23 &= *(void *)&prime - 1;
      }
      *(void *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v23) = &qword_1E9F7A490;
      for (i = *v22; i; unint64_t v23 = v27)
      {
        unint64_t v27 = i[1];
        if (result.n128_u32[0] > 1uLL)
        {
          if (v27 >= *(void *)&prime) {
            v27 %= *(void *)&prime;
          }
        }
        else
        {
          v27 &= *(void *)&prime - 1;
        }
        if (v27 != v23)
        {
          if (!*(void *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27))
          {
            *(void *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27) = v22;
            goto LABEL_56;
          }
          const void *v22 = (void *)*i;
          *uint64_t i = **(void **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27);
          **(void **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v27) = i;
          uint64_t i = v22;
        }
        unint64_t v27 = v23;
LABEL_56:
        CFStringRef v22 = (void **)i;
        uint64_t i = (void *)*i;
      }
    }
    unint64_t v6 = (unint64_t)prime;
LABEL_60:
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5) {
        v5 %= v6;
      }
    }
    else
    {
      unint64_t v5 = (v6 - 1) & v5;
    }
LABEL_64:
    uint64_t v28 = AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list;
    int v29 = *(void **)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v5);
    if (v29)
    {
      *(void *)int16x8_t v11 = *v29;
    }
    else
    {
      *(void *)int16x8_t v11 = qword_1E9F7A490;
      qword_1E9F7A490 = (uint64_t)v11;
      *(void *)(v28 + 8 * v5) = &qword_1E9F7A490;
      if (!*(void *)v11)
      {
LABEL_73:
        ++qword_1E9F7A498;
        return result;
      }
      unint64_t v30 = *(void *)(*(void *)v11 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v30 >= v6) {
          v30 %= v6;
        }
      }
      else
      {
        v30 &= v6 - 1;
      }
      int v29 = (void *)(AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 8 * v30);
    }
    *int v29 = v11;
    goto LABEL_73;
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == a1) {
      break;
    }
    if (v7.u32[0] > 1uLL)
    {
      if (v10 >= *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1)) {
        v10 %= *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1);
      }
    }
    else
    {
      v10 &= *((void *)&AMCP::local_get_property_traits_list(void)::s_indesctructible_property_traits_list + 1) - 1;
    }
    if (v10 != v2) {
      goto LABEL_18;
    }
LABEL_17:
    int16x8_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_18;
    }
  }
  if (*((_DWORD *)v9 + 4) != a1) {
    goto LABEL_17;
  }
  int v31 = *a2;
  long long v32 = (void *)v9[4];
  *(_DWORD *)((char *)v9 + 27) = *(int *)((char *)a2 + 3);
  *((_DWORD *)v9 + 6) = v31;
  uint64_t v33 = a2 + 2;
  if (v32)
  {
    void v9[5] = (uint64_t)v32;
    operator delete(v32);
    v9[4] = 0;
    void v9[5] = 0;
    v9[6] = 0;
  }
  __n128 result = *(__n128 *)(a2 + 2);
  *((__n128 *)v9 + 2) = result;
  v9[6] = *((void *)a2 + 3);
  *uint64_t v33 = 0;
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v34 = *((void *)a2 + 4);
  *((_DWORD *)v9 + 16) = a2[10];
  v9[7] = v34;
  return result;
}

void sub_1BAF842E0(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[4];
  if (v3)
  {
    v1[5] = v3;
    operator delete(v3);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

double AMCP::get_property_traits_for_hal_selector@<D0>(AMCP *this@<X0>, uint64_t a2@<X8>)
{
  int v2 = (int)this;
  AMCP::local_get_property_traits_list(this);
  unint64_t v4 = &qword_1E9F7A490;
  while (1)
  {
    unint64_t v4 = (uint64_t *)*v4;
    if (!v4) {
      break;
    }
    if (*((_DWORD *)v4 + 15) == v2)
    {
      *(_DWORD *)a2 = *((_DWORD *)v4 + 6);
      *(_DWORD *)(a2 + 3) = *(_DWORD *)((char *)v4 + 27);
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((void *)(a2 + 8), (const void *)v4[4], v4[5], (v4[5] - v4[4]) >> 2);
      *(void *)(a2 + 32) = v4[7];
      *(_DWORD *)(a2 + 40) = *((_DWORD *)v4 + 16);
      return result;
    }
  }
  *(_DWORD *)(a2 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_DWORD *)a2 = 0;
  *(_DWORD *)(a2 + 3) = 0;
  return result;
}

BOOL AMCP::is_stock_property_selector(AMCP *this)
{
  unsigned int v1 = this;
  AMCP::local_get_property_traits_list(this);
  return std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1) != 0;
}

uint64_t *AMCP::is_required_property_selector(AMCP *this)
{
  unsigned int v1 = this;
  AMCP::local_get_property_traits_list(this);
  double result = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1);
  if (result) {
    return (uint64_t *)(*((unsigned char *)result + 28) != 0);
  }
  return result;
}

uint64_t *AMCP::is_invariant_property_selector(AMCP *this)
{
  unsigned int v1 = this;
  AMCP::local_get_property_traits_list(this);
  double result = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1);
  if (result) {
    return (uint64_t *)(*((unsigned char *)result + 29) != 0);
  }
  return result;
}

uint64_t *AMCP::property_selector_may_be_settable(AMCP *this)
{
  unsigned int v1 = this;
  AMCP::local_get_property_traits_list(this);
  double result = std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(v1);
  if (result) {
    return (uint64_t *)(*((unsigned char *)result + 30) != 0);
  }
  return result;
}

uint64_t AMCP::get_property_traits_for_class(AMCP *this)
{
  unsigned int v1 = this;
  is_base_of = (AMCP *)AMCP::is_base_of((AMCP *)0x61706C67, this);
  if (is_base_of)
  {
    return AMCP::get_driver_property_traits_list(is_base_of);
  }
  else
  {
    unint64_t v4 = (AMCP *)AMCP::is_base_of((AMCP *)0x61626F78, v1);
    if (v4)
    {
      return AMCP::get_box_property_traits_list(v4);
    }
    else if (AMCP::is_base_of((AMCP *)0x61616767, v1))
    {
      {
        AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr = 0;
      }
      if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_meta_device_property_traits_list(void)::once, memory_order_acquire) != -1)
      {
        unint64_t v16 = &v14;
        BOOL v15 = &v16;
        std::__call_once(&AMCP::get_meta_device_property_traits_list(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_device_property_traits_list(void)::$_0 &&>>);
      }
      return AMCP::get_meta_device_property_traits_list(void)::s_indestructible_property_traits_list_ptr;
    }
    else
    {
      unint64_t v5 = (AMCP *)AMCP::is_base_of((AMCP *)0x61646576, v1);
      if (v5)
      {
        return AMCP::get_device_property_traits_list(v5);
      }
      else if (AMCP::is_base_of((AMCP *)0x6D737472, v1))
      {
        {
          AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
        }
        if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_meta_stream_property_traits_list(void)::once, memory_order_acquire) != -1)
        {
          unint64_t v16 = &v14;
          BOOL v15 = &v16;
          std::__call_once(&AMCP::get_meta_stream_property_traits_list(void)::once, &v15, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_meta_stream_property_traits_list(void)::$_0 &&>>);
        }
        return AMCP::get_meta_stream_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
      }
      else
      {
        unint64_t v6 = (AMCP *)AMCP::is_base_of((AMCP *)0x61737472, v1);
        if (v6)
        {
          return AMCP::get_stream_property_traits_list(v6);
        }
        else
        {
          uint8x8_t v7 = (AMCP *)AMCP::is_base_of((AMCP *)0x736C6472, v1);
          if (v7)
          {
            return AMCP::get_slider_control_property_traits_list(v7);
          }
          else
          {
            int16x8_t v8 = (AMCP *)AMCP::is_base_of((AMCP *)0x6C65766C, v1);
            if (v8)
            {
              return AMCP::get_level_control_property_traits_list(v8);
            }
            else
            {
              int16x8_t v9 = (AMCP *)AMCP::is_base_of((AMCP *)0x746F676C, v1);
              if (v9)
              {
                return AMCP::get_BOOLean_control_property_traits_list(v9);
              }
              else
              {
                unint64_t v10 = (AMCP *)AMCP::is_base_of((AMCP *)0x736C6374, v1);
                if (v10)
                {
                  return AMCP::get_selector_control_property_traits_list(v10);
                }
                else
                {
                  int16x8_t v11 = (AMCP *)AMCP::is_base_of((AMCP *)0x7370616E, v1);
                  if (v11)
                  {
                    return AMCP::get_stereo_pan_control_property_traits_list(v11);
                  }
                  else
                  {
                    uint64_t v12 = (AMCP *)AMCP::is_base_of((AMCP *)0x6163746C, v1);
                    if (v12)
                    {
                      return AMCP::get_control_property_traits_list(v12);
                    }
                    else
                    {
                      uint64_t v13 = (AMCP *)AMCP::is_base_of((AMCP *)0x61636C6B, v1);
                      if (v13)
                      {
                        return AMCP::get_clock_property_traits_list(v13);
                      }
                      else
                      {
                        return AMCP::get_object_property_traits_list(v13);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

BOOL AMCP::is_stock_property_selector(AMCP *this, unsigned int a2)
{
  return std::__hash_table<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,AMCP::Live_Property_Traits>>>::find<unsigned int>(a2) != 0;
}

void non-virtual thunk to'AMCP::IOAudio1::Driver::~Driver(AMCP::IOAudio1::Driver *this)
{
  AMCP::IOAudio1::Driver::~Driver((AMCP::IOAudio1::Driver *)((char *)this - 24));

  JUMPOUT(0x1C1859840);
}

{
  AMCP::IOAudio1::Driver::~Driver((AMCP::IOAudio1::Driver *)((char *)this - 24));
}

void AMCP::IOAudio1::Driver::~Driver(AMCP::IOAudio1::Driver *this)
{
  *(void *)this = &unk_1F1488490;
  *((void *)this + 3) = &unk_1F14884B8;
  int v2 = (void **)((char *)this + 64);
  if (*((void *)this + 8))
  {
    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 8);
    operator delete(*v2);
  }
  uint64_t v3 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v3) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v3);
  }
  *((void *)this + 3) = &unk_1F146D188;
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

{
  uint64_t vars8;

  AMCP::IOAudio1::Driver::~Driver(this);

  JUMPOUT(0x1C1859840);
}

std::__shared_mutex_base *AMCP::IOAudio1::Driver::shutdown(AMCP::IOAudio1::Driver *this)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v17, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v17 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int16x8_t v9 = **(NSObject ***)buf;
      if (*(void *)v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        unint64_t v10 = pthread_self();
        mach_port_t v11 = pthread_mach_thread_np(v10);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v11;
        *(_WORD *)CFStringRef v20 = 2080;
        *(void *)&v20[2] = "IOAudio1_Driver.cpp";
        __int16 v21 = 1024;
        int v22 = 49;
        uint8x8_t v7 = v9;
        os_log_type_t v8 = OS_LOG_TYPE_INFO;
        goto LABEL_12;
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v12 = **(NSObject ***)buf;
      if (*(void *)v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
      }
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        BOOL v15 = pthread_self();
        mach_port_t v16 = pthread_mach_thread_np(v15);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)CFStringRef v20 = 2080;
        *(void *)&v20[2] = "IOAudio1_Driver.cpp";
        __int16 v21 = 1024;
        int v22 = 49;
        _os_log_debug_impl(&dword_1BAA78000, v12, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down IOAudio1 Driver", buf, 0x18u);
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v20);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v6;
        *(_WORD *)CFStringRef v20 = 2080;
        *(void *)&v20[2] = "IOAudio1_Driver.cpp";
        __int16 v21 = 1024;
        int v22 = 49;
        uint8x8_t v7 = v4;
        os_log_type_t v8 = OS_LOG_TYPE_DEFAULT;
LABEL_12:
        _os_log_impl(&dword_1BAA78000, v7, v8, "%6u %32s:%-5d Tearing down IOAudio1 Driver", buf, 0x18u);
      }
      break;
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v13 = *((void *)this + 7);
  *((void *)this + 7) = 0;
  if (v13) {
    std::default_delete<applesauce::iokit::io_service_factory>::operator()[abi:ne180100](v13);
  }
  std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)this + 8);
  return AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*((void *)this + 4) + 16), *((_DWORD *)this + 12));
}

void sub_1BAF84C34(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<AMCP::IOAudio1::Driver,AMCP::Core::Driver>(void **a1, void **a2)
{
  double result = *a2;
  if (*a2 {
    && (unint64_t v4 = a2,
  }
  {
    unint64_t v5 = v4[1];
    *a1 = result;
    a1[1] = v5;
  }
  else
  {
    unint64_t v4 = a1;
  }
  *unint64_t v4 = 0;
  v4[1] = 0;
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Driver5startEvE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::operator()(uint64_t a1, io_object_t *a2)
{
  io_object_t v2 = *a2;
  *a2 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  io_registry_entry_t v8 = v2;
  if (v2)
  {
    uint64_t v4 = IOObjectRetain(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      uint8x8_t v7 = std::system_category();
      MEMORY[0x1C1859250](exception, v5, v7, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
    AMCP::IOAudio1::Driver::handle_device_arrival(v3, &v8);
    IOObjectRelease(v2);
    IOObjectRelease(v2);
  }
  else
  {
    AMCP::IOAudio1::Driver::handle_device_arrival(v3, &v8);
  }
}

void sub_1BAF84E10(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  IOObjectRelease(v1);
  _Unwind_Resume(a1);
}

void AMCP::IOAudio1::Driver::handle_device_arrival(uint64_t a1, io_registry_entry_t *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  io_registry_entry_t v3 = *a2;
  if (!*a2)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    uint64_t v17 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
    std::runtime_error::runtime_error(exception, "cannot create io_object_proxy from null io_object");
    int16x8_t v18 = (struct type_info *)MEMORY[0x1E4FBA338];
    goto LABEL_25;
  }
  properties[0] = 0;
  uint64_t CFProperties = IORegistryEntryCreateCFProperties(v3, properties, 0, 0);
  if (CFProperties)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x20uLL);
    uint64_t v17 = (void (*)(void *))MEMORY[0x1E4FBA220];
    CFIndex v19 = std::system_category();
    MEMORY[0x1C1859250](exception, CFProperties, v19, "Error on get_properties");
    int16x8_t v18 = (struct type_info *)MEMORY[0x1E4FBA2F0];
LABEL_25:
    __cxa_throw(exception, v18, v17);
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, properties[0]);
  if (!cf)
  {
    CFStringRef v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v20, "Could not construct");
    __cxa_throw(v20, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  applesauce::CF::details::find_at_key<applesauce::CF::StringRef,__CFString const*>((applesauce::CF::StringRef *)&v29, (CFDictionaryRef)cf, @"IOAudioEngineGlobalUniqueID");
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  if (v6 == v7) {
    goto LABEL_12;
  }
  do
  {
    CFStringRef v8 = *(const __CFString **)(*(void *)v6 + 24);
    if (v8)
    {
      CFRetain(*(CFTypeRef *)(*(void *)v6 + 24));
      CFComparisonResult v9 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(v8, (const __CFString **)&v29);
      CFRelease(v8);
      if (v9 == kCFCompareEqualTo) {
        goto LABEL_11;
      }
    }
    else if (applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>(0, (const __CFString **)&v29) == kCFCompareEqualTo)
    {
      goto LABEL_11;
    }
    v6 += 16;
  }
  while (v6 != v7);
  uint64_t v6 = v7;
LABEL_11:
  if (v6 == *(void *)(a1 + 72))
  {
LABEL_12:
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 32);
    unsigned int v11 = *(_DWORD *)(a1 + 48);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(&v24, *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
    std::dynamic_pointer_cast[abi:ne180100]<AMCP::IOAudio1::Driver,AMCP::Core::Driver>((void **)&v26, &v24);
    io_object_t v12 = *a2;
    io_object_t v27 = v12;
    if (v12)
    {
      uint64_t v13 = IOObjectRetain(v12);
      if (v13)
      {
        uint64_t v21 = v13;
        int v22 = __cxa_allocate_exception(0x20uLL);
        uint64_t v23 = std::system_category();
        MEMORY[0x1C1859250](v22, v21, v23, "Error on Retain");
        __cxa_throw(v22, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
      }
    }
    CFTypeRef v14 = cf;
    if (cf) {
      CFRetain(cf);
    }
    CFTypeRef v28 = v14;
    long long v32 = 0;
    BOOL v15 = (char *)operator new(0x28uLL);
    *(void *)BOOL v15 = &unk_1F1488A68;
    *(_OWORD *)(v15 + 8) = v26;
    long long v26 = 0uLL;
    *((_DWORD *)v15 + 6) = v12;
    io_object_t v27 = 0;
    *((void *)v15 + 4) = v14;
    CFTypeRef v28 = 0;
    long long v32 = v15;
    AMCP::Core::Conductor::enqueue_config_change(v10, v11, v11, 1, (uint64_t)properties);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](properties);
    if (v25) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
    }
  }
  if (v29) {
    CFRelease(v29);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void sub_1BAF8514C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, __int16 a18, char a19, char a20)
{
  if (a2)
  {
    __cxa_free_exception(v20);
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    if (a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a10);
    }
    applesauce::CF::StringRef::~StringRef(&a16);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a17);
    __cxa_begin_catch(exception_object);
    __cxa_end_catch();
    JUMPOUT(0x1BAF85008);
  }
  _Unwind_Resume(exception_object);
}

uint64_t AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1::~$_1(uint64_t a1)
{
  io_object_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 16);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Driver21handle_device_arrivalEN10applesauce5iokit16io_object_holderEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  io_object_t v3 = operator new(0x258uLL);
  v3[1] = 0;
  uint64_t v3[2] = 0;
  *io_object_t v3 = &unk_1F1488AD8;
  uint64_t v4 = *(const void **)(a1 + 32);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a1 + 32));
  }
  CFTypeRef cf = v4;
  AMCP::IOAudio1::Device::Device((uint64_t)(v3 + 3), v2, (unsigned int *)(a1 + 24), (const __CFDictionary **)&cf);
}

void sub_1BAF854E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  std::__shared_weak_count::~__shared_weak_count(v4);
  operator delete(v6);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x1BAF854B0);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Device>::__on_zero_shared(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v42, "com.apple.coreaudio", "AMCP");
  int v3 = *(_DWORD *)(v42 + 16);
  switch(v3)
  {
    case 3:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      CFStringRef v20 = **(NSObject ***)buf;
      if (*(void *)v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
      }
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = pthread_self();
        mach_port_t v22 = pthread_mach_thread_np(v21);
        CFStringRef v23 = *(const __CFString **)(a1 + 48);
        if (v23)
        {
          mach_port_t v24 = v22;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v23);
          if (v41 >= 0) {
            uint64_t v25 = __p;
          }
          else {
            uint64_t v25 = (void **)__p[0];
          }
          int v26 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)std::string buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v24;
          *(_WORD *)uint64_t v45 = 2080;
          *(void *)&v45[2] = "IOAudio1_Device.cpp";
          __int16 v46 = 1024;
          int v47 = 147;
          __int16 v48 = 2080;
          uint64_t v49 = v25;
          __int16 v50 = 1024;
          int v51 = v26;
          unsigned int v11 = v20;
          os_log_type_t v12 = OS_LOG_TYPE_INFO;
          goto LABEL_28;
        }
LABEL_56:
        exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        uint64_t v39 = (void (*)(void *))MEMORY[0x1E4FBA1D8];
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E4FBA338], v39);
      }
      break;
    case 2:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v13 = **(NSObject ***)buf;
      if (*(void *)v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        CFTypeRef v14 = pthread_self();
        mach_port_t v15 = pthread_mach_thread_np(v14);
        CFStringRef v16 = *(const __CFString **)(a1 + 48);
        if (v16)
        {
          mach_port_t v17 = v15;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v16);
          if (v41 >= 0) {
            int16x8_t v18 = __p;
          }
          else {
            int16x8_t v18 = (void **)__p[0];
          }
          int v19 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)std::string buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v17;
          *(_WORD *)uint64_t v45 = 2080;
          *(void *)&v45[2] = "IOAudio1_Device.cpp";
          __int16 v46 = 1024;
          int v47 = 147;
          __int16 v48 = 2080;
          uint64_t v49 = v18;
          __int16 v50 = 1024;
          int v51 = v19;
          _os_log_debug_impl(&dword_1BAA78000, v13, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d Tearing down Device '%s' with object id %u", buf, 0x28u);
LABEL_29:
          if (v41 < 0) {
            operator delete(__p[0]);
          }
          break;
        }
        goto LABEL_56;
      }
      break;
    case 1:
      AMCP::Log::Scope_Registry::get(v2);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v4 = **(NSObject ***)buf;
      if (*(void *)v45) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v45);
      }
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = pthread_self();
        mach_port_t v6 = pthread_mach_thread_np(v5);
        CFStringRef v7 = *(const __CFString **)(a1 + 48);
        if (v7)
        {
          mach_port_t v8 = v6;
          applesauce::CF::convert_to<std::string,0>((uint64_t)__p, v7);
          if (v41 >= 0) {
            CFComparisonResult v9 = __p;
          }
          else {
            CFComparisonResult v9 = (void **)__p[0];
          }
          int v10 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)std::string buf = 67110146;
          *(_DWORD *)&uint8_t buf[4] = v8;
          *(_WORD *)uint64_t v45 = 2080;
          *(void *)&v45[2] = "IOAudio1_Device.cpp";
          __int16 v46 = 1024;
          int v47 = 147;
          __int16 v48 = 2080;
          uint64_t v49 = v9;
          __int16 v50 = 1024;
          int v51 = v10;
          unsigned int v11 = v4;
          os_log_type_t v12 = OS_LOG_TYPE_DEFAULT;
LABEL_28:
          _os_log_impl(&dword_1BAA78000, v11, v12, "%6u %32s:%-5d Tearing down Device '%s' with object id %u", buf, 0x28u);
          goto LABEL_29;
        }
        goto LABEL_56;
      }
      break;
  }
  if (v43) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v43);
  }
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100]((void *)(a1 + 536));
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100]((void *)(a1 + 512));
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__clear[abi:ne180100]((void *)(a1 + 560));
  io_object_t v27 = *(io_connect_t **)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  if (v27) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v27);
  }
  AMCP::Utility::Mach_Port::reset((AMCP::Utility::Mach_Port *)(a1 + 408));
  uint64_t v28 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v28) {
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v28);
  }
  AMCP::Core::Broker::destroy_core(*(std::__shared_mutex_base **)(*(void *)(*(void *)(a1 + 40) + 32) + 16), *(_DWORD *)(a1 + 56));
  CFTypeRef v29 = *(std::__shared_weak_count **)(a1 + 592);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  *(void *)std::string buf = a1 + 560;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = a1 + 536;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  *(void *)std::string buf = a1 + 512;
  std::vector<std::unique_ptr<AMCP::IOAudio1::Stream>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  unint64_t v30 = *(const void **)(a1 + 504);
  if (v30) {
    CFRelease(v30);
  }
  io_object_t v31 = *(_DWORD *)(a1 + 496);
  if (v31) {
    IOObjectRelease(v31);
  }
  long long v32 = *(const void **)(a1 + 488);
  if (v32) {
    CFRelease(v32);
  }
  AMCP::Utility::Mach_Port::~Mach_Port((AMCP::Utility::Mach_Port *)(a1 + 408));
  uint64_t v33 = *(io_connect_t **)(a1 + 400);
  *(void *)(a1 + 400) = 0;
  if (v33) {
    std::default_delete<applesauce::iokit::io_connect_holder>::operator()[abi:ne180100](v33);
  }
  uint64_t v34 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v34) {
    std::default_delete<applesauce::iokit::io_service_notifications>::operator()[abi:ne180100](v34);
  }
  io_object_t v35 = *(_DWORD *)(a1 + 384);
  if (v35) {
    IOObjectRelease(v35);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 64));
  int v36 = *(const void **)(a1 + 48);
  if (v36) {
    CFRelease(v36);
  }
  int16x8_t v37 = *(std::__shared_weak_count **)(a1 + 32);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
}

void sub_1BAF85A0C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
  {
    __cxa_free_exception(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Device>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::IOAudio1::Device>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__alloc_func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 16);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1488A68;
  return std::__compressed_pair_elem<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t std::__compressed_pair_elem<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  io_object_t v5 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if (v5)
  {
    uint64_t v6 = IOObjectRetain(v5);
    if (v6)
    {
      uint64_t v9 = v6;
      exceptiouint64_t n = __cxa_allocate_exception(0x20uLL);
      unsigned int v11 = std::system_category();
      MEMORY[0x1C1859250](exception, v9, v11, "Error on Retain");
      __cxa_throw(exception, MEMORY[0x1E4FBA2F0], MEMORY[0x1E4FBA220]);
    }
  }
  CFStringRef v7 = *(const void **)(a2 + 24);
  if (v7) {
    CFRetain(v7);
  }
  *(void *)(a1 + 24) = v7;
  return a1;
}

void sub_1BAF85C5C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  _Unwind_Resume(a1);
}

void *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  *uint64_t v2 = &unk_1F1488A68;
  std::__compressed_pair_elem<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,0,false>::__compressed_pair_elem[abi:ne180100]<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BAF85CDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1488A68;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 24);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_arrival(applesauce::iokit::io_object_holder)::$_1>,void ()(void)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_1F1488A68;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  io_object_t v3 = *(_DWORD *)(a1 + 24);
  if (v3) {
    IOObjectRelease(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_1F14887B8;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::__clone(uint64_t a1)
{
  double result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *double result = &unk_1F14887B8;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(void *a1)
{
  *a1 = &unk_1F14887B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio1::Driver::start(void)::$_0,std::allocator<AMCP::IOAudio1::Driver::start(void)::$_0>,void ()(applesauce::iokit::io_object_holder)>::~__func(void *a1)
{
  *a1 = &unk_1F14887B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP8IOAudio16Driver23handle_device_departureEPNS0_6DeviceEE3$_1"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid((AMCP::Utility::Expiration_Check *)(a1 + 8));
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
    int v10 = *v13;
    if (*(void *)v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
    }
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      unsigned int v11 = pthread_self();
      mach_port_t v12 = pthread_mach_thread_np(v11);
      LODWORD(v13) = 67109890;
      HIDWORD(v13) = v12;
      *(_WORD *)CFTypeRef v14 = 2080;
      *(void *)&uint64_t v14[2] = "IOAudio1_Driver.cpp";
      __int16 v15 = 1024;
      int v16 = 147;
      __int16 v17 = 2080;
      int16x8_t v18 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v10, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", (uint8_t *)&v13, 0x22u);
    }
    abort();
  }
  uint64_t v4 = **(long long ***)(a1 + 48);
  io_object_t v5 = v4 + 1;
  uint64_t v6 = *(long long **)(v2 + 72);
  if (v4 + 1 != v6)
  {
    do
    {
      uint64_t v4 = v5;
      long long v7 = *v5;
      *(void *)io_object_t v5 = 0;
      *((void *)v5 + 1) = 0;
      mach_port_t v8 = (std::__shared_weak_count *)*((void *)v5 - 1);
      *(v5 - 1) = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
    }
    while (v4 + 1 != v6);
    io_object_t v5 = *(long long **)(v2 + 72);
  }
  while (v5 != v4)
  {
    uint64_t v9 = (std::__shared_weak_count *)*((void *)v5 - 1);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
    --v5;
  }
  *(void *)(v2 + 72) = v4;
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::destroy(uint64_t a1)
{
  return std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(a1 + 8);
}

__n128 std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_1F1488B38;
  AMCP::Utility::Expiration_Check::Expiration_Check(a2 + 8, (uint64_t *)(a1 + 8));
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(a2 + 40) = result;
  return result;
}

char *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v3 = &unk_1F1488B38;
  AMCP::Utility::Expiration_Check::Expiration_Check((uint64_t)(v3 + 8), v2);
  *(_OWORD *)(v3 + 40) = *(_OWORD *)(a1 + 40);
  return v3;
}

void sub_1BAF86254(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1488B38;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));

  JUMPOUT(0x1C1859840);
}

void *std::__function::__func<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1,std::allocator<AMCP::IOAudio1::Driver::handle_device_departure(AMCP::IOAudio1::Device *)::$_1>,void ()(void)>::~__func(void *a1)
{
  *a1 = &unk_1F1488B38;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor((uint64_t)(a1 + 1));
  return a1;
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::get_clock_device_list(AMCP::Core::Conductor::Conductor_Graph_Manager *this@<X0>, void *a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 54);
  io_object_t v5 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v26, v6, 1u);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)CFTypeRef v29 = 2080;
      *(void *)&v29[2] = "Conductor.cpp";
      __int16 v30 = 1024;
      int v31 = 752;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (system_core != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFStringRef v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v33[6] = "virtual std::vector<Object_ID> AMCP::Core::Conductor::Conductor_Graph_Manager::get_clock_device_list() const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Conductor.cpp";
    int v35 = 752;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    CFTypeRef v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Core::Core::get_simple_required_property<1668049699u>(a2, v26);
  mach_port_t v8 = v27;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1BAF86618(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::get_device_list(AMCP::Core::Conductor::Conductor_Graph_Manager *this@<X0>, void *a2@<X8>)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *((void *)this + 54);
  io_object_t v5 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_mutex_base *)(*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&v26, v6, 1u);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (!v26)
  {
    AMCP::Log::Scope_Registry::get(core);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    uint64_t v9 = **(NSObject ***)buf;
    if (*(void *)v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v29);
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      int v10 = pthread_self();
      mach_port_t v11 = pthread_mach_thread_np(v10);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v11;
      *(_WORD *)CFTypeRef v29 = 2080;
      *(void *)&v29[2] = "Conductor.cpp";
      __int16 v30 = 1024;
      int v31 = 743;
      __int16 v32 = 2080;
      *(void *)uint64_t v33 = "not (system_core != nullptr)";
      _os_log_error_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
    }
    AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v25);
    __cxa_allocate_exception(0x40uLL);
    caulk::make_string((caulk *)"", (uint64_t)&v17);
    std::logic_error::logic_error(&v18, &v17);
    v18.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
    std::logic_error::logic_error(&v19, &v18);
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int v24 = -1;
    v19.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
    CFStringRef v20 = &unk_1F1489CF0;
    boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v19);
    *(void *)&v33[6] = "virtual std::vector<Object_ID> AMCP::Core::Conductor::Conductor_Graph_Manager::get_device_list() const";
    uint64_t v34 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/Core/Conductor.cpp";
    int v35 = 743;
    applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v12);
    long long v15 = v12;
    uint64_t v16 = v13;
    long long v12 = 0uLL;
    uint64_t v13 = 0;
    CFTypeRef v14 = &unk_1F148AA90;
    boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
  }
  AMCP::Core::Core::get_simple_required_property<1684370979u>(a2, v26);
  mach_port_t v8 = v27;
  if (v27)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_1BAF8692C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

AMCP::Utility::Dispatch_Queue *AMCP::Core::Conductor::Conductor_Graph_Manager::get_work_queue@<X0>(AMCP::Core::Conductor::Conductor_Graph_Manager *this@<X0>, AMCP::Utility::Dispatch_Queue *a2@<X8>)
{
  return AMCP::Utility::Dispatch_Queue::Dispatch_Queue(a2, *(dispatch_object_t *)(*((void *)this + 53) + 32));
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::call_external_ioc_graph_update_observers(AMCP::Core::Conductor::Conductor_Graph_Manager *this, unsigned int a2)
{
  v18[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *((void *)this + 53);
  *(void *)long long v15 = v3 + 1784;
  v15[8] = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)(v3 + 1784));
  if (*(unsigned char *)(v3 + 1952))
  {
    long long v12 = 0uLL;
    *(void *)&long long v13 = 0;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v3 + 1960), *(_DWORD **)(v3 + 1968), a2))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>>(&v12, *(unint64_t **)(v4 + 8), *(unint64_t **)(v4 + 16));
    }
    unsigned int v5 = *(_DWORD *)(v3 + 1992);
    if (v5 != a2
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(v3 + 1960), *(_DWORD **)(v3 + 1968), v5))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>>(&v12, *(unint64_t **)(v6 + 8), *(unint64_t **)(v6 + 16));
    }
  }
  else
  {
    long long v12 = 0u;
    long long v13 = 0u;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)v15);
  uint64_t v8 = *((void *)&v12 + 1);
  uint64_t v7 = v12;
  if ((void)v12 != *((void *)&v12 + 1))
  {
    uint64_t v9 = (const AMCP::Graph_Description *)(v3 + 2648);
    do
    {
      uint64_t v10 = *(void *)(v7 + 32);
      if (!v10) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v10 + 48))(v15);
      if (*(void *)v15 != *(void *)&v15[8]) {
        AMCP::IO_Core::Graph_Manager::modify_graph_internal((AMCP::IO_Core::Graph_Manager *)&__p, v9, (const AMCP::Modify_Graph_Destroy_List *)v15);
      }
      *(void *)std::string buf = v18;
      std::vector<AMCP::Wire_Identifier>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)std::string buf = &v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)std::string buf = (char *)&v16 + 8;
      std::vector<AMCP::Wire_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      *(void *)std::string buf = v15;
      std::vector<AMCP::Node_Description>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      v7 += 72;
    }
    while (v7 != v8);
  }
  *(void *)long long v15 = &v12;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v15);
}

void sub_1BAF874BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1BAF874D8(void *a1, int a2)
{
  if (!a2) {
    JUMPOUT(0x1BAF874E4);
  }
  __clang_call_terminate(a1);
}

void std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__base_destruct_at_end[abi:ne180100](v2, (uint64_t)*v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__base_destruct_at_end[abi:ne180100](void *result, uint64_t a2)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (v4 != a2)
  {
    do
    {
      uint64_t v5 = v4 - 72;
      uint64_t v6 = (void *)(v4 - 64);
      std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100]((void *)(v4 - 32));
      __n128 result = std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](v6);
      uint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

void *std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(_DWORD *a1, _DWORD *a2, unsigned int a3)
{
  if (a2 == a1)
  {
    uint64_t v3 = a2;
  }
  else
  {
    uint64_t v3 = a1;
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)a1) >> 3);
    do
    {
      unint64_t v5 = v4 >> 1;
      uint64_t v6 = &v3[10 * (v4 >> 1)];
      unsigned int v8 = *v6;
      uint64_t v7 = v6 + 10;
      v4 += ~(v4 >> 1);
      if (v8 < a3) {
        uint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

void *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> const*>>(void *result, unint64_t *a2, unint64_t *a3)
{
  if (a2 != a3)
  {
    unint64_t v4 = a2;
    unint64_t v5 = (void **)result;
    do
    {
      unint64_t v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find(*v5, v5[1], *v4))
      {
        *uint64_t v7 = v6;
        unsigned int v8 = v7 + 5;
        std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v7 + 1, (uint64_t)(v4 + 1));
        __n128 result = std::function<void ()(AMCP::Graph_Description const&)>::operator=(v8, (uint64_t)(v4 + 5));
      }
      else
      {
        __n128 result = std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::insert(v5, v7, v4);
      }
      v4 += 9;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::find(void *a1, void *a2, unint64_t a3)
{
  if (a2 == a1)
  {
    uint64_t v3 = a2;
  }
  else
  {
    uint64_t v3 = a1;
    unint64_t v4 = 0x8E38E38E38E38E39 * (a2 - a1);
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &v3[9 * (v4 >> 1)];
      unint64_t v8 = *v6;
      uint64_t v7 = v6 + 9;
      v4 += ~(v4 >> 1);
      if (v8 < a3) {
        uint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

void *std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(void *a1, uint64_t a2)
{
  _OWORD v8[3] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    unint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1BAF87AC4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::function<void ()(AMCP::Graph_Description const&)>::operator=(void *a1, uint64_t a2)
{
  _OWORD v8[3] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    unint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1BAF87D58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::insert(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  unint64_t v5 = (void *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)a2 - *a1;
  uint64_t v8 = v7 / 72;
  uint64_t v9 = (void *)(*a1 + 72 * (v7 / 72));
  mach_port_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v19 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v19 > 0x38E38E38E38E38ELL) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0x8E38E38E38E38E39 * ((uint64_t)(v10 - (void)v5) >> 3);
    if (2 * v21 > v19) {
      unint64_t v19 = 2 * v21;
    }
    if (v21 >= 0x1C71C71C71C71C7) {
      unint64_t v22 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v22 = v19;
    }
    __int16 v50 = v11;
    if (v22)
    {
      int v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(v22);
    }
    else
    {
      int v24 = 0;
      uint64_t v23 = 0;
    }
    char v25 = &v24[72 * v8];
    *(void *)uint64_t v49 = v24;
    *(void *)&v49[8] = v25;
    *(void *)&v49[16] = v25;
    *(void *)&v49[24] = &v24[72 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v27 = 1;
        }
        else {
          unint64_t v27 = 2 * v8;
        }
        uint64_t v53 = v11;
        uint64_t v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(v27);
        CFTypeRef v29 = &v28[72 * (v27 >> 2)];
        *(void *)&long long v51 = v28;
        *((void *)&v51 + 1) = v29;
        *((void *)&v52 + 1) = &v28[72 * v30];
        if (*(void *)&v49[16] != *(void *)&v49[8])
        {
          uint64_t v31 = (*(void *)&v49[16] - *(void *)&v49[8]) / 72;
          v29 += 72 * v31;
          uint64_t v32 = 72 * v31;
          uint64_t v33 = (uint64_t)&v28[72 * (v27 >> 2) + 40];
          uint64_t v34 = *(void *)&v49[8] + 40;
          do
          {
            *(void *)(v33 - 40) = *(void *)(v34 - 40);
            std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v33 - 32, v34 - 32);
            std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v33, v34);
            v33 += 72;
            v34 += 72;
            v32 -= 72;
          }
          while (v32);
        }
        *(void *)&long long v52 = v29;
        long long v35 = *(_OWORD *)v49;
        long long v36 = *(_OWORD *)&v49[16];
        *(_OWORD *)uint64_t v49 = v51;
        *(_OWORD *)&v49[16] = v52;
        long long v51 = v35;
        long long v52 = v36;
        std::__split_buffer<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::~__split_buffer((uint64_t)&v51);
        char v25 = *(char **)&v49[16];
      }
      else
      {
        uint64_t v26 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v26 = v8 + 1;
        }
        v25 -= 72 * (v26 >> 1);
        *(void *)&v49[8] = v25;
        *(void *)&v49[16] = v25;
      }
    }
    *(void *)char v25 = *v3;
    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    uint64_t v37 = *(void *)&v49[8];
    int v38 = (void *)(*(void *)&v49[16] + 72);
    *(void *)&v49[16] += 72;
    uint64_t v39 = (void *)*a1;
    if (v9 == (void *)*a1)
    {
      uint64_t v41 = *(void *)&v49[8];
    }
    else
    {
      uint64_t v40 = 0;
      do
      {
        *(void *)(v37 + v40 * 8 - 72) = v9[v40 - 9];
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v37 + v40 * 8 - 64, (uint64_t)&v9[v40 - 8]);
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v37 + v40 * 8 - 32, (uint64_t)&v9[v40 - 4]);
        v40 -= 9;
      }
      while (&v9[v40] != v39);
      uint64_t v41 = v37 + v40 * 8;
      int v38 = *(void **)&v49[16];
    }
    *(void *)&v49[8] = v41;
    uint64_t v42 = (void *)a1[1];
    double v54 = v38;
    double v55 = v38;
    *(void *)&long long v51 = v11;
    *((void *)&v51 + 1) = &v54;
    *(void *)&long long v52 = &v55;
    BYTE8(v52) = 0;
    if (v9 != v42)
    {
      int v43 = v9;
      do
      {
        uint64_t v44 = *v43;
        v43 += 9;
        void *v38 = v44;
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100]((uint64_t)(v38 + 1), (uint64_t)(v9 + 1));
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100]((uint64_t)(v38 + 5), (uint64_t)(v9 + 5));
        int v38 = v55 + 9;
        v55 += 9;
        uint64_t v9 = v43;
      }
      while (v43 != v42);
    }
    BYTE8(v52) = 1;
    std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&v51);
    long long v45 = *(_OWORD *)a1;
    uint64_t v46 = *(void *)&v49[24];
    *a1 = *(void *)&v49[8];
    a1[1] = v38;
    *(_OWORD *)&v49[8] = v45;
    uint64_t v47 = a1[2];
    a1[2] = v46;
    *(void *)&v49[24] = v47;
    *(void *)uint64_t v49 = v45;
    std::__split_buffer<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::~__split_buffer((uint64_t)v49);
    return (void *)v37;
  }
  else if (v9 == (void *)v6)
  {
    *uint64_t v9 = *a3;
    std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 9;
  }
  else
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)(v9 + 9)) >> 3);
    long long v13 = (void *)(v6 - 72);
    unint64_t v14 = a1[1];
    if (v6 >= 0x48)
    {
      uint64_t v15 = 0;
      long long v16 = &v5[9 * v8 + ((uint64_t)(v6 - (void)(v9 + 9)) >> 3)];
      do
      {
        *(void *)(v6 + v15 * 8) = v16[v15];
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](v6 + v15 * 8 + 8, (uint64_t)&v16[v15 + 1]);
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v6 + v15 * 8 + 40, (uint64_t)&v16[v15 + 5]);
        v15 += 9;
      }
      while ((unint64_t)&v16[v15] < v6);
      unint64_t v14 = v6 + v15 * 8;
      unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v6 - (void)(v9 + 9)) >> 3);
    }
    a1[1] = v14;
    if ((void *)v6 != v9 + 9)
    {
      uint64_t v17 = 9 * v12;
      do
      {
        std::logic_error v18 = v13 + 1;
        void *v13 = v9[v17 - 9];
        v13 -= 9;
        std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::operator=[abi:ne180100](v18, (uint64_t)&v9[v17 - 8]);
        v17 -= 9;
      }
      while (v17 * 8);
    }
    if (v9 <= v3) {
      v3 += 9 * (a1[1] > (unint64_t)v3);
    }
    *uint64_t v9 = *v3;
    std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v9 + 1, (uint64_t)(v3 + 1));
    std::function<void ()(AMCP::Graph_Description const&)>::operator=(v9 + 5, (uint64_t)(v3 + 5));
  }
  return v9;
}

void sub_1BAF881C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  *(void *)(v11 + 8) = v12;
  _Unwind_Resume(exception_object);
}

uint64_t std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](a1, a2);
  std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](v4 + 32, a2 + 32);
  return a1;
}

void sub_1BAF88220(_Unwind_Exception *a1)
{
  std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    uint64_t v4 = (void *)(i - 64);
    std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100]((void *)(i - 32));
    std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](v4);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v2 = **(void **)(a1 + 16);
    uint64_t v3 = **(void **)(a1 + 8);
    if (v2 != v3)
    {
      do
      {
        uint64_t v4 = v2 - 72;
        unint64_t v5 = (void *)(v2 - 64);
        std::__function::__value_func<void ()(AMCP::Graph_Description const&)>::~__value_func[abi:ne180100]((void *)(v2 - 32));
        std::__function::__value_func<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::~__value_func[abi:ne180100](v5);
        uint64_t v2 = v4;
      }
      while (v4 != v3);
    }
  }
  return a1;
}

void *std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::operator=[abi:ne180100](void *a1, uint64_t a2)
{
  unint64_t v5 = a1 + 3;
  uint64_t v4 = (void *)a1[3];
  *unint64_t v5 = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  unint64_t v6 = (void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (!v7)
  {
    unint64_t v6 = v5;
    goto LABEL_9;
  }
  if (v7 != a2)
  {
    *unint64_t v5 = v7;
LABEL_9:
    void *v6 = 0;
    goto LABEL_11;
  }
  a1[3] = a1;
  (*(void (**)(void, void *))(*(void *)*v6 + 24))(*v6, a1);
LABEL_11:
  uint64_t v9 = a1 + 7;
  uint64_t v8 = (void *)a1[7];
  unint64_t v10 = a1 + 4;
  a1[7] = 0;
  if (v8 == a1 + 4)
  {
    (*(void (**)(void *))(*v10 + 32))(a1 + 4);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  uint64_t v11 = (void *)(a2 + 56);
  uint64_t v12 = *(void *)(a2 + 56);
  if (v12)
  {
    if (v12 == a2 + 32)
    {
      *uint64_t v9 = v10;
      (*(void (**)(void, void *))(*(void *)*v11 + 24))(*v11, a1 + 4);
      return a1;
    }
    *uint64_t v9 = v12;
  }
  else
  {
    uint64_t v11 = a1 + 7;
  }
  void *v11 = 0;
  return a1;
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::enqueue_config_change(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
}

void AMCP::Core::Conductor::enqueue_config_change(uint64_t a1, unsigned int a2, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v8 = (void *)a1;
  uint64_t v163 = *MEMORY[0x1E4F143B8];
  v156[0] = 0;
  v156[1] = 0;
  std::locale v151 = (std::mutex *)(a1 + 992);
  std::mutex::lock((std::mutex *)(a1 + 992));
  std::locale v153 = v8;
  if ((a4 & 2) != 0)
  {
    std::logic_error v18 = (std::mutex *)operator new(0xE0uLL);
    *(void *)v18->__m_.__opaque = 0;
    *(void *)&v18->__m_.__opaque[8] = 0;
    v18->__m_.__sig = (uint64_t)&unk_1F1489560;
    *(void *)&v18->__m_.__opaque[16] = 850045863;
    unint64_t v19 = (std::mutex *)&v18->__m_.__opaque[16];
    *(_OWORD *)&v18->__m_.__opaque[24] = 0u;
    *(_OWORD *)&v18->__m_.__opaque[40] = 0u;
    *(_OWORD *)&v18[1].__m_.__sig = 0u;
    *(void *)&v18[1].__m_.__opaque[8] = 0;
    *(void *)&v18[1].__m_.__opaque[16] = 1018212795;
    *(_OWORD *)&v18[1].__m_.__opaque[24] = 0u;
    *(_OWORD *)&v18[1].__m_.__opaque[40] = 0u;
    v18[2].__m_.__sig = 0;
    *(void *)v18[2].__m_.__opaque = 1018212795;
    *(_OWORD *)&v18[2].__m_.__opaque[8] = 0u;
    *(_OWORD *)&v18[2].__m_.__opaque[24] = 0u;
    *(void *)&v18[2].__m_.__opaque[40] = 0;
    *(_DWORD *)&v18[2].__m_.__opaque[48] = a2;
    v18[2].__m_.__opaque[52] = 0;
    v18[3].__m_.__sig = 0;
    *(void *)v18[3].__m_.__opaque = 0;
    *(void *)&v18[3].__m_.__opaque[8] = 0;
LABEL_16:
    v156[0] = v19;
    v156[1] = v18;
    goto LABEL_66;
  }
  uint64_t v9 = (char *)v8[138];
  unint64_t v10 = v8[139];
  uint64_t v11 = (char *)v10 - v9;
  if (v10 == v9)
  {
    long long v13 = (std::mutex **)v8[139];
  }
  else
  {
    unint64_t v12 = v11 >> 4;
    long long v13 = (std::mutex **)v8[138];
    do
    {
      unint64_t v14 = v12 >> 1;
      uint64_t v15 = &v13[2 * (v12 >> 1)];
      uint64_t v17 = *v15;
      long long v16 = v15 + 2;
      v12 += ~(v12 >> 1);
      if (*(_DWORD *)&v17[2].__m_.__opaque[24] < a2) {
        long long v13 = v16;
      }
      else {
        unint64_t v12 = v14;
      }
    }
    while (v12);
  }
  if (v10 != v13)
  {
    unint64_t v19 = *v13;
    if (*(_DWORD *)&(*v13)[2].__m_.__opaque[24] == a2)
    {
      std::logic_error v18 = v13[1];
      if (v18) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v18->__m_.__opaque, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = v153;
      goto LABEL_16;
    }
  }
  CFStringRef v20 = (char *)operator new(0xE0uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)CFStringRef v20 = &unk_1F1489560;
  *((void *)v20 + 3) = 850045863;
  *((_OWORD *)v20 + 2) = 0u;
  *((_OWORD *)v20 + 3) = 0u;
  *((_OWORD *)v20 + 4) = 0u;
  *((void *)v20 + 10) = 0;
  *((void *)v20 + 11) = 1018212795;
  *((_OWORD *)v20 + 6) = 0u;
  *((_OWORD *)v20 + 7) = 0u;
  *((void *)v20 + 16) = 0;
  *((void *)v20 + 17) = 1018212795;
  *((_OWORD *)v20 + 9) = 0u;
  *((_OWORD *)v20 + 10) = 0u;
  *((void *)v20 + 22) = 0;
  *((_DWORD *)v20 + 46) = a2;
  v20[188] = 0;
  *((void *)v20 + 24) = 0;
  *((void *)v20 + 25) = 0;
  *((void *)v20 + 26) = 0;
  uint64_t v21 = (char *)v13 - v9;
  uint64_t v148 = ((char *)v13 - v9) >> 4;
  v156[0] = (std::mutex *)(v20 + 24);
  v156[1] = (std::mutex *)v20;
  unint64_t v22 = &v9[((char *)v13 - v9) & 0xFFFFFFFFFFFFFFF0];
  unint64_t v23 = v153[140];
  if ((unint64_t)v10 >= v23)
  {
    unint64_t v37 = (v11 >> 4) + 1;
    if (v37 >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = v23 - (void)v9;
    if (v38 >> 3 > v37) {
      unint64_t v37 = v38 >> 3;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    *(void *)&long long v159 = v153 + 140;
    if (v39) {
      unint64_t v39 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v39);
    }
    else {
      uint64_t v40 = 0;
    }
    dispatch_queue_t v42 = (dispatch_queue_t)(v39 + 16 * v148);
    queue[0] = (dispatch_queue_t)v39;
    queue[1] = v42;
    queue[2] = v42;
    unsigned int v158 = (v39 + 16 * v40);
    if (v148 == v40)
    {
      if (v21 < 1)
      {
        if (v13 == (std::mutex **)v9) {
          unint64_t v44 = 1;
        }
        else {
          unint64_t v44 = v21 >> 3;
        }
        *((void *)&v162 + 1) = v153 + 140;
        long long v45 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v44);
        dispatch_queue_t v47 = queue[1];
        int64_t v48 = (char *)queue[2] - (char *)queue[1];
        if (queue[2] == queue[1])
        {
          int64x2_t v53 = vdupq_n_s64((unint64_t)queue[1]);
          __int16 v50 = &v45[2 * (v44 >> 2)];
        }
        else
        {
          uint64_t v49 = v48 >> 4;
          __int16 v50 = ((char *)&v45[2 * (v44 >> 2)] + (v48 & 0xFFFFFFFFFFFFFFF0));
          uint64_t v51 = 16 * v49;
          long long v52 = &v45[2 * (v44 >> 2)];
          do
          {
            *(_OWORD *)&v52->isa = *(_OWORD *)&v47->isa;
            v52 += 2;
            v47->isa = 0;
            v47[1].isa = 0;
            v47 += 2;
            v51 -= 16;
          }
          while (v51);
          int64x2_t v53 = *(int64x2_t *)&queue[1];
        }
        double v54 = queue[0];
        double v55 = v158;
        queue[0] = v45;
        queue[1] = &v45[2 * (v44 >> 2)];
        int64x2_t v161 = v53;
        queue[2] = v50;
        unsigned int v158 = &v45[2 * v46];
        dispatch_object_t object = v54;
        *(void *)&long long v162 = v55;
        std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&object);
        dispatch_queue_t v42 = queue[2];
      }
      else
      {
        unint64_t v43 = v148 + 2;
        if (v148 >= -1) {
          unint64_t v43 = v148 + 1;
        }
        v42 -= 2 * (v43 >> 1);
        queue[1] = v42;
        queue[2] = v42;
      }
    }
    v42->isa = (Class)(v20 + 24);
    v42[1].isa = (Class)v20;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v20 + 1, 1uLL, memory_order_relaxed);
    long long v56 = queue[1];
    dispatch_queue_t v57 = queue[2] + 2;
    queue[2] += 2;
    uint64_t v8 = v153;
    BOOL v58 = v153[138];
    if (v22 != v58)
    {
      uint64_t v59 = v22;
      do
      {
        long long v60 = *(_OWORD *)&v59[-2].isa;
        v59 -= 2;
        *(_OWORD *)&v56[-2].isa = v60;
        v56 -= 2;
        v59->isa = 0;
        v59[1].isa = 0;
      }
      while (v59 != v58);
      dispatch_queue_t v57 = queue[2];
    }
    queue[1] = v56;
    double v61 = v153[139];
    if (v22 != v61)
    {
      do
      {
        *(_OWORD *)&v57->isa = *(_OWORD *)&v22->isa;
        v57 += 2;
        v22->isa = 0;
        v22[1].isa = 0;
        v22 += 2;
      }
      while (v22 != v61);
      long long v56 = queue[1];
      unint64_t v22 = v153[139];
    }
    double v62 = v153[138];
    v153[138] = v56;
    v153[139] = v57;
    uint64_t v63 = v153[140];
    v153[140] = v158;
    queue[2] = v22;
    unsigned int v158 = v63;
    queue[0] = v62;
    queue[1] = v62;
    std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)queue);
  }
  else if (v22 == v10)
  {
    uint64_t v41 = v156[1];
    *(_OWORD *)&v10->isa = *(_OWORD *)v156;
    uint64_t v8 = v153;
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v41->__m_.__opaque, 1uLL, memory_order_relaxed);
    }
    v153[139] = v10 + 2;
  }
  else
  {
    int v24 = v22 + 2;
    char v25 = v10 - 2;
    uint64_t v26 = v10;
    if ((unint64_t)v10 >= 0x10)
    {
      do
      {
        *(_OWORD *)&v26->isa = *(_OWORD *)&v25->isa;
        v26 += 2;
        v25->isa = 0;
        v25[1].isa = 0;
        v25 += 2;
      }
      while (v25 < v10);
    }
    v153[139] = v26;
    if (v10 != v24)
    {
      unint64_t v27 = (std::__shared_weak_count **)&v10[-1];
      uint64_t v28 = 16 * (((char *)v10 - (char *)v24) >> 4);
      uint64_t v29 = (uint64_t)&v9[16 * v148 - 16];
      do
      {
        uint64_t v30 = (void *)(v29 + v28);
        long long v31 = *(_OWORD *)(v29 + v28);
        *uint64_t v30 = 0;
        v30[1] = 0;
        uint64_t v32 = *v27;
        *(_OWORD *)(v27 - 1) = v31;
        if (v32) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v32);
        }
        v27 -= 2;
        v28 -= 16;
      }
      while (v28);
    }
    uint64_t v34 = v156[0];
    uint64_t v33 = v156[1];
    if (v22 > v156)
    {
      uint64_t v33 = (std::mutex *)v20;
      uint64_t v34 = (std::mutex *)(v20 + 24);
    }
    if (v33) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v33->__m_.__opaque, 1uLL, memory_order_relaxed);
    }
    v22->isa = (Class)v34;
    long long v35 = &v9[16 * v148];
    long long v36 = (std::__shared_weak_count *)*((void *)v35 + 1);
    *((void *)v35 + 1) = v33;
    uint64_t v8 = v153;
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
  }
LABEL_66:
  std::mutex::unlock(v151);
  if (!v156[0]) {
    goto LABEL_168;
  }
  __lk.__m_ = v156[0];
  __lk.__owns_ = 1;
  std::mutex::lock(v156[0]);
  long long v154 = 0uLL;
  uint64_t v65 = *(char **)&v156[0][2].__m_.__opaque[32];
  uint64_t v64 = *(char **)&v156[0][2].__m_.__opaque[40];
  if (v64 == v65)
  {
    uint64_t v65 = *(char **)&v156[0][2].__m_.__opaque[40];
  }
  else
  {
    unint64_t v66 = (v64 - v65) >> 4;
    do
    {
      unint64_t v67 = v66 >> 1;
      BOOL v68 = &v65[16 * (v66 >> 1)];
      uint64_t v70 = *(unsigned int **)v68;
      unsigned int v69 = v68 + 16;
      v66 += ~(v66 >> 1);
      if (*v70 < a3) {
        uint64_t v65 = v69;
      }
      else {
        unint64_t v66 = v67;
      }
    }
    while (v66);
  }
  if (v64 == v65 || (uint64_t v71 = *(_DWORD **)v65, **(_DWORD **)v65 != a3))
  {
    int v150 = a4;
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, (dispatch_object_t)v8[84]);
    uint64_t v73 = (char *)operator new(0x180uLL);
    *(_OWORD *)(v73 + 8) = 0u;
    *(void *)uint64_t v73 = &unk_1F14895B0;
    *((_DWORD *)v73 + 6) = a3;
    char v74 = (objc_class *)(v73 + 24);
    *((_OWORD *)v73 + 2) = 0u;
    double v75 = (dispatch_object_t *)(v73 + 32);
    *((void *)v73 + 9) = 0;
    *((_OWORD *)v73 + 5) = 0u;
    *((_OWORD *)v73 + 3) = 0u;
    *((_WORD *)v73 + 32) = 0;
    *((void *)v73 + 12) = 850045863;
    *(_OWORD *)(v73 + 104) = 0u;
    *(_OWORD *)(v73 + 120) = 0u;
    *(_OWORD *)(v73 + 136) = 0u;
    *(_OWORD *)(v73 + 152) = 0u;
    *(_OWORD *)(v73 + 168) = 0u;
    *((void *)v73 + 23) = 850045863;
    *((_OWORD *)v73 + 12) = 0u;
    *((_OWORD *)v73 + 13) = 0u;
    *((_OWORD *)v73 + 14) = 0u;
    *((_OWORD *)v73 + 15) = 0u;
    *((_OWORD *)v73 + 16) = 0u;
    *((void *)v73 + 34) = 850045863;
    *(_OWORD *)(v73 + 280) = 0u;
    *(_OWORD *)(v73 + 296) = 0u;
    *(_OWORD *)(v73 + 312) = 0u;
    *(_OWORD *)(v73 + 328) = 0u;
    *((void *)v73 + 43) = dispatch_semaphore_create(0);
    *((_DWORD *)v73 + 88) = 0;
    *((void *)v73 + 45) = 0;
    *((_OWORD *)v73 + 23) = 0u;
    uint64_t v76 = dispatch_queue_create("AMCP Queued Change Queue", 0);
    uint64_t v77 = AMCP::Utility::Dispatch_Queue::operator=((NSObject **)v73 + 4, v76);
    if (v76) {
      dispatch_release(v76);
    }
    if (!*v75)
    {
      AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)v77);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&object, "com.apple.coreaudio", "AMCP");
      isa = object->isa;
      if (v161.i64[0]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v161.i64[0]);
      }
      if (os_log_type_enabled(isa, OS_LOG_TYPE_ERROR))
      {
        uint64_t v146 = pthread_self();
        mach_port_t v147 = pthread_mach_thread_np(v146);
        LODWORD(object) = 67109890;
        HIDWORD(object) = v147;
        v161.i16[0] = 2080;
        *(uint64_t *)((char *)v161.i64 + 2) = (uint64_t)"Conductor.h";
        v161.i16[5] = 1024;
        v161.i32[3] = 167;
        LOWORD(v162) = 2080;
        *(void *)((char *)&v162 + 2) = "m_execution_queue.operator BOOL() == true";
        _os_log_error_impl(&dword_1BAA78000, isa, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s ", (uint8_t *)&object, 0x22u);
      }
      abort();
    }
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, *v75);
    dispatch_set_target_queue(object, queue[0]);
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object);
    *(void *)&long long v78 = v73 + 24;
    *((void *)&v78 + 1) = v73;
    long long v154 = v78;
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
    uint64_t v79 = v156[0];
    mach_port_t v81 = *(char **)&v156[0][2].__m_.__opaque[32];
    uint64_t v80 = *(NSObject **)&v156[0][2].__m_.__opaque[40];
    uint64_t v82 = v65 - v81;
    uint64_t v152 = (v65 - v81) >> 4;
    mach_port_t v83 = &v81[(v65 - v81) & 0xFFFFFFFFFFFFFFF0];
    __n128 v85 = &v156[0][2].__m_.__opaque[48];
    unint64_t v84 = *(void *)&v156[0][2].__m_.__opaque[48];
    if ((unint64_t)v80 >= v84)
    {
      unint64_t v89 = (((char *)v80 - v81) >> 4) + 1;
      if (v89 >> 60) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v90 = v84 - (void)v81;
      if (v90 >> 3 > v89) {
        unint64_t v89 = v90 >> 3;
      }
      if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v91 = v89;
      }
      *(void *)&long long v159 = (char *)v156[0] + 184;
      if (v91) {
        unint64_t v91 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v91);
      }
      else {
        uint64_t v92 = 0;
      }
      dispatch_queue_t v104 = (dispatch_queue_t)(v91 + 16 * v152);
      queue[0] = (dispatch_queue_t)v91;
      queue[1] = v104;
      queue[2] = v104;
      unsigned int v158 = (v91 + 16 * v92);
      if (v152 == v92)
      {
        if (v82 < 1)
        {
          if (v65 == v81) {
            unint64_t v106 = 1;
          }
          else {
            unint64_t v106 = v82 >> 3;
          }
          *((void *)&v162 + 1) = v85;
          std::string::size_type v107 = std::__allocate_at_least[abi:ne180100]<std::allocator<CA::ValueRange>>(v106);
          dispatch_queue_t v109 = queue[1];
          int64_t v110 = (char *)queue[2] - (char *)queue[1];
          if (queue[2] == queue[1])
          {
            int64x2_t v115 = vdupq_n_s64((unint64_t)queue[1]);
            long long v112 = &v107[2 * (v106 >> 2)];
          }
          else
          {
            uint64_t v111 = v110 >> 4;
            long long v112 = ((char *)&v107[2 * (v106 >> 2)] + (v110 & 0xFFFFFFFFFFFFFFF0));
            uint64_t v113 = 16 * v111;
            std::string v114 = &v107[2 * (v106 >> 2)];
            do
            {
              *(_OWORD *)&v114->isa = *(_OWORD *)&v109->isa;
              v114 += 2;
              v109->isa = 0;
              v109[1].isa = 0;
              v109 += 2;
              v113 -= 16;
            }
            while (v113);
            int64x2_t v115 = *(int64x2_t *)&queue[1];
          }
          uint64_t v116 = queue[0];
          uint64_t v117 = v158;
          queue[0] = v107;
          queue[1] = &v107[2 * (v106 >> 2)];
          int64x2_t v161 = v115;
          queue[2] = v112;
          unsigned int v158 = &v107[2 * v108];
          dispatch_object_t object = v116;
          *(void *)&long long v162 = v117;
          std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)&object);
          dispatch_queue_t v104 = queue[2];
        }
        else
        {
          unint64_t v105 = v152 + 2;
          if (v152 >= -1) {
            unint64_t v105 = v152 + 1;
          }
          v104 -= 2 * (v105 >> 1);
          queue[1] = v104;
          queue[2] = v104;
        }
      }
      v104->isa = v74;
      v104[1].isa = (Class)v73;
      if (v73)
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v73 + 1, 1uLL, memory_order_relaxed);
        dispatch_queue_t v104 = queue[2];
      }
      std::string v118 = v104 + 2;
      queue[2] = v118;
      std::string v119 = queue[1];
      uint64_t v120 = *(NSObject **)&v79[2].__m_.__opaque[32];
      uint64_t v8 = v153;
      if (v83 != v120)
      {
        int v121 = v83;
        do
        {
          long long v122 = *(_OWORD *)&v121[-2].isa;
          v121 -= 2;
          *(_OWORD *)&v119[-2].isa = v122;
          v119 -= 2;
          v121->isa = 0;
          v121[1].isa = 0;
        }
        while (v121 != v120);
        std::string v118 = queue[2];
      }
      queue[1] = v119;
      uint64_t v123 = *(NSObject **)&v79[2].__m_.__opaque[40];
      if (v83 != v123)
      {
        do
        {
          *(_OWORD *)&v118->isa = *(_OWORD *)&v83->isa;
          v118 += 2;
          v83->isa = 0;
          v83[1].isa = 0;
          v83 += 2;
        }
        while (v83 != v123);
        std::string v119 = queue[1];
        mach_port_t v83 = *(NSObject **)&v79[2].__m_.__opaque[40];
      }
      uint64_t v124 = *(NSObject **)&v79[2].__m_.__opaque[32];
      *(void *)&v79[2].__m_.__opaque[32] = v119;
      *(void *)&v79[2].__m_.__opaque[40] = v118;
      std::logic_error v125 = *(NSObject **)&v79[2].__m_.__opaque[48];
      *(void *)&v79[2].__m_.__opaque[48] = v158;
      queue[2] = v83;
      unsigned int v158 = v125;
      queue[0] = v124;
      queue[1] = v124;
      std::__split_buffer<std::shared_ptr<DSP_Host_Types::FormatDescription>>::~__split_buffer((uint64_t)queue);
    }
    else if (v83 == v80)
    {
      uint64_t v103 = *((void *)&v154 + 1);
      *(_OWORD *)&v83->isa = v154;
      if (v103) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v103 + 8), 1uLL, memory_order_relaxed);
      }
      *(void *)&v79[2].__m_.__opaque[40] = v83 + 2;
      uint64_t v8 = v153;
    }
    else
    {
      mach_port_t v86 = v83 + 2;
      std::logic_error v87 = v80 - 2;
      unsigned int v88 = *(_OWORD **)&v156[0][2].__m_.__opaque[40];
      while (v87 < v80)
      {
        *v88++ = *(_OWORD *)&v87->isa;
        v87->isa = 0;
        v87[1].isa = 0;
        v87 += 2;
      }
      *(void *)&v79[2].__m_.__opaque[40] = v88;
      if (v80 != v86)
      {
        uint64_t v93 = (std::__shared_weak_count **)&v80[-1];
        uint64_t v94 = 16 * (((char *)v80 - (char *)v86) >> 4);
        uint64_t v95 = (uint64_t)&v81[16 * v152 - 16];
        do
        {
          __n128 v96 = (void *)(v95 + v94);
          long long v97 = *(_OWORD *)(v95 + v94);
          void *v96 = 0;
          v96[1] = 0;
          mach_port_t v98 = *v93;
          *(_OWORD *)(v93 - 1) = v97;
          if (v98) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v98);
          }
          v93 -= 2;
          v94 -= 16;
        }
        while (v94);
      }
      unsigned int v99 = &v154;
      if (v83 <= &v154)
      {
        unsigned int v99 = &v154 + (*(void *)&v79[2].__m_.__opaque[40] > (unint64_t)&v154);
        char v74 = (objc_class *)v154;
      }
      uint64_t v100 = *((void *)v99 + 1);
      if (v100) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v100 + 8), 1uLL, memory_order_relaxed);
      }
      v83->isa = v74;
      uint64_t v8 = v153;
      mach_port_t v101 = &v81[16 * v152];
      long long v102 = (std::__shared_weak_count *)*((void *)v101 + 1);
      *((void *)v101 + 1) = v100;
      if (v102) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v102);
      }
    }
    a4 = v150;
    if (!(void)v154) {
      goto LABEL_164;
    }
  }
  else
  {
    uint64_t v72 = *((void *)v65 + 1);
    if (v72) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v72 + 8), 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v154 = v71;
    *((void *)&v154 + 1) = v72;
  }
  std::logic_error v126 = (std::__shared_weak_count *)operator new(0x50uLL);
  v126->__shared_owners_ = 0;
  v126->__shared_weak_owners_ = 0;
  v126->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488DF8;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&object, a5);
  LODWORD(v126[1].__vftable) = a4;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v126[1].__shared_owners_, (uint64_t)&object);
  v126[2].__shared_weak_owners_ = atomic_fetch_add(&AMCP::Core::Conductor::Queued_Change::get_next_id(void)::s_next_id, 1uLL);
  LOBYTE(v126[3].__vftable) = 0;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&object);
  std::string::size_type v127 = (void *)v154;
  std::logic_error v128 = *(void **)(v154 + 344);
  unint64_t v129 = *(void *)(v154 + 352);
  if ((unint64_t)v128 >= v129)
  {
    uint64_t v131 = *(void *)(v154 + 336);
    uint64_t v132 = ((uint64_t)v128 - v131) >> 4;
    unint64_t v133 = v132 + 1;
    if ((unint64_t)(v132 + 1) >> 60) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v134 = v129 - v131;
    if (v134 >> 3 > v133) {
      unint64_t v133 = v134 >> 3;
    }
    if ((unint64_t)v134 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v135 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v135 = v133;
    }
    if (v135 >> 60) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v136 = (char *)operator new(16 * v135);
    *(void *)&long long v137 = v126 + 1;
    *((void *)&v137 + 1) = v126;
    uint64_t v138 = &v136[16 * v132];
    int v139 = &v136[16 * v135];
    *(_OWORD *)uint64_t v138 = v137;
    __n128 v130 = v138 + 16;
    atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
    char v140 = (void *)v127[42];
    mach_port_t v141 = (void *)v127[43];
    if (v141 == v140)
    {
      v127[42] = v138;
      v127[43] = v130;
      v127[44] = v139;
      if (!v141) {
        goto LABEL_154;
      }
    }
    else
    {
      do
      {
        long long v142 = *((_OWORD *)v141 - 1);
        v141 -= 2;
        *((_OWORD *)v138 - 1) = v142;
        v138 -= 16;
        *mach_port_t v141 = 0;
        v141[1] = 0;
      }
      while (v141 != v140);
      uint64_t v143 = (void *)v127[42];
      mach_port_t v141 = (void *)v127[43];
      v127[42] = v138;
      v127[43] = v130;
      v127[44] = v139;
      if (v141 != v143)
      {
        do
        {
          AudioStreamBasicDescription v144 = (std::__shared_weak_count *)*(v141 - 1);
          if (v144) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v144);
          }
          v141 -= 2;
        }
        while (v141 != v143);
        mach_port_t v141 = v143;
      }
      if (!v141) {
        goto LABEL_154;
      }
    }
    operator delete(v141);
  }
  else
  {
    void *v128 = v126 + 1;
    v128[1] = v126;
    atomic_fetch_add_explicit(&v126->__shared_owners_, 1uLL, memory_order_relaxed);
    __n128 v130 = v128 + 2;
    v127[43] = v128 + 2;
  }
LABEL_154:
  v127[43] = v130;
  if (!v156[0][2].__m_.__opaque[28])
  {
    v156[0][2].__m_.__opaque[28] = 1;
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&object, (dispatch_object_t)v8[4]);
    std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(queue, *v8, (std::__shared_weak_count *)v8[1]);
    queue[2] = (dispatch_queue_t)__PAIR64__(a3, a2);
    LODWORD(v158) = a4;
    long long v159 = *(_OWORD *)v156;
    if (v156[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v156[1]->__m_.__opaque, 1uLL, memory_order_relaxed);
    }
    operator new();
  }
  std::condition_variable::notify_all((std::condition_variable *)&v156[0][1]);
  if ((a4 & 0x18) == 8)
  {
    while (!LOBYTE(v126[3].__vftable))
      std::condition_variable::wait((std::condition_variable *)&v156[0][1], &__lk);
  }
  else if ((a4 & 0x10) != 0)
  {
    while (v156[0][2].__m_.__opaque[28])
      std::condition_variable::wait((std::condition_variable *)&v156[0][1].__m_.__opaque[40], &__lk);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v126);
LABEL_164:
  if (*((void *)&v154 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v154 + 1));
  }
  if (__lk.__owns_) {
    std::mutex::unlock(__lk.__m_);
  }
LABEL_168:
  if (v156[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v156[1]);
  }
}

void sub_1BAF894B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, std::mutex *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  a63 = v64 + 336;
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a63);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue(v65);
  std::__shared_weak_count::~__shared_weak_count(v63);
  operator delete(v67);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)&a23);
  std::mutex::unlock(a10);
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 40);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x1C1859840](v2, 0x1020C4045C5CA15);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>(dispatch_queue_s *,AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0 &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t i = a1;
  uint64_t v218 = *MEMORY[0x1E4F143B8];
  uint64_t v179 = a1;
  uint64_t v2 = *(std::mutex **)(a1 + 32);
  std::mutex::lock(v2);
  uint64_t v3 = *(void *)(i + 32);
  uint64_t v4 = *(uint64_t **)(v3 + 168);
  unint64_t v5 = *(uint64_t **)(v3 + 176);
  if (v4 == v5)
  {
LABEL_252:
    std::mutex::unlock(v2);
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = *v4;
      v4 += 2;
      v6 += *(int *)(v7 + 328) + ((uint64_t)(*(void *)(v7 + 344) - *(void *)(v7 + 336)) >> 4);
    }
    while (v4 != v5);
    std::mutex::unlock(v2);
    if (v6)
    {
      uint64_t v176 = i;
      do
      {
        int v173 = *(_DWORD *)(i + 16);
        int v8 = *(_DWORD *)(i + 24);
        unsigned int v178 = *(_DWORD *)(i + 20);
        uint64_t v177 = *(void *)i;
        AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue, *(dispatch_object_t *)(*(void *)i + 32));
        dispatch_assert_queue_V2(queue[0]);
        AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)queue);
        AMCP::Log::Scope_Registry::get(v9);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)queue, "com.apple.coreaudio", "AMCP");
        int isa = (int)queue[0][2].isa;
        switch(isa)
        {
          case 3:
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
            CFStringRef v20 = *(caulk::concurrent::messenger **)(__p.__r_.__value_.__r.__words[0] + 8);
            uint64_t v21 = pthread_self();
            mach_port_t v22 = pthread_mach_thread_np(v21);
            uint64_t v23 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
            *(_DWORD *)(v23 + 16) = 0;
            *(unsigned char *)(v23 + 20) = 1;
            *(_DWORD *)(v23 + 24) = v22;
            *(void *)(v23 + 32) = "Conductor.cpp";
            *(_DWORD *)(v23 + 40) = 315;
            *(_DWORD *)(v23 + 44) = v178;
            *(_DWORD *)(v23 + 48) = v173;
            *(void *)uint64_t v23 = &unk_1F14891F0;
            *(void *)(v23 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v20, (caulk::concurrent::message *)v23);
            break;
          case 2:
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
            long long v16 = *(caulk::concurrent::messenger **)(__p.__r_.__value_.__r.__words[0] + 8);
            uint64_t v17 = pthread_self();
            mach_port_t v18 = pthread_mach_thread_np(v17);
            uint64_t v19 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
            *(_DWORD *)(v19 + 16) = 0;
            *(unsigned char *)(v19 + 20) = 2;
            *(_DWORD *)(v19 + 24) = v18;
            *(void *)(v19 + 32) = "Conductor.cpp";
            *(_DWORD *)(v19 + 40) = 315;
            *(_DWORD *)(v19 + 44) = v178;
            *(_DWORD *)(v19 + 48) = v173;
            *(void *)uint64_t v19 = &unk_1F1489198;
            *(void *)(v19 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v16, (caulk::concurrent::message *)v19);
            break;
          case 1:
            AMCP::Log::Scope_Registry::get(v10);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&__p, "com.apple.coreaudio", "AMCP");
            unint64_t v12 = *(caulk::concurrent::messenger **)(__p.__r_.__value_.__r.__words[0] + 8);
            long long v13 = pthread_self();
            mach_port_t v14 = pthread_mach_thread_np(v13);
            uint64_t v15 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
            *(_DWORD *)(v15 + 16) = 0;
            *(unsigned char *)(v15 + 20) = 0;
            *(_DWORD *)(v15 + 24) = v14;
            *(void *)(v15 + 32) = "Conductor.cpp";
            *(_DWORD *)(v15 + 40) = 315;
            *(_DWORD *)(v15 + 44) = v178;
            *(_DWORD *)(v15 + 48) = v173;
            *(void *)uint64_t v15 = &unk_1F1489140;
            *(void *)(v15 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v12, (caulk::concurrent::message *)v15);
            break;
          default:
            goto LABEL_14;
        }
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
LABEL_14:
        if (queue[1]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)queue[1]);
        }
        memset(&__p, 0, sizeof(__p));
        core = (AMCP::Log::Scope_Registry *)AMCP::Core::Broker::fetch_core((AMCP::Core::Broker *)&p_end_cap, *(std::__shared_mutex_base **)(*(void *)(v177 + 16) + 16), v178);
        char v25 = (AMCP::Core::Core *)p_end_cap;
        if (!p_end_cap)
        {
          AMCP::Log::Scope_Registry::get(core);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)queue, "com.apple.coreaudio", "AMCP");
          int v34 = (int)queue[0][2].isa;
          switch(v34)
          {
            case 3:
              AMCP::Log::Scope_Registry::get(v33);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v198, "com.apple.coreaudio", "AMCP");
              uint64_t v59 = (caulk::concurrent::messenger *)*((void *)v198[0].__begin_ + 1);
              long long v60 = pthread_self();
              mach_port_t v61 = pthread_mach_thread_np(v60);
              uint64_t v62 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
              *(_DWORD *)(v62 + 16) = 0;
              *(unsigned char *)(v62 + 20) = 1;
              *(_DWORD *)(v62 + 24) = v61;
              *(void *)(v62 + 32) = "Conductor.cpp";
              *(_DWORD *)(v62 + 40) = 240;
              *(_DWORD *)(v62 + 44) = v178;
              *(_DWORD *)(v62 + 48) = v173;
              *(void *)uint64_t v62 = &unk_1F1488EF8;
              *(void *)(v62 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v59, (caulk::concurrent::message *)v62);
              goto LABEL_45;
            case 2:
              AMCP::Log::Scope_Registry::get(v33);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v198, "com.apple.coreaudio", "AMCP");
              double v55 = (caulk::concurrent::messenger *)*((void *)v198[0].__begin_ + 1);
              long long v56 = pthread_self();
              mach_port_t v57 = pthread_mach_thread_np(v56);
              uint64_t v58 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
              *(_DWORD *)(v58 + 16) = 0;
              *(unsigned char *)(v58 + 20) = 2;
              *(_DWORD *)(v58 + 24) = v57;
              *(void *)(v58 + 32) = "Conductor.cpp";
              *(_DWORD *)(v58 + 40) = 240;
              *(_DWORD *)(v58 + 44) = v178;
              *(_DWORD *)(v58 + 48) = v173;
              *(void *)uint64_t v58 = &unk_1F1488EA0;
              *(void *)(v58 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v55, (caulk::concurrent::message *)v58);
              goto LABEL_45;
            case 1:
              AMCP::Log::Scope_Registry::get(v33);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v198, "com.apple.coreaudio", "AMCP");
              long long v35 = (caulk::concurrent::messenger *)*((void *)v198[0].__begin_ + 1);
              long long v36 = pthread_self();
              mach_port_t v37 = pthread_mach_thread_np(v36);
              uint64_t v38 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
              *(_DWORD *)(v38 + 16) = 0;
              *(unsigned char *)(v38 + 20) = 0;
              *(_DWORD *)(v38 + 24) = v37;
              *(void *)(v38 + 32) = "Conductor.cpp";
              *(_DWORD *)(v38 + 40) = 240;
              *(_DWORD *)(v38 + 44) = v178;
              *(_DWORD *)(v38 + 48) = v173;
              *(void *)uint64_t v38 = &unk_1F1488E48;
              *(void *)(v38 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v35, (caulk::concurrent::message *)v38);
LABEL_45:
              if (v198[0].__end_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v198[0].__end_);
              }
              break;
          }
          if (queue[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)queue[1]);
          }
LABEL_56:
          uint64_t v211 = 0;
          uint64_t v209 = 0;
          uint64_t v210 = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v209, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
          int v71 = -1;
          goto LABEL_143;
        }
        strcpy((char *)queue, "slcbbolg");
        BYTE1(queue[1]) = 0;
        WORD1(queue[1]) = 0;
        uint64_t v26 = (AMCP::Log::Scope_Registry *)AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>((AMCP::Core::Core *)p_end_cap, (const AMCP::Address *)queue, &AMCP::k_class_id_unknown);
        if (!v26)
        {
          AMCP::Log::Scope_Registry::get(v26);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)queue, "com.apple.coreaudio", "AMCP");
          int v40 = (int)queue[0][2].isa;
          if (v40 == 3)
          {
            AMCP::Log::Scope_Registry::get(v39);
            AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v198, "com.apple.coreaudio", "AMCP");
            unint64_t v67 = (caulk::concurrent::messenger *)*((void *)v198[0].__begin_ + 1);
            BOOL v68 = pthread_self();
            mach_port_t v69 = pthread_mach_thread_np(v68);
            uint64_t v70 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
            *(_DWORD *)(v70 + 16) = 0;
            *(unsigned char *)(v70 + 20) = 1;
            *(_DWORD *)(v70 + 24) = v69;
            *(void *)(v70 + 32) = "Conductor.cpp";
            *(_DWORD *)(v70 + 40) = 246;
            *(_DWORD *)(v70 + 44) = v178;
            *(_DWORD *)(v70 + 48) = v173;
            *(void *)uint64_t v70 = &unk_1F1489000;
            *(void *)(v70 + 8) = 0;
            caulk::concurrent::messenger::enqueue(v67, (caulk::concurrent::message *)v70);
            goto LABEL_52;
          }
          if (v40 != 2)
          {
            if (v40 == 1)
            {
              AMCP::Log::Scope_Registry::get(v39);
              AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v198, "com.apple.coreaudio", "AMCP");
              uint64_t v41 = (caulk::concurrent::messenger *)*((void *)v198[0].__begin_ + 1);
              dispatch_queue_t v42 = pthread_self();
              mach_port_t v43 = pthread_mach_thread_np(v42);
              uint64_t v44 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
              *(_DWORD *)(v44 + 16) = 0;
              *(unsigned char *)(v44 + 20) = 0;
              *(_DWORD *)(v44 + 24) = v43;
              *(void *)(v44 + 32) = "Conductor.cpp";
              *(_DWORD *)(v44 + 40) = 246;
              *(_DWORD *)(v44 + 44) = v178;
              *(_DWORD *)(v44 + 48) = v173;
              *(void *)uint64_t v44 = &unk_1F1488F50;
              *(void *)(v44 + 8) = 0;
              caulk::concurrent::messenger::enqueue(v41, (caulk::concurrent::message *)v44);
LABEL_52:
              if (v198[0].__end_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v198[0].__end_);
              }
            }
            if (queue[1]) {
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)queue[1]);
            }
            goto LABEL_56;
          }
          AMCP::Log::Scope_Registry::get(v39);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)v198, "com.apple.coreaudio", "AMCP");
          uint64_t v63 = (caulk::concurrent::messenger *)*((void *)v198[0].__begin_ + 1);
          uint64_t v64 = pthread_self();
          mach_port_t v65 = pthread_mach_thread_np(v64);
          uint64_t v66 = (*(uint64_t (**)(void, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 16))(*MEMORY[0x1E4FB7E90], 56, 8);
          *(_DWORD *)(v66 + 16) = 0;
          *(unsigned char *)(v66 + 20) = 2;
          *(_DWORD *)(v66 + 24) = v65;
          *(void *)(v66 + 32) = "Conductor.cpp";
          *(_DWORD *)(v66 + 40) = 246;
          *(_DWORD *)(v66 + 44) = v178;
          *(_DWORD *)(v66 + 48) = v173;
          *(void *)uint64_t v66 = &unk_1F1488FA8;
          *(void *)(v66 + 8) = 0;
          caulk::concurrent::messenger::enqueue(v63, (caulk::concurrent::message *)v66);
          goto LABEL_52;
        }
        unsigned int v27 = v26;
        strcpy((char *)queue, "rnwobolg");
        BYTE1(queue[1]) = 0;
        WORD1(queue[1]) = 0;
        unsigned int v28 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v25, (const AMCP::Address *)queue, &AMCP::k_object_id_unknown);
        uint64_t v29 = *(std::__shared_mutex_base **)(*(void *)(v177 + 16) + 16);
        queue[0] = (dispatch_queue_t)&unk_1F1489058;
        dispatch_queue_t queue[3] = (dispatch_queue_t)queue;
        int first_object_id_if = AMCP::Core::Broker::fetch_first_object_id_if (v29, (uint64_t)queue);
        std::__function::__value_func<BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__value_func[abi:ne180100](queue);
        if (AMCP::is_base_of((AMCP *)0x61706C67, v27))
        {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
          {
            uint64_t v46 = (void *)__p.__r_.__value_.__r.__words[0];
            uint64_t v47 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
            unint64_t v48 = v47 + 1;
            if ((unint64_t)(v47 + 1) >> 62) {
              goto LABEL_255;
            }
            int64_t v49 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v48) {
              unint64_t v48 = v49 >> 1;
            }
            BOOL v50 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v50) {
              unint64_t v51 = v48;
            }
            if (v51)
            {
              unint64_t v51 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v51);
              std::string::size_type size = __p.__r_.__value_.__l.__size_;
              uint64_t v46 = (void *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v52 = 0;
            }
            long long v78 = (unsigned int *)(v51 + 4 * v47);
            *long long v78 = v178;
            uint64_t v32 = v78 + 1;
            while ((void *)size != v46)
            {
              unsigned int v79 = *(_DWORD *)(size - 4);
              size -= 4;
              *--long long v78 = v79;
            }
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
            __p.__r_.__value_.__r.__words[2] = v51 + 4 * v52;
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            *(_DWORD *)__p.__r_.__value_.__l.__size_ = v178;
            uint64_t v32 = (_DWORD *)(size + 4);
          }
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
          int v71 = 6;
          if (!first_object_id_if || first_object_id_if == v178) {
            goto LABEL_142;
          }
          if ((unint64_t)v32 >= __p.__r_.__value_.__r.__words[2])
          {
            uint64_t v80 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
            uint64_t v81 = (uint64_t)((uint64_t)v32 - __p.__r_.__value_.__r.__words[0]) >> 2;
            unint64_t v82 = v81 + 1;
            if ((unint64_t)(v81 + 1) >> 62) {
              goto LABEL_255;
            }
            int64_t v83 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
            if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v82) {
              unint64_t v82 = v83 >> 1;
            }
            BOOL v50 = (unint64_t)v83 >= 0x7FFFFFFFFFFFFFFCLL;
            unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
            if (!v50) {
              unint64_t v84 = v82;
            }
            if (v84)
            {
              unint64_t v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v84);
              uint64_t v32 = (_DWORD *)__p.__r_.__value_.__l.__size_;
              uint64_t v80 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
            }
            else
            {
              uint64_t v85 = 0;
            }
            dispatch_queue_t v104 = (_DWORD *)(v84 + 4 * v81);
            _DWORD *v104 = first_object_id_if;
            std::string::size_type v100 = (std::string::size_type)(v104 + 1);
            while (v32 != v80)
            {
              int v105 = *--v32;
              *--dispatch_queue_t v104 = v105;
            }
            goto LABEL_139;
          }
LABEL_105:
          _DWORD *v32 = first_object_id_if;
          std::string::size_type v100 = (std::string::size_type)(v32 + 1);
LABEL_141:
          __p.__r_.__value_.__l.__size_ = v100;
          int v71 = 6;
          uint64_t v32 = (_DWORD *)v100;
          goto LABEL_142;
        }
        if (!AMCP::is_base_of((AMCP *)0x61646576, v27))
        {
          std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
          if (v178 == 1 && (v8 & 4) != 0)
          {
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              uint64_t v92 = (void *)__p.__r_.__value_.__r.__words[0];
              uint64_t v93 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
              unint64_t v94 = v93 + 1;
              if ((unint64_t)(v93 + 1) >> 62) {
                goto LABEL_255;
              }
              int64_t v95 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v94) {
                unint64_t v94 = v95 >> 1;
              }
              BOOL v50 = (unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v50) {
                unint64_t v96 = v94;
              }
              if (v96)
              {
                unint64_t v96 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v96);
                std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
                uint64_t v92 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                uint64_t v97 = 0;
              }
              uint64_t v108 = (_DWORD *)(v96 + 4 * v93);
              *uint64_t v108 = 1;
              std::string::size_type v54 = (std::string::size_type)(v108 + 1);
              while ((void *)v53 != v92)
              {
                int v109 = *(_DWORD *)(v53 - 4);
                v53 -= 4;
                *--uint64_t v108 = v109;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v108;
              __p.__r_.__value_.__l.__size_ = v54;
              __p.__r_.__value_.__r.__words[2] = v96 + 4 * v97;
              if (v92) {
                operator delete(v92);
              }
            }
            else
            {
              *(_DWORD *)__p.__r_.__value_.__l.__size_ = 1;
              std::string::size_type v54 = v53 + 4;
            }
            __p.__r_.__value_.__l.__size_ = v54;
            memset(v198, 0, 24);
            uint64_t v206 = 0x676C6F6263747823;
            LODWORD(v207) = 0;
            AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(queue, v25, (AMCP::Address *)&v206, (uint64_t)v198);
            std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)&__p, (unsigned int *)__p.__r_.__value_.__l.__size_, (char *)queue[0], (char *)queue[1], ((char *)queue[1] - (char *)queue[0]) >> 2);
            uint64_t v207 = 0;
            uint64_t v206 = 0;
            uint64_t v208 = 0;
            uint64_t v186 = 0x676C6F626E6F6423;
            LODWORD(v187) = 0;
            AMCP::Core::Core::get_typed_property_value<std::vector<unsigned int>,std::enable_if<true,void>>(v198, v25, (AMCP::Address *)&v186, (uint64_t)&v206);
            std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>((std::vector<unsigned int> *)&__p, (unsigned int *)__p.__r_.__value_.__l.__size_, (char *)v198[0].__begin_, (char *)v198[0].__end_, v198[0].__end_ - v198[0].__begin_);
            if (v198[0].__begin_)
            {
              v198[0].__end_ = v198[0].__begin_;
              operator delete(v198[0].__begin_);
            }
            if (queue[0])
            {
              queue[1] = queue[0];
              operator delete(queue[0]);
            }
            int v71 = 5;
            uint64_t v32 = (_DWORD *)__p.__r_.__value_.__l.__size_;
          }
          else
          {
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              mach_port_t v86 = (void *)__p.__r_.__value_.__r.__words[0];
              uint64_t v87 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
              unint64_t v88 = v87 + 1;
              if ((unint64_t)(v87 + 1) >> 62) {
                goto LABEL_255;
              }
              int64_t v89 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
              if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v88) {
                unint64_t v88 = v89 >> 1;
              }
              BOOL v50 = (unint64_t)v89 >= 0x7FFFFFFFFFFFFFFCLL;
              unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
              if (!v50) {
                unint64_t v90 = v88;
              }
              if (v90)
              {
                unint64_t v90 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v90);
                std::string::size_type v53 = __p.__r_.__value_.__l.__size_;
                mach_port_t v86 = (void *)__p.__r_.__value_.__r.__words[0];
              }
              else
              {
                uint64_t v91 = 0;
              }
              unint64_t v106 = (unsigned int *)(v90 + 4 * v87);
              *unint64_t v106 = v178;
              uint64_t v32 = v106 + 1;
              while ((void *)v53 != v86)
              {
                unsigned int v107 = *(_DWORD *)(v53 - 4);
                v53 -= 4;
                *--unint64_t v106 = v107;
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v106;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
              __p.__r_.__value_.__r.__words[2] = v90 + 4 * v91;
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(_DWORD *)__p.__r_.__value_.__l.__size_ = v178;
              uint64_t v32 = (_DWORD *)(v53 + 4);
            }
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
            int v71 = 5;
          }
          goto LABEL_142;
        }
        std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
        {
          uint64_t v72 = (void *)__p.__r_.__value_.__r.__words[0];
          uint64_t v73 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v74 = v73 + 1;
          if ((unint64_t)(v73 + 1) >> 62) {
            goto LABEL_255;
          }
          int64_t v75 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v74) {
            unint64_t v74 = v75 >> 1;
          }
          BOOL v50 = (unint64_t)v75 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v76 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v50) {
            unint64_t v76 = v74;
          }
          if (v76)
          {
            unint64_t v76 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v76);
            std::string::size_type v45 = __p.__r_.__value_.__l.__size_;
            uint64_t v72 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v77 = 0;
          }
          mach_port_t v98 = (unsigned int *)(v76 + 4 * v73);
          unsigned int *v98 = v28;
          uint64_t v32 = v98 + 1;
          while ((void *)v45 != v72)
          {
            unsigned int v99 = *(_DWORD *)(v45 - 4);
            v45 -= 4;
            *--mach_port_t v98 = v99;
          }
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v98;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
          __p.__r_.__value_.__r.__words[2] = v76 + 4 * v77;
          if (v72) {
            operator delete(v72);
          }
        }
        else
        {
          *(_DWORD *)__p.__r_.__value_.__l.__size_ = v28;
          uint64_t v32 = (_DWORD *)(v45 + 4);
        }
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v32;
        int v71 = 6;
        if (first_object_id_if && first_object_id_if != v28)
        {
          if ((unint64_t)v32 < __p.__r_.__value_.__r.__words[2]) {
            goto LABEL_105;
          }
          uint64_t v80 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
          uint64_t v101 = (uint64_t)((uint64_t)v32 - __p.__r_.__value_.__r.__words[0]) >> 2;
          unint64_t v102 = v101 + 1;
          if ((unint64_t)(v101 + 1) >> 62) {
LABEL_255:
          }
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          int64_t v103 = __p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0];
          if ((uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 1 > v102) {
            unint64_t v102 = v103 >> 1;
          }
          BOOL v50 = (unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL;
          unint64_t v84 = 0x3FFFFFFFFFFFFFFFLL;
          if (!v50) {
            unint64_t v84 = v102;
          }
          if (v84)
          {
            unint64_t v84 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(v84);
            uint64_t v32 = (_DWORD *)__p.__r_.__value_.__l.__size_;
            uint64_t v80 = (_DWORD *)__p.__r_.__value_.__r.__words[0];
          }
          else
          {
            uint64_t v85 = 0;
          }
          dispatch_queue_t v104 = (_DWORD *)(v84 + 4 * v101);
          _DWORD *v104 = first_object_id_if;
          std::string::size_type v100 = (std::string::size_type)(v104 + 1);
          while (v32 != v80)
          {
            int v110 = *--v32;
            *--dispatch_queue_t v104 = v110;
          }
LABEL_139:
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v104;
          __p.__r_.__value_.__l.__size_ = v100;
          __p.__r_.__value_.__r.__words[2] = v84 + 4 * v85;
          if (v80) {
            operator delete(v80);
          }
          goto LABEL_141;
        }
LABEL_142:
        uint64_t v210 = 0;
        uint64_t v209 = 0;
        uint64_t v211 = 0;
        std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v209, __p.__r_.__value_.__l.__data_, (uint64_t)v32, (uint64_t)((uint64_t)v32 - __p.__r_.__value_.__r.__words[0]) >> 2);
LABEL_143:
        int v212 = v71;
        if (v190) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v190);
        }
        if (__p.__r_.__value_.__r.__words[0])
        {
          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v71 != -1)
        {
          AMCP::Core::Broker::make_snapshot((uint64_t)&v206, *(std::__shared_mutex_base **)(*(void *)(v177 + 16) + 16), (unsigned int **)&v209, v71);
          long long v215 = 0u;
          long long v216 = 0u;
          long long v214 = 0u;
          memset(queue, 0, sizeof(queue));
          int v217 = 1065353216;
          char v175 = v8 & 1;
          AMCP::Core::Conductor::call_external_begin_config_change_observers(v177, 1, v178, v8 & 1, (uint64_t)queue);
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v215);
          if (queue[3])
          {
            *(dispatch_queue_t *)&long long v214 = queue[3];
            operator delete(queue[3]);
          }
          if (queue[0])
          {
            queue[1] = queue[0];
            operator delete(queue[0]);
          }
          long long v215 = 0u;
          long long v216 = 0u;
          long long v214 = 0u;
          memset(queue, 0, sizeof(queue));
          int v217 = 1065353216;
          LODWORD(__p.__r_.__value_.__l.__data_) = v178;
          LOBYTE(v198[0].__begin_) = v8 & 1;
          AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v177 + 1136, (unsigned int *)&__p, &__p, (char *)v198, (uint64_t)queue);
          std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v215);
          if (queue[3])
          {
            *(dispatch_queue_t *)&long long v214 = queue[3];
            operator delete(queue[3]);
          }
          if (queue[0])
          {
            queue[1] = queue[0];
            operator delete(queue[0]);
          }
          uint64_t v203 = 0;
          uint64_t v204 = 0;
          uint64_t v205 = 0;
          v202[0] = 0;
          v202[1] = 0;
          uint64_t v111 = (void *)(v177 + 2648);
          char v201 = v202;
          AMCP::Core::Conductor::Conductor_Graph_Manager::get_device_list((AMCP::Core::Conductor::Conductor_Graph_Manager *)(v177 + 2648), &v199);
          memset(v198, 0, sizeof(v198));
          v197[0] = 0;
          v197[1] = 0;
          int v196 = v197;
          __lk.__m_ = *(std::unique_lock<std::mutex>::mutex_type **)(i + 32);
          __lk.__owns_ = 1;
          std::mutex::lock(__lk.__m_);
          uint64_t v112 = *(void *)(i + 32);
          std::string v114 = *(unsigned int ***)(v112 + 168);
          uint64_t v113 = *(unsigned int ***)(v112 + 176);
          if (v114 != v113)
          {
            uint64_t v115 = 0;
            uint64_t v116 = *(unsigned int ***)(v112 + 168);
            do
            {
              uint64_t v117 = *v116;
              v116 += 2;
              v115 += (int)v117[82] + ((uint64_t)(*((void *)v117 + 43) - *((void *)v117 + 42)) >> 4);
            }
            while (v116 != v113);
            if (v115)
            {
              do
              {
                char v174 = v113;
                if (v114 != v113)
                {
                  do
                  {
                    uint64_t v118 = *((void *)*v114 + 42);
                    if (v118 != *((void *)*v114 + 43))
                    {
                      unsigned int v119 = **v114;
                      if (v119 != v178)
                      {
                        long long v215 = 0u;
                        long long v216 = 0u;
                        long long v214 = 0u;
                        memset(queue, 0, sizeof(queue));
                        int v217 = 1065353216;
                        LODWORD(p_end_cap) = v119;
                        LOBYTE(v186) = v8 & 1;
                        AMCP::Core::make_external_diff((uint64_t)&__p, (uint64_t)queue);
                        AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>((std::__shared_mutex_base *)(v177 + 2216), (unsigned int *)&p_end_cap, (int *)&p_end_cap, (char *)&v186);
                        boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v185);
                        if (v183)
                        {
                          uint64_t v184 = (char *)v183;
                          operator delete(v183);
                        }
                        if (__p.__r_.__value_.__r.__words[0])
                        {
                          __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
                          operator delete(__p.__r_.__value_.__l.__data_);
                        }
                        std::__hash_table<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>>::~__hash_table((uint64_t)&v215);
                        if (queue[3])
                        {
                          *(dispatch_queue_t *)&long long v214 = queue[3];
                          operator delete(queue[3]);
                        }
                        if (queue[0])
                        {
                          queue[1] = queue[0];
                          operator delete(queue[0]);
                        }
                      }
                      uint64_t v186 = 0;
                      char v187 = 0;
                      uint64_t v188 = 0;
                      std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>((uint64_t *)&v196, **v114, **v114);
                      AMCP::IO_Core::Graph_Manager::prepare_graph_for_config_change(&__p, v111, **(_DWORD **)v118, **v114, &v186, &v201);
                      std::vector<std::shared_ptr<AMCP::Graph::Timebase>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>,std::__wrap_iter<std::shared_ptr<AMCP::Graph::Timebase>*>>(&v203, v204, (void *)v186, v187, (uint64_t)&v187[-v186] >> 4);
                      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(v198, v198[0].__end_, __p.__r_.__value_.__l.__data_, (char *)__p.__r_.__value_.__l.__size_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 2);
                      uint64_t v120 = (char *)v183;
                      if (v184 - (unsigned char *)v183 >= 1)
                      {
                        int64_t v121 = (v184 - (unsigned char *)v183) / 24;
                        std::vector<unsigned int>::pointer end = (std::string *)v198[1].__end_;
                        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL
                                     * (((char *)v198[1].__end_cap_.__value_ - (char *)v198[1].__end_) >> 3)) >= v121)
                        {
                          if (v121 <= 0)
                          {
                            std::string::size_type v127 = (char *)v183 + 24 * v121;
                            std::vector<unsigned int>::pointer v128 = v198[1].__end_;
                            unint64_t v129 = &v198[1].__end_[-6 * v121];
                            std::vector<unsigned int>::pointer v130 = v198[1].__end_;
                            while (v129 < (unsigned int *)end)
                            {
                              long long v131 = *(_OWORD *)v129;
                              *((void *)v130 + 2) = *((void *)v129 + 2);
                              *(_OWORD *)std::vector<unsigned int>::pointer v130 = v131;
                              v130 += 6;
                              *((void *)v129 + 1) = 0;
                              *((void *)v129 + 2) = 0;
                              *(void *)unint64_t v129 = 0;
                              v129 += 6;
                            }
                            uint64_t v132 = (unsigned int *)&end[v121];
                            v198[1].__end_ = v130;
                            if (v128 != v132)
                            {
                              std::vector<unsigned int>::pointer v133 = v128 - 6;
                              uint64_t v134 = 8 * (((char *)v128 - (char *)v132) >> 3);
                              do
                              {
                                if (*((char *)v133 + 23) < 0) {
                                  operator delete(*(void **)v133);
                                }
                                unint64_t v135 = (long long *)((char *)&end[-1] + v134);
                                long long v136 = *v135;
                                *((void *)v133 + 2) = *(void *)((char *)&end->__r_.__value_.__l + v134 - 8);
                                *(_OWORD *)std::vector<unsigned int>::pointer v133 = v136;
                                v133 -= 6;
                                end->__r_.__value_.__s.__data_[v134 - 1] = 0;
                                *(unsigned char *)unint64_t v135 = 0;
                                v134 -= 24;
                              }
                              while (v134);
                            }
                            for (uint64_t i = v176; v120 != v127; ++end)
                            {
                              std::string::operator=(end, (const std::string *)v120);
                              v120 += 24;
                            }
                          }
                          else
                          {
                            v198[1].__end_ = (std::vector<unsigned int>::pointer)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v198[1].__end_cap_, (long long *)v183, (long long *)v184, (std::string *)v198[1].__end_);
                          }
                        }
                        else
                        {
                          unint64_t v123 = 0xAAAAAAAAAAAAAAABLL * (((char *)v198[1].__end_ - (char *)v198[1].__begin_) >> 3);
                          unint64_t v124 = v123 + v121;
                          if (v123 + v121 > 0xAAAAAAAAAAAAAAALL) {
                            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
                          }
                          if (0x5555555555555556
                             * (((char *)v198[1].__end_cap_.__value_ - (char *)v198[1].__begin_) >> 3) > v124)
                            unint64_t v124 = 0x5555555555555556
                                 * (((char *)v198[1].__end_cap_.__value_ - (char *)v198[1].__begin_) >> 3);
                          if (0xAAAAAAAAAAAAAAABLL
                             * (((char *)v198[1].__end_cap_.__value_ - (char *)v198[1].__begin_) >> 3) >= 0x555555555555555)
                            unint64_t v125 = 0xAAAAAAAAAAAAAAALL;
                          else {
                            unint64_t v125 = v124;
                          }
                          *(void *)&long long v214 = &v198[1].__end_cap_;
                          if (v125) {
                            unint64_t v125 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v125);
                          }
                          else {
                            uint64_t v126 = 0;
                          }
                          long long v137 = (v125 + 24 * v123);
                          queue[0] = (dispatch_queue_t)v125;
                          queue[1] = v137;
                          queue[2] = v137;
                          dispatch_queue_t queue[3] = (dispatch_queue_t)(v125 + 24 * v126);
                          uint64_t v138 = 3 * v121;
                          int v139 = &v137[3 * v121];
                          uint64_t v140 = 8 * v138;
                          do
                          {
                            if (v120[23] < 0)
                            {
                              std::string::__init_copy_ctor_external((std::string *)v137, *(const std::string::value_type **)v120, *((void *)v120 + 1));
                            }
                            else
                            {
                              long long v141 = *(_OWORD *)v120;
                              v137[2].int isa = *(Class *)(v120 + 16);
                              *(_OWORD *)&v137->int isa = v141;
                            }
                            v137 += 3;
                            v120 += 24;
                            v140 -= 24;
                          }
                          while (v140);
                          queue[2] = v139;
                          queue[1] = (dispatch_queue_t)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&v198[1].__end_cap_, (uint64_t)end, (uint64_t)end, (uint64_t)v198[1].__begin_, (uint64_t)v198[1].__begin_, (uint64_t)queue[1], (uint64_t)queue[1]);
                          std::vector<unsigned int>::pointer v142 = v198[1].__end_;
                          dispatch_queue_t v143 = queue[2];
                          __s = (__int32 *)queue[2];
                          dispatch_queue_t v180 = queue[2];
                          p_end_cap = &v198[1].__end_cap_;
                          char v190 = &v180;
                          p_s = &__s;
                          if (end == (std::string *)v198[1].__end_)
                          {
                            uint64_t i = v176;
                          }
                          else
                          {
                            uint64_t i = v176;
                            do
                            {
                              long long v144 = *(_OWORD *)&end->__r_.__value_.__l.__data_;
                              v143[2].int isa = (Class)end->__r_.__value_.__r.__words[2];
                              *(_OWORD *)&v143->int isa = v144;
                              v143 += 3;
                              end->__r_.__value_.__l.__size_ = 0;
                              end->__r_.__value_.__r.__words[2] = 0;
                              end->__r_.__value_.__r.__words[0] = 0;
                              ++end;
                            }
                            while (end != (std::string *)v142);
                            __s = (__int32 *)v143;
                          }
                          char v192 = 1;
                          std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&p_end_cap);
                          long long v145 = *(_OWORD *)&v198[1].__begin_;
                          v198[1].__begin_ = (std::vector<unsigned int>::pointer)queue[1];
                          v198[1].__end_ = (std::vector<unsigned int>::pointer)v143;
                          *(_OWORD *)&queue[1] = v145;
                          value = v198[1].__end_cap_.__value_;
                          v198[1].__end_cap_.__value_ = (unsigned int *)queue[3];
                          dispatch_queue_t queue[3] = (dispatch_queue_t)value;
                          queue[0] = (dispatch_queue_t)v145;
                          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)queue);
                        }
                      }
                      ++(*v114)[82];
                      std::shared_ptr<AMCP::IO_Core::IOContext_Core>::shared_ptr[abi:ne180100]<AMCP::IO_Core::IOContext_Core,void>(queue, *(void *)v177, *(std::__shared_weak_count **)(v177 + 8));
                      uint64_t v147 = *(void *)(i + 40);
                      queue[2] = *(dispatch_queue_t *)(i + 32);
                      dispatch_queue_t queue[3] = (dispatch_queue_t)v147;
                      if (v147) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v147 + 8), 1uLL, memory_order_relaxed);
                      }
                      *(void *)&long long v214 = *v114;
                      uint64_t v148 = (atomic_ullong *)v114[1];
                      *((void *)&v214 + 1) = v148;
                      if (v148) {
                        atomic_fetch_add_explicit(v148 + 1, 1uLL, memory_order_relaxed);
                      }
                      *(void *)&long long v215 = *(void *)v118;
                      uint64_t v149 = *(void *)(v118 + 8);
                      *((void *)&v215 + 1) = v149;
                      if (v149) {
                        atomic_fetch_add_explicit((atomic_ullong *volatile)(v149 + 8), 1uLL, memory_order_relaxed);
                      }
                      operator new();
                    }
                    std::vector<std::shared_ptr<DSP_Host_Types::AudioChannelConfiguration::ChannelDescription>>::__clear[abi:ne180100]((uint64_t *)*v114 + 42);
                    v114 += 2;
                  }
                  while (v114 != v174);
                  uint64_t v112 = *(void *)(i + 32);
                }
                std::condition_variable::wait((std::condition_variable *)(v112 + 64), &__lk);
                uint64_t v112 = *(void *)(i + 32);
                std::string v114 = *(unsigned int ***)(v112 + 168);
                uint64_t v113 = *(unsigned int ***)(v112 + 176);
                if (v114 == v113) {
                  break;
                }
                uint64_t v150 = 0;
                std::locale v151 = *(unsigned int ***)(v112 + 168);
                do
                {
                  uint64_t v152 = *v151;
                  v151 += 2;
                  v150 += (int)v152[82] + ((uint64_t)(*((void *)v152 + 43) - *((void *)v152 + 42)) >> 4);
                }
                while (v151 != v113);
              }
              while (v150);
            }
          }
          std::vector<unsigned int>::pointer v153 = v198[0].__end_;
          begiuint64_t n = (__int32 *)v198[0].__begin_;
          int v194 = 0;
          uint64_t v195 = 0;
          __s = 0;
          std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__s, v199, v200, (v200 - (uint64_t)v199) >> 2);
          unsigned int v155 = __s;
          if (begin != (__int32 *)v153)
          {
            uint64_t v156 = v153;
            int v157 = v194;
            size_t v158 = v194 - __s;
            while (1)
            {
              long long v159 = wmemchr(v155, *begin, v158);
              uint64_t v160 = v159 ? v159 : v157;
              if (v160 == v157) {
                break;
              }
              if (++begin == (__int32 *)v153) {
                goto LABEL_238;
              }
            }
            if (begin == (__int32 *)v153)
            {
LABEL_238:
              if (v155)
              {
                int v194 = v155;
                operator delete(v155);
              }
              if (v156 != v198[0].__end_) {
                v198[0].__end_ = v156;
              }
              if (__lk.__owns_) {
                std::mutex::unlock(__lk.__m_);
              }
              kdebug_trace();
              char v164 = v212;
              AMCP::Core::Broker::make_snapshot((uint64_t)&p_end_cap, *(std::__shared_mutex_base **)(*(void *)(v177 + 16) + 16), (unsigned int **)&v209, v212);
              AMCP::Core::compute_system_differences(queue, &v206, (uint64_t *)&p_end_cap);
              LODWORD(__p.__r_.__value_.__l.__data_) = v178;
              LOBYTE(v186) = v175;
              AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(v177 + 1352, (unsigned int *)&__p, &__p, (char *)&v186, (uint64_t)queue);
              AMCP::Core::Broker::make_snapshot((uint64_t)&v186, *(std::__shared_mutex_base **)(*(void *)(v177 + 16) + 16), (unsigned int **)&v209, v164);
              AMCP::Core::compute_system_differences(&__p, &v206, &v186);
              std::set<unsigned int>::set[abi:ne180100]((uint64_t *)&__lk, (uint64_t)&v196);
              AMCP::IO_Core::Graph_Manager::update_graph_after_config_change(v111, v178, &__lk, 1, (__int32 **)v198);
            }
            int64x2_t v161 = begin + 1;
            if (begin + 1 != (__int32 *)v153)
            {
              uint64_t v156 = (unsigned int *)begin;
              do
              {
                long long v162 = wmemchr(v155, *v161, v158);
                if (v162) {
                  uint64_t v163 = v162;
                }
                else {
                  uint64_t v163 = v157;
                }
                if (v163 != v157) {
                  *v156++ = *v161;
                }
                ++v161;
              }
              while (v161 != (__int32 *)v153);
              goto LABEL_238;
            }
          }
          uint64_t v156 = (unsigned int *)begin;
          goto LABEL_238;
        }
        if (v209) {
          operator delete(v209);
        }
        uint64_t v2 = *(std::mutex **)(i + 32);
        std::mutex::lock(v2);
        uint64_t v165 = *(void *)(i + 32);
        long long v166 = *(uint64_t **)(v165 + 168);
        long long v167 = *(uint64_t **)(v165 + 176);
        if (v166 == v167) {
          goto LABEL_252;
        }
        uint64_t v168 = 0;
        do
        {
          uint64_t v169 = *v166;
          v166 += 2;
          v168 += *(int *)(v169 + 328) + ((uint64_t)(*(void *)(v169 + 344) - *(void *)(v169 + 336)) >> 4);
        }
        while (v166 != v167);
        std::mutex::unlock(v2);
      }
      while (v168);
    }
  }
  long long v170 = *(std::mutex **)(i + 32);
  std::mutex::lock(v170);
  uint64_t v171 = *(void *)(i + 32);
  *(unsigned char *)(v171 + 164) = 0;
  std::condition_variable::notify_all((std::condition_variable *)(v171 + 112));
  std::mutex::unlock(v170);
  return std::unique_ptr<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::enqueue_config_change(unsigned int,unsigned int,unsigned int,std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](&v179);
}

void sub_1BAF8B308(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,std::__shared_weak_count *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p)
{
  if (a2)
  {
    if (__p) {
      operator delete(__p);
    }
    long long v60 = (void *)STACK[0x250];
    if (STACK[0x250])
    {
      STACK[0x258] = (unint64_t)v60;
      operator delete(v60);
    }
    if (a49) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a49);
    }
    if (a32) {
      operator delete(a32);
    }
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void AMCP::Core::Conductor::call_external_begin_config_change_observers(uint64_t a1, int a2, int a3, char a4, uint64_t a5)
{
  v16[34] = *MEMORY[0x1E4F143B8];
  int v12 = a3;
  char v11 = a4;
  uint64_t v6 = (std::__shared_mutex_base *)(a1 + 1568);
  if (a2 == 1)
  {
    AMCP::Core::make_external_diff((uint64_t)v13, a5);
    AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(v6, (unsigned int *)&v12, &v12, &v11);
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v16);
    if (__p)
    {
      uint64_t v15 = __p;
      operator delete(__p);
    }
    if (v13[0])
    {
      v13[1] = v13[0];
      operator delete(v13[0]);
    }
  }
  else
  {
    AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13, *(dispatch_object_t *)(a1 + 352));
    AMCP::Core::make_external_diff((uint64_t)v7, a5);
    AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(v6, (uint64_t)v13, (unsigned int *)&v12, &v12, &v11, (uint64_t)v7);
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v10);
    if (v8)
    {
      uint64_t v9 = v8;
      operator delete(v8);
    }
    if (v7[0])
    {
      v7[1] = v7[0];
      operator delete(v7[0]);
    }
    AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13);
  }
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&>(uint64_t a1, unsigned int *a2, _DWORD *a3, char *a4, uint64_t a5)
{
  CFStringRef v20 = (void **)a1;
  char v21 = 1;
  std::__shared_mutex_base::lock_shared((std::__shared_mutex_base *)a1);
  if (*(unsigned char *)(a1 + 168))
  {
    long long v18 = 0uLL;
    *(void *)&long long v19 = 0;
    unsigned int v10 = *a2;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), *a2))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>>(&v18, *(unint64_t **)(v11 + 8), *(unint64_t **)(v11 + 16));
      unsigned int v10 = *a2;
    }
    unsigned int v12 = *(_DWORD *)(a1 + 208);
    if (v10 != v12
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), v12))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>>(&v18, *(unint64_t **)(v13 + 8), *(unint64_t **)(v13 + 16));
    }
  }
  else
  {
    long long v18 = 0u;
    long long v19 = 0u;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v20);
  uint64_t v15 = *((void *)&v18 + 1);
  for (uint64_t i = v18; i != v15; i += 40)
  {
    char v16 = *a4;
    LODWORD(v20) = *a3;
    char v22 = v16;
    uint64_t v17 = *(void *)(i + 32);
    if (!v17) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void ***, char *, uint64_t))(*(void *)v17 + 48))(v17, &v20, &v22, a5);
  }
  CFStringRef v20 = (void **)&v18;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void *std::unique_ptr<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4,std::default_delete<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[7];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[5];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    unint64_t v5 = (std::__shared_weak_count *)v2[3];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v6 = (std::__shared_weak_count *)v2[1];
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    MEMORY[0x1C1859840](v2, 0x20C400FA965B2);
  }
  return a1;
}

void AMCP::Core::Conductor::call_external_end_config_change_observers(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v11 = a2;
  char v10 = a3;
  unint64_t v5 = (std::__shared_mutex_base *)(a1 + 2000);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12, *(dispatch_object_t *)(a1 + 352));
  AMCP::Core::make_external_diff((uint64_t)v6, a4);
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(v5, (uint64_t)v12, (unsigned int *)&v11, &v11, &v10, (uint64_t)v6);
  boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector(v9);
  if (__p)
  {
    int v8 = __p;
    operator delete(__p);
  }
  if (v6[0])
  {
    v6[1] = v6[0];
    operator delete(v6[0]);
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v12);
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      std::__hash_table<std::__hash_value_type<AMCP::Address,AMCP::Thing>,std::__unordered_map_hasher<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,true>,std::__unordered_map_equal<AMCP::Address,std::__hash_value_type<AMCP::Address,AMCP::Thing>,AMCP::Address::Is_Exact_Match,AMCP::Address::Hash,true>,std::allocator<std::__hash_value_type<AMCP::Address,AMCP::Thing>>>::~__hash_table((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_7,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8B99C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_7,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_6,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8BB30(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_6,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)int v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8BCC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_sync<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(std::__shared_mutex_base *this, unsigned int *a2, int *a3, char *a4)
{
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::gather_observers(v8, this, a2);
  uint64_t v6 = v8[0];
  uint64_t v7 = v8[1];
  while (v6 != v7)
  {
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(*(void *)(v6 + 32), *a3, *a4);
    v6 += 40;
  }
  uint64_t v9 = (void **)v8;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v9);
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(std::__shared_mutex_base *this, uint64_t a2, unsigned int *a3, int *a4, char *a5, uint64_t a6)
{
  AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::gather_observers(&v26, this, a3);
  if ((void)v26 != *((void *)&v26 + 1))
  {
    long long v13 = v26;
    long long v26 = 0uLL;
    uint64_t v14 = v27;
    uint64_t v27 = 0;
    int v15 = *a4;
    char v16 = *a5;
    uint64_t v12 = *(void *)(a6 + 8);
    int v17 = *(void **)a6;
    uint64_t v18 = v12;
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    uint64_t v9 = *(void **)(a6 + 24);
    uint64_t v19 = *(void *)(a6 + 16);
    std::string __p = v9;
    uint64_t v10 = *(void *)(a6 + 40);
    uint64_t v21 = *(void *)(a6 + 32);
    uint64_t v22 = v10;
    *(void *)(a6 + 16) = 0;
    *(void *)(a6 + 24) = 0;
    *(void *)(a6 + 32) = 0;
    *(void *)(a6 + 40) = 0;
    uint64_t v11 = *(void *)(a6 + 56);
    uint64_t v23 = *(void *)(a6 + 48);
    uint64_t v24 = v11;
    uint64_t v25 = *(void *)(a6 + 64);
    *(void *)(a6 + 48) = 0;
    *(void *)(a6 + 56) = 0;
    *(void *)(a6 + 64) = 0;
    operator new();
  }
  *(void *)&long long v13 = &v26;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
}

uint64_t AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::gather_observers(void *a1, std::__shared_mutex_base *this, unsigned int *a3)
{
  uint64_t v11 = this;
  char v12 = 1;
  std::__shared_mutex_base::lock_shared(this);
  if (LOBYTE(this[1].__mut_.__m_.__sig))
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    unsigned int v6 = *a3;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)this[1].__mut_.__m_.__opaque, *(_DWORD **)&this[1].__mut_.__m_.__opaque[8], *a3))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>>(a1, *(unint64_t **)(v7 + 8), *(unint64_t **)(v7 + 16));
      unsigned int v6 = *a3;
    }
    unsigned int v8 = *(_DWORD *)&this[1].__mut_.__m_.__opaque[32];
    if (v6 != v8
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)this[1].__mut_.__m_.__opaque, *(_DWORD **)&this[1].__mut_.__m_.__opaque[8], v8))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>>(a1, *(unint64_t **)(v9 + 8), *(unint64_t **)(v9 + 16));
    }
  }
  else
  {
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
  }
  return std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v11);
}

void std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unsigned int v6 = v4 - 40;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t applesauce::dispatch::v1::async<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>(dispatch_queue_s *,void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(void *)a1 != v3)
  {
    do
    {
      std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(*(void *)(v2 + 32), *(_DWORD *)(a1 + 32), *(unsigned char *)(a1 + 36));
      v2 += 40;
    }
    while (v2 != v3);
  }

  return std::default_delete<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>::operator()[abi:ne180100](a1);
}

void sub_1BAF8C130(_Unwind_Exception *a1)
{
  std::default_delete<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>::operator()[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator()(uint64_t a1, int a2, char a3)
{
  int v5 = a2;
  char v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, char *))(*(void *)a1 + 48))(a1, &v5, &v4);
}

uint64_t std::default_delete<void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>>>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &,BOOL &,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> &&)::{lambda(void)#1}>::operator()[abi:ne180100](uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    boost::container::vector<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>,boost::container::new_allocator<boost::container::dtl::pair<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>>>,void>::~vector((void *)(result + 88));
    uint64_t v2 = *(void **)(v1 + 64);
    if (v2)
    {
      *(void *)(v1 + 72) = v2;
      operator delete(v2);
    }
    uint64_t v3 = *(void **)(v1 + 40);
    if (v3)
    {
      *(void *)(v1 + 48) = v3;
      operator delete(v3);
    }
    char v4 = (void **)v1;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v4);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>> const*>>(void *result, unint64_t *a2, unint64_t *a3)
{
  if (a2 != a3)
  {
    char v4 = a2;
    int v5 = (void **)result;
    do
    {
      unint64_t v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*v5, v5[1], *v4))
      {
        *(void *)uint64_t v7 = v6;
        __n128 result = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=((void *)(v7 + 8), (uint64_t)(v4 + 1));
      }
      else
      {
        __n128 result = std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::insert(v5, (char *)v7, v4);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

BOOL AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(void *a1, void *a2, unint64_t a3)
{
  if (a2 == a1)
  {
    uint64_t v3 = a2;
  }
  else
  {
    uint64_t v3 = a1;
    unint64_t v4 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
    do
    {
      unint64_t v5 = v4 >> 1;
      unint64_t v6 = &v3[5 * (v4 >> 1)];
      unint64_t v8 = *v6;
      uint64_t v7 = v6 + 5;
      v4 += ~(v4 >> 1);
      if (v8 < a3) {
        uint64_t v3 = v7;
      }
      else {
        unint64_t v4 = v5;
      }
    }
    while (v4);
  }
  return v3 != a2 && *v3 == a3;
}

void *std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(void *a1, uint64_t a2)
{
  _OWORD v8[3] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    unint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1BAF8C5A4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::insert(void *a1, char *a2, void *a3)
{
  uint64_t v3 = a3;
  unint64_t v5 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)&a2[-*a1];
  uint64_t v8 = v7 / 40;
  uint64_t v9 = (void *)(*a1 + 40 * (v7 / 40));
  uint64_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v19 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v5) >> 3);
    if (2 * v21 > v19) {
      unint64_t v19 = 2 * v21;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v19;
    }
    uint64_t v58 = v11;
    if (v22)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v25 = &v24[40 * v8];
    double v55 = v24;
    *(void *)&long long v56 = v25;
    *((void *)&v56 + 1) = v25;
    mach_port_t v57 = &v24[40 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = 2 * v8;
        }
        uint64_t v62 = v11;
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v29);
        long long v31 = v30;
        uint64_t v32 = &v30[40 * (v29 >> 2)];
        int v34 = &v30[40 * v33];
        if (*((void *)&v56 + 1) == (void)v56)
        {
          int64x2_t v40 = vdupq_n_s64(v56);
          long long v36 = &v30[40 * (v29 >> 2)];
        }
        else
        {
          uint64_t v35 = (*((void *)&v56 + 1) - (void)v56) / 40;
          long long v36 = &v32[40 * v35];
          uint64_t v37 = 40 * v35;
          uint64_t v38 = (uint64_t)&v30[40 * (v29 >> 2) + 8];
          uint64_t v39 = v56 + 8;
          do
          {
            *(void *)(v38 - 8) = *(void *)(v39 - 8);
            uint64_t v38 = std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v38, v39)+ 40;
            v39 += 40;
            v37 -= 40;
          }
          while (v37);
          int64x2_t v40 = (int64x2_t)v56;
        }
        uint64_t v41 = v57;
        uint64_t v59 = v55;
        double v55 = v31;
        *(void *)&long long v56 = v32;
        int64x2_t v60 = v40;
        *((void *)&v56 + 1) = v36;
        mach_port_t v57 = v34;
        mach_port_t v61 = v41;
        std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v59);
        uint64_t v25 = v36;
      }
      else
      {
        uint64_t v26 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v26 = v8 + 1;
        }
        v25 -= 40 * (v26 >> 1);
        *(void *)&long long v56 = v25;
        *((void *)&v56 + 1) = v25;
      }
    }
    *(void *)uint64_t v25 = *v3;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    uint64_t v42 = v56;
    mach_port_t v43 = (void *)(*((void *)&v56 + 1) + 40);
    *((void *)&v56 + 1) += 40;
    uint64_t v44 = (char *)*a1;
    if ((void *)*a1 == v9)
    {
      uint64_t v46 = v56;
    }
    else
    {
      std::string::size_type v45 = (char *)v9;
      uint64_t v46 = v56;
      do
      {
        uint64_t v47 = *((void *)v45 - 5);
        v45 -= 40;
        *(void *)(v46 - 40) = v47;
        v46 -= 40;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v46 + 8, (uint64_t)(v45 + 8));
      }
      while (v45 != v44);
      mach_port_t v43 = (void *)*((void *)&v56 + 1);
    }
    *(void *)&long long v56 = v46;
    unint64_t v48 = (void *)a1[1];
    if (v48 != v9)
    {
      do
      {
        uint64_t v49 = (uint64_t)(v9 + 1);
        uint64_t v50 = *v9;
        v9 += 5;
        uint64_t v51 = (uint64_t)(v43 + 1);
        *mach_port_t v43 = v50;
        v43 += 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v51, v49);
      }
      while (v9 != v48);
      uint64_t v46 = v56;
      uint64_t v9 = (void *)a1[1];
    }
    uint64_t v52 = (char *)*a1;
    *a1 = v46;
    a1[1] = v43;
    std::string::size_type v53 = (char *)a1[2];
    a1[2] = v57;
    *((void *)&v56 + 1) = v9;
    mach_port_t v57 = v53;
    double v55 = v52;
    *(void *)&long long v56 = v52;
    std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer((uint64_t)&v55);
    return (void *)v42;
  }
  else if (v9 == (void *)v6)
  {
    *uint64_t v9 = *a3;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 5;
  }
  else
  {
    char v12 = v9 + 5;
    long long v13 = (void *)(v6 - 40);
    if (v6 < 0x28)
    {
      int v15 = (void *)a1[1];
    }
    else
    {
      uint64_t v14 = (uint64_t *)(v6 - 40);
      int v15 = (void *)a1[1];
      do
      {
        uint64_t v16 = (uint64_t)(v14 + 1);
        uint64_t v17 = *v14;
        v14 += 5;
        uint64_t v18 = (uint64_t)(v15 + 1);
        *int v15 = v17;
        v15 += 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](v18, v16);
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v15;
    if ((void *)v6 != v12)
    {
      uint64_t v27 = 8 * ((uint64_t)(v6 - (void)v12) >> 3);
      uint64_t v28 = (uint64_t)&v5[40 * v8 - 40];
      do
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,0ul,1ul>(v13, (void *)(v28 + v27));
        v13 -= 5;
        v27 -= 40;
      }
      while (v27);
    }
    if (v9 <= v3) {
      v3 += 5 * (a1[1] > (unint64_t)v3);
    }
    *uint64_t v9 = *v3;
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v9 + 1, (uint64_t)(v3 + 1));
  }
  return v9;
}

void sub_1BAF8C948(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  unint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,0ul,1ul>(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  unint64_t v4 = a1 + 1;
  unint64_t v6 = a1 + 4;
  uint64_t result = a1[4];
  void *v6 = 0;
  if ((void *)result == v4)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v4 + 32))(v4);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  uint64_t v9 = (void *)a2[4];
  uint64_t v8 = a2 + 4;
  uint64_t v7 = v9;
  if (!v9)
  {
    uint64_t v8 = v6;
    goto LABEL_9;
  }
  if (v7 != v3)
  {
    void *v6 = v7;
LABEL_9:
    *uint64_t v8 = 0;
    return result;
  }
  void *v6 = v4;
  return (*(uint64_t (**)(void, void *))(*(void *)*v8 + 24))(*v8, v4);
}

void *applesauce::dispatch::v1::async<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>(dispatch_queue_s *,AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4 &&)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v8 = a1;
  uint64_t v2 = *(void *)(a1[6] + 32);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  uint64_t v3 = (std::mutex *)a1[2];
  std::mutex::lock(v3);
  *(unsigned char *)(a1[6] + 48) = 1;
  uint64_t v4 = a1[4];
  int v5 = *(_DWORD *)(v4 + 328);
  BOOL v6 = __OFSUB__(v5--, 1);
  *(_DWORD *)(v4 + 328) = v5;
  if ((v5 < 0) ^ v6 | (v5 == 0)) {
    std::condition_variable::notify_all((std::condition_variable *)(a1[2] + 64));
  }
  std::mutex::unlock(v3);
  return std::unique_ptr<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4,std::default_delete<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_4>>::~unique_ptr[abi:ne180100](&v8);
}

void std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        BOOL v6 = v4 - 40;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100]((void *)v4 - 4);
        uint64_t v4 = v6;
      }
      while (v6 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>> const*>>(void *result, unint64_t *a2, unint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = (void **)result;
    do
    {
      unint64_t v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*v5, v5[1], *v4))
      {
        *(void *)uint64_t v7 = v6;
        uint64_t result = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=((void *)(v7 + 8), (uint64_t)(v4 + 1));
      }
      else
      {
        uint64_t result = std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::insert(v5, (char *)v7, v4);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

void *std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(void *a1, uint64_t a2)
{
  _OWORD v8[3] = *MEMORY[0x1E4F143B8];
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  if (v6 != a1)
  {
    uint64_t v3 = v7;
    uint64_t v4 = (void *)a1[3];
    if (v7 == v6)
    {
      if (v4 == a1)
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, v8);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = 0;
        (*(void (**)(void, void *))(*(void *)a1[3] + 24))(a1[3], v6);
        (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
        a1[3] = 0;
        uint64_t v7 = v6;
        (*(void (**)(void *, void *))(v8[0] + 24))(v8, a1);
        (*(void (**)(void *))(v8[0] + 32))(v8);
      }
      else
      {
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a1);
        (*(void (**)(void *))(*v7 + 32))(v7);
        uint64_t v7 = (void *)a1[3];
      }
      a1[3] = a1;
    }
    else if (v4 == a1)
    {
      (*(void (**)(void *, void *))(*a1 + 24))(a1, v6);
      (*(void (**)(void))(*(void *)a1[3] + 32))(a1[3]);
      a1[3] = v7;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v7 = (void *)a1[3];
      a1[3] = v3;
    }
  }
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](v6);
  return a1;
}

void sub_1BAF8D010(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::insert(void *a1, char *a2, void *a3)
{
  uint64_t v3 = a3;
  int v5 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)&a2[-*a1];
  uint64_t v8 = v7 / 40;
  uint64_t v9 = (void *)(*a1 + 40 * (v7 / 40));
  uint64_t v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v19 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v5) >> 3);
    if (2 * v21 > v19) {
      unint64_t v19 = 2 * v21;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v19;
    }
    uint64_t v58 = v11;
    if (v22)
    {
      uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v25 = &v24[40 * v8];
    double v55 = v24;
    *(void *)&long long v56 = v25;
    *((void *)&v56 + 1) = v25;
    mach_port_t v57 = &v24[40 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = 2 * v8;
        }
        uint64_t v62 = v11;
        uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v29);
        long long v31 = v30;
        uint64_t v32 = &v30[40 * (v29 >> 2)];
        int v34 = &v30[40 * v33];
        if (*((void *)&v56 + 1) == (void)v56)
        {
          int64x2_t v40 = vdupq_n_s64(v56);
          long long v36 = &v30[40 * (v29 >> 2)];
        }
        else
        {
          uint64_t v35 = (*((void *)&v56 + 1) - (void)v56) / 40;
          long long v36 = &v32[40 * v35];
          uint64_t v37 = 40 * v35;
          uint64_t v38 = (uint64_t)&v30[40 * (v29 >> 2) + 8];
          uint64_t v39 = v56 + 8;
          do
          {
            *(void *)(v38 - 8) = *(void *)(v39 - 8);
            uint64_t v38 = std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v38, v39)+ 40;
            v39 += 40;
            v37 -= 40;
          }
          while (v37);
          int64x2_t v40 = (int64x2_t)v56;
        }
        uint64_t v41 = v57;
        uint64_t v59 = v55;
        double v55 = v31;
        *(void *)&long long v56 = v32;
        int64x2_t v60 = v40;
        *((void *)&v56 + 1) = v36;
        mach_port_t v57 = v34;
        mach_port_t v61 = v41;
        std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::~__split_buffer((uint64_t)&v59);
        uint64_t v25 = v36;
      }
      else
      {
        uint64_t v26 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v26 = v8 + 1;
        }
        v25 -= 40 * (v26 >> 1);
        *(void *)&long long v56 = v25;
        *((void *)&v56 + 1) = v25;
      }
    }
    *(void *)uint64_t v25 = *v3;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    uint64_t v42 = v56;
    mach_port_t v43 = (void *)(*((void *)&v56 + 1) + 40);
    *((void *)&v56 + 1) += 40;
    uint64_t v44 = (char *)*a1;
    if ((void *)*a1 == v9)
    {
      uint64_t v46 = v56;
    }
    else
    {
      std::string::size_type v45 = (char *)v9;
      uint64_t v46 = v56;
      do
      {
        uint64_t v47 = *((void *)v45 - 5);
        v45 -= 40;
        *(void *)(v46 - 40) = v47;
        v46 -= 40;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v46 + 8, (uint64_t)(v45 + 8));
      }
      while (v45 != v44);
      mach_port_t v43 = (void *)*((void *)&v56 + 1);
    }
    *(void *)&long long v56 = v46;
    unint64_t v48 = (void *)a1[1];
    if (v48 != v9)
    {
      do
      {
        uint64_t v49 = (uint64_t)(v9 + 1);
        uint64_t v50 = *v9;
        v9 += 5;
        uint64_t v51 = (uint64_t)(v43 + 1);
        *mach_port_t v43 = v50;
        v43 += 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v51, v49);
      }
      while (v9 != v48);
      uint64_t v46 = v56;
      uint64_t v9 = (void *)a1[1];
    }
    uint64_t v52 = (char *)*a1;
    *a1 = v46;
    a1[1] = v43;
    std::string::size_type v53 = (char *)a1[2];
    a1[2] = v57;
    *((void *)&v56 + 1) = v9;
    mach_port_t v57 = v53;
    double v55 = v52;
    *(void *)&long long v56 = v52;
    std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::~__split_buffer((uint64_t)&v55);
    return (void *)v42;
  }
  else if (v9 == (void *)v6)
  {
    *uint64_t v9 = *a3;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 5;
  }
  else
  {
    char v12 = v9 + 5;
    long long v13 = (void *)(v6 - 40);
    if (v6 < 0x28)
    {
      int v15 = (void *)a1[1];
    }
    else
    {
      uint64_t v14 = (uint64_t *)(v6 - 40);
      int v15 = (void *)a1[1];
      do
      {
        uint64_t v16 = (uint64_t)(v14 + 1);
        uint64_t v17 = *v14;
        v14 += 5;
        uint64_t v18 = (uint64_t)(v15 + 1);
        *int v15 = v17;
        v15 += 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](v18, v16);
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v15;
    if ((void *)v6 != v12)
    {
      uint64_t v27 = 8 * ((uint64_t)(v6 - (void)v12) >> 3);
      uint64_t v28 = (uint64_t)&v5[40 * v8 - 40];
      do
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,0ul,1ul>(v13, (void *)(v28 + v27));
        v13 -= 5;
        v27 -= 40;
      }
      while (v27);
    }
    if (v9 <= v3) {
      v3 += 5 * (a1[1] > (unint64_t)v3);
    }
    *uint64_t v9 = *v3;
    std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v9 + 1, (uint64_t)(v3 + 1));
  }
  return v9;
}

void sub_1BAF8D3B4(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,0ul,1ul>(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  uint64_t v4 = a1 + 1;
  unint64_t v6 = a1 + 4;
  uint64_t result = a1[4];
  void *v6 = 0;
  if ((void *)result == v4)
  {
    uint64_t result = (*(uint64_t (**)(void *))(*v4 + 32))(v4);
  }
  else if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  uint64_t v9 = (void *)a2[4];
  uint64_t v8 = a2 + 4;
  uint64_t v7 = v9;
  if (!v9)
  {
    uint64_t v8 = v6;
    goto LABEL_9;
  }
  if (v7 != v3)
  {
    void *v6 = v7;
LABEL_9:
    *uint64_t v8 = 0;
    return result;
  }
  void *v6 = v4;
  return (*(uint64_t (**)(void, void *))(*(void *)*v8 + 24))(*v8, v4);
}

void *std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target_type()
{
}

uint64_t std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZN4AMCP4Core9Conductor25calculate_snapshot_paramsEjjbE3$_6"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

BOOL std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::operator()(uint64_t a1, AMCP::Core::Core **a2)
{
  uint64_t v3 = *a2;
  uint64_t v15 = 0x676C6F6262636C73;
  int v16 = 0;
  unsigned int v4 = AMCP::Core::Core::get_typed_property_value<unsigned int,std::enable_if<true,void>>(v3, (const AMCP::Address *)&v15, &AMCP::k_class_id_unknown);
  BOOL v5 = 0;
  if (AMCP::is_base_of((AMCP *)0x61706C67, v4))
  {
    unint64_t v6 = *a2;
    CFStringRef v7 = CFStringCreateWithBytes(0, (const UInt8 *)"", 0, 0x8000100u, 0);
    CFStringRef v13 = v7;
    if (!v7)
    {
      exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    CFStringRef v8 = v7;
    uint64_t v15 = 0x676C6F6270696964;
    int v16 = 0;
    AMCP::Core::Core::get_typed_property_value<applesauce::CF::StringRef,std::enable_if<true,void>>(&cf, v6, (AMCP::Address *)&v15, (const void **)&v13);
    CFRelease(v8);
    CFStringRef v9 = CFStringCreateWithBytes(0, (const UInt8 *)"com.apple.audio.Meta-Driver", 27, 0x8000100u, 0);
    uint64_t v15 = (uint64_t)v9;
    if (!v9)
    {
      char v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v12, "Could not construct");
      __cxa_throw(v12, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    BOOL v5 = applesauce::CF::compare<applesauce::CF::StringRef,0,applesauce::CF::StringRef,0>((const __CFString *)cf, (const __CFString **)&v15) == kCFCompareEqualTo;
    CFRelease(v9);
    if (cf) {
      CFRelease(cf);
    }
  }
  return v5;
}

void sub_1BAF8D80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

void std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F1489058;
}

void *std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_1F1489058;
  return result;
}

void std::__function::__func<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6,std::allocator<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_6>,BOOL ()(std::shared_ptr<AMCP::Core::Core> const&)>::~__func()
{
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (unrecognized stock class)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8DA1C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_5,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (unrecognized stock class)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8DBB0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_4,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (unrecognized stock class)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8DD44(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (no object)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8DED8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (no object)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8E06C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <=*=* Done with config change for source object %u, owning object %u (no object)", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8E200(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::calculate_snapshot_params(unsigned int,unsigned int,BOOL)::$_0,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d *=*=> Begin config change for source object %u, owning object %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8E394(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d *=*=> Begin config change for source object %u, owning object %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8E528(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v10, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v10;
  if (*(void *)v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    int v8 = *(_DWORD *)(a1 + 48);
    LODWORD(v10) = 67110146;
    HIDWORD(v10) = v4;
    *(_WORD *)uint64_t v11 = 2080;
    *(void *)&void v11[2] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d *=*=> Begin config change for source object %u, owning object %u", (uint8_t *)&v10, 0x24u);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 56, 8);
}

void sub_1BAF8E6BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::process_queued_config_change(unsigned int,unsigned int,unsigned int,std::shared_ptr<AMCP::Core::Conductor::Queued_Change_Map_Item> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

void *std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1488DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Object>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 360);
  std::vector<std::shared_ptr<DSP_Host_Types::DeviceDescription>>::__destroy_vector::operator()[abi:ne180100](&v2);

  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)(a1 + 32));
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Object>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14895B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Object>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F14895B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Map_Item>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 200);
    int v4 = *(void **)(a1 + 192);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      int v4 = *(void **)(a1 + 192);
    }
    *(void *)(a1 + 200) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 136));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));

  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Map_Item>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1489560;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1C1859840);
}

void std::__shared_ptr_emplace<AMCP::Core::Conductor::Queued_Change_Map_Item>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1F1489560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

uint64_t AMCP::Core::Conductor::Conductor_Graph_Manager::get_graph_host@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 440);
  *a2 = *(void *)(this + 432);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void AMCP::Core::Conductor::Conductor_Graph_Manager::~Conductor_Graph_Manager(AMCP::Core::Conductor::Conductor_Graph_Manager *this)
{
  *(void *)this = &unk_1F1488BB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_1F1488BB8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 55);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  AMCP::IO_Core::Graph_Manager::~Graph_Manager(this);
}

void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::~Map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 184);
    int v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        int v6 = (void **)(v3 - 32);
        std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 184);
    int v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        int v6 = (void **)(v3 - 32);
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

void AMCP::Observer::Map<std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,unsigned int,true,std::less<unsigned int>>::~Map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 184);
    int v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        int v6 = (void **)(v3 - 32);
        std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

void AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,unsigned int,true,std::less<unsigned int>>::~Map(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 176);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 184);
    int v4 = *(void **)(a1 + 176);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 40;
        int v6 = (void **)(v3 - 32);
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v6);
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v2;
    operator delete(v4);
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 112));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 64));

  std::mutex::~mutex((std::mutex *)a1);
}

void std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        int v6 = v4 - 40;
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)v4 - 4);
        int v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void AMCP::Core::Conductor::flush_work_queues(dispatch_object_t *this)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2, this[44]);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2, this[4]);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2, this[84]);
  AMCP::Utility::Dispatch_Queue::flush_all_work((AMCP::Utility::Dispatch_Queue *)v2);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v2);
}

uint64_t *std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = std::__variant_detail::__dtor<std::__variant_detail::__traits<std::shared_ptr<std::byte>,std::weak_ptr<std::byte>>,(std::__variant_detail::_Trait)1>::~__dtor(v2);
    MEMORY[0x1C1859840](v3, 0x10E2C4061EF8AF9);
  }
  return a1;
}

uint64_t *applesauce::dispatch::v1::async<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>(dispatch_queue_s *,AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0 &&)::{lambda(void *)#1}::__invoke(AMCP::Utility::Expiration_Check *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  CFStringRef v9 = a1;
  uint64_t v2 = *((void *)a1 + 5);
  BOOL is_valid = AMCP::Utility::Expiration_Check::is_valid(a1);
  if (!is_valid)
  {
    AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)is_valid);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
    int v6 = **(NSObject ***)buf;
    if (*(void *)v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v11);
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = pthread_self();
      mach_port_t v8 = pthread_mach_thread_np(v7);
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = v8;
      *(_WORD *)uint64_t v11 = 2080;
      *(void *)&void v11[2] = "Conductor.cpp";
      __int16 v12 = 1024;
      int v13 = 217;
      __int16 v14 = 2080;
      int v15 = "expiration_check.is_valid()";
      _os_log_error_impl(&dword_1BAA78000, v6, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Assertion Failed: %s caller has gone out of scope", buf, 0x22u);
    }
    abort();
  }
  uint64_t v4 = *(void *)(*((void *)a1 + 4) + 24);
  if (!v4) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
  std::mutex::lock((std::mutex *)(v2 + 992));
  std::condition_variable::notify_all((std::condition_variable *)(v2 + 1056));
  std::mutex::unlock((std::mutex *)(v2 + 992));
  return std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_1BAF8EF80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0,std::default_delete<AMCP::Core::Conductor::finish_all_notifications(std::function<void ()(void)> const&)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)unint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <+++++ Done handling of properties changed for source object, %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF8F0D4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_5,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_4,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)unint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <+++++ Done handling of properties changed for source object, %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF8F25C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_4,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)unint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d <+++++ Done handling of properties changed for source object, %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF8F3E4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_3,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)unint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d +++++> Beginning handling of properties changed for source object, %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF8F56C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_2,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)unint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d +++++> Beginning handling of properties changed for source object, %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF8F6F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_1,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned int>>::perform(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v9, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v9;
  if (*(void *)v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v10);
  }
  os_log_type_t v3 = *(unsigned char *)(a1 + 20);
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = *(_DWORD *)(a1 + 24);
    uint64_t v5 = *(void *)(a1 + 32);
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(_DWORD *)(a1 + 44);
    LODWORD(v9) = 67109890;
    HIDWORD(v9) = v4;
    *(_WORD *)unint64_t v10 = 2080;
    *(void *)&void v10[2] = v5;
    __int16 v11 = 1024;
    int v12 = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl(&dword_1BAA78000, v2, v3, "%6u %32s:%-5d +++++> Beginning handling of properties changed for source object, %d", (uint8_t *)&v9, 0x1Eu);
  }
  caulk::concurrent::message::~message((caulk::concurrent::message *)a1);
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)*MEMORY[0x1E4FB7E90] + 24))(*MEMORY[0x1E4FB7E90], a1, 48, 8);
}

void sub_1BAF8F87C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void caulk::concurrent::details::rt_message_call<AMCP::Core::Conductor::properties_changed(unsigned int,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>> const&)::$_0,std::tuple<unsigned int,char const*,int,unsigned int>>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);

  JUMPOUT(0x1C1859840);
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *(void *)a2) >> 3);
    uint64_t v7 = *(void *)(a1 + 16);
    mach_port_t v8 = *(void **)a1;
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - *(void *)a1) >> 3) < v6)
    {
      if (v8)
      {
        CFStringRef v9 = *(void **)(a1 + 8);
        unint64_t v10 = *(void **)a1;
        if (v9 != v8)
        {
          do
          {
            __int16 v11 = v9 - 5;
            std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](v9 - 4);
            CFStringRef v9 = v11;
          }
          while (v11 != v8);
          unint64_t v10 = *(void **)a1;
        }
        *(void *)(a1 + 8) = v8;
        operator delete(v10);
        uint64_t v7 = 0;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      if (v6 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v6) {
        uint64_t v13 = v6;
      }
      if (v12 >= 0x333333333333333) {
        unint64_t v14 = 0x666666666666666;
      }
      else {
        unint64_t v14 = v13;
      }
      std::vector<CA::StreamDescription>::__vallocate[abi:ne180100]((void *)a1, v14);
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>((uint64_t)v5, v4, *(void *)(a1 + 8));
LABEL_21:
      *(void *)(a1 + 8) = v15;
      goto LABEL_28;
    }
    uint64_t v16 = *(void **)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * (v16 - v8) < v6)
    {
      uint64_t v17 = (uint64_t)&v5[v16 - v8];
      if (v16 != v8)
      {
        uint64_t v18 = v8 + 1;
        uint64_t v19 = 8 * (v16 - v8);
        uint64_t v20 = (uint64_t)(v5 + 1);
        do
        {
          *(v18 - 1) = *(void *)(v20 - 8);
          uint64_t v18 = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v18, v20)+ 5;
          v20 += 40;
          v19 -= 40;
        }
        while (v19);
        mach_port_t v8 = *(void **)(a1 + 8);
      }
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(v17, v4, (uint64_t)v8);
      goto LABEL_21;
    }
    if (v5 != (uint64_t *)v4)
    {
      do
      {
        uint64_t v21 = (uint64_t)(v5 + 1);
        uint64_t v22 = *v5;
        v5 += 5;
        uint64_t v23 = v8 + 1;
        *mach_port_t v8 = v22;
        v8 += 5;
        std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::operator=(v23, v21);
      }
      while (v5 != (uint64_t *)v4);
      uint64_t v16 = *(void **)(a1 + 8);
    }
    if (v16 != v8)
    {
      do
      {
        uint64_t v24 = v16 - 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::~__value_func[abi:ne180100](v16 - 4);
        uint64_t v16 = v24;
      }
      while (v24 != v8);
    }
    *(void *)(a1 + 8) = v8;
  }
LABEL_28:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1BAF8FAAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = (void **)(i - 32);
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAF8FB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      *(void *)(a3 + v6) = *(void *)(a1 + v6);
      std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,std::unordered_map<unsigned int,std::tuple<std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>,std::unordered_map<AMCP::Address,AMCP::Thing,AMCP::Address::Hash,AMCP::Address::Is_Exact_Match,std::allocator<std::pair<AMCP::Address const,AMCP::Thing>>>>>> const&)>::__value_func[abi:ne180100](a3 + v6 + 8, a1 + v6 + 8);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

unint64_t AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::register_observer(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = a1;
  char v76 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  if (*(unsigned char *)(a1 + 168))
  {
    unint64_t add = atomic_fetch_add(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token, 1uLL);
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), *a2))
    {
      uint64_t v8 = v7;
      *(void *)&long long v82 = add;
      uint64_t v9 = (char *)&v82 + 8;
      std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)&v82 + 8, a3);
      uint64_t v10 = *(void **)(v8 + 8);
      __int16 v11 = *(void **)(v8 + 16);
      unint64_t v12 = (void *)(v8 + 8);
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(v10, v11, add))
      {
        *(void *)uint64_t v13 = add;
        std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=((void *)(v13 + 8), (uint64_t)&v82 + 8);
      }
      else
      {
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::insert(v12, (char *)v13, &v82);
      }
      goto LABEL_54;
    }
    unint64_t v80 = add;
    uint64_t v9 = v81;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)v81, a3);
    long long v69 = 0uLL;
    uint64_t v70 = 0;
    *(void *)&long long v82 = &v69;
    BYTE8(v82) = 0;
    unint64_t v14 = operator new(0x28uLL);
    *(void *)&long long v69 = v14;
    *((void *)&v69 + 1) = v14;
    uint64_t v15 = v14 + 5;
    uint64_t v70 = v14 + 5;
    *unint64_t v14 = v80;
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v81);
    uint64_t v16 = v70;
    *((void *)&v69 + 1) = v15;
    uint64_t v70 = 0;
    v71[0] = *a2;
    unsigned int v17 = v71[0];
    long long v72 = v69;
    long long v69 = 0uLL;
    uint64_t v73 = v16;
    uint64_t v19 = *(_DWORD **)(a1 + 176);
    unint64_t v18 = *(void *)(a1 + 184);
    BOOL v20 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v19, (_DWORD *)v18, v71[0]);
    unint64_t v22 = (unint64_t)v21;
    if (v20)
    {
      *uint64_t v21 = v17;
      uint64_t v23 = &v72;
    }
    else
    {
      unint64_t v24 = *(void *)(a1 + 192);
      if (v18 >= v24)
      {
        unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)v19) >> 3) + 1;
        if (v30 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)v19) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x333333333333333) {
          unint64_t v32 = 0x666666666666666;
        }
        else {
          unint64_t v32 = v30;
        }
        uint64_t v79 = a1 + 192;
        if (v32) {
          unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v32);
        }
        else {
          uint64_t v33 = 0;
        }
        int64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (void)v19) >> 3);
        unint64_t v44 = v32 + 8 * ((uint64_t)(v22 - (void)v19) >> 3);
        *(void *)&long long v77 = v32;
        *((void *)&v77 + 1) = v44;
        *(void *)&long long v78 = v44;
        *((void *)&v78 + 1) = v32 + 40 * v33;
        if (v43 == v33)
        {
          if ((uint64_t)(v22 - (void)v19) < 1)
          {
            if ((_DWORD *)v22 == v19) {
              unint64_t v46 = 1;
            }
            else {
              unint64_t v46 = 0x999999999999999ALL * ((uint64_t)(v22 - (void)v19) >> 3);
            }
            uint64_t v84 = a1 + 192;
            uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v46);
            unint64_t v48 = &v47[40 * (v46 >> 2)];
            *(void *)&long long v82 = v47;
            *((void *)&v82 + 1) = v48;
            *((void *)&v83 + 1) = &v47[40 * v49];
            uint64_t v50 = *((void *)&v77 + 1);
            if ((void)v78 != *((void *)&v77 + 1))
            {
              uint64_t v51 = &v48[v78 - *((void *)&v77 + 1)];
              do
              {
                *(_DWORD *)unint64_t v48 = *(_DWORD *)v50;
                *((void *)v48 + 2) = 0;
                *((void *)v48 + 3) = 0;
                *((void *)v48 + 1) = 0;
                *((void *)v48 + 1) = *(void *)(v50 + 8);
                *(void *)(v50 + 8) = 0;
                uint64_t v52 = *((void *)v48 + 2);
                *((void *)v48 + 2) = *(void *)(v50 + 16);
                *(void *)(v50 + 16) = v52;
                uint64_t v53 = *((void *)v48 + 3);
                *((void *)v48 + 3) = *(void *)(v50 + 24);
                *(void *)(v50 + 24) = v53;
                v48 += 40;
                v50 += 40;
              }
              while (v48 != v51);
              unint64_t v48 = v51;
            }
            *(void *)&long long v83 = v48;
            long long v54 = v77;
            long long v55 = v78;
            long long v77 = v82;
            long long v78 = v83;
            long long v82 = v54;
            long long v83 = v55;
            std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>>>::~__split_buffer((uint64_t)&v82);
            unint64_t v44 = v78;
          }
          else
          {
            if (v43 >= -1) {
              uint64_t v45 = v43 + 1;
            }
            else {
              uint64_t v45 = v43 + 2;
            }
            v44 -= 40 * (v45 >> 1);
            *((void *)&v77 + 1) = v44;
            *(void *)&long long v78 = v44;
          }
        }
        *(_DWORD *)unint64_t v44 = v71[0];
        *(void *)(v44 + 16) = 0;
        *(void *)(v44 + 24) = 0;
        *(void *)(v44 + 8) = 0;
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>((void *)(v44 + 8), v72, *((uint64_t *)&v72 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v72 + 1) - v72) >> 3));
        *(_WORD *)(v44 + 32) = v74;
        long long v56 = (void *)*((void *)&v77 + 1);
        uint64_t v57 = v78 + 40;
        *(void *)&long long v78 = v78 + 40;
        uint64_t v58 = *(void **)(a1 + 176);
        if ((void *)v22 != v58)
        {
          uint64_t v59 = (void *)v22;
          do
          {
            int v60 = *((_DWORD *)v59 - 10);
            v59 -= 5;
            *((_DWORD *)v56 - 10) = v60;
            v56 -= 5;
            v56[2] = 0;
            v56[3] = 0;
            v56[1] = 0;
            v56[1] = v59[1];
            v59[1] = 0;
            uint64_t v61 = v56[2];
            v56[2] = v59[2];
            v59[2] = v61;
            uint64_t v62 = v56[3];
            v56[3] = v59[3];
            v59[3] = v62;
          }
          while (v59 != v58);
          uint64_t v57 = v78;
        }
        *((void *)&v77 + 1) = v56;
        uint64_t v63 = *(void *)(a1 + 184);
        if (v22 != v63)
        {
          do
          {
            *(_DWORD *)uint64_t v57 = *(_DWORD *)v22;
            *(void *)(v57 + 16) = 0;
            *(void *)(v57 + 24) = 0;
            *(void *)(v57 + 8) = 0;
            *(void *)(v57 + 8) = *(void *)(v22 + 8);
            *(void *)(v22 + 8) = 0;
            uint64_t v64 = *(void *)(v57 + 16);
            *(void *)(v57 + 16) = *(void *)(v22 + 16);
            *(void *)(v22 + 16) = v64;
            uint64_t v65 = *(void *)(v57 + 24);
            *(void *)(v57 + 24) = *(void *)(v22 + 24);
            *(void *)(v22 + 24) = v65;
            v57 += 40;
            v22 += 40;
          }
          while (v22 != v63);
          long long v56 = (void *)*((void *)&v77 + 1);
          unint64_t v22 = *(void *)(a1 + 184);
        }
        uint64_t v66 = *(void *)(a1 + 176);
        *(void *)(a1 + 176) = v56;
        *(void *)(a1 + 184) = v57;
        uint64_t v67 = *(void *)(a1 + 192);
        *(void *)(a1 + 192) = *((void *)&v78 + 1);
        *(void *)&long long v78 = v22;
        *((void *)&v78 + 1) = v67;
        *(void *)&long long v77 = v66;
        *((void *)&v77 + 1) = v66;
        std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>>>::~__split_buffer((uint64_t)&v77);
        goto LABEL_53;
      }
      if (v21 == (unsigned int *)v18)
      {
        *(_DWORD *)unint64_t v18 = v17;
        *(void *)(v18 + 16) = 0;
        *(void *)(v18 + 24) = 0;
        *(void *)(v18 + 8) = 0;
        std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>((void *)(v18 + 8), v72, *((uint64_t *)&v72 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v72 + 1) - v72) >> 3));
        *(_WORD *)(v18 + 32) = v74;
        *(void *)(a1 + 184) = v18 + 40;
        goto LABEL_53;
      }
      uint64_t v25 = v21 + 10;
      unint64_t v26 = v18 - 40;
      unint64_t v27 = v18;
      while (v26 < v18)
      {
        *(_DWORD *)unint64_t v27 = *(_DWORD *)v26;
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 8) = *(void *)(v26 + 8);
        *(void *)(v26 + 8) = 0;
        uint64_t v28 = *(void *)(v27 + 16);
        *(void *)(v27 + 16) = *(void *)(v26 + 16);
        *(void *)(v26 + 16) = v28;
        uint64_t v29 = *(void *)(v27 + 24);
        *(void *)(v27 + 24) = *(void *)(v26 + 24);
        *(void *)(v26 + 24) = v29;
        v27 += 40;
        v26 += 40;
      }
      *(void *)(a1 + 184) = v27;
      if ((_DWORD *)v18 != v25)
      {
        unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)v25) >> 3);
        uint64_t v35 = (void *)(v18 - 16);
        uint64_t v36 = 10 * v34;
        do
        {
          uint64_t v37 = &v21[v36];
          *((_DWORD *)v35 - 6) = v21[v36 - 10];
          uint64_t v38 = *(v35 - 2);
          *(v35 - 2) = *(void *)&v21[v36 - 8];
          *((void *)v37 - 4) = v38;
          uint64_t v39 = *(v35 - 1);
          *(v35 - 1) = *(void *)&v21[v36 - 6];
          *((void *)v37 - 3) = v39;
          uint64_t v40 = *v35;
          void *v35 = *(void *)&v21[v36 - 4];
          v35 -= 5;
          *((void *)v37 - 2) = v40;
          v36 -= 10;
        }
        while (v36 * 4);
      }
      uint64_t v41 = v71;
      if (v22 <= (unint64_t)v71) {
        uint64_t v41 = &v71[10 * (*(void *)(a1 + 184) > (unint64_t)v71)];
      }
      unsigned int v42 = *v41;
      uint64_t v23 = (long long *)(v41 + 2);
      *(_DWORD *)unint64_t v22 = v42;
    }
    AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::operator=(v22 + 8, (uint64_t)v23);
LABEL_53:
    *(void *)&long long v82 = &v72;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    *(void *)&long long v82 = &v69;
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
LABEL_54:
    std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v9);
    goto LABEL_55;
  }
  unint64_t add = 0;
LABEL_55:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v75);
  return add;
}

void sub_1BAF90220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void **a20)
{
  *(void *)(v21 + 184) = v22;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a20);
  a20 = (void **)&a9;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v20);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *(void *)a2) >> 3);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void **)a1;
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - *(void *)a1) >> 3) < v6)
    {
      if (v8)
      {
        uint64_t v9 = *(void **)(a1 + 8);
        uint64_t v10 = *(void **)a1;
        if (v9 != v8)
        {
          do
          {
            __int16 v11 = v9 - 5;
            std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v9 - 4);
            uint64_t v9 = v11;
          }
          while (v11 != v8);
          uint64_t v10 = *(void **)a1;
        }
        *(void *)(a1 + 8) = v8;
        operator delete(v10);
        uint64_t v7 = 0;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      if (v6 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v6) {
        uint64_t v13 = v6;
      }
      if (v12 >= 0x333333333333333) {
        unint64_t v14 = 0x666666666666666;
      }
      else {
        unint64_t v14 = v13;
      }
      std::vector<CA::StreamDescription>::__vallocate[abi:ne180100]((void *)a1, v14);
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>((uint64_t)v5, v4, *(void *)(a1 + 8));
LABEL_21:
      *(void *)(a1 + 8) = v15;
      goto LABEL_28;
    }
    uint64_t v16 = *(void **)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * (v16 - v8) < v6)
    {
      uint64_t v17 = (uint64_t)&v5[v16 - v8];
      if (v16 != v8)
      {
        unint64_t v18 = v8 + 1;
        uint64_t v19 = 8 * (v16 - v8);
        uint64_t v20 = (uint64_t)(v5 + 1);
        do
        {
          *(v18 - 1) = *(void *)(v20 - 8);
          unint64_t v18 = std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v18, v20)+ 5;
          v20 += 40;
          v19 -= 40;
        }
        while (v19);
        uint64_t v8 = *(void **)(a1 + 8);
      }
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(v17, v4, (uint64_t)v8);
      goto LABEL_21;
    }
    if (v5 != (uint64_t *)v4)
    {
      do
      {
        uint64_t v21 = (uint64_t)(v5 + 1);
        uint64_t v22 = *v5;
        v5 += 5;
        uint64_t v23 = v8 + 1;
        *uint64_t v8 = v22;
        v8 += 5;
        std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::operator=(v23, v21);
      }
      while (v5 != (uint64_t *)v4);
      uint64_t v16 = *(void **)(a1 + 8);
    }
    if (v16 != v8)
    {
      do
      {
        unint64_t v24 = v16 - 5;
        std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v16 - 4);
        uint64_t v16 = v24;
      }
      while (v24 != v8);
    }
    *(void *)(a1 + 8) = v8;
  }
LABEL_28:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1BAF90488(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = (void **)(i - 32);
    std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAF9055C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      *(void *)(a3 + v6) = *(void *)(a1 + v6);
      std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::__value_func[abi:ne180100](a3 + v6 + 8, a1 + v6 + 8);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t AMCP::Observer::Map<std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,unsigned int,true,std::less<unsigned int>>::deregister_observer(uint64_t a1, unint64_t a2)
{
  uint64_t v17 = a1;
  char v18 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  if (*(unsigned char *)(a1 + 168))
  {
    uint64_t v4 = *(void **)(a1 + 176);
    uint64_t v5 = *(void **)(a1 + 184);
    while (v4 != v5)
    {
      uint64_t v6 = (void *)v4[2];
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find((void *)v4[1], v6, a2))
      {
        uint64_t v8 = v7;
        if (v7 + 5 != v6)
        {
          do
          {
            uint64_t v9 = v8 + 5;
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>,0ul,1ul>(v8, v8 + 5);
            uint64_t v10 = v8 + 10;
            v8 += 5;
          }
          while (v10 != v6);
          uint64_t v6 = (void *)v4[2];
          uint64_t v8 = v9;
        }
        for (; v6 != v8; v6 -= 5)
          std::__function::__value_func<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>::~__value_func[abi:ne180100](v6 - 4);
        v4[2] = v8;
        if ((void *)v4[1] == v8)
        {
          __int16 v11 = v4 + 5;
          unint64_t v12 = *(void **)(a1 + 184);
          if (v4 + 5 != v12)
          {
            do
            {
              uint64_t v4 = v11;
              *((_DWORD *)v11 - 10) = *(_DWORD *)v11;
              long long v13 = *((_OWORD *)v11 - 2);
              *((_OWORD *)v11 - 2) = *(_OWORD *)(v11 + 1);
              *(_OWORD *)(v11 + 1) = v13;
              uint64_t v14 = *(v11 - 2);
              *(v4 - 2) = v4[3];
              void v4[3] = v14;
              __int16 v11 = v4 + 5;
            }
            while (v4 + 5 != v12);
            __int16 v11 = *(void **)(a1 + 184);
          }
          if (v11 != v4)
          {
            do
            {
              uint64_t v15 = v11 - 5;
              uint64_t v19 = (void **)(v11 - 4);
              std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>::__destroy_vector::operator()[abi:ne180100](&v19);
              __int16 v11 = v15;
            }
            while (v15 != v4);
          }
          *(void *)(a1 + 184) = v4;
        }
        return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
      }
      v4 += 5;
    }
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void **)a2;
    uint64_t v4 = *(void **)(a2 + 8);
    uint64_t v6 = *(void *)(a1 + 16);
    unint64_t v7 = 0x8E38E38E38E38E39 * (((uint64_t)v4 - *(void *)a2) >> 3);
    uint64_t v8 = *(void **)a1;
    if (0x8E38E38E38E38E39 * ((v6 - *(void *)a1) >> 3) >= v7)
    {
      if (0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) >= v7)
      {
        uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *>(*(void **)a2, *(void **)(a2 + 8), v8);
        std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__base_destruct_at_end[abi:ne180100]((void *)a1, (uint64_t)v14);
        goto LABEL_16;
      }
      long long v13 = &v5[(uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3];
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *>(*(void **)a2, v13, v8);
      unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(a1 + 16, v13, v4, *(void **)(a1 + 8));
    }
    else
    {
      if (v8)
      {
        std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__base_destruct_at_end[abi:ne180100]((void *)a1, *(void *)a1);
        operator delete(*(void **)a1);
        uint64_t v6 = 0;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      if (v7 > 0x38E38E38E38E38ELL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0x8E38E38E38E38E39 * (v6 >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= v7) {
        uint64_t v10 = v7;
      }
      if (v9 >= 0x1C71C71C71C71C7) {
        unint64_t v11 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v11 = v10;
      }
      std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__vallocate[abi:ne180100]((void *)a1, v11);
      unint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(a1 + 16, v5, v4, *(void **)(a1 + 8));
    }
    *(void *)(a1 + 8) = v12;
  }
LABEL_16:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1BAF90910(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1BAF90918(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = (void **)(i - 32);
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAF909EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unint64_t v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  char v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = *v6;
      std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>::pair[abi:ne180100]((uint64_t)(v4 + 1), (uint64_t)(v6 + 1));
      v6 += 9;
      uint64_t v4 = v11 + 9;
      v11 += 9;
    }
    while (v6 != a3);
  }
  char v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1BAF90AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *,std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>> *>(void *a1, void *a2, void *a3)
{
  uint64_t v3 = a3;
  if (a1 == a2) {
    return a3;
  }
  uint64_t v5 = a1;
  uint64_t v6 = a1;
  unint64_t v7 = a3;
  do
  {
    uint64_t v8 = *v6;
    v6 += 9;
    *unint64_t v7 = v8;
    v7 += 9;
    std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>::operator=(v3 + 1, (uint64_t)(v5 + 1));
    std::function<void ()(AMCP::Graph_Description const&)>::operator=(v3 + 5, (uint64_t)(v5 + 5));
    uint64_t v3 = v7;
    uint64_t v5 = v6;
  }
  while (v6 != a2);
  return v7;
}

void AMCP::Core::Conductor::notify_control_value_observers(dispatch_object_t *this, unsigned int a2)
{
  v13[40] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (std::__shared_mutex_base *)(this + 304);
  AMCP::Utility::Dispatch_Queue::Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13, this[44]);
  *(void *)&long long v8 = v4;
  BYTE8(v8) = 1;
  std::__shared_mutex_base::lock_shared(v4);
  if (*((unsigned char *)this + 2600))
  {
    long long v11 = 0uLL;
    *(void *)&long long v12 = 0;
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(this[326], this[327], a2))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>>(&v11, *(unint64_t **)(v5 + 8), *(unint64_t **)(v5 + 16));
    }
    unsigned int v6 = *((_DWORD *)this + 660);
    if (v6 != a2
      && AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(this[326], this[327], v6))
    {
      AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()>> const*>>(&v11, *(unint64_t **)(v7 + 8), *(unint64_t **)(v7 + 16));
    }
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  std::shared_lock<std::shared_mutex>::~shared_lock[abi:ne180100]((uint64_t)&v8);
  if ((void)v11 != *((void *)&v11 + 1))
  {
    long long v8 = v11;
    long long v11 = 0uLL;
    uint64_t v9 = v12;
    *(void *)&long long v12 = 0;
    unsigned int v10 = a2;
    operator new();
  }
  *(void *)&long long v8 = &v11;
  std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((AMCP::Utility::Dispatch_Queue *)v13);
}

void sub_1BAF90D3C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ***std::unique_ptr<void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100](void ***result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v2);
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void ***applesauce::dispatch::v1::async<void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1}>(dispatch_queue_s *,void AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1} &&)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v5 = (void **)a1;
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(a1 + 8);
  if (*(void **)a1 != v2)
  {
    do
    {
      std::function<void ()>::operator()(v1[4], *(_DWORD *)(a1 + 32));
      v1 += 5;
    }
    while (v1 != v2);
  }
  return std::unique_ptr<void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100](&v5);
}

void sub_1BAF90E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<void AMCP::Observer::Map<std::function<void ()>,unsigned int,true,std::less<unsigned int>>::call_observers_async<unsigned int &>(AMCP::Utility::Dispatch_Queue const&,unsigned int const&,unsigned int &)::{lambda(void)#1},std::default_delete<std::default_delete>>::reset[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void *AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>>::insert_unique<std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int)>> const*>,std::__wrap_iter<std::tuple<unsigned long long,std::function<void ()(unsigned int)>> const*>>(void *result, unint64_t *a2, unint64_t *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (void **)result;
    do
    {
      unint64_t v6 = *v4;
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(*v5, v5[1], *v4))
      {
        *(void *)uint64_t v7 = v6;
        uint64_t result = std::function<void ()>::operator=((void *)(v7 + 8), (uint64_t)(v4 + 1));
      }
      else
      {
        uint64_t result = std::vector<std::tuple<unsigned long long,std::function<void ()>>>::insert(v5, (char *)v7, v4);
      }
      v4 += 5;
    }
    while (v4 != a3);
  }
  return result;
}

void *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>::insert(void *a1, char *a2, void *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = (char *)*a1;
  unint64_t v6 = a1[1];
  uint64_t v7 = (uint64_t)&a2[-*a1];
  uint64_t v8 = v7 / 40;
  uint64_t v9 = (void *)(*a1 + 40 * (v7 / 40));
  long long v11 = a1 + 2;
  unint64_t v10 = a1[2];
  if (v6 >= v10)
  {
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v6 - (void)v5) >> 3) + 1;
    if (v19 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v10 - (void)v5) >> 3);
    if (2 * v21 > v19) {
      unint64_t v19 = 2 * v21;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v19;
    }
    uint64_t v58 = v11;
    if (v22)
    {
      unint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v22);
    }
    else
    {
      unint64_t v24 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v25 = &v24[40 * v8];
    long long v55 = v24;
    *(void *)&long long v56 = v25;
    *((void *)&v56 + 1) = v25;
    uint64_t v57 = &v24[40 * v23];
    if (v8 == v23)
    {
      if (v7 < 1)
      {
        if (v5 == a2) {
          unint64_t v29 = 1;
        }
        else {
          unint64_t v29 = 2 * v8;
        }
        uint64_t v62 = v11;
        unint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v29);
        unint64_t v31 = v30;
        unint64_t v32 = &v30[40 * (v29 >> 2)];
        unint64_t v34 = &v30[40 * v33];
        if (*((void *)&v56 + 1) == (void)v56)
        {
          int64x2_t v40 = vdupq_n_s64(v56);
          uint64_t v36 = &v30[40 * (v29 >> 2)];
        }
        else
        {
          uint64_t v35 = (*((void *)&v56 + 1) - (void)v56) / 40;
          uint64_t v36 = &v32[40 * v35];
          uint64_t v37 = 40 * v35;
          uint64_t v38 = (uint64_t)&v30[40 * (v29 >> 2) + 8];
          uint64_t v39 = v56 + 8;
          do
          {
            *(void *)(v38 - 8) = *(void *)(v39 - 8);
            uint64_t v38 = std::__function::__value_func<void ()>::__value_func[abi:ne180100](v38, v39) + 40;
            v39 += 40;
            v37 -= 40;
          }
          while (v37);
          int64x2_t v40 = (int64x2_t)v56;
        }
        uint64_t v41 = v57;
        uint64_t v59 = v55;
        long long v55 = v31;
        *(void *)&long long v56 = v32;
        int64x2_t v60 = v40;
        *((void *)&v56 + 1) = v36;
        uint64_t v57 = v34;
        uint64_t v61 = v41;
        std::__split_buffer<std::tuple<unsigned long long,std::function<void ()>>>::~__split_buffer((uint64_t)&v59);
        uint64_t v25 = v36;
      }
      else
      {
        uint64_t v26 = v8 + 2;
        if (v8 >= -1) {
          uint64_t v26 = v8 + 1;
        }
        v25 -= 40 * (v26 >> 1);
        *(void *)&long long v56 = v25;
        *((void *)&v56 + 1) = v25;
      }
    }
    *(void *)uint64_t v25 = *v3;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(v25 + 8), (uint64_t)(v3 + 1));
    uint64_t v42 = v56;
    int64_t v43 = (void *)(*((void *)&v56 + 1) + 40);
    *((void *)&v56 + 1) += 40;
    unint64_t v44 = (char *)*a1;
    if ((void *)*a1 == v9)
    {
      uint64_t v46 = v56;
    }
    else
    {
      uint64_t v45 = (char *)v9;
      uint64_t v46 = v56;
      do
      {
        uint64_t v47 = *((void *)v45 - 5);
        v45 -= 40;
        *(void *)(v46 - 40) = v47;
        v46 -= 40;
        std::__function::__value_func<void ()>::__value_func[abi:ne180100](v46 + 8, (uint64_t)(v45 + 8));
      }
      while (v45 != v44);
      int64_t v43 = (void *)*((void *)&v56 + 1);
    }
    *(void *)&long long v56 = v46;
    unint64_t v48 = (void *)a1[1];
    if (v48 != v9)
    {
      do
      {
        uint64_t v49 = (uint64_t)(v9 + 1);
        uint64_t v50 = *v9;
        v9 += 5;
        uint64_t v51 = (uint64_t)(v43 + 1);
        *int64_t v43 = v50;
        v43 += 5;
        std::__function::__value_func<void ()>::__value_func[abi:ne180100](v51, v49);
      }
      while (v9 != v48);
      uint64_t v46 = v56;
      uint64_t v9 = (void *)a1[1];
    }
    uint64_t v52 = (char *)*a1;
    *a1 = v46;
    a1[1] = v43;
    uint64_t v53 = (char *)a1[2];
    a1[2] = v57;
    *((void *)&v56 + 1) = v9;
    uint64_t v57 = v53;
    long long v55 = v52;
    *(void *)&long long v56 = v52;
    std::__split_buffer<std::tuple<unsigned long long,std::function<void ()>>>::~__split_buffer((uint64_t)&v55);
    return (void *)v42;
  }
  else if (v9 == (void *)v6)
  {
    *uint64_t v9 = *a3;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(v9 + 1), (uint64_t)(a3 + 1));
    a1[1] = v9 + 5;
  }
  else
  {
    long long v12 = v9 + 5;
    long long v13 = (void *)(v6 - 40);
    if (v6 < 0x28)
    {
      uint64_t v15 = (void *)a1[1];
    }
    else
    {
      uint64_t v14 = (uint64_t *)(v6 - 40);
      uint64_t v15 = (void *)a1[1];
      do
      {
        uint64_t v16 = (uint64_t)(v14 + 1);
        uint64_t v17 = *v14;
        v14 += 5;
        uint64_t v18 = (uint64_t)(v15 + 1);
        *uint64_t v15 = v17;
        v15 += 5;
        std::__function::__value_func<void ()>::__value_func[abi:ne180100](v18, v16);
      }
      while ((unint64_t)v14 < v6);
    }
    a1[1] = v15;
    if ((void *)v6 != v12)
    {
      uint64_t v27 = 8 * ((uint64_t)(v6 - (void)v12) >> 3);
      uint64_t v28 = (uint64_t)&v5[40 * v8 - 40];
      do
      {
        std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>,std::tuple<unsigned long long,std::function<void ()>>,unsigned long long,std::function<void ()>,0ul,1ul>(v13, (void *)(v28 + v27));
        v13 -= 5;
        v27 -= 40;
      }
      while (v27);
    }
    if (v9 <= v3) {
      v3 += 5 * (a1[1] > (unint64_t)v3);
    }
    *uint64_t v9 = *v3;
    std::function<void ()>::operator=(v9 + 1, (uint64_t)(v3 + 1));
  }
  return v9;
}

void sub_1BAF9124C(_Unwind_Exception *exception_object)
{
  *(void *)(v2 + 8) = v1;
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100]((void *)(i - 32));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,unsigned long long,std::function<void ()(unsigned int)>,0ul,1ul>(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a1 + 1;
  uint64_t result = std::__function::__value_func<void ()>::operator=[abi:ne180100](a1 + 1);
  unint64_t v6 = a2 + 4;
  uint64_t v7 = (void *)a2[4];
  if (!v7)
  {
    unint64_t v6 = a1 + 4;
    goto LABEL_5;
  }
  if (v7 != a2 + 1)
  {
    a1[4] = v7;
LABEL_5:
    void *v6 = 0;
    return result;
  }
  a1[4] = v4;
  return (void *)(*(uint64_t (**)(void, void *))(*(void *)*v6 + 24))(*v6, v4);
}

unint64_t AMCP::Observer::Map<std::function<void ()(unsigned int)>,unsigned int,true,std::less<unsigned int>>::register_observer(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  uint64_t v75 = a1;
  char v76 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)a1);
  if (*(unsigned char *)(a1 + 168))
  {
    unint64_t add = atomic_fetch_add(&AMCP::Observer::Implementation::get_next_token(void)::s_next_token, 1uLL);
    if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(*(_DWORD **)(a1 + 176), *(_DWORD **)(a1 + 184), *a2))
    {
      uint64_t v8 = v7;
      *(void *)&long long v82 = add;
      uint64_t v9 = (char *)&v82 + 8;
      std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)&v82 + 8, a3);
      unint64_t v10 = *(void **)(v8 + 8);
      long long v11 = *(void **)(v8 + 16);
      long long v12 = (void *)(v8 + 8);
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find(v10, v11, add))
      {
        *(void *)uint64_t v13 = add;
        std::function<void ()>::operator=((void *)(v13 + 8), (uint64_t)&v82 + 8);
      }
      else
      {
        std::vector<std::tuple<unsigned long long,std::function<void ()>>>::insert(v12, (char *)v13, &v82);
      }
      goto LABEL_54;
    }
    unint64_t v80 = add;
    uint64_t v9 = v81;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)v81, a3);
    long long v69 = 0uLL;
    uint64_t v70 = 0;
    *(void *)&long long v82 = &v69;
    BYTE8(v82) = 0;
    uint64_t v14 = operator new(0x28uLL);
    *(void *)&long long v69 = v14;
    *((void *)&v69 + 1) = v14;
    uint64_t v15 = v14 + 5;
    uint64_t v70 = v14 + 5;
    *uint64_t v14 = v80;
    std::__function::__value_func<void ()>::__value_func[abi:ne180100]((uint64_t)(v14 + 1), (uint64_t)v81);
    uint64_t v16 = v70;
    *((void *)&v69 + 1) = v15;
    uint64_t v70 = 0;
    v71[0] = *a2;
    unsigned int v17 = v71[0];
    long long v72 = v69;
    long long v69 = 0uLL;
    uint64_t v73 = v16;
    unint64_t v19 = *(_DWORD **)(a1 + 176);
    unint64_t v18 = *(void *)(a1 + 184);
    BOOL v20 = AMCP::Utility::Sorted_Vector<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>,0ul>,std::less<unsigned int>,std::allocator<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::pair<std::function<std::pair<AMCP::Graph_Description,AMCP::Modify_Graph_Destroy_List> ()(void)>,std::function<void ()(AMCP::Graph_Description const&)>>>>>>>>::find(v19, (_DWORD *)v18, v71[0]);
    unint64_t v22 = (unint64_t)v21;
    if (v20)
    {
      *unint64_t v21 = v17;
      uint64_t v23 = &v72;
    }
    else
    {
      unint64_t v24 = *(void *)(a1 + 192);
      if (v18 >= v24)
      {
        unint64_t v30 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)v19) >> 3) + 1;
        if (v30 > 0x666666666666666) {
          std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v24 - (void)v19) >> 3);
        if (2 * v31 > v30) {
          unint64_t v30 = 2 * v31;
        }
        if (v31 >= 0x333333333333333) {
          unint64_t v32 = 0x666666666666666;
        }
        else {
          unint64_t v32 = v30;
        }
        uint64_t v79 = a1 + 192;
        if (v32) {
          unint64_t v32 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v32);
        }
        else {
          uint64_t v33 = 0;
        }
        int64_t v43 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (void)v19) >> 3);
        unint64_t v44 = v32 + 8 * ((uint64_t)(v22 - (void)v19) >> 3);
        *(void *)&long long v77 = v32;
        *((void *)&v77 + 1) = v44;
        *(void *)&long long v78 = v44;
        *((void *)&v78 + 1) = v32 + 40 * v33;
        if (v43 == v33)
        {
          if ((uint64_t)(v22 - (void)v19) < 1)
          {
            if ((_DWORD *)v22 == v19) {
              unint64_t v46 = 1;
            }
            else {
              unint64_t v46 = 0x999999999999999ALL * ((uint64_t)(v22 - (void)v19) >> 3);
            }
            uint64_t v84 = a1 + 192;
            uint64_t v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CA::StreamDescription>>(v46);
            unint64_t v48 = &v47[40 * (v46 >> 2)];
            *(void *)&long long v82 = v47;
            *((void *)&v82 + 1) = v48;
            *((void *)&v83 + 1) = &v47[40 * v49];
            uint64_t v50 = *((void *)&v77 + 1);
            if ((void)v78 != *((void *)&v77 + 1))
            {
              uint64_t v51 = &v48[v78 - *((void *)&v77 + 1)];
              do
              {
                *(_DWORD *)unint64_t v48 = *(_DWORD *)v50;
                *((void *)v48 + 2) = 0;
                *((void *)v48 + 3) = 0;
                *((void *)v48 + 1) = 0;
                *((void *)v48 + 1) = *(void *)(v50 + 8);
                *(void *)(v50 + 8) = 0;
                uint64_t v52 = *((void *)v48 + 2);
                *((void *)v48 + 2) = *(void *)(v50 + 16);
                *(void *)(v50 + 16) = v52;
                uint64_t v53 = *((void *)v48 + 3);
                *((void *)v48 + 3) = *(void *)(v50 + 24);
                *(void *)(v50 + 24) = v53;
                v48 += 40;
                v50 += 40;
              }
              while (v48 != v51);
              unint64_t v48 = v51;
            }
            *(void *)&long long v83 = v48;
            long long v54 = v77;
            long long v55 = v78;
            long long v77 = v82;
            long long v78 = v83;
            long long v82 = v54;
            long long v83 = v55;
            std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>>>::~__split_buffer((uint64_t)&v82);
            unint64_t v44 = v78;
          }
          else
          {
            if (v43 >= -1) {
              uint64_t v45 = v43 + 1;
            }
            else {
              uint64_t v45 = v43 + 2;
            }
            v44 -= 40 * (v45 >> 1);
            *((void *)&v77 + 1) = v44;
            *(void *)&long long v78 = v44;
          }
        }
        *(_DWORD *)unint64_t v44 = v71[0];
        *(void *)(v44 + 16) = 0;
        *(void *)(v44 + 24) = 0;
        *(void *)(v44 + 8) = 0;
        std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>((void *)(v44 + 8), v72, *((uint64_t *)&v72 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v72 + 1) - v72) >> 3));
        *(_WORD *)(v44 + 32) = v74;
        long long v56 = (void *)*((void *)&v77 + 1);
        uint64_t v57 = v78 + 40;
        *(void *)&long long v78 = v78 + 40;
        uint64_t v58 = *(void **)(a1 + 176);
        if ((void *)v22 != v58)
        {
          uint64_t v59 = (void *)v22;
          do
          {
            int v60 = *((_DWORD *)v59 - 10);
            v59 -= 5;
            *((_DWORD *)v56 - 10) = v60;
            v56 -= 5;
            v56[2] = 0;
            v56[3] = 0;
            v56[1] = 0;
            v56[1] = v59[1];
            v59[1] = 0;
            uint64_t v61 = v56[2];
            v56[2] = v59[2];
            v59[2] = v61;
            uint64_t v62 = v56[3];
            v56[3] = v59[3];
            v59[3] = v62;
          }
          while (v59 != v58);
          uint64_t v57 = v78;
        }
        *((void *)&v77 + 1) = v56;
        uint64_t v63 = *(void *)(a1 + 184);
        if (v22 != v63)
        {
          do
          {
            *(_DWORD *)uint64_t v57 = *(_DWORD *)v22;
            *(void *)(v57 + 16) = 0;
            *(void *)(v57 + 24) = 0;
            *(void *)(v57 + 8) = 0;
            *(void *)(v57 + 8) = *(void *)(v22 + 8);
            *(void *)(v22 + 8) = 0;
            uint64_t v64 = *(void *)(v57 + 16);
            *(void *)(v57 + 16) = *(void *)(v22 + 16);
            *(void *)(v22 + 16) = v64;
            uint64_t v65 = *(void *)(v57 + 24);
            *(void *)(v57 + 24) = *(void *)(v22 + 24);
            *(void *)(v22 + 24) = v65;
            v57 += 40;
            v22 += 40;
          }
          while (v22 != v63);
          long long v56 = (void *)*((void *)&v77 + 1);
          unint64_t v22 = *(void *)(a1 + 184);
        }
        uint64_t v66 = *(void *)(a1 + 176);
        *(void *)(a1 + 176) = v56;
        *(void *)(a1 + 184) = v57;
        uint64_t v67 = *(void *)(a1 + 192);
        *(void *)(a1 + 192) = *((void *)&v78 + 1);
        *(void *)&long long v78 = v22;
        *((void *)&v78 + 1) = v67;
        *(void *)&long long v77 = v66;
        *((void *)&v77 + 1) = v66;
        std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>>>::~__split_buffer((uint64_t)&v77);
        goto LABEL_53;
      }
      if (v21 == (unsigned int *)v18)
      {
        *(_DWORD *)unint64_t v18 = v17;
        *(void *)(v18 + 16) = 0;
        *(void *)(v18 + 24) = 0;
        *(void *)(v18 + 8) = 0;
        std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>((void *)(v18 + 8), v72, *((uint64_t *)&v72 + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v72 + 1) - v72) >> 3));
        *(_WORD *)(v18 + 32) = v74;
        *(void *)(a1 + 184) = v18 + 40;
        goto LABEL_53;
      }
      uint64_t v25 = v21 + 10;
      unint64_t v26 = v18 - 40;
      unint64_t v27 = v18;
      while (v26 < v18)
      {
        *(_DWORD *)unint64_t v27 = *(_DWORD *)v26;
        *(void *)(v27 + 16) = 0;
        *(void *)(v27 + 24) = 0;
        *(void *)(v27 + 8) = 0;
        *(void *)(v27 + 8) = *(void *)(v26 + 8);
        *(void *)(v26 + 8) = 0;
        uint64_t v28 = *(void *)(v27 + 16);
        *(void *)(v27 + 16) = *(void *)(v26 + 16);
        *(void *)(v26 + 16) = v28;
        uint64_t v29 = *(void *)(v27 + 24);
        *(void *)(v27 + 24) = *(void *)(v26 + 24);
        *(void *)(v26 + 24) = v29;
        v27 += 40;
        v26 += 40;
      }
      *(void *)(a1 + 184) = v27;
      if ((_DWORD *)v18 != v25)
      {
        unint64_t v34 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (void)v25) >> 3);
        uint64_t v35 = (void *)(v18 - 16);
        uint64_t v36 = 10 * v34;
        do
        {
          uint64_t v37 = &v21[v36];
          *((_DWORD *)v35 - 6) = v21[v36 - 10];
          uint64_t v38 = *(v35 - 2);
          *(v35 - 2) = *(void *)&v21[v36 - 8];
          *((void *)v37 - 4) = v38;
          uint64_t v39 = *(v35 - 1);
          *(v35 - 1) = *(void *)&v21[v36 - 6];
          *((void *)v37 - 3) = v39;
          uint64_t v40 = *v35;
          void *v35 = *(void *)&v21[v36 - 4];
          v35 -= 5;
          *((void *)v37 - 2) = v40;
          v36 -= 10;
        }
        while (v36 * 4);
      }
      uint64_t v41 = v71;
      if (v22 <= (unint64_t)v71) {
        uint64_t v41 = &v71[10 * (*(void *)(a1 + 184) > (unint64_t)v71)];
      }
      unsigned int v42 = *v41;
      uint64_t v23 = (long long *)(v41 + 2);
      *(_DWORD *)unint64_t v22 = v42;
    }
    AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()>>>>::operator=(v22 + 8, (uint64_t)v23);
LABEL_53:
    *(void *)&long long v82 = &v72;
    std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
    *(void *)&long long v82 = &v69;
    std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v82);
LABEL_54:
    std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v9);
    goto LABEL_55;
  }
  unint64_t add = 0;
LABEL_55:
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v75);
  return add;
}

void sub_1BAF91944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void **a20)
{
  *(void *)(v21 + 184) = v22;
  std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&a20);
  a20 = (void **)&a9;
  std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&a20);
  std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v20);
  std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(uint64_t **)a2;
    uint64_t v4 = *(void *)(a2 + 8);
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *(void *)a2) >> 3);
    uint64_t v7 = *(void *)(a1 + 16);
    uint64_t v8 = *(void **)a1;
    if (0xCCCCCCCCCCCCCCCDLL * ((v7 - *(void *)a1) >> 3) < v6)
    {
      if (v8)
      {
        uint64_t v9 = *(void **)(a1 + 8);
        unint64_t v10 = *(void **)a1;
        if (v9 != v8)
        {
          do
          {
            long long v11 = v9 - 5;
            std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v9 - 4);
            uint64_t v9 = v11;
          }
          while (v11 != v8);
          unint64_t v10 = *(void **)a1;
        }
        *(void *)(a1 + 8) = v8;
        operator delete(v10);
        uint64_t v7 = 0;
        *(void *)a1 = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
      }
      if (v6 > 0x666666666666666) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
      uint64_t v13 = 2 * v12;
      if (2 * v12 <= v6) {
        uint64_t v13 = v6;
      }
      if (v12 >= 0x333333333333333) {
        unint64_t v14 = 0x666666666666666;
      }
      else {
        unint64_t v14 = v13;
      }
      std::vector<CA::StreamDescription>::__vallocate[abi:ne180100]((void *)a1, v14);
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()>>>,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>((uint64_t)v5, v4, *(void *)(a1 + 8));
LABEL_21:
      *(void *)(a1 + 8) = v15;
      goto LABEL_28;
    }
    uint64_t v16 = *(void **)(a1 + 8);
    if (0xCCCCCCCCCCCCCCCDLL * (v16 - v8) < v6)
    {
      uint64_t v17 = (uint64_t)&v5[v16 - v8];
      if (v16 != v8)
      {
        unint64_t v18 = v8 + 1;
        uint64_t v19 = 8 * (v16 - v8);
        uint64_t v20 = (uint64_t)(v5 + 1);
        do
        {
          *(v18 - 1) = *(void *)(v20 - 8);
          unint64_t v18 = std::function<void ()>::operator=(v18, v20) + 5;
          v20 += 40;
          v19 -= 40;
        }
        while (v19);
        uint64_t v8 = *(void **)(a1 + 8);
      }
      uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()>>>,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>(v17, v4, (uint64_t)v8);
      goto LABEL_21;
    }
    if (v5 != (uint64_t *)v4)
    {
      do
      {
        uint64_t v21 = (uint64_t)(v5 + 1);
        uint64_t v22 = *v5;
        v5 += 5;
        uint64_t v23 = v8 + 1;
        *uint64_t v8 = v22;
        v8 += 5;
        std::function<void ()>::operator=(v23, v21);
      }
      while (v5 != (uint64_t *)v4);
      uint64_t v16 = *(void **)(a1 + 8);
    }
    if (v16 != v8)
    {
      do
      {
        unint64_t v24 = v16 - 5;
        std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v16 - 4);
        uint64_t v16 = v24;
      }
      while (v24 != v8);
    }
    *(void *)(a1 + 8) = v8;
  }
LABEL_28:
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  return a1;
}

void sub_1BAF91BAC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::tuple<unsigned int,AMCP::Utility::Sorted_Vector_Map<unsigned long long,std::function<void ()(unsigned int)>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>>>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
    uint64_t v5 = (void **)(i - 32);
    std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>::__init_with_size[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    std::vector<CA::StreamDescription>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()>>>,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*,std::tuple<unsigned long long,std::function<void ()>>*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1BAF91C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int)>>>,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*,std::tuple<unsigned long long,std::function<void ()(unsigned int)>>*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      *(void *)(a3 + v6) = *(void *)(a1 + v6);
      std::__function::__value_func<void ()>::__value_func[abi:ne180100](a3 + v6 + 8, a1 + v6 + 8);
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t AMCP::Core::Conductor::destroy_control_value_observer(AMCP::Core::Conductor *this, unint64_t a2)
{
  uint64_t v17 = (char *)this + 2432;
  char v18 = 1;
  std::__shared_mutex_base::lock((std::__shared_mutex_base *)((char *)this + 2432));
  if (*((unsigned char *)this + 2600))
  {
    uint64_t v4 = (void *)*((void *)this + 326);
    uint64_t v5 = (void *)*((void *)this + 327);
    while (v4 != v5)
    {
      uint64_t v6 = (void *)v4[2];
      if (AMCP::Utility::Sorted_Vector<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,AMCP::Utility::Extract_Key_Get_N<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>,0ul>,std::less<unsigned long long>,std::allocator<std::tuple<unsigned long long,std::function<void ()(unsigned int,BOOL,std::tuple<std::vector<unsigned int>,std::vector<unsigned int>,boost::container::flat_map<unsigned int,std::tuple<boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>,boost::container::flat_map<AMCP::Address,AMCP::Thing,AMCP::Address::Is_Exact_Before,void>>,std::less<unsigned int>,void>> const&)>>>>::find((void *)v4[1], v6, a2))
      {
        uint64_t v8 = v7;
        if (v7 + 5 != v6)
        {
          do
          {
            uint64_t v9 = v8 + 5;
            std::__memberwise_forward_assign[abi:ne180100]<std::tuple<unsigned long long,std::function<void ()>>,std::tuple<unsigned long long,std::function<void ()>>,unsigned long long,std::function<void ()>,0ul,1ul>(v8, v8 + 5);
            uint64_t v10 = v8 + 10;
            v8 += 5;
          }
          while (v10 != v6);
          uint64_t v6 = (void *)v4[2];
          uint64_t v8 = v9;
        }
        for (; v6 != v8; v6 -= 5)
          std::__function::__value_func<void ()>::~__value_func[abi:ne180100](v6 - 4);
        v4[2] = v8;
        if ((void *)v4[1] == v8)
        {
          long long v11 = v4 + 5;
          unint64_t v12 = (void *)*((void *)this + 327);
          if (v4 + 5 != v12)
          {
            do
            {
              uint64_t v4 = v11;
              *((_DWORD *)v11 - 10) = *(_DWORD *)v11;
              long long v13 = *((_OWORD *)v11 - 2);
              *((_OWORD *)v11 - 2) = *(_OWORD *)(v11 + 1);
              *(_OWORD *)(v11 + 1) = v13;
              uint64_t v14 = *(v11 - 2);
              *(v4 - 2) = v4[3];
              void v4[3] = v14;
              long long v11 = v4 + 5;
            }
            while (v4 + 5 != v12);
            long long v11 = (void *)*((void *)this + 327);
          }
          if (v11 != v4)
          {
            do
            {
              uint64_t v15 = v11 - 5;
              uint64_t v19 = (void **)(v11 - 4);
              std::vector<std::tuple<unsigned long long,std::function<void ()>>>::__destroy_vector::operator()[abi:ne180100](&v19);
              long long v11 = v15;
            }
            while (v15 != v4);
          }
          *((void *)this + 327) = v4;
        }
        return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
      }
      v4 += 5;
    }
  }
  return std::unique_lock<std::shared_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v17);
}

uint64_t CACFDictionary::GetBool(uint64_t this, const __CFString *a2, BOOL *a3)
{
  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      CFBooleanRef v4 = (const __CFBoolean *)this;
      CFTypeID v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFBooleanGetTypeID())
      {
        this = CFBooleanGetValue(v4);
        BOOL v6 = this == 0;
      }
      else
      {
        CFTypeID v7 = CFGetTypeID(v4);
        this = CFNumberGetTypeID();
        if (v7 != this) {
          return this;
        }
        int valuePtr = 0;
        this = CFNumberGetValue(v4, kCFNumberSInt32Type, &valuePtr);
        BOOL v6 = valuePtr == 0;
      }
      BOOL v8 = !v6;
      *a3 = v8;
    }
  }
  return this;
}

const __CFDictionary *CACFDictionary::GetSInt32(const __CFDictionary *this, const __CFString *a2, int *a3)
{
  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, a2);
    if (this)
    {
      CFNumberRef v4 = this;
      CFTypeID v5 = CFGetTypeID(this);
      this = (const __CFDictionary *)CFNumberGetTypeID();
      if ((const __CFDictionary *)v5 == this)
      {
        return (const __CFDictionary *)CFNumberGetValue(v4, kCFNumberSInt32Type, a3);
      }
    }
  }
  return this;
}

uint64_t CACFDictionary::GetUInt32(uint64_t this, const __CFString *a2, unsigned int *a3)
{
  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      CFNumberRef v4 = (const __CFNumber *)this;
      CFTypeID v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v4, kCFNumberSInt32Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CACFDictionary::GetUInt64(uint64_t this, const __CFString *a2, unint64_t *a3)
{
  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      CFNumberRef v4 = (const __CFNumber *)this;
      CFTypeID v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFNumberGetTypeID())
      {
        CFNumberGetValue(v4, kCFNumberSInt64Type, a3);
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

double CACFDictionary::GetFixed64(CACFDictionary *this, const __CFString *a2, double *a3)
{
  if (this)
  {
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(this, a2);
    if (Value)
    {
      CFNumberRef v6 = Value;
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr);
        double result = (double)valuePtr * 2.32830644e-10 + (double)(valuePtr >> 32);
        *a3 = result;
      }
    }
  }
  return result;
}

uint64_t CACFDictionary::GetArray(uint64_t this, const __CFString *a2, const __CFArray **a3)
{
  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      CFArrayRef v4 = (const __CFArray *)this;
      CFTypeID v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFArrayGetTypeID())
      {
        *a3 = v4;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CACFDictionary::GetDictionary(uint64_t this, const __CFString *a2, const __CFDictionary **a3)
{
  if (this)
  {
    this = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)this, a2);
    if (this)
    {
      CFDictionaryRef v4 = (const __CFDictionary *)this;
      CFTypeID v5 = CFGetTypeID((CFTypeRef)this);
      if (v5 == CFDictionaryGetTypeID())
      {
        *a3 = v4;
        return 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return this;
}

const __CFDictionary *CACFDictionary::GetCACFString(const __CFDictionary **this, const __CFString *key, CFTypeRef *a3)
{
  if (*a3)
  {
    if (*((unsigned char *)a3 + 8)) {
      CFRelease(*a3);
    }
    *a3 = 0;
  }
  *((unsigned char *)a3 + 8) = 1;
  CFDictionaryRef result = *this;
  if (*this)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, key);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      CFDictionaryRef result = (const __CFDictionary *)CFStringGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        return (const __CFDictionary *)CACFString::operator=((uint64_t)a3, v7);
      }
    }
  }
  return result;
}

const __CFDictionary *CACFDictionary::GetCACFArray(const __CFDictionary **this, const __CFString *a2, CACFArray *a3)
{
  CACFDictionary::operator=((uint64_t)a3, 0);
  CFDictionaryRef result = *this;
  if (*this)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      CFDictionaryRef result = (const __CFDictionary *)CFArrayGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        return (const __CFDictionary *)CACFDictionary::operator=((uint64_t)a3, v7);
      }
    }
  }
  return result;
}

const __CFDictionary *CACFDictionary::GetCACFDictionary(const __CFDictionary **this, const __CFString *a2, CACFDictionary *a3)
{
  CACFDictionary::operator=((uint64_t)a3, 0);
  CFDictionaryRef result = *this;
  if (*this)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef v7 = result;
      CFTypeID v8 = CFGetTypeID(result);
      CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetTypeID();
      if ((const __CFDictionary *)v8 == result)
      {
        return (const __CFDictionary *)CACFDictionary::operator=((uint64_t)a3, v7);
      }
    }
  }
  return result;
}

void CACFDictionary::AddUInt32(CFMutableDictionaryRef *this, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v6 = v5;
  char v7 = 1;
  if (*((unsigned char *)this + 9) && v5 && *this) {
    CFDictionarySetValue(*this, a2, v5);
  }
  CACFNumber::~CACFNumber((CACFNumber *)&v6);
}

void sub_1BAF92430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  CACFNumber::~CACFNumber((CACFNumber *)va);
  _Unwind_Resume(a1);
}

caulk::rt_safe_memory_resource *AMCP::Utility::AudioBufferList_Create(AMCP::Utility *this)
{
  int v1 = (int)this;
  CFDictionaryRef result = (caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88];
  if (*MEMORY[0x1E4FB7E88])
  {
    uint64_t v3 = (_DWORD *)caulk::rt_safe_memory_resource::rt_allocate(result);
    bzero(v3, (16 * v1) | 8u);
    if (v3) {
      *uint64_t v3 = v1;
    }
    return (caulk::rt_safe_memory_resource *)v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t AMCP::get_driver_property_traits_list(AMCP *this)
{
  {
    AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr = 0;
  }
  if (atomic_load_explicit((atomic_ullong *volatile)&AMCP::get_driver_property_traits_list(void)::once, memory_order_acquire) != -1)
  {
    CFDictionaryRef v4 = &v2;
    uint64_t v3 = &v4;
    std::__call_once(&AMCP::get_driver_property_traits_list(void)::once, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_driver_property_traits_list(void)::$_0 &&>>);
  }
  return AMCP::get_driver_property_traits_list(void)::s_indesctructible_property_traits_list_ptr;
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<AMCP::get_driver_property_traits_list(void)::$_0 &&>>()
{
  v21[6] = *MEMORY[0x1E4F143B8];
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v0, 1768189556, 1, 1, 0, &AMCP::Property_Traits<1768189556u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1650682995u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v1, 1650682995, 1, 1, 0, &AMCP::Property_Traits<1650682995u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668047219u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v2, 1668047219, 1, 1, 0, &AMCP::Property_Traits<1668047219u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870098034u>::k_valid_scopes, 0, 0, 6);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v3, 1870098034, 1, 1, 0, &AMCP::Property_Traits<1870098034u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1869638759u>::k_valid_scopes, 0, 0, 15);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v4, 1869638759, 1, 1, 0, &AMCP::Property_Traits<1869638759u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1870097955u>::k_valid_scopes, 0, 1869638759, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v5, 1870097955, 1, 0, 0, &AMCP::Property_Traits<1870097955u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819173229u>::k_valid_scopes, 0, 1870098020, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v6, 1819173229, 0, 0, 1, &AMCP::Property_Traits<1819173229u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819111268u>::k_valid_scopes, 0, 1819173229, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v7, 1819111268, 0, 0, 0, &AMCP::Property_Traits<1819111268u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1819107691u>::k_valid_scopes, 0, 1819111268, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v8, 1819107691, 0, 0, 0, &AMCP::Property_Traits<1819107691u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1768124270u>::k_valid_scopes, 0, 1819107691, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v9, 1768124270, 0, 0, 0, &AMCP::Property_Traits<1768124270u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1667330160u>::k_valid_scopes, 0, 1768124270, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v10, 1667330160, 0, 0, 0, &AMCP::Property_Traits<1667330160u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1936618861u>::k_valid_scopes, 0, 1667330160, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v11, 1936618861, 0, 0, 0, &AMCP::Property_Traits<1936618861u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1719105134u>::k_valid_scopes, 0, 1936618861, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v12, 1719105134, 0, 0, 0, &AMCP::Property_Traits<1719105134u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818454126u>::k_valid_scopes, 0, 1719105134, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v13, 1818454126, 0, 0, 0, AMCP::Property_Traits<1818454126u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818452846u>::k_valid_scopes, -1, 1818454126, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v14, 1818452846, 0, 0, 0, AMCP::Property_Traits<1818452846u>::k_valid_scopes, (uint64_t)AMCP::Property_Traits<1818455662u>::k_valid_scopes, -1, 1818452846, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v15, 1818455662, 0, 0, 0, AMCP::Property_Traits<1818455662u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1920168547u>::k_valid_scopes, -1, 1818455662, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v16, 1920168547, 0, 0, 0, &AMCP::Property_Traits<1920168547u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668575852u>::k_valid_scopes, 0, 0, 5);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v17, 1668575852, 0, 0, 0, &AMCP::Property_Traits<1668575852u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1885956452u>::k_valid_scopes, 0, 1668575852, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v18, 1885956452, 1, 1, 0, &AMCP::Property_Traits<1885956452u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1651472419u>::k_valid_scopes, 0, 1885956452, 4);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v19, 1651472419, 1, 0, 0, &AMCP::Property_Traits<1651472419u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1668049699u>::k_valid_scopes, 0, 1651472419, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)&v20, 1668049699, 1, 0, 0, &AMCP::Property_Traits<1668049699u>::k_valid_scopes, (uint64_t)&AMCP::Property_Traits<1684370979u>::k_valid_scopes, 0, 1668049699, 14);
  AMCP::Live_Property_Traits::Live_Property_Traits<unsigned int const*>((uint64_t)v21, 1684370979, 1, 0, 0, &AMCP::Property_Traits<1684370979u>::k_valid_scopes, (uint64_t)"N14mcp_applesauce2CF15PropertyListRefE", 0, 1684370979, 14);
  operator new();
}

void sub_1BAF92B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, char a14)
{
  uint64_t v16 = v15;
  *(void *)(v14 + 8) = v16;
  std::vector<AMCP::Live_Property_Traits>::__destroy_vector::operator()[abi:ne180100](&a12);
  MEMORY[0x1C1859840](v14, 0x20C40960023A9);
  uint64_t v18 = 1056;
  while (1)
  {
    uint64_t v19 = *(void **)(&a14 + v18 - 40);
    if (v19)
    {
      *(void *)(&a14 + v18 - 32) = v19;
      operator delete(v19);
    }
    v18 -= 48;
    if (!v18) {
      _Unwind_Resume(a1);
    }
  }
}

void AMCP::DAL::demand_map(AMCP::DAL::DALSupport *a1)
{
  {
    if (a1)
    {
      AMCP::DAL::demand_map(void)::s_map = 0u;
      *(_OWORD *)&qword_1E9F7A528 = 0u;
      dword_1E9F7A538 = 1065353216;
    }
  }
  if ((AMCP::DAL::demand_map(void)::has_been_initialized & 1) == 0)
  {
    AMCP::DAL::demand_map(void)::has_been_initialized = 1;
    AMCP::DAL::DALSupport::initialize_data_handlers(a1);
  }
}

AMCP::DAL::DALSupport *AMCP::DAL::File::File(AMCP::DAL::DALSupport *a1, unsigned int a2, uint64_t a3)
{
  AMCP::DAL::demand_map(a1);
  if (!*((void *)&AMCP::DAL::demand_map(void)::s_map + 1)) {
    goto LABEL_17;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = a2;
    if (*((void *)&AMCP::DAL::demand_map(void)::s_map + 1) <= (unint64_t)a2) {
      unint64_t v7 = (unint64_t)a2 % *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
    }
  }
  else
  {
    unint64_t v7 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & a2;
  }
  uint64_t v8 = *(uint64_t ***)(AMCP::DAL::demand_map(void)::s_map + 8 * v7);
  if (!v8 || (uint64_t v9 = *v8) == 0)
  {
LABEL_17:
    *(void *)a1 = 0;
    *((void *)a1 + 1) = 0;
    return a1;
  }
  while (1)
  {
    unint64_t v10 = v9[1];
    if (v10 == a2) {
      break;
    }
    if (v6.u32[0] > 1uLL)
    {
      if (v10 >= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1)) {
        v10 %= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
      }
    }
    else
    {
      v10 &= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
    }
    if (v10 != v7) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v9 = (uint64_t *)*v9;
    if (!v9) {
      goto LABEL_17;
    }
  }
  if (*((_DWORD *)v9 + 4) != a2) {
    goto LABEL_16;
  }
  uint64_t v12 = v9[6];
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, a3);
  return a1;
}

void AMCP::DAL::File::~File(std::__shared_weak_count **this)
{
  ((void (*)(std::__shared_weak_count *))(*this)->__on_zero_shared_weak)(*this);
  uint64_t v2 = this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void *AMCP::DAL::File::set_file_handler_format(AMCP::DAL::DALSupport *a1, void *a2)
{
  unsigned int v4 = a1;
  v39[3] = *MEMORY[0x1E4F143B8];
  AMCP::DAL::demand_map(a1);
  unint64_t v5 = v4;
  unint64_t v6 = *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
  if (*((void *)&AMCP::DAL::demand_map(void)::s_map + 1))
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&AMCP::DAL::demand_map(void)::s_map + 8));
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      unint64_t v2 = v4;
      if (*((void *)&AMCP::DAL::demand_map(void)::s_map + 1) <= (unint64_t)v4) {
        unint64_t v2 = (unint64_t)v4 % *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
      }
    }
    else
    {
      unint64_t v2 = (DWORD2(AMCP::DAL::demand_map(void)::s_map) - 1) & v4;
    }
    uint64_t v8 = *(uint64_t **)(AMCP::DAL::demand_map(void)::s_map + 8 * v2);
    if (v8)
    {
      for (uint64_t i = *v8; i; uint64_t i = *(void *)i)
      {
        unint64_t v10 = *(void *)(i + 8);
        if (v10 == v4)
        {
          if (*(_DWORD *)(i + 16) == v4) {
            goto LABEL_74;
          }
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1)) {
              v10 %= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
            }
          }
          else
          {
            v10 &= *((void *)&AMCP::DAL::demand_map(void)::s_map + 1) - 1;
          }
          if (v10 != v2) {
            break;
          }
        }
      }
    }
  }
  uint64_t v11 = operator new(0x38uLL);
  v36[0] = v11;
  v36[1] = &qword_1E9F7A528;
  void *v11 = 0;
  v11[1] = v4;
  *((_DWORD *)v11 + 4) = v4;
  v11[6] = 0;
  char v37 = 1;
  float v12 = (float)(unint64_t)(qword_1E9F7A530 + 1);
  if (v6 && (float)(*(float *)&dword_1E9F7A538 * (float)v6) >= v12)
  {
    unint64_t v5 = v2;
    goto LABEL_64;
  }
  BOOL v13 = 1;
  if (v6 >= 3) {
    BOOL v13 = (v6 & (v6 - 1)) != 0;
  }
  unint64_t v14 = v13 | (2 * v6);
  unint64_t v15 = vcvtps_u32_f32(v12 / *(float *)&dword_1E9F7A538);
  if (v14 <= v15) {
    int8x8_t prime = (int8x8_t)v15;
  }
  else {
    int8x8_t prime = (int8x8_t)v14;
  }
  if (*(void *)&prime == 1)
  {
    int8x8_t prime = (int8x8_t)2;
  }
  else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
  {
    int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
    unint64_t v6 = *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
  }
  if (*(void *)&prime <= v6)
  {
    if (*(void *)&prime >= v6) {
      goto LABEL_60;
    }
    unint64_t v23 = vcvtps_u32_f32((float)(unint64_t)qword_1E9F7A530 / *(float *)&dword_1E9F7A538);
    if (v6 < 3 || (uint8x8_t v24 = (uint8x8_t)vcnt_s8((int8x8_t)v6), v24.i16[0] = vaddlv_u8(v24), v24.u32[0] > 1uLL))
    {
      unint64_t v23 = std::__next_prime(v23);
    }
    else
    {
      uint64_t v25 = 1 << -(char)__clz(v23 - 1);
      if (v23 >= 2) {
        unint64_t v23 = v25;
      }
    }
    if (*(void *)&prime <= v23) {
      int8x8_t prime = (int8x8_t)v23;
    }
    if (*(void *)&prime >= v6)
    {
      unint64_t v6 = *((void *)&AMCP::DAL::demand_map(void)::s_map + 1);
      goto LABEL_60;
    }
    if (!*(void *)&prime)
    {
      uint64_t v35 = (void *)AMCP::DAL::demand_map(void)::s_map;
      *(void *)&AMCP::DAL::demand_map(void)::s_map = 0;
      if (v35) {
        operator delete(v35);
      }
      unint64_t v6 = 0;
      *((void *)&AMCP::DAL::demand_map(void)::s_map + 1) = 0;
      goto LABEL_60;
    }
  }
  if (*(void *)&prime >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  uint64_t v17 = operator new(8 * *(void *)&prime);
  uint64_t v18 = (void *)AMCP::DAL::demand_map(void)::s_map;
  *(void *)&AMCP::DAL::demand_map(void)::s_map = v17;
  if (v18) {
    operator delete(v18);
  }
  uint64_t v19 = 0;
  *((int8x8_t *)&AMCP::DAL::demand_map(void)::s_map + 1) = prime;
  do
    *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v19++) = 0;
  while (*(void *)&prime != v19);
  uint64_t v20 = (void **)qword_1E9F7A528;
  if (qword_1E9F7A528)
  {
    unint64_t v21 = *(void *)(qword_1E9F7A528 + 8);
    uint8x8_t v22 = (uint8x8_t)vcnt_s8(prime);
    v22.i16[0] = vaddlv_u8(v22);
    if (v22.u32[0] > 1uLL)
    {
      if (v21 >= *(void *)&prime) {
        v21 %= *(void *)&prime;
      }
    }
    else
    {
      v21 &= *(void *)&prime - 1;
    }
    *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v21) = &qword_1E9F7A528;
    for (j = *v20; j; unint64_t v21 = v27)
    {
      unint64_t v27 = j[1];
      if (v22.u32[0] > 1uLL)
      {
        if (v27 >= *(void *)&prime) {
          v27 %= *(void *)&prime;
        }
      }
      else
      {
        v27 &= *(void *)&prime - 1;
      }
      if (v27 != v21)
      {
        if (!*(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v27))
        {
          *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v27) = v20;
          goto LABEL_56;
        }
        *uint64_t v20 = (void *)*j;
        *uint64_t j = **(void **)(AMCP::DAL::demand_map(void)::s_map + 8 * v27);
        **(void **)(AMCP::DAL::demand_map(void)::s_map + 8 * v27) = j;
        uint64_t j = v20;
      }
      unint64_t v27 = v21;
LABEL_56:
      uint64_t v20 = (void **)j;
      uint64_t j = (void *)*j;
    }
  }
  unint64_t v6 = (unint64_t)prime;
LABEL_60:
  if ((v6 & (v6 - 1)) != 0)
  {
    if (v6 <= v5) {
      v5 %= v6;
    }
  }
  else
  {
    unint64_t v5 = (v6 - 1) & v5;
  }
LABEL_64:
  uint64_t v28 = *(uint64_t **)(AMCP::DAL::demand_map(void)::s_map + 8 * v5);
  uint64_t i = v36[0];
  if (v28)
  {
    *(void *)v36[0] = *v28;
LABEL_72:
    *uint64_t v28 = i;
    goto LABEL_73;
  }
  *(void *)v36[0] = qword_1E9F7A528;
  qword_1E9F7A528 = i;
  *(void *)(AMCP::DAL::demand_map(void)::s_map + 8 * v5) = &qword_1E9F7A528;
  if (*(void *)i)
  {
    unint64_t v29 = *(void *)(*(void *)i + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v29 >= v6) {
        v29 %= v6;
      }
    }
    else
    {
      v29 &= v6 - 1;
    }
    uint64_t v28 = (uint64_t *)(AMCP::DAL::demand_map(void)::s_map + 8 * v29);
    goto LABEL_72;
  }
LABEL_73:
  v36[0] = 0;
  ++qword_1E9F7A530;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v36);
LABEL_74:
  unint64_t v30 = (void *)a2[3];
  if (v30)
  {
    if (v30 == a2)
    {
      uint64_t v38 = v36;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v36);
    }
    else
    {
      uint64_t v38 = (void *)(*(uint64_t (**)(void *))(*v30 + 16))(v30);
    }
  }
  else
  {
    uint64_t v38 = 0;
  }
  uint64_t v31 = i + 24;
  if ((void *)(i + 24) != v36)
  {
    unint64_t v32 = v38;
    uint64_t v33 = *(void *)(i + 48);
    if (v38 == v36)
    {
      if (v33 == v31)
      {
        (*(void (**)(void *, void *))(v36[0] + 24))(v36, v39);
        (*(void (**)(void *))(*v38 + 32))(v38);
        uint64_t v38 = 0;
        (*(void (**)(void, void *))(**(void **)(i + 48) + 24))(*(void *)(i + 48), v36);
        (*(void (**)(void))(**(void **)(i + 48) + 32))(*(void *)(i + 48));
        *(void *)(i + 48) = 0;
        uint64_t v38 = v36;
        (*(void (**)(void *, uint64_t))(v39[0] + 24))(v39, i + 24);
        (*(void (**)(void *))(v39[0] + 32))(v39);
      }
      else
      {
        (*(void (**)(void *, uint64_t))(v36[0] + 24))(v36, i + 24);
        (*(void (**)(void *))(*v38 + 32))(v38);
        uint64_t v38 = *(void **)(i + 48);
      }
      *(void *)(i + 48) = v31;
    }
    else if (v33 == v31)
    {
      (*(void (**)(uint64_t, void *))(*(void *)v31 + 24))(i + 24, v36);
      (*(void (**)(void))(**(void **)(i + 48) + 32))(*(void *)(i + 48));
      *(void *)(i + 48) = v38;
      uint64_t v38 = v36;
    }
    else
    {
      uint64_t v38 = *(void **)(i + 48);
      *(void *)(i + 48) = v32;
    }
  }
  return std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](v36);
}

void sub_1BAF934DC(_Unwind_Exception *exception_object)
{
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::function<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<std::shared_ptr<AMCP::DAL::DAL_File_Handler> ()(AMCP::DAL::DAL_Settings const&)>::~__value_func[abi:ne180100](v1 + 3);
    }
    operator delete(v1);
  }
}

void AMCP::DAL::create_timestamp_data(AMCP::DAL *this, const AMCP::DAL::DAL_Time *a2, const AMCP::DAL::DAL_Timed_Segment *a3, std::__shared_weak_count *a4)
{
  v23[8] = *MEMORY[0x1E4F143B8];
  if (a4) {
    atomic_fetch_add_explicit(&a4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *__return_ptr, const AMCP::DAL::DAL_Timed_Segment *))(*(void *)a3 + 40))(v17, a3);
  double sample_time = AMCP::DAL::DAL_Time::get_sample_time(a2);
  std::string::basic_string[abi:ne180100]<0>(v18, "current sample");
  v18[3] = vcvtmd_s64_f64(sample_time);
  memset(&v18[4], 0, 24);
  void v18[7] = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time(a2);
  std::string::basic_string[abi:ne180100]<0>(v19, "current host");
  void v19[3] = host_time;
  memset(&v19[4], 0, 24);
  void v19[7] = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  double v10 = (*(double (**)(const AMCP::DAL::DAL_Timed_Segment *))(*(void *)a3 + 160))(a3);
  std::string::basic_string[abi:ne180100]<0>(v20, "IO rate scalar");
  memset(&v20[4], 0, 24);
  *(double *)&v20[3] = v10;
  v20[7] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  uint64_t v11 = v17[1];
  std::string::basic_string[abi:ne180100]<0>(v21, "zts host");
  v21[3] = v11;
  memset(&v21[4], 0, 24);
  void v21[7] = AMCP::Implementation::In_Place_Storage<unsigned long long>::dispatch;
  double v12 = *(double *)v17;
  std::string::basic_string[abi:ne180100]<0>(v22, "zts sample");
  v22[3] = (uint64_t)v12;
  memset(&v22[4], 0, 24);
  v22[7] = AMCP::Implementation::In_Place_Storage<long long>::dispatch;
  std::string::basic_string[abi:ne180100]<0>(v23, "zts rate scalar");
  memset(&v23[4], 0, 24);
  v23[3] = v17[2];
  v23[7] = AMCP::Implementation::In_Place_Storage<double>::dispatch;
  v16[0] = (uint64_t)v18;
  v16[1] = 6;
  AMCP::DAL::DAL_Settings::DAL_Settings((unint64_t)this, v16);
  uint64_t v13 = 48;
  do
  {
    unint64_t v14 = &v18[v13];
    unint64_t v15 = (void (*)(void, void *, void, void))v17[v13 + 7];
    if (v15) {
      v15(0, v14 - 5, 0, 0);
    }
    if (*((char *)v14 - 41) < 0) {
      operator delete((void *)*(v14 - 8));
    }
    v13 -= 8;
  }
  while (v13 * 8);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
}

void sub_1BAF937E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  for (uint64_t i = 320; i != -64; i -= 64)
    std::pair<std::string,AMCP::Thing>::~pair((uint64_t)(&a20 + i));
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(a1);
}

void AMCP::DAL::generate_time_stamp(AMCP::DAL *this)
{
  time_t v3 = time(0);
  unint64_t v2 = localtime(&v3);
  caulk::make_string((caulk *)"%04d%02d%02d.%02d%02d%02d", (uint64_t)this, v2->tm_year, v2->tm_mon, v2->tm_mday, v2->tm_hour, v2->tm_min, v2->tm_sec);
}

float AMCP::DAL::DAL_Volume_Processor::set_ramp(uint64_t a1, float a2, double a3, double a4)
{
  float v4 = fmaxf(fminf(a2, 1.0), 0.0);
  *(float *)(a1 + 52) = v4;
  *(double *)(a1 + 56) = a3;
  if (round(a4) == 0.0)
  {
    double v5 = *(double *)(a1 + 40);
  }
  else
  {
    double v5 = *(double *)a1;
    if (a4 < *(double *)a1) {
      double v5 = a4;
    }
  }
  *(double *)(a1 + 64) = v5;
  double v6 = (v4 - *(float *)(a1 + 48)) / v5;
  double v7 = ceil(v6 * 1000000.0);
  double v8 = floor(v6 * 1000000.0);
  if (v6 <= 0.0) {
    double v9 = v8;
  }
  else {
    double v9 = v7;
  }
  float result = v9 / 1000000.0;
  *(float *)(a1 + 72) = result;
  return result;
}

HALS_IODevice *HALS_IOContextDescription_HostedDSP::LocalEngineStreamInfo::getDeviceFromEngine(HALS_IODevice *this)
{
  if (this)
  {
    this = (HALS_IODevice *)*((void *)this + 1);
    if (this)
    {
      this = (HALS_IODevice *)(*(uint64_t (**)(HALS_IODevice *))(*(void *)this + 320))(this);
      if (this)
      {
        uint64_t v1 = this;
        if (HALS_IODevice::GetNumberStreams(this, 1)) {
          return v1;
        }
        else {
          return 0;
        }
      }
    }
  }
  return this;
}

uint64_t HALS_IOContextDescription_HostedDSP::IsHostingInputDSP(void *a1, void **a2, void *a3)
{
  if (!a2) {
    return 0;
  }
  uint64_t v35 = 0;
  uint64_t v36 = (uint64_t)&v35;
  uint64_t v37 = 0x4002000000;
  uint64_t v38 = __Block_byref_object_copy__295;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  uint64_t v39 = __Block_byref_object_dispose__296;
  uint64_t v40 = &v41;
  uint64_t v27 = MEMORY[0x1E4F143A8];
  uint64_t v28 = 0x40000000;
  uint64_t v29 = (uint64_t)___ZNK11HALS_Device20GetDSPTypesForClientEbP11HALS_Client_block_invoke;
  unint64_t v30 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E6236408;
  uint64_t v31 = (uint64_t (*)(uint64_t))&v35;
  uint64_t v32 = (uint64_t)a2;
  char v34 = 1;
  uint64_t v33 = a3;
  double v6 = (HALB_Mutex *)((uint64_t (*)(void **))(*a2)[7])(a2);
  HALB_CommandGate::ExecuteCommand(v6, (uint64_t)&v27);
  std::set<DSP_Host_Types::AudioProcessingType>::set[abi:ne180100](&v25, (void *)(v36 + 40));
  _Block_object_dispose(&v35, 8);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v41);
  uint64_t v27 = 0;
  uint64_t v28 = (uint64_t)&v27;
  uint64_t v29 = 0x3002000000;
  unint64_t v30 = __Block_byref_object_copy__292;
  uint64_t v31 = __Block_byref_object_dispose__293;
  uint64_t v32 = 0;
  uint64_t v35 = MEMORY[0x1E4F143A8];
  uint64_t v36 = 0x40000000;
  uint64_t v37 = (uint64_t)___ZNK11HALS_Device31RationalizeDSPOffloadsForClientEbP11HALS_Client_block_invoke;
  uint64_t v38 = &unk_1E62363E0;
  uint64_t v39 = (void (*)(uint64_t))&v27;
  uint64_t v40 = a2;
  LOBYTE(v42) = 1;
  uint64_t v41 = a3;
  double v7 = (HALB_Mutex *)((uint64_t (*)(void **))(*a2)[7])(a2);
  HALB_CommandGate::ExecuteCommand(v7, (uint64_t)&v35);
  uint64_t v8 = *(void *)(v28 + 40);
  *(void *)(v28 + 40) = 0;
  _Block_object_dispose(&v27, 8);
  uint64_t v9 = v32;
  uint64_t v32 = 0;
  if (v9) {
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v9);
  }
  if (v8)
  {
    CFDictionaryRef v10 = *(const __CFDictionary **)(v8 + 16);
    if (v10)
    {
      if (CFDictionaryGetCount(v10)) {
        std::__tree<unsigned int>::__emplace_unique_key_args<unsigned int,unsigned int const&>(&v25, 8u, 8);
      }
    }
  }
  if (v26[1])
  {
    uint64_t v13 = (void *)*a1;
    double v12 = a1 + 1;
    uint64_t v11 = v13;
    if (v13 != v12)
    {
      while (1)
      {
        if (v26[0])
        {
          unsigned int v14 = *((_DWORD *)v11 + 7);
          unint64_t v15 = v26;
          uint64_t v16 = v26[0];
          do
          {
            uint64_t v17 = v16;
            uint64_t v18 = v15;
            unsigned int v19 = *((_DWORD *)v16 + 7);
            if (v19 >= v14) {
              unint64_t v15 = (void **)v16;
            }
            else {
              ++v16;
            }
            uint64_t v16 = (void *)*v16;
          }
          while (v16);
          if (v15 != v26)
          {
            if (v19 < v14) {
              uint64_t v17 = v18;
            }
            if (v14 >= *((_DWORD *)v17 + 7)) {
              break;
            }
          }
        }
        uint64_t v20 = (void *)v11[1];
        if (v20)
        {
          do
          {
            unint64_t v21 = v20;
            uint64_t v20 = (void *)*v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            unint64_t v21 = (void *)v11[2];
            BOOL v22 = *v21 == (void)v11;
            uint64_t v11 = v21;
          }
          while (!v22);
        }
        uint64_t v11 = v21;
        if (v21 == v12) {
          goto LABEL_26;
        }
      }
      uint64_t v23 = 1;
      if (!v8) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
LABEL_26:
  uint64_t v23 = 0;
  if (v8) {
LABEL_27:
  }
    std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v8);
LABEL_28:
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(v26[0]);
  return v23;
}

void sub_1BAF93CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  std::default_delete<DSP_Host_OffloadDictionary>::operator()[abi:ne180100](v11);
  std::__tree<DSP_Host_Types::AudioProcessingType>::destroy(a11);
  _Unwind_Resume(a1);
}

uint64_t *AMCP::DAL::PCM_File_Writer::close_file(AMCP::DAL::PCM_File_Writer *this)
{
  float result = (uint64_t *)*((void *)this + 6);
  if (result) {
    float result = (uint64_t *)ExtAudioFileDispose((ExtAudioFileRef)result);
  }
  if (*((unsigned char *)this + 160)) {
    float result = std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100]((uint64_t *)this + 21, 0);
  }
  *((void *)this + 6) = 0;
  return result;
}

uint64_t *std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *float result = a2;
  if (v2)
  {
    time_t v3 = *(caulk::rt_safe_memory_resource **)(v2 + 24);
    float v4 = *(caulk::rt_safe_memory_resource **)(v2 + 32);
    if (v3 == v4)
    {
      if (v3)
      {
        *(void *)(v2 + 32) = v3;
        std::allocator_traits<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>::deallocate[abi:ne180100](v3, 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(v2 + 40) - (void)v3) >> 3));
      }
      if (*(char *)(v2 + 23) < 0) {
        operator delete(*(void **)v2);
      }
    }
    else
    {
      double v5 = operator new(0x30uLL);
      *(_OWORD *)(v5 + 1) = 0u;
      *double v5 = &unk_1F1470698;
      uint64_t v5[3] = 0;
      *((_OWORD *)v5 + 2) = 0u;
      int64_t v6 = v4 - v3;
      if (0x8E38E38E38E38E39 * (v6 >> 3) >= 0x38E38E38E38E38FLL) {
        std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
      }
      double v7 = std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>((caulk::rt_safe_memory_resource *)(0x8E38E38E38E38E39 * (v6 >> 3)));
      uint64_t v5[3] = v7;
      v5[4] = v7;
      v5[5] = (char *)v7 + 72 * v8;
      memmove(v7, v3, v6);
      v5[4] = (char *)v7 + 8 * (v6 >> 3);
      atomic_ullong v9 = *MEMORY[0x1E4FB7E88];
      if (*MEMORY[0x1E4FB7E88])
      {
        CFDictionaryRef v10 = (atomic_ullong *)operator new(0x38uLL);
        uint64_t v11 = v10;
        v10[1] = 0;
        void v10[2] = 0;
        *CFDictionaryRef v10 = (atomic_ullong)&unk_1F14706E8;
        v10[6] = v9;
        if (*(char *)(v2 + 23) < 0)
        {
          size_t v12 = *(void *)(v2 + 8);
          if (v12 >= 0x7FFFFFFFFFFFFFF8) {
            std::string::__throw_length_error[abi:ne180100]();
          }
          uint64_t v13 = *(const void **)v2;
        }
        else
        {
          size_t v12 = *(unsigned __int8 *)(v2 + 23);
          uint64_t v13 = (const void *)v2;
        }
        if (v12 >= 0x17)
        {
          uint64_t v15 = (v12 & 0x7FFFFFFFFFFFFFF8) + 8;
          if ((v12 | 7) != 0x17) {
            uint64_t v15 = v12 | 7;
          }
          uint64_t v16 = v15 + 1;
          unsigned int v14 = (unsigned char *)(*(uint64_t (**)(atomic_ullong, uint64_t, uint64_t))(*(void *)v9 + 16))(v9, v15 + 1, 1);
          void v11[4] = v12;
          void v11[5] = v16 | 0x8000000000000000;
          uint64_t v11[3] = (atomic_ullong)v14;
        }
        else
        {
          *((unsigned char *)v10 + 47) = v12;
          unsigned int v14 = v10 + 3;
          if (!v12)
          {
LABEL_17:
            v14[v12] = 0;
            AMCP::DAL::get_timestamp_writer_queue((AMCP::DAL *)v10);
            atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
            unsigned __int8 v17 = atomic_load((unsigned __int8 *)&unk_1E9F79858);
            if (v17) {
              atomic_store(1u, byte_1E9F79859);
            }
            operator new();
          }
        }
        CFDictionaryRef v10 = (atomic_ullong *)memmove(v14, v13, v12);
        goto LABEL_17;
      }
      __break(1u);
    }
    JUMPOUT(0x1C1859840);
  }
  return result;
}

void sub_1BAF940DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, NSObject **a9, long long a10)
{
  if (a2)
  {
    std::__shared_weak_count::~__shared_weak_count(v11);
    operator delete(v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    unsigned int v14 = (AMCP::Log::Scope_Registry *)__cxa_begin_catch(exception_object);
    AMCP::Log::Scope_Registry::get(v14);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&a9, "com.apple.coreaudio", "AMCP");
    uint64_t v15 = *a9;
    if ((void)a10) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)a10);
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      uint64_t v16 = pthread_self();
      mach_port_t v17 = pthread_mach_thread_np(v16);
      LODWORD(a9) = 67109634;
      HIDWORD(a9) = v17;
      LOWORD(a10) = 2080;
      *(void *)((char *)&a10 + 2) = "Timestamp_Writer.cpp";
      WORD5(a10) = 1024;
      HIDWORD(a10) = 96;
      _os_log_error_impl(&dword_1BAA78000, v15, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Failure writing timestamp file", (uint8_t *)&a9, 0x18u);
    }
    __cxa_end_catch();
    JUMPOUT(0x1BAF94028);
  }
  _Unwind_Resume(exception_object);
}

void AMCP::DAL::PCM_File_Writer::read_data(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[80] = 0;
}

caulk::rt_safe_memory_resource *AMCP::DAL::PCM_File_Writer::write_data(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  AMCP::DAL::DAL_Timed_Segment::get_audio_buffer_lists((AMCP::DAL::DAL_Timed_Segment *)v87, a3);
  AMCP::DAL::DAL_Timed_Segment::translate_range(&v85, *(const AMCP::DAL::DAL_Time_Range **)(a3 + 80), a3);
  int64_t v6 = v85;
  if (v86 != v85)
  {
    unint64_t v7 = 0;
    do
    {
      uint64_t v8 = (uint64_t)&v6[12 * v7 + 2];
      double sample_time = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v8);
      double v11 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)(v8 + 40));
      double v12 = *(double *)(a1 + 80);
      double v13 = round(v12);
      double v14 = round(sample_time);
      double v15 = round(v11);
      if (v13 != 0.0 && v14 < v15 && v13 < v14)
      {
        double v18 = sample_time - v12;
        if (round(v18) >= round(*(double *)(a1 + 8) * 5.0)) {
          double v19 = *(double *)(a1 + 8) * 5.0;
        }
        else {
          double v19 = v18;
        }
        if (round(v19) <= 0.0)
        {
          AMCP::Log::Scope_Registry::get(v10);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          __int16 v74 = **(NSObject ***)buf;
          if (v105.i64[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.i64[0]);
          }
          if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
          {
            uint64_t v75 = pthread_self();
            mach_port_t v76 = pthread_mach_thread_np(v75);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v76;
            v105.i16[0] = 2080;
            *(uint64_t *)((char *)v105.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
            v105.i16[5] = 1024;
            v105.i32[3] = 152;
            *(_WORD *)unint64_t v106 = 2080;
            *(void *)&v106[2] = "not (num_samples > 0_S)";
            _os_log_error_impl(&dword_1BAA78000, v74, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v93);
          std::logic_error::logic_error((std::logic_error *)&v92, (const std::string *)&v93);
          v92.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
          std::logic_error::logic_error(&v96, (const std::logic_error *)&v92);
          mach_port_t v98 = 0;
          unsigned int v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          uint64_t v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v96);
          *(void *)&v106[8] = "void AMCP::DAL::PCM_File_Writer::write_silence_for_skipped_range(Sample_Time) const";
          *(void *)&v106[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
          *(_DWORD *)&v106[24] = 152;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v95.__r_.__value_.__l.__data_);
          std::string v103 = v95;
          unint64_t v102 = (const AudioBufferList *)&unk_1F148AA90;
          memset(&v95, 0, sizeof(v95));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        if ((*(unsigned char *)(a1 + 20) & 0x20) != 0) {
          uint64_t v20 = *(unsigned int *)(a1 + 36);
        }
        else {
          uint64_t v20 = 1;
        }
        unint64_t v21 = (double *)AMCP::Utility::AudioBufferList_Create((AMCP::Utility *)v20);
        *(void *)std::string buf = &unk_1F1489E50;
        *(void *)unint64_t v106 = buf;
        unint64_t v102 = (const AudioBufferList *)v21;
        std::__function::__value_func<void ()(AudioBufferList *)>::__value_func[abi:ne180100]((uint64_t)&v103, (uint64_t)buf);
        BOOL v22 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](buf);
        UInt32 v23 = vcvtmd_s64_f64(v19);
        size_t v24 = *(_DWORD *)(a1 + 32) * v23;
        if (!v24)
        {
          AMCP::Log::Scope_Registry::get(v22);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          long long v77 = **(NSObject ***)buf;
          if (v105.i64[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.i64[0]);
          }
          if (os_log_type_enabled(v77, OS_LOG_TYPE_ERROR))
          {
            long long v78 = pthread_self();
            mach_port_t v79 = pthread_mach_thread_np(v78);
            *(_DWORD *)std::string buf = 67109890;
            *(_DWORD *)&uint8_t buf[4] = v79;
            v105.i16[0] = 2080;
            *(uint64_t *)((char *)v105.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
            v105.i16[5] = 1024;
            v105.i32[3] = 158;
            *(_WORD *)unint64_t v106 = 2080;
            *(void *)&v106[2] = "not (data_byte_size > 0)";
            _os_log_error_impl(&dword_1BAA78000, v77, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s ", buf, 0x22u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v90);
          __cxa_allocate_exception(0x40uLL);
          caulk::make_string((caulk *)"", (uint64_t)&v95);
          std::logic_error::logic_error(&v88, &v95);
          v88.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v96, &v88);
          mach_port_t v98 = 0;
          unsigned int v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          uint64_t v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v96);
          *(void *)&v106[8] = "void AMCP::DAL::PCM_File_Writer::write_silence_for_skipped_range(Sample_Time) const";
          *(void *)&v106[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
          *(_DWORD *)&v106[24] = 158;
          applesauce::backtrace::snapshot_N<64>::snapshot_N(&v92.__r_.__value_.__l.__data_);
          std::string v94 = v92;
          uint64_t v93 = &unk_1F148AA90;
          memset(&v92, 0, sizeof(v92));
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        memset(&v95, 0, sizeof(v95));
        *(void *)std::string buf = &v95;
        v105.i8[0] = 0;
        if (!*MEMORY[0x1E4FB7E88]) {
          __break(1u);
        }
        uint64_t v25 = (void *)caulk::rt_safe_memory_resource::rt_allocate((caulk::rt_safe_memory_resource *)*MEMORY[0x1E4FB7E88]);
        std::string::size_type v26 = (std::string::size_type)v25 + v24;
        v95.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
        v95.__r_.__value_.__r.__words[2] = (std::string::size_type)v25 + v24;
        bzero(v25, v24);
        uint64_t v27 = 0;
        unint64_t v28 = 0;
        v95.__r_.__value_.__l.__size_ = v26;
        int v29 = *(_DWORD *)(a1 + 20);
        std::string::size_type v30 = v95.__r_.__value_.__r.__words[0];
        if ((v29 & 0x20) != 0)
        {
LABEL_21:
          if (v28 < *(unsigned int *)(a1 + 36))
          {
            int v31 = 1;
            goto LABEL_25;
          }
        }
        else
        {
          while (!v28)
          {
            int v31 = *(_DWORD *)(a1 + 36);
LABEL_25:
            uint64_t v32 = (double *)((char *)&v102->mNumberBuffers + v27);
            *((_DWORD *)v32 + 2) = v31;
            *((_DWORD *)v32 + 3) = v24;
            *((void *)v32 + 2) = v30;
            ++v28;
            v27 += 16;
            if ((v29 & 0x20) != 0) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v33 = (AMCP::Log::Scope_Registry *)ExtAudioFileWriteAsync(*(ExtAudioFileRef *)(a1 + 48), v23, v102);
        int v34 = (int)v33;
        if (v33)
        {
          AMCP::Log::Scope_Registry::get(v33);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          unint64_t v80 = **(NSObject ***)buf;
          if (v105.i64[0]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.i64[0]);
          }
          if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
          {
            uint64_t v81 = pthread_self();
            mach_port_t v82 = pthread_mach_thread_np(v81);
            long long v83 = (void *)(a1 + 88);
            if (*(char *)(a1 + 111) < 0) {
              long long v83 = (void *)*v83;
            }
            *(_DWORD *)std::string buf = 67110402;
            *(_DWORD *)&uint8_t buf[4] = v82;
            v105.i16[0] = 2080;
            *(uint64_t *)((char *)v105.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
            v105.i16[5] = 1024;
            v105.i32[3] = 170;
            *(_WORD *)unint64_t v106 = 2080;
            *(void *)&v106[2] = "not (the_error == 0)";
            *(_WORD *)&v106[10] = 2080;
            *(void *)&v106[12] = v83;
            *(_WORD *)&v106[20] = 2048;
            *(void *)&v106[22] = v34;
            _os_log_error_impl(&dword_1BAA78000, v80, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::Write: couldn't write the data %s: %ld", buf, 0x36u);
          }
          AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v91);
          __cxa_allocate_exception(0x40uLL);
          uint64_t v84 = (void *)(a1 + 88);
          if (*(char *)(a1 + 111) < 0) {
            uint64_t v84 = (void *)*v84;
          }
          caulk::make_string((caulk *)"PCM_File_Writer::Write: couldn't write the data %s: %ld", (uint64_t)&v92, v84, v34);
          std::logic_error::logic_error(&v90, &v92);
          v90.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E4FBA4C8] + 16);
          std::logic_error::logic_error(&v96, &v90);
          mach_port_t v98 = 0;
          unsigned int v99 = 0;
          uint64_t v100 = 0;
          int v101 = -1;
          v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
          uint64_t v97 = &unk_1F1489CF0;
          boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v96);
          *(void *)&v106[8] = "void AMCP::DAL::PCM_File_Writer::write_silence_for_skipped_range(Sample_Time) const";
          *(void *)&v106[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
          *(_DWORD *)&v106[24] = 170;
          applesauce::backtrace::snapshot_N<64>::snapshot_N((char **)&v88);
          *(std::logic_error *)&v94.__r_.__value_.__l.__data_ = v88;
          uint64_t v93 = &unk_1F148AA90;
          v94.__r_.__value_.__r.__words[2] = v89;
          v88.__vftable = 0;
          v88.__imp_.__imp_ = 0;
          std::string::size_type v89 = 0;
          boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
        }
        AMCP::Log::Scope_Registry::get(v33);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        uint64_t v35 = **(NSObject ***)buf;
        if (v105.i64[0]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.i64[0]);
        }
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v38 = pthread_self();
          mach_port_t v39 = pthread_mach_thread_np(v38);
          *(_DWORD *)std::string buf = 67109890;
          *(_DWORD *)&uint8_t buf[4] = v39;
          v105.i16[0] = 2080;
          *(uint64_t *)((char *)v105.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
          v105.i16[5] = 1024;
          v105.i32[3] = 171;
          *(_WORD *)unint64_t v106 = 1024;
          *(_DWORD *)&v106[2] = v23;
          _os_log_debug_impl(&dword_1BAA78000, v35, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d write_silence_for_skipped_range: %ul", buf, 0x1Eu);
        }
        if (v95.__r_.__value_.__r.__words[0])
        {
          v95.__r_.__value_.__l.__size_ = v95.__r_.__value_.__r.__words[0];
          std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](v95.__r_.__value_.__l.__data_);
        }
        std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)&v102, 0);
        std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](&v103);
      }
      uint64_t v36 = (AMCP::Log::Scope_Registry *)ExtAudioFileWriteAsync(*(ExtAudioFileRef *)(a1 + 48), vcvtmd_s64_f64(v11 - sample_time), *(const AudioBufferList **)(v87[0] + 40 * v7));
      int v37 = (int)v36;
      if (v36)
      {
        AMCP::Log::Scope_Registry::get(v36);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v69 = **(NSObject ***)buf;
        if (v105.i64[0]) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v105.i64[0]);
        }
        if (os_log_type_enabled(v69, OS_LOG_TYPE_ERROR))
        {
          uint64_t v70 = pthread_self();
          mach_port_t v71 = pthread_mach_thread_np(v70);
          long long v72 = (void *)(a1 + 88);
          if (*(char *)(a1 + 111) < 0) {
            long long v72 = (void *)*v72;
          }
          *(_DWORD *)std::string buf = 67110402;
          *(_DWORD *)&uint8_t buf[4] = v71;
          v105.i16[0] = 2080;
          *(uint64_t *)((char *)v105.i64 + 2) = (uint64_t)"PCM_File_Writer.cpp";
          v105.i16[5] = 1024;
          v105.i32[3] = 179;
          *(_WORD *)unint64_t v106 = 2080;
          *(void *)&v106[2] = "not (the_error == 0)";
          *(_WORD *)&v106[10] = 2080;
          *(void *)&v106[12] = v72;
          *(_WORD *)&v106[20] = 2048;
          *(void *)&v106[22] = v37;
          _os_log_error_impl(&dword_1BAA78000, v69, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s PCM_File_Writer::Write: couldn't write the data %s: %ld", buf, 0x36u);
        }
        AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v88);
        __cxa_allocate_exception(0x40uLL);
        uint64_t v73 = (void *)(a1 + 88);
        if (*(char *)(a1 + 111) < 0) {
          uint64_t v73 = (void *)*v73;
        }
        caulk::make_string((caulk *)"PCM_File_Writer::Write: couldn't write the data %s: %ld", (uint64_t)&v93, v73, v37);
        std::logic_error::logic_error((std::logic_error *)&v92, (const std::string *)&v93);
        v92.__r_.__value_.__r.__words[0] = MEMORY[0x1E4FBA4C8] + 16;
        std::logic_error::logic_error(&v96, (const std::logic_error *)&v92);
        mach_port_t v98 = 0;
        unsigned int v99 = 0;
        uint64_t v100 = 0;
        int v101 = -1;
        v96.__vftable = (std::logic_error_vtbl *)&unk_1F1489CC8;
        uint64_t v97 = &unk_1F1489CF0;
        boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>::clone_impl((uint64_t)buf, (uint64_t)&v96);
        *(void *)&v106[8] = "void AMCP::DAL::PCM_File_Writer::_write_data(uint32_t, const BufferListPtr &) const";
        *(void *)&v106[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/IO/DAL/PCM_File_Writer.cpp";
        *(_DWORD *)&v106[24] = 179;
        applesauce::backtrace::snapshot_N<64>::snapshot_N(&v95.__r_.__value_.__l.__data_);
        std::string v103 = v95;
        unint64_t v102 = (const AudioBufferList *)&unk_1F148AA90;
        memset(&v95, 0, sizeof(v95));
        boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::domain_error>>>();
      }
      ++v7;
      int64_t v6 = v85;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * (((char *)v86 - (char *)v85) >> 5));
  }
  if (*(unsigned char *)(a1 + 160))
  {
    uint64_t v40 = *(void **)(a1 + 168);
    AMCP::DAL::DAL_Timed_Segment::translate_range((double **)&v102, *(const AMCP::DAL::DAL_Time_Range **)(a3 + 80), a3);
    uint64_t v41 = v102;
    for (std::string::size_type i = v103.__r_.__value_.__r.__words[0]; v41 != (const AudioBufferList *)i; v41 += 4)
    {
      std::string::basic_string[abi:ne180100]<0>(buf, "current sample");
      int64_t v43 = std::__hash_table<std::__hash_value_type<std::string,AMCP::Thing>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,AMCP::Thing>,std::equal_to<std::string>,std::hash<std::string>,true>,std::pmr::polymorphic_allocator<std::__hash_value_type<std::string,AMCP::Thing>>>::find<std::string>(a2, buf);
      if (v105.i8[15] < 0) {
        operator delete(*(void **)buf);
      }
      if (v43)
      {
        double v44 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v41->mBuffers[0].mData);
        double v45 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v41[2].mBuffers);
        std::logic_error v96 = *(std::logic_error *)&v41->mBuffers[0].mData;
        mData = v41[1].mBuffers[0].mData;
        unint64_t v46 = *(std::__shared_weak_count **)&v41[2].mNumberBuffers;
        uint64_t v97 = *(void **)&v41[1].mBuffers[0].mNumberChannels;
        mach_port_t v98 = mData;
        unsigned int v99 = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        uint64_t host_time = AMCP::DAL::DAL_Time::get_host_time((AMCP::DAL::DAL_Time *)&v96);
        unint64_t v50 = v40[4];
        unint64_t v49 = v40[5];
        if (v50 >= v49)
        {
          uint64_t v53 = v40[3];
          unint64_t v54 = 0x8E38E38E38E38E39 * ((uint64_t)(v50 - v53) >> 3);
          unint64_t v55 = v54 + 1;
          if (v54 + 1 > 0x38E38E38E38E38ELL) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v56 = 0x8E38E38E38E38E39 * ((uint64_t)(v49 - v53) >> 3);
          if (2 * v56 > v55) {
            unint64_t v55 = 2 * v56;
          }
          if (v56 >= 0x1C71C71C71C71C7) {
            uint64_t v57 = 0x38E38E38E38E38ELL;
          }
          else {
            uint64_t v57 = v55;
          }
          *(void *)&v106[8] = v40 + 5;
          if (v57) {
            uint64_t v57 = (uint64_t)std::__allocate_at_least[abi:ne180100]<caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data>>((caulk::rt_safe_memory_resource *)v57);
          }
          else {
            uint64_t v58 = 0;
          }
          *(void *)std::string buf = v57;
          v105.i64[0] = v57 + 72 * v54;
          v105.i64[1] = v105.i64[0];
          *(void *)unint64_t v106 = v57 + 72 * v58;
          AMCP::DAL::Timestamp_Writer::Timestamp_Data::Timestamp_Data(v105.i64[0], host_time, a2, v44, v45);
          uint64_t v59 = v40[3];
          unint64_t v60 = v40[4];
          uint64_t v61 = v105.i64[1];
          uint64_t v62 = v105.i64[0];
          if (v60 == v59)
          {
            int64x2_t v66 = vdupq_n_s64(v60);
          }
          else
          {
            do
            {
              *(_OWORD *)(v62 - 72) = *(_OWORD *)(v60 - 72);
              long long v63 = *(_OWORD *)(v60 - 56);
              long long v64 = *(_OWORD *)(v60 - 40);
              long long v65 = *(_OWORD *)(v60 - 24);
              *(void *)(v62 - 8) = *(void *)(v60 - 8);
              *(_OWORD *)(v62 - 24) = v65;
              *(_OWORD *)(v62 - 40) = v64;
              *(_OWORD *)(v62 - 56) = v63;
              v62 -= 72;
              v60 -= 72;
            }
            while (v60 != v59);
            int64x2_t v66 = *(int64x2_t *)(v40 + 3);
          }
          uint64_t v51 = v61 + 72;
          void v40[3] = v62;
          v40[4] = v61 + 72;
          int64x2_t v105 = v66;
          uint64_t v67 = v40[5];
          v40[5] = *(void *)v106;
          *(void *)unint64_t v106 = v67;
          *(void *)std::string buf = v66.i64[0];
          std::__split_buffer<AMCP::DAL::Timestamp_Writer::Timestamp_Data,caulk::rt_allocator<AMCP::DAL::Timestamp_Writer::Timestamp_Data> &>::~__split_buffer((uint64_t)buf);
        }
        else
        {
          AMCP::DAL::Timestamp_Writer::Timestamp_Data::Timestamp_Data(v40[4], host_time, a2, v44, v45);
          uint64_t v51 = v50 + 72;
        }
        v40[4] = v51;
        if (v99) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v99);
        }
      }
      else
      {
        double v52 = AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)&v41->mBuffers[0].mData);
        *(void *)(v40[4] - 40) += vcvtmd_s64_f64(AMCP::DAL::DAL_Time::get_sample_time((AMCP::DAL::DAL_Time *)v41[2].mBuffers)- v52);
      }
    }
    *(void *)std::string buf = &v102;
    std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)buf);
  }
  v96.__vftable = (std::logic_error_vtbl *)&v85;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v96);
  v96.__vftable = (std::logic_error_vtbl *)v87;
  return std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&v96);
}

void sub_1BAF95100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,void *__p,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,char *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49)
{
  if (a41)
  {
    a42 = (uint64_t)a41;
    std::allocator_traits<caulk::rt_allocator<char>>::deallocate[abi:ne180100](a41);
  }
  std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>::reset[abi:ne180100]((uint64_t *)(v49 - 248), 0);
  std::__function::__value_func<void ()(AudioBufferList *)>::~__value_func[abi:ne180100](a14);
  a45 = &a15;
  std::vector<AMCP::DAL::Buffer_Time_Translator::Translation_Range,caulk::rt_allocator<AMCP::DAL::Buffer_Time_Translator::Translation_Range>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a45);
  a45 = &a18;
  std::vector<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>,caulk::rt_allocator<std::unique_ptr<AudioBufferList,std::function<void ()(AudioBufferList*)>>>>::__destroy_vector::operator()[abi:ne180100]((caulk::rt_safe_memory_resource *)&a45);
  _Unwind_Resume(a1);
}

void AMCP::DAL::PCM_File_Writer::~PCM_File_Writer(AMCP::DAL::PCM_File_Writer *this)
{
  AMCP::DAL::PCM_File_Writer::~PCM_File_Writer(this);

  JUMPOUT(0x1C1859840);
}

{
  AMCP::Log::Scope_Registry *v2;
  NSObject *v3;
  os_signpost_id_t v4;
  os_log_t *v5;
  std::__shared_weak_count *v6;

  *(void *)this = &unk_1F1489AC0;
  AMCP::Log::Scope_Registry::get(this);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v5, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = (AMCP::Log::Scope_Registry *)v6;
  time_t v3 = *v5;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  AMCP::Log::Scope_Registry::get(v2);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v5, "com.apple.coreaudio", "AMCP");
  float v4 = os_signpost_id_make_with_pointer(*v5, this);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    LOWORD(v5) = 0;
    _os_signpost_emit_with_name_impl(&dword_1BAA78000, v3, OS_SIGNPOST_INTERVAL_END, v4, "AudioHAL Capture", (const char *)&unk_1BB07294B, (uint8_t *)&v5, 2u);
  }
  AMCP::DAL::PCM_File_Writer::close_file(this);
  std::unique_ptr<AMCP::DAL::Timestamp_Writer>::reset[abi:ne180100]((uint64_t *)this + 21, 0);
  if (*((char *)this + 159) < 0) {
    operator delete(*((void **)this + 17));
  }
  if (*((char *)this + 135) < 0) {
    operator delete(*((void **)this + 14));
  }
  if (*((char *)this + 111) < 0) {
    operator delete(*((void **)this + 11));
  }
  *(void *)this = &unk_1F1489E00;
  if (*((char *)this + 79) < 0) {
    operator delete(*((void **)this + 7));
  }
}

uint64_t HALS_PlugInEngine::_WriteToStream_Write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 1120);
  uint64_t v8 = *(void *)(v7 + 400);
  atomic_ullong v9 = *(std::__shared_weak_count **)(v7 + 408);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 536))(v8, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, a5, a4, a6);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  return v10;
}

void sub_1BAF955F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_WriteToStream_ConvertFromTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 1144))
  {
    long long v14 = a4[10];
    long long v15 = a4[12];
    long long v16 = a4[13];
    long long v39 = a4[11];
    long long v40 = v15;
    long long v41 = v16;
    long long v17 = a4[6];
    long long v18 = a4[8];
    long long v19 = a4[9];
    v36[7] = a4[7];
    v36[8] = v18;
    long long v37 = v19;
    long long v38 = v14;
    long long v20 = a4[3];
    void v36[2] = a4[2];
    v36[3] = v20;
    long long v21 = a4[5];
    v36[4] = a4[4];
    v36[5] = v21;
    v36[6] = v17;
    long long v22 = *a4;
    long long v23 = a4[1];
    v36[0] = *a4;
    v36[1] = v23;
    if (*(void *)a8) {
      size_t v24 = (char *)(*(void *)a8 + *(unsigned int *)(a8 + 8));
    }
    else {
      size_t v24 = 0;
    }
    if (*(void *)a5) {
      uint64_t v25 = (const void *)(*(void *)a5 + *(unsigned int *)(a5 + 8));
    }
    else {
      uint64_t v25 = 0;
    }
    if (*(void *)a6) {
      std::string::size_type v26 = (const void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
    }
    else {
      std::string::size_type v26 = 0;
    }
    if (*(unsigned char *)(a1 + 1145))
    {
      if (v25)
      {
        size_t v27 = *(unsigned int *)(a5 + 12);
        memcpy(v24, v25, v27);
        if (!v26)
        {
LABEL_15:
          uint64_t v28 = *(void *)(a1 + 1120);
          uint64_t v29 = *(void *)(v28 + 400);
          std::string::size_type v30 = *(std::__shared_weak_count **)(v28 + 408);
          if (v30) {
            atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void))(*(void *)v29 + 504))();
LABEL_30:
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          return;
        }
      }
      else
      {
        size_t v27 = 0;
        if (!v26) {
          goto LABEL_15;
        }
      }
      memcpy(&v24[v27], v26, *(unsigned int *)(a6 + 12));
      goto LABEL_15;
    }
    if (v25)
    {
      uint64_t v31 = *(void *)(a1 + 1120);
      uint64_t v32 = *(void *)(v31 + 400);
      uint64_t v33 = *(std::__shared_weak_count **)(v31 + 408);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, void, uint64_t, void, _OWORD *, uint64_t, uint64_t))(*(void *)v32 + 504))(v32, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, *(unsigned int *)(a5 + 16), v36, a5, a8);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
    }
    if (v26)
    {
      LODWORD(v22) = *(_DWORD *)(a5 + 16);
      *(double *)&long long v37 = *(double *)&v37 + (double)(unint64_t)v22;
      uint64_t v34 = *(void *)(a1 + 1120);
      uint64_t v35 = *(void *)(v34 + 400);
      std::string::size_type v30 = *(std::__shared_weak_count **)(v34 + 408);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, void, uint64_t, void, _OWORD *, uint64_t, uint64_t))(*(void *)v35 + 504))(v35, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, *(unsigned int *)(a6 + 16), v36, a6, a8);
      goto LABEL_30;
    }
  }
  else
  {
    HALS_IOEngine2::_WriteToStream_ConvertFromTempBuffer(a1, a2, a3, (uint64_t)a4, (uint64_t *)a5, a6, a7, a8);
  }
}

void sub_1BAF958D8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_WriteToStream_ProcessMix(HALS_PlugInEngine *this, uint64_t a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5)
{
  if (!*((unsigned char *)this + 1142)) {
    return;
  }
  long long v8 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mSubframes;
  long long v44 = *(_OWORD *)&a4->mOutputTime.mRateScalar;
  long long v45 = v8;
  long long v9 = *(_OWORD *)&a4->mMainHostTicksPerFrame;
  long long v46 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mHours;
  long long v47 = v9;
  long long v10 = *(_OWORD *)&a4->mInputTime.mSMPTETime.mSubframes;
  v42[6] = *(_OWORD *)&a4->mInputTime.mRateScalar;
  v42[7] = v10;
  long long v11 = *(_OWORD *)&a4->mOutputTime.mSampleTime;
  void v42[8] = *(_OWORD *)&a4->mInputTime.mSMPTETime.mHours;
  long long v43 = v11;
  long long v12 = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mSubframes;
  v42[2] = *(_OWORD *)&a4->mCurrentTime.mRateScalar;
  void v42[3] = v12;
  long long v13 = *(_OWORD *)&a4->mInputTime.mSampleTime;
  void v42[4] = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mHours;
  v42[5] = v13;
  long long v14 = *(_OWORD *)&a4->mCurrentTime.mSampleTime;
  v42[0] = *(_OWORD *)&a4->mIOCycleCounter;
  v42[1] = v14;
  HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v34, (uint64_t)a3, (unint64_t)*(double *)&v43, a5);
  if (v34) {
    long long v16 = (void *)(v34 + v35);
  }
  else {
    long long v16 = 0;
  }
  if (v38) {
    long long v17 = (void *)(v38 + v39);
  }
  else {
    long long v17 = 0;
  }
  if (*((unsigned char *)this + 1143))
  {
    if (v16)
    {
      uint64_t v18 = *((void *)this + 140);
      uint64_t v19 = *(void *)(v18 + 400);
      long long v20 = *(std::__shared_weak_count **)(v18 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = 0;
      long long v33 = 0uLL;
      (*(void (**)(void))(*(void *)v19 + 472))();
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
    }
    if (v17)
    {
      LODWORD(v15) = __n_4;
      *(double *)&long long v43 = *(double *)&v43 + (double)v15;
      uint64_t v21 = *((void *)this + 140);
      uint64_t v22 = *(void *)(v21 + 400);
      long long v23 = *(std::__shared_weak_count **)(v21 + 408);
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v32 = 0;
      long long v33 = 0uLL;
      (*(void (**)(void))(*(void *)v22 + 472))();
      if (v23) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      }
    }
    return;
  }
  uint64_t v24 = *((void *)this + 97);
  if (v24)
  {
    uint64_t v25 = *(const void **)v24;
    uint64_t v32 = *(const void **)v24;
    LODWORD(v33) = 0;
    unint64_t v15 = (unint64_t)vmovn_s64(*(int64x2_t *)(v24 + 8));
    *(void *)((char *)&v33 + 4) = v15;
    if (!v16) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v32 = 0;
    *(void *)&long long v33 = 0;
    DWORD2(v33) = 0;
    if (!v16)
    {
LABEL_21:
      if (!v17) {
        return;
      }
      goto LABEL_29;
    }
  }
  uint64_t v26 = *((void *)this + 140);
  uint64_t v27 = *(void *)(v26 + 400);
  uint64_t v28 = *(std::__shared_weak_count **)(v26 + 408);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, void, uint64_t, void, _OWORD *, uint64_t *, const void **))(*(void *)v27 + 472))(v27, *((unsigned int *)this + 282), *((unsigned int *)a3 + 4), a2, __n_4, v42, &v34, &v32);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  memcpy(v16, v25, __n);
  if (v17)
  {
LABEL_29:
    LODWORD(v15) = __n_4;
    *(double *)&long long v43 = *(double *)&v43 + (double)v15;
    uint64_t v29 = *((void *)this + 140);
    uint64_t v30 = *(void *)(v29 + 400);
    uint64_t v31 = *(std::__shared_weak_count **)(v29 + 408);
    if (v31) {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, void, uint64_t, void, _OWORD *, uint64_t *, const void **))(*(void *)v30 + 472))(v30, *((unsigned int *)this + 282), *((unsigned int *)a3 + 4), a2, v41, v42, &v38, &v32);
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    memcpy(v17, v25, v40);
  }
}

void sub_1BAF95C48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_WriteToStream_ProcessClient(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned char *a8)
{
  if (*(unsigned char *)(a1 + 1139))
  {
    int v10 = *(unsigned __int8 *)(a1 + 1140);
    uint64_t v11 = *(void *)(a1 + 1120);
    uint64_t v12 = *(void *)(v11 + 400);
    long long v13 = *(std::__shared_weak_count **)(v11 + 408);
    if (v10)
    {
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void))(*(void *)v12 + 408))();
    }
    else
    {
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 408))(v12, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, a5, a4 + 432, a6, a7);
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    *a8 = *(unsigned char *)(a1 + 1140);
  }
  *a8 = 1;
}

void sub_1BAF95DAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_EndWriting(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  if (*((unsigned char *)this + 1139)
    || *((unsigned char *)this + 1141)
    || *((unsigned char *)this + 1142)
    || *((unsigned char *)this + 1144)
    || *((unsigned char *)this + 1146))
  {
    uint64_t v4 = *((void *)this + 140);
    uint64_t v5 = *(void *)(v4 + 400);
    int64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, char *))(*(void *)v5 + 544))(v5, *((unsigned int *)this + 282), a2, a3, (char *)a4 + 432);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return 0;
}

void sub_1BAF95E78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_WriteToStream(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, void *a6, int a7)
{
  if (*(unsigned char *)(a1 + 1139) || *(unsigned char *)(a1 + 1142) || *(unsigned char *)(a1 + 1144) || *(unsigned char *)(a1 + 1146))
  {
    unsigned int v8 = HALS_IOEngine2::_WriteToStream((HALS_IOEngine2 *)a1, a2, a3, a4, a5, a6);
  }
  else if (*(unsigned char *)(a1 + 1141))
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 768) + 48);
    unint64_t v11 = (*(void *)(*(void *)(a1 + 768) + 56) - v10) >> 3;
    if (v11 <= a3)
    {
      uint64_t v12 = 0;
    }
    else
    {
      if (v11 <= a3) {
        std::vector<std::tuple<unsigned int,void *,unsigned int>>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v12 = *(void *)(v10 + 8 * a3);
    }
    uint64_t v13 = *(void *)(a1 + 1120);
    uint64_t v14 = *(void *)(v13 + 400);
    unint64_t v15 = *(std::__shared_weak_count **)(v13 + 408);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    unsigned int v8 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, void *))(*(void *)v14 + 440))(v14, *(unsigned int *)(a1 + 1128), *(unsigned int *)(v12 + 16), a2, a4, a5 + 432, a6);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  else
  {
    unsigned int v8 = 0;
  }
  if (a7) {
    return 0;
  }
  else {
    return v8;
  }
}

void sub_1BAF95FB0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_BeginWriting(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  if (*((unsigned char *)this + 1139)
    || *((unsigned char *)this + 1141)
    || *((unsigned char *)this + 1142)
    || *((unsigned char *)this + 1144)
    || *((unsigned char *)this + 1146))
  {
    uint64_t v4 = *((void *)this + 140);
    uint64_t v5 = *(void *)(v4 + 400);
    int64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, char *))(*(void *)v5 + 528))(v5, *((unsigned int *)this + 282), a2, a3, (char *)a4 + 432);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return 0;
}

void sub_1BAF96078(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_ReadFromStream_Process(HALS_PlugInEngine *this, uint64_t a2, HALS_IOEngine2_StreamInfo *a3, const AudioServerPlugInIOCycleInfo *a4, unsigned int a5)
{
  if (*((unsigned char *)this + 1137))
  {
    long long v8 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mSubframes;
    long long v51 = *(_OWORD *)&a4->mOutputTime.mRateScalar;
    long long v52 = v8;
    long long v9 = *(_OWORD *)&a4->mMainHostTicksPerFrame;
    long long v53 = *(_OWORD *)&a4->mOutputTime.mSMPTETime.mHours;
    long long v54 = v9;
    long long v10 = *(_OWORD *)&a4->mInputTime.mSMPTETime.mSubframes;
    long long v47 = *(_OWORD *)&a4->mInputTime.mRateScalar;
    long long v48 = v10;
    long long v11 = *(_OWORD *)&a4->mOutputTime.mSampleTime;
    long long v49 = *(_OWORD *)&a4->mInputTime.mSMPTETime.mHours;
    long long v50 = v11;
    long long v12 = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mSubframes;
    v45[2] = *(_OWORD *)&a4->mCurrentTime.mRateScalar;
    v45[3] = v12;
    long long v13 = *(_OWORD *)&a4->mInputTime.mSampleTime;
    void v45[4] = *(_OWORD *)&a4->mCurrentTime.mSMPTETime.mHours;
    long long v46 = v13;
    long long v14 = *(_OWORD *)&a4->mCurrentTime.mSampleTime;
    v45[0] = *(_OWORD *)&a4->mIOCycleCounter;
    v45[1] = v14;
    HALS_IOEngine2_StreamInfo::GetPointersForMixBuffer((uint64_t)&v37, (uint64_t)a3, (unint64_t)*(double *)&v46, a5);
    uint64_t v15 = v40;
    if (v37) {
      long long v16 = (void *)(v37 + v38);
    }
    else {
      long long v16 = 0;
    }
    uint64_t v17 = v44;
    if (v41) {
      uint64_t v18 = (void *)(v41 + v42);
    }
    else {
      uint64_t v18 = 0;
    }
    if (*((unsigned char *)this + 1138))
    {
      if (v16)
      {
        uint64_t v19 = *((void *)this + 140);
        uint64_t v20 = *(void *)(v19 + 400);
        uint64_t v21 = *(std::__shared_weak_count **)(v19 + 408);
        if (v21) {
          atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v35 = 0;
        long long v36 = 0uLL;
        (*(void (**)(void))(*(void *)v20 + 376))();
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
      }
      if (v18)
      {
        *(double *)&long long v46 = *(double *)&v46 + (double)v15;
        uint64_t v22 = *((void *)this + 140);
        uint64_t v23 = *(void *)(v22 + 400);
        uint64_t v24 = *(std::__shared_weak_count **)(v22 + 408);
        if (v24) {
          atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        unsigned int v35 = 0;
        long long v36 = 0uLL;
        (*(void (**)(void))(*(void *)v23 + 376))();
        if (v24) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        }
      }
    }
    else
    {
      uint64_t v25 = *((void *)this + 97);
      if (v25)
      {
        uint64_t v26 = *(const void **)v25;
        unsigned int v35 = *(const void **)v25;
        LODWORD(v36) = 0;
        *(int32x2_t *)((char *)&v36 + 4) = vmovn_s64(*(int64x2_t *)(v25 + 8));
      }
      else
      {
        uint64_t v26 = 0;
        unsigned int v35 = 0;
        *(void *)&long long v36 = 0;
        DWORD2(v36) = 0;
      }
      __uint64_t n = v43;
      if (v16)
      {
        size_t v27 = v39;
        uint64_t v28 = *((void *)this + 140);
        uint64_t v29 = *(void *)(v28 + 400);
        uint64_t v30 = *(std::__shared_weak_count **)(v28 + 408);
        if (v30) {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, _OWORD *, uint64_t *, const void **))(*(void *)v29 + 376))(v29, *((unsigned int *)this + 282), *((unsigned int *)a3 + 4), a2, v15, v45, &v37, &v35);
        if (v30) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
        }
        memcpy(v16, v26, v27);
      }
      if (v18)
      {
        *(double *)&long long v46 = *(double *)&v46 + (double)v15;
        uint64_t v31 = *((void *)this + 140);
        uint64_t v32 = *(void *)(v31 + 400);
        long long v33 = *(std::__shared_weak_count **)(v31 + 408);
        if (v33) {
          atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, _OWORD *, uint64_t *, const void **))(*(void *)v32 + 376))(v32, *((unsigned int *)this + 282), *((unsigned int *)a3 + 4), a2, v17, v45, &v41, &v35);
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        memcpy(v18, v26, __n);
      }
    }
  }
}

void sub_1BAF963EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_ReadFromStream_ConvertToTempBuffer(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 1135))
  {
    if (*(void *)a8) {
      long long v13 = (char *)(*(void *)a8 + *(unsigned int *)(a8 + 8));
    }
    else {
      long long v13 = 0;
    }
    if (*(void *)a5) {
      long long v14 = (void *)(*(void *)a5 + *(unsigned int *)(a5 + 8));
    }
    else {
      long long v14 = 0;
    }
    uint64_t v15 = *(unsigned int *)(a5 + 16);
    if (*(void *)a6) {
      long long v16 = (void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
    }
    else {
      long long v16 = 0;
    }
    uint64_t v17 = *(unsigned int *)(a6 + 16);
    if (*(unsigned char *)(a1 + 1136))
    {
      uint64_t v18 = *(void *)(a1 + 1120);
      uint64_t v19 = *(void *)(v18 + 400);
      uint64_t v20 = *(std::__shared_weak_count **)(v18 + 408);
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v21 = *(unsigned int *)(a1 + 1128);
      uint64_t v22 = *(unsigned int *)(a3 + 16);
      long long v37 = 0uLL;
      *(void *)&long long v38 = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v19 + 344))(v19, v21, v22);
      if (v20) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v20);
      }
      if (v14)
      {
        size_t v23 = (*(_DWORD *)(a3 + 64) * v15);
        memcpy(v14, v13, v23);
        if (!v16) {
          return;
        }
      }
      else
      {
        size_t v23 = 0;
        if (!v16) {
          return;
        }
      }
      memcpy(v16, &v13[v23], (*(_DWORD *)(a3 + 64) * v17));
      return;
    }
    long long v24 = a4[11];
    long long v47 = a4[10];
    long long v48 = v24;
    long long v25 = a4[13];
    long long v49 = a4[12];
    long long v50 = v25;
    long long v26 = a4[7];
    long long v43 = a4[6];
    long long v44 = v26;
    long long v27 = a4[9];
    long long v45 = a4[8];
    long long v46 = v27;
    long long v28 = a4[3];
    long long v39 = a4[2];
    long long v40 = v28;
    long long v29 = a4[5];
    long long v41 = a4[4];
    long long v42 = v29;
    long long v30 = a4[1];
    long long v37 = *a4;
    long long v38 = v30;
    if (v14)
    {
      uint64_t v31 = *(void *)(a1 + 1120);
      uint64_t v32 = *(void *)(v31 + 400);
      long long v33 = *(std::__shared_weak_count **)(v31 + 408);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v32 + 344))(v32, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, v15, &v37, a5, a8);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
    }
    if (v16)
    {
      *(double *)&long long v42 = *(double *)&v42 + (double)v15;
      uint64_t v34 = *(void *)(a1 + 1120);
      uint64_t v35 = *(void *)(v34 + 400);
      long long v36 = *(std::__shared_weak_count **)(v34 + 408);
      if (v36) {
        atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, long long *, uint64_t, uint64_t))(*(void *)v35 + 344))(v35, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, v17, &v37, a6, a8);
      if (v36) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v36);
      }
    }
  }
  else
  {
    HALS_IOEngine2::_ReadFromStream_ConvertToTempBuffer(a1, a2, a3, (uint64_t)a4, (uint64_t *)a5, a6, a7, a8);
  }
}

void sub_1BAF96704(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_EngineTeardownForIsolatedIO(HALS_PlugInEngine *this, HALS_IOEngine2_StreamInfo *a2, uint64_t a3)
{
  uint64_t v4 = *((void *)this + 140);
  uint64_t v5 = *(void *)(v4 + 400);
  int64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v5 + 304))(v5, *((unsigned int *)this + 282), *((unsigned int *)a2 + 4), a3);
  if (v6)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_1BAF967C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_EngineSetupForIsolatedIO(HALS_PlugInEngine *this, HALS_IOEngine2_StreamInfo *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *((void *)this + 140);
  uint64_t v6 = *(void *)(v5 + 400);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 408);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, void, uint64_t, uint64_t))(*(void *)v6 + 296))(v6, *((unsigned int *)this + 282), *((unsigned int *)a2 + 4), a3, a4);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_1BAF9687C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_IsolatedReadFromStream_Read(HALS_PlugInEngine *this, HALS_IOEngine2_StreamInfo *a2, const AudioServerPlugInIOCycleInfo *a3, uint64_t a4, uint64_t a5)
{
  if (*((unsigned char *)this + 1134))
  {
    uint64_t v6 = *((void *)this + 140);
    uint64_t v7 = *(void *)(v6 + 400);
    long long v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, void, uint64_t, const AudioServerPlugInIOCycleInfo *, uint64_t))(*(void *)v7 + 288))(v7, *((unsigned int *)this + 282), *((unsigned int *)a2 + 4), a4, a3, a5);
    if (v8)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_1BAF96938(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_ReadFromStream_Read(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned char *)(a1 + 1134))
  {
    uint64_t v7 = *(void *)(a1 + 1120);
    uint64_t v8 = *(void *)(v7 + 400);
    long long v9 = *(std::__shared_weak_count **)(v7 + 408);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 280))(v8, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a3 + 16), a2, a5, a4, a6);
    if (v9)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_1BAF969F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_EndReading(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  if (*((unsigned char *)this + 1134) || *((unsigned char *)this + 1135) || *((unsigned char *)this + 1137))
  {
    uint64_t v4 = *((void *)this + 140);
    uint64_t v5 = *(void *)(v4 + 400);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, char *))(*(void *)v5 + 320))(v5, *((unsigned int *)this + 282), a2, a3, (char *)a4 + 432);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return 0;
}

void sub_1BAF96AAC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_ReadFromStream(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, HALS_IOClock **a5, uint64_t a6)
{
  if (*(unsigned char *)(a1 + 1134) || *(unsigned char *)(a1 + 1135) || *(unsigned char *)(a1 + 1137))
  {
    HALS_IOEngine2::_ReadFromStream((void *)a1, a2, a3, a4, a5, a6);
  }
  else
  {
    if (*(void *)a6) {
      uint64_t v7 = (void *)(*(void *)a6 + *(unsigned int *)(a6 + 8));
    }
    else {
      uint64_t v7 = 0;
    }
    bzero(v7, *(unsigned int *)(a6 + 12));
  }
  return 0;
}

uint64_t HALS_PlugInEngine::_BeginReading(HALS_PlugInEngine *this, uint64_t a2, uint64_t a3, const HALS_IOEngineInfo *a4)
{
  if (*((unsigned char *)this + 1134) || *((unsigned char *)this + 1135) || *((unsigned char *)this + 1137))
  {
    uint64_t v4 = *((void *)this + 140);
    uint64_t v5 = *(void *)(v4 + 400);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 408);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, uint64_t, char *))(*(void *)v5 + 272))(v5, *((unsigned int *)this + 282), a2, a3, (char *)a4 + 432);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  return 0;
}

void sub_1BAF96BB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_EndIOCycle(HALS_PlugInEngine *this, const BOOL *a2, const HALS_IOEngineInfo *a3)
{
  HALS_IOEngine2::_EndIOCycle(this, a2, a3);
  if (*((unsigned char *)this + 1133))
  {
    uint64_t v6 = *((void *)this + 140);
    uint64_t v7 = *(void *)(v6 + 400);
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, const BOOL *, char *))(*(void *)v7 + 256))(v7, *((unsigned int *)this + 282), a2, (char *)a3 + 432);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1BAF96C68(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_BeginIOCycle(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  HALS_IOEngine2::_BeginIOCycle(this, a2, a3);
  if (*((unsigned char *)this + 1133))
  {
    uint64_t v6 = *((void *)this + 140);
    uint64_t v7 = *(void *)(v6 + 400);
    uint64_t v8 = *(std::__shared_weak_count **)(v6 + 408);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v7 + 248))(v7, *((unsigned int *)this + 282), a2, (char *)a3 + 432);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
  return 0;
}

void sub_1BAF96D14(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_FirstIOThreadStarted(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3)
{
  uint64_t v5 = *((void *)this + 140);
  uint64_t v6 = *(void *)(v5 + 400);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 408);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v6 + 216))(v6, *((unsigned int *)this + 282), a2, (char *)this + 1132);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = *((void *)this + 140);
  uint64_t v9 = *(void *)(v8 + 400);
  long long v10 = *(std::__shared_weak_count **)(v8 + 408);
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v9 + 240))(v9, *((unsigned int *)this + 282), a2, (char *)this + 1133);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  uint64_t v11 = *((void *)this + 140);
  uint64_t v12 = *(void *)(v11 + 400);
  long long v13 = *(std::__shared_weak_count **)(v11 + 408);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v12 + 264))(v12, *((unsigned int *)this + 282), a2, (char *)this + 1134);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *((void *)this + 140);
  uint64_t v15 = *(void *)(v14 + 400);
  long long v16 = *(std::__shared_weak_count **)(v14 + 408);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *, char *))(*(void *)v15 + 328))(v15, *((unsigned int *)this + 282), a2, (char *)this + 1135, (char *)this + 1136);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v17 = *((void *)this + 140);
  uint64_t v18 = *(void *)(v17 + 400);
  uint64_t v19 = *(std::__shared_weak_count **)(v17 + 408);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *, char *))(*(void *)v18 + 360))(v18, *((unsigned int *)this + 282), a2, (char *)this + 1137, (char *)this + 1138);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = *((void *)this + 140);
  uint64_t v21 = *(void *)(v20 + 400);
  uint64_t v22 = *(std::__shared_weak_count **)(v20 + 408);
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *, char *))(*(void *)v21 + 392))(v21, *((unsigned int *)this + 282), a2, (char *)this + 1139, (char *)this + 1140);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = *((void *)this + 140);
  uint64_t v24 = *(void *)(v23 + 400);
  long long v25 = *(std::__shared_weak_count **)(v23 + 408);
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v24 + 424))(v24, *((unsigned int *)this + 282), a2, (char *)this + 1141);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  uint64_t v26 = *((void *)this + 140);
  uint64_t v27 = *(void *)(v26 + 400);
  long long v28 = *(std::__shared_weak_count **)(v26 + 408);
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *, char *))(*(void *)v27 + 456))(v27, *((unsigned int *)this + 282), a2, (char *)this + 1142, (char *)this + 1143);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  uint64_t v29 = *((void *)this + 140);
  uint64_t v30 = *(void *)(v29 + 400);
  uint64_t v31 = *(std::__shared_weak_count **)(v29 + 408);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *, char *))(*(void *)v30 + 488))(v30, *((unsigned int *)this + 282), a2, (char *)this + 1144, (char *)this + 1145);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  uint64_t v32 = *((void *)this + 140);
  uint64_t v33 = *(void *)(v32 + 400);
  uint64_t v34 = *(std::__shared_weak_count **)(v32 + 408);
  if (v34) {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v33 + 520))(v33, *((unsigned int *)this + 282), a2, (char *)this + 1146);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  return 0;
}

void sub_1BAF970F8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_EndIOThread(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  int v8 = *((_DWORD *)this + 198);
  if (v8)
  {
    int v9 = v8 - 1;
    *((_DWORD *)this + 198) = v9;
    if (!v9) {
      (*(void (**)(HALS_PlugInEngine *, uint64_t, const HALS_IOEngineInfo *))(*(void *)this + 1040))(this, a2, a3);
    }
  }
  uint64_t v10 = *((void *)this + 140);
  uint64_t v11 = *(void *)(v10 + 400);
  uint64_t v12 = *(std::__shared_weak_count **)(v10 + 408);
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, const applesauce::CF::DictionaryRef *))(*(void *)v11 + 312))(v11, *((unsigned int *)this + 282), a4);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (*((unsigned char *)this + 1132))
  {
    uint64_t v13 = *((void *)this + 140);
    uint64_t v14 = *(void *)(v13 + 400);
    uint64_t v15 = *(std::__shared_weak_count **)(v13 + 408);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v14 + 232))(v14, *((unsigned int *)this + 282), a2, (char *)a3 + 432);
    if (v15) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
    }
  }
  return 0;
}

void sub_1BAF97274(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_BeginIOThread(HALS_PlugInEngine *this, uint64_t a2, const HALS_IOEngineInfo *a3, const applesauce::CF::DictionaryRef *a4)
{
  HALS_IOEngine2::_BeginIOThread(this, a2, a3, a4);
  if (*((unsigned char *)this + 1132))
  {
    uint64_t v8 = *((void *)this + 140);
    uint64_t v9 = *(void *)(v8 + 400);
    uint64_t v10 = *(std::__shared_weak_count **)(v8 + 408);
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v9 + 224))(v9, *((unsigned int *)this + 282), a2, (char *)a3 + 432);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  uint64_t v11 = *((void *)this + 140);
  uint64_t v12 = *(void *)(v11 + 400);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 + 408);
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, const applesauce::CF::DictionaryRef *))(*(void *)v12 + 312))(v12, *((unsigned int *)this + 282), a4);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return 0;
}

void sub_1BAF9738C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_TellHardwareToStop(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4)
  {
    uint64_t v5 = *(void *)(a1 + 1120);
    uint64_t v6 = *(void *)(v5 + 400);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 408);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, void, void, void))(*(void *)v6 + 200))(v6, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a2 + 16), 0);
    if (v7)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_1BAF9743C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::_TellHardwareToStart(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 1120);
  uint64_t v6 = *(void *)(v5 + 400);
  uint64_t v7 = *(std::__shared_weak_count **)(v5 + 408);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v6 + 192))(v6, *(unsigned int *)(a1 + 1128), *(unsigned int *)(a2 + 16), 0);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v8;
}

void sub_1BAF974E0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::_UnregisterIOContext(HALS_PlugInEngine *this, HALS_IOContext *a2)
{
  HALS_IOEngine2::_UnregisterIOContext((uint64_t)this, a2);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  LOBYTE(v11) = 1;
  uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)a2 + 8));
  uint64_t v5 = (HALS_ObjectMap *)v4;
  if (v4)
  {
    HIDWORD(v10) = *(_DWORD *)(v4 + 232);
    LOBYTE(v11) = *(unsigned char *)(v4 + 258) ^ 1;
    uint64_t v12 = *(void *)(v4 + 240);
  }
  uint64_t v6 = *((void *)this + 140);
  uint64_t v7 = *(void *)(v6 + 400);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 408);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v7 + 88))(v7, *((unsigned int *)this + 282), &v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  HALS_ObjectMap::ReleaseObject(v5, v9);
}

void sub_1BAF975D4(_Unwind_Exception *a1, HALS_Object *a2)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

void HALS_PlugInEngine::_RegisterIOContext(HALS_PlugInEngine *this, HALS_IOContext *a2)
{
  HALS_IOEngine2::_RegisterIOContext((uint64_t)this, a2);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  LODWORD(v10) = *((_DWORD *)a2 + 4);
  LOBYTE(v11) = 1;
  uint64_t v4 = HALS_ObjectMap::CopyObjectByObjectID((HALS_ObjectMap *)**((unsigned int **)a2 + 8));
  uint64_t v5 = (HALS_ObjectMap *)v4;
  if (v4)
  {
    HIDWORD(v10) = *(_DWORD *)(v4 + 232);
    LOBYTE(v11) = *(unsigned char *)(v4 + 258) ^ 1;
    uint64_t v12 = *(void *)(v4 + 240);
  }
  uint64_t v6 = *((void *)this + 140);
  uint64_t v7 = *(void *)(v6 + 400);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 408);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void, uint64_t *))(*(void *)v7 + 80))(v7, *((unsigned int *)this + 282), &v10);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  HALS_ObjectMap::ReleaseObject(v5, v9);
}

void sub_1BAF976D4(_Unwind_Exception *a1, HALS_Object *a2)
{
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  HALS_ObjectMap::ReleaseObject(v2, a2);
  _Unwind_Resume(a1);
}

uint64_t HALS_PlugInEngine::GetZeroTimeStamp(HALS_PlugInEngine *this, uint64_t a2, double *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v6 = *((void *)this + 140);
  uint64_t v7 = *(void *)(v6 + 400);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 + 408);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void, uint64_t, double *, unint64_t *, unint64_t *))(*(void *)v7 + 208))(v7, *((unsigned int *)this + 282), a2, a3, a4, a5);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v9;
}

void sub_1BAF9777C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t HALS_PlugInEngine::SupportsIsolatedIO(HALS_PlugInEngine *this)
{
  uint64_t v2 = *((void *)this + 140);
  uint64_t v3 = *(void *)(v2 + 400);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 408);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 32))(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (g_static_start_options == 1)
  {
    int v10 = 0;
    uint64_t v9 = *(void *)"bsvdbolg";
    if ((*(unsigned int (**)(void, void, uint64_t *, void))(**((void **)this + 88) + 88))(*((void *)this + 88), *(unsigned int *)(*((void *)this + 88) + 16), &v9, 0))
    {
      uint64_t v6 = (unsigned int *)*((void *)this + 88);
      uint64_t v7 = v6[4];
      uint64_t v11 = 0;
      (*(void (**)(unsigned int *, uint64_t, uint64_t *, uint64_t, uint64_t *, char *, void, void, void))(*(void *)v6 + 112))(v6, v7, &v9, 4, &v11, (char *)&v11 + 4, 0, 0, 0);
      if ((v11 & 0x100000000000) != 0) {
        return 0;
      }
      else {
        return v5;
      }
    }
  }
  return v5;
}

void sub_1BAF978C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void HALS_PlugInEngine::~HALS_PlugInEngine(HALS_PlugInEngine *this)
{
  HALS_IOEngine2::~HALS_IOEngine2(this);

  JUMPOUT(0x1C1859840);
}

void HALS_PlugInEngine::HALS_PlugInEngine(HALS_PlugInEngine *this, HALS_PlugIn *a2, HALS_IODevice *a3, uint64_t a4, HALS_Object *a5)
{
}

uint64_t HALS_PlugInEngine::GetOwningPlugInDeviceUCID(HALS_PlugInEngine *this, HALS_IODevice *a2)
{
  int v3 = *((_DWORD *)this + 5);
  int v2 = *((_DWORD *)this + 6);
  uint64_t v4 = 1324;
  if (v3 <= 1701078389)
  {
    BOOL v5 = v3 == 1633773415;
    int v6 = 1633969526;
  }
  else
  {
    BOOL v5 = v3 == 1701078390 || v3 == 1701733488;
    int v6 = 1919182198;
  }
  if (v5 || v3 == v6) {
    return *(unsigned int *)((char *)this + v4);
  }
  if (v3 != v2)
  {
    uint64_t v4 = 1324;
    if (v2 <= 1701078389)
    {
      if (v2 == 1633773415) {
        return *(unsigned int *)((char *)this + v4);
      }
      int v9 = 1633969526;
    }
    else
    {
      if (v2 == 1701078390 || v2 == 1701733488) {
        return *(unsigned int *)((char *)this + v4);
      }
      int v9 = 1919182198;
    }
    if (v2 != v9)
    {
      uint64_t v4 = 388;
      if (v3 != v2 && v3 != 1633905771 && v2 != 1633905771) {
        return 0;
      }
    }
    return *(unsigned int *)((char *)this + v4);
  }
  uint64_t v4 = 388;
  if (v3 == 1633905771 || v3 != v2) {
    return *(unsigned int *)((char *)this + v4);
  }
  return 0;
}

uint64_t HALS_PowerManager::Teardown(uint64_t this)
{
  if (*(unsigned char *)(this + 408))
  {
    uint64_t v1 = this;
    this = (*(uint64_t (**)(void, void))(**(void **)(this + 8) + 40))(*(void *)(this + 8), *(void *)(this + 392));
    *(unsigned char *)(v1 + 408) = 0;
  }
  return this;
}

void HALS_PowerManager::Initialize(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2 != 1)
  {
    uint64_t v8 = 0;
    int v3 = (*(uint64_t (**)(void, uint64_t, uint64_t *))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), a1 + 400, &v8);
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
    if (v3 && os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "HALS_PowerManager.cpp";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = 62;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v3;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_PowerManager::InitUserActivityLevelNotification: failed to get the user activity level, Error: 0x%X", buf, 0x18u);
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = *(void *)(a1 + 64);
    *(void *)std::string buf = MEMORY[0x1E4F143A8];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&buf[16] = ___ZN17HALS_PowerManager33InitUserActivityLevelNotificationEv_block_invoke;
    uint64_t v14 = &__block_descriptor_tmp_19860;
    uint64_t v15 = a1;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v4 + 32))(v4, v5, buf);
    *(void *)(a1 + 392) = v6;
    if (!v6)
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)
        || (*(_DWORD *)int v9 = 136315394,
            int v10 = "HALS_PowerManager.cpp",
            __int16 v11 = 1024,
            int v12 = 75,
            _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  [FAIL] IOPMScheduleUserActivityLevelNotification returned 0", v9, 0x12u), !*(void *)(a1 + 392)))
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)int v9 = 136315394;
          int v10 = "HALS_PowerManager.cpp";
          __int16 v11 = 1024;
          int v12 = 76;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALS_System::_InitUserActivityLevelNotification: IOPMScheduleUserActivityLevelNotification() failed to return the handle", v9, 0x12u);
        }
        exceptiouint64_t n = __cxa_allocate_exception(0x10uLL);
        *(void *)exceptiouint64_t n = off_1F148A5D8;
        exception[2] = 2003329396;
      }
    }
    *(unsigned char *)(a1 + 408) = 1;
  }
}

uint64_t ___ZN17HALS_PowerManager33InitUserActivityLevelNotificationEv_block_invoke(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)(a1 + 32);
  v2[50] = a2;
  return (*(uint64_t (**)(void))(*v2 + 32))();
}

void HALS_PowerManager::~HALS_PowerManager(HALS_PowerManager *this)
{
  HALS_PowerManager::~HALS_PowerManager(this);

  JUMPOUT(0x1C1859840);
}

{
  std::__shared_weak_count *v2;

  *(void *)this = &unk_1F148A480;
  if (*((unsigned char *)this + 408))
  {
    (*(void (**)(void, void))(**((void **)this + 1) + 40))(*((void *)this + 1), *((void *)this + 49));
    *((unsigned char *)this + 408) = 0;
  }
  AMCP::Utility::Dispatch_Queue::~Dispatch_Queue((HALS_PowerManager *)((char *)this + 64));
  std::__function::__value_func<void ()(void *,AMCP::Power_State)>::~__value_func[abi:ne180100]((void *)this + 4);
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionRelease()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionSetNotification()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionAcknowledgeEvent()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionCreate()
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::PMConnectionGetSystemCapabilities(HALS_PowerManager::True_System_Interface *this)
{
  return 0;
}

uint64_t HALS_PowerManager::True_System_Interface::CancelPowerChange(HALS_PowerManager::True_System_Interface *this, io_connect_t kernelPort, intptr_t notificationID)
{
  return IOCancelPowerChange(kernelPort, notificationID);
}

uint64_t HALS_PowerManager::True_System_Interface::AllowPowerChange(HALS_PowerManager::True_System_Interface *this, io_connect_t kernelPort, intptr_t notificationID)
{
  return IOAllowPowerChange(kernelPort, notificationID);
}

uint64_t HALS_PowerManager::True_System_Interface::ServiceClose(HALS_PowerManager::True_System_Interface *this, io_connect_t connect)
{
  return IOServiceClose(connect);
}

void HALS_PowerManager::True_System_Interface::NotificationPortDestroy(HALS_PowerManager::True_System_Interface *this, IONotificationPortRef notify)
{
}

uint64_t HALS_PowerManager::True_System_Interface::DeregisterForSystemPower(HALS_PowerManager::True_System_Interface *this, io_object_t *notifier)
{
  return IODeregisterForSystemPower(notifier);
}

void HALS_PowerManager::True_System_Interface::NotificationPortSetDispatchQueue(HALS_PowerManager::True_System_Interface *this, IONotificationPortRef notify, dispatch_queue_t queue)
{
}

uint64_t HALS_PowerManager::True_System_Interface::RegisterForSystemPower(HALS_PowerManager::True_System_Interface *this, void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return IORegisterForSystemPower(refcon, thePortRef, callback, notifier);
}

uint64_t HALS_PowerManager::True_System_Interface::PMUnregisterNotification(HALS_PowerManager::True_System_Interface *this, uint64_t a2)
{
  return MEMORY[0x1F40E90B0](a2);
}

uint64_t HALS_PowerManager::True_System_Interface::PMScheduleUserActivityLevelNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F40E9070](a2, a3);
}

uint64_t HALS_PowerManager::True_System_Interface::PMGetUserActivityLevel(HALS_PowerManager::True_System_Interface *this, unint64_t *a2, unint64_t *a3)
{
  return MEMORY[0x1F40E9030](a2, a3);
}

void HALS_PowerManager::True_System_Interface::~True_System_Interface(HALS_PowerManager::True_System_Interface *this)
{
}

void HALB_Mutex::~HALB_Mutex(HALB_Mutex *this)
{
  HALB_Mutex::~HALB_Mutex(this);

  JUMPOUT(0x1C1859840);
}

{
  int v1;
  int v2;
  unsigned char v3[5];
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  __int16 v10;
  unsigned char *v11;
  uint64_t v12;

  int v12 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F148A600;
  if (!*((_DWORD *)this + 22))
  {
    uint64_t v1 = pthread_mutex_destroy((pthread_mutex_t *)((char *)this + 8));
    int v2 = v1;
    if (v1)
    {
      v3[0] = HIBYTE(v1);
      v3[1] = BYTE2(v1);
      uint64_t v3[2] = BYTE1(v1);
      v3[3] = v1;
      v3[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315906;
        uint64_t v5 = "HALB_Mutex.cpp";
        uint64_t v6 = 1024;
        uint64_t v7 = 42;
        uint64_t v8 = 1024;
        int v9 = v2;
        int v10 = 2080;
        __int16 v11 = v3;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::~HALB_Mutex: failed to destroy the mutex, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

void sub_1BAF980F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALB_Guard::~HALB_Guard(pthread_cond_t *this)
{
  HALB_Guard::~HALB_Guard(this);

  JUMPOUT(0x1C1859840);
}

{
  int v2;
  int v3;
  unsigned char v4[5];
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;
  unsigned char *v12;
  uint64_t v13;

  uint64_t v13 = *MEMORY[0x1E4F143B8];
  this->__sig = (uint64_t)&unk_1F148A620;
  if (!*(_DWORD *)&this[1].__opaque[32])
  {
    int v2 = pthread_cond_destroy(this + 2);
    int v3 = v2;
    if (v2)
    {
      v4[0] = HIBYTE(v2);
      v4[1] = BYTE2(v2);
      v4[2] = BYTE1(v2);
      void v4[3] = v2;
      v4[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315906;
        uint64_t v6 = "HALB_Mutex.cpp";
        uint64_t v7 = 1024;
        uint64_t v8 = 178;
        int v9 = 1024;
        int v10 = v3;
        __int16 v11 = 2080;
        int v12 = v4;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::~HALB_Guard: failed to destroy the condition variable, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
  HALB_Mutex::~HALB_Mutex((HALB_Mutex *)this);
}

void sub_1BAF98274(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void HALB_Mutex::HALB_Mutex(HALB_Mutex *this)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1F148A600;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  int v2 = pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), 0);
  *((_DWORD *)this + 22) = v2;
  if (v2)
  {
    int v3 = v2;
    v4[0] = HIBYTE(v2);
    v4[1] = BYTE2(v2);
    v4[2] = BYTE1(v2);
    void v4[3] = v2;
    v4[4] = 0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string buf = 136315906;
      uint64_t v6 = "HALB_Mutex.cpp";
      __int16 v7 = 1024;
      int v8 = 34;
      __int16 v9 = 1024;
      int v10 = v3;
      __int16 v11 = 2080;
      int v12 = v4;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::HALB_Mutex: failed to initialize the mutex, Error: %d (%s)", buf, 0x22u);
    }
  }
}

uint64_t HALB_Mutex::Lock(HALB_Mutex *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((unsigned int *)this + 22);
  if (v1) {
    return v1;
  }
  uint64_t v4 = (_opaque_pthread_t *)*((void *)this + 9);
  if (v4 == pthread_self())
  {
    uint64_t v6 = *((void *)this + 10);
    if (v6 != -1)
    {
      uint64_t v1 = 0;
      *((void *)this + 10) = v6 + 1;
      return v1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v10 = "HALB_Mutex.cpp";
      __int16 v11 = 1024;
      int v12 = 121;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Lock: lock count at maximum", buf, 0x12u);
    }
    return 34;
  }
  uint64_t v5 = pthread_mutex_lock((pthread_mutex_t *)((char *)this + 8));
  if (!v5)
  {
    uint64_t v7 = *((void *)this + 10);
    if (v7 != -1)
    {
      *((void *)this + 10) = v7 + 1;
      uint64_t v1 = 0;
      *((void *)this + 9) = pthread_self();
      return v1;
    }
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      int v10 = "HALB_Mutex.cpp";
      __int16 v11 = 1024;
      int v12 = 107;
      _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Lock: lock count at maximum after locking", buf, 0x12u);
    }
    pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
    return 34;
  }
  uint64_t v1 = v5;
  v8[0] = BYTE3(v5);
  v8[1] = BYTE2(v5);
  void v8[2] = BYTE1(v5);
  void v8[3] = v5;
  void v8[4] = 0;
  if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315906;
    int v10 = "HALB_Mutex.cpp";
    __int16 v11 = 1024;
    int v12 = 97;
    __int16 v13 = 1024;
    int v14 = v1;
    __int16 v15 = 2080;
    uint64_t v16 = v8;
    _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::Lock: locking failed, Error: %d (%s)", buf, 0x22u);
  }
  return v1;
}

uint64_t HALB_Mutex::Unlock(HALB_Mutex *this)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *((unsigned int *)this + 22);
  if (!v1)
  {
    int v3 = (_opaque_pthread_t *)*((void *)this + 9);
    if (v3 == pthread_self())
    {
      uint64_t v5 = *((void *)this + 10);
      if (v5)
      {
        uint64_t v6 = v5 - 1;
        *((void *)this + 10) = v6;
        if (v6)
        {
          return 0;
        }
        else
        {
          *((void *)this + 9) = 0;
          uint64_t v7 = pthread_mutex_unlock((pthread_mutex_t *)((char *)this + 8));
          uint64_t v1 = v7;
          if (v7)
          {
            v8[0] = BYTE3(v7);
            v8[1] = BYTE2(v7);
            void v8[2] = BYTE1(v7);
            void v8[3] = v7;
            void v8[4] = 0;
            if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)std::string buf = 136315906;
              int v10 = "HALB_Mutex.cpp";
              __int16 v11 = 1024;
              int v12 = 143;
              __int16 v13 = 1024;
              int v14 = v1;
              __int16 v15 = 2080;
              uint64_t v16 = v8;
              _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Mutex::Unlock: unlocking failed, Error: %d (%s)", buf, 0x22u);
            }
          }
        }
      }
      else
      {
        if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 136315394;
          int v10 = "HALB_Mutex.cpp";
          __int16 v11 = 1024;
          int v12 = 148;
          _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Unlock: the lock count is at 0 already", buf, 0x12u);
        }
        return 34;
      }
    }
    else
    {
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string buf = 136315394;
        int v10 = "HALB_Mutex.cpp";
        __int16 v11 = 1024;
        int v12 = 154;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT, "%25s:%-5d  HALB_Mutex::Unlock: can't unlock a mutex the thread hasn't locked", buf, 0x12u);
      }
      return 1;
    }
  }
  return v1;
}

void HALB_Guard::HALB_Guard(HALB_Guard *this)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  HALB_Mutex::HALB_Mutex(this);
  v2->__sig = (uint64_t)&unk_1F148A620;
  *(_OWORD *)&v2[2].__sig = 0u;
  int v3 = v2 + 2;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  if (!*((_DWORD *)this + 22))
  {
    int v4 = pthread_cond_init(v3, 0);
    int v5 = v4;
    *((_DWORD *)this + 22) = v4;
    if (v4)
    {
      v6[0] = HIBYTE(v4);
      v6[1] = BYTE2(v4);
      _OWORD v6[2] = BYTE1(v4);
      void v6[3] = v4;
      void v6[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315906;
        int v8 = "HALB_Mutex.cpp";
        __int16 v9 = 1024;
        int v10 = 169;
        __int16 v11 = 1024;
        int v12 = v5;
        __int16 v13 = 2080;
        int v14 = v6;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::HALB_Guard: failed to initialize the condition variable, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

void sub_1BAF98960(_Unwind_Exception *a1)
{
  HALB_Mutex::~HALB_Mutex(v1);
  _Unwind_Resume(a1);
}

void HALB_Guard::Wait(HALB_Guard *this)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!*((_DWORD *)this + 22))
  {
    int v2 = (void *)((char *)this + 72);
    int v3 = (_opaque_pthread_t *)*((void *)this + 9);
    if (v3 != pthread_self())
    {
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)std::string buf = 136315394;
      __int16 v13 = "HALB_Mutex.cpp";
      __int16 v14 = 1024;
      int v15 = 202;
      int v4 = MEMORY[0x1E4F14500];
      int v5 = "%25s:%-5d  HALB_Mutex::Wait: can't wait with a mutex the thread hasn't locked";
      os_log_type_t v6 = OS_LOG_TYPE_DEFAULT;
      uint32_t v7 = 18;
LABEL_8:
      _os_log_impl(&dword_1BAA78000, v4, v6, v5, buf, v7);
      return;
    }
    uint64_t v8 = *((void *)this + 10);
    *int v2 = 0;
    v2[1] = 0;
    int v9 = pthread_cond_wait((pthread_cond_t *)this + 2, (pthread_mutex_t *)((char *)this + 8));
    if (v9)
    {
      int v10 = v9;
      v11[0] = HIBYTE(v9);
      v11[1] = BYTE2(v9);
      void v11[2] = BYTE1(v9);
      uint64_t v11[3] = v9;
      void v11[4] = 0;
      if (!os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
        return;
      }
      *(_DWORD *)std::string buf = 136315906;
      __int16 v13 = "HALB_Mutex.cpp";
      __int16 v14 = 1024;
      int v15 = 193;
      __int16 v16 = 1024;
      int v17 = v10;
      __int16 v18 = 2080;
      uint64_t v19 = v11;
      int v4 = MEMORY[0x1E4F14500];
      int v5 = "%25s:%-5d  HALB_Guard::Wait: waiting failed, Error: %d (%s)";
      os_log_type_t v6 = OS_LOG_TYPE_ERROR;
      uint32_t v7 = 34;
      goto LABEL_8;
    }
    *((void *)this + 10) = v8;
    *((void *)this + 9) = pthread_self();
  }
}

void HALB_Guard::Notify(pthread_cond_t *this)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (!*(_DWORD *)&this[1].__opaque[32])
  {
    int v1 = pthread_cond_signal(this + 2);
    if (v1)
    {
      int v2 = v1;
      v3[0] = HIBYTE(v1);
      v3[1] = BYTE2(v1);
      uint64_t v3[2] = BYTE1(v1);
      v3[3] = v1;
      v3[4] = 0;
      if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)std::string buf = 136315906;
        int v5 = "HALB_Mutex.cpp";
        __int16 v6 = 1024;
        int v7 = 279;
        __int16 v8 = 1024;
        int v9 = v2;
        __int16 v10 = 2080;
        __int16 v11 = v3;
        _os_log_impl(&dword_1BAA78000, MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR, "%25s:%-5d  HALB_Guard::Notify: signaling failed, Error: %d (%s)", buf, 0x22u);
      }
    }
  }
}

uint64_t Extrinsic_Driver_Connection_To_Server::register_new_driver(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  int v14 = 0;
  __int16 v8 = *(id *)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3321888768;
  block[2] = ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke;
  block[3] = &unk_1F148A660;
  block[4] = &v11;
  void block[5] = a1;
  block[6] = a2;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a4);
  char v17 = a3;
  dispatch_sync(v8, block);

  uint64_t v9 = *((unsigned int *)v12 + 6);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v16);
  _Block_object_dispose(&v11, 8);
  return v9;
}

void sub_1BAF98D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  int v3 = *(void **)(v2 + 24);
  if (!v3)
  {
    uint64_t v4 = [objc_alloc(MEMORY[0x1E4F29268]) initWithMachServiceName:@"com.apple.audio.driver-registrar" options:0];
    int v5 = *(void **)(v2 + 24);
    *(void *)(v2 + 24) = v4;

    __int16 v6 = [MEMORY[0x1E4F29280] interfaceWithProtocol:&unk_1F1491978];
    [*(id *)(v2 + 24) setRemoteObjectInterface:v6];

    id v7 = *(id *)(v2 + 24);
    aBlocuint64_t k = (id *)MEMORY[0x1E4F143A8];
    *(void *)&long long v81 = 3321888768;
    *((void *)&v81 + 1) = ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__0cvU13block_pointerFvvEEv_block_invoke;
    *(void *)&long long v82 = &__block_descriptor_40_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__0_e5_v8__0l;
    *((void *)&v82 + 1) = v7;
    id v8 = v7;
    uint64_t v9 = _Block_copy(&aBlock);

    [*(id *)(v2 + 24) setInterruptionHandler:v9];
    aBlocuint64_t k = (id *)MEMORY[0x1E4F143A8];
    *(void *)&long long v81 = 3321888768;
    *((void *)&v81 + 1) = ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__2cvU13block_pointerFvvEEv_block_invoke;
    *(void *)&long long v82 = &__block_descriptor_40_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__2_e5_v8__0l;
    *((void *)&v82 + 1) = v2;
    __int16 v10 = _Block_copy(&aBlock);
    [*(id *)(v2 + 24) setInvalidationHandler:v10];

    [*(id *)(v2 + 24) resume];
    int v3 = *(void **)(v2 + 24);
  }
  v74[0] = MEMORY[0x1E4F143A8];
  v74[1] = 3221225472;
  v74[2] = ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke_2;
  v74[3] = &unk_1E6236670;
  v74[4] = *(void *)(a1 + 32);
  uint64_t v11 = [v3 synchronousRemoteObjectProxyWithErrorHandler:v74];
  if (!v11)
  {
    AMCP::Log::Scope_Registry::get(0);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&aBlock, "com.apple.coreaudio", "AMCP");
    uint64_t v18 = *aBlock;
    AMCP::Log::Scope::get_os_log_t(*aBlock);
    objc_claimAutoreleasedReturnValue();
    if ((void)v81) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v81);
    }
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      long long v65 = pthread_self();
      mach_port_t v66 = pthread_mach_thread_np(v65);
      unint64_t v67 = 0;
      BOOL v68 = 0;
      int v69 = 47;
      do
      {
        uint64_t v70 = &aLibraryCachesC_188[v67];
        if (v69 == 47) {
          BOOL v68 = &aLibraryCachesC_188[v67];
        }
        int v69 = v70[1];
        if (!v70[1]) {
          break;
        }
        BOOL v62 = v67++ >= 0xFFF;
      }
      while (!v62);
      if (v68) {
        mach_port_t v71 = v68 + 1;
      }
      else {
        mach_port_t v71 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      }
      uint64_t v72 = *(void *)(a1 + 48);
      LODWORD(aBlock) = 67109890;
      HIDWORD(aBlock) = v66;
      LOWORD(v81) = 2080;
      *(void *)((char *)&v81 + 2) = v71;
      WORD5(v81) = 1024;
      HIDWORD(v81) = 104;
      LOWORD(v82) = 2048;
      *(void *)((char *)&v82 + 2) = v72;
      _os_log_error_impl(&dword_1BAA78000, v18, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Extrinsic_Driver_Connection_To_Server: failed to get server proxy connection, driver interface %p", (uint8_t *)&aBlock, 0x22u);
    }

    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1937010544;
    goto LABEL_61;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v77, a1 + 56);
  uint64_t v13 = [Core_Audio_Driver alloc];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v86, (uint64_t)v77);
  aBlocuint64_t k = [(Core_Audio_Driver *)v13 init_driver_interface:v12 invalidation_handler:&v86];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v81, (uint64_t)v77);
  int v15 = *(id ***)(v2 + 8);
  unint64_t v14 = *(void *)(v2 + 16);
  if ((unint64_t)v15 >= v14)
  {
    unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v15 - *(void *)v2) >> 3);
    unint64_t v20 = v19 + 1;
    if (v19 + 1 > 0x666666666666666) {
      std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - *(void *)v2) >> 3);
    if (2 * v21 > v20) {
      unint64_t v20 = 2 * v21;
    }
    if (v21 >= 0x333333333333333) {
      unint64_t v22 = 0x666666666666666;
    }
    else {
      unint64_t v22 = v20;
    }
    if (v22)
    {
      if (v22 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v23 = (char *)operator new(40 * v22);
    }
    else
    {
      uint64_t v23 = 0;
    }
    uint64_t v24 = (id **)&v23[40 * v19];
    long long v25 = &v23[40 * v22];
    uint64_t v26 = aBlock;
    aBlocuint64_t k = 0;
    *uint64_t v24 = v26;
    char v17 = v24 + 5;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v24 + 1), (uint64_t)&v81);
    long long v28 = *(void **)v2;
    uint64_t v27 = *(void **)(v2 + 8);
    if (v27 == *(void **)v2)
    {
      *(void *)uint64_t v2 = v24;
      *(void *)(v2 + 8) = v17;
      *(void *)(v2 + 16) = v25;
      if (!v27) {
        goto LABEL_27;
      }
    }
    else
    {
      do
      {
        uint64_t v29 = (id *)*(v27 - 5);
        v27 -= 5;
        *uint64_t v27 = 0;
        *(v24 - 5) = v29;
        v24 -= 5;
        std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v24 + 1), (uint64_t)(v27 + 1));
      }
      while (v27 != v28);
      uint64_t v30 = *(void **)v2;
      uint64_t v27 = *(void **)(v2 + 8);
      *(void *)uint64_t v2 = v24;
      *(void *)(v2 + 8) = v17;
      *(void *)(v2 + 16) = v25;
      if (v27 != v30)
      {
        do
        {
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v27 - 4);
          uint64_t v31 = (void *)*(v27 - 5);
          v27 -= 5;
        }
        while (v27 != v30);
        uint64_t v27 = v30;
      }
      if (!v27) {
        goto LABEL_27;
      }
    }
    operator delete(v27);
  }
  else
  {
    __int16 v16 = aBlock;
    aBlocuint64_t k = 0;
    *int v15 = v16;
    char v17 = v15 + 5;
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)(v15 + 1), (uint64_t)&v81);
  }
LABEL_27:
  *(void *)(v2 + 8) = v17;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v81);

  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&v86);
  uint64_t v32 = *(void *)(v2 + 8);
  id v78 = *(id *)(v32 - 40);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v79, v32 - 32);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v77);
  uint64_t v33 = [v78 endpoint];
  int v73 = *(unsigned __int8 *)(a1 + 88);
  id v34 = v11;
  id v35 = v33;
  uint64_t v86 = 0;
  uint64_t v87 = &v86;
  uint64_t v88 = 0x2020000000;
  int v89 = 1937010544;
  long long v36 = [MEMORY[0x1E4F28B50] mainBundle];
  long long v37 = [v36 bundleURL];
  long long v38 = [v36 bundleIdentifier];
  if (!v38)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)&v81 + 1, (uint64_t)"ExtrinsicDriver-", 16);
    getpid();
    std::ostream::operator<<();
    long long v39 = NSString;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>(__p, (uint64_t)&v82);
    if (v76 >= 0) {
      long long v40 = __p;
    }
    else {
      long long v40 = (void **)__p[0];
    }
    long long v38 = [v39 stringWithUTF8String:v40];
    if (v76 < 0) {
      operator delete(__p[0]);
    }
    aBlocuint64_t k = (id *)*MEMORY[0x1E4FBA408];
    uint64_t v41 = *(void *)(MEMORY[0x1E4FBA408] + 72);
    *(id **)((char *)&aBlock + (void)*(aBlock - 3)) = *(id **)(MEMORY[0x1E4FBA408] + 64);
    *((void *)&v81 + 1) = v41;
    *(void *)&long long v82 = MEMORY[0x1E4FBA470] + 16;
    if (v84 < 0) {
      operator delete(v83);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1C1859700](&v85);
  }
  aBlocuint64_t k = (id *)MEMORY[0x1E4F143A8];
  *(void *)&long long v81 = 3221225472;
  *((void *)&v81 + 1) = ___ZN37Extrinsic_Driver_Connection_To_Server16_register_driverEPU47objcproto36Core_Audio_Driver_Registrar_Protocol11objc_objectP21NSXPCListenerEndpointb_block_invoke;
  *(void *)&long long v82 = &unk_1E6236698;
  *((void *)&v82 + 1) = &v86;
  objc_msgSend(v34, "register_driver:bundle_url:bundle_id:cpu_type:is_using_driver_service:reply:", v35, v37, v38, 16777228, v73 != 0, &aBlock);
  int v42 = *((_DWORD *)v87 + 6);

  _Block_object_dispose(&v86, 8);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v42;

  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    AMCP::Log::Scope_Registry::get(v43);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&aBlock, "com.apple.coreaudio", "AMCP");
    long long v44 = *aBlock;
    AMCP::Log::Scope::get_os_log_t(*aBlock);
    objc_claimAutoreleasedReturnValue();
    if ((void)v81) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v81);
    }
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      unint64_t v56 = pthread_self();
      mach_port_t v57 = pthread_mach_thread_np(v56);
      unint64_t v58 = 0;
      uint64_t v59 = 0;
      int v60 = 47;
      do
      {
        uint64_t v61 = &aLibraryCachesC_188[v58];
        if (v60 == 47) {
          uint64_t v59 = &aLibraryCachesC_188[v58];
        }
        int v60 = v61[1];
        if (!v61[1]) {
          break;
        }
        BOOL v62 = v58++ >= 0xFFF;
      }
      while (!v62);
      if (v59) {
        long long v63 = v59 + 1;
      }
      else {
        long long v63 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      }
      uint64_t v64 = *(void *)(a1 + 48);
      LODWORD(aBlock) = 67109890;
      HIDWORD(aBlock) = v57;
      LOWORD(v81) = 2080;
      *(void *)((char *)&v81 + 2) = v63;
      WORD5(v81) = 1024;
      HIDWORD(v81) = 95;
      LOWORD(v82) = 2048;
      *(void *)((char *)&v82 + 2) = v64;
      _os_log_error_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Extrinsic_Driver_Connection_To_Server: Failed to register remote driver, driver interface %p", (uint8_t *)&aBlock, 0x22u);
    }

    if (v78)
    {
      id v45 = v78;
      long long v46 = v45;
      long long v47 = *(void **)v2;
      long long v48 = *(void **)(v2 + 8);
      if (*(void **)v2 != v48)
      {
        while ((id)*v47 != v45)
        {
          v47 += 5;
          if (v47 == v48) {
            goto LABEL_59;
          }
        }
      }
      if (v47 != v48)
      {
        long long v49 = v47 + 5;
        if (v47 + 5 != v48)
        {
          while (1)
          {
            uint64_t v50 = v47[5];
            v47[5] = 0;
            id v51 = (id)*v47;
            *long long v47 = v50;

            std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v47 + 1);
            long long v52 = (void *)v47[9];
            if (v52)
            {
              if (v47 + 6 == v52)
              {
                v47[4] = v47 + 1;
                (*(void (**)(void *, void *))(*v52 + 24))(v52, v47 + 1);
                goto LABEL_53;
              }
              long long v53 = v49 + 4;
              v47[4] = v52;
            }
            else
            {
              long long v53 = v47 + 4;
            }
            *long long v53 = 0;
LABEL_53:
            v49 += 5;
            uint64_t v54 = (uint64_t)(v47 + 5);
            unint64_t v55 = v47 + 10;
            v47 += 5;
            if (v55 == v48) {
              goto LABEL_58;
            }
          }
        }
        uint64_t v54 = (uint64_t)v47;
LABEL_58:
        std::vector<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>>::__base_destruct_at_end[abi:ne180100](v2, v54);
      }
LABEL_59:
    }
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v79);

LABEL_61:
}

void sub_1BAF99778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);

  _Block_object_dispose((const void *)(v38 - 152), 8);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a12);

  _Unwind_Resume(a1);
}

void *__destroy_helper_block_ea8_56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
}

uint64_t __copy_helper_block_ea8_56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void ___ZN37Extrinsic_Driver_Connection_To_Server19register_new_driverEPP32AudioServerPlugInDriverInterfacebNSt3__18functionIFvvEEE_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  AMCP::Log::Scope_Registry::get(v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  uint64_t v4 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = pthread_self();
    mach_port_t v10 = pthread_mach_thread_np(v9);
    unint64_t v11 = 0;
    uint64_t v12 = 0;
    int v13 = 47;
    do
    {
      unint64_t v14 = &aLibraryCachesC_188[v11];
      if (v13 == 47) {
        uint64_t v12 = &aLibraryCachesC_188[v11];
      }
      int v13 = v14[1];
      if (!v14[1]) {
        break;
      }
    }
    while (v11++ < 0xFFF);
    if (v12) {
      __int16 v16 = v12 + 1;
    }
    else {
      __int16 v16 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    }
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v10;
    *(_WORD *)uint64_t v18 = 2080;
    *(void *)&uint64_t v18[2] = v16;
    __int16 v19 = 1024;
    int v20 = 84;
    _os_log_error_impl(&dword_1BAA78000, v4, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Extrinsic_Driver_Connection_To_Server: server proxy connection failed.", buf, 0x18u);
  }

  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1937010544;
  int v5 = v3;
  NSLog(&cfstr_AudiohardwareG.isa);
  NSLog(&cfstr_CodeLd.isa, [(AMCP::Log::Scope_Registry *)v5 code]);
  __int16 v6 = [(AMCP::Log::Scope_Registry *)v5 localizedDescription];
  NSLog(&cfstr_Description.isa, v6);

  id v7 = [(AMCP::Log::Scope_Registry *)v5 localizedFailureReason];
  NSLog(&cfstr_Reason.isa, v7);

  id v8 = [(AMCP::Log::Scope_Registry *)v5 localizedRecoverySuggestion];
  NSLog(&cfstr_Suggestion.isa, v8);
}

void sub_1BAF99AE0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void std::vector<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(i - 32));
    int v5 = *(void **)(i - 40);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t ___ZN37Extrinsic_Driver_Connection_To_Server16_register_driverEPU47objcproto36Core_Audio_Driver_Registrar_Protocol11objc_objectP21NSXPCListenerEndpointb_block_invoke(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = a2;
  return result;
}

uint64_t ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__0cvU13block_pointerFvvEEv_block_invoke(id *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get((AMCP::Log::Scope_Registry *)a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v12, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v12;
  AMCP::Log::Scope::get_os_log_t(*v12);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v13);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    uint64_t v4 = pthread_self();
    mach_port_t v5 = pthread_mach_thread_np(v4);
    unint64_t v6 = 0;
    id v7 = 0;
    int v8 = 47;
    do
    {
      uint64_t v9 = &aLibraryCachesC_188[v6];
      if (v8 == 47) {
        id v7 = &aLibraryCachesC_188[v6];
      }
      int v8 = v9[1];
      if (!v9[1]) {
        break;
      }
    }
    while (v6++ < 0xFFF);
    if (v7) {
      unint64_t v11 = v7 + 1;
    }
    else {
      unint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    }
    LODWORD(v12) = 67109634;
    HIDWORD(v12) = v5;
    *(_WORD *)int v13 = 2080;
    *(void *)&uint64_t v13[2] = v11;
    __int16 v14 = 1024;
    int v15 = 119;
    _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HAL Server Connection Interrupted", (uint8_t *)&v12, 0x18u);
  }

  return [a1[4] invalidate];
}

void sub_1BAF99CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__2cvU13block_pointerFvvEEv_block_invoke(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  AMCP::Log::Scope_Registry::get(a1);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v14, "com.apple.coreaudio", "AMCP");
  uint64_t v2 = *v14;
  AMCP::Log::Scope::get_os_log_t(*v14);
  objc_claimAutoreleasedReturnValue();
  if ((void)v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v15);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    unint64_t v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    int v10 = 47;
    do
    {
      unint64_t v11 = &aLibraryCachesC_188[v8];
      if (v10 == 47) {
        uint64_t v9 = &aLibraryCachesC_188[v8];
      }
      int v10 = v11[1];
      if (!v11[1]) {
        break;
      }
    }
    while (v8++ < 0xFFF);
    if (v9) {
      int v13 = v9 + 1;
    }
    else {
      int v13 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    }
    LODWORD(v14) = 67109634;
    HIDWORD(v14) = v7;
    LOWORD(v15) = 2080;
    *(void *)((char *)&v15 + 2) = v13;
    WORD5(v15) = 1024;
    HIDWORD(v15) = 136;
    _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d HAL Server Connection Invalidated", (uint8_t *)&v14, 0x18u);
  }

  uint64_t v3 = *((void *)a1 + 4);
  __int16 v14 = (id *)MEMORY[0x1E4F143A8];
  *(void *)&long long v15 = 3221225472;
  *((void *)&v15 + 1) = ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__1clEv_block_invoke;
  uint64_t v16 = &__block_descriptor_40_e5_v8__0l;
  uint64_t v17 = v3;
  uint64_t v4 = *(void **)(v3 + 32);
  mach_port_t v5 = AMCP::Log::Scope::get_os_log_t(v4);
  dispatch_async(v5, &v14);
}

void sub_1BAF99EA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 32) = *(void *)(a2 + 32);
  return result;
}

void ___ZZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvENK3__1clEv_block_invoke(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  if (*v1 != v3)
  {
    do
    {
      uint64_t v4 = *(void *)(v2 + 32);
      if (!v4) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v4 + 48))(v4);
      v2 += 40;
    }
    while (v2 != v3);
    uint64_t v2 = *v1;
  }
  std::vector<std::pair<Core_Audio_Driver * {__strong},std::function<void ()(void)>>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v1, v2);
  mach_port_t v5 = (void *)v1[3];
  v1[3] = 0;
}

void __destroy_helper_block_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__0(uint64_t a1)
{
}

id __copy_helper_block_ea8_32c83_ZTSKZN37Extrinsic_Driver_Connection_To_Server28_create_connection_to_serverEvE3__0(uint64_t a1, uint64_t a2)
{
  id result = *(id *)(a2 + 32);
  *(void *)(a1 + 32) = result;
  return result;
}

uint64_t AudioServerPlugInRegisterRemote(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  uint64_t v4 = v3;
  {
    if (v3)
    {
      qword_1EBFFA9D0 = 0;
      AudioServerPlugInRegisterRemote::connectiouint64_t n = 0u;
      unk_1EBFFA9C0 = 0u;
      qword_1EBFFA9D0 = (uint64_t)dispatch_queue_create("Extrinsic connection queue", 0);
    }
  }
  AMCP::Log::Scope_Registry::get(v3);
  AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
  mach_port_t v5 = **(NSObject ***)buf;
  AMCP::Log::Scope::get_os_log_t(**(id **)buf);
  objc_claimAutoreleasedReturnValue();
  if (*(void *)v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v18);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v6 = pthread_self();
    mach_port_t v7 = pthread_mach_thread_np(v6);
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    int v10 = 47;
    do
    {
      unint64_t v11 = &aLibraryCachesC_188[v8];
      if (v10 == 47) {
        uint64_t v9 = &aLibraryCachesC_188[v8];
      }
      int v10 = v11[1];
      if (!v11[1]) {
        break;
      }
    }
    while (v8++ < 0xFFF);
    if (v9) {
      int v13 = v9 + 1;
    }
    else {
      int v13 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
    }
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v7;
    *(_WORD *)uint64_t v18 = 2080;
    *(void *)&uint64_t v18[2] = v13;
    __int16 v19 = 1024;
    int v20 = 233;
    __int16 v21 = 2048;
    uint64_t v22 = a1;
    _os_log_impl(&dword_1BAA78000, v5, OS_LOG_TYPE_DEFAULT, "%6u %32s:%-5d Registering new remote driver connection, driver interface %p", buf, 0x22u);
  }

  _Block_copy(v4);
  v16[0] = &unk_1F148AA10;
  uint64_t v16[2] = v16[1] = a1;
  uint64_t v16[3] = v16;
  uint64_t v14 = Extrinsic_Driver_Connection_To_Server::register_new_driver((uint64_t)&AudioServerPlugInRegisterRemote::connection, a1, 0, (uint64_t)v16);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v16);

  return v14;
}

void sub_1BAF9A1A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a9);

  _Unwind_Resume(a1);
}

void *std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"Z31AudioServerPlugInRegisterRemoteE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::operator()(AMCP::Log::Scope_Registry *a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (*((void *)a1 + 2))
  {
    AMCP::Log::Scope_Registry::get(a1);
    AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)&v13, "com.apple.coreaudio", "AMCP");
    uint64_t v2 = *v13;
    AMCP::Log::Scope::get_os_log_t(*v13);
    objc_claimAutoreleasedReturnValue();
    if (*(void *)v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v14);
    }
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = pthread_self();
      mach_port_t v5 = pthread_mach_thread_np(v4);
      unint64_t v6 = 0;
      mach_port_t v7 = 0;
      int v8 = 47;
      do
      {
        uint64_t v9 = &aLibraryCachesC_188[v6];
        if (v8 == 47) {
          mach_port_t v7 = &aLibraryCachesC_188[v6];
        }
        int v8 = v9[1];
        if (!v9[1]) {
          break;
        }
      }
      while (v6++ < 0xFFF);
      if (v7) {
        unint64_t v11 = v7 + 1;
      }
      else {
        unint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      }
      uint64_t v12 = *((void *)a1 + 1);
      LODWORD(v13) = 67109890;
      HIDWORD(v13) = v5;
      *(_WORD *)uint64_t v14 = 2080;
      *(void *)&uint64_t v14[2] = v11;
      __int16 v15 = 1024;
      int v16 = 238;
      __int16 v17 = 2048;
      uint64_t v18 = v12;
      _os_log_error_impl(&dword_1BAA78000, v2, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Calling the remote driver registration interruption handler, driver interface %p", (uint8_t *)&v13, 0x22u);
    }

    (*(void (**)(void))(*((void *)a1 + 2) + 16))();
    uint64_t v3 = (const void *)*((void *)a1 + 2);
  }
  else
  {
    uint64_t v3 = 0;
  }
  _Block_release(v3);
}

void sub_1BAF9A398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 16);
  *a2 = &unk_1F148AA10;
  a2[1] = v4;
  id result = _Block_copy(v3);
  a2[2] = result;
  return result;
}

void *std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(const void **)(a1 + 16);
  *uint64_t v2 = &unk_1F148AA10;
  v2[1] = v4;
  v2[2] = _Block_copy(v3);
  return v2;
}

void std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemote::$_0,std::allocator<AudioServerPlugInRegisterRemote::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

uint64_t AudioServerPlugInMain()
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  char v171 = 0;
  CFBundleRef MainBundle = CFBundleGetMainBundle();
  mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::from_get(&v170, MainBundle);
  mcp_applesauce::CF::BundleRef_proxy::get_info_dictionary((applesauce::CF::DictionaryRef *)&v169, (__CFBundle *)v170);
  mcp_applesauce::CF::BundleRef_proxy::get_bundle_id((applesauce::CF::StringRef *)&cf, (__CFBundle *)v170);
  CFStringRef v1 = (const __CFString *)cf;
  if (cf) {
    CFRetain(cf);
  }
  v167[1] = v1;
  memset(&v176, 0, sizeof(v176));
  Sandbox_Extensions::cache_iokit_registry_token((Sandbox_Extensions *)&v176, "IOUserUserClient");
  if (v1) {
    CFRetain(v1);
  }
  CFArrayRef v175 = (CFArrayRef)v1;
  if (!v169)
  {
    exceptiouint64_t n = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)std::string buf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, (const __CFDictionary *)v169, @"AudioServerPlugIn_IOKitUserClients", buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  CFArrayRef v2 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
  if (theArray.__r_.__value_.__r.__words[0])
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)theArray.__r_.__value_.__l.__data_);
    CFIndex v4 = CFArrayGetCount(v2);
    if (Count)
    {
      CFIndex v5 = v4;
      unint64_t v6 = 0;
      mach_port_t v7 = "com.apple.coreaudio";
      CFIndex v162 = v4;
      do
      {
        if (v6 == v5) {
          break;
        }
        int v8 = applesauce::CF::details::at_to<applesauce::CF::StringRef>((applesauce::CF::StringRef *)&v165, v2, v6);
        if (v165.__vftable)
        {
          AMCP::Log::Scope_Registry::get(v8);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, v7, "AMCP");
          uint64_t v9 = **(NSObject ***)buf;
          if (*(void *)v187) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
          }
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            int v10 = pthread_self();
            mach_port_t v11 = pthread_mach_thread_np(v10);
            unint64_t v12 = 0;
            int v13 = 0;
            int v14 = 47;
            do
            {
              __int16 v15 = &aLibraryCachesC_54[v12];
              if (v14 == 47) {
                int v13 = &aLibraryCachesC_54[v12];
              }
              int v14 = v15[1];
              if (!v15[1]) {
                break;
              }
              BOOL v16 = v12++ >= 0xFFF;
            }
            while (!v16);
            if (v13) {
              __int16 v17 = v13 + 1;
            }
            else {
              __int16 v17 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
            }
            if (!v1)
            {
              uint64_t v156 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v156, "Could not construct");
              __cxa_throw(v156, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            CFStringRef v18 = v1;
            uint64_t v19 = v7;
            CFStringRef v20 = v18;
            applesauce::CF::convert_to<std::string,0>((uint64_t)&v179, v18);
            if (SHIBYTE(v180) >= 0) {
              __int16 v21 = &v179;
            }
            else {
              __int16 v21 = v179.__vftable;
            }
            if (!v165.__vftable)
            {
              unsigned int v155 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v155, "Could not construct");
              __cxa_throw(v155, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
            }
            applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v165.__vftable);
            p_p = &__p;
            if (v178.__r_.__value_.__s.__data_[15] < 0) {
              p_p = __p;
            }
            *(_DWORD *)std::string buf = 67110146;
            *(_DWORD *)&uint8_t buf[4] = v11;
            *(_WORD *)char v187 = 2080;
            *(void *)&v187[2] = v17;
            __int16 v188 = 1024;
            int v189 = 111;
            *(_WORD *)char v190 = 2080;
            *(void *)&v190[2] = v21;
            *(_WORD *)&v190[10] = 2080;
            *(void *)&v190[12] = p_p;
            _os_log_impl(&dword_1BAA78000, v9, OS_LOG_TYPE_INFO, "%6u %32s:%-5d The plug-in named %s requires extending the sandbox for the IOKit user-client class %s.", buf, 0x2Cu);
            if (v178.__r_.__value_.__s.__data_[15] < 0) {
              operator delete(__p);
            }
            mach_port_t v7 = v19;
            CFIndex v5 = v162;
            if (SHIBYTE(v180) < 0) {
              operator delete(v179.__vftable);
            }
            CFStringRef v1 = v20;
          }
          if (!v165.__vftable)
          {
            std::vector<unsigned int>::pointer v153 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
            std::runtime_error::runtime_error(v153, "Could not construct");
            __cxa_throw(v153, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
          }
          applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)v165.__vftable);
          if (v189 >= 0) {
            uint64_t v23 = buf;
          }
          else {
            uint64_t v23 = *(uint8_t **)buf;
          }
          Sandbox_Extensions::cache_iokit_registry_token((Sandbox_Extensions *)&v176, (const char *)v23);
          if (SHIBYTE(v189) < 0) {
            operator delete(*(void **)buf);
          }
          if (v165.__vftable) {
            CFRelease(v165.__vftable);
          }
        }
        ++v6;
      }
      while (v6 != Count);
    }
    CFRelease(v2);
  }
  if (v1)
  {
    CFRelease(v1);
    CFRetain(v1);
  }
  CFTypeRef v174 = v1;
  if (!v169)
  {
    uint64_t v160 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v160, "Could not construct");
    __cxa_throw(v160, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
  }
  *(void *)std::string buf = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(&theArray, (const __CFDictionary *)v169, @"AudioServerPlugIn_MachServices", buf);
  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  CFArrayRef v24 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
  if (!theArray.__r_.__value_.__r.__words[0]) {
    goto LABEL_119;
  }
  CFIndex v25 = CFArrayGetCount((CFArrayRef)theArray.__r_.__value_.__l.__data_);
  CFIndex v26 = CFArrayGetCount(v24);
  if (!v25) {
    goto LABEL_118;
  }
  CFIndex v27 = v26;
  unint64_t v28 = 0;
  while (v28 != v27)
  {
    uint64_t v29 = applesauce::CF::details::at_to<applesauce::CF::StringRef>((applesauce::CF::StringRef *)&v165, v24, v28);
    if (v165.__vftable)
    {
      AMCP::Log::Scope_Registry::get(v29);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v30 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        uint64_t v31 = pthread_self();
        mach_port_t v32 = pthread_mach_thread_np(v31);
        unint64_t v33 = 0;
        id v34 = 0;
        int v35 = 47;
        do
        {
          long long v36 = &aLibraryCachesC_54[v33];
          if (v35 == 47) {
            id v34 = &aLibraryCachesC_54[v33];
          }
          int v35 = v36[1];
          if (!v36[1]) {
            break;
          }
          BOOL v16 = v33++ >= 0xFFF;
        }
        while (!v16);
        if (v34) {
          long long v37 = v34 + 1;
        }
        else {
          long long v37 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        if (!v174)
        {
          size_t v158 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v158, "Could not construct");
          __cxa_throw(v158, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&v179, (const __CFString *)v174);
        if (SHIBYTE(v180) >= 0) {
          uint64_t v38 = &v179;
        }
        else {
          uint64_t v38 = v179.__vftable;
        }
        if (!v165.__vftable)
        {
          int v157 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v157, "Could not construct");
          __cxa_throw(v157, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
        }
        applesauce::CF::convert_to<std::string,0>((uint64_t)&__p, (const __CFString *)v165.__vftable);
        long long v39 = &__p;
        if (v178.__r_.__value_.__s.__data_[15] < 0) {
          long long v39 = __p;
        }
        *(_DWORD *)std::string buf = 67110146;
        *(_DWORD *)&uint8_t buf[4] = v32;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v37;
        __int16 v188 = 1024;
        int v189 = 124;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = v38;
        *(_WORD *)&v190[10] = 2080;
        *(void *)&v190[12] = v39;
        _os_log_impl(&dword_1BAA78000, v30, OS_LOG_TYPE_INFO, "%6u %32s:%-5d The plug-in named %s requires extending the sandbox for the mach service named %s.", buf, 0x2Cu);
        if (v178.__r_.__value_.__s.__data_[15] < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v180) < 0) {
          operator delete(v179.__vftable);
        }
      }
      if (!v165.__vftable)
      {
        long long v154 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v154, "Could not construct");
        __cxa_throw(v154, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
      }
      applesauce::CF::convert_to<std::string,0>((uint64_t)buf, (const __CFString *)v165.__vftable);
      long long v40 = (AMCP::Log::Scope_Registry *)sandbox_extension_issue_mach();
      uint64_t v41 = v40;
      if (SHIBYTE(v189) < 0)
      {
        operator delete(*(void **)buf);
        if (!v41) {
          goto LABEL_86;
        }
LABEL_83:
        std::string::size_type size = (char *)v176.__r_.__value_.__l.__size_;
        if (v176.__r_.__value_.__l.__size_ >= v176.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v52 = v176.__r_.__value_.__r.__words[0];
          uint64_t v53 = (uint64_t)(v176.__r_.__value_.__l.__size_ - v176.__r_.__value_.__r.__words[0]) >> 3;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 61) {
            std::vector<std::tuple<std::pair<std::string,std::string>,std::shared_ptr<AMCP::Log::Scope>>>::__throw_length_error[abi:ne180100]();
          }
          int64_t v55 = v176.__r_.__value_.__r.__words[2] - v176.__r_.__value_.__r.__words[0];
          if ((uint64_t)(v176.__r_.__value_.__r.__words[2] - v176.__r_.__value_.__r.__words[0]) >> 2 > v54) {
            unint64_t v54 = v55 >> 2;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v56 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56) {
            unint64_t v56 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<void *>>(v56);
          }
          else {
            uint64_t v57 = 0;
          }
          unint64_t v58 = (AMCP::Log::Scope_Registry **)(v56 + 8 * v53);
          *unint64_t v58 = v41;
          std::string::size_type v43 = (std::string::size_type)(v58 + 1);
          if (size != (char *)v52)
          {
            do
            {
              uint64_t v59 = (AMCP::Log::Scope_Registry *)*((void *)size - 1);
              size -= 8;
              *--unint64_t v58 = v59;
            }
            while (size != (char *)v52);
            std::string::size_type size = (char *)v176.__r_.__value_.__r.__words[0];
          }
          v176.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
          v176.__r_.__value_.__r.__words[2] = v56 + 8 * v57;
          if (size) {
            operator delete(size);
          }
        }
        else
        {
          *(void *)v176.__r_.__value_.__l.__size_ = v41;
          std::string::size_type v43 = (std::string::size_type)(size + 8);
        }
        v176.__r_.__value_.__l.__size_ = v43;
      }
      else
      {
        if (v40) {
          goto LABEL_83;
        }
LABEL_86:
        AMCP::Log::Scope_Registry::get(v40);
        AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
        long long v44 = **(NSObject ***)buf;
        if (*(void *)v187) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
        }
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          id v45 = pthread_self();
          mach_port_t v46 = pthread_mach_thread_np(v45);
          unint64_t v47 = 0;
          long long v48 = 0;
          int v49 = 47;
          do
          {
            uint64_t v50 = &aLibraryCachesC_54[v47];
            if (v49 == 47) {
              long long v48 = &aLibraryCachesC_54[v47];
            }
            int v49 = v50[1];
            if (!v50[1]) {
              break;
            }
            BOOL v16 = v47++ >= 0xFFF;
          }
          while (!v16);
          *(_DWORD *)std::string buf = 67109634;
          if (v48) {
            id v51 = v48 + 1;
          }
          else {
            id v51 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
          }
          *(_DWORD *)&uint8_t buf[4] = v46;
          *(_WORD *)char v187 = 2080;
          *(void *)&v187[2] = v51;
          __int16 v188 = 1024;
          int v189 = 132;
          _os_log_debug_impl(&dword_1BAA78000, v44, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d sandbox_extension_issue_mach not granted.", buf, 0x18u);
        }
      }
      if (v165.__vftable) {
        CFRelease(v165.__vftable);
      }
    }
    if (++v28 == v25) {
      break;
    }
  }
  CFArrayRef v24 = (const __CFArray *)theArray.__r_.__value_.__r.__words[0];
  if (theArray.__r_.__value_.__r.__words[0]) {
LABEL_118:
  }
    CFRelease(v24);
LABEL_119:
  if (v174) {
    CFRelease(v174);
  }
  *(void *)std::string buf = 0;
  int v60 = sandbox_init("com.apple.audio.coreaudiod", 1uLL, (char **)buf);
  int v61 = v60;
  if (v60 == -1)
  {
    fprintf((FILE *)*MEMORY[0x1E4F143C8], "sandbox_init: %s\n", *(const char **)buf);
    sandbox_free_error(*(char **)buf);
    BOOL v62 = (void *)v176.__r_.__value_.__r.__words[0];
    if (v176.__r_.__value_.__r.__words[0]) {
      goto LABEL_141;
    }
  }
  else
  {
    std::string::size_type v63 = v176.__r_.__value_.__l.__size_;
    BOOL v62 = (void *)v176.__r_.__value_.__r.__words[0];
    if (v176.__r_.__value_.__r.__words[0] != v176.__r_.__value_.__l.__size_)
    {
      int v163 = v60;
      uint64_t v64 = (void **)v176.__r_.__value_.__r.__words[0];
      do
      {
        long long v65 = *v64;
        if (sandbox_extension_consume() == -1)
        {
          mach_port_t v66 = (AMCP::Log::Scope_Registry *)__error();
          int v67 = *(_DWORD *)v66;
          AMCP::Log::Scope_Registry::get(v66);
          AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
          BOOL v68 = **(NSObject ***)buf;
          if (*(void *)v187) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
          }
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            int v69 = pthread_self();
            mach_port_t v70 = pthread_mach_thread_np(v69);
            unint64_t v71 = 0;
            uint64_t v72 = 0;
            int v73 = 47;
            do
            {
              __int16 v74 = &aLibraryCachesC_54[v71];
              if (v73 == 47) {
                uint64_t v72 = &aLibraryCachesC_54[v71];
              }
              int v73 = v74[1];
              if (!v74[1]) {
                break;
              }
              BOOL v16 = v71++ >= 0xFFF;
            }
            while (!v16);
            *(_DWORD *)std::string buf = 67109890;
            if (v72) {
              uint64_t v75 = v72 + 1;
            }
            else {
              uint64_t v75 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
            }
            *(_DWORD *)&uint8_t buf[4] = v70;
            *(_WORD *)char v187 = 2080;
            *(void *)&v187[2] = v75;
            __int16 v188 = 1024;
            int v189 = 146;
            *(_WORD *)char v190 = 1024;
            *(_DWORD *)&v190[2] = v67;
            _os_log_debug_impl(&dword_1BAA78000, v68, OS_LOG_TYPE_DEBUG, "%6u %32s:%-5d sandbox_extension_consume failed with errno = %d", buf, 0x1Eu);
          }
        }
        free(v65);
        ++v64;
      }
      while (v64 != (void **)v63);
      int v61 = v163;
    }
    if (v62)
    {
LABEL_141:
      v176.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
      operator delete(v62);
    }
  }
  if (v1) {
    CFRelease(v1);
  }
  if (v61 == -1)
  {
    if (cf) {
      CFRelease(cf);
    }
    if (v169) {
      CFRelease(v169);
    }
    if (v170) {
      CFRelease(v170);
    }
    return 1;
  }
  else
  {
    mcp_applesauce::CF::BundleRef_proxy::get_bundle_url((applesauce::CF::URLRef *)v167, (__CFBundle *)v170);
    CFURLRef v76 = (const __CFURL *)v167[0];
    if (v167[0]) {
      CFRetain(v167[0]);
    }
    CFURLRef v166 = v76;
    CFPlugInRef v77 = CFPlugInCreate(0, v76);
    id v78 = (AMCP::Log::Scope_Registry *)mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::PlugInRef_Traits>::BasicRef(&v165, v77);
    if (!v165.__vftable)
    {
      AMCP::Log::Scope_Registry::get(v78);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v97 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
      {
        mach_port_t v98 = pthread_self();
        mach_port_t v99 = pthread_mach_thread_np(v98);
        unint64_t v100 = 0;
        int v101 = 0;
        int v102 = 47;
        do
        {
          std::string v103 = &aLibraryCachesC_54[v100];
          if (v102 == 47) {
            int v101 = &aLibraryCachesC_54[v100];
          }
          int v102 = v103[1];
          if (!v103[1]) {
            break;
          }
          BOOL v16 = v100++ >= 0xFFF;
        }
        while (!v16);
        if (v101) {
          dispatch_queue_t v104 = v101 + 1;
        }
        else {
          dispatch_queue_t v104 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v99;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v104;
        __int16 v188 = 1024;
        int v189 = 47;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "!plugin.is_valid()";
        _os_log_error_impl(&dword_1BAA78000, v97, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No plug-in", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "No plug-in");
      std::runtime_error::runtime_error(&v179, (const std::runtime_error *)&theArray);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      int v191 = 47;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v176.__r_.__value_.__l.__data_);
      std::string v178 = v176;
      std::string __p = &unk_1F148AA90;
      memset(&v176, 0, sizeof(v176));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    CFUUIDRef v79 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
    mcp_applesauce::CF::PlugInRef_proxy::find_factories_for_type((applesauce::CF::ArrayRef *)&v175, (const __CFUUID *)v165.__vftable, v79);
    if (!v175)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int64x2_t v105 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      {
        unint64_t v106 = pthread_self();
        mach_port_t v107 = pthread_mach_thread_np(v106);
        unint64_t v108 = 0;
        int v109 = 0;
        int v110 = 47;
        do
        {
          uint64_t v111 = &aLibraryCachesC_54[v108];
          if (v110 == 47) {
            int v109 = &aLibraryCachesC_54[v108];
          }
          int v110 = v111[1];
          if (!v111[1]) {
            break;
          }
          BOOL v16 = v108++ >= 0xFFF;
        }
        while (!v16);
        if (v109) {
          uint64_t v112 = v109 + 1;
        }
        else {
          uint64_t v112 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v107;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v112;
        __int16 v188 = 1024;
        int v189 = 49;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "!factory_array.is_valid()";
        _os_log_error_impl(&dword_1BAA78000, v105, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories array", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v174);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "No factories array");
      std::runtime_error::runtime_error(&v179, (const std::runtime_error *)&theArray);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      int v191 = 49;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v176.__r_.__value_.__l.__data_);
      std::string v178 = v176;
      std::string __p = &unk_1F148AA90;
      memset(&v176, 0, sizeof(v176));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    if (!CFArrayGetCount(v175))
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      uint64_t v113 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      {
        std::string v114 = pthread_self();
        mach_port_t v115 = pthread_mach_thread_np(v114);
        unint64_t v116 = 0;
        uint64_t v117 = 0;
        int v118 = 47;
        do
        {
          unsigned int v119 = &aLibraryCachesC_54[v116];
          if (v118 == 47) {
            uint64_t v117 = &aLibraryCachesC_54[v116];
          }
          int v118 = v119[1];
          if (!v119[1]) {
            break;
          }
          BOOL v16 = v116++ >= 0xFFF;
        }
        while (!v16);
        if (v117) {
          uint64_t v120 = v117 + 1;
        }
        else {
          uint64_t v120 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v115;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v120;
        __int16 v188 = 1024;
        int v189 = 50;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "factory_array->get_size() == 0";
        _os_log_error_impl(&dword_1BAA78000, v113, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s No factories", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v174);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "No factories");
      std::runtime_error::runtime_error(&v179, (const std::runtime_error *)&theArray);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      int v191 = 50;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v176.__r_.__value_.__l.__data_);
      std::string v178 = v176;
      std::string __p = &unk_1F148AA90;
      memset(&v176, 0, sizeof(v176));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    if (!v175)
    {
      int64x2_t v161 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v161, "Could not construct");
      __cxa_throw(v161, MEMORY[0x1E4FBA338], MEMORY[0x1E4FBA1D8]);
    }
    unint64_t v80 = (AMCP::Log::Scope_Registry *)applesauce::CF::details::at_to<applesauce::CF::TypeRef>(&v174, v175, 0);
    CFUUIDRef v81 = (const __CFUUID *)v174;
    if (!v174)
    {
      AMCP::Log::Scope_Registry::get(v80);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      int64_t v121 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      {
        long long v122 = pthread_self();
        mach_port_t v123 = pthread_mach_thread_np(v122);
        unint64_t v124 = 0;
        unint64_t v125 = 0;
        int v126 = 47;
        do
        {
          std::string::size_type v127 = &aLibraryCachesC_54[v124];
          if (v126 == 47) {
            unint64_t v125 = &aLibraryCachesC_54[v124];
          }
          int v126 = v127[1];
          if (!v127[1]) {
            break;
          }
          BOOL v16 = v124++ >= 0xFFF;
        }
        while (!v16);
        if (v125) {
          std::vector<unsigned int>::pointer v128 = v125 + 1;
        }
        else {
          std::vector<unsigned int>::pointer v128 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v123;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v128;
        __int16 v188 = 1024;
        int v189 = 53;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "!factory_uuid.is_valid()";
        _os_log_error_impl(&dword_1BAA78000, v121, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't get the factory uuid", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "Couldn't find the factory uuid");
      std::runtime_error::runtime_error(&v179, (const std::runtime_error *)&theArray);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      int v191 = 53;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v176.__r_.__value_.__l.__data_);
      std::string v178 = v176;
      std::string __p = &unk_1F148AA90;
      memset(&v176, 0, sizeof(v176));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    CFUUIDRef v82 = CFUUIDGetConstantUUIDWithBytes(0, 0x44u, 0x3Au, 0xBAu, 0xB8u, 0xE7u, 0xB3u, 0x49u, 0x1Au, 0xB9u, 0x85u, 0xBEu, 0xB9u, 0x18u, 0x70u, 0x30u, 0xDBu);
    long long v83 = CFPlugInInstanceCreate(0, v81, v82);
    char v84 = v83;
    if (!v83)
    {
      AMCP::Log::Scope_Registry::get(0);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      unint64_t v129 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
      {
        std::vector<unsigned int>::pointer v130 = pthread_self();
        mach_port_t v131 = pthread_mach_thread_np(v130);
        unint64_t v132 = 0;
        std::vector<unsigned int>::pointer v133 = 0;
        int v134 = 47;
        do
        {
          unint64_t v135 = &aLibraryCachesC_54[v132];
          if (v134 == 47) {
            std::vector<unsigned int>::pointer v133 = &aLibraryCachesC_54[v132];
          }
          int v134 = v135[1];
          if (!v135[1]) {
            break;
          }
          BOOL v16 = v132++ >= 0xFFF;
        }
        while (!v16);
        if (v133) {
          long long v136 = v133 + 1;
        }
        else {
          long long v136 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v131;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v136;
        __int16 v188 = 1024;
        int v189 = 56;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "(iunknown_interface) == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v129, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't create the IUnknown interface", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v173);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "Couldn't create the IUnknown interface");
      std::runtime_error::runtime_error(&v179, (const std::runtime_error *)&theArray);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      int v191 = 56;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v176.__r_.__value_.__l.__data_);
      std::string v178 = v176;
      std::string __p = &unk_1F148AA90;
      memset(&v176, 0, sizeof(v176));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    uint64_t v173 = 0;
    uint64_t v85 = *(uint64_t (**)(void *, void, void, uint64_t *))(*(void *)v83 + 8);
    CFUUIDRef v86 = CFUUIDGetConstantUUIDWithBytes(0, 0xEEu, 0xA5u, 0x77u, 0x3Du, 0xCCu, 0x43u, 0x49u, 0xF1u, 0x8Eu, 0, 0x8Fu, 0x96u, 0xE7u, 0xD2u, 0x3Bu, 0x17u);
    CFUUIDBytes v87 = CFUUIDGetUUIDBytes(v86);
    uint64_t v88 = (AMCP::Log::Scope_Registry *)v85(v84, *(void *)&v87.byte0, *(void *)&v87.byte8, &v173);
    uint64_t v89 = v173;
    if (!v173)
    {
      AMCP::Log::Scope_Registry::get(v88);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v137 = **(NSObject ***)buf;
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
      {
        uint64_t v138 = pthread_self();
        mach_port_t v139 = pthread_mach_thread_np(v138);
        unint64_t v140 = 0;
        long long v141 = 0;
        int v142 = 47;
        do
        {
          dispatch_queue_t v143 = &aLibraryCachesC_54[v140];
          if (v142 == 47) {
            long long v141 = &aLibraryCachesC_54[v140];
          }
          int v142 = v143[1];
          if (!v143[1]) {
            break;
          }
          BOOL v16 = v140++ >= 0xFFF;
        }
        while (!v16);
        if (v141) {
          long long v144 = v141 + 1;
        }
        else {
          long long v144 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v139;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v144;
        __int16 v188 = 1024;
        int v189 = 61;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "(asp_interface) == nullptr";
        _os_log_error_impl(&dword_1BAA78000, v137, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Couldn't find the driver interface", buf, 0x22u);
      }
      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v172);
      __cxa_allocate_exception(0x40uLL);
      std::runtime_error::runtime_error((std::runtime_error *)&theArray, "Couldn't find the driver interface");
      std::runtime_error::runtime_error(&v179, (const std::runtime_error *)&theArray);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "AudioServerPlugInDriverRef get_asp_interface(AMCP::CF::URL)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Utilities.cpp";
      int v191 = 61;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&v176.__r_.__value_.__l.__data_);
      std::string v178 = v176;
      std::string __p = &unk_1F148AA90;
      memset(&v176, 0, sizeof(v176));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    (*(void (**)(void *))(*(void *)v84 + 24))(v84);
    CFRelease(v81);
    if (v175) {
      CFRelease(v175);
    }
    if (v165.__vftable) {
      CFRelease(v165.__vftable);
    }
    if (v76) {
      CFRelease(v76);
    }
    {
      qword_1E9F7A8F8 = 0;
      AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::connectiouint64_t n = 0u;
      unk_1E9F7A8E8 = 0u;
      qword_1E9F7A8F8 = (uint64_t)dispatch_queue_create("Extrinsic connection queue", 0);
    }
    uint64_t v90 = _Block_copy(&__block_literal_global_19998);
    *(void *)std::string buf = &unk_1F148A840;
    *(void *)char v187 = v90;
    *(void *)char v190 = buf;
    int v91 = Extrinsic_Driver_Connection_To_Server::register_new_driver((uint64_t)&AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::connection, v89, 1, (uint64_t)buf);
    std::string v92 = (AMCP::Log::Scope_Registry *)std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
    if (v91)
    {
      AMCP::Log::Scope_Registry::get(v92);
      AMCP::Log::Scope_Registry::fetch((AMCP::Log::Scope_Registry *)buf, "com.apple.coreaudio", "AMCP");
      long long v145 = **(NSObject ***)buf;
      AMCP::Log::Scope::get_os_log_t(**(id **)buf);
      objc_claimAutoreleasedReturnValue();
      if (*(void *)v187) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)v187);
      }
      if (os_log_type_enabled(v145, OS_LOG_TYPE_ERROR))
      {
        uint64_t v146 = pthread_self();
        mach_port_t v147 = pthread_mach_thread_np(v146);
        unint64_t v148 = 0;
        uint64_t v149 = 0;
        int v150 = 47;
        do
        {
          std::locale v151 = &aLibraryCachesC_188[v148];
          if (v150 == 47) {
            uint64_t v149 = &aLibraryCachesC_188[v148];
          }
          int v150 = v151[1];
          if (!v151[1]) {
            break;
          }
          BOOL v16 = v148++ >= 0xFFF;
        }
        while (!v16);
        if (v149) {
          uint64_t v152 = v149 + 1;
        }
        else {
          uint64_t v152 = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
        }
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v147;
        *(_WORD *)char v187 = 2080;
        *(void *)&v187[2] = v152;
        __int16 v188 = 1024;
        int v189 = 288;
        *(_WORD *)char v190 = 2080;
        *(void *)&v190[2] = "(status) != 0";
        _os_log_error_impl(&dword_1BAA78000, v145, OS_LOG_TYPE_ERROR, "%6u %32s:%-5d Throwing Exception: %s Error registering remote", buf, 0x22u);
      }

      AMCP::Utility::With_Realtime_Disabled::With_Realtime_Disabled((AMCP::Utility::With_Realtime_Disabled *)&v175);
      __cxa_allocate_exception(0x40uLL);
      caulk::make_string((caulk *)"Error registering remote", (uint64_t)&v176);
      std::runtime_error::runtime_error(&v165, &v176);
      std::runtime_error::runtime_error(&v179, &v165);
      uint64_t v181 = 0;
      uint64_t v182 = 0;
      uint64_t v183 = 0;
      int v184 = -1;
      v179.__vftable = (std::runtime_error_vtbl *)&unk_1F148A9A8;
      dispatch_queue_t v180 = &unk_1F148A9D0;
      boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>::clone_impl((uint64_t)buf, (uint64_t)&v179);
      *(void *)&v190[8] = "int AudioServerPlugInMain(int, char ** _Nullable)";
      *(void *)&v190[16] = "/Library/Caches/com.apple.xbs/Sources/AudioHAL/Source/AMCP/ASP/Portal/Audio_Server_PlugIn_Registration.mm";
      int v191 = 288;
      applesauce::backtrace::snapshot_N<64>::snapshot_N(&theArray.__r_.__value_.__l.__data_);
      std::string v178 = theArray;
      std::string __p = &unk_1F148AA90;
      memset(&theArray, 0, sizeof(theArray));
      boost::exception_detail::set_info_rv<boost::error_info<applesauce::exceptions::tag_backtrace,applesauce::backtrace::snapshot_N<64>>>::set<boost::exception_detail::clone_impl<boost::exception_detail::error_info_injector<std::runtime_error>>>();
    }
    get_signal_port();
    uint64_t v93 = MEMORY[0x1E4F14428];
    id v94 = MEMORY[0x1E4F14428];
    v185[0] = &unk_1F148AC20;
    v185[1] = &v171;
    v185[3] = v185;
    *(void *)std::string buf = v93;
    AMCP::Utility::Mach_Port::set_receive_handler((unsigned int *)&get_signal_port(void)::s_signal_port, (dispatch_queue_t *)buf, (uint64_t)v185);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v185);

    *(void *)std::string buf = signal_handler;
    *(void *)char v187 = 0x200000000;
    sigaction(13, (const sigaction *)buf, 0);
    sigaction(15, (const sigaction *)buf, 0);
    CFStringRef v95 = (const __CFString *)*MEMORY[0x1E4F1D420];
    while (!v171)
      CFRunLoopRunInMode(v95, 1.0e10, 0);
    if (v167[0]) {
      CFRelease(v167[0]);
    }
    if (cf) {
      CFRelease(cf);
    }
    if (v169) {
      CFRelease(v169);
    }
    if (v170) {
      CFRelease(v170);
    }
    return 0;
  }
}

void sub_1BAF9C268(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,const void *a22,uint64_t a23,const void *a24,const void *a25,const void *a26)
{
  if (a2)
  {

    applesauce::CF::URLRef::~URLRef(&a22);
    applesauce::CF::StringRef::~StringRef(&a24);
    applesauce::CF::DictionaryRef::~DictionaryRef(&a25);
    mcp_applesauce::CF::BasicRef<mcp_applesauce::CF::BundleRef_Traits>::~BasicRef(&a26);
    __cxa_begin_catch(a1);
    __cxa_end_catch();
    JUMPOUT(0x1BAF9B094);
  }
  _Unwind_Resume(a1);
}

void get_signal_port(void)
{
  {
    if (v0)
    {
      get_signal_port(void)::s_signal_port = AMCP::Utility::Mach_Port::create_port(v0);
      word_1E9F7A90C = 257;
      qword_1E9F7A910 = 850045863;
      xmmword_1E9F7A918 = 0u;
      unk_1E9F7A928 = 0u;
      xmmword_1E9F7A938 = 0u;
      unk_1E9F7A948 = 0u;
    }
  }
}

void sub_1BAF9C90C(_Unwind_Exception *a1)
{
}

void signal_handler(mach_msg_id_t a1)
{
  get_signal_port();
  msg.msgh_id = a1;
  if (get_signal_port(void)::s_signal_port)
  {
    *(void *)&msg.msgh_bits = 0x1800000013;
    msg.msgh_local_port = 0;
    msg.msgh_voucher_port = 0;
    msg.msgh_remote_port = get_signal_port(void)::s_signal_port;
    if (mach_msg(&msg, 1, 0x18u, 0, 0, 0, 0))
    {
      if ((msg.msgh_bits & 0x1F) != 0x13) {
        mach_port_deallocate(*MEMORY[0x1E4F14960], msg.msgh_remote_port);
      }
    }
  }
}

void *std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"Z21AudioServerPlugInMainE3$_0")) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

void std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  get_signal_port();
  if (!AMCP::Utility::Mach_Port::receive_message(get_signal_port(void)::s_signal_port, 0x20u, &v3, 0)
    && (v3.msgh_id | 2) == 0xF)
  {
    **(unsigned char **)(a1 + 8) = 1;
    Maiuint64_t n = CFRunLoopGetMain();
    CFRunLoopStop(Main);
  }
}

uint64_t std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_1F148AC20;
  a2[1] = v2;
  return result;
}

void *std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  id result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *id result = &unk_1F148AC20;
  result[1] = v3;
  return result;
}

void std::__function::__func<AudioServerPlugInMain::$_0,std::allocator<AudioServerPlugInMain::$_0>,void ()(void)>::~__func()
{
}

void *std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](*(void *)(a2 + 8), (uint64_t)"ZL49AudioServerPlugInRegisterRemoteUsingDriverServicePP32AudioServerPlugInDriverInterfaceU13block_pointerFvvEE3$_0"))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2 = *(void (***)(void))(a1 + 8);
  if (v2)
  {
    v2[2]();
    uint64_t v2 = *(void (***)(void))(a1 + 8);
  }

  _Block_release(v2);
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::destroy_deallocate(id *a1)
{
  operator delete(a1);
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void *std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_1F148A840;
  id result = _Block_copy(*(const void **)(a1 + 8));
  a2[1] = result;
  return result;
}

void *std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  *uint64_t v2 = &unk_1F148A840;
  v2[1] = _Block_copy(*(const void **)(a1 + 8));
  return v2;
}

void std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  JUMPOUT(0x1C1859840);
}

uint64_t std::__function::__func<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0,std::allocator<AudioServerPlugInRegisterRemoteUsingDriverService(AudioServerPlugInDriverInterface **,void({block_pointer})(void))::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  return a1;
}

void __AudioServerPlugInMain_block_invoke()
{
}

OSStatus AudioConverterConvertBuffer(AudioConverterRef inAudioConverter, UInt32 inInputDataSize, const void *inInputData, UInt32 *ioOutputDataSize, void *outOutputData)
{
  return MEMORY[0x1F410B4D0](inAudioConverter, *(void *)&inInputDataSize, inInputData, ioOutputDataSize, outOutputData);
}

OSStatus AudioConverterConvertComplexBuffer(AudioConverterRef inAudioConverter, UInt32 inNumberPCMFrames, const AudioBufferList *inInputData, AudioBufferList *outOutputData)
{
  return MEMORY[0x1F410B4D8](inAudioConverter, *(void *)&inNumberPCMFrames, inInputData, outOutputData);
}

OSStatus AudioConverterDispose(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1F410B4E0](inAudioConverter);
}

OSStatus AudioConverterNew(const AudioStreamBasicDescription *inSourceFormat, const AudioStreamBasicDescription *inDestinationFormat, AudioConverterRef *outAudioConverter)
{
  return MEMORY[0x1F410B508](inSourceFormat, inDestinationFormat, outAudioConverter);
}

OSStatus AudioConverterReset(AudioConverterRef inAudioConverter)
{
  return MEMORY[0x1F410B528](inAudioConverter);
}

OSStatus AudioConverterSetProperty(AudioConverterRef inAudioConverter, AudioConverterPropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1F410B530](inAudioConverter, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

uint64_t CACentralStateDumpRegisterSubsystem()
{
  return MEMORY[0x1F410B6A0]();
}

uint64_t CAReportingClientCreateReporterID()
{
  return MEMORY[0x1F4179730]();
}

uint64_t CAReportingClientDestroyReporterID()
{
  return MEMORY[0x1F4179748]();
}

uint64_t CAReportingClientSendMessage()
{
  return MEMORY[0x1F4179760]();
}

uint64_t CAReportingClientStartReporter()
{
  return MEMORY[0x1F4179798]();
}

uint64_t CAReportingClientStopReporter()
{
  return MEMORY[0x1F41797A8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70B0]();
  return result;
}

CFGregorianDate CFAbsoluteTimeGetGregorianDate(CFAbsoluteTime at, CFTimeZoneRef tz)
{
  uint64_t v2 = MEMORY[0x1F40D70D0](tz, at);
  result.second = v3;
  result.year = v2;
  result.month = BYTE4(v2);
  result.day = BYTE5(v2);
  result.hour = BYTE6(v2);
  result.minute = HIBYTE(v2);
  return result;
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7168](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7180](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7188](allocator, capacity, callBacks);
}

CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D71A0](allocator, capacity, theArray);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B0](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71E0]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71E8](theArray, idx);
}

void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void *value)
{
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7418]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1F40D7428](BOOLean);
}

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle)
{
  return (CFURLRef)MEMORY[0x1F40D7458](bundle);
}

CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName)
{
  return (CFStringRef)MEMORY[0x1F40D74A0](bundle, key, value, tableName);
}

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL)
{
  return (CFBundleRef)MEMORY[0x1F40D7520](allocator, bundleURL);
}

CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID)
{
  return (CFBundleRef)MEMORY[0x1F40D7540](bundleID);
}

void *__cdecl CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName)
{
  return (void *)MEMORY[0x1F40D7560](bundle, functionName);
}

CFStringRef CFBundleGetIdentifier(CFBundleRef bundle)
{
  return (CFStringRef)MEMORY[0x1F40D7570](bundle);
}

CFDictionaryRef CFBundleGetInfoDictionary(CFBundleRef bundle)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7580](bundle);
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D75A0]();
}

CFTypeID CFBundleGetTypeID(void)
{
  return MEMORY[0x1F40D75C8]();
}

Boolean CFBundleLoadExecutableAndReturnError(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1F40D75F0](bundle, error);
}

Boolean CFBundlePreflightExecutable(CFBundleRef bundle, CFErrorRef *error)
{
  return MEMORY[0x1F40D7608](bundle, error);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A0](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77F0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D7800](allocator, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7838](theData);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7848](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7868]();
}

CFComparisonResult CFDateCompare(CFDateRef theDate, CFDateRef otherDate, void *context)
{
  return MEMORY[0x1F40D7890](theDate, otherDate, context);
}

CFDateRef CFDateCreate(CFAllocatorRef allocator, CFAbsoluteTime at)
{
  return (CFDateRef)MEMORY[0x1F40D78A0](allocator, at);
}

CFAbsoluteTime CFDateGetAbsoluteTime(CFDateRef theDate)
{
  MEMORY[0x1F40D7920](theDate);
  return result;
}

CFTypeID CFDateGetTypeID(void)
{
  return MEMORY[0x1F40D7940]();
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7960](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7980](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7988](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79A0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D79B0](allocator, capacity, theDict);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79B8](theDict);
}

CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D79D0](theDict, key);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D79F8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A08](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1F40D7A20](theDict, key, value);
}

void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict)
{
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A70](cf1, cf2);
}

CFIndex CFErrorGetCode(CFErrorRef err)
{
  return MEMORY[0x1F40D7AB0](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B78](cf);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1F40D7D70](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D88](allocator, theType, valuePtr);
}

CFIndex CFNumberGetByteSize(CFNumberRef number)
{
  return MEMORY[0x1F40D7DF0](number);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E00](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E18]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E28](number, theType, valuePtr);
}

CFPlugInRef CFPlugInCreate(CFAllocatorRef allocator, CFURLRef plugInURL)
{
  return (CFPlugInRef)MEMORY[0x1F40D7E48](allocator, plugInURL);
}

CFArrayRef CFPlugInFindFactoriesForPlugInTypeInPlugIn(CFUUIDRef typeUUID, CFPlugInRef plugIn)
{
  return (CFArrayRef)MEMORY[0x1F40D7E58](typeUUID, plugIn);
}

CFBundleRef CFPlugInGetBundle(CFPlugInRef plugIn)
{
  return (CFBundleRef)MEMORY[0x1F40D7E60](plugIn);
}

void *__cdecl CFPlugInInstanceCreate(CFAllocatorRef allocator, CFUUIDRef factoryUUID, CFUUIDRef typeUUID)
{
  return (void *)MEMORY[0x1F40D7E78](allocator, factoryUUID, typeUUID);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x1F40D7F20](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F30](allocator, propertyList, mutabilityOption);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7F48](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8050](cf);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80A8]();
}

CFRunLoopRef CFRunLoopGetMain(void)
{
  return (CFRunLoopRef)MEMORY[0x1F40D80C0]();
}

void CFRunLoopRemoveSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1F40D8130](mode, returnAfterSourceHandled, seconds);
}

void CFRunLoopStop(CFRunLoopRef rl)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8380](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1F40D83E8](alloc, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1F40D8430](alloc, bytes, numBytes, *(void *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8450](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar *chars, CFIndex numChars)
{
  return (CFStringRef)MEMORY[0x1F40D8468](alloc, chars, numChars);
}

CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char *buffer)
{
  return (CFStringRef)MEMORY[0x1F40D8480](alloc, buffer);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8488](alloc, formatOptions, format);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1F40D84F8](theString, range.location, range.length, *(void *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8508](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8518](theString, *(void *)&encoding);
}

void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar *buffer)
{
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8570](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8598](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85E8]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D85F8](theString, prefix);
}

CFTimeZoneRef CFTimeZoneCopySystem(void)
{
  return (CFTimeZoneRef)MEMORY[0x1F40D86F0]();
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x1F40D8748](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1F40D8750](anURL, pathStyle);
}

CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace)
{
  return (CFDataRef)MEMORY[0x1F40D8818](allocator, url, *(void *)&encoding, escapeWhitespace);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8840](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D8890](allocator, URLBytes, length, *(void *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8898](allocator, filePath, pathStyle, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPathRelativeToBase(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88B0](allocator, filePath, pathStyle, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1F40D88B8](allocator, URLString, baseURL);
}

CFStringRef CFURLGetString(CFURLRef anURL)
{
  return (CFStringRef)MEMORY[0x1F40D8920](anURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1F40D8930]();
}

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc)
{
  return (CFUUIDRef)MEMORY[0x1F40D8990](alloc);
}

CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes)
{
  return (CFUUIDRef)MEMORY[0x1F40D89A8](alloc, *(void *)&bytes.byte0, *(void *)&bytes.byte8);
}

CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid)
{
  return (CFStringRef)MEMORY[0x1F40D89B8](alloc, uuid);
}

CFUUIDRef CFUUIDGetConstantUUIDWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15)
{
  return (CFUUIDRef)MEMORY[0x1F40D89C8](alloc, byte0, byte1, byte2, byte3, byte4, byte5, byte6);
}

CFUUIDBytes CFUUIDGetUUIDBytes(CFUUIDRef uuid)
{
  uint64_t v1 = MEMORY[0x1F40D89E0](uuid);
  result.byte8 = v2;
  result.byte9 = BYTE1(v2);
  result.byte10 = BYTE2(v2);
  result.byte11 = BYTE3(v2);
  result.byte12 = BYTE4(v2);
  result.byte13 = BYTE5(v2);
  result.byte14 = BYTE6(v2);
  result.byte15 = HIBYTE(v2);
  result.byte0 = v1;
  result.byte1 = BYTE1(v1);
  result.byte2 = BYTE2(v1);
  result.byte3 = BYTE3(v1);
  result.byte4 = BYTE4(v1);
  result.byte5 = BYTE5(v1);
  result.byte6 = BYTE6(v1);
  result.byte7 = HIBYTE(v1);
  return result;
}

OSStatus ExtAudioFileCreateWithURL(CFURLRef inURL, AudioFileTypeID inFileType, const AudioStreamBasicDescription *inStreamDesc, const AudioChannelLayout *inChannelLayout, UInt32 inFlags, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1F410B6C0](inURL, *(void *)&inFileType, inStreamDesc, inChannelLayout, *(void *)&inFlags, outExtAudioFile);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x1F410B6C8](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x1F410B6D0](inExtAudioFile, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileOpenURL(CFURLRef inURL, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x1F410B6E0](inURL, outExtAudioFile);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x1F410B6E8](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSeek(ExtAudioFileRef inExtAudioFile, SInt64 inFrameOffset)
{
  return MEMORY[0x1F410B6F0](inExtAudioFile, inFrameOffset);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x1F410B6F8](inExtAudioFile, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWriteAsync(ExtAudioFileRef inExtAudioFile, UInt32 inNumberFrames, const AudioBufferList *ioData)
{
  return MEMORY[0x1F410B718](inExtAudioFile, *(void *)&inNumberFrames, ioData);
}

IOReturn IOAllowPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E8678](*(void *)&kernelPort, notificationID);
}

CFDataRef IOCFSerialize(CFTypeRef object, CFOptionFlags options)
{
  return (CFDataRef)MEMORY[0x1F40E8688](object, options);
}

CFTypeRef IOCFUnserializeBinary(const char *buffer, size_t bufferSize, CFAllocatorRef allocator, CFOptionFlags options, CFStringRef *errorString)
{
  return (CFTypeRef)MEMORY[0x1F40E8690](buffer, bufferSize, allocator, options, errorString);
}

IOReturn IOCancelPowerChange(io_connect_t kernelPort, intptr_t notificationID)
{
  return MEMORY[0x1F40E86A0](*(void *)&kernelPort, notificationID);
}

kern_return_t IOConnectAddRef(io_connect_t connect)
{
  return MEMORY[0x1F40E86B0](*(void *)&connect);
}

kern_return_t IOConnectCallAsyncMethod(mach_port_t connection, uint32_t selector, mach_port_t wake_port, uint64_t *reference, uint32_t referenceCnt, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86B8](*(void *)&connection, *(void *)&selector, *(void *)&wake_port, reference, *(void *)&referenceCnt, input, *(void *)&inputCnt, inputStruct);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1F40E86C8](*(void *)&connection, *(void *)&selector, input, *(void *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectMapMemory64(io_connect_t connect, uint32_t memoryType, task_port_t intoTask, mach_vm_address_t *atAddress, mach_vm_size_t *ofSize, IOOptionBits options)
{
  return MEMORY[0x1F40E86E8](*(void *)&connect, *(void *)&memoryType, *(void *)&intoTask, atAddress, ofSize, *(void *)&options);
}

kern_return_t IOConnectRelease(io_connect_t connect)
{
  return MEMORY[0x1F40E86F0](*(void *)&connect);
}

kern_return_t IOConnectSetNotificationPort(io_connect_t connect, uint32_t type, mach_port_t port, uintptr_t reference)
{
  return MEMORY[0x1F40E8700](*(void *)&connect, *(void *)&type, *(void *)&port, reference);
}

kern_return_t IOConnectTrap3(io_connect_t connect, uint32_t index, uintptr_t p1, uintptr_t p2, uintptr_t p3)
{
  return MEMORY[0x1F40E8718](*(void *)&connect, *(void *)&index, p1, p2, p3);
}

kern_return_t IOConnectTrap4(io_connect_t connect, uint32_t index, uintptr_t p1, uintptr_t p2, uintptr_t p3, uintptr_t p4)
{
  return MEMORY[0x1F40E8720](*(void *)&connect, *(void *)&index, p1, p2, p3, p4);
}

kern_return_t IOConnectTrap6(io_connect_t connect, uint32_t index, uintptr_t p1, uintptr_t p2, uintptr_t p3, uintptr_t p4, uintptr_t p5, uintptr_t p6)
{
  return MEMORY[0x1F40E8728](*(void *)&connect, *(void *)&index, p1, p2, p3, p4, p5, p6);
}

kern_return_t IOConnectUnmapMemory64(io_connect_t connect, uint32_t memoryType, task_port_t fromTask, mach_vm_address_t atAddress)
{
  return MEMORY[0x1F40E8738](*(void *)&connect, *(void *)&memoryType, *(void *)&fromTask, atAddress);
}

IOReturn IODeregisterForSystemPower(io_object_t *notifier)
{
  return MEMORY[0x1F40E8778](notifier);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1F40E8ED8](*(void *)&iterator);
}

kern_return_t IOMainPort(mach_port_t bootstrapPort, mach_port_t *mainPort)
{
  return MEMORY[0x1F40E8EF0](*(void *)&bootstrapPort, mainPort);
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1F40E8F08](*(void *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
}

mach_port_t IONotificationPortGetMachPort(IONotificationPortRef notify)
{
  return MEMORY[0x1F40E8F18](notify);
}

void IONotificationPortSetDispatchQueue(IONotificationPortRef notify, dispatch_queue_t queue)
{
}

BOOLean_t IOObjectConformsTo(io_object_t object, const io_name_t className)
{
  return MEMORY[0x1F40E8F38](*(void *)&object, className);
}

BOOLean_t IOObjectIsEqualTo(io_object_t object, io_object_t anObject)
{
  return MEMORY[0x1F40E8F50](*(void *)&object, *(void *)&anObject);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1F40E8F60](*(void *)&object);
}

kern_return_t IOObjectRetain(io_object_t object)
{
  return MEMORY[0x1F40E8F68](*(void *)&object);
}

IOReturn IOPMAssertionCreateWithProperties(CFDictionaryRef AssertionProperties, IOPMAssertionID *AssertionID)
{
  return MEMORY[0x1F40E8F88](AssertionProperties, AssertionID);
}

IOReturn IOPMAssertionRelease(IOPMAssertionID AssertionID)
{
  return MEMORY[0x1F40E8FA8](*(void *)&AssertionID);
}

IOReturn IOPMAssertionSetProperty(IOPMAssertionID theAssertion, CFStringRef theProperty, CFTypeRef theValue)
{
  return MEMORY[0x1F40E8FB8](*(void *)&theAssertion, theProperty, theValue);
}

io_connect_t IORegisterForSystemPower(void *refcon, IONotificationPortRef *thePortRef, IOServiceInterestCallback callback, io_object_t *notifier)
{
  return MEMORY[0x1F40E9148](refcon, thePortRef, callback, notifier);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1F40E9158](*(void *)&entry, properties, allocator, *(void *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1F40E9168](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E9190](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return MEMORY[0x1F40E91A8](*(void *)&entry, name);
}

kern_return_t IORegistryEntryGetParentIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1F40E91D0](*(void *)&entry, plane, iterator);
}

kern_return_t IORegistryEntrySetCFProperty(io_registry_entry_t entry, CFStringRef propertyName, CFTypeRef property)
{
  return MEMORY[0x1F40E9220](*(void *)&entry, propertyName, property);
}

kern_return_t IOServiceAddInterestNotification(IONotificationPortRef notifyPort, io_service_t service, const io_name_t interestType, IOServiceInterestCallback callback, void *refCon, io_object_t *notification)
{
  return MEMORY[0x1F40E9230](notifyPort, *(void *)&service, interestType, callback, refCon, notification);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x1F40E9238](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1F40E9240](*(void *)&connect);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1F40E9258](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40E9268](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1F40E9280](*(void *)&service, *(void *)&owningTask, *(void *)&type, connect);
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1F417CE00]();
}

void NSLog(NSString *format, ...)
{
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

void *__cdecl OSAtomicDequeue(OSQueueHead *__list, size_t a2)
{
  return (void *)MEMORY[0x1F40C99E8](__list, a2);
}

void OSAtomicEnqueue(OSQueueHead *__list, void *__new, size_t a3)
{
}

void OSMemoryBarrier(void)
{
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return (CFTypeRef)MEMORY[0x1F40F7138](task, entitlement, error);
}

SecTaskRef SecTaskCreateFromSelf(CFAllocatorRef allocator)
{
  return (SecTaskRef)MEMORY[0x1F40F7160](allocator);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t applesauce::xpc::dyn_cast_or_default(applesauce::xpc *this, const object *a2)
{
  return MEMORY[0x1F410AB58](this, a2);
}

{
  return MEMORY[0x1F410AB60](this, a2);
}

uint64_t AUProcessingBlock_DSPGraph::AUProcessingBlock_DSPGraph()
{
  return MEMORY[0x1F410B8D8]();
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x1F41778F8](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x1F4177900]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
}

uint64_t caulk::audio_buffer_resource(caulk *this)
{
  return MEMORY[0x1F4177940](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_allocate(caulk::rt_safe_memory_resource *this)
{
  return MEMORY[0x1F4177968](this);
}

uint64_t caulk::rt_safe_memory_resource::rt_deallocate(caulk::rt_safe_memory_resource *this, void *a2)
{
  return MEMORY[0x1F4177970](this, a2);
}

uint64_t caulk::init_realtime_safe_resource(caulk *this)
{
  return MEMORY[0x1F4177978](this);
}

uint64_t caulk::ipc::mapped_memory::reset(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1F4177980](this);
}

uint64_t caulk::ipc::mapped_memory::mapped_memory()
{
  return MEMORY[0x1F4177988]();
}

uint64_t caulk::ipc::mapped_memory::mapped_memory(caulk::ipc::mapped_memory *this)
{
  return MEMORY[0x1F4177990](this);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::send(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1F4177998](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::stop(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1F41779A0](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::start(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1F41779A8](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::resynch(caulk::ipc::synchronous_messenger::eventlink_sender *this, double a2)
{
  return MEMORY[0x1F41779B0](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::send(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1F41779B8](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::stop(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1F41779C0](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::start(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1F41779C8](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::resynch(caulk::ipc::synchronous_messenger::semaphore_sender *this, double a2)
{
  return MEMORY[0x1F41779D0](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_receiver::ingest_connection_info()
{
  return MEMORY[0x1F41779D8]();
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_receiver::start()
{
  return MEMORY[0x1F41779E0]();
}

{
  return MEMORY[0x1F41779E8]();
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_receiver::ingest_connection_info()
{
  return MEMORY[0x1F41779F0]();
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_receiver::stop(caulk::ipc::synchronous_messenger::semaphore_receiver *this, double a2)
{
  return MEMORY[0x1F41779F8](this, a2);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_receiver::start()
{
  return MEMORY[0x1F4177A00]();
}

{
  return MEMORY[0x1F4177A08]();
}

uint64_t caulk::mach::os_eventlink::dissociate(caulk::mach::os_eventlink *this)
{
  return MEMORY[0x1F4177A30](this);
}

uint64_t caulk::mach::os_eventlink::timed_wait_signal_or_error(caulk::mach::os_eventlink *this, double a2)
{
  return MEMORY[0x1F4177A40](this, a2);
}

uint64_t caulk::mach::os_eventlink::make()
{
  return MEMORY[0x1F4177A48]();
}

uint64_t caulk::mach::os_eventlink::associate(caulk::mach::os_eventlink *this)
{
  return MEMORY[0x1F4177A50](this);
}

uint64_t caulk::mach::os_workgroup_managed::join(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1F4177A58](this);
}

uint64_t caulk::mach::os_workgroup_managed::make()
{
  return MEMORY[0x1F4177A60]();
}

uint64_t caulk::mach::os_workgroup_managed::leave(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1F4177A68](this);
}

void caulk::mach::os_workgroup_managed::~os_workgroup_managed(caulk::mach::os_workgroup_managed *this)
{
}

uint64_t caulk::mach::os_workgroup_interval_managed::make_with_workload_id()
{
  return MEMORY[0x1F4177A78]();
}

{
  return MEMORY[0x1F4177A80]();
}

uint64_t caulk::mach::os_workgroup_interval_managed::start(caulk::mach::os_workgroup_interval_managed *this)
{
  return MEMORY[0x1F4177A88](this);
}

uint64_t caulk::mach::os_workgroup_interval_managed::start(caulk::mach::os_workgroup_interval_managed *this, uint64_t a2, uint64_t a3, os_workgroup_interval_data_opaque_s *a4)
{
  return MEMORY[0x1F4177A90](this, a2, a3, a4);
}

uint64_t caulk::mach::os_workgroup_interval_managed::finish(caulk::mach::os_workgroup_interval_managed *this, os_workgroup_interval_data_opaque_s *a2)
{
  return MEMORY[0x1F4177A98](this, a2);
}

uint64_t caulk::mach::os_workgroup_interval_managed::finish(caulk::mach::os_workgroup_interval_managed *this)
{
  return MEMORY[0x1F4177AA0](this);
}

void caulk::mach::os_workgroup_interval_managed::~os_workgroup_interval_managed(caulk::mach::os_workgroup_interval_managed *this)
{
}

uint64_t caulk::mach::details::retain_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x1F4177AB8](this, a2);
}

uint64_t caulk::mach::details::release_os_object(caulk::mach::details *this, void *a2)
{
  return MEMORY[0x1F4177AC0](this, a2);
}

uint64_t caulk::mach::semaphore::semaphore(caulk::mach::semaphore *this)
{
  return MEMORY[0x1F4177AE8](this);
}

void caulk::mach::semaphore::~semaphore(caulk::mach::semaphore *this)
{
}

uint64_t caulk::thread::attributes::apply_to_this_thread(caulk::thread::attributes *this)
{
  return MEMORY[0x1F4177B20](this);
}

uint64_t caulk::thread::start(caulk::thread *this, caulk::thread::attributes *a2, void *(*a3)(void *), void *a4)
{
  return MEMORY[0x1F4177B30](this, a2, a3, a4);
}

void caulk::thread::~thread(caulk::thread *this)
{
}

uint64_t caulk::platform::process_name(caulk::platform *this)
{
  return MEMORY[0x1F4177B68](this);
}

uint64_t DSPGraph::ABIVersion(DSPGraph *this)
{
  return MEMORY[0x1F410B9A8](this);
}

uint64_t DSPGraph::Interpreter::compileText()
{
  return MEMORY[0x1F410B9F0]();
}

void DSPGraph::Interpreter::~Interpreter(DSPGraph::Interpreter *this)
{
}

uint64_t DSPGraph::NewBoxRegistry::NewBoxRegistry(DSPGraph::NewBoxRegistry *this)
{
  return MEMORY[0x1F410BA30](this);
}

uint64_t DSPGraph::Box::totalLatencyInSeconds(DSPGraph::Box *this)
{
  return MEMORY[0x1F410BA78](this);
}

uint64_t DSPGraph::Graph::initialize(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BAA8](this);
}

uint64_t DSPGraph::Graph::setAUStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x1F410BAB0](this, a2);
}

uint64_t DSPGraph::Graph::processMultiple()
{
  return MEMORY[0x1F410BAE8]();
}

uint64_t DSPGraph::Graph::setPropertyStrip(DSPGraph::Graph *this, const __CFDictionary *a2)
{
  return MEMORY[0x1F410BAF8](this, a2);
}

uint64_t DSPGraph::Graph::setSliceDuration()
{
  return MEMORY[0x1F410BB08]();
}

uint64_t DSPGraph::Graph::reset(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BB40](this);
}

uint64_t DSPGraph::Graph::configure(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BB68](this);
}

uint64_t DSPGraph::Graph::preflight()
{
  return MEMORY[0x1F410BB78]();
}

uint64_t caulk::ipc::synchronous_messenger::eventlink_sender::create_connection_info(caulk::ipc::synchronous_messenger::eventlink_sender *this)
{
  return MEMORY[0x1F4177BA8](this);
}

uint64_t caulk::ipc::synchronous_messenger::semaphore_sender::create_connection_info(caulk::ipc::synchronous_messenger::semaphore_sender *this)
{
  return MEMORY[0x1F4177BB0](this);
}

uint64_t caulk::mach::os_eventlink::copy_mach_port(caulk::mach::os_eventlink *this)
{
  return MEMORY[0x1F4177BB8](this);
}

uint64_t caulk::mach::os_workgroup_managed::copy_mach_port(caulk::mach::os_workgroup_managed *this)
{
  return MEMORY[0x1F4177BC0](this);
}

uint64_t DSPGraph::Graph::numOutputs(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BC18](this);
}

uint64_t DSPGraph::Graph::hasProperty(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BC20](this);
}

uint64_t DSPGraph::Graph::hasParameter(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BC28](this);
}

uint64_t DSPGraph::Graph::out(DSPGraph::Graph *this)
{
  return MEMORY[0x1F410BC48](this);
}

uint64_t DSPGraph::Exception::print()
{
  return MEMORY[0x1F410BC60]();
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1F417E350](this);
}

std::string *__cdecl std::error_code::message(std::string *__return_ptr retstr, const std::error_code *this)
{
  return (std::string *)MEMORY[0x1F417E360](retstr, this);
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1F417E400](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E448](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E450](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1F417E458](this, a2);
}

void std::range_error::~range_error(std::range_error *this)
{
}

void std::domain_error::~domain_error(std::domain_error *this)
{
}

{
  MEMORY[0x1F417E478](this);
}

void std::out_of_range::~out_of_range(std::out_of_range *this)
{
}

{
  MEMORY[0x1F417E498](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4B8](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D0](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4C0](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1F417E4D8](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1F417E4E0](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
}

{
  MEMORY[0x1F417E4F0](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1F417E530](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1F417E550](this, *(void *)&__ecode);
}

void std::this_thread::sleep_for (const std::chrono::nanoseconds *__ns)
{
}

std::__sp_mut *__cdecl std::__get_sp_mut(const void *a1)
{
  return (std::__sp_mut *)MEMORY[0x1F417E580](a1);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string::iterator std::string::insert(std::string *this, std::string::const_iterator __pos, std::string::value_type __c)
{
  return (std::string::iterator)MEMORY[0x1F417E5F8](this, __pos.__i_, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, std::error_code __ec)
{
  return (std::system_error *)MEMORY[0x1F417E6F0](this, *(void *)&__ec.__val_, __ec.__cat_);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const char *__what_arg)
{
  return (std::system_error *)MEMORY[0x1F417E700](this, *(void *)&__ev, __ecat, __what_arg);
}

std::system_error *__cdecl std::system_error::system_error(std::system_error *this, int __ev, const std::error_category *__ecat, const std::string *__what_arg)
{
  return (std::system_error *)MEMORY[0x1F417E708](this, *(void *)&__ev, __ecat, __what_arg);
}

void std::system_error::~system_error(std::system_error *this)
{
}

{
  MEMORY[0x1F417E720](this);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1F417E728]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1F417E740]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1F417E748]();
}

uint64_t std::istream::get()
{
  return MEMORY[0x1F417E758]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1F417E7A0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1F417E7C0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x1F417E840]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1F417E860]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E868]();
}

{
  return MEMORY[0x1F417E878]();
}

{
  return MEMORY[0x1F417E880]();
}

{
  return MEMORY[0x1F417E890]();
}

{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

void std::error_category::~error_category(std::error_category *this)
{
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1F417E960](__s, __icase);
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x1F417E968](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

const std::error_category *std::system_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9E0]();
}

const std::error_category *std::generic_category(void)
{
  return (const std::error_category *)MEMORY[0x1F417E9F0]();
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::operator=()
{
  return MEMORY[0x1F417EA20]();
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
}

void std::condition_variable::notify_one(std::condition_variable *this)
{
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
}

void std::condition_variable::wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk)
{
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
}

void std::__shared_mutex_base::lock_shared(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock_shared(std::__shared_mutex_base *this)
{
}

BOOL std::__shared_mutex_base::try_lock_shared(std::__shared_mutex_base *this)
{
  return MEMORY[0x1F417EA60](this);
}

void std::__shared_mutex_base::lock(std::__shared_mutex_base *this)
{
}

void std::__shared_mutex_base::unlock(std::__shared_mutex_base *this)
{
}

std::__shared_mutex_base *__cdecl std::__shared_mutex_base::__shared_mutex_base(std::__shared_mutex_base *this)
{
  return (std::__shared_mutex_base *)MEMORY[0x1F417EA80](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x1F417EA90](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x1F417EAA0]();
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1F417EAA8](retstr, __s);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

uint64_t std::pmr::get_default_resource(std::pmr *this)
{
  return MEMORY[0x1F417EAE0](this);
}

BOOL std::__fs::filesystem::__create_directories(const std::__fs::filesystem::path *a1, std::error_code *a2)
{
  return MEMORY[0x1F417EB80](a1, a2);
}

void std::mutex::lock(std::mutex *this)
{
}

void std::mutex::unlock(std::mutex *this)
{
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x1F417EC08](this);
}

void std::mutex::~mutex(std::mutex *this)
{
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x1F417EC58]();
}

uint64_t std::__sort<std::__less<long long,long long> &,long long *>()
{
  return MEMORY[0x1F417EC80]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x1F417ECA0]();
}

time_t std::chrono::system_clock::to_time_t(const std::chrono::system_clock::time_point *__t)
{
  return MEMORY[0x1F417ECA8](__t);
}

const std::locale *std::locale::classic(void)
{
  return (const std::locale *)MEMORY[0x1F417ECD0]();
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1F417ECE0](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1F417ECE8](this);
}

void std::locale::~locale(std::locale *this)
{
}

const std::locale *__cdecl std::locale::operator=(std::locale *this, const std::locale *a2)
{
  return (const std::locale *)MEMORY[0x1F417ECF8](this, a2);
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x1F417ED08]();
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::__sp_mut::lock(std::__sp_mut *this)
{
}

void std::__sp_mut::unlock(std::__sp_mut *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

std::locale std::ios_base::imbue(std::ios_base *this, const std::locale *__loc)
{
  return (std::locale)MEMORY[0x1F417EDB8](this, __loc);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, double __val)
{
  return (std::string *)MEMORY[0x1F417EE58](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x1F417EE68](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, uint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE80](retstr, __val);
}

{
  return (std::string *)MEMORY[0x1F417EE90](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1F417EEA0]();
}

std::bad_cast *__cdecl std::bad_cast::bad_cast(std::bad_cast *this)
{
  return (std::bad_cast *)MEMORY[0x1F417EEA8](this);
}

{
  return (std::bad_cast *)MEMORY[0x1F417EEB0](this);
}

void std::bad_cast::~bad_cast(std::bad_cast *this)
{
}

std::bad_alloc *__cdecl std::bad_alloc::bad_alloc(std::bad_alloc *this)
{
  return (std::bad_alloc *)MEMORY[0x1F417EEC8](this);
}

void std::exception::~exception(std::exception *this)
{
}

{
  MEMORY[0x1F417EEF0](this);
}

int std::uncaught_exceptions(void)
{
  return MEMORY[0x1F417EF20]();
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1F417EF30](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

char *__cxa_demangle(const char *lpmangled, char *lpout, size_t *lpoutlen, int *lpstatus)
{
  return (char *)MEMORY[0x1F417EF58](lpmangled, lpout, lpoutlen, lpstatus);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x1F417EFA8](lpsrc, lpstype, lpdtype, s2d);
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __udivti3()
{
  return MEMORY[0x1F40C9D08]();
}

uint64_t _os_assert_log()
{
  return MEMORY[0x1F40C9F90]();
}

uint64_t _os_crash()
{
  return MEMORY[0x1F40C9FA0]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x1F40C9FB0]();
}

uint64_t _os_feature_enabled_simple_impl()
{
  return MEMORY[0x1F40C9FB8]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

char **__cdecl backtrace_symbols(void *const *a1, int a2)
{
  return (char **)MEMORY[0x1F40CA508](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x1F40CB3F8](*(void *)&a1);
}

int closedir(DIR *a1)
{
  return MEMORY[0x1F40CB400](a1);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

uint64_t debug_syscall_reject()
{
  return MEMORY[0x1F40CB8F0]();
}

void dispatch_activate(dispatch_object_t object)
{
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_block_t dispatch_block_create(dispatch_block_flags_t flags, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C0](flags, block);
}

intptr_t dispatch_block_wait(dispatch_block_t block, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CB9F8](block, timeout);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

uint64_t dispatch_pthread_root_queue_create()
{
  return MEMORY[0x1F40CBB98]();
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBB8](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

void dispatch_set_target_queue(dispatch_object_t object, dispatch_queue_t queue)
{
}

void dispatch_source_cancel(dispatch_source_t source)
{
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_cancel_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

dispatch_workloop_t dispatch_workloop_create_inactive(const char *label)
{
  return (dispatch_workloop_t)MEMORY[0x1F40CBD58](label);
}

uint64_t dispatch_workloop_set_scheduler_priority()
{
  return MEMORY[0x1F40CBD88]();
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1F40CBDA8](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

int fchmod(int a1, mode_t a2)
{
  return MEMORY[0x1F40CC028](*(void *)&a1, a2);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1F40CC110](a1);
}

int flock(int a1, int a2)
{
  return MEMORY[0x1F40CC160](*(void *)&a1, *(void *)&a2);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x1F40CC2E0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

int getpriority(int a1, id_t a2)
{
  return MEMORY[0x1F40CC4B8](*(void *)&a1, *(void *)&a2);
}

int gettimeofday(timeval *a1, void *a2)
{
  return MEMORY[0x1F40CC568](a1, a2);
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

int kill(pid_t a1, int a2)
{
  return MEMORY[0x1F40CC728](*(void *)&a1, *(void *)&a2);
}

tm *__cdecl localtime(const time_t *a1)
{
  return (tm *)MEMORY[0x1F40CC868](a1);
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1F40CC940](*(void *)&error_value);
}

uint64_t mach_get_times()
{
  return MEMORY[0x1F40CC948]();
}

mach_msg_return_t mach_msg(mach_msg_header_t *msg, mach_msg_option_t option, mach_msg_size_t send_size, mach_msg_size_t rcv_size, mach_port_name_t rcv_name, mach_msg_timeout_t timeout, mach_port_name_t notify)
{
  return MEMORY[0x1F40CC970](msg, *(void *)&option, *(void *)&send_size, *(void *)&rcv_size, *(void *)&rcv_name, *(void *)&timeout, *(void *)&notify);
}

kern_return_t mach_port_allocate(ipc_space_t task, mach_port_right_t right, mach_port_name_t *name)
{
  return MEMORY[0x1F40CC9A0](*(void *)&task, *(void *)&right, name);
}

kern_return_t mach_port_deallocate(ipc_space_t task, mach_port_name_t name)
{
  return MEMORY[0x1F40CC9B8](*(void *)&task, *(void *)&name);
}

kern_return_t mach_port_get_attributes(ipc_space_read_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info_out, mach_msg_type_number_t *port_info_outCnt)
{
  return MEMORY[0x1F40CC9E0](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info_out, port_info_outCnt);
}

kern_return_t mach_port_insert_right(ipc_space_t task, mach_port_name_t name, mach_port_t poly, mach_msg_type_name_t polyPoly)
{
  return MEMORY[0x1F40CCA08](*(void *)&task, *(void *)&name, *(void *)&poly, *(void *)&polyPoly);
}

kern_return_t mach_port_mod_refs(ipc_space_t task, mach_port_name_t name, mach_port_right_t right, mach_port_delta_t delta)
{
  return MEMORY[0x1F40CCA10](*(void *)&task, *(void *)&name, *(void *)&right, *(void *)&delta);
}

kern_return_t mach_port_set_attributes(ipc_space_t task, mach_port_name_t name, mach_port_flavor_t flavor, mach_port_info_t port_info, mach_msg_type_number_t port_infoCnt)
{
  return MEMORY[0x1F40CCA30](*(void *)&task, *(void *)&name, *(void *)&flavor, port_info, *(void *)&port_infoCnt);
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

kern_return_t mach_wait_until(uint64_t deadline)
{
  return MEMORY[0x1F40CCAD0](deadline);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

int mkdir(const char *a1, mode_t a2)
{
  return MEMORY[0x1F40CCDD0](a1, a2);
}

int mkstemps(char *a1, int a2)
{
  return MEMORY[0x1F40CCE18](a1, *(void *)&a2);
}

char *__cdecl mktemp(char *a1)
{
  return (char *)MEMORY[0x1F40CCE28](a1);
}

int mlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE38](a1, a2);
}

int munlock(const void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE80](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F4181678](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x1F4181758](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1F4181780](location);
}

void objc_moveWeak(id *to, id *from)
{
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1F41818B8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1F41818D0](a1);
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1F40CD0E0](a1, *(void *)&a2);
}

DIR *__cdecl opendir(const char *a1)
{
  return (DIR *)MEMORY[0x1F40CD120](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

void os_release(void *object)
{
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_generate(os_log_t log)
{
  return MEMORY[0x1F40CD558](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_transaction_create()
{
  return MEMORY[0x1F40CD5A0]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
}

uint64_t os_unfair_recursive_lock_lock_with_options()
{
  return MEMORY[0x1F40CD610]();
}

uint64_t os_unfair_recursive_lock_unlock()
{
  return MEMORY[0x1F40CD628]();
}

uint64_t os_variant_has_internal_diagnostics()
{
  return MEMORY[0x1F40CD650]();
}

uint64_t os_workgroup_attr_set_interval_type()
{
  return MEMORY[0x1F40CD680]();
}

uint64_t os_workgroup_attr_set_telemetry_flavor()
{
  return MEMORY[0x1F40CD688]();
}

uint64_t os_workgroup_interval_data_set_telemetry()
{
  return MEMORY[0x1F40CD6D8]();
}

uint64_t pdwriter_close()
{
  return MEMORY[0x1F41781A8]();
}

uint64_t pdwriter_name()
{
  return MEMORY[0x1F41781B0]();
}

uint64_t pdwriter_new_value()
{
  return MEMORY[0x1F41781C8]();
}

uint64_t pdwriter_open()
{
  return MEMORY[0x1F41781E0]();
}

uint64_t pdwriter_record_variable_dbl()
{
  return MEMORY[0x1F41781F8]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1F40CD8A8](*(void *)&pid, *(void *)&flavor, arg, buffer, *(void *)&buffersize);
}

int proc_regionfilename(int pid, uint64_t address, void *buffer, uint32_t buffersize)
{
  return MEMORY[0x1F40CD8C8](*(void *)&pid, address, buffer, *(void *)&buffersize);
}

int pthread_attr_destroy(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD918](a1);
}

int pthread_attr_getschedparam(const pthread_attr_t *a1, sched_param *a2)
{
  return MEMORY[0x1F40CD920](a1, a2);
}

int pthread_attr_init(pthread_attr_t *a1)
{
  return MEMORY[0x1F40CD930](a1);
}

int pthread_attr_setdetachstate(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD940](a1, *(void *)&a2);
}

int pthread_attr_setschedparam(pthread_attr_t *a1, const sched_param *a2)
{
  return MEMORY[0x1F40CD950](a1, a2);
}

int pthread_attr_setschedpolicy(pthread_attr_t *a1, int a2)
{
  return MEMORY[0x1F40CD958](a1, *(void *)&a2);
}

int pthread_cond_broadcast(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD978](a1);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD980](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1F40CD988](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1F40CD990](a1);
}

int pthread_cond_timedwait_relative_np(pthread_cond_t *a1, pthread_mutex_t *a2, const timespec *a3)
{
  return MEMORY[0x1F40CD9A0](a1, a2, a3);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1F40CD9A8](a1, a2);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x1F40CD9B8](a1, a2, a3, a4);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1F40CD9E0](a1, a2);
}

int pthread_getname_np(pthread_t a1, char *a2, size_t a3)
{
  return MEMORY[0x1F40CDA10](a1, a2, a3);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1F40CDA20](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1F40CDA40](a1, a2);
}

int pthread_kill(pthread_t a1, int a2)
{
  return MEMORY[0x1F40CDA58](a1, *(void *)&a2);
}

mach_port_t pthread_mach_thread_np(pthread_t a1)
{
  return MEMORY[0x1F40CDA60](a1);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_trylock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA90](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1F40CDAC8](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1F40CDB30]();
}

int pthread_set_qos_class_self_np(qos_class_t __qos_class, int __relative_priority)
{
  return MEMORY[0x1F40CDB48](*(void *)&__qos_class, *(void *)&__relative_priority);
}

int pthread_setname_np(const char *a1)
{
  return MEMORY[0x1F40CDB60](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1F40CDB70](a1, a2);
}

int pthread_threadid_np(pthread_t a1, __uint64_t *a2)
{
  return MEMORY[0x1F40CDB90](a1, a2);
}

int readdir_r(DIR *a1, dirent *a2, dirent **a3)
{
  return MEMORY[0x1F40CDC68](a1, a2, a3);
}

uint64_t sandbox_extension_consume()
{
  return MEMORY[0x1F40CDDF8]();
}

uint64_t sandbox_extension_issue_iokit_registry_entry_class()
{
  return MEMORY[0x1F40CDE30]();
}

uint64_t sandbox_extension_issue_mach()
{
  return MEMORY[0x1F40CDE40]();
}

void sandbox_free_error(char *errorbuf)
{
}

int sandbox_init(const char *profile, uint64_t flags, char **errorbuf)
{
  return MEMORY[0x1F40CDE70](profile, flags, errorbuf);
}

int sched_yield(void)
{
  return MEMORY[0x1F40CDEC8]();
}

kern_return_t semaphore_create(task_t task, semaphore_t *semaphore, int policy, int value)
{
  return MEMORY[0x1F40CDF00](*(void *)&task, semaphore, *(void *)&policy, *(void *)&value);
}

kern_return_t semaphore_destroy(task_t task, semaphore_t semaphore)
{
  return MEMORY[0x1F40CDF08](*(void *)&task, *(void *)&semaphore);
}

kern_return_t semaphore_signal(semaphore_t semaphore)
{
  return MEMORY[0x1F40CDF10](*(void *)&semaphore);
}

kern_return_t semaphore_timedwait(semaphore_t semaphore, mach_timespec_t wait_time)
{
  return ((uint64_t (*)(void, void))MEMORY[0x1F40CDF20])(*(void *)&semaphore, wait_time);
}

kern_return_t semaphore_wait(semaphore_t semaphore)
{
  return MEMORY[0x1F40CDF28](*(void *)&semaphore);
}

int sigaction(int a1, const sigaction *a2, sigaction *a3)
{
  return MEMORY[0x1F40CE018](*(void *)&a1, a2, a3);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strftime(char *a1, size_t a2, const char *a3, const tm *a4)
{
  return MEMORY[0x1F40CE198](a1, a2, a3, a4);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strsep(char **__stringp, const char *__delim)
{
  return (char *)MEMORY[0x1F40CE238](__stringp, __delim);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2A0](__str, __endptr, *(void *)&__base);
}

int sysctl(int *a1, u_int a2, void *a3, size_t *a4, void *a5, size_t a6)
{
  return MEMORY[0x1F40CE3C0](a1, *(void *)&a2, a3, a4, a5, a6);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

int sysctlnametomib(const char *a1, int *a2, size_t *a3)
{
  return MEMORY[0x1F40CE3E0](a1, a2, a3);
}

kern_return_t thread_info(thread_inspect_t target_act, thread_flavor_t flavor, thread_info_t thread_info_out, mach_msg_type_number_t *thread_info_outCnt)
{
  return MEMORY[0x1F40CE530](*(void *)&target_act, *(void *)&flavor, thread_info_out, thread_info_outCnt);
}

kern_return_t thread_policy_get(thread_inspect_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t *policy_infoCnt, BOOLean_t *get_default)
{
  return MEMORY[0x1F40CE538](*(void *)&thread, *(void *)&flavor, policy_info, policy_infoCnt, get_default);
}

kern_return_t thread_policy_set(thread_act_t thread, thread_policy_flavor_t flavor, thread_policy_t policy_info, mach_msg_type_number_t policy_infoCnt)
{
  return MEMORY[0x1F40CE540](*(void *)&thread, *(void *)&flavor, policy_info, *(void *)&policy_infoCnt);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1F40CE588](a1);
}

int usleep(useconds_t a1)
{
  return MEMORY[0x1F40CE608](*(void *)&a1);
}

void uuid_generate(uuid_t out)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

kern_return_t vm_allocate(vm_map_t target_task, vm_address_t *address, vm_size_t size, int flags)
{
  return MEMORY[0x1F40CE6A8](*(void *)&target_task, address, size, *(void *)&flags);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x1F40CE6C0](*(void *)&target_task, address, size);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}

void vsyslog(int a1, const char *a2, __darwin_va_list a3)
{
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x1F40CE8B0](__s, *(void *)&__c, __n);
}

uint64_t xpc_connection_set_oneshot_instance()
{
  return MEMORY[0x1F40CECC0]();
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x1F40CEE20](keys, values, count);
}

xpc_object_t xpc_dictionary_get_value(xpc_object_t xdict, const char *key)
{
  return (xpc_object_t)MEMORY[0x1F40CEF10](xdict, key);
}

void xpc_dictionary_set_value(xpc_object_t xdict, const char *key, xpc_object_t value)
{
}

xpc_type_t xpc_get_type(xpc_object_t object)
{
  return (xpc_type_t)MEMORY[0x1F40CF148](object);
}

xpc_object_t xpc_int64_create(int64_t value)
{
  return (xpc_object_t)MEMORY[0x1F40CF188](value);
}

uint64_t xpc_mach_send_copy_right()
{
  return MEMORY[0x1F40CF1C0]();
}

uint64_t xpc_mach_send_create()
{
  return MEMORY[0x1F40CF1C8]();
}

xpc_object_t xpc_null_create(void)
{
  return (xpc_object_t)MEMORY[0x1F40CF208]();
}

xpc_object_t xpc_shmem_create(void *region, size_t length)
{
  return (xpc_object_t)MEMORY[0x1F40CF268](region, length);
}